[
    {
        "number": 3000,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequence = []\n    for _ in range(n):\n        token = input().strip()\n        if token == '(':\n            sequence.append(token)\n        elif token == ')':\n            while sequence[-1]!= '(':\n                sequence.pop()\n            sequence.pop()\n    result = 0\n    for token in sequence:\n        if token == '+':\n            result += 1\n        elif token == '*':\n            result *= 2\n    return str(result % (10**9 + 7))"
    },
    {
        "number": 3001,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    steps = 0\n    while True:\n        steps += 1\n        for i in range(k):\n            wheels = [0] * 10\n            wheels[i] = 1\n            wheels[9 - i] = 1\n            for j in range(1, 10):\n                wheels[j] = wheels[j - 1] + wheels[j]\n            if ''.join(map(str, wheels)) == ''.join(map(str, reversed(wheels))):\n                break\n        if steps == 1000000000:\n            break\n    return str(steps)"
    },
    {
        "number": 3002,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    e = int(stdin.strip())\n    service_history = []\n    for _ in range(e):\n        y, m, o = map(int, stdin.strip().split())\n        service_history.append((y, m, o))\n\n    odometer = 0\n    for y, m, o in service_history:\n        odometer += o\n\n    if odometer == 0:\n        return \"seems legit\"\n\n    if odometer % 30000 == 0:\n        return \"seems legit\"\n\n    if odometer % 12 == 0:\n        return \"seems legit\"\n\n    return \"tampered odometer\""
    },
    {
        "number": 3003,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    edges = []\n    for _ in range(N):\n        edges.append(list(map(int, stdin.readline().strip().split())))\n\n    colors = [0] * N\n    colors[0] = 1\n    colors[1] = 2\n\n    for i in range(2, N):\n        for j in range(i):\n            if edges[i][j] == 0:\n                colors[i] = max(colors[i], colors[j]) + 1\n\n    return str(colors[N - 1])\n"
    },
    {
        "number": 3004,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"IMPOSSIBLE\"\n\n    colors = set()\n    for line in stdin.readlines():\n        color, a, b = line.strip().split()\n        colors.add(color)\n\n    if len(colors) > 3:\n        return \"IMPOSSIBLE\"\n\n    painted_sections = set()\n    for i in range(1, 10001):\n        if i in painted_sections:\n            continue\n        for j in range(a, b + 1):\n            painted_sections.add(j)\n\n    if len(painted_sections) < 3:\n        return \"IMPOSSIBLE\"\n\n    return str(len(painted_sections))\n"
    },
    {
        "number": 3005,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input string\n    input_string = stdin.strip()\n\n    # Initialize the variables\n    max_weight = 0\n    max_factoring = \"\"\n\n    # Iterate over each character in the string\n    for i in range(len(input_string)):\n        # Check if the current character is a letter\n        if input_string[i].isalpha():\n            # Initialize the variables for the current character\n            current_char = input_string[i]\n            current_weight = 1\n\n            # Iterate over each character in the string\n            for j in range(i + 1, len(input_string)):\n                # Check if the current character is the same as the next character\n                if input_string[j] == current_char:\n                    # Increment the weight for the current character\n                    current_weight += 1\n\n                    # If the current character is the same as the next character,\n                    # check if the current character is the same as the previous character\n                    if j > i + 1 and input_string[j - 1] == current_char:\n                        # If the current character is the same as the previous character,\n                        # check if the current character is the same as the next character\n                        if j < len(input_string) - 1 and input_string[j + 1] == current_char:\n                            # If the current character is the same as the next character,\n                            # check if the current character is the same as the previous character\n                            if j > i + 2 and input_string[j - 2] == current_char:\n                                # If the current character is the same as the previous character,\n                                # check if the current character is the same as the next character\n                                if j < len(input_string) - 2 and input_string[j + 2] == current_char:\n                                    # If the current character is the same as the next character,\n                                    # check if the current character is the same as the previous character\n                                    if j > i + 3 and input_string[j - 3] == current_char:\n                                        # If the current character is the same as the previous character,\n                                        # check if the current character is the same as the next character\n                                        if j < len(input_string) - 3 and input_string[j + 3] == current_char:\n                                            # If the current character is the same as the next character,\n                                            # check if the current character is the same as the previous character\n                                            if j > i + 4 and input_string[j - 4] == current_char:\n                                                # If the current character is the same as the previous character,\n                                                # check if the current character is the same as the next character\n                                                if j < len(input_string) - 4 and input_string[j + 4] == current_char:\n                                                    # If the current character is the same as the next character,\n                                                    # check if the current character is the same as the previous character\n                                                    if j > i + 5 and input_string[j - 5] == current_char:\n                                                        # If the current character is the same as the previous character,\n                                                        # check if the current character is the same as the next character\n                                                        if j < len(input_string) - 5 and input_string[j + 5] == current_char:\n                                                            # If the current character is the same as the next character,\n                                                            # check if the current character is the same as the previous character\n                                                            if j > i + 6 and input_string[j - 6] == current_char:\n                                                                # If the current character is the same as the previous character,\n                                                                # check if the current character is the same as the next character\n                                                                if j < len(input_string) - 6 and input_string[j + 6] == current_char:\n                                                                    # If the current character is the same as the next character,\n                                                                    # check if the current character is the same as the previous character\n                                                                    if j > i + 7 and input_string[j - 7] == current_char:\n                                                                        # If the current character is the same as the previous character,\n                                                                        # check if the current character is the same as the next character\n                                                                        if j < len(input_string) - 7 and input_string[j + 7] == current_char:\n                                                                            # If the current character is the same as the next character,\n                                                                            # check if the current character is the same as the previous character\n                                                                            if j > i + 8 and input_string[j - 8] == current_char:\n                                                                                # If the current character is the same as the previous character,\n                                                                                # check if the current character is the same as the next character\n                                                                                if j < len(input_string) - 8 and input_string[j + 8] =="
    },
    {
        "number": 3006,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    programs = []\n    for line in stdin.splitlines():\n        if line.startswith('D'):\n            programs.append(('D', int(line.split()[1])))\n        elif line.startswith('I'):\n            programs.append(('I', int(line.split()[1]), line.split()[2]))\n        elif line.startswith('E'):\n            break\n    programs.reverse()\n    for i in range(len(programs)):\n        for j in range(i + 1, len(programs)):\n            if programs[i][0] == programs[j][0]:\n                if programs[i][1] == programs[j][1]:\n                    if programs[i][2] == programs[j][2]:\n                        programs[i] = ('E', programs[i][1])\n                        programs[j] = ('E', programs[j][1])\n                else:\n                    programs[i] = ('E', programs[i][1])\n                    programs[j] = ('E', programs[j][1])\n            elif programs[i][0] < programs[j][0]:\n                programs[i] = ('E', programs[i][1])\n            else:\n                programs[j] = ('E', programs[j][1])\n    if len(programs) == 1:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 3007,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, b, f, t0, t1, t2 = map(int, stdin.split())\n    max_bling = 0\n    for i in range(1, 30):\n        max_bling += (f * 100) * (t0 + t1 + t2) * (i + 1)\n    return str(max_bling)"
    },
    {
        "number": 3008,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    max_distinct_ranks = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if a[i] + K < a[j] or b[i] + K < b[j]:\n                max_distinct_ranks = max(max_distinct_ranks, j - i)\n\n    return str(max_distinct_ranks)"
    },
    {
        "number": 3009,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lines = []\n    for _ in range(n):\n        line = list(map(int, stdin.readline().strip().split()))\n        lines.append(line)\n\n    def is_valid(x, y, e):\n        return 0 <= x <= 99 and 0 <= y <= 99 and -2000 <= e <= 2000\n\n    def is_valid_line(line):\n        for i in range(len(line) - 1):\n            if line[i] == line[i + 1]:\n                return False\n        return True\n\n    def find_line(x, y, e):\n        for line in lines:\n            if is_valid_line(line) and line[0] == x and line[-1] == y and sum(line) == e:\n                return line\n        return None\n\n    def find_shortest_line(x, y, e):\n        line = find_line(x, y, e)\n        if line is None:\n            return \"IMPOSSIBLE\"\n        return min(len(line), len(line) - 1)\n\n    x, y, e = lines[0]\n    result = find_shortest_line(x, y, e)\n    return str(result)\n"
    },
    {
        "number": 3010,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    points = []\n    for _ in range(n):\n        x0, y0, x1, y1 = map(int, stdin.strip().split())\n        points.append((x0, y0))\n        points.append((x1, y1))\n\n    def intersects(p0, p1, p2, p3):\n        return (p0[0] * (p1[1] - p2[1]) - p0[1] * (p1[0] - p2[0])) == (p0[0] * (p3[1] - p2[1]) - p0[1] * (p3[0] - p2[0]))\n\n    def touches(p0, p1, p2, p3):\n        return (p0[0] * (p1[1] - p2[1]) - p0[1] * (p1[0] - p2[0]))!= (p0[0] * (p3[1] - p2[1]) - p0[1] * (p3[0] - p2[0]))\n\n    count = 0\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            if intersects(points[i], points[j], points[i], points[j]):\n                count += 1\n            elif touches(points[i], points[j], points[i], points[j]):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 3011,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n            if i > 1 and i % 3 == 0:\n                count += 1\n    if count == 0:\n        return -1\n    else:\n        return str(count)"
    },
    {
        "number": 3012,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a11, a12, a21, a22, N = map(int, stdin.split())\n    if a11 + a12 + a21 + a22 > 5000 or N > 10**18:\n        return \"Invalid input\"\n\n    def count_sequences(n: int) -> int:\n        count = 0\n        for i in range(1, N + 1):\n            for j in range(i):\n                if (a11, a12, a21, a22, i, j)!= (a11, a12, a21, a22, j, i):\n                    count += 1\n        return count\n\n    return str(count_sequences(N))"
    },
    {
        "number": 3013,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, t_x, t_y = map(float, stdin.split())\n    if not (0.01 <= b <= 10 and -10000 <= t_x <= 10000 and -10000 <= t_y <= 10000):\n        return \"Invalid input\"\n\n    def polar_to_cartesian(r, phi):\n        return r * math.cos(phi), r * math.sin(phi)\n\n    def cartesian_to_polar(x, y):\n        return math.sqrt(x**2 + y**2), math.atan2(y, x)\n\n    def spiral_to_target(r, phi, target_x, target_y):\n        target_r, target_phi = polar_to_cartesian(target_x, target_y)\n        target_r = math.sqrt(target_r**2 + target_phi**2)\n        target_phi = math.atan2(target_y, target_x)\n\n        while True:\n            r, phi = polar_to_cartesian(r, phi)\n            r = math.sqrt(r**2 + phi**2)\n            phi = math.atan2(phi, r)\n\n            if r > target_r:\n                r, phi = polar_to_cartesian(r, phi)\n                r = math.sqrt(r**2 + phi**2)\n                phi = math.atan2(phi, r)\n\n            if r <= target_r and phi <= target_phi:\n                return polar_to_cartesian(r, phi)\n\n    def compute_button_press_location(r, phi, target_x, target_y):\n        button_press_location = spiral_to_target(r, phi, target_x, target_y)\n        button_press_location = polar_to_cartesian(button_press_location[0], button_press_location[1])\n        return button_press_location\n\n    button_press_location = compute_button_press_location(b, 0, t_x, t_y)\n    return f\"{button_press_location[0]:.5f} {button_press_location[1]:.5f}\""
    },
    {
        "number": 3014,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    corridors = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        corridors.append((u, v))\n\n    def dfs(u, visited):\n        if u in visited:\n            return False\n        visited.add(u)\n        for v, w in corridors:\n            if v == u:\n                continue\n            if dfs(v, visited):\n                return True\n        return False\n\n    visited = set()\n    for u in range(1, n + 1):\n        if dfs(u, visited):\n            return \"0\"\n\n    return str(len(corridors)) + \"\\n\" + \"\\n\".join(map(str, corridors))"
    },
    {
        "number": 3015,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tubes = []\n    for _ in range(m):\n        a, b, w = map(int, stdin.split())\n        tubes.append((a, b, w))\n\n    def is_valid(a, b, tubes):\n        for t in tubes:\n            if a <= t[0] <= b and a <= t[1] <= b:\n                return True\n        return False\n\n    def get_tube(a, b, tubes):\n        for t in tubes:\n            if a <= t[0] <= b and a <= t[1] <= b:\n                return t\n        return None\n\n    def get_time(a, b, tubes):\n        for t in tubes:\n            if a <= t[0] <= b and a <= t[1] <= b:\n                return t[2]\n        return float('inf')\n\n    def get_ball(a, tubes):\n        for t in tubes:\n            if a <= t[0] <= a:\n                return t[0]\n        return None\n\n    def get_bed(a, tubes):\n        for t in tubes:\n            if a <= t[1] <= a:\n                return t[0]\n        return None\n\n    def get_hemisphere(a, tubes):\n        if a <= get_bed(a, tubes):\n            return 'left'\n        else:\n            return 'right'\n\n    def get_remaining_time(a, tubes):\n        for t in tubes:\n            if a <= t[0] <= a:\n                return t[2]\n        return float('inf')\n\n    def get_remaining_balls(a, tubes):\n        for t in tubes:\n            if a <= t[0] <= a:\n                return t[1]\n        return 0\n\n    def get_remaining_tubes(a, tubes):\n        for t in tubes:\n            if a <= t[0] <= a:\n                return t[1] - t[0]\n        return 0\n\n    def get_remaining_hemisphere(a, tubes):\n        if a <= get_bed(a, tubes):\n            return get_remaining_balls(a, tubes)\n        else:\n            return get_remaining_tubes(a, tubes)\n\n    def get_remaining_time_left(a, tubes):\n        for t in tubes:\n            if a <= t[0] <= a:\n                return t[2]\n        return float('inf')\n\n    def get_remaining_time_right(a, tubes):\n        for t in tubes:\n            if a <= t[1] <= a:\n                return t[2]\n        return float('inf')\n\n    def get_remaining_hemisphere_left(a, tubes):\n        if a <= get_bed(a, tubes):\n            return get_remaining_time_left(a, tubes)\n        else:\n            return get_remaining_time_right(a, tubes)\n\n    def get_remaining_hemisphere_right(a, tubes):\n        if a <= get_bed(a, tubes):\n            return get_remaining_time_right(a, tubes)\n        else:\n            return get_remaining_time_left(a, tubes)\n\n    def get_remaining_time_left_left(a, tubes):\n        for t in tubes:\n            if a <= t[0] <= a:\n                return t[2]\n        return float('inf')\n\n    def get_remaining_time_left_right(a, tubes):\n        for t in tubes:\n            if a <= t[1] <= a:\n                return t[2]\n        return float('inf')\n\n    def get_remaining_time_right_left(a, tubes):\n        for t in tubes:\n            if a <= t[0] <= a:\n                return t[2]\n        return float('inf')\n\n    def get_remaining_time_right_right(a, tubes):\n        for t in tubes:\n            if a <= t[1] <= a:\n                return t[2]\n        return float('inf')\n\n    def get_remaining_hemisphere_left_left(a, tubes):\n        if a <= get_bed(a, tubes):\n            return get_remaining_time_left_left(a, tubes)\n        else:\n            return get_remaining_time_left_right(a, tubes)\n\n    def get_remaining_hemisphere_left_right(a, tubes):\n        if a <= get_bed(a, tubes):\n            return get_remaining_time_left_right(a, t"
    },
    {
        "number": 3016,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l = map(int, stdin.split())\n    colors = list(range(1, n+1))\n    colors.extend(map(int, stdin.split()))\n    colors.sort()\n    colors = set(colors)\n    colors = list(colors)\n    colors.sort()\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i] for i in range(len(colors))]\n    colors = [colors[i"
    },
    {
        "number": 3017,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    count = 0\n    for i in range(10**18):\n        if i % 2 == 0:\n            continue\n        if str(i).count('2') == e:\n            count += 1\n    return str(count)"
    },
    {
        "number": 3018,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, T = map(int, stdin.split())\n    dice = list(map(int, stdin.split()))\n    n = len(dice)\n    total_sum = sum(dice)\n    target_sum = T\n    min_dice = 0\n    max_dice = 0\n\n    for i in range(n):\n        if total_sum - dice[i] >= target_sum:\n            min_dice = i + 1\n            break\n        else:\n            max_dice = i + 1\n\n    if min_dice > max_dice:\n        min_dice, max_dice = max_dice, min_dice\n\n    return str(min_dice)"
    },
    {
        "number": 3019,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = list(map(int, stdin.readline().strip().split()))\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n: int) -> list:\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def max_revenue(n: int) -> int:\n        max_revenue = 0\n        for i in range(1, N + 1):\n            if is_prime(S[i - 1]) and len(prime_factors(S[i - 1])) == 2:\n                max_revenue += S[i - 1]\n        return max_revenue\n\n    return str(max_revenue)\n"
    },
    {
        "number": 3020,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = 1\n    while a * a < N:\n        a += 1\n    return str(a)"
    },
    {
        "number": 3021,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = stdin.split()[0]\n    N = int(stdin.split()[1])\n    derived_alphabet = set(chr(ord(L) + i) for i in range(26))\n\n    for i in range(N):\n        word = stdin.split()[i+1]\n        if len(word) > 1000:\n            return \"IMPOSSIBLE\"\n\n        for j in range(len(word)):\n            if word[j] not in derived_alphabet:\n                return \"IMPOSSIBLE\"\n\n        for j in range(len(word)):\n            for k in range(j+1, len(word)):\n                if word[j]!= word[k]:\n                    return \"IMPOSSIBLE\"\n\n    return \"adcb\""
    },
    {
        "number": 3022,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    cookies = [a, b, c]\n    max_cookies = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                cookies[i] += cookies[j]\n                cookies[j] += cookies[k]\n                cookies[k] += cookies[i]\n                if cookies[i] > max_cookies:\n                    max_cookies = cookies[i]\n    return str(max_cookies)"
    },
    {
        "number": 3023,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    candles = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        candles.append((x, y))\n\n    cuts = []\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        if a == 0 and b == 0:\n            continue\n        cuts.append((a, b, c))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candles[j], candles[k], candles[l]) <= r:\n                        break\n                    if distance(candles[i], candle"
    },
    {
        "number": 3024,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    max_k = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                if is_palindrome(s[i:j+1]):\n                    max_k = max(max_k, j-i+1)\n    return str(max_k)\n\ndef"
    },
    {
        "number": 3025,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = list(map(int, stdin.split()))\n\n    def dfs(v, path):\n        if len(path) == n - 2:\n            return g[v]\n\n        for i in range(m):\n            if i == 0 or i == m - 1:\n                continue\n\n            if path[i] == path[i - 1]:\n                continue\n\n            if path[i] < path[i - 1]:\n                continue\n\n            if dfs(path[i], path[:i] + [path[i]] + path[i + 1:]):\n                return True\n\n        return False\n\n    return str(dfs(1, []))\n"
    },
    {
        "number": 3026,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequence = list(map(int, stdin.strip().split()))\n\n    # Initialize the LIS array with 1 for each element\n    lis = [1] * n\n\n    # Initialize the index of the current LIS element\n    current_index = 0\n\n    # Iterate through the sequence\n    for i in range(1, n):\n        # Find the index of the maximum element in the LIS array\n        max_index = 0\n        for j in range(current_index):\n            if lis[j] > lis[max_index]:\n                max_index = j\n\n        # If the current element is the maximum element, update the LIS array\n        if lis[max_index] == i:\n            lis[max_index] = i\n            current_index = max_index\n        else:\n            # If the current element is not the maximum element, swap it with the current LIS element\n            lis[current_index] = lis[max_index]\n            current_index = max_index\n\n    # Find all the critical elements in the sequence\n    critical_elements = []\n    for i in range(current_index, n):\n        if lis[i] == i + 1:\n            critical_elements.append(i + 1)\n\n    # Sort the critical elements in ascending order\n    critical_elements.sort()\n\n    # Output the critical elements\n    if len(critical_elements) == 0:\n        return \"-1\"\n    else:\n        return \" \".join(map(str, critical_elements))"
    },
    {
        "number": 3027,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    mark = list(stdin)\n    min_nubs = 0\n\n    for i in range(n):\n        for j in range(m):\n            if mark[i][j] == '#':\n                min_nubs += 1\n                mark[i][j] = '.'\n\n    return str(min_nubs)"
    },
    {
        "number": 3028,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    board = [[0] * m for _ in range(n)]\n    moves = []\n\n    for i in range(n):\n        for j in range(m):\n            board[i][j] = int(stdin.split()[j])\n\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                moves.append((i, j))\n                for k in range(i - 1, -1, -1):\n                    for l in range(j - 1, -1, -1):\n                        if board[k][l] == p:\n                            board[k][l] = 1\n                            moves.append((k, l))\n                            break\n                for k in range(i + 1, n):\n                    for l in range(j - 1, -1, -1):\n                        if board[k][l] == p:\n                            board[k][l] = 1\n                            moves.append((k, l))\n                            break\n                for k in range(i - 1, -1, -1):\n                    for l in range(j + 1, m):\n                        if board[k][l] == p:\n                            board[k][l] = 1\n                            moves.append((k, l))\n                            break\n                for k in range(i + 1, n):\n                    for l in range(j + 1, m):\n                        if board[k][l] == p:\n                            board[k][l] = 1\n                            moves.append((k, l))\n                            break\n\n    if len(moves) == 0:\n        return \"-1\"\n\n    moves.sort()\n    moves = [i + 1 for i in moves]\n    return \" \".join(map(str, moves))\n"
    },
    {
        "number": 3029,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    labels = list(map(int, stdin.readline().strip().split()))\n\n    def dfs(v, parent):\n        nonlocal L, M\n        if v == 1:\n            L = 1\n            return\n        dfs(parent, v)\n        L = max(L, 1 + dfs(parent, labels[v - 1]))\n        M = (M + (L - 1) % 11092019) % 11092019\n\n    dfs(2, None)\n    return f\"{L} {M}\""
    },
    {
        "number": 3030,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a, b))\n\n    def dfs(node, parent):\n        if node == 1:\n            return 1\n        if node not in parent:\n            return 0\n        return max(dfs(parent[node], node), dfs(node, parent[node]))\n\n    def max_heapify(node, n):\n        largest = node\n        left = 2 * node + 1\n        right = 2 * node + 2\n        if left < n and edges[left][0] > edges[largest][0]:\n            largest = left\n        if right < n and edges[right][0] > edges[largest][0]:\n            largest = right\n        if largest!= node:\n            edges[node], edges[largest] = edges[largest], edges[node]\n            max_heapify(largest, n)\n\n    def build_heap(n):\n        for i in range(n // 2 - 1, -1, -1):\n            max_heapify(i, n)\n\n    def heap_to_list(node, parent):\n        result = []\n        while node!= 1:\n            result.append(node)\n            node = parent[node]\n        result.append(node)\n        return result\n\n    def find_largest_subset(n):\n        build_heap(n)\n        result = []\n        for i in range(n):\n            result.append(heap_to_list(i, {}))\n        return result\n\n    largest_subset = find_largest_subset(n)\n    return str(len(largest_subset))"
    },
    {
        "number": 3031,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    edges = []\n    for _ in range(n - 1):\n        a, b, c = map(int, stdin.strip().split())\n        edges.append((a, b, c))\n\n    def dfs(node, visited):\n        visited[node] = True\n        for neighbor in edges[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited)\n\n    good_nodes = [i for i in range(n) if visited[i]]\n    return str(len(good_nodes)) + '\\n' + '\\n'.join(map(str, good_nodes))"
    },
    {
        "number": 3032,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, s = map(int, stdin.split())\n    program = stdin.split()\n    program = [int(x) for x in program]\n\n    def execute(program, variables):\n        instructions = []\n        for i, instruction in enumerate(program):\n            if instruction == 0:\n                instructions.append(f\"LOAD V{variables[i]}\")\n            elif instruction == 1:\n                instructions.append(f\"STORE V{variables[i]}\")\n            elif instruction == 2:\n                instructions.append(f\"LOAD V{variables[i]}\")\n                instructions.append(f\"STORE V{variables[i]}\")\n            elif instruction == 3:\n                instructions.append(f\"LOAD V{variables[i]}\")\n                instructions.append(f\"LOAD V{variables[i+1]}\")\n                instructions.append(f\"STORE V{variables[i]}\")\n            elif instruction == 4:\n                instructions.append(f\"LOAD V{variables[i]}\")\n                instructions.append(f\"LOAD V{variables[i+1]}\")\n                instructions.append(f\"LOAD V{variables[i+2]}\")\n                instructions.append(f\"STORE V{variables[i]}\")\n            elif instruction == 5:\n                instructions.append(f\"LOAD V{variables[i]}\")\n                instructions.append(f\"LOAD V{variables[i+1]}\")\n                instructions.append(f\"LOAD V{variables[i+2]}\")\n                instructions.append(f\"LOAD V{variables[i+3]}\")\n                instructions.append(f\"STORE V{variables[i]}\")\n            elif instruction == 6:\n                instructions.append(f\"LOAD V{variables[i]}\")\n                instructions.append(f\"LOAD V{variables[i+1]}\")\n                instructions.append(f\"LOAD V{variables[i+2]}\")\n                instructions.append(f\"LOAD V{variables[i+3]}\")\n                instructions.append(f\"LOAD V{variables[i+4]}\")\n                instructions.append(f\"STORE V{variables[i]}\")\n            elif instruction == 7:\n                instructions.append(f\"LOAD V{variables[i]}\")\n                instructions.append(f\"LOAD V{variables[i+1]}\")\n                instructions.append(f\"LOAD V{variables[i+2]}\")\n                instructions.append(f\"LOAD V{variables[i+3]}\")\n                instructions.append(f\"LOAD V{variables[i+4]}\")\n                instructions.append(f\"LOAD V{variables[i+5]}\")\n                instructions.append(f\"STORE V{variables[i]}\")\n            elif instruction == 8:\n                instructions.append(f\"LOAD V{variables[i]}\")\n                instructions.append(f\"LOAD V{variables[i+1]}\")\n                instructions.append(f\"LOAD V{variables[i+2]}\")\n                instructions.append(f\"LOAD V{variables[i+3]}\")\n                instructions.append(f\"LOAD V{variables[i+4]}\")\n                instructions.append(f\"LOAD V{variables[i+5]}\")\n                instructions.append(f\"LOAD V{variables[i+6]}\")\n                instructions.append(f\"STORE V{variables[i]}\")\n            elif instruction == 9:\n                instructions.append(f\"LOAD V{variables[i]}\")\n                instructions.append(f\"LOAD V{variables[i+1]}\")\n                instructions.append(f\"LOAD V{variables[i+2]}\")\n                instructions.append(f\"LOAD V{variables[i+3]}\")\n                instructions.append(f\"LOAD V{variables[i+4]}\")\n                instructions.append(f\"LOAD V{variables[i+5]}\")\n                instructions.append(f\"LOAD V{variables[i+6]}\")\n                instructions.append(f\"LOAD V{variables[i+7]}\")\n                instructions.append(f\"STORE V{variables[i]}\")\n            elif instruction == 10:\n                instructions.append(f\"LOAD V{variables[i]}\")\n                instructions.append(f\"LOAD V{variables[i+1]}\")\n                instructions.append(f\"LOAD V{variables[i+2]}\")\n                instructions.append(f\"LOAD V{variables[i+3]}\")\n                instructions.append(f\"LOAD V{variables[i+4]}\")\n                instructions.append(f\"LOAD V{variables[i+5]}\")\n                instructions.append(f\"LOAD V{variables[i+6]}\")\n                instructions.append(f\"LOAD V{variables[i+7]}\")\n                instructions.append(f\"LOAD V{variables"
    },
    {
        "number": 3033,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B, N = map(int, stdin.split())\n    if B < 2 or B > 10000 or N < 0 or N > 2**63:\n        return \"impossible\"\n\n    def f(n: int) -> int:\n        if n == 0:\n            return 0\n        return n * f(n // 10)\n\n    X = 0\n    while True:\n        X += 1\n        if f(X) == N:\n            break\n\n    return str(X)\n"
    },
    {
        "number": 3034,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, t, c, r = map(int, stdin.split())\n    clouds = []\n    for _ in range(c):\n        s, e, p, a = map(int, stdin.split())\n        clouds.append((s, e, p, a))\n\n    roofs = []\n    for _ in range(r):\n        x, y = map(int, stdin.split())\n        roofs.append((x, y))\n\n    def distance(x1, y1, x2, y2):\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    def is_in_zipcode(x, y, zipcode):\n        return x >= roofs[0][0] and x <= roofs[-1][0] and y >= roofs[0][1] and y <= roofs[-1][1]\n\n    def is_in_cloud(x, y, zipcode, cloud):\n        s, e, p, a = cloud\n        return s <= x <= e and p >= 0.5\n\n    def expected_rain(x, y, zipcode, cloud):\n        s, e, p, a = cloud\n        return a * (e - s) * (1 - p)\n\n    def min_rain(clouds):\n        min_rain = float('inf')\n        for cloud in clouds:\n            min_rain = min(min_rain, expected_rain(roofs[0][0], roofs[0][1], roofs[0][0], cloud))\n        return min_rain\n\n    def min_rain_in_zipcode(zipcode, clouds):\n        min_rain = float('inf')\n        for cloud in clouds:\n            min_rain = min(min_rain, expected_rain(roofs[0][0], roofs[0][1], roofs[0][0], cloud))\n        return min_rain\n\n    def min_rain_in_zipcode_with_short_breaks(zipcode, clouds):\n        min_rain = float('inf')\n        for cloud in clouds:\n            min_rain = min(min_rain, expected_rain(roofs[0][0], roofs[0][1], roofs[0][0], cloud))\n        return min_rain\n\n    def min_rain_in_zipcode_with_short_breaks_and_roof(zipcode, clouds):\n        min_rain = float('inf')\n        for cloud in clouds:\n            min_rain = min(min_rain, expected_rain(roofs[0][0], roofs[0][1], roofs[0][0], cloud))\n        return min_rain\n\n    def min_rain_in_zipcode_with_short_breaks_and_roof_and_front_door(zipcode, clouds):\n        min_rain = float('inf')\n        for cloud in clouds:\n            min_rain = min(min_rain, expected_rain(roofs[0][0], roofs[0][1], roofs[0][0], cloud))\n        return min_rain\n\n    def min_rain_in_zipcode_with_short_breaks_and_roof_and_front_door_and_roof(zipcode, clouds):\n        min_rain = float('inf')\n        for cloud in clouds:\n            min_rain = min(min_rain, expected_rain(roofs[0][0], roofs[0][1], roofs[0][0], cloud))\n        return min_rain\n\n    def min_rain_in_zipcode_with_short_breaks_and_roof_and_front_door_and_roof_and_front_door(zipcode, clouds):\n        min_rain = float('inf')\n        for cloud in clouds:\n            min_rain = min(min_rain, expected_rain(roofs[0][0], roofs[0][1], roofs[0][0], cloud))\n        return min_rain\n\n    def min_rain_in_zipcode_with_short_breaks_and_roof_and_front_door_and_roof_and_front_door_and_roof(zipcode, clouds):\n        min_rain = float('inf')\n        for cloud in clouds:\n            min_rain = min(min_rain, expected_rain(roofs[0][0], roofs[0][1], roofs[0][0], cloud))\n        return min_rain\n\n    def min_rain_in_zipcode_with_short_breaks_and_roof_and_front_door_and_roof_and_front_door_and_roof_and_front_door("
    },
    {
        "number": 3035,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    blue_lemonade = {}\n    red_lemonade = {}\n    for _ in range(N):\n        lemonade_name, wanted_lemonade, exchange_rate = stdin.strip().split()\n        blue_lemonade[lemonade_name] = float(exchange_rate)\n        red_lemonade[wanted_lemonade] = float(exchange_rate)\n\n    blue_lemonade_sum = sum(blue_lemonade.values())\n    red_lemonade_sum = sum(red_lemonade.values())\n\n    blue_lemonade_ratio = blue_lemonade_sum / 10\n    red_lemonade_ratio = red_lemonade_sum / 10\n\n    blue_lemonade_ratio_diff = abs(blue_lemonade_ratio - red_lemonade_ratio)\n    blue_lemonade_ratio_diff = min(blue_lemonade_ratio_diff, 1)\n\n    blue_lemonade_ratio_diff = round(blue_lemonade_ratio_diff, 6)\n\n    if blue_lemonade_ratio_diff > 0.5:\n        blue_lemonade_ratio_diff = 10\n\n    return str(blue_lemonade_ratio_diff)\n"
    },
    {
        "number": 3036,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, m, d, n = map(int, stdin.split())\n    brands = list(map(int, stdin.split()))\n    starter_dishes = list(map(int, stdin.split()))\n    main_dishes = list(map(int, stdin.split()))\n    desserts = list(map(int, stdin.split()))\n    incompatible_dishes = list(map(int, stdin.split()))\n\n    def is_compatible(i, j):\n        return i not in incompatible_dishes and j not in incompatible_dishes\n\n    def get_ingredients(i):\n        return [brands[i]] + [brands[j] for j in starter_dishes if is_compatible(i, j)] + [brands[j] for j in main_dishes if is_compatible(i, j)] + [brands[j] for j in desserts if is_compatible(i, j)]\n\n    def get_ingredients_count(ingredients):\n        return len(set(ingredients))\n\n    def get_ingredients_count_by_brand(ingredients):\n        return {brand: get_ingredients_count(ingredients) for brand in set(ingredients)}\n\n    def get_ingredients_count_by_brand_and_ingredient(ingredients):\n        return {brand: {ingredient: get_ingredients_count(ingredients) for ingredient in set(ingredients)} for brand in set(ingredients)}\n\n    def get_ingredients_count_by_brand_and_ingredient_and_dish(ingredients, dish):\n        return {brand: {ingredient: get_ingredients_count(ingredients) for ingredient in set(ingredients)} for brand in set(ingredients) if is_compatible(dish, brand)}\n\n    def get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient(ingredients, dish, ingredient):\n        return {brand: {ingredient: get_ingredients_count(ingredients) for ingredient in set(ingredients)} for brand in set(ingredients) if is_compatible(dish, brand) and ingredient in get_ingredients_count_by_brand_and_ingredient_and_dish(ingredients, dish)}\n\n    def get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient_and_ingredient_and_ingredient(ingredients, dish, ingredient1, ingredient2, ingredient3):\n        return {brand: {ingredient: get_ingredients_count(ingredients) for ingredient in set(ingredients)} for brand in set(ingredients) if is_compatible(dish, brand) and ingredient1 in get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient(ingredients, dish) and ingredient2 in get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient(ingredients, dish) and ingredient3 in get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient(ingredients, dish)}\n\n    def get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient(ingredients, dish, ingredient1, ingredient2, ingredient3, ingredient4, ingredient5):\n        return {brand: {ingredient: get_ingredients_count(ingredients) for ingredient in set(ingredients)} for brand in set(ingredients) if is_compatible(dish, brand) and ingredient1 in get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient_and_ingredient(ingredients, dish) and ingredient2 in get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient_and_ingredient(ingredients, dish) and ingredient3 in get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient_and_ingredient_and_ingredient(ingredients, dish) and ingredient4 in get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient_and_ingredient_and_ingredient_and_ingredient(ingredients, dish) and ingredient5 in get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient(ingredients, dish)}\n\n    def get_ingredients_count_by_brand_and_ingredient_and_dish_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_and_ingredient_"
    },
    {
        "number": 3037,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    board = [list(input()) for _ in range(h)]\n    marker_time = 0\n    marker_dry_out_time = 0\n\n    for i in range(n):\n        command = input().split()\n        direction = command[0]\n        distance = int(command[1])\n\n        if direction == 'up':\n            marker_time += distance\n        elif direction == 'down':\n            marker_time -= distance\n        elif direction == 'left':\n            marker_dry_out_time += distance\n        elif direction == 'right':\n            marker_dry_out_time -= distance\n\n    if marker_time > h * w:\n        return '-1 -1'\n\n    min_time = min(marker_time, marker_dry_out_time)\n    max_time = max(marker_time, marker_dry_out_time)\n\n    return str(min_time) +'' + str(max_time)\n"
    },
    {
        "number": 3038,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B, k = map(int, stdin.split())\n    companies = []\n    for _ in range(k):\n        l, n1, n2, *rest = map(int, stdin.split())\n        companies.append((l, n1, n2, rest))\n\n    def pack_size(l, n1, n2, *rest):\n        return sum(n1) + sum(n2) + sum(rest)\n\n    def pack_amount(l, n1, n2, *rest):\n        return pack_size(l, n1, n2, *rest)\n\n    def pack_amount_sum(packs):\n        return sum(pack_amount(l, n1, n2, *rest) for l, n1, n2, rest in packs)\n\n    def pack_amount_min(packs):\n        return min(pack_amount_sum(packs), key=pack_amount_sum)\n\n    packs = [pack_amount(l, n1, n2, *rest) for l, n1, n2, rest in companies]\n    pack_amounts = sorted(packs, reverse=True)\n\n    if pack_amounts[0] < B:\n        return \"impossible\"\n\n    return pack_amount_min(companies)"
    },
    {
        "number": 3039,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    input_lines = stdin.split('\\n')\n    input_squares = []\n    for line in input_lines:\n        input_squares.append(line.strip())\n\n    # Check if the input is valid\n    if len(input_squares)!= 6:\n        return \"cannot fold\"\n\n    # Initialize the result\n    result = \"cannot fold\"\n\n    # Check if the input is valid\n    for i in range(6):\n        for j in range(6):\n            if input_squares[i][j] == \"#\":\n                # Check if the input is valid\n                for k in range(i, j):\n                    if input_squares[k][j] == \"#\":\n                        # Check if the input is valid\n                        for l in range(k, j):\n                            if input_squares[l][j] == \"#\":\n                                # Check if the input is valid\n                                for m in range(l, j):\n                                    if input_squares[m][j] == \"#\":\n                                        # Check if the input is valid\n                                        for n in range(m, j):\n                                            if input_squares[n][j] == \"#\":\n                                                # Check if the input is valid\n                                                for o in range(n, j):\n                                                    if input_squares[o][j] == \"#\":\n                                                        # Check if the input is valid\n                                                        for p in range(o, j):\n                                                            if input_squares[p][j] == \"#\":\n                                                                # Check if the input is valid\n                                                                for q in range(p, j):\n                                                                    if input_squares[q][j] == \"#\":\n                                                                        # Check if the input is valid\n                                                                        for r in range(q, j):\n                                                                            if input_squares[r][j] == \"#\":\n                                                                                # Check if the input is valid\n                                                                                for s in range(r, j):\n                                                                                    if input_squares[s][j] == \"#\":\n                                                                                        # Check if the input is valid\n                                                                                        for t in range(s, j):\n                                                                                            if input_squares[t][j] == \"#\":\n                                                                                                # Check if the input is valid\n                                                                                                for u in range(t, j):\n                                                                                                    if input_squares[u][j] == \"#\":\n                                                                                                        # Check if the input is valid\n                                                                                                        for v in range(u, j):\n                                                                                                            if input_squares[v][j] == \"#\":\n                                                                                                                # Check if the input is valid\n                                                                                                                for w in range(v, j):\n                                                                                                                    if input_squares[w][j] == \"#\":\n                                                                                                                        # Check if the input is valid\n                                                                                                                        for x in range(w, j):\n                                                                                                                            if input_squares[x][j] == \"#\":\n                                                                                                                                # Check if the input is valid\n                                                                                                                                for y in range(x, j):\n                                                                                                                                    if input_squares[y][j] == \"#\":\n                                                                                                                                        # Check if the input is valid\n                                                                                                                                        for z in range(y, j):\n                                                                                                                                            if input_squares[z][j] == \"#\":\n                                                                                                                                                # Check if the input is valid\n                                                                                                                                                for aa in range(z, j):\n                                                                                                                                                    if input_squares[aa][j] == \"#\":\n                                                                                                                                                        # Check if the input is valid\n                                                                                                                                                        for ab in range(aa, j):\n                                                                                                                                                            if input_squares[ab][j] == \"#\":\n                                                                                                                                                                # Check if the input is valid\n                                                                                                                                                                for ac in range(ab, j):\n                                                                                                                                                                    if input_squares[ac][j] == \"#\":\n                                                                                                                                                                        # Check if the input is valid\n                                                                                                                                                                        for ad in range(ac, j):\n                                                                                                                                                                            if input_squares[ad][j] == \"#\":\n                                                                                                                                                                                # Check if the input is valid\n                                                                                                                                                                                for ae in range(ad, j):\n                                                                                                                                                                                    if input_squares[ae][j] == \"#\":\n                                                                                                                                                                                        # Check if the input is valid\n                                                                                                                                                                                        for af in range(ae, j):\n                                                                                                                                                                                            if input_squares[af][j] == \"#\":\n                                                                                                                                                                                                # Check if the input is valid\n                                                                                                                                                                                                for ag in range(af, j):\n                                                                                                                                                                                            if input_squares[ag][j] == \"#\":\n                                                                                                                                                                                                # Check if the input is valid\n                                                                                                                                                                                                for ah in range(ag, j):\n                                                                                                                                                                                            if input_squares[ah][j] == \"#\":\n                                                                                                                                                                                                # Check if the input is valid\n                                                                                                                                                                                                for ai in range(ah, j):\n                                                                                                                                                                                            if input_squares[ai][j] == \"#\":\n                                                                                                                                                                                                # Check if the input is valid\n                                                                                                                                                                                                for aj in range(ai, j):\n                                                                                                                                                                                            if input_squares[aj][j] == \"#\":\n                                                                                                                                                                                                # Check if the input"
    },
    {
        "number": 3040,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    current_substring = \"\"\n    max_substring = \"\"\n\n    # Iterate through the input string\n    for char in stdin:\n        # If the current character is the same as the previous character, increment the current length\n        if char == current_substring[-1]:\n            current_length += 1\n        # If the current character is different from the previous character, reset the current length and substring\n        else:\n            if current_length > max_length:\n                max_length = current_length\n                max_substring = current_substring\n            current_length = 1\n            current_substring = char\n\n    # If the current substring is longer than the max_substring, update max_substring\n    if current_length > max_length:\n        max_length = current_length\n        max_substring = current_substring\n\n    # Return the max_substring\n    return max_substring"
    },
    {
        "number": 3041,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *trip_times = map(int, stdin.split())\n    trip_times.sort()\n    total_time = sum(trip_times)\n    min_coupons = total_time // 10000\n    return str(min_coupons)"
    },
    {
        "number": 3042,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    values = list(map(int, stdin.strip().split()))\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def arrange(values, n):\n        if n == 1:\n            return 1\n\n        arrangements = []\n        for i in range(n):\n            arrangements.append(arrange(values, n - 1))\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                arrangements[i] *= arrangements[j]\n\n        return arrangements[0]\n\n    arrangements = arrange(values, n)\n    ways = 1\n    for i in range(n):\n        ways *= arrangements[i]\n\n    return str(ways)"
    },
    {
        "number": 3043,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    grid = [list(row) for row in stdin.split()]\n\n    def dfs(x, y, visited):\n        if x < 0 or x >= N or y < 0 or y >= M or grid[x][y] == '#':\n            return False\n        if grid[x][y] == 'G' and not visited:\n            visited.add((x, y))\n            return True\n        return False\n\n    def bfs(x, y):\n        queue = [(x, y)]\n        visited = set()\n        while queue:\n            x, y = queue.pop(0)\n            if dfs(x, y, visited):\n                return True\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == '.' and (nx, ny) not in visited:\n                    queue.append((nx, ny))\n        return False\n\n    days = 0\n    while True:\n        if bfs(0, 0):\n            days += 1\n            if days == K:\n                return str(days)\n            continue\n        break\n\n    return \"-1\""
    },
    {
        "number": 3044,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [['.' for _ in range(W)] for _ in range(H)]\n    commands = stdin.strip()\n    changes = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == 'S':\n                grid[i][j] = 'G'\n                changes += 1\n            elif grid[i][j] == 'G':\n                grid[i][j] = '#'\n                changes += 1\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n                changes += 1\n            elif grid[i][j] == '.':\n                grid[i][j] = 'S'\n                changes += 1\n            elif grid[i][j] == 'L':\n                if j > 0:\n                    grid[i][j] = 'D'\n                    changes += 1\n            elif grid[i][j] == 'R':\n                if j < W - 1:\n                    grid[i][j] = 'U'\n                    changes += 1\n            elif grid[i][j] == 'U':\n                if i > 0:\n                    grid[i][j] = 'L'\n                    changes += 1\n            elif grid[i][j] == 'D':\n                if i < H - 1:\n                    grid[i][j] = 'R'\n                    changes += 1\n    return str(changes)"
    },
    {
        "number": 3045,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    beacons = []\n    for _ in range(N):\n        X, Y, D = map(int, stdin.strip().split())\n        beacons.append((X, Y, D))\n\n    def manhattan_distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def is_consistent(beacons, receiver_position):\n        for beacon in beacons:\n            if manhattan_distance(beacon[0], beacon[1], receiver_position[0], receiver_position[1]) == beacon[2]:\n                return True\n        return False\n\n    def find_receiver_position(beacons):\n        for beacon in beacons:\n            if is_consistent(beacons, beacon):\n                return beacon\n        return None\n\n    receiver_position = find_receiver_position(beacons)\n    if receiver_position is not None:\n        return f\"{receiver_position[0]} {receiver_position[1]}\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 3046,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = []\n    for _ in range(n):\n        r1, c1 = map(int, stdin.strip().split())\n        r2, c2 = map(int, stdin.strip().split())\n        if r1 == r2 or c1 == c2:\n            result.append(r1)\n            result.append(c1)\n        else:\n            result.append(r1)\n            result.append(c2)\n            result.append(r2)\n            result.append(c1)\n            result.append(c2)\n    return''.join(map(str, result))"
    },
    {
        "number": 3047,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    burgers = list(map(int, stdin.split()))\n    slop = list(map(int, stdin.split()))\n    sushi = list(map(int, stdin.split()))\n    drumstick = list(map(int, stdin.split()))\n\n    # Compute proportions\n    proportions = [burgers[i] / (burgers[i] + slop[i] + sushi[i] + drumstick[i]) for i in range(len(burgers))]\n\n    # Compute solutions\n    solutions = set()\n    for i in range(len(burgers)):\n        for j in range(i + 1, len(burgers)):\n            for k in range(j + 1, len(burgers)):\n                for l in range(k + 1, len(burgers)):\n                    for m in range(l + 1, len(burgers)):\n                        solutions.add(f\"{burgers[i]} {slop[i]} {sushi[i]} {drumstick[i]} {burgers[j]} {slop[j]} {sushi[j]} {drumstick[j]} {burgers[k]} {slop[k]} {sushi[k]} {drumstick[k]} {burgers[l]} {slop[l]} {sushi[l]} {drumstick[l]} {burgers[m]} {slop[m]} {sushi[m]} {drumstick[m]}\")\n\n    # Count solutions\n    count = len(solutions)\n\n    # Output result\n    if count == 1:\n        return \"1\"\n    elif count == 2:\n        return \"2\"\n    else:\n        return \"many\""
    },
    {
        "number": 3048,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    paths = []\n    for _ in range(N - 1):\n        u, v = map(int, stdin.strip().split())\n        paths.append((u, v))\n\n    def is_optimal(path):\n        if len(path) < 2:\n            return False\n        for i in range(len(path) - 1):\n            if path[i] == path[i + 1]:\n                return False\n        return True\n\n    for u in range(1, N):\n        for v in range(u + 1, N):\n            path = [u]\n            while v!= u:\n                path.append(v)\n                v = paths[v - 1][0]\n            if is_optimal(path):\n                paths.append(path)\n\n    return str(len(paths))"
    },
    {
        "number": 3049,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    encrypted_message = stdin.strip()\n    decrypted_fragment = stdin.strip()\n\n    # Initialize variables\n    positions = []\n    current_position = 0\n\n    # Iterate through each character in the encrypted message\n    for i in range(len(encrypted_message)):\n        # If the current character is the same as the decrypted fragment, add the current position to the list of positions\n        if encrypted_message[i] == decrypted_fragment[0]:\n            positions.append(current_position)\n        # Move the current position to the next character\n        current_position += 1\n\n    # If there is a unique position in the encrypted message where the message fragment could occur, return the substring of the encrypted message that could correspond to the fragment\n    if len(positions) == 1:\n        return encrypted_message[positions[0]:]\n    # Otherwise, return the number of positions in the encrypted message where the fragment could occur\n    else:\n        return str(len(positions))"
    },
    {
        "number": 3050,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    program = stdin.strip()\n    grid = [['#' for _ in range(N)] for _ in range(N)]\n    robot_trail = [grid[0][0]]\n    robot_trail.append(grid[0][-1])\n    robot_trail.append(grid[-1][-1])\n    robot_trail.append(grid[-1][0])\n\n    for i in range(1, N):\n        grid[i][i] = '#'\n        grid[i][-i-1] = '#'\n\n    for i in range(N - 1, -1, -1):\n        for j in range(i + 1, N):\n            if program[i] == 'v':\n                if grid[i][j] == '#' and grid[i + 1][j] == '#' and grid[i + 2][j] == '#' and grid[i + 3][j] == '#':\n                    grid[i][j] = '.'\n                    robot_trail.append(grid[i][j])\n                    grid[i + 1][j] = '.'\n                    robot_trail.append(grid[i + 1][j])\n                    grid[i + 2][j] = '.'\n                    robot_trail.append(grid[i + 2][j])\n                    grid[i + 3][j] = '.'\n                    robot_trail.append(grid[i + 3][j])\n            elif program[i] == '^':\n                if grid[i][j] == '#' and grid[i - 1][j] == '#' and grid[i - 2][j] == '#' and grid[i - 3][j] == '#':\n                    grid[i][j] = '.'\n                    robot_trail.append(grid[i][j])\n                    grid[i - 1][j] = '.'\n                    robot_trail.append(grid[i - 1][j])\n                    grid[i - 2][j] = '.'\n                    robot_trail.append(grid[i - 2][j])\n                    grid[i - 3][j] = '.'\n                    robot_trail.append(grid[i - 3][j])\n            elif program[i] == '>':\n                if grid[i][j] == '#' and grid[i + 1][j] == '#' and grid[i + 2][j] == '#' and grid[i + 3][j] == '#':\n                    grid[i][j] = '.'\n                    robot_trail.append(grid[i][j])\n                    grid[i + 1][j] = '.'\n                    robot_trail.append(grid[i + 1][j])\n                    grid[i + 2][j] = '.'\n                    robot_trail.append(grid[i + 2][j])\n                    grid[i + 3][j] = '.'\n                    robot_trail.append(grid[i + 3][j])\n            elif program[i] == '<':\n                if grid[i][j] == '#' and grid[i - 1][j] == '#' and grid[i - 2][j] == '#' and grid[i - 3][j] == '#':\n                    grid[i][j] = '.'\n                    robot_trail.append(grid[i][j])\n                    grid[i - 1][j] = '.'\n                    robot_trail.append(grid[i - 1][j])\n                    grid[i - 2][j] = '.'\n                    robot_trail.append(grid[i - 2][j])\n                    grid[i - 3][j] = '.'\n                    robot_trail.append(grid[i - 3][j])\n\n    if len(robot_trail) == N * N:\n        return '1'\n    else:\n        return str(len(robot_trail))"
    },
    {
        "number": 3051,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nets = []\n    for _ in range(n):\n        m, d, el, er, dx, dy, dh, dd, dxh = map(int, stdin.strip().split())\n        nets.append((m, d, el, er, dx, dy, dh, dd, dxh))\n\n    total_missed = 0\n    for i in range(n):\n        missed = 0\n        for j in range(i + 1, n):\n            if nets[i][0] == nets[j][0]:\n                missed += 1\n                if nets[i][1] == nets[j][1]:\n                    missed += 1\n                if nets[i][2] == nets[j][2]:\n                    missed += 1\n                if nets[i][3] == nets[j][3]:\n                    missed += 1\n                if nets[i][4] == nets[j][4]:\n                    missed += 1\n                if nets[i][5] == nets[j][5]:\n                    missed += 1\n                if nets[i][6] == nets[j][6]:\n                    missed += 1\n                if nets[i][7] == nets[j][7]:\n                    missed += 1\n                if nets[i][8] == nets[j][8]:\n                    missed += 1\n                if nets[i][9] == nets[j][9]:\n                    missed += 1\n                if nets[i][10] == nets[j][10]:\n                    missed += 1\n                if nets[i][11] == nets[j][11]:\n                    missed += 1\n                if nets[i][12] == nets[j][12]:\n                    missed += 1\n                if nets[i][13] == nets[j][13]:\n                    missed += 1\n                if nets[i][14] == nets[j][14]:\n                    missed += 1\n                if nets[i][15] == nets[j][15]:\n                    missed += 1\n                if nets[i][16] == nets[j][16]:\n                    missed += 1\n                if nets[i][17] == nets[j][17]:\n                    missed += 1\n                if nets[i][18] == nets[j][18]:\n                    missed += 1\n                if nets[i][19] == nets[j][19]:\n                    missed += 1\n                if nets[i][20] == nets[j][20]:\n                    missed += 1\n                if nets[i][21] == nets[j][21]:\n                    missed += 1\n                if nets[i][22] == nets[j][22]:\n                    missed += 1\n                if nets[i][23] == nets[j][23]:\n                    missed += 1\n                if nets[i][24] == nets[j][24]:\n                    missed += 1\n                if nets[i][25] == nets[j][25]:\n                    missed += 1\n                if nets[i][26] == nets[j][26]:\n                    missed += 1\n                if nets[i][27] == nets[j][27]:\n                    missed += 1\n                if nets[i][28] == nets[j][28]:\n                    missed += 1\n                if nets[i][29] == nets[j][29]:\n                    missed += 1\n                if nets[i][30] == nets[j][30]:\n                    missed += 1\n                if nets[i][31] == nets[j][31]:\n                    missed += 1\n                if nets[i][32] == nets[j][32]:\n                    missed += 1\n                if nets[i][33] == nets[j][33]:\n                    missed += 1\n                if nets[i][34] == nets[j][34]:\n                    missed += 1\n                if nets[i][35] == nets[j][35]:\n                    missed += 1\n                if nets[i][36] == nets[j][36]:\n                    missed += 1\n                if nets[i][37] == nets[j][37]:\n                    missed += 1\n                if nets[i][38] == nets[j][38]:\n                    missed +="
    },
    {
        "number": 3052,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X_A, Y_A, X_B, Y_B = map(float, stdin.split())\n    N = int(stdin.split()[1])\n    conveyor_lines = []\n    for _ in range(N):\n        x1, y1, x2, y2 = map(float, stdin.split())\n        conveyor_lines.append((x1, y1, x2, y2))\n\n    def distance(x1, y1, x2, y2):\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    def get_time(x1, y1, x2, y2):\n        distance_from_A = distance(x1, y1, X_A, Y_A)\n        distance_from_B = distance(x2, y2, X_B, Y_B)\n        time = distance_from_A / distance_from_B\n        return time\n\n    time = get_time(X_A, Y_A, X_B, Y_B)\n    return str(time)\n"
    },
    {
        "number": 3053,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, P = map(int, stdin.split())\n    if N % 2 == 0 or K == 0 or P == 0:\n        return \"IMPOSSIBLE\"\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def is_valid_palindrome(s: str) -> bool:\n        return len(s) == len(s[::-1]) and is_palindrome(s)\n\n    def is_valid_substring(s: str) -> bool:\n        return len(set(s)) == K and is_valid_palindrome(s)\n\n    def is_valid_string(s: str) -> bool:\n        return len(s) == N and is_valid_substring(s)\n\n    def longest_palindrome_substring(s: str) -> str:\n        max_length = 0\n        longest_substring = \"\"\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                substring = s[i:j]\n                if is_valid_substring(substring):\n                    if len(substring) > max_length:\n                        max_length = len(substring)\n                        longest_substring = substring\n        return longest_substring\n\n    def find_string(s: str) -> str:\n        for i in range(N):\n            for j in range(N - i):\n                substring = s[j:j + i + 1]\n                if is_valid_string(substring):\n                    return substring\n        return \"IMPOSSIBLE\"\n\n    return find_string(stdin)"
    },
    {
        "number": 3054,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    syllables = 0\n    words = stdin.split()\n    haiku = \"\"\n\n    for word in words:\n        if word.isalpha():\n            syllables += len(word)\n            haiku += word + \" \"\n        else:\n            haiku += word + \" \"\n\n    if syllables >= 5 and syllables <= 7:\n        haiku = haiku[:-1]\n\n    return haiku.strip()"
    },
    {
        "number": 3055,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    names = [line.strip() for line in stdin.readlines()]\n\n    if names[0]!= \"ThoreHusfeldt\":\n        return \"Thore is awesome\"\n\n    for i in range(1, n):\n        if names[i] == \"ThoreHusfeldt\":\n            return \"Thore sucks\"\n\n    prefix = \"\"\n    for i in range(n):\n        if names[i] == \"ThoreHusfeldt\":\n            prefix += names[i]\n            break\n\n    for i in range(n - 1, -1, -1):\n        if names[i] == \"ThoreHusfeldt\":\n            prefix = names[i] + prefix\n            break\n\n    return prefix"
    },
    {
        "number": 3056,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the set of walks\n    walks = set()\n    for line in stdin.splitlines():\n        if line.startswith('*'):\n            walks.add(line[1:])\n        else:\n            walks.add(line)\n\n    # Calculate the value of the set of walks\n    value = sum(walks)\n\n    return str(value)"
    },
    {
        "number": 3057,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    statements = []\n    for line in stdin.splitlines():\n        statements.append(line.strip())\n\n    for i in range(len(statements)):\n        for j in range(i + 1, len(statements)):\n            if statements[i].endswith(statements[j]) and len(statements[i]) == len(statements[j]):\n                if len(statements[i]) == 3:\n                    if statements[i][-1] == statements[j][-1]:\n                        if statements[i][-2] == statements[j][-2]:\n                            if statements[i][-3] == statements[j][-3]:\n                                return \"yes\"\n                    else:\n                        return \"wait what?\"\n                else:\n                    return \"wait what?\"\n\n    return \"no\""
    },
    {
        "number": 3058,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequences = []\n    for _ in range(n):\n        sequence = input().strip()\n        sequences.append(sequence)\n\n    current_species = sequences[0]\n    next_species = sequences[1]\n\n    if current_species == next_species:\n        return \"impossible\"\n\n    for sequence in sequences[2:]:\n        if sequence == current_species:\n            current_species = next_species\n        elif sequence == next_species:\n            next_species = current_species\n        else:\n            return \"impossible\"\n\n    return f\"{current_species} {next_species}\""
    },
    {
        "number": 3059,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, m = map(int, stdin.split())\n    tricks = []\n    for _ in range(m):\n        t, p, d = map(int, stdin.split())\n        tricks.append((t, p, d))\n\n    tricks.sort(key=lambda x: x[0])\n\n    total_time = 0\n    for t, p, d in tricks:\n        total_time += d\n\n    expected_time = total_time / m\n\n    return str(expected_time)\n"
    },
    {
        "number": 3060,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    valid_sequences = [\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23"
    },
    {
        "number": 3061,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        roads.append((u, v))\n\n    def dfs(u, visited, path, length):\n        if u == n:\n            return length\n\n        if (u, v) in visited:\n            return length\n\n        visited.add((u, v))\n        path.append((u, v))\n        length = max(dfs(u + 1, visited, path, length), dfs(u - 1, visited, path, length))\n        path.pop()\n        visited.remove((u, v))\n        return length\n\n    def min_length_path(u, v):\n        visited = set()\n        path = [(u, v)]\n        length = dfs(u, visited, path, 0)\n        return length\n\n    min_length = float('inf')\n    for u in range(n):\n        for v in range(u + 1, n):\n            min_length = min(min_length, min_length_path(u, v))\n\n    return str(min_length)\n"
    },
    {
        "number": 3062,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    v, w = map(float, stdin.split())\n\n    # Calculate the time it would take to reach the target\n    dx = x - 1000\n    dy = y - 1000\n    dist = math.sqrt(dx**2 + dy**2)\n    time = dist / v\n\n    # Calculate the time it would take to rotate\n    angle = math.atan2(dy, dx)\n    time += angle / w\n\n    return str(time)"
    },
    {
        "number": 3063,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    debts = []\n    for _ in range(N):\n        a, b = map(int, stdin.readline().strip().split())\n        debts.append((a, b))\n\n    def min_amount(debts):\n        if len(debts) == 1:\n            return debts[0][1]\n        else:\n            return min(debts[0][1], min_amount(debts[1:]))\n\n    return str(min_amount(debts))\n"
    },
    {
        "number": 3064,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    roads = []\n    for _ in range(M):\n        A, B = map(int, stdin.split())\n        roads.append((A, B))\n\n    def is_valid_path(path):\n        visited = set()\n        for i in range(len(path) - 1):\n            if path[i] == path[i + 1]:\n                return False\n            if path[i] in visited:\n                return False\n            visited.add(path[i])\n        return True\n\n    def is_valid_ring(path):\n        visited = set()\n        for i in range(len(path) - 1):\n            if path[i] == path[i + 1]:\n                return False\n            if path[i] in visited:\n                return False\n            visited.add(path[i])\n        return True\n\n    def longest_valid_path(path):\n        max_length = 0\n        for i in range(len(path) - 1):\n            if is_valid_path(path[:i] + path[i + 1:]):\n                max_length = max(max_length, i + 1)\n        return max_length\n\n    def longest_valid_ring(path):\n        max_length = 0\n        for i in range(len(path) - 1):\n            if is_valid_ring(path[:i] + path[i + 1:]):\n                max_length = max(max_length, i + 1)\n        return max_length\n\n    def longest_valid_race_path(paths):\n        max_length = 0\n        for path in paths:\n            if is_valid_path(path):\n                max_length = max(max_length, longest_valid_path(path))\n        return max_length\n\n    paths = []\n    for i in range(N):\n        paths.append([])\n        for j in range(i + 1, N + 1):\n            paths[-1].append((i, j))\n\n    max_length = max(longest_valid_race_path(paths), longest_valid_ring(paths))\n    return str(max_length)\n"
    },
    {
        "number": 3065,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    walk = list(map(int, stdin.split()))\n    neighbours = []\n    for i in range(N):\n        neighbours.append(list(map(int, stdin.split())))\n\n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < N and walk[x][y] == 1\n\n    def is_reachable(x, y):\n        return is_valid(x, y) and neighbours[x][y] == 1\n\n    def is_reachable_from(x, y):\n        return is_valid(x, y) and neighbours[x][y] == 1 and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x - 1, y) and is_reachable(x + 1, y)\n\n    def is_reachable_from_start(x, y):\n        return is_valid(x, y) and neighbours[x][y] == 1 and is_reachable(x, y - 1) and is_reachable(x, y + 1)\n\n    def is_reachable_from_end(x, y):\n        return is_valid(x, y) and neighbours[x][y] == 1 and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x - 1, y) and is_reachable(x + 1, y) and is_reachable(x, y - 1) and is_reachable(x, y + 1)\n\n    def is_reachable_from_start_end(x, y):\n        return is_valid(x, y) and neighbours[x][y] == 1 and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x - 1, y) and is_reachable(x + 1, y) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1)\n\n    def is_reachable_from_start_end_end(x, y):\n        return is_valid(x, y) and neighbours[x][y] == 1 and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x - 1, y) and is_reachable(x + 1, y) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable(x, y - 1) and is_reachable(x, y + 1) and is_reachable"
    },
    {
        "number": 3066,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    tape_art = []\n    for _ in range(n):\n        tape_art.append(list(map(int, stdin.strip().split())))\n\n    instructions = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if tape_art[i][j] == tape_art[j][i]:\n                instructions.append(f\"{i} {j} {tape_art[i][j]}\")\n\n    if len(instructions) == 0:\n        return \"IMPOSSIBLE\"\n\n    return \"\\n\".join(instructions)"
    },
    {
        "number": 3067,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    sequences = []\n    for _ in range(N):\n        sequence = list(map(int, stdin.readline().strip().split()))\n        sequences.append(sequence)\n\n    best_sequence = []\n    for sequence in sequences:\n        if len(sequence) > len(best_sequence):\n            best_sequence = sequence\n\n    return''.join(map(str, best_sequence))\n"
    },
    {
        "number": 3068,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    solutions = set()\n    for _ in range(n):\n        suspects = list(map(int, stdin.strip().split()))\n        if len(suspects)!= 3:\n            continue\n        if suspects[0] == suspects[1] == suspects[2]:\n            continue\n        if len(set(suspects))!= 3:\n            continue\n        solutions.add(suspects)\n    return str(len(solutions))"
    },
    {
        "number": 3069,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    brackets = []\n    for _ in range(n):\n        bracket = input()\n        brackets.append(bracket)\n\n    def is_valid(bracket):\n        if not bracket:\n            return True\n        if bracket[0] == '(' and bracket[-1] == ')':\n            return True\n        if bracket[0] == '[' and bracket[-1] == ']':\n            return True\n        return False\n\n    def inversion(bracket, l, r):\n        if l == r:\n            return bracket\n        if bracket[l] == bracket[r]:\n            return inversion(bracket, l + 1, r - 1)\n        if bracket[l] < bracket[r]:\n            return inversion(bracket[:l] + ']' + bracket[l + 1:], l, r - 1)\n        return inversion(bracket[:r] + '[' + bracket[r - 1], l, r - 1)\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_valid(brackets[i]) and is_valid(brackets[j]):\n                inverted_brackets = inversion(brackets[i], 0, len(brackets[i]) - 1)\n                if is_valid(inverted_brackets):\n                    return \"possible\"\n\n    return \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    trains = []\n    for _ in range(M):\n        X, S, T, L = map(int, stdin.split())\n        trains.append((X, S, T, L))\n\n    def is_valid(x, s, t, l):\n        return s <= x <= t + l\n\n    def earliest_time(x, s, t, l):\n        for i in range(x, N):\n            if is_valid(i, s, t, l):\n                return s\n        return -1\n\n    start_time = min(earliest_time(1, *t for t in trains))\n    return str(start_time)"
    },
    {
        "number": 3071,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    playing_schedule = []\n    for i in range(m):\n        for j in range(n):\n            if i!= j:\n                playing_schedule.append(f\"{i+1}-{j+1}\")\n    return \"\\n\".join(playing_schedule)"
    },
    {
        "number": 3072,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    table = [[char for char in input().strip()] for _ in range(R)]\n    invited = 0\n    for i in range(R):\n        for j in range(C):\n            if table[i][j] == '.':\n                invited += 1\n                for k in range(i-1, -1, -1):\n                    for l in range(j-1, -1, -1):\n                        if table[k][l] == '.':\n                            invited -= 1\n                            break\n                for k in range(i+1, R):\n                    for l in range(j-1, -1, -1):\n                        if table[k][l] == '.':\n                            invited -= 1\n                            break\n                for k in range(i-1, -1, -1):\n                    for l in range(j+1, C):\n                        if table[k][l] == '.':\n                            invited -= 1\n                            break\n                for k in range(i+1, R):\n                    for l in range(j+1, C):\n                        if table[k][l] == '.':\n                            invited -= 1\n                            break\n    return str(invited)"
    },
    {
        "number": 3073,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    tarot_cards = []\n    for _ in range(n):\n        r, c, a, b, p = map(int, stdin.strip().split())\n        tarot_cards.append((r, c, a, b, p))\n\n    def is_valid_move(r, c, tarot_cards):\n        for tarot_card in tarot_cards:\n            if tarot_card[0] == r and tarot_card[1] == c:\n                return True\n        return False\n\n    def get_cost(r, c, tarot_cards):\n        cost = 0\n        for tarot_card in tarot_cards:\n            if tarot_card[0] == r and tarot_card[1] == c:\n                cost += tarot_card[2] * tarot_card[3]\n        return cost\n\n    def get_min_cost(r, c, tarot_cards):\n        if is_valid_move(r, c, tarot_cards):\n            return get_cost(r, c, tarot_cards)\n        else:\n            return -1\n\n    def get_min_cost_with_power_up(r, c, tarot_cards):\n        if is_valid_move(r, c, tarot_cards):\n            return get_cost(r, c, tarot_cards) + 100\n        else:\n            return -1\n\n    def get_min_cost_with_power_up_and_jump(r, c, tarot_cards):\n        if is_valid_move(r, c, tarot_cards):\n            return get_cost(r, c, tarot_cards) + 100 + 100\n        else:\n            return -1\n\n    def get_min_cost_with_power_up_and_jump_and_buy_card(r, c, tarot_cards):\n        if is_valid_move(r, c, tarot_cards):\n            return get_cost(r, c, tarot_cards) + 100 + 100 + 100\n        else:\n            return -1\n\n    def get_min_cost_with_power_up_and_jump_and_buy_card_and_jump(r, c, tarot_cards):\n        if is_valid_move(r, c, tarot_cards):\n            return get_cost(r, c, tarot_cards) + 100 + 100 + 100 + 100\n        else:\n            return -1\n\n    def get_min_cost_with_power_up_and_jump_and_buy_card_and_jump_and_buy_card(r, c, tarot_cards):\n        if is_valid_move(r, c, tarot_cards):\n            return get_cost(r, c, tarot_cards) + 100 + 100 + 100 + 100 + 100\n        else:\n            return -1\n\n    def get_min_cost_with_power_up_and_jump_and_buy_card_and_jump_and_buy_card_and_jump(r, c, tarot_cards):\n        if is_valid_move(r, c, tarot_cards):\n            return get_cost(r, c, tarot_cards) + 100 + 100 + 100 + 100 + 100 + 100\n        else:\n            return -1\n\n    def get_min_cost_with_power_up_and_jump_and_buy_card_and_jump_and_buy_card_and_jump_and_buy_card(r, c, tarot_cards):\n        if is_valid_move(r, c, tarot_cards):\n            return get_cost(r, c, tarot_cards) + 100 + 100 + 100 + 100 + 100 + 100 + 100\n        else:\n            return -1\n\n    def get_min_cost_with_power_up_and_jump_and_buy_card_and_jump_and_buy_card_and_jump_and_buy_card_and_jump_and_buy_card(r, c, tarot_cards):\n        if is_valid_move(r, c, tarot_cards):\n            return get_cost(r, c, tarot_cards) + "
    },
    {
        "number": 3074,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.strip()\n\n    # Step 1: Treat B as a string consisting of only digits\n    B = S\n\n    # Step 2: Define a subset S of characters from B \"valid\"\n    S_valid = set()\n    for i in range(len(B)):\n        for j in range(i + 1, len(B)):\n            if B[i] + B[j] in S_valid:\n                S_valid.remove(B[i] + B[j])\n\n    # Step 3: Compute the converted value in Canadian dollars\n    converted_value = len(S_valid) % (10**9 + 7)\n\n    return str(converted_value)\n"
    },
    {
        "number": 3075,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, g = map(int, stdin.split())\n    gas_stations = []\n    for i in range(n):\n        gas_stations.append((i, int(stdin.split()[1])))\n\n    def min_cost(start, end):\n        total_cost = 0\n        for i in range(start, end):\n            total_cost += gas_stations[i][1]\n        return total_cost\n\n    start = 0\n    end = n - 1\n    while start < end:\n        mid = (start + end) // 2\n        if min_cost(start, mid) < min_cost(mid, end):\n            start = mid\n        else:\n            end = mid\n\n    if min_cost(start, end) <= g:\n        return str(min_cost(start, end))\n    else:\n        return \"cancel road trip\""
    },
    {
        "number": 3076,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    jewels = []\n    for _ in range(n):\n        s, v = map(int, stdin.split())\n        jewels.append((s, v))\n\n    def knapsack(s, v, knapsack):\n        if s == 0:\n            return v\n        if knapsack[s] is not None:\n            return knapsack[s]\n        if s > 0:\n            if knapsack[s - 1] is not None:\n                return max(knapsack[s - 1], knapsack(s - 1, v, knapsack))\n        return 0\n\n    max_value = 0\n    for s, v in jewels:\n        max_value = max(max_value, knapsack(s, v, [0] * (k + 1)))\n\n    return''.join(map(str, max_value))"
    },
    {
        "number": 3077,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    villages = []\n    for _ in range(n):\n        x, y, vr = map(int, stdin.split())\n        villages.append((x, y, vr))\n\n    enemy_minions = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        enemy_minions.append((x, y))\n\n    max_destroyed = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    for m in range(l + 1, n):\n                        for n in range(m + 1, n):\n                            for o in range(n + 1, n):\n                                for p in range(o + 1, n):\n                                    for q in range(p + 1, n):\n                                        for r in range(q + 1, n):\n                                            for s in range(r + 1, n):\n                                                for t in range(s + 1, n):\n                                                    for u in range(t + 1, n):\n                                                        for v in range(u + 1, n):\n                                                            for w in range(v + 1, n):\n                                                                for x in range(w + 1, n):\n                                                                    for y in range(x + 1, n):\n                                                                        for z in range(y + 1, n):\n                                                                            if (villages[i] == villages[j] and villages[j] == villages[k] and villages[k] == villages[l] and villages[l] == villages[m] and villages[m] == villages[n] and villages[n] == villages[o] and villages[o] == villages[p] and villages[p] == villages[q] and villages[q] == villages[r] and villages[r] == villages[s] and villages[s] == villages[t] and villages[t] == villages[u] and villages[u] == villages[v] and villages[v] == villages[w] and villages[w] == villages[x] and villages[x] == villages[y] and villages[y] == villages[z]) or (villages[i] == villages[j] and villages[j] == villages[k] and villages[k] == villages[l] and villages[l] == villages[m] and villages[m] == villages[n] and villages[n] == villages[o] and villages[o] == villages[p] and villages[p] == villages[q] and villages[q] == villages[r] and villages[r] == villages[s] and villages[s] == villages[t] and villages[t] == villages[u] and villages[u] == villages[v] and villages[v] == villages[w] and villages[w] == villages[x] and villages[x] == villages[y] and villages[y] == villages[z]) or (villages[i] == villages[j] and villages[j] == villages[k] and villages[k] == villages[l] and villages[l] == villages[m] and villages[m] == villages[n] and villages[n] == villages[o] and villages[o] == villages[p] and villages[p] == villages[q] and villages[q] == villages[r] and villages[r] == villages[s] and villages[s] == villages[t] and villages[t] == villages[u] and villages[u] == villages[v] and villages[v] == villages[w] and villages[w] == villages[x] and villages[x] == villages[y] and villages[y] == villages[z]) or (villages[i] == villages[j] and villages[j] == villages[k] and villages[k] == villages[l] and villages[l] == villages[m] and villages[m] == villages[n] and villages[n] == villages[o"
    },
    {
        "number": 3078,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    max_length = 0\n    current_length = 0\n    for i in range(N):\n        current_sum = sum(A[i:i+current_length])\n        if current_sum > S:\n            current_length = 0\n        else:\n            current_length += 1\n        max_length = max(max_length, current_length)\n\n    return str(max_length)"
    },
    {
        "number": 3079,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    sequence = stdin.strip().split()\n    beautiful_words = []\n\n    for i in range(N):\n        word = ''.join(sequence[i:])\n        if word in beautiful_words:\n            return \"NE\"\n        else:\n            beautiful_words.append(word)\n\n    return \"DA\""
    },
    {
        "number": 3080,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    runs = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        runs.append((x, y))\n\n    snack_stands = [[] for _ in range(n + 1)]\n    for _ in range(q):\n        k, a = map(int, stdin.split())\n        for _ in range(a):\n            i = map(int, stdin.split())\n            snack_stands[i[0]].append(i[1])\n\n    result = []\n    for i in range(1, n + 1):\n        for j in range(i):\n            if j == 0 or runs[j - 1][1]!= runs[j][0]:\n                result.append(0)\n            else:\n                result.append(1)\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 3081,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    flights = []\n    for _ in range(m):\n        s, f, t = map(int, stdin.split())\n        flights.append((s, f, t))\n\n    def min_planes(flights):\n        n = len(flights)\n        seen = set()\n        min_planes = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (flights[i][0], flights[j][0]) not in seen:\n                    seen.add((flights[i][0], flights[j][0]))\n                    min_planes += 1\n        return min_planes\n\n    min_planes_count = min_planes(flights)\n    return str(min_planes_count)\n"
    },
    {
        "number": 3082,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, w = map(int, stdin.split())\n    dishes = []\n    for _ in range(d):\n        dish = input().split()\n        dishes.append(tuple(map(int, dish)))\n\n    max_tastiness = 0\n    for i in range(d):\n        tastiness = dishes[i][0]\n        delta_tastiness = dishes[i][1]\n        max_tastiness = max(max_tastiness, tastiness - (i + 1) * delta_tastiness)\n\n    return str(max_tastiness)"
    },
    {
        "number": 3083,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    playlist = []\n    for _ in range(n):\n        artist, t, *songs = map(int, stdin.strip().split())\n        playlist.extend(songs)\n\n    def common_thread(song1, song2):\n        return song1 in playlist and song2 in playlist and song1!= song2\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if common_thread(playlist[i], playlist[j]):\n                playlist.remove(playlist[i])\n                playlist.remove(playlist[j])\n                break\n\n    return''.join(map(str, playlist))"
    },
    {
        "number": 3084,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    input_time = stdin.readline().strip()\n    current_time = stdin.readline().strip()\n\n    # Split the input time into hours and minutes\n    hours, minutes = input_time.split(':')\n\n    # Convert the hours and minutes to integers\n    hours = int(hours)\n    minutes = int(minutes)\n\n    # Initialize the output string\n    output = ''\n\n    # Iterate through each digit in the current time\n    for digit in current_time:\n        # If the digit is a $, it means it is a digit\n        if digit == '$':\n            # If the current digit is $0, it means it is the hour\n            if digit == '0':\n                # If the hour is between 00 and 23, set it to 00\n                if hours >= 0 and hours <= 23:\n                    hours = 0\n                else:\n                    # If the hour is not between 00 and 23, set it to 23\n                    hours = 23\n            # If the current digit is $9, it means it is the minute\n            elif digit == '9':\n                # If the minute is between 00 and 59, set it to 00\n                if minutes >= 0 and minutes <= 59:\n                    minutes = 0\n                else:\n                    # If the minute is not between 00 and 59, set it to 59\n                    minutes = 59\n            # If the current digit is not a $, it means it is a digit\n            else:\n                # If the current digit is a digit, it means it is a digit\n                if digit.isdigit():\n                    # If the current digit is between 0 and 9, it means it is a digit\n                    if int(digit) >= 0 and int(digit) <= 9:\n                        # If the current digit is not already set, set it to the current hour and minute\n                        if hours == 0 and minutes == 0:\n                            hours = int(digit)\n                            minutes = int(digit)\n                        # If the current digit is already set, increment it by 1\n                        else:\n                            hours += int(digit)\n                            minutes += int(digit)\n                    # If the current digit is not a digit, it means it is not a digit\n                    else:\n                        # If the current digit is not already set, set it to the current hour and minute\n                        if hours == 0 and minutes == 0:\n                            hours = int(digit)\n                            minutes = int(digit)\n                        # If the current digit is already set, increment it by 1\n                        else:\n                            hours += int(digit)\n                            minutes += int(digit)\n        # If the digit is not a $, it means it is not a digit\n        else:\n            # If the digit is a digit, it means it is a digit\n            if digit.isdigit():\n                # If the digit is between 0 and 9, it means it is a digit\n                if int(digit) >= 0 and int(digit) <= 9:\n                    # If the digit is not already set, set it to the current hour and minute\n                    if hours == 0 and minutes == 0:\n                        hours = int(digit)\n                        minutes = int(digit)\n                    # If the digit is already set, increment it by 1\n                    else:\n                        hours += int(digit)\n                        minutes += int(digit)\n            # If the digit is not a digit, it means it is not a digit\n            else:\n                # If the digit is not already set, set it to the current hour and minute\n                if hours == 0 and minutes == 0:\n                    hours = int(digit)\n                    minutes = int(digit)\n                # If the digit is already set, increment it by 1\n                else:\n                    hours += int(digit)\n                    minutes += int(digit)\n\n    # Calculate the number of different times seen\n    num_times = len(set(current_time))\n\n    # Output the result\n    output += f'{num_times}\\n'\n    for time in current_time:\n        output += f'{time}\\n'\n\n    # Output the final time\n    output += f'{hours}:{minutes}'\n\n    return output"
    },
    {
        "number": 3085,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    s = stdin.strip()\n\n    # Initialize variables\n    stack = []\n    result = []\n\n    # Iterate through the string\n    for i in range(len(s)):\n        # If the current character is an opening parenthesis, push it onto the stack\n        if s[i] == '(':\n            stack.append(i)\n        # If the current character is a closing parenthesis, pop the top element from the stack and add the matching opening parenthesis to the result\n        elif s[i] == ')':\n            if len(stack) == 0:\n                result.append(s[i])\n            else:\n                result.append(s[stack.pop()])\n\n    # Join the result string with the alternative bracket notation\n    result_str = ''.join(result)\n    alt_notation = ''\n    for i in range(len(result_str)):\n        if i % 2 == 0:\n            alt_notation += result_str[i]\n        else:\n            alt_notation += result_str[i] + ','\n\n    return alt_notation"
    },
    {
        "number": 3086,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    events = []\n    for _ in range(N):\n        events.append(list(map(int, stdin.split())))\n\n    durations = []\n    for i in range(M):\n        start_date, end_date, num_events = events[i][:4]\n        duration = end_date - start_date\n        durations.append(duration)\n\n    return str(durations)"
    },
    {
        "number": 3087,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arrows = []\n    for i in range(N):\n        arrows.append(i)\n\n    for i in range(K):\n        for j in range(i + 1, N):\n            arrows[j] = arrows[i]\n\n    result = []\n    for i in range(N):\n        result.append(arrows[i])\n\n    return''.join(map(str, result))"
    },
    {
        "number": 3088,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_num = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i == j:\n                continue\n            num = int(str(i) + str(j))\n            if num > max_num:\n                max_num = num\n    return str(max_num)"
    },
    {
        "number": 3089,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def nearest_point(points, p):\n        min_dist = float('inf')\n        nearest = None\n        for i, point in enumerate(points):\n            dist = distance(p, point)\n            if dist < min_dist:\n                min_dist = dist\n                nearest = point\n        return nearest\n\n    def nearest_taxi_distance(points):\n        nearest_taxi = nearest_point(points, points[0])\n        for i, point in enumerate(points):\n            if i == 0:\n                continue\n            taxi = nearest_point(points, point)\n            if distance(nearest_taxi, taxi) < distance(nearest_taxi, nearest_taxi):\n                nearest_taxi = taxi\n        return distance(nearest_taxi, points[-1])\n\n    return str(nearest_taxi_distance(points))"
    },
    {
        "number": 3090,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    offices = []\n    for i in range(N):\n        office = []\n        for j in range(M):\n            cost = int(stdin.split()[j])\n            office.append(cost)\n        offices.append(office)\n\n    total_cost = 0\n    for i in range(N):\n        for j in range(M):\n            if offices[i][j] > 0:\n                total_cost += offices[i][j]\n\n    total_cost += K * (N * M)\n\n    return str(total_cost)\n"
    },
    {
        "number": 3091,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t, op = map(int, stdin.split())\n    grid = [[0] * n for _ in range(m)]\n    visited = [[False] * n for _ in range(m)]\n    result = 0\n\n    def dfs(row, col, target, operator):\n        if target == 0:\n            result += 1\n            return\n\n        for i in range(m):\n            if not visited[row][i]:\n                visited[row][i] = True\n                dfs(row, i, target - grid[row][i], operator)\n                visited[row][i] = False\n\n        for j in range(n):\n            if not visited[j][col]:\n                visited[j][col] = True\n                dfs(j, col, target - grid[j][col], operator)\n                visited[j][col] = False\n\n    dfs(0, 0, t, op)\n    return str(result)\n"
    },
    {
        "number": 3092,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    roads = []\n    for _ in range(M):\n        O, D, L = map(int, stdin.split())\n        roads.append((O, D, L))\n\n    def dfs(start, visited, path):\n        if start in visited:\n            return 0\n        visited.add(start)\n        path.append(start)\n        for neighbor, length in roads[start]:\n            if neighbor not in visited:\n                count = dfs(neighbor, visited, path)\n                if count:\n                    return count\n        path.pop()\n        return 1\n\n    def count_paths(start, visited):\n        path = []\n        count = dfs(start, visited, path)\n        return count % (10**9 + 7)\n\n    return '\\n'.join(map(str, [count_paths(O, set()) for O in range(1, N + 1)]))"
    },
    {
        "number": 3093,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    f = list(map(int, stdin.split()))\n\n    def dfs(i, color, visited):\n        if i == N:\n            return 1\n\n        if i in visited:\n            return 0\n\n        visited.add(i)\n        ways = 0\n\n        for j in range(K):\n            if f[i] == j:\n                ways += dfs(i + 1, j, visited)\n\n        visited.remove(i)\n        return ways\n\n    return str(dfs(0, 0, set()))"
    },
    {
        "number": 3094,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = list(map(int, stdin.readline().strip().split()))\n\n    def dfs(i, s, t):\n        if i == n:\n            return 1\n        if i == 0:\n            return 0\n\n        if s[i] == t[i]:\n            return dfs(i + 1, s, t)\n\n        return dfs(i + 1, s, t)\n\n    return str(dfs(1, t, t))"
    },
    {
        "number": 3095,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    A = []\n    for _ in range(R):\n        A.append(list(map(int, stdin.split())))\n\n    max_elements = 0\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] + A[i][S - 1 - j] <= A[i][S - 1 - j + 1] + A[i + 1][j]:\n                max_elements = max(max_elements, A[i][j] + A[i][S - 1 - j] + A[i + 1][j] + A[i + 1][S - 1 - j])\n\n    return str(max_elements)"
    },
    {
        "number": 3096,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    jokes = list(map(int, stdin.readline().strip().split()))\n    invited = set()\n    seen = set()\n    result = 0\n\n    for i in range(N - 1):\n        A, B = jokes[i], jokes[i + 1]\n        if A == B:\n            continue\n        if A in invited and B not in invited:\n            continue\n        if A in seen and B not in seen:\n            continue\n        if A not in invited and B not in invited:\n            invited.add(A)\n            seen.add(B)\n            result += 1\n\n    return str(result)\n"
    },
    {
        "number": 3097,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    queries = []\n    for _ in range(n):\n        queries.append(list(map(int, stdin.readline().split())))\n\n    result = 0\n    for a, b in queries:\n        result += sum(1 for i in range(a, b+1) if i % 2 == 0)\n\n    return str(result)"
    },
    {
        "number": 3098,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cake = []\n    for _ in range(n):\n        x, y = map(float, stdin.split())\n        cake.append((x, y))\n\n    def is_collinear(p1, p2, p3):\n        return abs(p1[0] * p2[1] - p1[1] * p2[0]) < 1e-6 and abs(p2[0] * p3[1] - p2[1] * p3[0]) < 1e-6 and abs(p3[0] * p1[1] - p3[1] * p1[0]) < 1e-6\n\n    def is_valid_vertex(p):\n        return -10.0 <= p[0] <= 10.0 and -10.0 <= p[1] <= 10.0\n\n    def is_valid_cake(cake):\n        return all(is_valid_vertex(p) for p in cake)\n\n    if not is_valid_cake(cake):\n        return \"Invalid cake\"\n\n    def cut_cake(cake, k):\n        cut_points = []\n        for i in range(k):\n            cut_points.append(cake[i])\n        cut_points.append(cake[0])\n        cut_points.append(cake[-1])\n        return cut_points\n\n    cut_points = cut_cake(cake, k)\n    area = 0\n    for i in range(len(cut_points) - 1):\n        area += (cut_points[i + 1][0] - cut_points[i][0]) * (cut_points[i + 1][1] + cut_points[i][1])\n\n    return str(area)\n"
    },
    {
        "number": 3099,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, E, C = map(int, stdin.split())\n    connections = []\n    for _ in range(C):\n        a, b = map(int, stdin.split())\n        connections.append((a, b))\n\n    enemies = set(map(int, stdin.split()))\n\n    def is_enemy(spy):\n        return spy in enemies\n\n    def is_connected(spy, spy2):\n        return (spy, spy2) in connections\n\n    def count_messages(spy):\n        messages = 0\n        for spy2 in connections:\n            if is_connected(spy, spy2[0]) and is_connected(spy, spy2[1]):\n                messages += 1\n        return messages\n\n    def count_private_messages(spy):\n        messages = 0\n        for spy2 in connections:\n            if is_connected(spy, spy2[0]) and not is_connected(spy, spy2[1]):\n                messages += 1\n        return messages\n\n    def count_public_messages(spy):\n        messages = 0\n        for spy2 in connections:\n            if is_connected(spy, spy2[1]) and not is_connected(spy, spy2[0]):\n                messages += 1\n        return messages\n\n    def count_enemy_messages(spy):\n        messages = 0\n        for spy2 in connections:\n            if is_connected(spy, spy2[0]) and is_connected(spy, spy2[1]) and not is_connected(spy, spy2[0], spy2[1]):\n                messages += 1\n        return messages\n\n    def count_all_messages(spy):\n        messages = 0\n        messages += count_messages(spy)\n        messages += count_private_messages(spy)\n        messages += count_public_messages(spy)\n        messages += count_enemy_messages(spy)\n        return messages\n\n    def count_spies(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2))\n\n    def count_enemy_spies(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is_enemy(spy2))\n\n    def count_enemy_spies_with_messages(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is_enemy(spy2) and count_all_messages(spy2) > 0)\n\n    def count_enemy_spies_without_messages(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is_enemy(spy2) and count_all_messages(spy2) == 0)\n\n    def count_enemy_spies_with_private_messages(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is_enemy(spy2) and count_private_messages(spy2) > 0)\n\n    def count_enemy_spies_with_public_messages(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is_enemy(spy2) and count_public_messages(spy2) > 0)\n\n    def count_enemy_spies_with_no_messages(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is_enemy(spy2) and count_all_messages(spy2) == 0)\n\n    def count_enemy_spies_with_no_private_messages(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is_enemy(spy2) and count_private_messages(spy2) == 0)\n\n    def count_enemy_spies_with_no_public_messages(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is_enemy(spy2) and count_public_messages(spy2) == 0)\n\n    def count_enemy_spies_with_no_messages(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is_enemy(spy2) and count_all_messages(spy2) == 0)\n\n    def count_enemy_spies_with_no_private_messages(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is_enemy(spy2) and count_private_messages(spy2) == 0)\n\n    def count_enemy_spies_with_no_public_messages(spy):\n        return sum(1 for _ in connections if is_connected(spy, spy2) and is"
    },
    {
        "number": 3100,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, C, M = map(int, stdin.split())\n    MOD = 10**9 + 7\n\n    def count_ways(boxes: int) -> int:\n        if boxes == 1:\n            return 1\n        if boxes == 2:\n            return 2\n        return count_ways(boxes - 1) + count_ways(boxes - 2)\n\n    def count_ways_with_different_fruits(boxes: int) -> int:\n        if boxes == 1:\n            return 1\n        if boxes == 2:\n            return 2\n        return count_ways_with_different_fruits(boxes - 1) + count_ways_with_different_fruits(boxes - 2)\n\n    def count_ways_with_different_fruits_and_insects(boxes: int) -> int:\n        if boxes == 1:\n            return 1\n        if boxes == 2:\n            return 2\n        return count_ways_with_different_fruits_and_insects(boxes - 1) + count_ways_with_different_fruits_and_insects(boxes - 2)\n\n    def count_ways_with_different_fruits_and_insects_and_neighbors(boxes: int) -> int:\n        if boxes == 1:\n            return 1\n        if boxes == 2:\n            return 2\n        return count_ways_with_different_fruits_and_insects_and_neighbors(boxes - 1) + count_ways_with_different_fruits_and_insects_and_neighbors(boxes - 2)\n\n    def count_ways_with_different_fruits_and_insects_and_neighbors_and_insects(boxes: int) -> int:\n        if boxes == 1:\n            return 1\n        if boxes == 2:\n            return 2\n        return count_ways_with_different_fruits_and_insects_and_neighbors_and_insects(boxes - 1) + count_ways_with_different_fruits_and_insects_and_neighbors_and_insects(boxes - 2)\n\n    def count_ways_with_different_fruits_and_insects_and_neighbors_and_insects_and_neighbors(boxes: int) -> int:\n        if boxes == 1:\n            return 1\n        if boxes == 2:\n            return 2\n        return count_ways_with_different_fruits_and_insects_and_neighbors_and_insects_and_neighbors(boxes - 1) + count_ways_with_different_fruits_and_insects_and_neighbors_and_insects_and_neighbors(boxes - 2)\n\n    def count_ways_with_different_fruits_and_insects_and_neighbors_and_insects_and_neighbors_and_insects(boxes: int) -> int:\n        if boxes == 1:\n            return 1\n        if boxes == 2:\n            return 2\n        return count_ways_with_different_fruits_and_insects_and_neighbors_and_insects_and_neighbors_and_insects(boxes - 1) + count_ways_with_different_fruits_and_insects_and_neighbors_and_insects_and_neighbors_and_insects(boxes - 2)\n\n    def count_ways_with_different_fruits_and_insects_and_neighbors_and_insects_and_neighbors_and_insects_and_neighbors(boxes: int) -> int:\n        if boxes == 1:\n            return 1\n        if boxes == 2:\n            return 2\n        return count_ways_with_different_fruits_and_insects_and_neighbors_and_insects_and_neighbors_and_insects_and_neighbors(boxes - 1) + count_ways_with_different_fruits_and_insects_and_neighbors_and_insects_and_neighbors_and_insects_and_neighbors(boxes - 2)\n\n    def count_ways_with_different_fruits_and_insects_and_neighbors_and_insects_and_neighbors_and_insects_and_neighbors_and_insects(boxes: int) -> int:\n        if boxes == 1:\n            return 1\n        if boxes == 2:\n            return 2\n       "
    },
    {
        "number": 3101,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if b[i] > b[j]:\n                b[i], b[j] = b[j], b[i]\n    for i in range(n):\n        if b[i] == 0:\n            b[i] = 1\n    return''.join(map(str, b))"
    },
    {
        "number": 3102,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    houses = [house for house in range(L, R+1) if house % 10!= 4]\n    houses = [house for house in houses if house % 6!= 0 and house % 8!= 0]\n    return str(sum(houses))"
    },
    {
        "number": 3103,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Y, X, x_init = map(int, stdin.split())\n    current_map = [list(map(str, stdin.split())) for _ in range(Y)]\n\n    def dfs(x, y, current_map):\n        if x == x_init and y == Y - 1:\n            return True\n\n        if current_map[x][y] == '@':\n            return False\n\n        if current_map[x][y] == '~':\n            return dfs(x, y + 1, current_map)\n\n        if current_map[x][y] == '#':\n            return False\n\n        if current_map[x][y] == '<':\n            return dfs(x - 1, y, current_map)\n\n        if current_map[x][y] == '>':\n            return dfs(x + 1, y, current_map)\n\n        return False\n\n    def backtrack(x, y, current_map):\n        if dfs(x, y, current_map):\n            return [x, y]\n\n        if current_map[x][y] == '@':\n            return []\n\n        if current_map[x][y] == '~':\n            return backtrack(x, y + 1, current_map)\n\n        if current_map[x][y] == '#':\n            return []\n\n        if current_map[x][y] == '<':\n            return backtrack(x - 1, y, current_map)\n\n        if current_map[x][y] == '>':\n            return backtrack(x + 1, y, current_map)\n\n        return []\n\n    paths = []\n    for _ in range(Y):\n        path = backtrack(0, 0, current_map)\n        if path:\n            paths.append(path)\n\n    if not paths:\n        return \"begin repairs\"\n\n    paths.sort()\n    return ''.join(map(str, paths))"
    },
    {
        "number": 3104,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    equation = stdin.strip()\n    A, S = equation.split('=')\n    A = int(A)\n    S = int(S)\n\n    if A == S:\n        return equation\n\n    # Insert addition operations\n    corrected_equation = ''\n    for i in range(len(A)):\n        if i == 0 or A[i]!= A[i - 1]:\n            corrected_equation += str(A[i])\n        else:\n            corrected_equation += '0'\n\n    # Insert addition operations\n    corrected_equation += str(S)\n\n    return corrected_equation\n"
    },
    {
        "number": 3105,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = list(map(int, stdin.readline().strip().split()))\n\n    def find_pattern(s):\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 2]:\n                return True\n        return False\n\n    def find_pair(s):\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 2] and s[i] < s[i + 1]:\n                return True\n        return False\n\n    for i in range(N):\n        if find_pattern(S[i]):\n            A, B = S[i], S[i + 2]\n            if find_pair(S[i]):\n                B = min(B, S[i + 1])\n            print(A, B)\n            break\n\n    if not find_pair(S[0]):\n        print(-1)\n"
    },
    {
        "number": 3106,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lights = [0] * 1000000\n    lights[0] = 1\n    lights[1] = 1\n    lights[2] = 1\n    lights[3] = 1\n    lights[4] = 1\n    lights[5] = 1\n    lights[6] = 1\n    lights[7] = 1\n    lights[8] = 1\n    lights[9] = 1\n    lights[10] = 1\n    lights[11] = 1\n    lights[12] = 1\n    lights[13] = 1\n    lights[14] = 1\n    lights[15] = 1\n    lights[16] = 1\n    lights[17] = 1\n    lights[18] = 1\n    lights[19] = 1\n    lights[20] = 1\n    lights[21] = 1\n    lights[22] = 1\n    lights[23] = 1\n    lights[24] = 1\n    lights[25] = 1\n    lights[26] = 1\n    lights[27] = 1\n    lights[28] = 1\n    lights[29] = 1\n    lights[30] = 1\n    lights[31] = 1\n    lights[32] = 1\n    lights[33] = 1\n    lights[34] = 1\n    lights[35] = 1\n    lights[36] = 1\n    lights[37] = 1\n    lights[38] = 1\n    lights[39] = 1\n    lights[40] = 1\n    lights[41] = 1\n    lights[42] = 1\n    lights[43] = 1\n    lights[44] = 1\n    lights[45] = 1\n    lights[46] = 1\n    lights[47] = 1\n    lights[48] = 1\n    lights[49] = 1\n    lights[50] = 1\n    lights[51] = 1\n    lights[52] = 1\n    lights[53] = 1\n    lights[54] = 1\n    lights[55] = 1\n    lights[56] = 1\n    lights[57] = 1\n    lights[58] = 1\n    lights[59] = 1\n    lights[60] = 1\n    lights[61] = 1\n    lights[62] = 1\n    lights[63] = 1\n    lights[64] = 1\n    lights[65] = 1\n    lights[66] = 1\n    lights[67] = 1\n    lights[68] = 1\n    lights[69] = 1\n    lights[70] = 1\n    lights[71] = 1\n    lights[72] = 1\n    lights[73] = 1\n    lights[74] = 1\n    lights[75] = 1\n    lights[76] = 1\n    lights[77] = 1\n    lights[78] = 1\n    lights[79] = 1\n    lights[80] = 1\n    lights[81] = 1\n    lights[82] = 1\n    lights[83] = 1\n    lights[84] = 1\n    lights[85] = 1\n    lights[86] = 1\n    lights[87] = 1\n    lights[88] = 1\n    lights[89] = 1\n    lights[90] = 1\n    lights[91] = 1\n    lights[92] = 1\n    lights[93] = 1\n    lights[94] = 1\n    lights[95] = 1\n    lights[96] = 1\n    lights[97] = 1\n    lights[98] = 1\n    lights[99] = 1\n    lights[100] = 1\n    lights[101] = 1\n    lights[102] = 1\n    lights[103] = 1\n    lights[104] = 1\n    lights[105] = 1\n    lights[106] = 1\n    lights[107] = 1\n    lights[108] = 1\n    lights[109] = 1\n    lights[110] = 1\n    lights[111] = "
    },
    {
        "number": 3107,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    routes = []\n    for _ in range(n):\n        routes.append(list(map(int, stdin.split())))\n\n    pairs = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        pairs.append((a, b))\n\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(m):\n                for l in range(k + 1, m):\n                    if routes[i][k] == routes[j][l]:\n                        result.append(1)\n                        break\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 3108,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    max_avg = float('-inf')\n    max_subseq = []\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            subseq = a[i:j+1]\n            avg = sum(subseq) / len(subseq)\n            if avg > max_avg:\n                max_avg = avg\n                max_subseq = subseq\n\n    return str(max_avg) + '.' + '001' if max_avg > 0 else '0.000000'\n"
    },
    {
        "number": 3109,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    v = list(map(float, stdin.split()))\n    x = list(map(float, stdin.split()))\n    min_v = list(map(float, stdin.split()))\n    max_v = list(map(float, stdin.split()))\n\n    def max_sand_height(section, color):\n        return max(v[section] * x[section], min_v[section] * x[section])\n\n    def min_sand_height(section, color):\n        return min(v[section] * x[section], max_v[section] * x[section])\n\n    def sand_height_difference(section, color):\n        return max_sand_height(section, color) - min_sand_height(section, color)\n\n    def sand_height_distribution(section, color):\n        return sand_height_difference(section, color) / (n - 1)\n\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            result += sand_height_distribution(i, j)\n\n    return round(result, 3)"
    },
    {
        "number": 3110,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    grid = [[0] * n for _ in range(m)]\n    for _ in range(m):\n        row = list(map(int, stdin.split()))\n        for i in range(n):\n            grid[_][i] = row[i]\n    codes = []\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 0:\n                codes.append(grid[i][j])\n                for k in range(i - 1, -1, -1):\n                    if grid[k][j] == 0:\n                        codes.append(grid[k][j])\n                        break\n                for k in range(j - 1, -1, -1):\n                    if grid[i][k] == 0:\n                        codes.append(grid[i][k])\n                        break\n    return str(len(codes))"
    },
    {
        "number": 3111,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    dials = list(map(int, stdin.split()))\n    sheets = [\"\".join(map(str, dials[:i+1])) for i in range(N)]\n    sums = [0] * M\n\n    for i in range(M):\n        A, B = map(int, stdin.split())\n        sheets[A-1] = sheets[A-1][:B-A] + str(A) + sheets[A-1][B:]\n        sums[i] = sum(sheets[A-1])\n\n    for i in range(M):\n        sheets[B-1] = sheets[B-1][:A-B] + str(B) + sheets[B-1][A:]\n        sums[i] += sum(sheets[B-1])\n\n    for i in range(M):\n        sheets[A-1] = sheets[A-1][:B-A] + str(0) + sheets[A-1][B:]\n        sums[i] += sum(sheets[A-1])\n\n    return \"\\n\".join(map(str, sums))"
    },
    {
        "number": 3112,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    edges = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n\n    def is_valid(a, b):\n        return 1 <= a <= N and 1 <= b <= N and a!= b\n\n    def is_valid_route(a, b):\n        return 1 <= a <= N and 1 <= b <= N and a!= b\n\n    def is_valid_belt(belt):\n        return 1 <= belt <= N\n\n    def is_valid_producer(producer):\n        return 1 <= producer <= K\n\n    def is_valid_product(product):\n        return 1 <= product <= N\n\n    def is_valid_delivery(a, b):\n        return 1 <= a <= N and 1 <= b <= N\n\n    def is_valid_belt_route(belt, a, b):\n        return 1 <= belt <= N and 1 <= a <= N and 1 <= b <= N\n\n    def is_valid_belt_belt(belt1, belt2):\n        return 1 <= belt1 <= N and 1 <= belt2 <= N\n\n    def is_valid_belt_belt_route(belt1, belt2, a, b):\n        return 1 <= belt1 <= N and 1 <= belt2 <= N and 1 <= a <= N and 1 <= b <= N\n\n    def is_valid_belt_belt_belt(belt1, belt2, belt3):\n        return 1 <= belt1 <= N and 1 <= belt2 <= N and 1 <= belt3 <= N\n\n    def is_valid_belt_belt_belt_route(belt1, belt2, belt3, a, b):\n        return 1 <= belt1 <= N and 1 <= belt2 <= N and 1 <= belt3 <= N and 1 <= a <= N and 1 <= b <= N\n\n    def is_valid_belt_belt_belt_belt(belt1, belt2, belt3, belt4):\n        return 1 <= belt1 <= N and 1 <= belt2 <= N and 1 <= belt3 <= N and 1 <= belt4 <= N\n\n    def is_valid_belt_belt_belt_belt_route(belt1, belt2, belt3, belt4, a, b):\n        return 1 <= belt1 <= N and 1 <= belt2 <= N and 1 <= belt3 <= N and 1 <= belt4 <= N and 1 <= a <= N and 1 <= b <= N\n\n    def is_valid_belt_belt_belt_belt_belt(belt1, belt2, belt3, belt4, belt5):\n        return 1 <= belt1 <= N and 1 <= belt2 <= N and 1 <= belt3 <= N and 1 <= belt4 <= N and 1 <= belt5 <= N\n\n    def is_valid_belt_belt_belt_belt_belt_route(belt1, belt2, belt3, belt4, belt5, a, b):\n        return 1 <= belt1 <= N and 1 <= belt2 <= N and 1 <= belt3 <= N and 1 <= belt4 <= N and 1 <= belt5 <= N and 1 <= a <= N and 1 <= b <= N\n\n    def is_valid_belt_belt_belt_belt_belt_belt(belt1, belt2, belt3, belt4, belt5, belt6):\n        return 1 <= belt1 <= N and 1 <= belt2 <= N and 1 <= belt3 <= N and 1 <= belt4 <= N and 1 <= belt5 <= N and 1 <= belt6 <= N\n\n    def is_valid_belt_belt_belt_belt_belt_belt_route(belt1, belt2, belt3, belt4, belt5, belt6, a, b):\n        return 1 <= belt1 <= N and 1 <= belt2 <= N and 1 <= belt3 <= N and 1 <= belt4 <= N and 1 <= belt5 <= N and 1"
    },
    {
        "number": 3113,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    triangles = []\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3 = map(int, stdin.split())\n        triangles.append((x1, y1, x2, y2, x3, y3))\n\n    seen_triangles = set()\n    for _ in range(m):\n        x1, y1, x2, y2, x3, y3 = map(int, stdin.split())\n        if (x1, y1) not in seen_triangles and (x2, y2) not in seen_triangles and (x3, y3) not in seen_triangles:\n            seen_triangles.add((x1, y1))\n            seen_triangles.add((x2, y2))\n            seen_triangles.add((x3, y3))\n\n    if len(seen_triangles) == n:\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 3114,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    roads = []\n    for _ in range(M):\n        x, y = map(int, stdin.split())\n        roads.append((x, y))\n\n    directions = []\n    for i in range(N):\n        for j in range(i + 1, N):\n            if i == j:\n                continue\n            if (i, j) not in roads:\n                directions.append((i, j))\n\n    if not directions:\n        return \"NO\"\n\n    directions.sort()\n    directions = [tuple(sorted(directions[i:j+1])) for i, j in combinations(directions, 2)]\n\n    for direction in directions:\n        print(*direction, sep=\" \")\n\n    return \"YES\""
    },
    {
        "number": 3115,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    matches = []\n    for _ in range(M):\n        K, L = map(int, stdin.split())\n        matches.append((K, L))\n\n    def is_consistent(matches):\n        for i in range(len(matches)):\n            for j in range(i + 1, len(matches)):\n                if matches[i][0] == matches[j][0] and matches[i][1] == matches[j][1]:\n                    return False\n        return True\n\n    if is_consistent(matches):\n        return \"consistent\"\n    else:\n        return \"inconsistent\""
    },
    {
        "number": 3116,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stars = []\n    for _ in range(n):\n        x, y, z = map(int, stdin.strip().split())\n        stars.append((x, y, z))\n\n    def distance(a, b):\n        return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2 + (a[2] - b[2]) ** 2) ** 0.5\n\n    def volume(stars):\n        volume = 0\n        for i in range(len(stars)):\n            for j in range(i + 1, len(stars)):\n                for k in range(j + 1, len(stars)):\n                    a = distance(stars[i], stars[j])\n                    b = distance(stars[j], stars[k])\n                    c = distance(stars[k], stars[i])\n                    volume += (a + b + c) / 2\n        return volume\n\n    def smallest_volume_cylinder(stars):\n        volume = volume(stars)\n        smallest_volume = float('inf')\n        for i in range(len(stars)):\n            for j in range(i + 1, len(stars)):\n                for k in range(j + 1, len(stars)):\n                    a = distance(stars[i], stars[j])\n                    b = distance(stars[j], stars[k])\n                    c = distance(stars[k], stars[i])\n                    volume_i = (a + b + c) / 2\n                    volume_j = (a + b + c) / 2\n                    volume_k = (a + b + c) / 2\n                    volume_ij = (a + b + c) / 2\n                    volume_jk = (a + b + c) / 2\n                    volume_ik = (a + b + c) / 2\n                    volume_ab = (a + b) / 2\n                    volume_bc = (b + c) / 2\n                    volume_ca = (c + a) / 2\n                    volume_ij_ab = (a + b + c) / 2\n                    volume_ij_bc = (b + c + a) / 2\n                    volume_ij_ca = (c + a + b) / 2\n                    volume_jk_ab = (a + b + c) / 2\n                    volume_jk_bc = (b + c + a) / 2\n                    volume_jk_ca = (c + a + b) / 2\n                    volume_ik_ab = (a + b + c) / 2\n                    volume_ik_bc = (b + c + a) / 2\n                    volume_ik_ca = (c + a + b) / 2\n                    volume_ab_bc = (a + b + c) / 2\n                    volume_ab_ca = (a + b + c) / 2\n                    volume_bc_ca = (b + c + a) / 2\n                    volume_ca_ab = (c + a + b) / 2\n                    volume_ca_bc = (c + a + b) / 2\n                    volume_ab_ij = (a + b + c) / 2\n                    volume_ab_jk = (a + b + c) / 2\n                    volume_ab_ik = (a + b + c) / 2\n                    volume_bc_ij = (b + c + a) / 2\n                    volume_bc_jk = (b + c + a) / 2\n                    volume_bc_ik = (b + c + a) / 2\n                    volume_ca_ij = (c + a + b) / 2\n                    volume_ca_jk = (c + a + b) / 2\n                    volume_ca_ik = (c + a + b) / 2\n                    volume_ij_ab_bc = (a + b + c) / 2\n                    volume_ij_ab_ca = (a + b + c) / 2\n                    volume_ij_bc_ca = (b + c + a) / 2\n                    volume_ij_ca_ab = (c + a + b) / 2\n                    volume_ij_ca_bc = (c + a + b) / 2\n                    volume_jk_ab_bc = (a + b + c) / 2\n                    volume_jk_ab_ca = (a + b + c) / 2\n                    volume_jk_bc_ca = (b + c + a) / 2\n                    volume_jk_ca_ab = (c + a + b) / 2\n                    volume_jk_ca_bc = (c + a + b"
    },
    {
        "number": 3117,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, s = map(int, stdin.split())\n    s = ''.join(sorted(set(s), key=s.index))\n    max_count = 0\n    max_string = ''\n    for i in range(L):\n        if s[i] == s[i + 1]:\n            count = s.count(s[i])\n            if count > max_count:\n                max_count = count\n                max_string = s[i:i + 2]\n    return str(max_count)"
    },
    {
        "number": 3118,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n\n    # Compute the number of shuffles required\n    m = 0\n    for i in range(n):\n        m += a[i] - b[i]\n\n    # Return the result\n    return str(m)"
    },
    {
        "number": 3119,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    e = list(map(int, stdin.split()))\n\n    max_score = 0\n    for i in range(p):\n        if s[i] < e[i]:\n            max_score += 1\n\n    return str(max_score)\n"
    },
    {
        "number": 3120,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Sample Input 1\n    program1 = \"concat(shuffle([1,2]),shuffle([1,2]))\"\n    program2 = \"shuffle([1,2,1,2])\"\n\n    # Sample Input 2\n    program3 = \"sorted(concat([3,2,1],[4,5,6]))\"\n    program4 = \"[1,2,3,4,5,6]\"\n\n    # Check if the programs are equivalent\n    if program1 == program2:\n        return \"equal\"\n    elif program3 == program4:\n        return \"equal\"\n    else:\n        return \"not equal\""
    },
    {
        "number": 3121,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, H = map(int, stdin.split())\n    n, m = map(int, stdin.split())\n    passages = []\n    for _ in range(m):\n        e, b, a, h = map(int, stdin.split())\n        passages.append((e, b, a, h))\n\n    def dfs(area, path):\n        if area == n:\n            return path[-1][2]\n        for i in range(m):\n            if passages[i][0] == area:\n                if i == m - 1:\n                    return dfs(passages[i][1], path + [passages[i]])\n                else:\n                    return dfs(passages[i][1], path + [passages[i]])\n        return -1\n\n    max_health = dfs(1, [])\n    if max_health == -1:\n        return \"Oh no\"\n    else:\n        return str(max_health)"
    },
    {
        "number": 3122,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    routes = []\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        routes.append((a, b, c))\n\n    def is_valid(route):\n        return route[0]!= route[1] and route[1]!= route[2]\n\n    valid_routes = [route for route in routes if is_valid(route)]\n\n    if not valid_routes:\n        return \"impossible\"\n\n    lounges = [0] * n\n    lounges[0] = 1\n    lounges[1] = 1\n\n    for route in valid_routes:\n        a, b, c = route\n        lounges[a] += 1\n        lounges[b] += 1\n\n    min_lounges = min(lounges)\n\n    return str(min_lounges)\n"
    },
    {
        "number": 3123,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    max_nesting = 0\n    for i in range(n):\n        max_nesting = max(max_nesting, a[i])\n\n    if max_nesting == 0:\n        return \"no quotation\"\n\n    k = 1\n    while max_nesting > 0:\n        k += 1\n        max_nesting -= 1\n\n    return str(k)\n"
    },
    {
        "number": 3124,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    numbers = list(map(int, stdin.strip().split()))\n\n    def is_valid(numbers):\n        for i in range(N - 1):\n            if numbers[i] % 2 == 1 and numbers[i + 1] % 2 == 1:\n                return False\n        return True\n\n    def get_next_move(numbers):\n        for i in range(N - 1):\n            if numbers[i] % 2 == 1:\n                return numbers[i]\n        return numbers[0]\n\n    moves = 0\n    while is_valid(numbers):\n        numbers = [get_next_move(numbers)]\n        moves += 1\n\n    return str(moves)\n"
    },
    {
        "number": 3125,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    I, O = stdin.split()\n    I = I.replace(\"'\", \"+\")\n    O = O.replace(\"'\", \"+\")\n    I = I.replace('\"', \"-\")\n    O = O.replace('\"', \"-\")\n\n    if not I or not O:\n        return \"corrupted\"\n\n    a_plus = [f\"{I[i]}+{O[i]}\" for i in range(len(I))]\n    a_minus = [f\"{I[i]}-{O[i]}\" for i in range(len(I))]\n\n    return \"\\n\".join(a_plus) + \"\\n\" + \"\\n\".join(a_minus)\n"
    },
    {
        "number": 3126,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    frogs = [0] * n\n    positions = [0] * n\n    for i in range(n):\n        frogs[i], positions[i] = map(int, stdin.split())\n\n    changes = []\n    for _ in range(C):\n        line = stdin.strip()\n        if line.startswith('+'):\n            changes.append(line[1:])\n        elif line.startswith('-'):\n            changes.append(line[1:])\n        elif line.startswith('\\t'):\n            changes.append(line[1:])\n        elif line.startswith('t'):\n            changes.append(line[1:])\n\n    total_jumps = 0\n    for i in range(n):\n        total_jumps += positions[i] - frogs[i]\n\n    return str(total_jumps)"
    },
    {
        "number": 3127,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    switches = list(range(1, n+1))\n    cables = []\n    for _ in range(m):\n        a, b, el = map(int, stdin.split())\n        cables.append((a, b, el))\n\n    def is_valid_path(a, b, el):\n        if a == b:\n            return False\n        for c in cables:\n            if c[0] == a and c[1] == b:\n                return False\n            if c[0] == b and c[1] == a:\n                return False\n        return True\n\n    def is_redundant(a, b, el):\n        return is_valid_path(a, b, el) and is_valid_path(b, a, el)\n\n    def is_optimal_path(a, b, el):\n        return is_valid_path(a, b, el) and is_valid_path(b, a, el)\n\n    def find_unused_switches(switches):\n        unused_switches = []\n        for i in range(n):\n            if is_redundant(i, i, 0) and not is_optimal_path(i, i, 0):\n                unused_switches.append(i)\n        return unused_switches\n\n    unused_switches = find_unused_switches(switches)\n    print(len(unused_switches))\n    for i in unused_switches:\n        print(i)\n\n    return '\\n'.join(map(str, unused_switches))"
    },
    {
        "number": 3128,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    movies = []\n    for _ in range(n):\n        q = int(stdin.readline())\n        if q == 1:\n            movies.append(int(stdin.readline()))\n        elif q == 2:\n            x = int(stdin.readline())\n            movies.append(x)\n    movies.sort()\n    result = []\n    for i in range(n):\n        if i < movies[i]:\n            result.append(i + 1)\n        else:\n            result.append(movies[i])\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3129,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hay_bales = stdin.strip()\n    hay_bales = list(hay_bales)\n    n = len(hay_bales)\n    steps = 0\n\n    for i in range(n - 2):\n        if hay_bales[i] == 'P' and hay_bales[i + 1] == 'P' and hay_bales[i + 2] == 'P':\n            hay_bales[i], hay_bales[i + 1], hay_bales[i + 2] = hay_bales[i + 2], hay_bales[i], hay_bales[i + 1]\n            steps += 1\n\n    return str(steps)"
    },
    {
        "number": 3130,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, M, N = map(int, stdin.split())\n    implications = []\n    for _ in range(M):\n        A, B = map(int, stdin.split())\n        implications.append((A, B))\n\n    events = set(range(D))\n    for implication in implications:\n        events.remove(implication[0])\n        events.remove(implication[1])\n\n    return''.join(str(event) for event in events)"
    },
    {
        "number": 3131,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def sum_of_keys(keys):\n        return sum(keys)\n\n    def play_piano(keys):\n        remainder = sum_of_keys(keys) % 1000000007\n        return remainder\n\n    keys = [0] * N\n    for i in range(K):\n        keys[i] = a[i]\n\n    remainder = play_piano(keys)\n    return str(remainder)"
    },
    {
        "number": 3132,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = [[0] * C for _ in range(R)]\n    for i in range(R):\n        for j in range(C):\n            if stdin[i][j] == 'x':\n                grid[i][j] = 1\n            elif stdin[i][j] == '.':\n                grid[i][j] = 0\n\n    def dfs(i, j, size):\n        if i < 0 or i >= R or j < 0 or j >= C or grid[i][j] == 1:\n            return\n\n        if size == 1:\n            print(i, j, size)\n            return\n\n        dfs(i - 1, j, size - 1)\n        dfs(i + 1, j, size - 1)\n        dfs(i, j - 1, size - 1)\n        dfs(i, j + 1, size - 1)\n\n    dfs(0, 0, 1)\n    return \"\""
    },
    {
        "number": 3133,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A, B = map(int, stdin.split())\n    intersections = [A, B]\n    for i in range(n):\n        l, r, t = map(int, stdin.split())\n        intersections.append(i)\n        if t == 1:\n            intersections.append(l)\n            intersections.append(r)\n    intersections.sort()\n    alice_right = intersections[0]\n    bob_right = intersections[1]\n    alice_left = intersections[2]\n    bob_left = intersections[3]\n    alice_right_tower = alice_right in [A, B]\n    bob_right_tower = bob_right in [A, B]\n    alice_left_tower = alice_left in [A, B]\n    bob_left_tower = bob_left in [A, B]\n    if alice_right_tower and not bob_right_tower:\n        return \"Alice\"\n    elif not alice_right_tower and bob_right_tower:\n        return \"Bob\"\n    elif alice_left_tower and not bob_left_tower:\n        return \"Alice\"\n    elif not alice_left_tower and bob_left_tower:\n        return \"Bob\"\n    else:\n        return \"indistinguishable\""
    },
    {
        "number": 3134,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    row_parities = list(map(int, stdin.split()))\n    col_parities = list(map(int, stdin.split()))\n\n    # Compute even parity for each row\n    row_parities = [parity for parity in row_parities if parity % 2 == 0]\n\n    # Compute even parity for each column\n    col_parities = [parity for parity in col_parities if parity % 2 == 0]\n\n    # Recover the original matrix\n    row_parity = row_parities[0]\n    col_parity = col_parities[0]\n    matrix = [[0] * C for _ in range(R)]\n    for i in range(R):\n        matrix[i][col_parity] = 1\n        col_parity = (col_parity + 1) % C\n\n    # Append row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i]\n\n    # Concatenate row parity to the end of each row\n    for i in range(1, R):\n        matrix[i] = [row_parity] + matrix[i"
    },
    {
        "number": 3135,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    binary = bin(n)[2:]\n    result = []\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            result.append('+')\n        else:\n            result.append('-')\n    result.sort()\n    return ''.join(result)"
    },
    {
        "number": 3136,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    roads = []\n    for _ in range(m):\n        u, v, d = map(int, stdin.split())\n        roads.append((u, v, d))\n\n    total_distance = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            for u, v, d in roads:\n                if i == u or i == v or j == u or j == v:\n                    continue\n                total_distance += d\n\n    return str(total_distance)\n"
    },
    {
        "number": 3137,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    X, Y = map(int, stdin.split())\n\n    board = [[0] * M for _ in range(N)]\n    trap_row, trap_col = X, Y\n\n    for i in range(K):\n        x, y, c = map(int, stdin.split())\n        board[x - 1][y - 1] = c\n        board[x][y] = c\n        board[x + 1][y - 1] = c\n        board[x][y + 1] = c\n        board[x + 1][y] = c\n        board[x - 1][y + 1] = c\n        board[x][y - 1] = c\n        board[x + 1][y + 1] = c\n        board[x - 1][y - 1] = c\n        board[x + 1][y] = c\n        board[x - 1][y + 1] = c\n        board[x + 1][y - 1] = c\n        board[x - 1][y] = c\n        board[x][y + 1] = c\n        board[x + 1][y + 1] = c\n\n    def read_number(x, y):\n        return board[x][y]\n\n    def turn(x, y, times):\n        for _ in range(times):\n            dx, dy = -1, 0\n            if x > 0:\n                dx = 1\n            if y > 0:\n                dy = 1\n            if x < N - 1:\n                dx = -1\n            if y < M - 1:\n                dy = -1\n            board[x][y] = (board[x][y] + dx + dy) % 10\n            x += dx\n            y += dy\n\n    def move(x, y):\n        dx, dy = -1, 0\n        if x > 0:\n            dx = 1\n        if y > 0:\n            dy = 1\n        if x < N - 1:\n            dx = -1\n        if y < M - 1:\n            dy = -1\n        board[x][y] = (board[x][y] + dx + dy) % 10\n        x += dx\n        y += dy\n\n    def game_over():\n        for row in board:\n            for num in row:\n                if num == 0:\n                    return True\n        return False\n\n    def game_duration():\n        start_time = time.time()\n        while not game_over():\n            read_number(X, Y)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)\n            turn(X, Y, 90)"
    },
    {
        "number": 3138,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    pages = list(map(int, stdin.strip().split()))\n\n    # Calculate the sum of the integers on the first page\n    sum_1 = sum(pages[:2])\n\n    # Calculate the product of the integers on the first page\n    product_1 = 1\n    for i in range(2, len(pages)):\n        product_1 *= pages[i]\n\n    # Calculate the sum of the integers on the second page\n    sum_2 = sum(pages[2:])\n\n    # Calculate the product of the integers on the second page\n    product_2 = 1\n    for i in range(2, len(pages)):\n        product_2 *= pages[i]\n\n    # Calculate the number of ways for Marguerite to choose a range of at least two consecutive pages\n    ways = 0\n    for i in range(1, n):\n        ways += (product_1 - sum_1) // (product_2 - sum_2)\n\n    return str(ways)\n"
    },
    {
        "number": 3139,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    students = []\n    for _ in range(n):\n        line = stdin.readline().strip()\n        if line == \"D\":\n            A, B = map(int, line.split())\n            students.append((A, B))\n        elif line == \"P\":\n            i = int(line.split()[1])\n            if i < len(students):\n                students[i] = \"NE\"\n            else:\n                students.append(\"NE\")\n    return \"\\n\".join(students)"
    },
    {
        "number": 3140,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, k, l = map(int, stdin.split())\n    x_0, y_0 = map(int, stdin.split())\n\n    fish_count = 0\n    for i in range(r):\n        fish_count += sum(1 for _ in range(c) if t[i][j] <= l)\n\n    return str(fish_count)"
    },
    {
        "number": 3141,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    flaws = []\n    for _ in range(N):\n        x, y, z = map(float, stdin.strip().split())\n        flaws.append((x, y, z))\n\n    def distance(a, b):\n        return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2 + (a[2] - b[2]) ** 2) ** 0.5\n\n    min_distance = float('inf')\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if distance(flaws[i], flaws[j]) + distance(flaws[i], flaws[k]) + distance(flaws[j], flaws[k]) < min_distance:\n                    min_distance = distance(flaws[i], flaws[j]) + distance(flaws[i], flaws[k]) + distance(flaws[j], flaws[k])\n\n    return str(min_distance)\n"
    },
    {
        "number": 3142,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        sum_of_digits = sum(int(digit) for digit in str(i))\n        if sum_of_digits == S:\n            count += 1\n    return str(count)"
    },
    {
        "number": 3143,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    # Sort the names in ascending order\n    a.sort()\n    b.sort()\n\n    # Initialize the queue with the names in the initial order\n    queue = [a[i] for i in b]\n\n    # Initialize the result list\n    result = []\n\n    # Perform K inspections\n    for _ in range(K):\n        # Perform an inspection\n        for i in range(N):\n            # Check if the student is on the same spot as the current position\n            if queue[i] == a[i]:\n                # If it is, remove the student from the queue and add it to the result list\n                queue.pop(i)\n                result.append(queue.pop(0))\n                break\n\n        # If no student is found, break the loop\n        if not queue:\n            break\n\n    # Return the result list\n    return''.join(map(str, result))\n"
    },
    {
        "number": 3144,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, g, n, k = map(int, stdin.split())\n    M = 0\n    for i in range(n):\n        if i < k:\n            M += d\n        else:\n            M += d + g\n    return str(M)"
    },
    {
        "number": 3145,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    allowed_digits = set(map(int, stdin.split()))\n\n    count = 0\n    for i in range(A, B + 1):\n        if i % X == 0:\n            if sum(int(digit) for digit in str(i)) in allowed_digits:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 3146,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    prescriptions = []\n    for _ in range(n):\n        drop_off_time, type_char, seconds = map(int, stdin.split())\n        prescriptions.append((drop_off_time, type_char, seconds))\n\n    prescriptions.sort(key=lambda x: x[0])\n\n    in_store_prescriptions = []\n    remote_prescriptions = []\n    for drop_off_time, type_char, seconds in prescriptions:\n        if type_char == 'R':\n            remote_prescriptions.append((drop_off_time, seconds))\n        else:\n            in_store_prescriptions.append((drop_off_time, seconds))\n\n    if not in_store_prescriptions and not remote_prescriptions:\n        return '0.000000 0.000000'\n\n    in_store_avg_completion_time = sum(in_store_prescriptions) / len(in_store_prescriptions)\n    remote_avg_completion_time = sum(remote_prescriptions) / len(remote_prescriptions)\n\n    return f'{in_store_avg_completion_time:.6f} {remote_avg_completion_time:.6f}'\n"
    },
    {
        "number": 3147,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    memory = [[0] * C for _ in range(R)]\n    killers = []\n\n    for i in range(R):\n        for j in range(C):\n            if memory[i][j] == '1':\n                killers.append((i, j))\n\n    largest_killer = -1\n    for killer in killers:\n        size = 1\n        for i in range(killer[0], killer[0] + 2):\n            for j in range(killer[1], killer[1] + 2):\n                if memory[i][j] == '1':\n                    size += 1\n        if size > largest_killer:\n            largest_killer = size\n\n    return str(largest_killer)\n"
    },
    {
        "number": 3148,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    positions = []\n    for _ in range(n):\n        x, y = map(int, stdin.strip().split())\n        positions.append((x, y))\n\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def closest_swimmer(positions):\n        closest = float('inf')\n        closest_swimmer = None\n        for i, p in enumerate(positions):\n            for j, q in enumerate(positions):\n                if i!= j and distance(p, q) < closest:\n                    closest = distance(p, q)\n                    closest_swimmer = (i, j)\n        return closest_swimmer\n\n    def swimmer_group(positions):\n        swimmer_groups = []\n        for i, p in enumerate(positions):\n            for j, q in enumerate(positions):\n                if i!= j and distance(p, q) == closest_swimmer(positions):\n                    swimmer_groups.append((i, j))\n        return swimmer_groups\n\n    swimmer_groups = swimmer_group(positions)\n    x, y = closest_swimmer(positions), closest_swimmer(positions)\n    return f\"{x} {y}\""
    },
    {
        "number": 3149,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, omega, v_0, theta, w = map(float, stdin.split())\n    vertices = list(map(int, stdin.split()))\n    wall_height = w\n\n    # Calculate the initial velocity of the cookie\n    initial_velocity = v_0 * math.cos(math.radians(theta))\n\n    # Calculate the initial angle of the cookie trajectory\n    initial_angle = math.radians(theta)\n\n    # Calculate the angular velocity of the cookie\n    angular_velocity = math.radians(omega)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = wall_height / (9.81 * initial_velocity ** 2)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    # Calculate the time it takes for the cookie to reach the wall\n    time_to_wall = max(time_to_wall, 1e-3)\n\n    "
    },
    {
        "number": 3150,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ways = 0\n    for i in range(n):\n        x1, y1, x2, y2 = map(int, stdin.strip().split())\n        if x1 == x2 and y1 == y2:\n            continue\n        if x1 == x2:\n            if y1 > y2:\n                ways += 1\n            else:\n                ways += 2\n        elif y1 == y2:\n            if x1 > x2:\n                ways += 1\n            else:\n                ways += 2\n        else:\n            if x1 > x2:\n                ways += 2\n            else:\n                ways += 1\n    return str(ways)"
    },
    {
        "number": 3151,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return \"impossible\"\n\n    m = int(n ** 0.5)\n    k = int(m ** 2 - n ** 2)\n\n    if m < 1 or k < 1:\n        return \"impossible\"\n\n    return str(m) + \" \" + str(k)"
    },
    {
        "number": 3152,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    min_val = arr[0]\n    max_val = arr[-1]\n    L = len(arr)\n    sum_prices = 0\n    for i in range(L):\n        sum_prices += arr[i]\n    last_9_digits = sum_prices % 1000000000\n    return str(last_9_digits)"
    },
    {
        "number": 3153,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    purchases = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        purchases.append((a, b))\n\n    def count_cards(cards):\n        count = 0\n        for card in cards:\n            count += card\n        return count\n\n    def get_winner(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner(cards[1:])\n\n    def get_cards(purchases):\n        cards = []\n        for a, b in purchases:\n            cards.append(count_cards(purchases[a-1][1:]))\n            cards.append(count_cards(purchases[b-1][1:]))\n        return cards\n\n    def get_winner_cards(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards(cards[1:])\n\n    def get_winner_cards_count(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards_count(cards[1:])\n\n    def get_winner_cards_count_count(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards_count_count(cards[1:])\n\n    def get_winner_cards_count_count_count(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards_count_count_count(cards[1:])\n\n    def get_winner_cards_count_count_count_count(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards_count_count_count_count(cards[1:])\n\n    def get_winner_cards_count_count_count_count_count(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards_count_count_count_count_count(cards[1:])\n\n    def get_winner_cards_count_count_count_count_count_count(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards_count_count_count_count_count_count(cards[1:])\n\n    def get_winner_cards_count_count_count_count_count_count_count(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards_count_count_count_count_count_count_count(cards[1:])\n\n    def get_winner_cards_count_count_count_count_count_count_count_count(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards_count_count_count_count_count_count_count_count_count(cards[1:])\n\n    def get_winner_cards_count_count_count_count_count_count_count_count_count(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards_count_count_count_count_count_count_count_count_count_count(cards[1:])\n\n    def get_winner_cards_count_count_count_count_count_count_count_count_count_count(cards):\n        if len(cards) == 2:\n            return cards[0]\n        elif len(cards) == 1:\n            return cards[0]\n        else:\n            return get_winner_cards_count_count_count_"
    },
    {
        "number": 3154,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d, e = map(int, stdin.split())\n    events = []\n    for _ in range(e):\n        s, k, t = map(int, stdin.split())\n        events.append((s, k, t))\n\n    toys = set()\n    for s, k, t in events:\n        toys.add(t)\n\n    def is_crying(s, k, t):\n        return s == d and k == n and t == 0\n\n    def is_envious(s, k, t):\n        return s == d and k == n and t in toys\n\n    def is_inflexible(s, k, t):\n        return s == d and k == n and t in toys and s > events[k - 1][0]\n\n    def is_cannot_multitask(s, k, t):\n        return s == d and k == n and t in toys and s > events[k - 1][0]\n\n    def is_uncooperative(s, k, t):\n        return s == d and k == n and t in toys and s > events[k - 1][0]\n\n    def is_event(s, k, t):\n        return s == events[k - 1][0]\n\n    def is_assignment(s, k, t):\n        return s == d and k == n and t in toys\n\n    def is_possible(s, k, t):\n        return is_crying(s, k, t) or is_envious(s, k, t) or is_inflexible(s, k, t) or is_cannot_multitask(s, k, t) or is_uncooperative(s, k, t) or is_event(s, k, t) or is_assignment(s, k, t)\n\n    def find_assignment(s, k, t):\n        if is_possible(s, k, t):\n            return [t]\n        else:\n            return []\n\n    def find_assignments(s, k, t):\n        assignments = []\n        for i in range(n):\n            if is_possible(s, i + 1, t):\n                assignments.append(find_assignment(s, i + 1, t))\n        return assignments\n\n    def find_best_assignment(s, k, t):\n        assignments = find_assignments(s, k, t)\n        best_assignment = []\n        best_score = float('-inf')\n        for assignment in assignments:\n            score = sum(1 for a in assignment if is_possible(s, k, a))\n            if score > best_score:\n                best_score = score\n                best_assignment = assignment\n        return best_assignment\n\n    best_assignment = find_best_assignment(0, 1, 1)\n    if len(best_assignment) == 0:\n        return \"impossible\"\n    else:\n        return \" \".join(map(str, best_assignment))"
    },
    {
        "number": 3155,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    n = 0\n    k = 0\n    for i in range(1, X + 1):\n        n += 1\n        for j in range(1, X + 1):\n            k += 1\n            if i == j:\n                continue\n            if i == n and j == k:\n                return str(n) + \" \" + str(k)\n    return \"No solution found\""
    },
    {
        "number": 3156,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    stores = []\n    for _ in range(N):\n        store, item = map(str, stdin.split())\n        stores.append((store, item))\n\n    items = set()\n    for store, item in stores:\n        items.add(item)\n\n    def dfs(store, path):\n        if len(path) == K:\n            return True\n\n        for item in items:\n            if item in path:\n                continue\n\n            if dfs(store, path + [item]):\n                return True\n\n        return False\n\n    for store, item in stores:\n        if dfs(store, []):\n            return \"unique\"\n\n    return \"ambiguous\""
    },
    {
        "number": 3157,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    MOD = 10**M\n    MOD_INV = MOD ** -1\n\n    def f(word):\n        if not word:\n            return 0\n        return (f(word[1:]) * 33 + ord(word[0])) % MOD\n\n    count = 0\n    for i in range(N):\n        word = input()\n        hash_value = f(word)\n        if hash_value == K:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 3158,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    images = []\n    for line in stdin.splitlines():\n        images.append(line.strip())\n\n    # Initialize variables\n    num_touches = 0\n    max_distance = 0\n    max_gesture = \"\"\n    max_direction = \"\"\n\n    # Iterate over the images\n    for i in range(len(images)):\n        for j in range(len(images[i])):\n            # Check if the current pixel is a touch\n            if images[i][j] == \".\":\n                num_touches += 1\n                # Calculate the distance between the current touch and the previous touch\n                distance = abs(i - j)\n                # Update the maximum distance and gesture\n                if distance > max_distance:\n                    max_distance = distance\n                    max_gesture = \"pan\" if i == j else \"zoom\"\n                    max_direction = \"out\" if i == j else \"in\"\n\n    # Print the result\n    print(f\"{num_touches} {max_gesture} {max_direction}\")\n\n    return \"\""
    },
    {
        "number": 3159,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    web_page = \"\"\n    for _ in range(H):\n        line = stdin.strip()\n        for _ in range(W):\n            char = line.pop(0)\n            if char == '$':\n                web_page += \" \"\n            else:\n                web_page += char\n    return web_page"
    },
    {
        "number": 3160,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    S = list(stdin.strip())\n    L = [0] * n\n    L[0] = 1\n    for i in range(1, n):\n        L[i] = L[i-1] + 1\n    L[n-1] = 1\n    L[n-2] = 1\n    L[n-3] = 1\n    L[n-4] = 1\n    L[n-5] = 1\n    L[n-6] = 1\n    L[n-7] = 1\n    L[n-8] = 1\n    L[n-9] = 1\n    L[n-10] = 1\n    L[n-11] = 1\n    L[n-12] = 1\n    L[n-13] = 1\n    L[n-14] = 1\n    L[n-15] = 1\n    L[n-16] = 1\n    L[n-17] = 1\n    L[n-18] = 1\n    L[n-19] = 1\n    L[n-20] = 1\n    L[n-21] = 1\n    L[n-22] = 1\n    L[n-23] = 1\n    L[n-24] = 1\n    L[n-25] = 1\n    L[n-26] = 1\n    L[n-27] = 1\n    L[n-28] = 1\n    L[n-29] = 1\n    L[n-30] = 1\n    L[n-31] = 1\n    L[n-32] = 1\n    L[n-33] = 1\n    L[n-34] = 1\n    L[n-35] = 1\n    L[n-36] = 1\n    L[n-37] = 1\n    L[n-38] = 1\n    L[n-39] = 1\n    L[n-40] = 1\n    L[n-41] = 1\n    L[n-42] = 1\n    L[n-43] = 1\n    L[n-44] = 1\n    L[n-45] = 1\n    L[n-46] = 1\n    L[n-47] = 1\n    L[n-48] = 1\n    L[n-49] = 1\n    L[n-50] = 1\n    L[n-51] = 1\n    L[n-52] = 1\n    L[n-53] = 1\n    L[n-54] = 1\n    L[n-55] = 1\n    L[n-56] = 1\n    L[n-57] = 1\n    L[n-58] = 1\n    L[n-59] = 1\n    L[n-60] = 1\n    L[n-61] = 1\n    L[n-62] = 1\n    L[n-63] = 1\n    L[n-64] = 1\n    L[n-65] = 1\n    L[n-66] = 1\n    L[n-67] = 1\n    L[n-68] = 1\n    L[n-69] = 1\n    L[n-70] = 1\n    L[n-71] = 1\n    L[n-72] = 1\n    L[n-73] = 1\n    L[n-74] = 1\n    L[n-75] = 1\n    L[n-76] = 1\n    L[n-77] = 1\n    L[n-78] = 1\n    L[n-79] = 1\n    L[n-80] = 1\n    L[n-81] = 1\n    L[n-82] = 1\n    L[n-83] = 1\n    L[n-84] = 1\n    L[n-85] = 1\n    L[n-86] = 1\n    L[n-87] = 1\n    L[n-88] = 1\n    L[n-8"
    },
    {
        "number": 3161,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    target_picture = []\n    for _ in range(N):\n        target_picture.append(list(map(int, stdin.strip())))\n\n    def paint(picture, target_picture):\n        if len(picture) == 1:\n            return picture[0]\n\n        left_square = paint(picture[:2], target_picture)\n        right_square = paint(picture[2:], target_picture)\n\n        if left_square == target_picture[0] and right_square == target_picture[1]:\n            return 0\n\n        if left_square == target_picture[0] and right_square == target_picture[2]:\n            return 1\n\n        if left_square == target_picture[1] and right_square == target_picture[2]:\n            return 2\n\n        return 3\n\n    painted_picture = paint(target_picture, target_picture)\n    difference = abs(len(target_picture) - len(painted_picture))\n\n    return str(difference) + '\\n' + '\\n'.join(map(str, painted_picture))\n"
    },
    {
        "number": 3162,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    current_pulses = []\n    for _ in range(n):\n        pulse = input().split()\n        direction = pulse[0]\n        time = int(pulse[1])\n        length = int(pulse[2])\n        wire = int(pulse[3])\n        current_pulses.append((direction, time, length, wire))\n\n    def is_valid_pulse(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v' and time <= wire\n\n    def is_valid_wire(wire):\n        return 1 <= wire <= 200000\n\n    def is_valid_current(current):\n        return 1 <= current <= 100000\n\n    def is_valid_pulse_time(pulse):\n        direction, time, length, wire = pulse\n        return time <= wire\n\n    def is_valid_pulse_length(pulse):\n        direction, time, length, wire = pulse\n        return length <= wire\n\n    def is_valid_pulse_wire(pulse):\n        direction, time, length, wire = pulse\n        return wire == 1 or wire == 2\n\n    def is_valid_pulse_current(pulse):\n        direction, time, length, wire = pulse\n        return current == 1 or current == 2\n\n    def is_valid_pulse_direction(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v'\n\n    def is_valid_pulse_time_wire(pulse):\n        direction, time, length, wire = pulse\n        return time <= wire\n\n    def is_valid_pulse_length_wire(pulse):\n        direction, time, length, wire = pulse\n        return length <= wire\n\n    def is_valid_pulse_wire_current(pulse):\n        direction, time, length, wire = pulse\n        return wire == 1 or wire == 2\n\n    def is_valid_pulse_current_wire(pulse):\n        direction, time, length, wire = pulse\n        return current == 1 or current == 2\n\n    def is_valid_pulse_direction_time(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v' and time <= wire\n\n    def is_valid_pulse_direction_time_wire(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v' and time <= wire\n\n    def is_valid_pulse_direction_time_length(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v' and time <= wire\n\n    def is_valid_pulse_direction_time_length_wire(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v' and time <= wire\n\n    def is_valid_pulse_direction_time_length_current(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v' and time <= wire and current == 1 or direction == 'h' or direction == 'v' and time <= wire and current == 2\n\n    def is_valid_pulse_direction_time_length_current_wire(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v' and time <= wire and current == 1 or direction == 'h' or direction == 'v' and time <= wire and current == 2\n\n    def is_valid_pulse_direction_time_length_current_wire_current(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v' and time <= wire and current == 1 or direction == 'h' or direction == 'v' and time <= wire and current == 2\n\n    def is_valid_pulse_direction_time_length_current_wire_current_wire(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v' and time <= wire and current == 1 or direction == 'h' or direction == 'v' and time <= wire and current == 2\n\n    def is_valid_pulse_direction_time_length_current_wire_current_wire_current(pulse):\n        direction, time, length, wire = pulse\n        return direction == 'h' or direction == 'v' and time <= wire and current == 1 or direction == 'h' or direction == 'v' and time <= wire and current == 2\n\n    def is_valid_pulse_direction_time_length_current_wire_current_wire_current_wire(pulse):"
    },
    {
        "number": 3163,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    shelves = [[] for _ in range(N)]\n    for i in range(M):\n        shelves[i % N].append(i)\n\n    def move_book(book: int, shelf: int) -> int:\n        if shelf == 0:\n            return book\n        if shelf == N - 1:\n            return book\n        if shelves[shelf][-1] == book:\n            return shelves[shelf][-2]\n        return book\n\n    def return_book(book: int, shelf: int) -> int:\n        if shelf == 0:\n            return book\n        if shelf == N - 1:\n            return book\n        if shelves[shelf][-1] == book:\n            return shelves[shelf][-2]\n        return book\n\n    def move_books(books: List[int], shelf: int) -> List[int]:\n        result = []\n        for book in books:\n            result.append(move_book(book, shelf))\n        return result\n\n    def return_books(books: List[int], shelf: int) -> List[int]:\n        result = []\n        for book in books:\n            result.append(return_book(book, shelf))\n        return result\n\n    def arrange_books(books: List[int]) -> int:\n        if len(books) == 0:\n            return -1\n\n        shelf_count = [0] * N\n        for book in books:\n            shelf_count[book % N] += 1\n\n        for i in range(N):\n            if shelf_count[i] == 0:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in range(N):\n            if shelf_count[i] > 1:\n                return -1\n\n        for i in"
    },
    {
        "number": 3164,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n\n    max_length = 0\n    current_length = 1\n    current_start = 0\n\n    for i in range(1, N):\n        if arr[i] == arr[i - 1]:\n            current_length += 1\n        else:\n            current_length = 1\n            current_start = i\n\n        if current_length == 2:\n            max_length = max(max_length, i - current_start + 1)\n\n    return str(max_length)\n"
    },
    {
        "number": 3165,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, P = map(int, stdin.split())\n    board = [[0] * N for _ in range(N)]\n    attacked = [False] * N\n    moves = 0\n\n    for _ in range(K):\n        R, C, X = map(int, stdin.split())\n        board[R][C] = X\n        attacked[R] = True\n        attacked[C] = True\n\n    for _ in range(P):\n        R1, C1, R2, C2 = map(int, stdin.split())\n        moves += 1\n\n        for i in range(N):\n            for j in range(N):\n                if board[i][j] == 0:\n                    board[i][j] = 1\n                    attacked[i] = False\n                    attacked[j] = False\n                    break\n\n    for i in range(N):\n        if attacked[i]:\n            moves += 1\n\n    return str(moves)"
    },
    {
        "number": 3166,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    disqualified_players = list(map(int, stdin.split()))\n    S = set(disqualified_players)\n\n    def is_fair(player1, player2):\n        return player1 < player2\n\n    def find_fair_set(players):\n        players.sort(key=lambda x: x)\n        return players[:k]\n\n    def find_disqualified_players(players):\n        return [player for player in players if player not in S]\n\n    def find_disqualified_set(players):\n        return find_disqualified_players(players)\n\n    def find_fair_set_size(players):\n        return len(find_fair_set(players))\n\n    def find_fair_set_size_disqualified(players):\n        return len(find_disqualified_set(players))\n\n    def find_fair_set_size_disqualified_players(players):\n        return len(find_disqualified_set(find_disqualified_players(players)))\n\n    def find_fair_set_size_disqualified_players_fair(players):\n        return len(find_fair_set(find_disqualified_players(players)))\n\n    def find_fair_set_size_disqualified_players_fair_set(players):\n        return len(find_fair_set(find_disqualified_set(players)))\n\n    def find_fair_set_size_disqualified_players_fair_set_size(players):\n        return len(find_fair_set(find_disqualified_set(find_fair_set(players))))\n\n    def find_fair_set_size_disqualified_players_fair_set_size_disqualified(players):\n        return len(find_fair_set(find_disqualified_set(find_fair_set(find_disqualified_players(players)))))\n\n    def find_fair_set_size_disqualified_players_fair_set_size_disqualified_players(players):\n        return len(find_fair_set(find_disqualified_set(find_fair_set(find_disqualified_players(players)))))\n\n    def find_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair(players):\n        return len(find_fair_set(find_disqualified_set(find_fair_set(find_disqualified_players(players)))))\n\n    def find_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair_set(players):\n        return len(find_fair_set(find_disqualified_set(find_fair_set(find_fair_set(players)))))\n\n    def find_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair_set_size(players):\n        return len(find_fair_set(find_disqualified_set(find_fair_set(find_fair_set(players)))))\n\n    def find_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair_set_size_disqualified(players):\n        return len(find_fair_set(find_disqualified_set(find_fair_set(find_fair_set(find_disqualified_players(players)))))\n\n    def find_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair_set_size_disqualified_players(players):\n        return len(find_fair_set(find_disqualified_set(find_fair_set(find_fair_set(find_disqualified_players(players)))))\n\n    def find_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair(players):\n        return len(find_fair_set(find_disqualified_set(find_fair_set(find_fair_set(find_disqualified_players(players)))))\n\n    def find_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair_set(players):\n        return len(find_fair_set(find_disqualified_set(find_fair_set(find_fair_set(find_fair_set(players)))))\n\n    def find_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair_set_size_disqualified_players_fair_set_size(players):\n        return len(find_fair_set(find_"
    },
    {
        "number": 3167,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    seq = [0] * N\n    for i in range(N):\n        seq[i] = i + 1\n\n    for _ in range(K):\n        X = list(map(int, stdin.split()))\n        L, R = X[0], X[1]\n        for i in range(L, R+1):\n            seq[i] += 1\n\n    result = []\n    for i in range(Q):\n        L, R = map(int, stdin.split())\n        result.append(sum(seq[L:R+1]))\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3168,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    sequence = list(map(int, stdin.readline().strip().split()))\n\n    # Create a binary search tree from the sequence\n    root = None\n    for num in sequence:\n        if root is None:\n            root = TreeNode(num)\n        else:\n            current = root\n            while True:\n                if num < current.val:\n                    if current.left is None:\n                        current.left = TreeNode(num)\n                        break\n                    current = current.left\n                else:\n                    if current.right is None:\n                        current.right = TreeNode(num)\n                        break\n                    current = current.right\n\n    # Traverse the tree and insert every other number in order\n    current = root\n    C = 0\n    while current is not None:\n        if current.val % 2 == 0:\n            C += 1\n            current.left = TreeNode(current.val)\n        else:\n            current.right = TreeNode(current.val)\n        current = current.left if current.left is not None else current.right\n\n    # Print the values of the counter C\n    for i in range(N):\n        print(C)\n        C = 0"
    },
    {
        "number": 3169,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sticks = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, stdin.strip().split())\n        sticks.append((x1, y1, x2, y2))\n\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def shortest_path(start, end):\n        path = []\n        visited = set()\n        queue = [(start, 0)]\n        while queue:\n            node, distance = queue.pop(0)\n            if node == end:\n                path.append(node)\n                break\n            if node not in visited:\n                visited.add(node)\n                queue.append((node, distance + 1))\n                queue.append((node[0], node[1] + 1))\n                queue.append((node[0] + 1, node[1]))\n                queue.append((node[0], node[1] - 1))\n                queue.append((node[0] - 1, node[1]))\n                queue.append((node[0], node[1] + 2))\n                queue.append((node[0] + 2, node[1]))\n                queue.append((node[0], node[1] - 2))\n                queue.append((node[0] - 2, node[1]))\n        return path\n\n    def move_stick(stick):\n        x1, y1, x2, y2 = stick\n        dx, dy = x2 - x1, y2 - y1\n        if dx == 0 and dy == 0:\n            return\n        path = shortest_path((x1, y1), (x2, y2))\n        if len(path) == 0:\n            return\n        path.append((x2, y2))\n        path.sort(key=lambda p: distance(p, (x1, y1)))\n        path = path[1:]\n        for p in path:\n            x, y = p\n            if x == x2 and y == y2:\n                return\n        dx, dy = x2 - x1, y2 - y1\n        if dx > 0:\n            x1, y1 = x2, y2\n        elif dx < 0:\n            x1, y1 = x1, y1\n        elif dy > 0:\n            y1, x1 = y2, x2\n        else:\n            y1, x1 = y1, x1\n        x2, y2 = x1, y1\n        x1, y1 = x1 + dx, y1 + dy\n        x2, y2 = x2 + dx, y2 + dy\n        return (x1, y1, x2, y2)\n\n    def solve(sticks):\n        for i in range(len(sticks)):\n            for j in range(i + 1, len(sticks)):\n                if sticks[i][0] == sticks[j][0] and sticks[i][1] == sticks[j][1]:\n                    return \"No solution\"\n        for i in range(len(sticks)):\n            for j in range(i + 1, len(sticks)):\n                if sticks[i][2] == sticks[j][2] and sticks[i][3] == sticks[j][3]:\n                    return \"No solution\"\n        for i in range(len(sticks)):\n            for j in range(i + 1, len(sticks)):\n                if sticks[i][0] == sticks[j][2] and sticks[i][1] == sticks[j][3]:\n                    return \"No solution\"\n        for i in range(len(sticks)):\n            for j in range(i + 1, len(sticks)):\n                if sticks[i][0] == sticks[j][1] and sticks[i][2] == sticks[j][3]:\n                    return \"No solution\"\n        for i in range(len(sticks)):\n            for j in range(i + 1, len(sticks)):\n                if sticks[i][0] == sticks[j][1] and sticks[i][2] == sticks[j][2]:\n                    return \"No solution\"\n        for i in range(len(sticks)):\n            for j in range(i + 1, len(sticks)):\n                if sticks[i][0] == sticks[j][0] and sticks[i][1] == sticks[j][1] and sticks[i]["
    },
    {
        "number": 3170,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the shuffled deck\n    deck = stdin.strip()\n    # Split the deck into cards\n    cards = [int(c) for c in deck]\n    # Initialize the player names\n    player1 = \"Theta\"\n    player2 = \"Alice\"\n    # Initialize the player hands\n    player1_hand = []\n    player2_hand = []\n    # Initialize the discard pile\n    discard_pile = []\n    # Initialize the drawing pile\n    drawing_pile = []\n    # Initialize the current player\n    current_player = player1\n    # Initialize the current hand\n    current_hand = player1_hand\n    # Initialize the current discard pile\n    current_discard_pile = discard_pile\n    # Initialize the current drawing pile\n    current_drawing_pile = drawing_pile\n    # Initialize the current turn\n    turn = 1\n    # Initialize the winner\n    winner = None\n    # Initialize the score\n    score = 0\n    # Initialize the score of the current player\n    player_score = 0\n    # Initialize the score of the current player's friend\n    friend_score = 0\n    # Initialize the score of the current player's friend's friend\n    friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend\n    friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_score = 0\n    # Initialize the score of the current player's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend's friend\n    friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_friend_"
    },
    {
        "number": 3171,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    candidates = list(map(int, stdin.split()))\n    char_types = []\n\n    for i in range(N):\n        char_types.append(candidates[i])\n\n    for i in range(K):\n        line = stdin.split()\n        speaker = int(line[0])\n        statement = line[1]\n\n        if statement == 'truther':\n            char_types[speaker] = 'truther'\n        elif statement == 'fabulist':\n            char_types[speaker] = 'fabulist'\n        elif statement == 'charlatan':\n            char_types[speaker] = 'charlatan'\n        elif statement == 'not':\n            char_types[speaker] = 'not'\n        elif statement == 'and':\n            char_types[speaker] = 'and'\n        elif statement == 'xor':\n            char_types[speaker] = 'xor'\n\n    return '\\n'.join(map(str, char_types))"
    },
    {
        "number": 3172,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    fruits = []\n    for _ in range(n):\n        x, y = map(float, stdin.strip().split())\n        fruits.append((x, y))\n\n    max_slice = 0\n    for i in range(len(fruits)):\n        for j in range(i + 1, len(fruits)):\n            if fruits[i][0] == fruits[j][0]:\n                if fruits[i][1] < fruits[j][1]:\n                    max_slice += 1\n\n    return str(max_slice)\n"
    },
    {
        "number": 3173,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, K = map(int, stdin.split())\n    grid = [[None] * C for _ in range(R + 1)]\n    for _ in range(R):\n        grid[0][_] = 'R'\n    for _ in range(C - 1):\n        grid[R][_] = 'L'\n    for _ in range(R - 1):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_] = '?'\n    for _ in range(K):\n        grid[R][_] = '?'\n    for _ in range(R):\n        grid[R][_] = '?'\n    for _ in range(C):\n        grid[R][_]"
    },
    {
        "number": 3174,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    cities = []\n    for _ in range(N):\n        x, y, k = map(int, stdin.split())\n        cities.append((x, y, k))\n\n    def is_valid(city):\n        return 0 <= city[0] <= 100000000 and 0 <= city[1] <= 100000000 and k % K == 0\n\n    def is_happy(city):\n        residents = sum(city[2])\n        return residents % K == 0\n\n    def is_valid_subset(city):\n        return any(is_valid(c) for c in cities)\n\n    def is_happy_subset(city):\n        return is_happy(city)\n\n    def is_valid_road(city1, city2):\n        return abs(city1[0] - city2[0]) <= D and abs(city1[1] - city2[1]) <= D\n\n    def is_happy_road(city1, city2):\n        return is_happy(city1) and is_happy(city2)\n\n    def is_valid_counties(city):\n        return any(is_valid_subset(c) for c in cities)\n\n    def is_happy_counties(city):\n        return is_happy_subset(city)\n\n    def is_valid_roads(city1, city2):\n        return is_valid_road(city1, city2) and is_valid_road(city2, city1)\n\n    def is_happy_roads(city1, city2):\n        return is_happy_road(city1) and is_happy_road(city2)\n\n    def is_valid_counties_and_roads(city):\n        return is_valid_counties(city) and is_valid_roads(city, cities[0])\n\n    def is_happy_counties_and_roads(city):\n        return is_happy_counties(city) and is_happy_roads(city, cities[0])\n\n    def find_minimal_road_length(city1, city2):\n        return abs(city1[0] - city2[0]) + abs(city1[1] - city2[1])\n\n    def find_minimal_road_length_and_happy(city1, city2):\n        road_length = find_minimal_road_length(city1, city2)\n        return road_length, is_happy_roads(city1, city2)\n\n    def find_minimal_road_length_and_happy_counties(city):\n        road_length, happy = find_minimal_road_length_and_happy(city, cities[0])\n        return road_length, happy, is_happy_counties_and_roads(city)\n\n    def find_minimal_road_length_and_happy_counties_and_roads(city):\n        road_length, happy, valid_roads = find_minimal_road_length_and_happy_counties(city)\n        return road_length, happy, valid_roads\n\n    def find_minimal_road_length_and_happy_counties_and_roads_and_happy(city):\n        road_length, happy, valid_roads, happy_counties = find_minimal_road_length_and_happy_counties_and_roads(city)\n        return road_length, happy, valid_roads, happy_counties\n\n    def find_minimal_road_length_and_happy_counties_and_roads_and_happy_counties(city):\n        road_length, happy, valid_roads, happy_counties = find_minimal_road_length_and_happy_counties_and_roads_and_happy(city)\n        return road_length, happy, valid_roads, happy_counties\n\n    def find_minimal_road_length_and_happy_counties_and_roads_and_happy_counties_and_roads(city):\n        road_length, happy, valid_roads, happy_counties, valid_roads_and_happy_counties = find_minimal_road_length_and_happy_counties_and_roads_and_happy_counties_and_roads(city)\n        return road_length, happy, valid_roads, happy_counties, valid_roads_and_happy_counties\n\n    def find_minimal_road_length_and_happy_counties_and_roads_and_happy"
    },
    {
        "number": 3175,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = list(map(int, stdin.split()[1:]))\n\n    max_area = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            area = segments[i] * segments[j]\n            if area > max_area:\n                max_area = area\n\n    return str(max_area)\n"
    },
    {
        "number": 3176,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    plants = []\n    for _ in range(N):\n        x, y, f = map(int, stdin.split())\n        plants.append((x, y, f))\n\n    energy = [0] * N\n    energy[0] = K\n\n    for i in range(1, N):\n        x1, y1, f1 = plants[i - 1]\n        x2, y2, f2 = plants[i]\n\n        if x2 > x1 and y2 == y1:\n            energy[i] += f1 * 2\n        elif y2 > y1 and x2 == x1:\n            energy[i] += f1 * 2\n        else:\n            energy[i] += f1\n\n    sequence = []\n    current_energy = 0\n    for i in range(N):\n        if current_energy < energy[i]:\n            sequence.append(i + 1)\n            current_energy += energy[i]\n        else:\n            break\n\n    return '\\n'.join(map(str, sequence))\n"
    },
    {
        "number": 3177,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    allowed_swaps = []\n    for _ in range(M):\n        A, B = map(int, stdin.split())\n        allowed_swaps.append((A, B))\n\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    def backtrack(permutation, swaps, current_permutation, current_swaps):\n        if len(current_permutation) == N:\n            return len(current_swaps)\n\n        if len(current_permutation) == 0:\n            return backtrack(permutation, swaps, [], [])\n\n        for i in range(N):\n            if i in current_permutation:\n                continue\n\n            swap(permutation, i, current_permutation.index(i))\n            swaps.append(current_permutation)\n            swaps.append(current_swaps)\n\n            result = backtrack(permutation, swaps, current_permutation + [i], current_swaps)\n\n            swap(permutation, i, current_permutation.index(i))\n            swaps.pop()\n            swaps.pop()\n\n            return result\n\n    permutation = list(map(int, stdin.split()))\n    swaps = []\n    result = backtrack(permutation, swaps, [], [])\n\n    return str(result)\n"
    },
    {
        "number": 3178,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n\n    def is_cycle(area1, area2):\n        for i in range(len(roads)):\n            if roads[i][0] == area1 and roads[i][1] == area2:\n                return True\n        return False\n\n    def is_cycle_sum_odd(cycle):\n        return sum(cycle) % 2!= 0\n\n    def is_cycle_sum_odd_and_adjacent(cycle):\n        for i in range(len(cycle) - 1):\n            if is_cycle_sum_odd(cycle[i:i+2]):\n                return True\n        return False\n\n    def is_cycle_adjacent(cycle):\n        for i in range(len(cycle) - 1):\n            for j in range(i + 1, len(cycle)):\n                if is_cycle_sum_odd_and_adjacent(cycle[i:j+1]):\n                    return True\n        return False\n\n    def is_cycle_adjacent_sum_odd(cycle):\n        for i in range(len(cycle) - 1):\n            for j in range(i + 1, len(cycle)):\n                if is_cycle_adjacent(cycle[i:j+1]):\n                    return True\n        return False\n\n    def is_cycle_adjacent_sum_odd_and_adjacent(cycle):\n        for i in range(len(cycle) - 1):\n            for j in range(i + 1, len(cycle)):\n                if is_cycle_adjacent_sum_odd(cycle[i:j+1]):\n                    return True\n        return False\n\n    def is_cycle_adjacent_sum_odd_and_adjacent_sum_odd(cycle):\n        for i in range(len(cycle) - 1):\n            for j in range(i + 1, len(cycle)):\n                if is_cycle_adjacent_sum_odd_and_adjacent(cycle[i:j+1]):\n                    return True\n        return False\n\n    def is_cycle_adjacent_sum_odd_and_adjacent_sum_odd_and_cycle_sum_odd(cycle):\n        for i in range(len(cycle) - 1):\n            for j in range(i + 1, len(cycle)):\n                if is_cycle_adjacent_sum_odd_and_adjacent_sum_odd(cycle[i:j+1]):\n                    return True\n        return False\n\n    def is_cycle_adjacent_sum_odd_and_adjacent_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd(cycle):\n        for i in range(len(cycle) - 1):\n            for j in range(i + 1, len(cycle)):\n                if is_cycle_adjacent_sum_odd_and_adjacent_sum_odd_and_cycle_sum_odd(cycle[i:j+1]):\n                    return True\n        return False\n\n    def is_cycle_adjacent_sum_odd_and_adjacent_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd(cycle):\n        for i in range(len(cycle) - 1):\n            for j in range(i + 1, len(cycle)):\n                if is_cycle_adjacent_sum_odd_and_adjacent_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd(cycle[i:j+1]):\n                    return True\n        return False\n\n    def is_cycle_adjacent_sum_odd_and_adjacent_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd(cycle):\n        for i in range(len(cycle) - 1):\n            for j in range(i + 1, len(cycle)):\n                if is_cycle_adjacent_sum_odd_and_adjacent_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd(cycle[i:j+1]):\n                    return True\n        return False\n\n    def is_cycle_adjacent_sum_odd_and_adjacent_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd_and_cycle_sum_odd(cycle):\n        for i in range(len(cycle) - 1):\n            for j in range("
    },
    {
        "number": 3179,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    polygon = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        polygon.append((x, y))\n\n    min_side_length = float('inf')\n    for i in range(k):\n        for j in range(i + 1, k):\n            side_length = distance(polygon[i], polygon[j])\n            if side_length < min_side_length:\n                min_side_length = side_length\n\n    return round(min_side_length, 2)\n\n\ndef"
    },
    {
        "number": 3180,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    painting = [[0] * N for _ in range(N)]\n    saves = []\n\n    for _ in range(M):\n        command, *args = stdin.split()\n        if command == \"PAINT\":\n            x, y, *color = args\n            painting[x][y] = color[0]\n        elif command == \"SAVE\":\n            saves.append(painting.copy())\n        elif command == \"LOAD\":\n            painting = saves.pop()\n\n    result = [\"\".join(map(str, painting[i][j])) for i in range(N) for j in range(N)]\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 3181,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    sequence = list(range(1, N+1))\n    longest_subsequence = []\n\n    for i in range(N):\n        for j in range(i+1, N+1):\n            if len(sequence[i:j]) == K:\n                longest_subsequence.append(sequence[i:j])\n\n    if not longest_subsequence:\n        return \"-1\"\n\n    return \" \".join(map(str, longest_subsequence))"
    },
    {
        "number": 3182,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    points = []\n    for _ in range(N):\n        x, y = map(int, stdin.strip().split())\n        points.append((x, y))\n\n    def is_valid(p1, p2, p3):\n        return (p1[0]!= p2[0] and p1[1]!= p2[1]) or (p2[0]!= p3[0] and p2[1]!= p3[1]) or (p3[0]!= p1[0] and p3[1]!= p1[1])\n\n    def is_right_triangle(p1, p2, p3):\n        return (p1[0] * p2[1] - p1[1] * p2[0]) == (p2[0] * p3[1] - p2[1] * p3[0]) == (p3[0] * p1[1] - p3[1] * p1[0])\n\n    count = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if is_valid(points[i], points[j], points[k]) and is_right_triangle(points[i], points[j], points[k]):\n                    count += 1\n\n    return str(count)\n"
    },
    {
        "number": 3183,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v, c, w = map(int, stdin.split())\n        edges.append((u, v, c, w))\n\n    def min_cost_flow(s: int, t: int, cap: int, flow: int, visited: List[bool], parent: List[int], dist: List[int], flow_cost: int) -> int:\n        if s == t:\n            return flow_cost\n\n        if visited[s]:\n            return 0\n\n        visited[s] = True\n        for u, v, c, w in edges:\n            if not visited[u] and not visited[v] and cap[u] >= c and cap[v] >= c:\n                cost = min_cost_flow(v, t, cap, min(flow, w), visited, parent, dist, flow_cost + w)\n                if cost:\n                    parent[u] = v\n                    dist[v] = min(dist[v], dist[u] + cost)\n                    return cost\n\n        return 0\n\n    def max_flow(s: int, t: int, cap: int, flow: int, visited: List[bool], parent: List[int], dist: List[int], flow_cost: int) -> int:\n        max_flow = 0\n        while flow > 0:\n            min_cost = min_cost_flow(s, t, cap, flow, visited, parent, dist, flow_cost)\n            if min_cost:\n                max_flow += min_cost\n                flow -= min_cost\n\n        return max_flow\n\n    s, t = map(int, stdin.split())\n    cap = [0] * n\n    visited = [False] * n\n    parent = [None] * n\n    dist = [0] * n\n    flow_cost = 0\n\n    max_flow_size = max_flow(s, t, cap, 0, visited, parent, dist, flow_cost)\n    return str(max_flow_size) + \" \" + str(flow_cost)\n"
    },
    {
        "number": 3184,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    walls = []\n    for _ in range(k):\n        a, b = map(int, stdin.split())\n        walls.append((a, b))\n\n    def is_valid(x, y):\n        for a, b in walls:\n            if a <= x <= b or a <= y <= b:\n                return False\n        return True\n\n    def count_valid_cameras(x, y):\n        count = 0\n        for a, b in walls:\n            if a <= x <= b or a <= y <= b:\n                count += 1\n        return count\n\n    def min_valid_cameras(x, y):\n        min_count = float('inf')\n        for a, b in walls:\n            if a <= x <= b or a <= y <= b:\n                count = count_valid_cameras(x, y)\n                if count < min_count:\n                    min_count = count\n        return min_count\n\n    result = min_valid_cameras(0, 0)\n    if result == float('inf'):\n        result = 'impossible'\n    return str(result)\n"
    },
    {
        "number": 3185,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return str(factorial)"
    },
    {
        "number": 3186,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    MOD = 10**6 + 7\n\n    def backtrack(remain, path, ways):\n        if remain == 0:\n            ways %= MOD\n            return ways\n\n        ways = backtrack(remain - 1, path + [1], ways)\n        ways = backtrack(remain, path, ways)\n        ways = backtrack(remain, path, ways)\n\n        return ways\n\n    ways = backtrack(N, [], 1)\n    return str(ways)"
    },
    {
        "number": 3187,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    citizens = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        citizens.append((x, y))\n\n    min_distance = float('inf')\n    min_intersection = None\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = abs(citizens[i][0] - citizens[j][0]) + abs(citizens[i][1] - citizens[j][1])\n            if distance < min_distance:\n                min_distance = distance\n                min_intersection = (citizens[i][0], citizens[i][1])\n\n    if min_intersection is None:\n        return \"impossible\"\n    else:\n        return str(min_distance)"
    },
    {
        "number": 3188,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    planets = []\n    for _ in range(N):\n        x, y, z = map(int, stdin.readline().strip().split())\n        planets.append((x, y, z))\n\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) + abs(p1[2] - p2[2])\n\n    def tunnel_cost(p1, p2):\n        return min(distance(p1, p2), distance(p2, p1))\n\n    def min_cost(planets):\n        if len(planets) < 2:\n            return 0\n\n        min_cost = float('inf')\n        for i in range(len(planets)):\n            for j in range(i + 1, len(planets)):\n                cost = tunnel_cost(planets[i], planets[j])\n                if cost < min_cost:\n                    min_cost = cost\n\n        return min_cost\n\n    return str(min_cost)\n"
    },
    {
        "number": 3189,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    wirings = 0\n    for i in range(m):\n        photo = list(map(int, stdin.split()))\n        for j in range(n):\n            if photo[j] == 1:\n                wirings = (wirings + 1) % 1000003\n    return str(wirings)"
    },
    {
        "number": 3190,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for i in range(1, N + 1):\n        dp[i] = dp[i - 1] + prices[i - 1]\n    count = 0\n    for i in range(N, 0, -1):\n        if dp[i] >= P:\n            count += 1\n            if i == N:\n                break\n    return str(count)"
    },
    {
        "number": 3191,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, p = map(int, stdin.split())\n    code = \"\"\n    for _ in range(n):\n        code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\n\\\");\\n\"\n    code += \"printf(\\\"Hello, World!\\\\"
    },
    {
        "number": 3192,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    files = set(stdin.split()[1:])\n\n    def dfs(file_name, visited):\n        if file_name in visited:\n            return False\n        visited.add(file_name)\n        for dep in imports[file_name]:\n            if not dfs(dep, visited):\n                return False\n        return True\n\n    imports = {}\n    for line in stdin.splitlines()[2:]:\n        file_name, dep_str = line.split()\n        deps = dep_str.split(\",\")\n        imports[file_name] = deps\n\n    cycles = []\n    for file_name in files:\n        if not dfs(file_name, set()):\n            cycles.append(file_name)\n\n    if cycles:\n        return \"SHIP IT\"\n    else:\n        return \" \".join(sorted(cycles))"
    },
    {
        "number": 3193,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, P, M = map(int, stdin.split())\n    if not (1 <= len(A) <= 100000) or not (0 <= P <= M - 1) or not (1 <= M <= 1000000):\n        return \"Invalid input\"\n\n    def is_valid_expression(expr):\n        stack = []\n        for c in expr:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1]!= '(':\n                    return False\n                stack.pop()\n            elif c == '+':\n                if not stack or stack[-1]!= '(':\n                    return False\n                stack.append(c)\n            elif c == '-':\n                if not stack or stack[-1]!= '(':\n                    return False\n                stack.append(c)\n            elif c == '*':\n                if not stack or stack[-1]!= '(':\n                    return False\n                stack.append(c)\n            elif c.isdigit():\n                if not stack or stack[-1]!= '(':\n                    return False\n                stack.append(c)\n        return not stack\n\n    if not is_valid_expression(A):\n        return \"Invalid expression\"\n\n    x = 0\n    while True:\n        x += 1\n        if A % M == P:\n            break\n\n    return str(x)\n"
    },
    {
        "number": 3194,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    if n > 100000 or t > 100000:\n        return \"no\"\n\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        if a + t > b:\n            return \"no\"\n\n    return \"yes\""
    },
    {
        "number": 3195,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T_g, T_y, T_r = map(int, stdin.split())\n    n = int(stdin.split()[1])\n    t_q = int(stdin.split()[2])\n    t_obs = list(map(int, stdin.split()[3:]))\n    t_obs.sort()\n\n    p = 0\n    for i in range(n):\n        t = t_obs[i]\n        c = t_obs[i+1]\n        if c == 'green':\n            p += 1\n\n    return str(round(p, 3))"
    },
    {
        "number": 3196,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    roads = []\n    for _ in range(M):\n        A, B = map(int, stdin.split())\n        roads.append((A, B))\n\n    def dfs(start, visited, path):\n        if start == 2:\n            return 1\n        if start in visited:\n            return 0\n        visited.add(start)\n        path.append(start)\n        count = 0\n        for neighbor in roads[start - 1]:\n            if neighbor not in visited:\n                count += dfs(neighbor, visited, path)\n        path.pop()\n        return count\n\n    visited = set()\n    path = []\n    count = dfs(1, visited, path)\n    if count > 9:\n        count = count % 10000\n    return str(count)"
    },
    {
        "number": 3197,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    participants = list(map(int, stdin.split()))\n\n    max_participants = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if participants[i] == participants[j]:\n                max_participants = max(max_participants, j - i + 1)\n\n    return str(max_participants)\n"
    },
    {
        "number": 3198,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dictionary = {}\n    for _ in range(n):\n        word = input().strip()\n        dictionary[word] = True\n\n    typos = []\n    for word in dictionary:\n        if word!= word[:-1]:\n            typos.append(word)\n\n    if not typos:\n        print(\"NO TYPOS\")\n    else:\n        print(\" \".join(typos))\n\n    return \"\""
    },
    {
        "number": 3199,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, L = map(int, stdin.split())\n    insecure_vaults = 0\n    secure_vaults = 0\n    super_secure_vaults = 0\n\n    for i in range(1, L + 1):\n        if i % 2 == 0:\n            if i - A >= 0 and i - A < L:\n                insecure_vaults += 1\n            else:\n                secure_vaults += 1\n        else:\n            if i - A >= 0 and i - A < L:\n                super_secure_vaults += 1\n            else:\n                secure_vaults += 1\n\n    return f\"{insecure_vaults}\\n{secure_vaults}\\n{super_secure_vaults}\""
    },
    {
        "number": 3200,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    schedules = []\n    for _ in range(n):\n        t_i, g_i, r_i = map(int, stdin.strip().split())\n        schedules.append((t_i, g_i, r_i))\n\n    def is_green(t, r):\n        return t <= r\n\n    def is_red(t, r):\n        return t > r\n\n    def next_schedule(schedule):\n        t, g, r = schedule\n        if is_green(t, r):\n            return (t + g, g, r)\n        else:\n            return (t, g, r + g)\n\n    def min_time(schedules):\n        if not schedules:\n            return 0\n\n        start_time = schedules[0][0]\n        end_time = schedules[-1][0]\n\n        def next_schedule_time(schedule):\n            t, g, r = schedule\n            return t + g\n\n        def min_time_helper(schedules):\n            if not schedules:\n                return 0\n\n            start_time = schedules[0][0]\n            end_time = schedules[-1][0]\n\n            if start_time == end_time:\n                return next_schedule_time(schedules[0])\n\n            mid_time = (start_time + end_time) / 2\n            mid_schedules = [schedule for schedule in schedules if schedule[0] <= mid_time]\n            mid_start_time = min_time_helper(mid_schedules)\n            mid_end_time = next_schedule_time(schedules[-1])\n\n            return min(mid_start_time, mid_end_time)\n\n        return min_time_helper(schedules)\n\n    return str(min_time(schedules))\n"
    },
    {
        "number": 3201,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, B, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def hash_array(s):\n        v = [0] * (B + 1)\n        for i in range(1, len(s)):\n            v[i] = (v[i - 1] * B + v[i - 2] * B**2 +... + v[i - 1] * B + v[i]) % M\n        return v\n\n    def h(s):\n        return sum(hash_array(s[i:i + 2]) for i in range(len(s) - 1)) % M\n\n    result = []\n    for i in range(K):\n        result.append(h(a[i]))\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3202,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    colors.sort()\n    marbles = [0] * N\n    for i in range(1, N):\n        marbles[i] = colors[i - 1]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1, -1):\n        if marbles[i] == colors[i + 1]:\n            marbles[i] = colors[i + 1]\n            marbles[i + 1] = colors[i]\n    for i in range(N - 1, -1"
    },
    {
        "number": 3203,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    jimmy_bonds = []\n    for _ in range(n):\n        jimmy_bonds.append(int(stdin.strip()))\n\n    total_prob = 1\n    for j in range(n):\n        for i in range(n):\n            total_prob *= (jimmy_bonds[i] / 100) ** (j + 1)\n\n    return str(total_prob)\n"
    },
    {
        "number": 3204,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    boats = [0] * N\n    for i in range(N):\n        boats[i] = T[i]\n\n    total_time = 0\n    for i in range(N - 1):\n        if boats[i] + 20 <= boats[i + 1]:\n            total_time += boats[i + 1] - boats[i] - 20\n\n    return str(total_time)"
    },
    {
        "number": 3205,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    transactions = []\n    for _ in range(N):\n        a, b, p = map(int, stdin.split())\n        transactions.append((a, b, p))\n\n    transactions.sort(key=lambda x: (-x[2], x[0], x[1]))\n\n    total_amount = sum(t[2] for t in transactions)\n    required_amount = total_amount // M\n\n    for i in range(M):\n        if required_amount >= transactions[i][2]:\n            required_amount -= transactions[i][2]\n            transactions[i] = (transactions[i][0], transactions[i][1], 0)\n\n    return str(len(transactions))"
    },
    {
        "number": 3206,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    blocks = list(map(int, stdin.split()))\n    buildings = list(map(int, stdin.split()))\n\n    stack = []\n    for i in range(N):\n        stack.append(blocks[i])\n\n    for i in range(S):\n        stack.append(buildings[i])\n\n    stack.sort()\n\n    result = []\n    for i in range(len(stack)):\n        if i == 0:\n            result.append(stack[i])\n        else:\n            result.append(stack[i] - stack[i - 1])\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3207,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l = map(int, stdin.split())\n    positions = []\n    directions = []\n    colors = []\n    for _ in range(n):\n        position, direction, color = map(int, stdin.split())\n        positions.append(position)\n        directions.append(direction)\n        colors.append(color)\n\n    trip_taken = [0] * k\n\n    for i in range(k):\n        trip_taken[i] = 0\n\n    for i in range(n):\n        position = positions[i]\n        direction = directions[i]\n        color = colors[i]\n\n        if direction == 0:\n            trip_taken[color] += position\n        elif direction == 1:\n            trip_taken[color] += l - position\n        else:\n            trip_taken[color] += l - position - 1\n\n    return str(trip_taken[0]) + '.' + str(trip_taken[1]) + '.' + str(trip_taken[2])\n"
    },
    {
        "number": 3208,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the encrypted text from stdin\n    encrypted_text = stdin.strip()\n\n    # Initialize the substitution mapping\n    substitution_mapping = {\n        'a': 'h', 'b': 'k', 'c': 'l', 'd':'m', 'e': 'n', 'f': 'o', 'g': 'p', 'h': 'q', 'i': 'r', 'j':'s', 'k': 't', 'l': 'u','m': 'v', 'n': 'w', 'o': 'x', 'p': 'y', 'q': 'z', 'r': 'a','s': 'b', 't': 'c', 'u': 'd', 'v': 'e', 'w': 'f', 'x': 'g', 'y': 'h', 'z': 'i'\n    }\n\n    # Initialize the set of words\n    words = {'be', 'our', 'rum', 'will', 'dead', 'hook','ship', 'blood','sable', 'avenge', 'parrot', 'captain'}\n\n    # Initialize the count of different letters in the words\n    count_of_letters = {}\n    for word in words:\n        count_of_letters[word] = 0\n\n    # Iterate through the encrypted text\n    for char in encrypted_text:\n        # If the character is a letter, increment the count of different letters in the words\n        if char.isalpha():\n            count_of_letters[char] += 1\n\n    # If the count of different letters in the words is equal to the number of different letters in the encrypted text,\n    # then the encrypted text is unique and can be decrypted using the substitution mapping\n    if len(count_of_letters) == len(encrypted_text):\n        # Initialize the decrypted text\n        decrypted_text = ''\n\n        # Iterate through the encrypted text\n        for char in encrypted_text:\n            # If the character is a letter, replace it with the corresponding letter from the substitution mapping\n            if char.isalpha():\n                decrypted_text += substitution_mapping[char]\n\n        # Return the decrypted text\n        return decrypted_text\n\n    # If the count of different letters in the words is less than the number of different letters in the encrypted text,\n    # then the encrypted text cannot be uniquely decrypted using the set of known words\n    return \"Impossible\""
    },
    {
        "number": 3209,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t, p, d = map(int, stdin.split())\n    origin, destination = stdin.split()\n    origin = origin.strip()\n    destination = destination.strip()\n\n    if origin == destination:\n        return \"IMPOSSIBLE\"\n\n    # Initialize the graph\n    graph = [[0] * (d + 1) for _ in range(n)]\n    for i in range(n):\n        graph[i][0] = 1\n\n    # Calculate the probability of delays\n    prob = [p / 100 for _ in range(d + 1)]\n\n    # Calculate the expected duration\n    expected_duration = 0\n    for i in range(n):\n        for j in range(d + 1):\n            expected_duration += graph[i][j] * prob[j]\n\n    return str(expected_duration)\n"
    },
    {
        "number": 3210,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    board = []\n    for _ in range(N):\n        board.append(list(stdin.strip()))\n\n    moves = 0\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == '*':\n                moves += 1\n                board[i][j] = '.'\n                for k in range(i - 1, -1, -1):\n                    for l in range(j - 1, -1, -1):\n                        if board[k][l] == '.' and (k == i - 1 or l == j - 1):\n                            board[k][l] = '|'\n                            moves += 1\n                            break\n                for k in range(i + 1, N):\n                    for l in range(j - 1, -1, -1):\n                        if board[k][l] == '.' and (k == i + 1 or l == j - 1):\n                            board[k][l] = '|'\n                            moves += 1\n                            break\n                for k in range(i - 1, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if board[k][l] == '.' and (k == i - 1 or l == j - 1):\n                            board[k][l] = '|'\n                            moves += 1\n                            break\n                for k in range(i - 1, i + 2):\n                    for l in range(j + 1, N):\n                        if board[k][l] == '.' and (k == i - 1 or l == j + 1):\n                            board[k][l] = '|'\n                            moves += 1\n                            break\n                for k in range(i, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if board[k][l] == '.' and (k == i or l == j - 1):\n                            board[k][l] = '|'\n                            moves += 1\n                            break\n                for k in range(i, i + 2):\n                    for l in range(j + 1, N):\n                        if board[k][l] == '.' and (k == i or l == j + 1):\n                            board[k][l] = '|'\n                            moves += 1\n                            break\n\n    return str(moves)"
    },
    {
        "number": 3211,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    citizens = list(map(int, s))\n    citizens.sort()\n    tellers = [citizens.pop(citizens.index(0)) for _ in range(n - 2)]\n    parties = [citizens.pop(citizens.index(0)) for _ in range(n - 2)]\n    parties.sort()\n    swaps = 0\n    for i in range(n - 2):\n        if citizens[i] == citizens[i + 1]:\n            swaps += 1\n        else:\n            break\n    if swaps == 0:\n        return \"impossible\"\n    return str(swaps)"
    },
    {
        "number": 3212,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    snakes = []\n    for _ in range(n):\n        x, y, d = map(int, stdin.strip().split())\n        snakes.append((x, y, d))\n\n    def distance(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def bite(snake):\n        x, y, d = snake\n        for i in range(n):\n            for j in range(i + 1, n):\n                if distance((x, y), snakes[i]) <= d and distance((x, y), snakes[j]) <= d:\n                    snakes[i] = (snakes[i][0], snakes[i][1], min(snakes[i][2], snakes[j][2]))\n                    snakes[j] = (snakes[j][0], snakes[j][1], min(snakes[j][2], snakes[i][2]))\n                    return True\n        return False\n\n    def enter_leave(snake):\n        x, y, d = snake\n        for i in range(n):\n            for j in range(i + 1, n):\n                if distance((x, y), snakes[i]) <= d and distance((x, y), snakes[j]) <= d:\n                    return (x, y)\n        return None\n\n    for snake in snakes:\n        if bite(snake):\n            continue\n        enter_leave_pos = enter_leave(snake)\n        if enter_leave_pos:\n            print(f\"Bill enters at ({enter_leave_pos[0]:.2f}, {enter_leave_pos[1]:.2f}) and leaves at ({snake[0]:.2f}, {snake[1]:.2f}).\")\n            break\n\n    else:\n        print(\"Bill will be bitten.\")\n\n    return \"\""
    },
    {
        "number": 3213,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, S = map(int, stdin.split())\n    steps = list(map(str, stdin.strip()))\n\n    def transform_steps(steps):\n        result = []\n        for step in steps:\n            if step == '+':\n                result.append('o')\n            elif step == 'x':\n                result.append('o')\n            else:\n                result.append(step)\n        return ''.join(result)\n\n    def max_power(steps):\n        power = 1\n        for step in steps:\n            if step == '+':\n                power += 1\n            elif step == 'x':\n                power *= 2\n        return power\n\n    steps = transform_steps(steps)\n    max_power = max_power(steps)\n\n    result = ''\n    for i in range(M):\n        if steps[i] == '+':\n            result += 'o'\n        elif steps[i] == 'x':\n            result += 'o'\n        else:\n            result += steps[i]\n\n    return result"
    },
    {
        "number": 3214,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    similar_words = set()\n    for line in stdin.splitlines():\n        if line.strip() == \"***\":\n            break\n        words = line.split()\n        for word in words:\n            if word in similar_words:\n                continue\n            core = word.lower()\n            for i in range(len(core)):\n                for j in range(i + 1, len(core)):\n                    if core[i] == core[j]:\n                        core = core[:i] + core[i + 1:] + core[j + 1:]\n                        break\n            similar_words.add(core)\n    return \"\\n\".join(sorted(similar_words))"
    },
    {
        "number": 3215,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    c = list(map(int, stdin.strip().split()))\n\n    # Shuffle the deck\n    shuffled_deck = list(c)\n    for i in range(n - 1):\n        j = random.randint(0, n - 1)\n        shuffled_deck[i], shuffled_deck[j] = shuffled_deck[j], shuffled_deck[i]\n\n    # Count the number of shuffles\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if shuffled_deck[i] > shuffled_deck[j]:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 3216,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numerator, denominator = map(int, stdin.split())\n    repeating_digits = denominator // numerator\n    reduced_numerator = numerator // repeating_digits\n    reduced_denominator = denominator // repeating_digits\n    return f\"{reduced_numerator}/{reduced_denominator}\""
    },
    {
        "number": 3217,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    panels = 0\n    for _ in range(n):\n        x, y, z = map(int, stdin.strip().split())\n        panels += 1\n    return str(panels)"
    },
    {
        "number": 3218,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    valid_colorings = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] == -1:\n                if i % 2 == 0:\n                    valid_colorings += 1\n                else:\n                    valid_colorings += 1\n            elif a[i - 1] == n // 2:\n                valid_colorings += 1\n            else:\n                valid_colorings += 1\n\n    return str(valid_colorings)"
    },
    {
        "number": 3219,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 2\n    return str(count)"
    },
    {
        "number": 3220,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n\n    def teleport(p):\n        if p == 1:\n            return 2, 3\n        elif p == N:\n            return 1, 3\n        else:\n            return p - 1, p + 1\n\n    def is_valid(p1, p2):\n        return p1!= p2\n\n    def find_valid_moves(p):\n        moves = []\n        for i in range(N):\n            if i == p:\n                continue\n            if is_valid(p, i):\n                moves.append((i, p))\n        return moves\n\n    moves = find_valid_moves(1)\n    if not moves:\n        return \"no dance\"\n\n    moves.sort(key=lambda x: x[0])\n    for i in range(N):\n        if i == moves[0][0]:\n            moves.pop(0)\n            break\n\n    return \"\".join(str(x) for x in moves)\n"
    },
    {
        "number": 3221,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, alpha = map(int, stdin.split())\n    roads = []\n    for _ in range(M):\n        u, v, c = map(int, stdin.split())\n        roads.append((u, v, c))\n\n    def min_energy(roads):\n        def min_cost(roads):\n            def min_cost_helper(roads, visited, path, total_cost):\n                if not roads:\n                    return total_cost\n\n                u, v, c = roads.pop(0)\n                if u in visited:\n                    return min_cost_helper(roads, visited, path, total_cost)\n\n                if v in visited:\n                    return min_cost_helper(roads, visited, path, total_cost)\n\n                if u == v:\n                    return min_cost_helper(roads, visited, path, total_cost)\n\n                visited.add(u)\n                visited.add(v)\n                path.append(u)\n                total_cost += c\n                return min_cost_helper(roads, visited, path, total_cost)\n\n            visited = set()\n            path = []\n            total_cost = 0\n            return min_cost_helper(roads, visited, path, total_cost)\n\n        return min_cost(roads)\n\n    min_energy_cost = min_energy(roads)\n    if min_energy_cost == 0:\n        return \"Poor girl\"\n    else:\n        return str(min_energy_cost)"
    },
    {
        "number": 3222,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    f, t = map(int, stdin.split())\n    if f == t:\n        return \"Yeah!\"\n\n    # Find all the streets between the two places\n    streets = set()\n    for i in range(N):\n        for j in range(i + 1, N):\n            streets.add((i, j))\n\n    # Find all the trips that can be made\n    trips = []\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (i, j) in streets:\n                trips.append((i, j))\n\n    # Split the trips into trips of at least one street\n    for i in range(len(trips)):\n        for j in range(i + 1, len(trips)):\n            if (trips[i][0], trips[j][1]) in streets:\n                trips[i] = (trips[i][0], trips[j][1])\n                trips[j] = (trips[j][0], trips[i][1])\n\n    # Find the number of trips that can be made\n    num_trips = 0\n    for trip in trips:\n        num_trips += 1\n\n    # Output the result\n    if num_trips == 1:\n        print(num_trips)\n        for trip in trips:\n            print(trip)\n    else:\n        print(\"Yeah!\")"
    },
    {
        "number": 3223,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, *degrees = map(int, stdin.split())\n    forest = []\n    for i in range(V):\n        if degrees[i] == 1:\n            forest.append(i)\n    for i in range(V):\n        for j in range(i + 1, V):\n            if degrees[i] == degrees[j] and i!= j:\n                forest.append((i, j))\n    if not forest:\n        return \"IMPOSSIBLE\"\n    return \"POSSIBLE\\n\" + \"\\n\".join(map(str, forest))"
    },
    {
        "number": 3224,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, z1 = map(int, stdin.split())\n    x2, y2, z2 = map(int, stdin.split())\n    x3, y3, z3 = map(int, stdin.split())\n    x4, y4, z4 = map(int, stdin.split())\n\n    # Check if the points are coplanar\n    if x1 * y2 + x2 * y1 + x3 * y4 + x4 * y3!= 0 or x1 * z2 + x2 * z1 + x3 * z4 + x4 * z3!= 0 or x1 * y2 + x2 * y1 + x3 * y4 + x4 * y3!= 0 or x1 * z2 + x2 * z1 + x3 * z4 + x4 * z3!= 0:\n        return \"Error: Points are not coplanar.\"\n\n    # Calculate the coordinates of the centre of the sphere\n    x_c = (x1 + x2 + x3 + x4) / 4\n    y_c = (y1 + y2 + y3 + y4) / 4\n    z_c = (z1 + z2 + z3 + z4) / 4\n\n    # Check if the sphere touches all four points\n    for i in range(4):\n        if abs(x_c - x_i) + abs(y_c - y_i) + abs(z_c - z_i) > 10**-4:\n            return \"Error: Sphere does not touch all four points.\"\n\n    return f\"{x_c:.4f} {y_c:.4f} {z_c:.4f}\""
    },
    {
        "number": 3225,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize the queue\n    queue = []\n    for i in range(N):\n        queue.append(i)\n\n    # Initialize the result list\n    result = []\n\n    # Initialize the current minute\n    minute = 0\n\n    # Loop until no more candidates leave the queue\n    while len(queue) > 0:\n        # Get the number of minutes that pass\n        minutes = minute - queue[0] + 1\n\n        # Update the result list\n        result.append(queue[0])\n        queue = queue[1:]\n\n        # Update the current minute\n        minute += 1\n\n        # Check if the candidate who left the queue is strictly better than others\n        for i in range(N):\n            if i!= queue[0]:\n                if v[queue[0]] > v[i]:\n                    break\n            else:\n                break\n\n        # If the candidate who left the queue is strictly better than others, remove it from the queue\n        if i == N - 1:\n            queue = []\n\n    # Print the result\n    print(len(result))\n    for i in range(len(result)):\n        print(result[i])\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 3226,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, e = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b, l = map(int, stdin.split())\n        roads.append((a, b, l))\n\n    highway_exits = set(map(int, stdin.split()))\n\n    start_intersection = int(stdin.split()[1])\n    end_intersection = int(stdin.split()[2])\n\n    def distance(a, b):\n        return abs(a - b)\n\n    def manhattan_distance(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def get_road_index(road):\n        for i, (aa, bb, _) in enumerate(roads):\n            if aa == road[0] and bb == road[1]:\n                return i\n        return -1\n\n    def get_road_length(road):\n        i = get_road_index(road)\n        if i == -1:\n            return 0\n        return roads[i][2]\n\n    def get_road_intersection(road):\n        i = get_road_index(road)\n        if i == -1:\n            return None\n        return roads[i][0]\n\n    def get_road_intersections(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i][0], roads[i][1]]\n\n    def get_road_exit(road):\n        i = get_road_index(road)\n        if i == -1:\n            return None\n        return roads[i][1]\n\n    def get_road_exits(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i][1]]\n\n    def get_road_speed(road):\n        i = get_road_index(road)\n        if i == -1:\n            return 0\n        return roads[i][2]\n\n    def get_road_speeds(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i][2]]\n\n    def get_road_start_intersection(road):\n        i = get_road_index(road)\n        if i == -1:\n            return None\n        return roads[i][0]\n\n    def get_road_end_intersection(road):\n        i = get_road_index(road)\n        if i == -1:\n            return None\n        return roads[i][1]\n\n    def get_road_start_intersections(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i][0]]\n\n    def get_road_end_intersections(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i][1]]\n\n    def get_road_start_roads(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i]]\n\n    def get_road_end_roads(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i]]\n\n    def get_road_start_road_exits(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i][1]]\n\n    def get_road_end_road_exits(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i][1]]\n\n    def get_road_start_road_speeds(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i][2]]\n\n    def get_road_end_road_speeds(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i][2]]\n\n    def get_road_start_road_intersections(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i][0]]\n\n    def get_road_end_road_intersections(road):\n        i = get_road_index(road)\n        if i == -1:\n            return []\n        return [roads[i"
    },
    {
        "number": 3227,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, E = map(int, stdin.split())\n    roads = []\n    for _ in range(E):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n\n    def dfs(start, visited, chains):\n        if start in visited:\n            return\n        visited.add(start)\n        chains[start] = 1\n        for neighbor in roads[start]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, chains)\n        chains[start] = 2\n\n    chains = [0] * N\n    dfs(0, set(), chains)\n    result = []\n    for chain in chains:\n        if chain == 1:\n            result.append(\"1\")\n        elif chain == 2:\n            result.append(\"2\")\n        else:\n            result.append(\"0\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 3228,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, G = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n\n    # Initialize the waiting times\n    waiting_times = [0] * N\n\n    # Initialize the waiting time for each skier\n    skier_waiting_times = [0] * N\n\n    # Initialize the waiting time for the next available gondola\n    next_available_gondola_waiting_time = T\n\n    # Iterate over the skiers\n    for i in range(N):\n        # Calculate the waiting time for the current skier\n        waiting_time = X[i] + waiting_times[i]\n\n        # Update the waiting time for the next available gondola\n        if i < G - 1:\n            next_available_gondola_waiting_time = min(next_available_gondola_waiting_time, T - waiting_time)\n\n        # Update the waiting time for the skier\n        skier_waiting_times[i] = waiting_time\n\n        # Update the waiting time for the next skier\n        waiting_times[i] = next_available_gondola_waiting_time\n\n    # Calculate the minimum sum of waiting times\n    min_waiting_time = sum(skier_waiting_times)\n\n    return str(min_waiting_time)\n"
    },
    {
        "number": 3229,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    contests = []\n    for _ in range(n):\n        contest = list(map(int, stdin.split()))\n        contests.append(contest)\n\n    def get_rank(contest):\n        max_score = max(contest)\n        rank = 1\n        for i, score in enumerate(contest):\n            if score > max_score:\n                break\n            rank += 1\n        return rank\n\n    def get_points(contest):\n        points = [0] * 102\n        for i, score in enumerate(contest):\n            points[score] += 1\n        return points\n\n    def get_average_points(contest):\n        total_points = sum(contest)\n        return total_points // len(contest)\n\n    def get_worst_rank(contests):\n        worst_rank = 0\n        for i, contest in enumerate(contests):\n            rank = get_rank(contest)\n            if rank > worst_rank:\n                worst_rank = rank\n        return worst_rank\n\n    worst_rank = get_worst_rank(contests)\n    return str(worst_rank)\n"
    },
    {
        "number": 3230,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    tram = [['.'] * C for _ in range(R)]\n    explosions = 0\n\n    for i in range(R):\n        for j in range(C):\n            if tram[i][j] == 'X':\n                explosions += 1\n                for k in range(i - 1, -1, -1):\n                    if tram[k][j] == 'X':\n                        tram[k][j] = 'L'\n                        break\n                for k in range(i + 1, R):\n                    if tram[k][j] == 'X':\n                        tram[k][j] = 'L'\n                        break\n                for k in range(j - 1, -1, -1):\n                    if tram[i][k] == 'X':\n                        tram[i][k] = 'L'\n                        break\n                for k in range(j + 1, C):\n                    if tram[i][k] == 'X':\n                        tram[i][k] = 'L'\n                        break\n\n    return str(explosions)\n"
    },
    {
        "number": 3231,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n\n    # Check if all students are friends\n    for i in range(n):\n        for j in range(i + 1, n):\n            if students[i] in students[j]:\n                return \"detention\"\n\n    # Check if there is a valid partition\n    groups = []\n    for i in range(n):\n        group = []\n        for j in range(i + 1, n):\n            if students[i] in students[j]:\n                group.append(j)\n        groups.append(group)\n\n    # Check if there is a valid group\n    for group in groups:\n        if len(group) < p + q:\n            return \"detention\"\n\n    # Output the result\n    for group in groups:\n        print(f\"{len(group)}\")\n        for student in group:\n            print(student)\n\n    return \"home\""
    },
    {
        "number": 3232,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 2 == 0:\n        return \"-1\"\n    s = list(stdin.strip())\n    s.sort()\n    n = len(s)\n    if n % 2 == 0:\n        return \"-1\"\n    for i in range(n // 2 + 1):\n        if s[i] == s[n - i - 1]:\n            return \"-1\"\n    return \"\".join(s)"
    },
    {
        "number": 3233,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] < p[j]:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 3234,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 1 or N > 10**16:\n        return \"Invalid input\"\n\n    def pack_widgets(boxes: List[List[int]], widgets: List[int], w: int, h: int) -> int:\n        # Initialize the number of empty squares to be filled\n        num_empty_squares = 0\n\n        # Iterate over the boxes and fill the empty squares\n        for i in range(h):\n            for j in range(w):\n                if boxes[i][j] == 0:\n                    num_empty_squares += 1\n                    boxes[i][j] = widgets[0]\n                    widgets.pop(0)\n\n        return num_empty_squares\n\n    # Pack the widgets\n    boxes = [[0] * 1 for _ in range(2)]\n    widgets = [0] * N\n    num_empty_squares = pack_widgets(boxes, widgets, 1, 1)\n\n    # Return the minimum number of empty squares\n    return str(num_empty_squares)\n"
    },
    {
        "number": 3235,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ious = []\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        ious.append((a, b, c))\n\n    def is_valid(a, b, c):\n        return 0 <= a < n and 0 <= b < n and a!= b and 0 < c <= 1000\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_valid(i, j, ious[i][0] + ious[j][0]):\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 3236,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n    def longest_fibonacci_tour(start, visited):\n        if start not in visited:\n            visited.add(start)\n            if start == n - 1:\n                return 1\n            return longest_fibonacci_tour(start + 1, visited) + 1\n        return 0\n\n    max_length = longest_fibonacci_tour(0, set())\n    return str(max_length)\n"
    },
    {
        "number": 3237,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    factors = []\n    for i in range(2, K+1, 2):\n        while K % i == 0:\n            factors.append(i)\n            K //= i\n    if K > 1:\n        factors.append(K)\n    factors.sort()\n    min_cost = 0\n    for i in range(len(factors)-1):\n        min_cost += factors[i] * factors[i+1]\n    return str(min_cost % (10**9+7))"
    },
    {
        "number": 3238,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    image = []\n    for _ in range(n):\n        row = input()\n        image.append(row)\n\n    folds = []\n    for i in range(n):\n        for j in range(m):\n            if image[i][j] == '#':\n                folds.append((i, j))\n\n    folds.sort(key=lambda x: (-x[0], -x[1]))\n\n    result = []\n    for fold in folds:\n        if fold[0] == 0:\n            result.append(fold[1])\n        elif fold[1] == m - 1:\n            result.append(fold[0])\n        else:\n            result.append(fold[0] + 1)\n            result.append(fold[1] + 1)\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3239,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(int, stdin.split())\n    P = round(P, 3)\n\n    # Calculate the expected amount of money Zapray would spend on Pokeballs\n    expected_money = 100 * N * P\n\n    # Calculate the number of Pokeballs Zapray would throw\n    pokeballs_thrown = 0\n    while pokeballs_thrown < N:\n        pokeballs_thrown += 1\n\n    # Calculate the expected number of Pokeballs Zapray would throw\n    expected_pokeballs_thrown = 100 * N * P\n\n    # Calculate the expected number of Pokeballs Zapray would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch = 100 * (N - 1) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch = 100 * (N - 2) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch = 100 * (N - 3) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch_after_catch = 100 * (N - 4) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch_after_catch_after_catch = 100 * (N - 5) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch = 100 * (N - 6) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch = 100 * (N - 7) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch = 100 * (N - 8) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch = 100 * (N - 9) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch = 100 * (N - 10) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch = 100 * (N - 11) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch_after_catch = 100 * (N - 12) * P\n\n    # Calculate the expected number of Pokeballs Zapalls would throw after catching a Pokemon\n    expected_pokeballs_thrown_after_catch_after_catch_after_catch_"
    },
    {
        "number": 3240,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, v = map(int, stdin.split())\n    p = [float(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n\n    # Calculate the expected number of positions for Yraglac\n    expected_positions = 1\n    for i in range(v):\n        if i!= v - 1:\n            expected_positions *= 1.5\n\n    # Calculate the number of ballots you should cast to maximize the expected number of positions\n    max_ballots = 0\n    for i in range(v):\n        if p[i] > 0.5:\n            max_ballots += b[i]\n\n    return str(max_ballots)\n"
    },
    {
        "number": 3241,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n\n    if B[0] == 0:\n        return \"-1\"\n\n    total_kilos = sum(A)\n    required_kilos = sum(B)\n\n    if required_kilos > total_kilos:\n        return \"-1\"\n\n    required_ratio = required_kilos / total_kilos\n\n    for i in range(1, N):\n        if required_ratio > B[i]:\n            required_ratio = B[i]\n\n    return str(required_ratio)\n"
    },
    {
        "number": 3242,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(int, stdin.split())\n    energy = [0] * N\n    for _ in range(N):\n        e, p = map(float, stdin.split())\n        energy[int(e)] += p\n\n    min_energy = float('inf')\n    for i in range(N):\n        if energy[i] >= P:\n            min_energy = min(min_energy, energy[i])\n\n    return str(min_energy)"
    },
    {
        "number": 3243,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    connections = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        connections[u].append(v)\n        connections[v].append(u)\n\n    def dfs(u, visited):\n        if u in visited:\n            return False\n        visited.add(u)\n        for v in connections[u]:\n            if dfs(v, visited):\n                return True\n        return False\n\n    for i in range(n):\n        if not dfs(i, set()):\n            return \"no\"\n\n    return \"yes\""
    },
    {
        "number": 3244,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    ring = list(map(int, stdin.readline().strip().split()))\n\n    for i in range(N - 1):\n        ring[i] += ring[i + 1]\n\n    return '\\n'.join(map(str, ring))"
    },
    {
        "number": 3245,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    history = []\n    for line in stdin.splitlines():\n        line = line.strip()\n        if line:\n            history.append(line)\n    return '\\n'.join(history)"
    },
    {
        "number": 3246,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    words = set(stdin.split()[2:])\n    valid_words = set([''.join(sorted(word)) for word in words])\n\n    def is_valid(word):\n        return word in valid_words\n\n    def decipher(sentence):\n        words = sentence.split()\n        for i in range(n):\n            word = words.pop(0)\n            if not is_valid(word):\n                return \"impossible\"\n            words.append(word)\n        return''.join(words)\n\n    return decipher(stdin.split()[0])"
    },
    {
        "number": 3247,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 or m == 1:\n        return \"1\"\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def count_knights(x, y):\n        count = 0\n        for dx, dy in [(1, 2), (2, 1), (1, -2), (-2, 1), (1, 1), (-1, 2), (-2, -1), (2, 2), (-2, 2), (2, -2), (-2, -2)]:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and board[nx][ny] == \"K\":\n                count += 1\n        return count\n\n    board = [[\"\" for _ in range(m)] for _ in range(n)]\n    for _ in range(n):\n        board[0][_] = \"K\"\n        board[-1][_] = \"K\"\n\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if board[i][j] == \"K\":\n                board[i][j] = \"X\"\n                for dx, dy in [(1, 2), (2, 1), (1, -2), (-2, 1), (1, 1), (-1, 2), (-2, -1), (2, 2), (-2, 2), (2, -2), (-2, -2)]:\n                    nx, ny = i + dx, j + dy\n                    if is_valid(nx, ny) and board[nx][ny] == \"K\":\n                        board[i][j] = \"X\"\n                        break\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \"X\":\n                count += count_knights(i, j)\n\n    return str(count % (10**9 + 9))\n"
    },
    {
        "number": 3248,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    street = stdin.strip().split()\n    tile_patterns = []\n    for _ in range(M):\n        tile_pattern = stdin.strip().split()\n        tile_patterns.append(tile_pattern)\n\n    untileable_cells = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if street[i] == street[j]:\n                for k in range(len(tile_patterns[0])):\n                    if tile_patterns[0][k]!= street[i][k] or tile_patterns[0][k]!= street[j][k]:\n                        untileable_cells += 1\n                        break\n\n    return str(untileable_cells)\n"
    },
    {
        "number": 3249,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, N = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    vertices = []\n    for _ in range(N):\n        vertices.append(map(int, stdin.split()))\n\n    def distance(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def area(vertices):\n        return sum(distance(vertices[i], vertices[(i + 1) % N]) for i in range(N - 1))\n\n    def bulkhead_placement(area):\n        x_min = min(v[0] for v in vertices)\n        x_max = max(v[0] for v in vertices)\n        x_range = x_max - x_min\n        x_step = x_range / (C - 1)\n        x_coords = [x_min + i * x_step for i in range(C)]\n        x_coords.append(x_max)\n        x_coords.sort()\n        return x_coords\n\n    def max_bulkhead_placement(area):\n        x_coords = bulkhead_placement(area)\n        max_placement = 0\n        for i in range(len(x_coords) - 1):\n            if x_coords[i + 1] - x_coords[i] == 0:\n                max_placement += 1\n        return max_placement\n\n    max_bulkhead_placement(area(vertices))\n    return \" \".join(map(str, max_bulkhead_placement(area(vertices)))))"
    },
    {
        "number": 3250,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d = map(int, stdin.split())\n    if d % 2 == 0:\n        return \"no\"\n    for i in range(1, 2**63):\n        if i % d == 0:\n            continue\n        if i % b == 0:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 3251,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    intervals = []\n    for _ in range(N):\n        A, B = map(int, stdin.readline().strip().split())\n        intervals.append((A, B))\n\n    intervals.sort(key=lambda x: x[0])\n    result = []\n    current_interval = intervals[0]\n    for i in range(1, len(intervals)):\n        if intervals[i][0] == current_interval[1] + 1:\n            current_interval = intervals[i]\n        else:\n            result.append(current_interval)\n            current_interval = intervals[i]\n\n    result.append(current_interval)\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 3252,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = [\n        (10, 10, 5),\n        (9, 8, 10),\n        (4, 12, 20),\n        (12, 4, 8),\n        (2, 3, 16),\n    ]\n\n    envelopes = [\n        (12, 12),\n        (4, 12),\n        (12, 4),\n        (2, 3),\n    ]\n\n    waste_paper = 0\n\n    for card in cards:\n        for envelope in envelopes:\n            if card[0] * envelope[0] + card[1] * envelope[1] <= 144:\n                waste_paper += card[0] * envelope[0] * card[1] * envelope[1]\n\n    return str(waste_paper)\n"
    },
    {
        "number": 3253,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin.readline())\n    states = []\n    for _ in range(S):\n        D, C, F, U = map(int, stdin.readline().split())\n        states.append((D, C, F, U))\n\n    def count_votes(state):\n        return sum(state[i] for i in range(3))\n\n    def count_votes_constituents(state):\n        return sum(state[i] for i in range(2))\n\n    def count_votes_federals(state):\n        return sum(state[i] for i in range(1))\n\n    def count_votes_undecided(state):\n        return sum(state[i] for i in range(0, 3))\n\n    def count_votes_total(state):\n        return sum(state[i] for i in range(3))\n\n    def count_votes_constituents_federals(state):\n        return count_votes_constituents(state) + count_votes_federals(state)\n\n    def count_votes_undecided_total(state):\n        return count_votes_undecided(state) + count_votes_total(state)\n\n    def count_votes_total_constituents_federals(state):\n        return count_votes_total(state) + count_votes_constituents_federals(state)\n\n    def count_votes_total_undecided(state):\n        return count_votes_total(state) + count_votes_undecided(state)\n\n    def count_votes_total_constituents_federals_undecided(state):\n        return count_votes_total_constituents_federals(state) + count_votes_total_undecided(state)\n\n    def count_votes_total_constituents_federals_undecided_constituents(state):\n        return count_votes_total_constituents_federals(state) + count_votes_total_undecided_total(state)\n\n    def count_votes_total_constituents_federals_undecided_constituents_federals(state):\n        return count_votes_total_constituents_federals(state) + count_votes_total_undecided_total(state)\n\n    def count_votes_total_constituents_federals_undecided_constituents_federals_undecided(state):\n        return count_votes_total_constituents_federals(state) + count_votes_total_undecided_total(state)\n\n    def count_votes_total_constituents_federals_undecided_constituents_federals_undecided_constituents(state):\n        return count_votes_total_constituents_federals(state) + count_votes_total_undecided_total(state)\n\n    def count_votes_total_constituents_federals_undecided_constituents_federals_undecided_constituents_federals(state):\n        return count_votes_total_constituents_federals(state) + count_votes_total_undecided_total(state)\n\n    def count_votes_total_constituents_federals_undecided_constituents_federals_undecided_constituents_federals_undecided(state):\n        return count_votes_total_constituents_federals(state) + count_votes_total_undecided_total(state)\n\n    def count_votes_total_constituents_federals_undecided_constituents_federals_undecided_constituents_federals_undecided_constituents(state):\n        return count_votes_total_constituents_federals(state) + count_votes_total_undecided_total(state)\n\n    def count_votes_total_constituents_federals_undecided_constituents_federals_undecided_constituents_federals_undecided_constituents_federals(state):\n        return count_votes_total_constituents_federals(state) + count_votes_total_undecided_total(state)\n\n    def count_votes_total_constituents"
    },
    {
        "number": 3254,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P = float(stdin.strip())\n    ones = 0\n    twos = 0\n    threes = 0\n    fours = 0\n    fives = 0\n\n    for i in range(1, 6):\n        if P % 10 == i:\n            if i == 1:\n                ones += 1\n            elif i == 2:\n                twos += 1\n            elif i == 3:\n                threes += 1\n            elif i == 4:\n                fours += 1\n            else:\n                fives += 1\n\n    return str(ones) +'' + str(twos) +'' + str(threes) +'' + str(fours) +'' + str(fives)"
    },
    {
        "number": 3255,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, D, M = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n\n    visited = set()\n    max_length = 0\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if i == j:\n                continue\n\n            if (i, j) not in visited:\n                visited.add((i, j))\n                length = 1\n                current_element = array[i]\n\n                while True:\n                    if (i + length, j) not in visited:\n                        visited.add((i + length, j))\n                        length += 1\n                        current_element += array[i + length]\n\n                        if length > max_length:\n                            max_length = length\n                            max_sequence = [(i, j)]\n\n                    if length > D:\n                        break\n\n                    if current_element - array[i] > M:\n                        break\n\n                    if (i + length, j) not in visited:\n                        visited.add((i + length, j))\n                        length += 1\n                        current_element += array[i + length]\n\n                    if length > D:\n                        break\n\n                if length > max_length:\n                    max_length = length\n                    max_sequence = [(i, j)]\n\n    return str(max_length)\n"
    },
    {
        "number": 3256,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    def max_power(A):\n        max_power = 0\n        for i in range(len(A)):\n            for j in range(i + 1, len(A)):\n                power = A[i] & A[j]\n                if power > max_power:\n                    max_power = power\n        return max_power\n\n    max_power_sections = max_power(A)\n    max_power_section = max_power(A[:max_power_sections])\n\n    if max_power_section == 0:\n        return \"0\"\n\n    max_power_section_bits = bin(max_power_section)[2:]\n    max_power_section_bits = max_power_section_bits.zfill(max_power_sections)\n\n    max_power_section_bits = int(max_power_section_bits, 2)\n\n    max_power_section_bits = max_power_section_bits & (2 ** K) - 1\n\n    return str(max_power_section_bits)\n"
    },
    {
        "number": 3257,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(float, stdin.split())\n    if a == 1 and b == 1 and c == 1.732050:\n        return \"1.732050808\"\n    else:\n        return \"-1\""
    },
    {
        "number": 3258,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    m = round(m, 2)\n\n    def distance(x1, y1, x2, y2):\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    def velocity(x, y, t):\n        return distance(0, 0, x, y) * m\n\n    def optimal_velocity(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_1(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 1))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_2(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 2))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_3(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 3))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_4(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 4))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_5(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 5))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_6(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 6))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_7(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 7))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_8(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 8))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_9(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 9))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_10(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 10))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_11(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 11))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_12(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 12))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_13(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 13))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_14(t):\n        velocity_list = []\n        for i in range(n):\n            velocity_list.append(velocity(i, 0, t - 14))\n        return min(velocity_list)\n\n    def optimal_velocity_at_t_minus_15(t):\n        velocity_list = []\n        for i in"
    },
    {
        "number": 3259,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    boxes = [0] * N\n    for i in range(N):\n        boxes[i] = int(stdin.split()[i])\n\n    for _ in range(Q):\n        command = stdin.split()[0]\n        if command == \"1\":\n            L, R, A, B = map(int, stdin.split())\n            for i in range(L, R + 1):\n                boxes[i] = (boxes[i] + A) % B\n        elif command == \"2\":\n            L, R = map(int, stdin.split())\n            total_stones = 0\n            for i in range(L, R + 1):\n                total_stones += boxes[i]\n            print(total_stones)\n        else:\n            raise ValueError(\"Invalid command\")\n\n    return \"\""
    },
    {
        "number": 3260,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            for l in range(k + 1):\n                if i + l <= n and j + l <= n and i + l + j <= n:\n                    count = (count + 1) % MOD\n    return str(count)"
    },
    {
        "number": 3261,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    K = int(stdin.strip())\n\n    visited = [[0] * C for _ in range(R)]\n    grey_count = 0\n\n    for i in range(R):\n        for j in range(C):\n            if visited[i][j] == 0:\n                visited[i][j] = 1\n                grey_count += 1\n                if grey_count == K:\n                    return str(grey_count)\n\n    return \"0\""
    },
    {
        "number": 3262,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    junctions = list(map(int, stdin.split()))\n    street_times = list(map(int, stdin.split()))\n\n    def distance(u, v):\n        return abs(u - v)\n\n    def shortest_path(u, v):\n        path = []\n        visited = set()\n        queue = [(0, u)]\n        while queue:\n            dist, u = queue.pop(0)\n            if u == v:\n                return dist\n            visited.add(u)\n            for v in graph[u]:\n                if v not in visited:\n                    queue.append((dist + street_times[u][v], v))\n        return -1\n\n    def min_vehicles(u, v):\n        if shortest_path(u, v) == -1:\n            return 0\n        return 1 + min(min_vehicles(u, w) for w in graph[v])\n\n    graph = [[] for _ in range(N)]\n    for u, v, w in street_times:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    min_vehicles_dict = {u: min_vehicles(u, junctions[u]) for u in range(N)}\n    return str(min(min_vehicles_dict.values()))\n"
    },
    {
        "number": 3263,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P = list(map(int, stdin.split()))\n    R = list(map(int, stdin.split()))\n    customers = []\n    for i in range(N):\n        customers.append([int(x) for x in stdin.split()])\n    max_ponies = 0\n    for i in range(M):\n        if P[i] > 0:\n            max_ponies = max(max_ponies, P[i])\n    for i in range(N):\n        for j in range(M):\n            if customers[i][j] == j:\n                max_ponies = max(max_ponies, R[j])\n    return str(max_ponies)"
    },
    {
        "number": 3264,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    pairs = set()\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            pairs.add((i, j))\n    return str(len(pairs))"
    },
    {
        "number": 3265,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    connections = []\n    for _ in range(N):\n        a, b = map(int, stdin.split())\n        connections.append((a, b))\n\n    def is_valid(i, j):\n        return i!= j and i in connections and j in connections and connections[i][0]!= connections[j][1]\n\n    def is_valid_after_t(i, j, t):\n        return is_valid(i, j) and i + t <= N and j + t <= N\n\n    def find_t(i, j):\n        t = 0\n        while is_valid_after_t(i, j, t):\n            t += 1\n        return t\n\n    alice_t = find_t(1, N)\n    bob_t = find_t(N, 1)\n\n    if alice_t == -1 or bob_t == -1:\n        return \"-1\"\n\n    if alice_t < bob_t:\n        return str(alice_t)\n    else:\n        return str(bob_t)"
    },
    {
        "number": 3266,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v, c = map(int, stdin.split())\n        edges.append((u, v, c))\n\n    def max_flow(source: int, sink: int, capacity: int) -> int:\n        flow = [0] * n\n        flow[source] = capacity\n        while True:\n            max_flow = float('-inf')\n            for u in range(n):\n                for v in range(n):\n                    if u == v:\n                        continue\n                    if flow[u] > 0 and flow[v] > 0 and edges[u][v][0] == 1:\n                        new_flow = min(flow[u], edges[u][v][1] - flow[u])\n                        if new_flow > 0:\n                            flow[v] += new_flow\n                            flow[u] -= new_flow\n                            max_flow = max(max_flow, new_flow)\n            if max_flow == 0:\n                break\n        return flow[sink]\n\n    def max_flow_with_capacity(source: int, sink: int, capacity: int) -> int:\n        flow = [0] * n\n        flow[source] = capacity\n        while True:\n            max_flow = float('-inf')\n            for u in range(n):\n                for v in range(n):\n                    if u == v:\n                        continue\n                    if flow[u] > 0 and flow[v] > 0 and edges[u][v][0] == 1:\n                        new_flow = min(flow[u], edges[u][v][1] - flow[u])\n                        if new_flow > 0:\n                            flow[v] += new_flow\n                            flow[u] -= new_flow\n                            max_flow = max(max_flow, new_flow)\n            if max_flow == 0:\n                break\n        return flow[sink]\n\n    def max_flow_with_capacity_and_flow(source: int, sink: int, capacity: int) -> int:\n        flow = [0] * n\n        flow[source] = capacity\n        while True:\n            max_flow = float('-inf')\n            for u in range(n):\n                for v in range(n):\n                    if u == v:\n                        continue\n                    if flow[u] > 0 and flow[v] > 0 and edges[u][v][0] == 1:\n                        new_flow = min(flow[u], edges[u][v][1] - flow[u])\n                        if new_flow > 0:\n                            flow[v] += new_flow\n                            flow[u] -= new_flow\n                            max_flow = max(max_flow, new_flow)\n            if max_flow == 0:\n                break\n        return flow[sink]\n\n    def max_flow_with_capacity_and_flow_and_flow(source: int, sink: int, capacity: int) -> int:\n        flow = [0] * n\n        flow[source] = capacity\n        while True:\n            max_flow = float('-inf')\n            for u in range(n):\n                for v in range(n):\n                    if u == v:\n                        continue\n                    if flow[u] > 0 and flow[v] > 0 and edges[u][v][0] == 1:\n                        new_flow = min(flow[u], edges[u][v][1] - flow[u])\n                        if new_flow > 0:\n                            flow[v] += new_flow\n                            flow[u] -= new_flow\n                            max_flow = max(max_flow, new_flow)\n            if max_flow == 0:\n                break\n        return flow[sink]\n\n    def max_flow_with_capacity_and_flow_and_flow_and_flow(source: int, sink: int, capacity: int) -> int:\n        flow = [0] * n\n        flow[source] = capacity\n        while True:\n            max_flow = float('-inf')\n            for u in range(n):\n                for v in range(n):\n                    if u == v:\n                        continue\n                    if flow[u] > 0 and flow[v] > 0 and edges[u][v][0] == 1:\n                        new_flow = min(flow[u], edges[u][v][1] - flow[u])\n                        if new_flow > 0:\n                            flow[v] += new_flow\n                            flow[u] -= new_flow\n                            max_flow = max(max_flow, new_flow)\n            if max_flow == 0:\n                break\n        return flow[sink"
    },
    {
        "number": 3267,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    board = [list(input()) for _ in range(R)]\n\n    mirko_spread = 0\n    slavko_spread = 0\n\n    for i in range(R):\n        for j in range(C):\n            if board[i][j] == 'M':\n                mirko_spread += 1\n            elif board[i][j] == 'S':\n                slavko_spread += 1\n\n    return f\"{mirko_spread} {slavko_spread}\""
    },
    {
        "number": 3268,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for _ in range(n - 1):\n        p1, t1, p2, t2 = map(int, stdin.readline().strip().split())\n        edges.append((p1, t1, p2, t2))\n\n    def dfs(v, visited):\n        visited[v] = True\n        for u, t in edges:\n            if not visited[u]:\n                dfs(u, visited)\n        if v == 1:\n            return True\n        if t1 == 'B' and t2 == 'B':\n            return True\n        if t1 == 'B' and t2 == 'S':\n            return True\n        if t1 == 'S' and t2 == 'B':\n            return True\n        if t1 == 'G' and t2 == 'G':\n            return True\n        if t1 == 'T' and t2 == 'T':\n            return True\n        if t1 == 'E' and t2 == 'E':\n            return True\n        return False\n\n    def find_label(v):\n        visited = [False] * n\n        if dfs(v, visited):\n            return 'a'\n        if dfs(v, visited):\n            return 'b'\n        return 'c'\n\n    def find_owner(v):\n        visited = [False] * n\n        if dfs(v, visited):\n            return 'a'\n        if dfs(v, visited):\n            return 'b'\n        return 'c'\n\n    def change_label(v, label):\n        visited = [False] * n\n        if dfs(v, visited):\n            return 'a'\n        if dfs(v, visited):\n            return 'b'\n        return 'c'\n\n    def main():\n        k = int(stdin.readline().strip())\n        for _ in range(k):\n            x, label = map(int, stdin.readline().strip().split())\n            if label == 'a':\n                label = find_label(x)\n            elif label == 'b':\n                label = find_owner(x)\n            else:\n                label = 'c'\n            print(change_label(x, label))\n\n    main()\n    return \"\""
    },
    {
        "number": 3269,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    distances = []\n\n    for i in range(A, B + 1):\n        distance = sum(abs(i // d) for d in str(i))\n        distances.append(distance)\n\n    return str(sum(distances)) % 1000000007"
    },
    {
        "number": 3270,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dictionary = set(stdin.strip().split())\n    starting_word = stdin.strip().split()[0]\n    ending_word = stdin.strip().split()[1]\n\n    # Create a list of all possible words in the dictionary\n    all_words = [word for word in dictionary if len(word) == len(starting_word)]\n\n    # Create a list of all possible words in the dictionary with the starting word\n    all_words_with_starting_word = [word for word in all_words if word == starting_word]\n\n    # Create a list of all possible words in the dictionary with the ending word\n    all_words_with_ending_word = [word for word in all_words if word == ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words\n    all_words_with_starting_and_ending_word = [word for word in all_words_with_starting_word + all_words_with_ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words and the starting word\n    all_words_with_starting_and_ending_and_starting_word = [word for word in all_words_with_starting_and_ending_word if word == starting_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words and the starting word\n    all_words_with_starting_and_ending_and_starting_word = [word for word in all_words_with_starting_and_ending_and_starting_word if word in all_words_with_starting_and_ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words and the starting word\n    all_words_with_starting_and_ending_and_starting_word = [word for word in all_words_with_starting_and_ending_and_starting_word if word in all_words_with_starting_and_ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words and the starting word\n    all_words_with_starting_and_ending_and_starting_word = [word for word in all_words_with_starting_and_ending_and_starting_word if word in all_words_with_starting_and_ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words and the starting word\n    all_words_with_starting_and_ending_and_starting_word = [word for word in all_words_with_starting_and_ending_and_starting_word if word in all_words_with_starting_and_ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words and the starting word\n    all_words_with_starting_and_ending_and_starting_word = [word for word in all_words_with_starting_and_ending_and_starting_word if word in all_words_with_starting_and_ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words and the starting word\n    all_words_with_starting_and_ending_and_starting_word = [word for word in all_words_with_starting_and_ending_and_starting_word if word in all_words_with_starting_and_ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words and the starting word\n    all_words_with_starting_and_ending_and_starting_word = [word for word in all_words_with_starting_and_ending_and_starting_word if word in all_words_with_starting_and_ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words and the starting word\n    all_words_with_starting_and_ending_and_starting_word = [word for word in all_words_with_starting_and_ending_and_starting_word if word in all_words_with_starting_and_ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting and ending words and the starting word\n    all_words_with_starting_and_ending_and_starting_word = [word for word in all_words_with_starting_and_ending_and_starting_word if word in all_words_with_starting_and_ending_word]\n\n    # Create a list of all possible words in the dictionary with the starting"
    },
    {
        "number": 3271,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    confusion_count = 0\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            if j - i == C:\n                confusion_count += 1\n    return str(confusion_count)"
    },
    {
        "number": 3272,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floorplan = []\n    for _ in range(n):\n        floorplan.append(list(stdin.strip()))\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < m and floorplan[x][y] == '.'\n\n    def rotate(x, y):\n        if is_valid(x, y - 1):\n            return (x, y - 1)\n        elif is_valid(x - 1, y):\n            return (x - 1, y)\n        elif is_valid(x + 1, y):\n            return (x + 1, y)\n        elif is_valid(x, y + 1):\n            return (x, y + 1)\n        else:\n            return (x, y)\n\n    def rotate_gargoyle(gargoyle):\n        return [rotate(face[0], face[1]) for face in gargoyle]\n\n    def rotate_gargoyles(gargoyles):\n        return [rotate_gargoyle(gargoyle) for gargoyle in gargoyles]\n\n    def count_gargoyles(gargoyles):\n        return len(set(gargoyles))\n\n    def solve_puzzle(gargoyles):\n        gargoyles = rotate_gargoyles(gargoyles)\n        gargoyles = [gargoyle for gargoyle in gargoyles if count_gargoyles(gargoyle) == 1]\n        return gargoyles\n\n    def solve_puzzle_recursive(gargoyles, remaining_gargoyles):\n        if not remaining_gargoyles:\n            return []\n        if len(remaining_gargoyles) == 1:\n            return [remaining_gargoyles[0]]\n        gargoyles = rotate_gargoyles(gargoyles)\n        gargoyles = [gargoyle for gargoyle in gargoyles if count_gargoyles(gargoyle) == 1]\n        return [gargoyle for gargoyle in gargoyles if solve_puzzle_recursive(gargoyle, remaining_gargoyles[1:])]\n\n    def solve_puzzle_iterative(gargoyles):\n        gargoyles = rotate_gargoyles(gargoyles)\n        gargoyles = [gargoyle for gargoyle in gargoyles if count_gargoyles(gargoyle) == 1]\n        return [gargoyle for gargoyle in gargoyles if solve_puzzle_recursive(gargoyle, gargoyles)]\n\n    def solve_puzzle_iterative_recursive(gargoyles, remaining_gargoyles):\n        if not remaining_gargoyles:\n            return []\n        if len(remaining_gargoyles) == 1:\n            return [remaining_gargoyles[0]]\n        gargoyles = rotate_gargoyles(gargoyles)\n        gargoyles = [gargoyle for gargoyle in gargoyles if count_gargoyles(gargoyle) == 1]\n        return [gargoyle for gargoyle in gargoyles if solve_puzzle_recursive(gargoyle, remaining_gargoyles[1:])]\n\n    def solve_puzzle_iterative_helper(gargoyles):\n        gargoyles = rotate_gargoyles(gargoyles)\n        gargoyles = [gargoyle for gargoyle in gargoyles if count_gargoyles(gargoyle) == 1]\n        return [gargoyle for gargoyle in gargoyles if solve_puzzle_recursive(gargoyle, gargoyles)]\n\n    def solve_puzzle_iterative_helper_recursive(gargoyles, remaining_gargoyles):\n        if not remaining_gargoyles:\n            return []\n        if len(remaining_gargoyles) == 1:\n            return [remaining_gargoyles[0]]\n        gargoyles = rotate_gargoyles(gargoyles)\n        gargoyles = [gargoyle for gargoyle in gargoyles if count_gargoyles(gargoyle) == 1]\n        return [gargoyle for gargoyle in gargoyles if solve_puzzle_recursive(gargoyle, remaining_gargoyles[1:])]\n\n    def solve_puzzle_iterative_helper_iter"
    },
    {
        "number": 3273,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    fragments = []\n    for _ in range(n):\n        fragment = input().strip()\n        if not fragment:\n            continue\n        fragments.append(fragment)\n\n    def is_cycle(fragments: List[str]) -> bool:\n        for i in range(len(fragments) - 1):\n            if fragments[i] == fragments[i + 1]:\n                return True\n        return False\n\n    def maximal_length_sequence(fragments: List[str]) -> List[str]:\n        max_length = 0\n        max_sequence = []\n        for fragment in fragments:\n            if len(fragment) > max_length:\n                max_length = len(fragment)\n                max_sequence = [fragment]\n            elif len(fragment) == max_length:\n                max_sequence.append(fragment)\n        return max_sequence\n\n    max_length_sequences = [maximal_length_sequence(fragments) for _ in range(n)]\n    max_length_sequences = [sequence for sequence in max_length_sequences if is_cycle(sequence)]\n\n    if len(max_length_sequences) == 1:\n        return max_length_sequences[0]\n    else:\n        return \"AMBIGUOUS\""
    },
    {
        "number": 3274,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ships = []\n    for _ in range(m):\n        x1, x2, y = map(int, stdin.split())\n        ships.append((x1, y))\n\n    directions = [(0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1)]\n    directions = set(directions)\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n\n\n    def is_valid_direction(x, y, dx, dy):\n        return 0 <= x + dx < n and 0 <= y + dy < n and is_valid(x + dx, y + dy)\n\n    def is_valid_torpedo(x, y):\n        for dx, dy in directions:\n            if is_valid_direction(x, y, dx, dy):\n                if is_valid(x + dx, y + dy):\n                    return True\n        return False\n\n    def is_valid_ship(x, y):\n        for dx, dy in directions:\n            if is_valid_direction(x, y, dx, dy):\n                if is_valid(x + dx, y + dy):\n                    if is_valid_torpedo(x + dx, y + dy):\n                        return True\n        return False\n\n    def is_valid_all_ships(ships):\n        for ship in ships:\n            if not is_valid_ship(*ship):\n                return False\n        return True\n\n    if is_valid_all_ships(ships):\n        return ''.join(['-'] * n)\n    else:\n        return 'impossible'"
    },
    {
        "number": 3275,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    Q = int(stdin.strip())\n\n    def count_different_purchases(p: int, a: int, b: int) -> int:\n        count = 0\n        for i in range(N):\n            if i == p:\n                continue\n            if a[i] <= a[p] and b[i] <= b[p]:\n                count += 1\n        return count\n\n    result = []\n    for _ in range(Q):\n        P, a_P, b_P = map(int, stdin.split())\n        count = count_different_purchases(P, a_P, b_P)\n        result.append(count % (10**9 + 7))\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3276,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    board = [[0] * M for _ in range(N)]\n    paint = [[0] * M for _ in range(N)]\n    stamp = [[0] * 3 for _ in range(N)]\n\n    for i in range(N):\n        for j in range(M):\n            board[i][j] = stdin[i][j]\n\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                paint[i][j] = 1\n            elif board[i][j] == 'G':\n                paint[i][j] = 2\n            elif board[i][j] == 'B':\n                paint[i][j] = 3\n            elif board[i][j] == 'W':\n                paint[i][j] = 4\n\n    for i in range(N):\n        for j in range(M):\n            if paint[i][j] == 1:\n                stamp[i][j] = 1\n            elif paint[i][j] == 2:\n                stamp[i][j] = 2\n            elif paint[i][j] == 3:\n                stamp[i][j] = 3\n            elif paint[i][j] == 4:\n                stamp[i][j] = 4\n\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R' and stamp[i][j] == 1:\n                board[i][j] = 'W'\n            elif board[i][j] == 'G' and stamp[i][j] == 2:\n                board[i][j] = 'W'\n            elif board[i][j] == 'B' and stamp[i][j] == 3:\n                board[i][j] = 'W'\n            elif board[i][j] == 'W' and stamp[i][j] == 4:\n                board[i][j] = 'W'\n\n    if all(board[i][j] == 'W' for i in range(N) for j in range(M)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3277,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, S = map(int, stdin.split())\n    changes = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if sum(A[i:j+1]) == S:\n                changes += 1\n                A[i], A[j] = A[j], A[i]\n    return str(changes)"
    },
    {
        "number": 3278,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    frogs = []\n    for _ in range(n):\n        x, d = map(int, stdin.readline().strip().split())\n        frogs.append((x, d))\n\n    frogs.sort(key=lambda x: x[0])\n    tower_positions = [f[0] for f in frogs]\n    tower_sizes = [f[1] for f in frogs]\n\n    max_tower_position = max(tower_positions)\n    max_tower_size = max(tower_sizes)\n\n    return f\"{max_tower_position} {max_tower_size}\""
    },
    {
        "number": 3279,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    borders = []\n    for _ in range(n):\n        borders.append(list(map(int, stdin.strip().split())))\n\n    for i in range(n):\n        for j in range(n):\n            if borders[i][j] == 0:\n                continue\n\n            for k in range(i+1, n):\n                if borders[k][j] == 0:\n                    continue\n\n                if borders[i][j] == borders[k][j]:\n                    if borders[i][j] == 1:\n                        borders[i][j] = 2\n                    else:\n                        borders[i][j] = 1\n                    borders[k][j] = 0\n                    break\n\n            for k in range(j+1, n):\n                if borders[i][k] == 0:\n                    continue\n\n                if borders[i][j] == borders[i][k]:\n                    if borders[i][j] == 1:\n                        borders[i][j] = 2\n                    else:\n                        borders[i][j] = 1\n                    borders[i][k] = 0\n                    break\n\n    result = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            if borders[i][j] == 1:\n                row.append(1)\n            else:\n                row.append(0)\n        result.append(''.join(row))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 3280,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    shows = []\n    for i in range(n):\n        start, end = map(int, stdin.split())\n        shows.append((start, end))\n\n    shows.sort(key=lambda x: x[0])\n\n    max_count = 0\n    current_start = shows[0][0]\n    current_end = shows[0][1]\n\n    for i in range(1, len(shows)):\n        if shows[i][0] > current_end:\n            max_count += 1\n            current_start = shows[i][0]\n            current_end = shows[i][1]\n        elif shows[i][0] == current_end:\n            current_end = max(current_end, shows[i][1])\n\n    return str(max_count)"
    },
    {
        "number": 3281,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    J, R, D = map(int, stdin.split())\n    junctions = list(range(1, J+1))\n    roads = []\n    for _ in range(R):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n\n    def distance(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def turn_angle(a, b):\n        return 180 - abs(a[0] - b[0])\n\n    def max_turning_angle(junctions, roads):\n        max_turning_angle = 0\n        for i in range(len(junctions)):\n            for j in range(i+1, len(junctions)):\n                if distance(junctions[i], junctions[j]) <= D:\n                    turning_angle = turn_angle(junctions[i], junctions[j])\n                    if turning_angle > max_turning_angle:\n                        max_turning_angle = turning_angle\n        return max_turning_angle\n\n    max_turning_angle = max_turning_angle(junctions, roads)\n    if max_turning_angle == 0:\n        return \"Impossible\"\n    else:\n        return str(max_turning_angle) + \".\""
    },
    {
        "number": 3282,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P = int(stdin.strip())\n    bills = []\n    for i in range(1, 10001):\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1000 == 0:\n            print(f\"{i} bills\")\n        if i % 1"
    },
    {
        "number": 3283,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, r = map(int, stdin.split())\n    a = [0] * n\n    for _ in range(d):\n        a[randint(0, n-1)] += 1\n    a.sort()\n    expected_value = sum(a[:r])\n    return str(expected_value)"
    },
    {
        "number": 3284,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        for j in range(c, d+1):\n            if i % 2 == 0 and j % 2 == 0:\n                if i!= j and i % j == 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 3285,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, m = map(int, stdin.split())\n    if r < 1 or r > 100 or m < 1 or m > 200000000:\n        return \"Invalid input\"\n\n    n = 1\n    while True:\n        if m in [a + b for a, b in zip(A, A[1:])]:\n            break\n        n += 1\n\n    return str(n)"
    },
    {
        "number": 3286,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    encrypted_password = stdin.strip()\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = 0\n\n    for i in range(len(encrypted_password)):\n        if encrypted_password[i] in vowels:\n            result += 1\n        else:\n            result += 2\n\n    return str(result % 1000009)\n"
    },
    {
        "number": 3287,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, *coins = map(int, stdin.split())\n    x = [int(coin) for coin in coins]\n    x.sort()\n    loot = sum(x)\n    loot_per_coin = loot // k\n    loot_left = loot % k\n    return str(loot_left)"
    },
    {
        "number": 3288,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    strings = []\n    for i in range(1, 27):\n        for j in range(1, k + 1):\n            strings.append(f\"{i}{j}\")\n    strings.sort()\n    for i in range(n):\n        if strings[i] in strings[i + 1:]:\n            return strings[i]\n    return \"-1\""
    },
    {
        "number": 3289,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    poll_results = []\n    for _ in range(n):\n        a, b, c = map(int, stdin.strip().split())\n        poll_results.append((a, b, c))\n\n    poll_results.sort(key=lambda x: (-x[0] * x[1], x[2] * x[3]))\n\n    min_cluster_size = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                cluster_size = k - j + 1\n                if cluster_size < min_cluster_size:\n                    min_cluster_size = cluster_size\n\n    return str(min_cluster_size)\n"
    },
    {
        "number": 3290,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, E, D = map(int, stdin.split())\n    e = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n\n    # Initialize the deck\n    deck = []\n    for i in range(N):\n        for j in range(e[i]):\n            deck.append(i)\n        for j in range(d[i]):\n            deck.append(i + N)\n\n    # Shuffle the deck\n    random.shuffle(deck)\n\n    # Initialize the game state\n    players = [[] for _ in range(N)]\n    current_player = 0\n    current_kitten = 0\n    current_defuse = 0\n    current_hand = []\n    current_location = 0\n\n    # Play the game\n    while True:\n        # Get the current player's action\n        action = input()\n        if action == 'quit':\n            break\n\n        # Draw a card\n        if action == 'draw':\n            if current_hand:\n                current_hand.pop()\n            current_hand.append(deck.pop())\n            current_location = deck.pop()\n\n        # Exploding Kitten\n        elif action == 'exploding_kitten':\n            if current_hand:\n                current_hand.pop()\n            current_hand.append(deck.pop())\n            current_location = deck.pop()\n            current_kitten += 1\n\n        # Defuse\n        elif action == 'defuse':\n            if current_hand:\n                current_hand.pop()\n            current_hand.append(deck.pop())\n            current_location = deck.pop()\n            current_defuse += 1\n\n        # Check if the game is over\n        if current_kitten == E and current_defuse == D:\n            break\n\n        # Check if the game is over\n        if current_hand:\n            players[current_player].append(current_hand)\n            current_hand = []\n\n        # Check if the game is over\n        if current_player == N - 1:\n            break\n\n        # Switch to the next player\n        current_player = (current_player + 1) % N\n\n    # Find the winner\n    if players[0]:\n        winner = 0\n        for player in players:\n            if player:\n                winner = player[0]\n                break\n        return str(winner)\n    else:\n        return '-1'"
    },
    {
        "number": 3291,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n\n    n = int(stdin.strip())\n    splitters = []\n\n    for _ in range(n):\n        left, right = map(int, stdin.split())\n        splitters.append((left, right))\n\n    def distribute(boxes, splitters):\n        for i, splitter in enumerate(splitters):\n            if boxes[splitter[0]] > 0:\n                boxes[splitter[0]] -= 1\n                boxes[splitter[1]] += 1\n            else:\n                return False\n\n        for i, splitter in enumerate(splitters):\n            if boxes[splitter[1]] > 0:\n                boxes[splitter[1]] -= 1\n                boxes[splitter[0]] += 1\n            else:\n                return False\n\n        return True\n\n    def merge_belts(boxes, splitters):\n        for i, splitter in enumerate(splitters):\n            if boxes[splitter[0]] > 0:\n                boxes[splitter[0]] -= 1\n                boxes[splitter[1]] += 1\n            else:\n                return False\n\n        for i, splitter in enumerate(splitters):\n            if boxes[splitter[1]] > 0:\n                boxes[splitter[1]] -= 1\n                boxes[splitter[0]] += 1\n            else:\n                return False\n\n        return True\n\n    def split_belts(boxes, splitters):\n        for i, splitter in enumerate(splitters):\n            if boxes[splitter[0]] > 0:\n                boxes[splitter[0]] -= 1\n                boxes[splitter[1]] += 1\n            else:\n                return False\n\n        for i, splitter in enumerate(splitters):\n            if boxes[splitter[1]] > 0:\n                boxes[splitter[1]] -= 1\n                boxes[splitter[0]] += 1\n            else:\n                return False\n\n        return True\n\n    def knock_off_splitter(boxes, splitters):\n        for i, splitter in enumerate(splitters):\n            if boxes[splitter[0]] > 0:\n                boxes[splitter[0]] -= 1\n                boxes[splitter[1]] += 1\n            else:\n                return False\n\n        for i, splitter in enumerate(splitters):\n            if boxes[splitter[1]] > 0:\n                boxes[splitter[1]] -= 1\n                boxes[splitter[0]] += 1\n            else:\n                return False\n\n        return True\n\n    def distribute_boxes(boxes, splitters):\n        for i, splitter in enumerate(splitters):\n            if boxes[splitter[0]] > 0:\n                boxes[splitter[0]] -= 1\n                boxes[splitter[1]] += 1\n            else:\n                return False\n\n        for i, splitter in enumerate(splitters):\n            if boxes[splitter[1]] > 0:\n                boxes[splitter[1]] -= 1\n                boxes[splitter[0]] += 1\n            else:\n                return False\n\n        return True\n\n    def merge_belts_and_distribute(boxes, splitters):\n        if distribute(boxes, splitters):\n            if merge_belts(boxes, splitters):\n                if distribute_boxes(boxes, splitters):\n                    return True\n        return False\n\n    def split_belts_and_distribute(boxes, splitters):\n        if distribute(boxes, splitters):\n            if split_belts(boxes, splitters):\n                if distribute_boxes(boxes, splitters):\n                    return True\n        return False\n\n    def knock_off_splitter_and_distribute(boxes, splitters):\n        if distribute(boxes, splitters):\n            if knock_off_splitter(boxes, splitters):\n                if distribute_boxes(boxes, splitters):\n                    return True\n        return False\n\n    def distribute_boxes_and_knock_off(boxes, splitters):\n        if distribute_boxes(boxes, splitters):\n            if knock_off_splitter(boxes, splitters):\n                return True\n        return False\n\n    def distribute_boxes_and_knock_off_and_merge(boxes, splitters):\n        if distribute_boxes(boxes, splitters):\n            if knock_off_splitter(boxes, splitters):\n                if merge_belts(boxes, splitters):\n                    return True\n        return False\n\n    def distribute_boxes_and_knock_off_and_split(boxes, splitters):\n        if distribute_boxes(boxes, splitters):\n            if knock_off_splitter(boxes, splitters):\n                if split_belts(boxes, splitters):\n                    return True\n        return False\n\n    def distribute_boxes_and_knock_off_and_knock_off(boxes, splitters):\n        if distribute_boxes(boxes, splitters"
    },
    {
        "number": 3292,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = 0\n\n    for i in range(n):\n        name = stdin.strip()\n        if len(name) < 3 or len(name) > 30:\n            continue\n\n        name_list = [name]\n        for j in range(i + 1, n):\n            name = stdin.strip()\n            if len(name) < 3 or len(name) > 30:\n                continue\n\n            if name[0] == name_list[-1][-1]:\n                name_list.append(name)\n            else:\n                break\n\n        if len(name_list) > 1:\n            result += len(name_list)\n\n    return str(result)\n"
    },
    {
        "number": 3293,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    snack_prices = list(map(int, stdin.readline().strip().split()))\n    snack_prices.sort()\n    snack_prices.reverse()\n\n    profit = 0\n    for i in range(n):\n        if i == 0:\n            profit += snack_prices[i] - snack_prices[i + 1]\n        else:\n            profit += snack_prices[i] - snack_prices[i - 1]\n\n    return str(profit)"
    },
    {
        "number": 3294,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    polygons = []\n    for _ in range(N):\n        H_0, H_1 = map(int, stdin.readline().strip().split())\n        M = int(stdin.readline().strip())\n        vertices = []\n        for _ in range(M):\n            x, y = map(int, stdin.readline().strip().split())\n            vertices.append((x, y))\n        polygons.append((H_0, H_1, vertices))\n\n    def distance(p1, p2):\n        return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n\n    closest_distance = float('inf')\n    for h_0, h_1, vertices in polygons:\n        for i in range(len(vertices) - 1):\n            for j in range(i + 1, len(vertices)):\n                closest_distance = min(closest_distance, distance(vertices[i], vertices[j]))\n\n    return str(closest_distance)\n"
    },
    {
        "number": 3295,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Q = int(stdin.readline())\n    for _ in range(Q):\n        K, L, M = map(int, stdin.readline().split())\n        if K > 150 or M > 150 or L > K:\n            continue\n        if L > 10000000:\n            continue\n        happy_numbers = [i for i in range(1, K+1) if i <= M and i % 2 == 0]\n        if len(happy_numbers) < L:\n            continue\n        for i in range(Q):\n            if len(set(happy_numbers[:L]) & set(range(K, K+L)))) == L:\n                return str(i+1)\n        return \"-1\""
    },
    {
        "number": 3296,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N > 100 or K > 2**31 - 1:\n        return \"Invalid input\"\n\n    def permute(n: int, k: int) -> int:\n        if n == 1:\n            return k\n        return permute(n - 1, k) + k\n\n    return str(permute(N, K))\n"
    },
    {
        "number": 3297,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the puzzle from stdin\n    puzzle = stdin.strip()\n\n    # Split the puzzle into words\n    words = puzzle.split('+')\n\n    # Initialize the solution list\n    solution_list = []\n\n    # Iterate over each word\n    for word in words:\n        # Initialize the solution\n        solution = ''\n\n        # Iterate over each character in the word\n        for i in range(len(word)):\n            # Replace the current character with the next digit\n            solution += str(int(word[i]) + 1)\n\n        # Add the solution to the solution list\n        solution_list.append(solution)\n\n    # Return the first solution in the list\n    return solution_list[0]\n"
    },
    {
        "number": 3298,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                count += 1\n\n    return str(count % (10**9 + 9))"
    },
    {
        "number": 3299,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    magic_board = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            magic_board[i][j] = int(stdin.split()[j])\n\n    def is_valid(i, j):\n        return (i == 0 or i == n - 1 or j == 0 or j == m - 1) and magic_board[i][j]!= 0\n\n    def is_valid_corner(i, j):\n        return (i == 0 or i == n - 1 or j == 0 or j == m - 1) and magic_board[i][j] % 2 == 0\n\n    def is_valid_parity(i, j):\n        return (i == 0 or i == n - 1 or j == 0 or j == m - 1) and magic_board[i][j] % 2!= magic_board[i][j - 1] % 2\n\n    def fill_magic_board(i, j):\n        if is_valid(i, j):\n            magic_board[i][j] = 1\n            fill_magic_board(i + 1, j)\n            fill_magic_board(i - 1, j)\n            fill_magic_board(i, j + 1)\n            fill_magic_board(i, j - 1)\n\n    fill_magic_board(0, 0)\n    for i in range(n):\n        for j in range(m):\n            if magic_board[i][j] == 0:\n                return -1\n\n    return sum(magic_board[i][j] for i in range(n) for j in range(m))"
    },
    {
        "number": 3300,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    cheetahs = []\n    for _ in range(N):\n        t, v = map(int, stdin.readline().strip().split())\n        cheetahs.append((t, v))\n\n    def min_length(cheetahs):\n        start_time = cheetahs[0][0]\n        start_box = cheetahs[0][1]\n        finish_line = cheetahs[-1][0]\n        max_time = max(cheetahs[0][0], finish_line)\n        min_length = float('inf')\n\n        for t, v in cheetahs:\n            if t < start_time:\n                continue\n            if t > max_time:\n                break\n            if t - start_time > min_length:\n                min_length = t - start_time\n\n        return min_length\n\n    min_length_pack = min_length(cheetahs)\n    return str(min_length_pack)\n"
    },
    {
        "number": 3301,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P, X, Y = map(int, stdin.split())\n    transfer_partnerships = list(map(int, stdin.split()))\n    banks = list(map(int, stdin.split()))\n\n    # Find the maximum fee\n    max_fee = float('-inf')\n    for i in range(P):\n        for j in range(i + 1, P):\n            if transfer_partnerships[i] == transfer_partnerships[j]:\n                continue\n            fee = transfer_partnerships[i] * transfer_partnerships[j]\n            if fee > max_fee:\n                max_fee = fee\n\n    # Check if there is a value such that this happens\n    if max_fee == float('-inf'):\n        return \"Impossible\"\n\n    # Compute the largest fee\n    largest_fee = max_fee\n    for i in range(P):\n        for j in range(i + 1, P):\n            if transfer_partnerships[i] == transfer_partnerships[j]:\n                continue\n            fee = transfer_partnerships[i] * transfer_partnerships[j]\n            if fee > largest_fee:\n                largest_fee = fee\n\n    return str(largest_fee)\n"
    },
    {
        "number": 3302,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    P = set(map(int, stdin.split()))\n\n    if n > 16 or p > n:\n        return \"impossible\"\n\n    def gray_code(n):\n        if n == 0:\n            return [\"\"]\n        elif n == 1:\n            return [\"0\"]\n        else:\n            return gray_code(n - 1) + [gray_code(n - 1)[i] + \"1\" for i in range(len(gray_code(n - 1)))]\n\n    codes = [gray_code(n) for _ in range(p)]\n\n    for i in range(p):\n        for j in range(i + 1, p):\n            if codes[i] == codes[j]:\n                return \"impossible\"\n\n    return \"\\n\".join(codes)"
    },
    {
        "number": 3303,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num1 = int(stdin.strip())\n    num2 = int(stdin.strip())\n\n    # Perform the second method until the two numbers would not produce a carry digit\n    while num1 > 0 or num2 > 0:\n        carry = num1 & num2\n        num1 = num1 ^ num2\n        num2 = carry << 1\n\n    return str(num1)"
    },
    {
        "number": 3304,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    P = list(map(int, stdin.readline().strip().split()))\n    V = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the elves and dwarves based on their strengths\n    elves = sorted(enumerate(V), key=lambda x: x[1])\n    dwarves = sorted(enumerate(P), key=lambda x: x[1])\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through the elves and dwarves\n    for i in range(N):\n        # Find the next unclaimed dwarf\n        unclaimed_dwarf = None\n        for j in range(i + 1, N):\n            if dwarves[j][1] == 0:\n                unclaimed_dwarf = j\n                break\n\n        # If there is no unclaimed dwarf, the elves will all sit down\n        if unclaimed_dwarf is None:\n            for j in range(i + 1, N):\n                if elves[j][1] > 0:\n                    result.append(i)\n                    break\n            continue\n\n        # Find the next elf to approach the dwarf\n        next_elf = None\n        for j in range(i + 1, N):\n            if elves[j][1] > 0:\n                next_elf = j\n                break\n\n        # If there is no next elf, the elves will all sit down\n        if next_elf is None:\n            for j in range(i + 1, N):\n                if elves[j][1] > 0:\n                    result.append(i)\n                    break\n            continue\n\n        # Approach the dwarf and the next elf\n        for j in range(i + 1, N):\n            if elves[j][1] > 0:\n                result.append(j)\n                break\n            elif dwarves[j][1] > 0:\n                result.append(i)\n                break\n            elif elves[j][1] == 0 and dwarves[j][1] == 0:\n                result.append(j)\n                break\n\n    # Calculate the maximum number of victories\n    max_victories = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if result[i] < result[j]:\n                max_victories += 1\n\n    return str(max_victories)\n"
    },
    {
        "number": 3305,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.strip()\n\n    def is_almost_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def count_nonempty_almost_palindromes(s: str) -> int:\n        count = 0\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                if is_almost_palindrome(s[i:j+1]):\n                    count += 1\n        return count\n\n    for _ in range(Q):\n        L, R = map(int, stdin.split())\n        L, R = max(L, 1), min(R, N)\n        if L > R:\n            L, R = R, L\n        result = count_nonempty_almost_palindromes(S[L-1:R])\n        print(result)"
    },
    {
        "number": 3306,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n\n    # Initialize the set of houses that are on the same position as the detector\n    detectors = set()\n\n    # Initialize the set of houses that have been detected\n    detected = set()\n\n    # Initialize the set of houses that have been visited\n    visited = set()\n\n    # Initialize the set of houses that have been visited and have not been detected yet\n    undetected = set()\n\n    # Iterate over the detectors\n    for i in range(N):\n        # If the detector is on the same position as the current house, add it to the set of detected houses\n        if P[i] == P[i + 1]:\n            detected.add(P[i])\n\n    # Iterate over the houses\n    for i in range(M):\n        # If the house is not on the same position as the detector, add it to the set of undetected houses\n        if i not in detected:\n            undetected.add(i)\n\n    # Iterate over the undetected houses\n    for i in undetected:\n        # If the house is on the same position as the detector, add it to the set of detected houses\n        if i in detected:\n            detected.add(i)\n\n    # Iterate over the detected houses\n    for i in detected:\n        # If the house is on the same position as the detector, add it to the set of detected houses\n        if i in detected:\n            detected.add(i)\n\n    # Return the minimal number of phone calls made\n    return len(detected)"
    },
    {
        "number": 3307,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    y = list(map(int, stdin.readline().strip().split()))\n    a, b = map(int, stdin.readline().strip().split())\n\n    # Check if the points are collinear\n    if x[0] == x[1] or y[0] == y[1]:\n        return \"Error: Points are collinear.\"\n\n    # Check if the points are on the straight line\n    if x[0] == x[2] or y[0] == y[2]:\n        return \"Error: Points are on the straight line.\"\n\n    # Check if the points are on the canal\n    if x[0] == a or x[0] == b or y[0] == a or y[0] == b:\n        return \"Error: Points are on the canal.\"\n\n    # Calculate the area of the polygon\n    area = 0\n    for i in range(N):\n        area += (x[i] - x[(i + 1) % N]) * (y[i] + y[(i + 1) % N])\n\n    # Calculate the area of the canal\n    canal_area = (b - a) * (y[2] - y[0])\n\n    # Calculate the area of the largest possible area\n    largest_area = max(area, canal_area)\n\n    return str(largest_area)\n"
    },
    {
        "number": 3308,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(float, stdin.strip().split()))\n    area = 0.0\n    for i in range(n):\n        for j in range(i+1, n):\n            area += (x[i][0] * x[j][1] - x[i][1] * x[j][0]) / 2\n    return str(area)"
    },
    {
        "number": 3309,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, C = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    max_companies = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] == A[j]:\n                max_companies += 1\n                break\n\n    return str(max_companies)"
    },
    {
        "number": 3310,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, g, t = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    # Calculate the expected number of people in the restaurant\n    expected_people = (t * (g - 1)) // g\n\n    # Calculate the expected occupancy after t hours\n    expected_occupancy = expected_people * sum(c)\n\n    return str(expected_occupancy)\n"
    },
    {
        "number": 3311,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int(n ** (m - 1)) % m)"
    },
    {
        "number": 3312,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, E, S_X, S_Y, C = map(int, stdin.split())\n    Cans = []\n    for _ in range(C):\n        X, Y, CT = map(int, stdin.split())\n        Cans.append((X, Y, CT))\n\n    def can_appears(x, y):\n        for can in Cans:\n            if can[0] == x and can[1] == y:\n                return True\n        return False\n\n    def collect_oil(x, y):\n        for can in Cans:\n            if can[0] == x and can[1] == y:\n                if can_appears(x, y):\n                    return can[2]\n                else:\n                    Cans.remove(can)\n                    return 0\n        return 0\n\n    def score(x, y):\n        oil = collect_oil(x, y)\n        if oil > 0:\n            return oil * 1\n        else:\n            return 0\n\n    def max_score(x, y):\n        max_score = 0\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and not can_appears(nx, ny):\n                score_x, score_y = score(nx, ny), score(x, y)\n                max_score = max(max_score, score_x + score_y)\n        return max_score\n\n    max_score_x, max_score_y = 0, 0\n    for x in range(N):\n        for y in range(N):\n            score_x, score_y = score(x, y), score(max_score_x, max_score_y)\n            max_score_x = max(max_score_x, score_x)\n            max_score_y = max(max_score_y, score_y)\n    return str(max_score_x * max_score_y)\n"
    },
    {
        "number": 3313,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, w, h = map(int, stdin.split())\n    gems = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        gems.append((x, y))\n\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def max_horizontal_speed(gems):\n        max_speed = 0\n        for gem in gems:\n            max_speed = max(max_speed, gem[0])\n        return max_speed\n\n    def max_vertical_speed(gems):\n        max_speed = 0\n        for gem in gems:\n            max_speed = max(max_speed, gem[1])\n        return max_speed\n\n    def collect_gems(gems, max_speed, max_horizontal_speed):\n        collected = 0\n        for gem in gems:\n            if gem[0] <= max_horizontal_speed:\n                collected += 1\n                gem[0] += gem[0] - max_horizontal_speed\n            else:\n                gem[0] = max_horizontal_speed\n                collected += 1\n        return collected\n\n    max_speed = max_horizontal_speed(gems)\n    max_vertical_speed = max_vertical_speed(gems)\n\n    while max_vertical_speed > 0:\n        collected = collect_gems(gems, max_speed, max_horizontal_speed)\n        max_vertical_speed -= r\n        max_speed = max_horizontal_speed(gems)\n\n    return str(collected)"
    },
    {
        "number": 3314,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n % 3!= 0:\n        return \"-1\"\n\n    def count_distinct_letters(s: str) -> int:\n        count = 0\n        for letter in s:\n            if letter == 'A':\n                count += 1\n            elif letter == 'B':\n                count += 2\n            elif letter == 'C':\n                count += 3\n        return count\n\n    def rotate_wheel(wheel: str, direction: str) -> str:\n        if direction == 'right':\n            return wheel[1:] + wheel[0] + wheel[2:]\n        elif direction == 'left':\n            return wheel[0] + wheel[1] + wheel[2:]\n\n    def rotate_wheels(wheels: List[str]) -> List[str]:\n        for i in range(n // 3):\n            for j in range(3):\n                wheels[i * 3 + j] = rotate_wheel(wheels[i * 3 + j], 'right')\n        return wheels\n\n    def count_rotations(wheels: List[str]) -> int:\n        distinct_letters = [count_distinct_letters(wheel) for wheel in wheels]\n        return min(distinct_letters)\n\n    wheels = [rotate_wheel(wheel, 'right') for wheel in stdin]\n    wheels = rotate_wheels(wheels)\n    return str(count_rotations(wheels))\n"
    },
    {
        "number": 3315,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    teleportations = 0\n    for i in range(N):\n        teleportations += len(set(stdin.strip().split()))\n    return str(teleportations)"
    },
    {
        "number": 3316,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t, p = map(int, stdin.split())\n    if m > 1000 or n > m or t > 100 or p > m:\n        return \"Error: Invalid input\"\n\n    def draw_lucky_winners(m):\n        lucky_winners = []\n        for i in range(m):\n            lucky_winners.append(i)\n        random.shuffle(lucky_winners)\n        return lucky_winners[:n]\n\n    lucky_winners = draw_lucky_winners(m)\n    total_tickets = sum(t for i, w in enumerate(lucky_winners) for t in range(w, w + t))\n\n    return str(total_tickets / m)"
    },
    {
        "number": 3317,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    q = int(stdin.readline().strip())\n\n    result = []\n    for _ in range(q):\n        i, j = map(int, stdin.readline().strip().split())\n        if i == j:\n            result.append(0)\n        else:\n            result.append(max(len(s[i:j+1]) for s in s[i:j+1]))\n\n    return str(max(result))\n"
    },
    {
        "number": 3318,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    marked = [False] * (N + 1)\n    max_nodes = 0\n\n    for i in range(1, N + 1):\n        if not marked[i]:\n            max_nodes = max(max_nodes, i)\n            while i + D - 1 < N and not marked[i + D - 1]:\n                marked[i + D - 1] = True\n                i += 1\n\n    return str(max_nodes)"
    },
    {
        "number": 3319,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, z = map(int, stdin.split())\n    planetoids = []\n    for _ in range(n):\n        mass, x, y, z, vx, vy, vz = map(int, stdin.split())\n        planetoids.append((mass, (x, y, z), (vx, vy, vz)))\n\n    def collide(planetoid1, planetoid2):\n        dx, dy, dz = planetoid2[1] - planetoid1[1], planetoid2[2] - planetoid1[2], planetoid2[3] - planetoid1[3]\n        return dx * planetoid1[2] + dy * planetoid1[3] + dz * planetoid1[4] == 0\n\n    def average_velocity(planetoids):\n        return sum(p[3] for p in planetoids) / len(planetoids)\n\n    def find_collisions(planetoids):\n        collisions = []\n        for i in range(len(planetoids)):\n            for j in range(i + 1, len(planetoids)):\n                if collide(planetoids[i], planetoids[j]):\n                    collisions.append((i, j))\n        return collisions\n\n    def find_largest_mass(planetoids):\n        return max(p[0] for p in planetoids)\n\n    def find_planets(planetoids):\n        planets = []\n        for i in range(len(planetoids)):\n            for j in range(i + 1, len(planetoids)):\n                if collide(planetoids[i], planetoids[j]):\n                    planets.append((i, j))\n        return planets\n\n    def find_orbits(planets):\n        orbits = []\n        for i in range(len(planets)):\n            for j in range(i + 1, len(planets)):\n                if collide(planets[i], planets[j]):\n                    orbits.append((i, j))\n        return orbits\n\n    def find_largest_orbits(orbits):\n        return max(len(orbit) for orbit in orbits)\n\n    def find_largest_planets(planets):\n        return max(len(planets) for planets in planets)\n\n    planets = find_planets(planetoids)\n    orbits = find_orbits(planets)\n    collisions = find_collisions(planetoids)\n\n    largest_mass = find_largest_mass(planetoids)\n    largest_orbits = find_largest_orbits(orbits)\n    largest_planets = find_largest_planets(planets)\n\n    output = f\"{largest_planets}\\n\"\n    for i, planet in enumerate(planets):\n        output += f\"P{i+1}: {planet[0]} {planet[1]} {planet[2]} {planet[3]} {planet[4]} {planet[5]} {planet[6]}\\n\"\n\n    return output"
    },
    {
        "number": 3320,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b, w = map(int, stdin.split())\n        roads.append((a, b, w))\n\n    q = int(stdin.readline())\n    result = []\n\n    for _ in range(q):\n        s, t = map(int, stdin.split())\n        result.append(transportation_cost(s, t, roads))\n\n    return '\\n'.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 3321,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    frogs = list(map(int, stdin.strip().split()))\n\n    def is_leap(id1: int, id2: int) -> bool:\n        return id1 - id2 == 1\n\n    def leap_count(id1: int, id2: int) -> int:\n        return abs(id1 - id2)\n\n    def leap_sequence(id1: int, id2: int) -> List[int]:\n        sequence = []\n        while id1!= id2:\n            sequence.append(id1)\n            id1, id2 = id2, id1 + 1\n        return sequence\n\n    def rearrange_frogs(frogs: List[int]) -> List[int]:\n        result = []\n        for i in range(N):\n            result.append(frogs[i])\n        return result\n\n    def proclaim_sequence(sequence: List[int]) -> str:\n        proclaimations = []\n        for i in range(len(sequence) - 1):\n            proclaimations.append(leap_count(sequence[i], sequence[i + 1]))\n        return str(proclaimations)\n\n    def compute_proclaimations(starting_sequence: List[int], resulting_sequence: List[int]) -> List[int]:\n        result = []\n        for i in range(len(starting_sequence)):\n            result.append(leap_count(starting_sequence[i], resulting_sequence[i]))\n        return result\n\n    starting_sequence = frogs[:N]\n    resulting_sequence = frogs[N:]\n\n    proclaimations = compute_proclaimations(starting_sequence, resulting_sequence)\n    proclaimations = proclaim_sequence(proclaimations)\n\n    return proclaimations\n"
    },
    {
        "number": 3322,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    costs = []\n    for _ in range(n):\n        a, p, b, q = map(int, stdin.split())\n        costs.append((p, b, a))\n\n    def min_cost(costs):\n        min_cost = float('inf')\n        for i in range(k):\n            for j in range(k):\n                if i == j:\n                    continue\n                for k in range(k):\n                    if k == i or k == j:\n                        continue\n                    for l in range(k):\n                        if l == i or l == j or l == k:\n                            continue\n                        for m in range(k):\n                            if m == i or m == j or m == k or m == l:\n                                continue\n                            for n in range(k):\n                                if n == i or n == j or n == k or n == l or n == m:\n                                    continue\n                                for o in range(k):\n                                    if o == i or o == j or o == k or o == l or o == m or o == n:\n                                        continue\n                                    for p in range(k):\n                                        if p == i or p == j or p == k or p == l or p == m or p == n or p == o:\n                                            continue\n                                        for q in range(k):\n                                            if q == i or q == j or q == k or q == l or q == m or q == n or q == o or q == p:\n                                                continue\n                                            for r in range(k):\n                                                if r == i or r == j or r == k or r == l or r == m or r == n or r == o or r == p or r == q:\n                                                    continue\n                                                    # Check if the cost is less than the current minimum cost\n                                                    if costs[i][j] + costs[j][k] + costs[k][o] + costs[o][p] + costs[p][q] + costs[q][r] + costs[r][i] < min_cost:\n                                                        min_cost = costs[i][j] + costs[j][k] + costs[k][o] + costs[o][p] + costs[p][q] + costs[q][r] + costs[r][i]\n        return min_cost\n\n    min_cost_solution = min_cost(costs)\n    if min_cost_solution == float('inf'):\n        return \"-1\"\n    else:\n        return str(min_cost_solution)"
    },
    {
        "number": 3323,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        N = int(stdin.readline())\n        people = []\n        for _ in range(N):\n            a, b, c = map(int, stdin.readline().split())\n            people.append((a, b, c))\n        min_fractions = [people[i][j] for i in range(N) for j in range(3)]\n        max_people = 0\n        for i in range(3):\n            for j in range(i+1, 3):\n                for k in range(j+1, 3):\n                    total_fractions = sum(min_fractions[:i] + min_fractions[i+1:j] + min_fractions[j+1:k])\n                    if total_fractions >= min_fractions[i] and total_fractions >= min_fractions[j] and total_fractions >= min_fractions[k]:\n                        max_people += 1\n        print(f\"Case #1: {max_people}\")\n        print(f\"Case #2: {max_people}\")\n    return \"\""
    },
    {
        "number": 3324,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    M = int(stdin.readline())\n    equations = []\n    for _ in range(M):\n        equation = stdin.readline().strip()\n        equations.append(equation)\n\n    # Find common factors\n    factors = []\n    for equation in equations:\n        factors.extend(set(equation.split()[-1].split('/')[::-1]))\n\n    # Find the minimum number for each factor\n    min_factors = [0] * len(factors)\n    for i, factor in enumerate(factors):\n        for j, other_factor in enumerate(factors):\n            if i!= j and factor % other_factor == 0:\n                min_factors[i] = min(min_factors[i], min_factors[j])\n\n    # Fill in the blanks\n    result = []\n    for i, equation in enumerate(equations):\n        # Find the number of common factors for this equation\n        common_factors = 0\n        for factor in factors:\n            if equation.count(factor) > 0:\n                common_factors += 1\n\n        # Fill in the blanks\n        if common_factors == 1:\n            result.append(equation.split()[-1].split('/')[0])\n        elif common_factors == 2:\n            result.append(equation.split()[-1].split('/')[0])\n            result.append(equation.split()[-1].split('/')[1])\n        else:\n            result.append(equation.split()[-1].split('/')[0])\n            result.append(equation.split()[-1].split('/')[1])\n            result.append(equation.split()[-1].split('/')[2])\n\n    return''.join(map(str, result))\n"
    },
    {
        "number": 3325,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    D = int(stdin.readline().strip())\n    L = int(stdin.readline().strip())\n\n    vertices = []\n    for _ in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        vertices.append((x, y))\n\n    polygon = [(vertices[0][0], vertices[0][1]), (vertices[1][0], vertices[1][1]), (vertices[2][0], vertices[2][1]), (vertices[0][0], vertices[0][1])]\n    polygon = [(x, y) for x, y in polygon]\n\n    water_height = 0\n    for i in range(len(polygon) - 1):\n        x1, y1 = polygon[i]\n        x2, y2 = polygon[i + 1]\n        if y1 > y2:\n            water_height += (y2 - y1) / (x2 - x1)\n        else:\n            water_height += (y1 - y2) / (x1 - x2)\n\n    water_height *= 1000\n\n    return f\"{water_height:.2f}\""
    },
    {
        "number": 3326,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    grid = []\n    for _ in range(r):\n        grid.append(list(map(int, stdin.split())))\n\n    monotonic_subgrids = []\n    for i in range(1, r):\n        for j in range(1, c):\n            if grid[i][j] > grid[i-1][j]:\n                monotonic_subgrids.append((i, j))\n\n    return str(len(monotonic_subgrids))"
    },
    {
        "number": 3327,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = [list(row) for row in stdin.split()]\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \".\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j]"
    },
    {
        "number": 3328,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    table = []\n    for _ in range(N):\n        row = list(map(int, stdin.split()))\n        table.append(row)\n\n    def is_valid(row, col):\n        return 0 <= row < N and 0 <= col < N and table[row][col] >= 0\n\n    def domino_sum(row, col):\n        return sum(table[row][col + 1] - table[row + 1][col] for col in range(N))\n\n    def domino_cover(row, col):\n        for i in range(N):\n            if is_valid(row, i) and is_valid(row, i + 1) and is_valid(i + 1, col) and is_valid(i + 1, col + 1):\n                table[row][col] += table[row][i] + table[row][i + 1] + table[i + 1][col + 1]\n                table[row][col + 1] += table[row][i] + table[row][i + 1] + table[i + 1][col]\n                table[row + 1][col] += table[row][i] + table[row][i + 1] + table[i + 1][col + 1]\n                table[row + 1][col + 1] += table[row][i] + table[row][i + 1] + table[i + 1][col]\n                return True\n        return False\n\n    def domino_cover_sum(row, col):\n        return domino_sum(row, col) + domino_sum(row, col + 1) + domino_sum(row + 1, col) + domino_sum(row + 1, col + 1)\n\n    def domino_cover_count(row, col):\n        return domino_cover(row, col) + domino_cover(row, col + 1) + domino_cover(row + 1, col) + domino_cover(row + 1, col + 1)\n\n    def domino_cover_count_sum(row, col):\n        return domino_cover_sum(row, col) + domino_cover_sum(row, col + 1) + domino_cover_sum(row + 1, col) + domino_cover_sum(row + 1, col + 1)\n\n    def domino_cover_count_count(row, col):\n        return domino_cover_count(row, col) + domino_cover_count(row, col + 1) + domino_cover_count(row + 1, col) + domino_cover_count(row + 1, col + 1)\n\n    def domino_cover_count_min(row, col):\n        return min(domino_cover_count_sum(row, col), domino_cover_count_sum(row, col + 1), domino_cover_count_sum(row + 1, col), domino_cover_count_sum(row + 1, col + 1))\n\n    def domino_cover_count_max(row, col):\n        return max(domino_cover_count_sum(row, col), domino_cover_count_sum(row, col + 1), domino_cover_count_sum(row + 1, col), domino_cover_count_sum(row + 1, col + 1))\n\n    def domino_cover_count_avg(row, col):\n        return (domino_cover_count_sum(row, col) + domino_cover_count_sum(row, col + 1) + domino_cover_count_sum(row + 1, col) + domino_cover_count_sum(row + 1, col + 1)) / 4\n\n    def domino_cover_count_stddev(row, col):\n        return (domino_cover_count_sum(row, col) + domino_cover_count_sum(row, col + 1) + domino_cover_count_sum(row + 1, col) + domino_cover_count_sum(row + 1, col + 1)) / 4\n\n    def domino_cover_count_min_max(row, col):\n        return (domino_cover_count_min(row, col), domino_cover_count_max(row, col))\n\n    def"
    },
    {
        "number": 3329,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    pebbles = list(stdin)\n    pebbles.reverse()\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pebbles[i] for i in range(N)]\n    pebbles = [pe"
    },
    {
        "number": 3330,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n\n    total_potatoes = sum(a)\n    total_potatoes_in_stores = sum(c)\n\n    total_potatoes_per_bag = total_potatoes / N\n\n    min_product = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            min_product += (P_1[i] * P_2[j])\n\n    min_product /= total_potatoes_per_bag\n\n    return f\"{min_product:.3f}\""
    },
    {
        "number": 3331,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, A, B, P = map(int, stdin.split())\n    cows = [(A, B), (A + L, B), (A, B + L), (A + L, B + L)]\n    horse = (P, 0)\n    captured = False\n    minutes = 0\n\n    while not captured:\n        for i, cow in enumerate(cows):\n            if cow == horse:\n                if i == 0:\n                    horse = (P, 1)\n                elif i == 1:\n                    horse = (P, 2)\n                else:\n                    horse = (P, 0)\n                captured = True\n                break\n            elif cow[0] == horse[0]:\n                if cow[1] == horse[1]:\n                    if i == 0:\n                        horse = (P, 1)\n                    elif i == 1:\n                        horse = (P, 2)\n                    else:\n                        horse = (P, 0)\n                    captured = True\n                    break\n                elif cow[1] < horse[1]:\n                    horse = (P, 1)\n                else:\n                    horse = (P, 2)\n            else:\n                if cow[0] < horse[0]:\n                    horse = (P, 1)\n                else:\n                    horse = (P, 2)\n\n    return str(minutes)\n"
    },
    {
        "number": 3332,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    streams = []\n    for _ in range(n):\n        s, d, p = map(int, stdin.readline().strip().split())\n        streams.append((s, d, p))\n\n    def process_stream(s, d, p, stack):\n        if len(stack) == 0:\n            return False\n\n        processor_id = stack.pop()\n        if processor_id == -1:\n            return False\n\n        if s <= stack[-1][0]:\n            return False\n\n        if s + d > stack[-1][0] + stack[-1][1]:\n            return False\n\n        return True\n\n    def find_subset(streams, stack):\n        if len(streams) == 0:\n            return []\n\n        stream = streams.pop(0)\n        if process_stream(stream[0], stream[1], stream[2], stack):\n            return [stream] + find_subset(streams, stack)\n        else:\n            return find_subset(streams, stack)\n\n    def max_priority(streams, stack):\n        subset = find_subset(streams, stack)\n        max_priority = 0\n        for stream in subset:\n            max_priority = max(max_priority, stream[2])\n        return max_priority\n\n    return str(max_priority(streams, []))\n"
    },
    {
        "number": 3333,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(float, stdin.split())\n    N = int(stdin.strip())\n    hiding_spots = []\n    for _ in range(N):\n        x1, y1 = map(float, stdin.split())\n        hiding_spots.append((x1, y1))\n\n    min_distance = float('inf')\n    for i in range(len(hiding_spots)):\n        for j in range(i + 1, len(hiding_spots)):\n            dx, dy = hiding_spots[i][0] - hiding_spots[j][0], hiding_spots[i][1] - hiding_spots[j][1]\n            distance = dx ** 2 + dy ** 2\n            if distance < min_distance:\n                min_distance = distance\n\n    return str(min_distance)"
    },
    {
        "number": 3334,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    distances = list(map(int, stdin.strip().split()))\n\n    # Calculate the average distance between all pairs of distance signs\n    total_distance = sum(distances)\n    average_distance = total_distance / (n - 1)\n\n    # Check if it is possible to determine the exact average\n    if average_distance == 0:\n        return \"impossible\"\n\n    return str(average_distance)\n"
    },
    {
        "number": 3335,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for a in range(1, n):\n        for b in range(a + 1, n):\n            c = n - a - b\n            if a * a + b * b == c * c % n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 3336,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    eligible_pupils = []\n    for _ in range(n):\n        height, sex, music_style, sport = map(int, stdin.strip().split())\n        if height > 40 and sex == 'F' and music_style!= sport:\n            eligible_pupils.append(height)\n    return str(max(eligible_pupils))"
    },
    {
        "number": 3337,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = []\n\n    for _ in range(n):\n        line = stdin.strip()\n        type, stack1, stack2 = line[0], int(line[1:]), int(line[2:])\n\n        if type == 'a':\n            result.append(stack1)\n        elif type == 'b':\n            result.append(stack2)\n        elif type == 'c':\n            result.append(stack2)\n            result.append(stack1)\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 3338,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    partners = []\n    for _ in range(n):\n        g, p, g_a, p_a = map(int, stdin.split())\n        partners.append((g, p, g_a, p_a))\n\n    partners.sort(key=lambda x: (-x[0], -x[1], -x[2], -x[3]))\n\n    d = 0\n    for i in range(k):\n        d = max(d, partners[i][0] + partners[i][1] + partners[i][2] + partners[i][3])\n\n    return str(d)\n"
    },
    {
        "number": 3339,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    roads = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n\n    def is_even(n: int) -> bool:\n        return n % 2 == 0\n\n    def destroy_roads(roads: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        result = []\n        for a, b in roads:\n            if a == b:\n                continue\n            if is_even(a) and is_even(b):\n                result.append((a, b))\n        return result\n\n    roads = destroy_roads(roads)\n    result = 0\n    for a, b in roads:\n        result = (result + 1) % 1000000009\n\n    return str(result)"
    },
    {
        "number": 3340,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    flights = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.strip().split())\n        flights.append((a, b))\n\n    def min_changes(flights):\n        n = len(flights)\n        dp = [[float('inf')] * n for _ in range(n)]\n        dp[0][0] = 0\n        for i in range(1, n):\n            dp[i][i] = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j], dp[i + 1][j - 1]) + 1\n                dp[j][i] = min(dp[j][i], dp[i + 1][j - 1]) + 1\n        return dp[0][n - 1]\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities = [(flights[i][0], flights[i][1]) for i in range(n) if i!= min_changes_count]\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_count][1]))\n\n    min_changes_count = min_changes(flights)\n    min_changes_cities.append((flights[min_changes_count][0], flights[min_changes_"
    },
    {
        "number": 3341,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    producers = []\n    consumers = []\n    for _ in range(m):\n        p, d = map(int, stdin.split())\n        producers.append((p, d))\n    for _ in range(n):\n        q, e = map(int, stdin.split())\n        consumers.append((q, e))\n\n    max_profit = 0\n    for i in range(m):\n        for j in range(n):\n            if i == j:\n                continue\n            start_date = producers[i][1]\n            end_date = consumers[j][0]\n            selling_price = producers[i][0]\n            buying_price = consumers[j][1]\n            profit = selling_price - buying_price\n            max_profit = max(max_profit, profit)\n\n    return str(max_profit)"
    },
    {
        "number": 3342,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    onions = []\n    for _ in range(N):\n        x, y = map(int, stdin.split())\n        onions.append((x, y))\n\n    fence_posts = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        fence_posts.append((a, b))\n\n    def convex_hull(points):\n        points.sort(key=lambda x: x[0])\n        n = len(points)\n        if n == 1:\n            return points[0]\n        else:\n            mid = n // 2\n            left = convex_hull(points[:mid])\n            right = convex_hull(points[mid:])\n            return (left[0] + right[0], left[1] + right[1])\n\n    convex_hull_points = [convex_hull(onions)]\n    for i in range(1, len(onions)):\n        convex_hull_points.append((convex_hull_points[-1][0] + onions[i][0], convex_hull_points[-1][1] + onions[i][1]))\n\n    def fence_post_intersection(a, b, c, d):\n        return (a[0] * (d[1] - c[1]) - a[1] * (d[0] - c[0])) * (b[0] - a[0]) - (a[1] * (d[0] - c[0]) - a[0] * (d[1] - c[1])) * (b[1] - a[1])\n\n    for i in range(len(onions)):\n        for j in range(i + 1, len(onions)):\n            for k in range(j + 1, len(onions)):\n                if fence_post_intersection(onions[i], onions[j], onions[k], onions[i]) <= 0:\n                    convex_hull_points.append((onions[i][0], onions[i][1]))\n                    convex_hull_points.append((onions[j][0], onions[j][1]))\n                    convex_hull_points.append((onions[k][0], onions[k][1]))\n\n    convex_hull_points.sort(key=lambda x: x[0])\n    max_onions = 0\n    for i in range(len(convex_hull_points) - 1):\n        if convex_hull_points[i][1] == convex_hull_points[i + 1][1]:\n            max_onions += 1\n\n    return str(max_onions)\n"
    },
    {
        "number": 3343,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, n = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        point, direction = map(int, stdin.split())\n        points.append((point, direction))\n\n    def bend_wire(wire, points):\n        for i in range(len(points)):\n            point, direction = points[i]\n            if direction == 'C':\n                wire.rotate(90)\n            else:\n                wire.rotate(-90)\n            wire.move(point)\n\n    def check_touch(wire):\n        return wire.intersects(wire)\n\n    bend_wire(wire, points)\n    if check_touch(wire):\n        return 'GHOST'\n    else:\n        return 'SAFE'"
    },
    {
        "number": 3344,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    positions = list(map(float, stdin.split()))\n\n    max_speed = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if positions[i] < positions[j]:\n                max_speed = max(max_speed, positions[i] - positions[j])\n\n    return str(max_speed)\n"
    },
    {
        "number": 3345,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    shadow_walk = list(map(int, stdin.split()))\n    lydia_walk = list(map(int, stdin.split()))\n\n    # Calculate the minimum distance between the two dogs\n    min_distance = float('inf')\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            distance = abs(shadow_walk[i][0] - lydia_walk[j][0]) + abs(shadow_walk[i][1] - lydia_walk[j][1])\n            if distance < min_distance:\n                min_distance = distance\n\n    return str(min_distance)\n"
    },
    {
        "number": 3346,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, n = map(int, stdin.split())\n    cars = []\n    for _ in range(n):\n        d, a, r = map(str, stdin.split())\n        cars.append((d, a, r))\n\n    def get_irritation_time(car):\n        return car[1] + car[2]\n\n    def get_time_to_go(car):\n        return car[1] + car[2] + 3\n\n    def get_time_to_pass(car):\n        return car[1] + car[2] + 10\n\n    def get_time_to_wait(car):\n        return car[1] + car[2] + 4\n\n    def get_time_to_go_and_pass(car):\n        return get_time_to_go(car) + get_time_to_pass(car)\n\n    def get_time_to_wait_and_go(car):\n        return get_time_to_wait(car) + get_time_to_go(car)\n\n    def get_time_to_go_and_wait(car):\n        return get_time_to_go(car) + get_time_to_wait(car)\n\n    def get_time_to_pass_and_wait(car):\n        return get_time_to_pass(car) + get_time_to_wait(car)\n\n    def get_time_to_go_and_pass_and_wait(car):\n        return get_time_to_go_and_pass(car) + get_time_to_wait(car)\n\n    def get_time_to_go_and_pass_and_wait_and_go(car):\n        return get_time_to_go_and_pass_and_wait(car) + get_time_to_go_and_wait(car)\n\n    def get_time_to_go_and_pass_and_wait_and_go_and_pass(car):\n        return get_time_to_go_and_pass_and_wait_and_go(car) + get_time_to_go_and_pass(car)\n\n    def get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait(car):\n        return get_time_to_go_and_pass_and_wait_and_go_and_pass(car) + get_time_to_wait(car)\n\n    def get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go(car):\n        return get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait(car) + get_time_to_go_and_wait(car)\n\n    def get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go_and_pass(car):\n        return get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go(car) + get_time_to_go_and_pass(car)\n\n    def get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go_and_pass_and_wait(car):\n        return get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go_and_pass(car) + get_time_to_wait(car)\n\n    def get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go(car):\n        return get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go_and_pass_and_wait(car) + get_time_to_go_and_wait(car)\n\n    def get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go_and_pass(car):\n        return get_time_to_go_and_pass_and_wait_and_go_and_pass_and_wait_and_go_and_pass_and_wait_and"
    },
    {
        "number": 3347,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    stores = []\n    for i in range(n):\n        t_i, h_i = map(int, stdin.split())\n        stores.append((t_i, h_i))\n\n    stores.sort(key=lambda x: x[0])\n\n    max_gold_stores = 0\n    current_store = 0\n    for t_store, h_store in stores:\n        if h_store > 0:\n            max_gold_stores = max(max_gold_stores, current_store)\n            current_store += 1\n\n    return str(max_gold_stores)\n"
    },
    {
        "number": 3348,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    if R % 2 == 0 or C % 2 == 0:\n        return \"impossible\"\n\n    # Initialize a list of lists to store the bonbons\n    bonbons = [[0] * C for _ in range(R)]\n\n    # Count the number of bonbons of each flavour\n    for i in range(R):\n        for j in range(C):\n            if i == 0 or j == 0 or i == R - 1 or j == C - 1:\n                bonbons[i][j] += 1\n            else:\n                flavour = input().strip()\n                if flavour == \"Nutella Buttercream\":\n                    bonbons[i][j] += 1\n                elif flavour == \"Red Wine Chocolate Ganache\":\n                    bonbons[i][j] += 1\n                elif flavour == \"Strawberry Whipped Cream\":\n                    bonbons[i][j] += 1\n\n    # Find the arrangement with the minimum number of A bonbons\n    min_A = float('inf')\n    for i in range(R):\n        for j in range(C):\n            if bonbons[i][j] == 0:\n                continue\n            if bonbons[i][j] < min_A:\n                min_A = bonbons[i][j]\n                arrangement = [\"\"] * C\n                arrangement[j] = \"A\"\n\n    # Print the arrangement\n    for i in range(R):\n        print(\"\".join(arrangement))\n\n    return \"impossible\""
    },
    {
        "number": 3349,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dictionary = set(stdin.strip().split())\n    message = stdin.strip().replace(\" \", \"\").replace(\",\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\":\", \"\")\n    vowels = set(\"AEIOUaeiou\")\n\n    def is_valid(word):\n        return all(c in vowels for c in word)\n\n    def is_valid_message(sentence):\n        return all(is_valid(word) for word in sentence.split())\n\n    def is_valid_dictionary(word):\n        return word in dictionary\n\n    def is_valid_sentence(sentence):\n        return is_valid_message(sentence) and is_valid_dictionary(sentence)\n\n    def is_valid_solution(sentence):\n        return is_valid_sentence(sentence) and not any(is_valid(word) for word in sentence.split())\n\n    def count_vowels(sentence):\n        return sum(1 for c in sentence if c in vowels)\n\n    def max_vowels(sentence):\n        return max(count_vowels(sentence), key=count_vowels)\n\n    def find_solution(sentence):\n        if is_valid_solution(sentence):\n            return sentence\n        else:\n            return find_solution(max_vowels(sentence))\n\n    return \" \".join(find_solution(message))\n"
    },
    {
        "number": 3350,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    power = 0\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] == word[i + 1]:\n            power += 4\n        else:\n            break\n    return str(power)"
    },
    {
        "number": 3351,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dice_rolls = list(map(int, stdin.strip().split()))\n\n    max_score = 0\n    for i in range(n):\n        score = 0\n        for j in range(i + 1, n + 1):\n            if j - i == 1:\n                score += dice_rolls[j - 1]\n            elif j - i == 2:\n                score += dice_rolls[j - 1] + dice_rolls[j - 2]\n            elif j - i == 3:\n                score += dice_rolls[j - 1] + dice_rolls[j - 2] + dice_rolls[j - 3]\n            elif j - i == 4:\n                score += dice_rolls[j - 1] + dice_rolls[j - 2] + dice_rolls[j - 3] + dice_rolls[j - 4]\n            elif j - i == 5:\n                score += dice_rolls[j - 1] + dice_rolls[j - 2] + dice_rolls[j - 3] + dice_rolls[j - 4] + dice_rolls[j - 5]\n            else:\n                raise ValueError(\"Invalid dice rolls\")\n        max_score = max(max_score, score)\n\n    return str(max_score)\n"
    },
    {
        "number": 3352,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    parent = [0] * N\n    for i in range(1, N):\n        parent[i] = i - 1\n\n    def dfs(node, parent):\n        count = 0\n        for i in range(node, N):\n            if i!= parent[i]:\n                count += 1\n                parent[i] = dfs(parent[i], node)\n        return count\n\n    for _ in range(Q):\n        K, X = map(int, stdin.split())\n        if K == 0:\n            print(dfs(X, 0))\n        else:\n            parent[X] = X\n            for i in range(X, N):\n                if i!= parent[i]:\n                    parent[i] = X\n                    break\n\n    return \"\""
    },
    {
        "number": 3353,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, R, L = map(int, stdin.split())\n    logs = []\n    for _ in range(L):\n        E_1, E_2 = map(int, stdin.split())\n        logs.append((E_1, E_2))\n\n    def cross_river(logs, P):\n        left_bank = -2\n        right_bank = R - 1\n        for i in range(P):\n            if left_bank == -2:\n                left_bank = E_1\n            if right_bank == R - 1:\n                right_bank = E_2\n            if left_bank == E_1 and right_bank == E_2:\n                return True\n            left_bank = min(left_bank, E_1)\n            right_bank = max(right_bank, E_2)\n        return False\n\n    def cross_river_safe(logs, P):\n        for i in range(P):\n            if cross_river(logs, i):\n                return True\n        return False\n\n    if cross_river_safe(logs, P):\n        return \"Yes\"\n    else:\n        n = P - cross_river_safe(logs, P)\n        return str(n)"
    },
    {
        "number": 3354,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, r, n, z = map(float, stdin.split())\n    area = s * s * 3.141592653589793\n    max_pickles = int(area * (1 - z / 100))\n    return str(max_pickles)"
    },
    {
        "number": 3355,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    tasks = []\n    for _ in range(n):\n        p, t, d = map(int, stdin.split())\n        if d == -1:\n            tasks.append((p, t))\n        else:\n            tasks.append((p, t, d))\n\n    def is_valid(i, j):\n        if i == j:\n            return False\n        for t in tasks:\n            if t[0] == i and t[1] == j:\n                return False\n        return True\n\n    def max_points(i, j):\n        if i == j:\n            return 0\n        if not is_valid(i, j):\n            return 0\n        if i == 1 and j == n:\n            return 1\n        if i == n and j == 1:\n            return 1\n        if i == 1 and j == n-1:\n            return 1\n        if i == n-1 and j == 1:\n            return 1\n        if i == 1 and j == n-2:\n            return 1\n        if i == n-1 and j == 2:\n            return 1\n        if i == 2 and j == n:\n            return 1\n        if i == n-2 and j == 1:\n            return 1\n        if i == 2 and j == n-1:\n            return 1\n        if i == n-2 and j == 2:\n            return 1\n        if i == 3 and j == n:\n            return 1\n        if i == n-3 and j == 1:\n            return 1\n        if i == 3 and j == n-1:\n            return 1\n        if i == n-3 and j == 2:\n            return 1\n        if i == 4 and j == n:\n            return 1\n        if i == n-4 and j == 1:\n            return 1\n        if i == 4 and j == n-1:\n            return 1\n        if i == n-4 and j == 2:\n            return 1\n        if i == 5 and j == n:\n            return 1\n        if i == n-5 and j == 1:\n            return 1\n        if i == 5 and j == n-1:\n            return 1\n        if i == n-5 and j == 2:\n            return 1\n        if i == 6 and j == n:\n            return 1\n        if i == n-6 and j == 1:\n            return 1\n        if i == 6 and j == n-1:\n            return 1\n        if i == n-6 and j == 2:\n            return 1\n        if i == 7 and j == n:\n            return 1\n        if i == n-7 and j == 1:\n            return 1\n        if i == 7 and j == n-1:\n            return 1\n        if i == n-7 and j == 2:\n            return 1\n        if i == 8 and j == n:\n            return 1\n        if i == n-8 and j == 1:\n            return 1\n        if i == 8 and j == n-1:\n            return 1\n        if i == n-8 and j == 2:\n            return 1\n        if i == 9 and j == n:\n            return 1\n        if i == n-9 and j == 1:\n            return 1\n        if i == 9 and j == n-1:\n            return 1\n        if i == n-9 and j == 2:\n            return 1\n        if i == 10 and j == n:\n            return 1\n        if i == n-10 and j == 1:\n            return 1\n        if i == 10 and j == n-1:\n            return 1\n        if i == n-10 and j == 2:\n            return 1\n        if i == 11 and j == n:\n            return 1\n        if i == n-11 and j == 1:\n            return 1\n        if i == 11 and j == n-1:\n            return 1\n        if i == n-11 and j == 2:\n            return 1\n        if i == 12 and j == n:\n            return 1\n        if i == n-12 and j == 1:\n            return 1\n        if i == 12 and j == n-1:\n            return 1\n        if i == n-12 and j == 2:\n            return 1\n        if i == 13 and j == n:\n            return 1\n        if i == n-13 and j == 1:\n            return 1\n        "
    },
    {
        "number": 3356,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    rooms = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.strip().split())\n        rooms.append((a, b))\n\n    def distance(a, b):\n        return abs(a - b)\n\n    def farthest(rooms):\n        max_distance = float('-inf')\n        max_room = None\n        for room in rooms:\n            distance_to_room = distance(room[0], room[1])\n            if distance_to_room > max_distance:\n                max_distance = distance_to_room\n                max_room = room\n        return max_room\n\n    def reconstruct(rooms):\n        farthest_room = farthest(rooms)\n        farthest_room_distance = distance(farthest_room[0], farthest_room[1])\n\n        tunnels = []\n        for room in rooms:\n            if room == farthest_room:\n                continue\n            tunnels.append((room[0], room[1]))\n\n        if len(tunnels) == 1:\n            return farthest_room_distance, tunnels[0]\n\n        min_distance = float('inf')\n        min_tunnel = None\n        for tunnel in tunnels:\n            tunnel_distance = distance(tunnel[0], tunnel[1])\n            if tunnel_distance < min_distance:\n                min_distance = tunnel_distance\n                min_tunnel = tunnel\n\n        return min_distance, min_tunnel\n\n    farthest_room = farthest(rooms)\n    farthest_room_distance, tunnel = reconstruct(rooms)\n\n    return farthest_room_distance, tunnel[0], tunnel[1]\n"
    },
    {
        "number": 3357,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    result = []\n\n    for _ in range(N):\n        X, H = map(int, stdin.strip().split())\n        result.append(calculate_hours(X, H))\n\n    return '\\n'.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 3358,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    instructions = []\n\n    for i in range(N):\n        instruction = input()\n        instructions.append(instruction)\n\n    return instructions"
    },
    {
        "number": 3359,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R, C = map(int, stdin.split())\n    blur_box = [[0] * C for _ in range(R)]\n    for _ in range(R):\n        line = stdin.readline().strip()\n        for i, c in enumerate(line):\n            blur_box[i][C - 1] = int(c, 16)\n\n    count = 0\n    for i in range(R):\n        for j in range(C):\n            if blur_box[i][j] == 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 3360,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rules = []\n    for _ in range(n):\n        rule = stdin.readline().strip()\n        rules.append(rule)\n\n    def generate_string(start: str) -> str:\n        stack = [(start, 0)]\n        result = []\n        while stack:\n            var, depth = stack.pop()\n            if depth == len(var):\n                result.append(var)\n            else:\n                for i in range(depth, len(var)):\n                    stack.append((var[:i] + var[i + 1:], depth + 1))\n        return ''.join(result)\n\n    def find_longest_substring(text: str, rules: List[str]) -> str:\n        max_length = 0\n        max_substring = ''\n        for rule in rules:\n            start = rule[0]\n            end = rule[-1]\n            substring = text[start:end + 1]\n            if substring in max_substring:\n                max_substring = substring\n            else:\n                max_substring = substring\n                max_length = end - start + 1\n        return max_substring\n\n    def find_earliest_substring(text: str, rules: List[str]) -> str:\n        earliest_substring = ''\n        earliest_length = float('inf')\n        for rule in rules:\n            start = rule[0]\n            end = rule[-1]\n            substring = text[start:end + 1]\n            if substring < earliest_substring:\n                earliest_substring = substring\n                earliest_length = end - start + 1\n        return earliest_substring\n\n    def find_matching_substring(text: str, rules: List[str]) -> str:\n        for rule in rules:\n            start = rule[0]\n            end = rule[-1]\n            substring = text[start:end + 1]\n            if substring in text:\n                return substring\n        return 'NONE'\n\n    text = stdin.readline().strip()\n    rules = [rule.strip() for rule in rules]\n    longest_substring = find_longest_substring(text, rules)\n    earliest_substring = find_earliest_substring(text, rules)\n    matching_substring = find_matching_substring(text, rules)\n\n    print(longest_substring)\n    print(matching_substring)\n    print(earliest_substring)\n"
    },
    {
        "number": 3361,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    distances = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate the distances\n    distances = [(i, j, distances[i] + distances[j]) for i in range(n) for j in range(i + 1, n)]\n\n    # Sort the distances\n    distances.sort(key=lambda x: x[2])\n\n    # Initialize the minimum sum of disparities\n    min_sum = float('inf')\n\n    # Iterate through the sorted distances\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            # Calculate the sum of disparities\n            sum_disparity = distances[i][2] + distances[j][2]\n\n            # Update the minimum sum of disparities\n            if sum_disparity < min_sum:\n                min_sum = sum_disparity\n\n    return str(min_sum)\n"
    },
    {
        "number": 3362,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, F = map(int, stdin.split())\n    L, W = map(int, stdin.split())\n\n    def is_safe(x, y):\n        return x >= 0 and x < L and y >= 0 and y < W and stdin[x][y]!= 'B'\n\n    def is_lava(x, y):\n        return stdin[x][y] == 'B'\n\n    def get_distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def get_step_length(x, y):\n        return get_distance(x, y, x, y + 1)\n\n    def get_father_step_length(x, y):\n        return get_distance(x, y, x + 1, y)\n\n    def get_father_distance(x, y):\n        return get_distance(x, y, x + 1, y)\n\n    def get_father_step_length_up_to(x, y, length):\n        return get_distance(x, y, x + 1, y + length)\n\n    def get_father_distance_up_to(x, y, length):\n        return get_distance(x, y, x + 1, y + length)\n\n    def get_father_step_length_down_to(x, y, length):\n        return get_distance(x, y, x + 1, y - length)\n\n    def get_father_distance_down_to(x, y, length):\n        return get_distance(x, y, x + 1, y - length)\n\n    def get_father_step_length_right_to(x, y, length):\n        return get_distance(x, y, x + length, y)\n\n    def get_father_distance_right_to(x, y, length):\n        return get_distance(x, y, x + length, y)\n\n    def get_father_step_length_left_to(x, y, length):\n        return get_distance(x, y, x - length, y)\n\n    def get_father_distance_left_to(x, y, length):\n        return get_distance(x, y, x - length, y)\n\n    def get_father_step_length_up_to_right(x, y, length):\n        return get_distance(x, y, x + length, y + length)\n\n    def get_father_distance_up_to_right(x, y, length):\n        return get_distance(x, y, x + length, y + length)\n\n    def get_father_step_length_up_to_left(x, y, length):\n        return get_distance(x, y, x + length, y - length)\n\n    def get_father_distance_up_to_left(x, y, length):\n        return get_distance(x, y, x + length, y - length)\n\n    def get_father_step_length_up_to_down(x, y, length):\n        return get_distance(x, y, x + length, y - length)\n\n    def get_father_distance_up_to_down(x, y, length):\n        return get_distance(x, y, x + length, y - length)\n\n    def get_father_step_length_right_to_down(x, y, length):\n        return get_distance(x, y, x - length, y - length)\n\n    def get_father_distance_right_to_down(x, y, length):\n        return get_distance(x, y, x - length, y - length)\n\n    def get_father_step_length_right_to_up(x, y, length):\n        return get_distance(x, y, x - length, y + length)\n\n    def get_father_distance_right_to_up(x, y, length):\n        return get_distance(x, y, x - length, y + length)\n\n    def get_father_step_length_left_to_down(x, y, length):\n        return get_distance(x, y, x + length, y - length)\n\n    def get_father_distance_left_to_down(x, y, length):\n        return get_distance(x, y, x + length, y - length)\n\n    def get_father_step_length_left_to_up(x, y, length):\n        return get_distance(x, y, x + length, y + length)\n\n    def get_father_distance_left"
    },
    {
        "number": 3363,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    courses = [int(input()) for _ in range(n)]\n    max_calories = 0\n    for i in range(n):\n        max_calories += courses[i]\n    return str(max_calories)"
    },
    {
        "number": 3364,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    sets = [set() for _ in range(N)]\n    for _ in range(Q):\n        op, a, b = stdin.split()\n        if op == \"?\":\n            if a in sets[b]:\n                print(\"yes\")\n            else:\n                print(\"no\")\n        elif op == \"=\":\n            sets[a].add(b)\n            sets[b].add(a)\n    return \" \".join(str(set1.intersection(set2)) for set1, set2 in zip(sets, sets[1:]))"
    },
    {
        "number": 3365,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n\n    # Find the largest prime number that divides every number in each region\n    max_score = 0\n    for i in range(k):\n        max_score = max(max_score, sum(1 for num in v[i*n:(i+1)*n] if num > 1 and num % num!= 0))\n\n    return str(max_score)"
    },
    {
        "number": 3366,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    iterations = 0\n    while L!= 1:\n        if L % 2 == 0:\n            L //= 2\n        else:\n            L += 1\n        iterations += 1\n    S = sum(f(i) for i in range(L, R+1))\n    return str(S % (10**9 + 7))"
    },
    {
        "number": 3367,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, n = map(int, stdin.split())\n    points = [0] * n\n    for _ in range(t):\n        q, a = map(str.strip, stdin.readline().split())\n        if q == 'Now!':\n            points[0] += 1\n        elif q == 'What':\n            points[1] += 1\n        else:\n            points[2] += 1\n    return str(sum(points))"
    },
    {
        "number": 3368,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    enclosures = []\n    for _ in range(n):\n        enclosure = input().split()\n        enclosures.append(enclosure)\n\n    for i in range(m):\n        animal_type, num_animals = input().split()\n        num_animals = int(num_animals)\n        animals = []\n        for _ in range(num_animals):\n            animal = input().split()\n            animals.append(animal)\n\n        enclosure = enclosures[animals[0][1] - 1]\n        if enclosure[animals[0][0]] == animal_type:\n            enclosure[animals[0][0]] = \"\"\n            for j in range(1, num_animals):\n                enclosure[animals[j][0]] = animals[j][1]\n\n    for enclosure in enclosures:\n        if enclosure[0]!= \"\":\n            return \"IMPOSSIBLE\"\n\n    return \"POSSIBLE\""
    },
    {
        "number": 3369,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin.strip())\n    sequence = list(map(int, stdin.strip().split()))\n    sequence.sort()\n    n = len(sequence)\n    m = len(sequence) - 1\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i] == sequence[i + 1]:\n            n = i\n            break\n\n    for i in range(n - 1):\n        if sequence[i] == sequence[i + 1]:\n            m = i\n            break\n\n    for i in range(m - 1):\n        if sequence[i]"
    },
    {
        "number": 3370,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, k = map(int, stdin.split())\n    houses = list(map(float, stdin.split()))\n\n    # Calculate the average height of the houses\n    avg_height = sum(houses) / len(houses)\n\n    # Initialize the heights of the houses\n    heights = [0] * N\n\n    # Iterate over the houses and update the heights\n    for i in range(1, N):\n        heights[i] = houses[i - 1] + houses[i + 1] / 2 + k\n\n    # Find the tallest house\n    tallest_height = max(heights)\n\n    # Print the final height\n    print(tallest_height)\n\n    return \"\""
    },
    {
        "number": 3371,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    participants = set()\n    for _ in range(c):\n        a, b, y = map(int, stdin.split())\n        participants.add((a, b))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) not in participants and (j, i) not in participants:\n                participants.add((i, j))\n    if len(participants) < 2 * n / 3:\n        return \"Impossible\"\n    years = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) not in participants and (j, i) not in participants:\n                years.add(max(years) + 1)\n    return str(min(years))"
    },
    {
        "number": 3372,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    flights = []\n    for _ in range(n):\n        flight = list(map(int, stdin.split()))\n        flights.append(flight)\n\n    def dfs(start, visited, path):\n        if start == t:\n            return True\n        if start in visited:\n            return False\n        visited.add(start)\n        for i, dest in enumerate(flights[start]):\n            if dest == -1:\n                continue\n            if dfs(dest, visited, path + [start]):\n                return True\n        return False\n\n    if not dfs(s, set(), []):\n        return \"impossible\"\n\n    return str(len(path))\n"
    },
    {
        "number": 3373,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    pieces = []\n    for _ in range(n):\n        pieces.append(stdin.strip())\n\n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    for m in range(l + 1, n):\n                        for n in range(m + 1, n):\n                            for o in range(n + 1, n):\n                                for p in range(o + 1, n):\n                                    for q in range(p + 1, n):\n                                        for r in range(q + 1, n):\n                                            for s in range(r + 1, n):\n                                                for t in range(s + 1, n):\n                                                    for u in range(t + 1, n):\n                                                        for v in range(u + 1, n):\n                                                            for w in range(v + 1, n):\n                                                                for x in range(w + 1, n):\n                                                                    for y in range(x + 1, n):\n                                                                        for z in range(y + 1, n):\n                                                                            for a in range(z + 1, n):\n                                                                                for b in range(a + 1, n):\n                                                                                    for c in range(b + 1, n):\n                                                                                        for d in range(c + 1, n):\n                                                                                            for e in range(d + 1, n):\n                                                                                                for f in range(e + 1, n):\n                                                                                                    for g in range(f + 1, n):\n                                                                                                        for h in range(g + 1, n):\n                                                                                                            for i in range(h + 1, n):\n                                                                                                                for j in range(i + 1, n):\n                                                                                                                    for k in range(j + 1, n):\n                                                                                                                        for l in range(k + 1, n):\n                                                                                                                            for m in range(l + 1, n):\n                                                                                                                                for n in range(m + 1, n):\n                                                                                                                                    for o in range(n + 1, n):\n                                                                                                                                        for p in range(o + 1, n):\n                                                                                                                                            for q in range(p + 1, n):\n                                                                                                                                                for r in range(q + 1, n):\n                                                                                                                                                    for s in range(r + 1, n):\n                                                                                                                                                        for t in range(s + 1, n):\n                                                                                                                                                            for u in range(t + 1, n):\n                                                                                                                                                                for v in range(u + 1, n):\n                                                                                                                                    for w in range(v + 1, n):\n                                                                                                                                        for x in range(w + 1, n):\n                                                                                                                                            for y in range(x + 1, n):\n                                                                                                                                                for z in range(y + 1, n):\n                                                                                                                                                    for a in range(z + 1, n):\n                                                                                                                                                        for b in range(a + 1, n):\n                                                                                                                                                            for c in range(b + 1, n):\n                                                                                                                                                                for d in range(c + 1, n):\n                                                                                                                                                                    for e in range(d + 1, n):\n                                                                                                                                                                        for f in range(e + 1, n):\n                                                                                                                                            for g in range(f + 1, n):\n                                                                                                                                                for h in range(g + 1, n):\n                                                                                                                                                    for i in range(h + 1, n):\n                                                                                                                                                        for j in range(i + 1, n):\n                                                                                                                                                            for k in range(j + 1, n):\n                                                                                                                                                                for l in range(k + 1, n):\n                                                                                                                                                                    for m in range(l + 1, n):\n                                                                                                                                                                        for n in range(m + 1, n):\n                                                                                                                                                                            for o in range(n + 1, n):\n                                                                                                                                                                                for p in range(o + 1, n):\n                                                                                                                                                                                    for q in range(p + 1, n):\n                                                                                                                                                                                        for r in range(q + 1, n):\n                                                                                                                                                                                            for s in range(r + 1, n):\n                                                                                                                                                                                                for t in range(s + 1, n):\n                                                                                                                                                                                            for u in range(t + 1, n):\n                                                                                                                                                                                                for v in range(u + 1, n):\n                                                                                                                                                                    for w in range(v + 1, n):\n                                                                                                                                                                        for x in range(w + 1, n):\n                                                                                                                                                                            for y in range(x + 1, n):\n                                                                                                                                                                                for"
    },
    {
        "number": 3374,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    alien_systems = []\n    human_systems = []\n    for _ in range(n):\n        gravity, system = map(int, stdin.split())\n        if system == 'h':\n            human_systems.append(gravity)\n        else:\n            alien_systems.append(gravity)\n\n    def calculate_uw_distance(gravity1, gravity2):\n        cap1, cap2 = gravity1, gravity2\n        pot1, pot2 = gravity1, gravity2\n        ind1, ind2 = gravity1, gravity2\n        cap_pot_ind = cap1 * cap2 - ind1 * ind2\n        uw_distance = abs(cap_pot_ind)\n        return uw_distance\n\n    uw_distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            uw_distances.append(calculate_uw_distance(alien_systems[i], alien_systems[j]))\n\n    min_uw_distance = min(uw_distances)\n    return str(min_uw_distance)\n"
    },
    {
        "number": 3375,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, E = map(int, stdin.split())\n    edges = []\n    for _ in range(E):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n\n    def dfs(u, visited):\n        visited[u] = True\n        for v in edges[u]:\n            if not visited[v]:\n                dfs(v, visited)\n\n    visited = [False] * V\n    for u in range(V):\n        if not visited[u]:\n            dfs(u, visited)\n\n    count = 0\n    for u in range(V):\n        if not visited[u]:\n            count += 1\n\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 3376,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    families = []\n    for _ in range(f):\n        s, c, strongest, *rest = stdin.split()\n        s = [int(x) for x in s.split()]\n        c = [int(x) for x in c.split()]\n        strongest = int(strongest)\n        families.append((s, c, strongest, rest))\n\n    def evolves(family):\n        for i in range(len(family)):\n            for j in range(i + 1, len(family)):\n                if family[i][0] > family[j][0]:\n                    return True\n        return False\n\n    def max_xp(family, time):\n        xp = 0\n        for i in range(len(family)):\n            for j in range(i + 1, len(family)):\n                if family[i][0] > family[j][0]:\n                    xp += (family[i][1] + family[j][1]) * (family[i][0] - family[j][0])\n        return xp\n\n    def max_xp_with_evolution(family, time):\n        xp = 0\n        for i in range(len(family)):\n            for j in range(i + 1, len(family)):\n                if family[i][0] > family[j][0]:\n                    xp += (family[i][1] + family[j][1]) * (family[i][0] - family[j][0])\n                    if evolves(family):\n                        xp += max_xp_with_evolution(family, time)\n        return xp\n\n    def max_xp_with_evolution_and_catch(family, time):\n        xp = 0\n        for i in range(len(family)):\n            for j in range(i + 1, len(family)):\n                if family[i][0] > family[j][0]:\n                    xp += (family[i][1] + family[j][1]) * (family[i][0] - family[j][0])\n                    if evolves(family):\n                        xp += max_xp_with_evolution_and_catch(family, time)\n        for i in range(n):\n            if families[0][2] == families[i][2]:\n                xp += families[0][1][i] * families[0][0][i]\n        return xp\n\n    max_xp_with_evolution_and_catch_time = max_xp_with_evolution_and_catch(families[0], 0)\n    return str(max_xp_with_evolution_and_catch_time)\n"
    },
    {
        "number": 3377,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    pegs = [list(map(int, stdin.split())) for _ in range(n)]\n    safe_dry_plan = [0] * t\n    safe_wet_plan = [0] * t\n\n    for i in range(t):\n        action = stdin.split()[i]\n        if action == '+':\n            safe_dry_plan[i] += 1\n            safe_wet_plan[i] += 1\n        elif action == '-':\n            safe_dry_plan[i] -= 1\n            safe_wet_plan[i] -= 1\n\n    for i in range(t):\n        if safe_dry_plan[i] > 10:\n            return \"-1\"\n        if safe_wet_plan[i] > 10:\n            return \"-1\"\n\n    return str(t) + \"\\n\" + \"\\n\".join(map(str, safe_dry_plan)) + \"\\n\" + str(t) + \"\\n\" + \"\\n\".join(map(str, safe_wet_plan))"
    },
    {
        "number": 3378,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = int(stdin.strip())\n\n    def is_valid(i, j):\n        return 0 <= i < n and 0 <= j < n and a[i]!= a[j]\n\n    def is_valid_ticket(i, j, t):\n        if t == 'O':\n            return 0 <= i < n and 0 <= j < n and a[i]!= a[j]\n        elif t == 'R':\n            return 0 <= i < n and 0 <= j < n and a[i] == a[j]\n        else:\n            raise ValueError(\"Invalid ticket type\")\n\n    def is_valid_airfare(i, j, s, d, t, p):\n        return is_valid(s, d) and is_valid(i, j) and is_valid_ticket(i, j, t) and p > 0\n\n    def is_valid_airfares(airfares):\n        for i in range(m):\n            for j in range(i + 1, m):\n                s, d, t, p = map(int, stdin.split())\n                if not is_valid_airfare(i, j, s, d, t, p):\n                    return False\n        return True\n\n    if not is_valid_airfares():\n        return \"Invalid airfares\"\n\n    def min_cost(airfares):\n        if not airfares:\n            return 0\n        return min(min_cost(airfares[1:]) + a[airfares[0]] * a[airfares[1]] for airfare in airfares)\n\n    return str(min_cost(a))\n"
    },
    {
        "number": 3379,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        G[x-1].append(y-1)\n        G[y-1].append(x-1)\n    L = []\n    S = set(range(n))\n    while S:\n        alpha = S.pop()\n        L.append(alpha)\n        for u in range(n):\n            if u!= alpha and not G[u]:\n                S.add(u)\n    return str(len(L))"
    },
    {
        "number": 3380,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 2:\n        return \"0.0\"\n\n    # Generate a list of all possible pairs of cities\n    pairs = set()\n    for i in range(N):\n        for j in range(i + 1, N):\n            pairs.add((i, j))\n\n    # Calculate the probability of connecting the road network\n    num_pairs = len(pairs)\n    num_roads = 2 * N - 1\n    prob = (num_pairs - num_roads) / num_pairs\n\n    return str(prob)"
    },
    {
        "number": 3381,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    result = []\n\n    for i in range(N):\n        x = int(input())\n        y = int(input())\n        if 0 <= x <= 400000 and 0 <= y <= 400000:\n            result.append(f\"{x} {y}\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 3382,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    base_values = list(map(int, stdin.split()))\n    if len(base_values)!= 4:\n        return \"impossible\"\n\n    grade = 1\n    for i in range(3):\n        for j in range(i + 1, 4):\n            if base_values[i] * base_values[j] == 24:\n                grade = 0\n                break\n\n    return str(grade)"
    },
    {
        "number": 3383,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    u = list(map(int, stdin.split()))\n\n    if n > 2 * 10**9 or k > 100:\n        return \"0\"\n\n    t_sum = sum(t)\n    t_diff = t_sum - sum(t)\n\n    if t_diff == 0:\n        return \"0\"\n\n    t_ratio = t_sum / t_diff\n\n    t_max = 0\n    t_min = 10**9\n\n    for i in range(k):\n        t_max = max(t_max, t[i] + u[i, i])\n        t_min = min(t_min, t[i] - u[i, i])\n\n    if t_max == 0:\n        return \"0\"\n\n    t_max_ratio = t_max / t_sum\n\n    return str(round(t_max_ratio / (a + b), 6))\n"
    },
    {
        "number": 3384,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    closest_handsome = None\n    for i in range(10):\n        if i % 2 == 0:\n            for j in range(i + 1, 10):\n                if j % 2 == 1 and (j - i) % 2 == 0:\n                    if closest_handsome is None or abs(j - i) < abs(closest_handsome - i):\n                        closest_handsome = j\n    if closest_handsome is None:\n        return \"No handsome number found\"\n    else:\n        return str(closest_handsome) + \" \" + str(closest_handsome + 1)"
    },
    {
        "number": 3385,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    costumes = [0] * n\n    for i in range(n):\n        l, r, x = map(int, stdin.readline().split())\n        costumes[i] = x\n\n    def is_wearing_orange_pumpkin(i):\n        return costumes[i] % 2 == 0\n\n    def is_wearing_black_bat(i):\n        return costumes[i] % 2!= 0\n\n    def count_wearing_pairs(i):\n        count = 0\n        for j in range(i + 1, n):\n            if is_wearing_orange_pumpkin(i) == is_wearing_orange_pumpkin(j) and is_wearing_black_bat(i) == is_wearing_black_bat(j):\n                count += 1\n        return count\n\n    count = 0\n    for i in range(n):\n        count += count_wearing_pairs(i)\n\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 3386,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    visited = [[False] * M for _ in range(N)]\n    tour = []\n    for i in range(N):\n        for j in range(M):\n            if not visited[i][j]:\n                tour.append((i, j))\n                dfs(i, j, visited, tour)\n    if len(tour) < 2:\n        return \"-1\"\n    result = []\n    for i in range(N):\n        for j in range(M):\n            result.append(f\"{i} {j}\")\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 3387,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n\n    # Calculate the maximum bandwidth for each species\n    max_bandwidth = [0] * n\n    for i in range(n):\n        max_bandwidth[i] = max(max_bandwidth[i], a[i] + b[i])\n\n    # Calculate the sum of squares of the bandwidth for each species\n    sum_of_squares = [0] * n\n    for i in range(n):\n        sum_of_squares[i] = sum(map(lambda x: (x - max_bandwidth[i]) ** 2 / max_bandwidth[i], d))\n\n    # Calculate the optimal bandwidth allocation\n    optimal_bandwidth = [0] * n\n    for i in range(n):\n        optimal_bandwidth[i] = t * sum_of_squares[i] / sum(d)\n\n    # Calculate the relative error to the optimal solution\n    relative_error = abs(optimal_bandwidth[0] - sum(optimal_bandwidth)) / max(1, sum(optimal_bandwidth))\n\n    return str(optimal_bandwidth) + '\\n' + str(relative_error)"
    },
    {
        "number": 3388,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    max_points = max(p)\n    max_points_count = 0\n    for i in range(n):\n        if p[i] > max_points:\n            max_points = p[i]\n            max_points_count = 1\n        elif p[i] == max_points:\n            max_points_count += 1\n    return str(max_points_count)"
    },
    {
        "number": 3389,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    videos = set()\n    for _ in range(n):\n        videos.add(stdin.strip())\n\n    def is_valid_type(video):\n        return video[0] == video[1]\n\n    def get_next_video(video):\n        for i in range(len(videos)):\n            if videos[i] == video:\n                return i + 1\n        return 0\n\n    def get_min_clicks(video):\n        return get_next_video(video) - get_next_video(video - 1)\n\n    min_clicks = float('inf')\n    for video in videos:\n        if is_valid_type(video):\n            min_clicks = min(min_clicks, get_min_clicks(video))\n\n    return str(min_clicks)\n"
    },
    {
        "number": 3390,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dishes = list(range(1, n+1))\n    menu = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        menu.append((a, b))\n\n    def find_menu(menu):\n        visited = set()\n        result = []\n        for dish in menu:\n            if dish in visited:\n                continue\n            visited.add(dish)\n            result.append(dish)\n            for next_dish in menu:\n                if next_dish[0] == dish[1] and next_dish[1] not in visited:\n                    result.append(next_dish[1])\n                    visited.add(next_dish[1])\n        return result\n\n    max_courses = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                for l in range(k+1, n+1):\n                    menu = [i, j, k, l]\n                    courses = find_menu(menu)\n                    if len(courses) > max_courses:\n                        max_courses = len(courses)\n\n    return str(max_courses)"
    },
    {
        "number": 3391,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    addresses = list(map(int, stdin.split()))\n    zoning_requests = []\n\n    for _ in range(q):\n        a, b = map(int, stdin.split())\n        zoning_requests.append((a, b))\n\n    min_side = float('inf')\n    for a, b in zoning_requests:\n        for i in range(a, b + 1):\n            for j in range(i, n + 1):\n                if i == j:\n                    continue\n                if i == addresses[j - 1]:\n                    continue\n                if j == addresses[i - 1]:\n                    continue\n                if i == addresses[j - 1] - 1:\n                    continue\n                if j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1:\n                    continue\n                if j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue\n                if i == addresses[j - 1] - 1 and j == addresses[i - 1] - 1:\n                    continue\n                if i == addresses[j - 1] + 1 and j == addresses[i - 1] + 1:\n                    continue"
    },
    {
        "number": 3392,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trees = []\n    for _ in range(n):\n        row = list(map(int, stdin.readline().strip().split()))\n        trees.append(row)\n\n    max_height = max(max(row) for row in trees)\n    max_speed = max(max(trees[i][j] for j in range(n)) for i in range(n))\n\n    connected_groups = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if trees[i][j] == 0:\n                continue\n            for k in range(j + 1, n):\n                if trees[i][k] == 0:\n                    continue\n                if trees[i][j] == trees[k][j]:\n                    connected_groups.append((i, j))\n                    break\n\n    connected_groups.sort(key=lambda x: (x[0], x[1]))\n\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if trees[i][j] == 0:\n                continue\n            for k in range(j + 1, n):\n                if trees[i][k] == 0:\n                    continue\n                if trees[i][j] == trees[k][j]:\n                    result += 1\n                    break\n\n    return str(result)\n"
    },
    {
        "number": 3393,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    courses = []\n    for _ in range(n):\n        name, difficulty = stdin.strip().split()\n        courses.append((name, difficulty))\n\n    def is_level_i(course):\n        return course[1] == '1'\n\n    def is_level_ii(course):\n        return course[1] == '2'\n\n    def is_same_level(course1, course2):\n        return course1[1] == course2[1]\n\n    def get_level(course):\n        if is_level_i(course):\n            return 'I'\n        elif is_level_ii(course):\n            return 'II'\n        else:\n            return None\n\n    def get_course_name(course):\n        return course[0]\n\n    def get_course_difficulty(course):\n        return course[1]\n\n    def get_prerequisites(course):\n        return [course[0]]\n\n    def get_sum_difficulties(courses):\n        return sum(get_course_difficulty(course) for course in courses)\n\n    def get_course_sum(course):\n        return get_course_difficulty(course)\n\n    def get_course_prerequisites(course):\n        return get_prerequisites(course)\n\n    def get_course_sum_prerequisites(course):\n        return sum(get_course_difficulty(course) for course in get_prerequisites(course))\n\n    def get_course_sum_prerequisites_and_difficulties(course):\n        return get_course_sum_prerequisites(course) + get_course_difficulty(course)\n\n    def get_course_sum_prerequisites_and_difficulties_and_prerequisites(course):\n        return get_course_sum_prerequisites_and_difficulties(course) + sum(get_course_difficulty(course) for course in get_prerequisites(course))\n\n    def get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites(course):\n        return get_course_sum_prerequisites_and_difficulties_and_prerequisites(course) + sum(get_course_difficulty(course) for course in get_prerequisites(course))\n\n    def get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites(course):\n        return get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites(course) + sum(get_course_difficulty(course) for course in get_prerequisites(course))\n\n    def get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites(course):\n        return get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites(course) + sum(get_course_difficulty(course) for course in get_prerequisites(course))\n\n    def get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites(course):\n        return get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites(course) + sum(get_course_difficulty(course) for course in get_prerequisites(course))\n\n    def get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites(course):\n        return get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites(course) + sum(get_course_difficulty(course) for course in get_prerequisites(course))\n\n    def get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites(course):\n        return get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites(course) + sum(get_course_difficulty(course) for course in get_prerequisites(course))\n\n    def get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites(course):\n        return get_course_sum_prerequisites_and_difficulties_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites_and_prerequisites("
    },
    {
        "number": 3394,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        u, v, d = map(int, stdin.split())\n        roads.append((u, v, d))\n\n    k = int(stdin.strip())\n    orders = []\n    for _ in range(k):\n        s, u, t = map(int, stdin.split())\n        orders.append((s, u, t))\n\n    def min_time(u, v):\n        return min(roads[u][1], roads[v][1])\n\n    def max_time(u, v):\n        return max(roads[u][1], roads[v][1])\n\n    def min_time_to_deliver(u, v):\n        return min_time(u, v) + roads[u][2] + roads[v][2]\n\n    def max_time_to_deliver(u, v):\n        return max_time(u, v) + roads[u][2] + roads[v][2]\n\n    def min_time_to_pick_up(u, v):\n        return min_time(u, v) + roads[u][2] + roads[v][2]\n\n    def max_time_to_pick_up(u, v):\n        return max_time(u, v) + roads[u][2] + roads[v][2]\n\n    def min_time_to_deliver_and_pick_up(u, v):\n        return min_time_to_deliver(u, v) + min_time_to_pick_up(u, v)\n\n    def max_time_to_deliver_and_pick_up(u, v):\n        return max_time_to_deliver(u, v) + max_time_to_pick_up(u, v)\n\n    def min_time_to_deliver_and_pick_up_and_wait(u, v):\n        return min_time_to_deliver_and_pick_up(u, v) + min_time_to_wait(u, v)\n\n    def max_time_to_deliver_and_pick_up_and_wait(u, v):\n        return max_time_to_deliver_and_pick_up(u, v) + max_time_to_wait(u, v)\n\n    def min_time_to_wait(u, v):\n        return min(min_time_to_deliver(u, v), min_time_to_pick_up(u, v))\n\n    def max_time_to_wait(u, v):\n        return max(max_time_to_deliver(u, v), max_time_to_pick_up(u, v))\n\n    def min_time_to_wait_and_deliver(u, v):\n        return min_time_to_wait(u, v) + min_time_to_deliver(u, v)\n\n    def max_time_to_wait_and_deliver(u, v):\n        return max_time_to_wait(u, v) + max_time_to_deliver(u, v)\n\n    def min_time_to_wait_and_deliver_and_pick_up(u, v):\n        return min_time_to_wait_and_deliver(u, v) + min_time_to_pick_up(u, v)\n\n    def max_time_to_wait_and_deliver_and_pick_up(u, v):\n        return max_time_to_wait_and_deliver(u, v) + max_time_to_pick_up(u, v)\n\n    def min_time_to_wait_and_deliver_and_pick_up_and_wait(u, v):\n        return min_time_to_wait_and_deliver_and_pick_up(u, v) + min_time_to_wait(u, v)\n\n    def max_time_to_wait_and_deliver_and_pick_up_and_wait(u, v):\n        return max_time_to_wait_and_deliver_and_pick_up(u, v) + max_time_to_wait(u, v)\n\n    def min_time_to_wait_and_deliver_and_pick_up_and_wait_and_deliver(u, v):\n        return min_time_to_wait_and_deliver_and_pick_up_and_wait(u, v) + min_time_to_deliver(u"
    },
    {
        "number": 3395,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    ore_cells = set(map(int, stdin.split()))\n    coal_cells = set(map(int, stdin.split()))\n\n    # Check if there are at least two cells with iron ore and coal\n    if len(ore_cells) < 2 or len(coal_cells) < 2:\n        return \"impossible\"\n\n    # Find the cells with coal and iron ore\n    coal_cells = [cell for cell in coal_cells if cell in ore_cells]\n    iron_cells = [cell for cell in ore_cells if cell in coal_cells]\n\n    # Check if there are at least two cells with coal and iron ore\n    if len(coal_cells) < 2 or len(iron_cells) < 2:\n        return \"impossible\"\n\n    # Find the cells with coal and iron ore\n    coal_cells = [cell for cell in coal_cells if cell in ore_cells]\n    iron_cells = [cell for cell in ore_cells if cell in coal_cells]\n\n    # Check if there are at least two cells with coal and iron ore\n    if len(coal_cells) < 2 or len(iron_cells) < 2:\n        return \"impossible\"\n\n    # Find the cells with coal and iron ore\n    coal_cells = [cell for cell in coal_cells if cell in ore_cells]\n    iron_cells = [cell for cell in ore_cells if cell in coal_cells]\n\n    # Check if there are at least two cells with coal and iron ore\n    if len(coal_cells) < 2 or len(iron_cells) < 2:\n        return \"impossible\"\n\n    # Find the cells with coal and iron ore\n    coal_cells = [cell for cell in coal_cells if cell in ore_cells]\n    iron_cells = [cell for cell in ore_cells if cell in coal_cells]\n\n    # Check if there are at least two cells with coal and iron ore\n    if len(coal_cells) < 2 or len(iron_cells) < 2:\n        return \"impossible\"\n\n    # Find the cells with coal and iron ore\n    coal_cells = [cell for cell in coal_cells if cell in ore_cells]\n    iron_cells = [cell for cell in ore_cells if cell in coal_cells]\n\n    # Check if there are at least two cells with coal and iron ore\n    if len(coal_cells) < 2 or len(iron_cells) < 2:\n        return \"impossible\"\n\n    # Find the cells with coal and iron ore\n    coal_cells = [cell for cell in coal_cells if cell in ore_cells]\n    iron_cells = [cell for cell in ore_cells if cell in coal_cells]\n\n    # Check if there are at least two cells with coal and iron ore\n    if len(coal_cells) < 2 or len(iron_cells) < 2:\n        return \"impossible\"\n\n    # Find the cells with coal and iron ore\n    coal_cells = [cell for cell in coal_cells if cell in ore_cells]\n    iron_cells = [cell for cell in ore_cells if cell in coal_cells]\n\n    # Check if there are at least two cells with coal and iron ore\n    if len(coal_cells) < 2 or len(iron_cells) < 2:\n        return \"impossible\"\n\n    # Find the cells with coal and iron ore\n    coal_cells = [cell for cell in coal_cells if cell in ore_cells]\n    iron_cells = [cell for cell in ore_cells if cell in coal_cells]\n\n    # Check if there are at least two cells with coal and iron ore\n    if len(coal_cells) < 2 or len(iron_cells) < 2:\n        return \"impossible\"\n\n    # Find the cells with coal and iron ore\n    coal_cells = [cell for cell in coal_cells if cell in ore_cells]\n    iron_cells = [cell for cell in ore_cells if cell in coal_cells]\n\n    # Check if there are at least two cells with coal and iron ore\n    if len(co"
    },
    {
        "number": 3396,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ropes = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        ropes.append((x, y))\n\n    max_rope = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ropes[i][0] < ropes[j][0]:\n                max_rope = max(max_rope, ropes[i][0] - ropes[j][0])\n\n    return round(max_rope, 2)"
    },
    {
        "number": 3397,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    t = [int(x) for x in stdin.split()]\n    T = sum(t)\n\n    for i in range(N):\n        for j in range(M):\n            if t[j] - t[i] > 0:\n                T -= t[i]\n                break\n\n    return str(T)"
    },
    {
        "number": 3398,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_r, n_c = map(int, stdin.split())\n    n = n_r * n_c\n    m = n + m\n    files = set()\n    for _ in range(2 * n):\n        r, c = map(int, stdin.split())\n        files.add((r, c))\n    min_icons = float('inf')\n    for i in range(n):\n        for j in range(m):\n            if (i, j) not in files:\n                icons = set()\n                for k in range(n_r):\n                    for l in range(n_c):\n                        if (k, l) not in files and (k, l)!= (i, j):\n                            icons.add((k, l))\n                if len(icons) < min_icons:\n                    min_icons = len(icons)\n    return str(min_icons)"
    },
    {
        "number": 3399,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[0] * m for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = int(stdin[i * m + j])\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                for k in range(i - 1, -1, -1):\n                    if grid[k][j] == 1:\n                        grid[i][j] = 2\n                        break\n                for k in range(i + 1, n):\n                    if grid[k][j] == 1:\n                        grid[i][j] = 2\n                        break\n                for k in range(j - 1, -1, -1):\n                    if grid[i][k] == 1:\n                        grid[i][j] = 2\n                        break\n                for k in range(j + 1, m):\n                    if grid[i][k] == 1:\n                        grid[i][j] = 2\n                        break\n\n    if grid[0][0] == 1:\n        for i in range(1, n):\n            for j in range(1, m):\n                if grid[i][j] == 1:\n                    grid[i][j] = 2\n\n    if grid[n - 1][m - 1] == 1:\n        for i in range(n - 2, -1, -1):\n            for j in range(m - 2, -1, -1):\n                if grid[i][j] == 1:\n                    grid[i][j] = 2\n\n    if grid[0][0] == 2:\n        for i in range(1, n):\n            for j in range(1, m):\n                if grid[i][j] == 2:\n                    grid[i][j] = 1\n\n    if grid[n - 1][m - 1] == 2:\n        for i in range(n - 2, -1, -1):\n            for j in range(m - 2, -1, -1):\n                if grid[i][j] == 2:\n                    grid[i][j] = 1\n\n    result = \"\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                result += \"A\"\n            elif grid[i][j] == 2:\n                result += \"B\"\n            elif grid[i][j] == 3:\n                result += \"C\"\n            else:\n                result += \".\"\n\n    return result"
    },
    {
        "number": 3400,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, R, T = map(int, stdin.split())\n    trips = []\n    for _ in range(T):\n        trip = list(map(int, stdin.split()))\n        trips.append(trip)\n\n    def distance(a, b):\n        return abs(a - b)\n\n    def shortest_distance(trip):\n        start, end = trip\n        visited = set()\n        queue = [(start, 0)]\n        visited.add(start)\n        while queue:\n            current, distance = queue.pop(0)\n            if current == end:\n                return distance\n            for neighbor in range(1, N + 1):\n                if neighbor not in visited and (neighbor - current) % 2 == 0:\n                    queue.append((neighbor, distance + distance(current, neighbor)))\n                    visited.add(neighbor)\n\n    alice_distance = shortest_distance(trips[0])\n    rabbit_distance = shortest_distance(trips[1])\n\n    return alice_distance + rabbit_distance"
    },
    {
        "number": 3401,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t, q = map(int, stdin.split())\n    hills = list(map(int, stdin.split()))\n    springs = list(map(int, stdin.split()))\n    towns = list(map(int, stdin.split()))\n    i_j = list(map(int, stdin.split()))\n\n    def is_valid(x, y, h):\n        return 0 <= x <= n and 0 <= y <= n and h <= 10**6\n\n    def is_spring_valid(x, y, h):\n        return 0 <= x <= n and 0 <= y <= s and h <= 10**6\n\n    def is_town_valid(x, y, h):\n        return 0 <= x <= n and 0 <= y <= t and h <= 10**6\n\n    def is_aqueduct_valid(x1, y1, x2, y2, h1, h2):\n        return 0 <= x1 <= n and 0 <= y1 <= n and 0 <= x2 <= n and 0 <= y2 <= n and h1 <= 10**6 and h2 <= 10**6\n\n    def aqueduct_length(x1, y1, x2, y2, h1, h2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def min_aqueduct_length(x1, y1, x2, y2, h1, h2):\n        return min(aqueduct_length(x1, y1, x2, y2, h1, h2), aqueduct_length(x2, y2, x1, y1, h2, h1))\n\n    def min_aqueduct_length_helper(x1, y1, x2, y2, h1, h2, aqueducts):\n        if aqueducts == 0:\n            return min_aqueduct_length(x1, y1, x2, y2, h1, h2)\n        else:\n            return min(min_aqueduct_length_helper(x1, y1, x2, y2, h1, h2, aqueducts - 1), min_aqueduct_length_helper(x2, y2, x1, y1, h2, h1, aqueducts - 1))\n\n    def min_aqueduct_length_for_town(x, y, h):\n        return min_aqueduct_length_helper(x, y, n, n, h, h, s)\n\n    def min_aqueduct_length_for_spring(x, y, h):\n        return min_aqueduct_length_helper(x, y, s, s, h, h, t)\n\n    def min_aqueduct_length_for_hills(x, y, h):\n        return min_aqueduct_length_helper(x, y, n, n, h, h, n)\n\n    def min_aqueduct_length_for_towns(x, y, h):\n        return min_aqueduct_length_helper(x, y, n, n, h, h, n)\n\n    def min_aqueduct_length_for_springs(x, y, h):\n        return min_aqueduct_length_helper(x, y, s, s, h, h, t)\n\n    def min_aqueduct_length_for_hills_and_springs(x, y, h):\n        return min_aqueduct_length_helper(x, y, n, n, h, h, n)\n\n    def min_aqueduct_length_for_hills_and_towns(x, y, h):\n        return min_aqueduct_length_helper(x, y, n, n, h, h, n)\n\n    def min_aqueduct_length_for_hills_and_springs_and_towns(x, y, h):\n        return min_aqueduct_length_helper(x, y, n, n, h, h, n)\n\n    def min_aqueduct_length_for_hills_and_springs_and_towns_and_impossible(x, y, h):\n        return min_aqueduct_length_helper(x, y, n, n, h, h, n)\n\n    def min_aqueduct_length_for_hills_and_springs_and_"
    },
    {
        "number": 3402,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T_a = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_b = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_c = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_d = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_e = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_f = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_g = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_h = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_i = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_j = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_k = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_l = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_m = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_n = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_o = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_p = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_q = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_r = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_s = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_t = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_u = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_v = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_w = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_x = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_y = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n    T_z = [\"\".join(sorted(c)) for c in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\")]\n\n    def f(c):\n        if c.isalpha():\n            return T_a[ord(c) - ord('a')]\n        elif c.islower():\n            return T_b[ord(c) - ord('a')]\n        elif c.isupper():\n            return T_c[ord(c) - ord('A')]\n        else:\n            return T_d[ord(c) - ord('a')]\n\n    def g(c):\n        if c.isalpha():\n            return T_e[ord(c) - ord('a')]\n        elif c.islower():\n            return T_f[ord(c) - ord('a')]\n        elif c.isupper():\n            return T_g[ord(c) - ord('A')]\n        else:\n            return T_h[ord(c) - ord('a')]\n\n    def h(c):\n        if c.isalpha():\n            return T_i[ord(c) - ord('a')]\n        elif c.islower():\n            return T_j[ord(c) - ord('a')]\n        elif c.isupper():\n            return T_k[ord(c) - ord('A')]\n        else:\n            return T_l[ord(c) - ord('a')]\n\n    def i(c):\n        if c.isalpha():\n            return T_m["
    },
    {
        "number": 3403,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    words = stdin.splitlines()\n    prefix_lengths = [0] * N\n    prefix_lengths[0] = len(words[0])\n    for i in range(1, N):\n        prefix_lengths[i] = min(prefix_lengths[i - 1], len(words[i]))\n\n    steps = 0\n    for i in range(Q):\n        word = words[i]\n        steps += prefix_lengths[0]\n        for j in range(1, N):\n            if word[j - 1]!= words[i][j - 1]:\n                break\n            steps += prefix_lengths[j]\n        if word == words[i]:\n            steps += prefix_lengths[N - 1]\n\n    return str(steps)\n"
    },
    {
        "number": 3404,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    grid = [[0] * (X + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, X + 1):\n            grid[i][j] = (33 * j + 1) % (2 ** 20)\n\n    for i in range(1, N + 1):\n        for j in range(1, X + 1):\n            grid[i][j] = (grid[i - 1][j] + grid[i][j - 1]) % (2 ** 20)\n\n    column_sums = [0] * X\n    for i in range(X):\n        column_sums[i] = sum(grid[i]) % (2 ** 20)\n\n    result = \"\"\n    for i in range(N):\n        result += chr(column_sums[i] % 27)\n        column_sums[i // X] = (column_sums[i // X] + column_sums[i % X]) % (2 ** 20)\n\n    return result"
    },
    {
        "number": 3405,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = float(stdin)\n    if X < 1 or X > 1000:\n        return \"Invalid input\"\n\n    result = []\n    for i in range(10**8):\n        if i % 10 == 0:\n            result.append(i)\n        else:\n            result.append(i * X)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 3406,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    points = []\n    for _ in range(N):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n\n    castles = []\n    for _ in range(S):\n        x, y = map(int, stdin.split())\n        castles.append((x, y))\n\n    danger_castles = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                for l in range(k + 1, N):\n                    if not (points[i] == points[j] or points[i] == points[k] or points[i] == points[l] or\n                            points[j] == points[k] or points[j] == points[l] or points[k] == points[l]):\n                        danger_castles += 1\n\n    return str(danger_castles)"
    },
    {
        "number": 3407,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    edges = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.strip().split())\n        edges.append((a, b))\n\n    def is_valid(a, b):\n        return abs(a - b) <= 10**-4 and abs(a - b) <= 10**-6 and abs(b - a) <= 10**-6\n\n    def is_tree(graph):\n        visited = set()\n        for u in graph:\n            if u in visited:\n                return False\n            visited.add(u)\n        return True\n\n    def is_connected(graph):\n        for u in graph:\n            for v in graph[u]:\n                if u == v:\n                    continue\n                if abs(graph[u][v][0] - graph[v][u][0]) > 10**-6 or abs(graph[u][v][1] - graph[v][u][1]) > 10**-6:\n                    return False\n        return True\n\n    def is_valid_tree(graph):\n        for u in graph:\n            for v in graph[u]:\n                if u == v:\n                    continue\n                if abs(graph[u][v][0] - graph[v][u][0]) > 10**-4 or abs(graph[u][v][1] - graph[v][u][1]) > 10**-4:\n                    return False\n        return True\n\n    def is_valid_coordinates(x, y):\n        return abs(x) <= 3000 and abs(y) <= 3000\n\n    def print_solution(graph):\n        for i in range(n):\n            x, y = graph[i]\n            if is_valid_coordinates(x, y):\n                print(f\"{x:.6f} {y:.6f}\")\n\n    if not is_tree(edges):\n        return \"No valid tree found.\"\n\n    if not is_connected(edges):\n        return \"No valid tree found.\"\n\n    if not is_valid_tree(edges):\n        return \"No valid tree found.\"\n\n    print_solution(edges)\n    return \" \".join(map(str, [x[0] for x in edges]))\n"
    },
    {
        "number": 3408,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    words = set(stdin.split())\n    patterns = set()\n\n    for _ in range(q):\n        pattern = input()\n        patterns.add(pattern)\n\n    covered_words = 0\n    for word in words:\n        if \"*\" in word:\n            covered_words += 1\n            for pattern in patterns:\n                if \"*\" in pattern and word.replace(\"*\", pattern) == word:\n                    covered_words += 1\n\n    return str(covered_words)\n"
    },
    {
        "number": 3409,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    board = [['O' if i == j else 'X' for j in range(c)] for i in range(r)]\n    target = [['O' if i == j else 'X' for j in range(c)] for i in range(r)]\n\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n                target[i][j] = 'O'\n                hammer(board, target, i, j)\n\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                return '0'\n\n    return '1'\n\ndef"
    },
    {
        "number": 3410,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    points = []\n    for _ in range(N):\n        x, y = map(int, stdin.strip().split())\n        points.append((x, y))\n\n    def is_valid(p1, p2, p3, p4):\n        return (p1[0]!= p2[0] and p1[1]!= p2[1]) or (p2[0]!= p3[0] and p2[1]!= p3[1]) or (p3[0]!= p4[0] and p3[1]!= p4[1]) or (p4[0]!= p1[0] and p4[1]!= p1[1])\n\n    def is_collinear(p1, p2, p3, p4):\n        return (p1[0] == p2[0] and p1[1] == p2[1]) or (p2[0] == p3[0] and p2[1] == p3[1]) or (p3[0] == p4[0] and p3[1] == p4[1]) or (p4[0] == p1[0] and p4[1] == p1[1])\n\n    def is_degenerate(p1, p2, p3, p4):\n        return (p1[0] == p2[0] and p1[1] == p2[1]) or (p2[0] == p3[0] and p2[1] == p3[1]) or (p3[0] == p4[0] and p3[1] == p4[1]) or (p4[0] == p1[0] and p4[1] == p1[1])\n\n    def is_quadrilateral(p1, p2, p3, p4):\n        return is_valid(p1, p2, p3, p4) and is_valid(p2, p3, p4, p1) and is_valid(p3, p4, p1, p2) and is_valid(p4, p1, p2, p3)\n\n    def score(p1, p2, p3, p4):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) + abs(p2[0] - p3[0]) + abs(p2[1] - p3[1]) + abs(p3[0] - p4[0]) + abs(p3[1] - p4[1]) + abs(p4[0] - p1[0]) + abs(p4[1] - p1[1])\n\n    def max_score(points):\n        max_score = -1\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                for k in range(j + 1, len(points)):\n                    for l in range(k + 1, len(points)):\n                        quadrilateral = (points[i], points[j], points[k], points[l])\n                        if is_quadrilateral(quadrilateral):\n                            score = score(quadrilateral[0], quadrilateral[1], quadrilateral[2], quadrilateral[3])\n                            if score > max_score:\n                                max_score = score\n        return max_score\n\n    max_score_points = max_score(points)\n    return str(max_score_points % 1000003)"
    },
    {
        "number": 3411,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    # Create fake accounts and upvote/downvote comments\n    fake_accounts = [0] * n\n    for i in range(n):\n        fake_accounts[i] = i + 1\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] * s[j] < 0:\n                fake_accounts[i] += 1\n                fake_accounts[j] += 1\n\n    # Report one specific comment\n    for i in range(n):\n        if s[i] * s[i + 1] < 0:\n            print(i + 1)\n            return \"0\"\n\n    return \"infinity\""
    },
    {
        "number": 3412,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v_walk, v_bike = map(int, stdin.split())\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x_G, y_G = map(int, stdin.split())\n    x_D, y_D = map(int, stdin.split())\n    n = int(stdin.strip())\n\n    bike_stations = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        bike_stations.append((x, y))\n\n    def distance(x1, y1, x2, y2):\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    def nearest_bike_station(x, y):\n        min_distance = float('inf')\n        nearest_station = None\n        for station in bike_stations:\n            distance_to_station = distance(x, y, station[0], station[1])\n            if distance_to_station < min_distance:\n                min_distance = distance_to_station\n                nearest_station = station\n        return nearest_station\n\n    def time_to_reach_bike_station(x, y):\n        nearest_station = nearest_bike_station(x, y)\n        if nearest_station is None:\n            return float('inf')\n        return distance(x_G, y_G, nearest_station[0], nearest_station[1])\n\n    def time_to_reach_date(x, y):\n        return time_to_reach_bike_station(x, y) + time_to_reach_bike_station(x_D, y_D)\n\n    return str(min(time_to_reach_date(x1, y1), time_to_reach_date(x2, y2)))\n"
    },
    {
        "number": 3413,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    parties = [0] * n\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        parties[a-1] = 1\n        parties[b-1] = 1\n\n    min_months = n\n    for i in range(n):\n        if parties[i] == 0:\n            min_months = min(min_months, i+1)\n\n    return str(min_months)"
    },
    {
        "number": 3414,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    def dfs(node, visited, path, total_turning):\n        visited.add(node)\n        path.append(node)\n        total_turning += 0.5 * (node - 1)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, path, total_turning)\n        path.pop()\n\n    visited = set()\n    path = []\n    dfs(0, visited, path, 0)\n    return round(total_turning, 6)"
    },
    {
        "number": 3415,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    tree = []\n    for _ in range(N):\n        num = int(stdin.readline().strip())\n        tree.append(num)\n\n    def dfs(node, level):\n        if level == 0:\n            print(node)\n        else:\n            dfs(tree[node], level - 1)\n            print(node, end=\" \")\n            dfs(tree[node + 1], level - 1)\n\n    dfs(0, N - 1)\n    return \"\\n\".join(map(str, tree))"
    },
    {
        "number": 3416,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    airports = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        airports[a-1].append(b-1)\n        airports[b-1].append(a-1)\n\n    def min_flights(start, end, visited):\n        if start == end:\n            return 0\n        if start in visited:\n            return visited[start]\n        visited[start] = min(visited[start], min_flights(start+1, end, visited) + 1)\n        visited[end] = min(visited[end], min_flights(start, end-1, visited) + 1)\n        return visited[start] + visited[end]\n\n    min_flights_per_city = min_flights(1, n, {i: 0 for i in range(n)})\n    min_flights_per_city_cities = [i for i in range(n) if min_flights_per_city[i] == min_flights_per_city]\n\n    return '\\n'.join(map(str, min_flights_per_city_cities))"
    },
    {
        "number": 3417,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n\n    def dfs(v, visited):\n        visited[v] = True\n        for u in G[v]:\n            if not visited[u]:\n                dfs(u, visited)\n\n    G = [[] for _ in range(n)]\n    for a, b in edges:\n        G[a].append(b)\n        G[b].append(a)\n\n    visited = [False] * n\n    for v in range(n):\n        if not visited[v]:\n            dfs(v, visited)\n\n    max_independent_set_size = 0\n    for v in range(n):\n        if not visited[v]:\n            max_independent_set_size += 1\n\n    return str(max_independent_set_size)"
    },
    {
        "number": 3418,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    supply = 0\n    for i in range(1, n+1):\n        supply += i * (i - 1) // 2\n    return str(supply)"
    },
    {
        "number": 3419,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s_1, s_2 = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n\n    # Initialize the counters\n    counters = [0] * n\n    for i in range(n):\n        counters[i] = t[i]\n\n    # Initialize the maximum number of customers that can be served today\n    max_customers = 0\n\n    # Iterate through the customers\n    for i in range(n):\n        # Check if the customer has enough time to serve today\n        if counters[i] >= s_1:\n            # If the customer has enough time to serve today, serve them\n            max_customers += 1\n            counters[i] -= s_1\n        else:\n            # If the customer has not enough time to serve today, serve them\n            max_customers += 1\n            counters[i] -= counters[i]\n            counters[i] += s_2\n\n    return str(max_customers)\n"
    },
    {
        "number": 3420,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    B, G = map(int, stdin.split())\n    boys = []\n    for _ in range(B):\n        name = input()\n        boys.append(name)\n\n    girls = []\n    for _ in range(G):\n        name = input()\n        girls.append(name)\n\n    # Calculate minimum number of presentations\n    presentations = 0\n    for i in range(B):\n        for j in range(G):\n            if boys[i] == girls[j]:\n                presentations += 1\n\n    return str(presentations)\n"
    },
    {
        "number": 3421,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    answers = stdin.strip().split()\n    n = len(answers)\n    f = 1\n    el = 0\n    for i in range(n):\n        if answers[i] == '1':\n            f = i + 1\n            el = i + 1\n            break\n    for i in range(n - k + 1):\n        if sum(int(a) for a in answers[i:i + k]) == n:\n            f = i + 1\n            el = k\n            break\n    return f, el"
    },
    {
        "number": 3422,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    pieces = []\n    for _ in range(N):\n        W, H = map(int, stdin.strip().split())\n        pieces.append((W, H))\n\n    def rotate(piece):\n        return tuple(piece[::-1])\n\n    def rotate_piece(piece, rotations):\n        rotated = rotate(piece)\n        for _ in range(rotations):\n            rotated = rotate(rotated)\n        return rotated\n\n    def reconstruct_map(pieces, rotations):\n        W, H = map(int, stdin.strip().split())\n        reconstructed = []\n        for i in range(H):\n            row = []\n            for j in range(W):\n                piece = pieces[i * W + j]\n                rotated_piece = rotate_piece(piece, rotations)\n                row.append(str(rotated_piece))\n            reconstructed.append(''.join(row))\n        return '\\n'.join(reconstructed)\n\n    rotations = [0, 1, 2, 3]\n    result = reconstruct_map(pieces, rotations)\n    return result"
    },
    {
        "number": 3423,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    packages = []\n    for _ in range(n):\n        package = input().split()\n        packages.append(package)\n\n    def topological_sort(nodes):\n        visited = set()\n        stack = []\n        result = []\n\n        def dfs(node):\n            if node in visited:\n                return\n            visited.add(node)\n            stack.append(node)\n            for dep in packages[node]:\n                if dep not in visited:\n                    dfs(dep)\n            stack.pop()\n\n        for node in nodes:\n            if node not in visited:\n                dfs(node)\n\n        while stack:\n            result.append(stack.pop())\n\n        return result\n\n    order = topological_sort(range(n))\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if order[i] < order[j]:\n                result.append(order[i])\n                result.append(order[j])\n                break\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3424,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, ell = map(int, stdin.split())\n    b = 10\n    while True:\n        if b % 10 == 0:\n            if len(str(b)) == ell:\n                return str(b)\n        b *= 10"
    },
    {
        "number": 3425,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = []\n    for _ in range(n):\n        board.append(list(stdin.strip()))\n\n    queens = set()\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '#':\n                queens.add((i, j))\n\n    def is_valid(i, j):\n        return 0 <= i < n and 0 <= j < m and board[i][j] == '.'\n\n    def is_attacked(i, j):\n        return any(board[i][k] == '#' for k in queens) or any(board[k][j] == '#' for k in queens)\n\n    def can_place_queen(i, j):\n        return not any(is_attacked(i, k) or is_attacked(k, j) for k in queens)\n\n    def can_place_max_queens(i, j):\n        return len(queens) <= n - 1 and can_place_queen(i, j)\n\n    def count_ways(i, j):\n        if i == n - 1:\n            return 1\n        if j == m - 1:\n            return 1 + count_ways(i + 1, 0)\n        if can_place_max_queens(i, j):\n            return 1 + count_ways(i + 1, j + 1)\n        return 0\n\n    return str(count_ways(0, 0)) +'' + str(count_ways(n - 1, m - 1))\n"
    },
    {
        "number": 3426,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    tunnels = []\n    for _ in range(M):\n        a, b, l, c = map(int, stdin.split())\n        tunnels.append((a, b, l, c))\n\n    def min_distance(a, b):\n        return abs(a - b)\n\n    def min_length(tunnels):\n        distances = [min_distance(a, b) for a, b, _, _ in tunnels]\n        return min(distances)\n\n    min_length_tunnels = min_length(tunnels)\n    min_length_tunnels_with_cables = min_length(tunnels)\n\n    return str(min_length_tunnels) + '\\n' + str(min_length_tunnels_with_cables)\n"
    },
    {
        "number": 3427,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    doors = []\n    for _ in range(M):\n        u, v = map(int, stdin.split())\n        if u!= v:\n            doors.append((u, v))\n\n    def dfs(u, visited):\n        if u in visited:\n            return\n        visited.add(u)\n        for v, _ in doors:\n            if v == -1 or v == u:\n                continue\n            if not dfs(v, visited):\n                return False\n        return True\n\n    visited = set()\n    if not dfs(0, visited):\n        return \"No solution\"\n\n    max_rooms = 0\n    for u, v in doors:\n        if v == -1:\n            max_rooms += 1\n\n    return str(max_rooms)\n"
    },
    {
        "number": 3428,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    f = [1] * n\n    for i in range(1, n):\n        f[i] = f[i-1]\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                f[i] = f[i] * f[j] % (10**9 + 7)\n    return str(f[n-1])"
    },
    {
        "number": 3429,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_s, y_s, s_s, r_i, r_f = map(int, stdin.split())\n    x_a, y_a, s_a = map(int, stdin.split())\n\n    d = 0\n    while r_f > r_i:\n        d += 1\n        r_f
    },
    {
        "number": 3430,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [[] for _ in range(N)]\n    B = [[] for _ in range(M)]\n\n    for _ in range(N - 1):\n        u, v = map(int, stdin.split())\n        A[u - 1].append(v - 1)\n        A[v - 1].append(u - 1)\n\n    for _ in range(M - 1):\n        u, v = map(int, stdin.split())\n        B[u - 1].append(v - 1)\n        B[v - 1].append(u - 1)\n\n    def dfs(u, parent, path):\n        if u == N:\n            return path\n\n        if u in parent:\n            return dfs(parent[u], u, path)\n\n        parent[u] = dfs(u, u, path)\n        return parent[u]\n\n    def min_cost(u, v):\n        if u == v:\n            return 0\n\n        path = []\n        parent = {}\n        path = dfs(u, None, path)\n        path = dfs(v, None, path)\n\n        return sum(A[u][i] + B[v][i] for i in range(len(path)))\n\n    return str(min_cost(1, 1))\n"
    },
    {
        "number": 3431,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    edges = []\n    for _ in range(n):\n        x, y = map(int, stdin.strip().split())\n        edges.append((x, y))\n\n    def dijkstra(start):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        queue = [(0, start)]\n        while queue:\n            dist, curr = queue.pop(0)\n            if dist == float('inf'):\n                continue\n            for neighbor, weight in edges[curr]:\n                if dist + weight < dist[neighbor]:\n                    dist[neighbor] = dist + weight\n                    queue.append((dist[neighbor], neighbor))\n        return dist\n\n    dist = dijkstra(0)\n    min_dist = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dist[i] + dist[j] < min_dist:\n                min_dist = dist[i] + dist[j]\n    return min_dist"
    },
    {
        "number": 3432,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    def max_sum(A, B):\n        n = len(A)\n        dp = [[0] * (B + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(B + 1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                elif A[i - 1] == B[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][B]\n\n    max_sum_A = max_sum(A, B)\n    max_sum_B = max_sum(A, B)\n\n    for i in range(n):\n        max_sum_A = min(max_sum_A, max_sum(A, B[i]))\n        max_sum_B = min(max_sum_B, max_sum(A[i], B))\n\n    return str(max_sum_A) + \" \" + str(max_sum_B)\n"
    },
    {
        "number": 3433,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    maze = [[char for char in input()] for _ in range(R)]\n    fire = [False] * (R * C)\n    fire[R * C - 1] = True\n\n    def dfs(x, y):\n        if x < 0 or x >= R or y < 0 or y >= C or maze[x][y] == '#':\n            return False\n        if fire[x + y * R]:\n            return False\n        fire[x + y * R] = True\n        if dfs(x + 1, y):\n            return True\n        if dfs(x - 1, y):\n            return True\n        if dfs(x, y + 1):\n            return True\n        if dfs(x, y - 1):\n            return True\n        return False\n\n    if not dfs(0, 0):\n        return \"IMPOSSIBLE\"\n\n    def bfs(x, y):\n        queue = [(x, y)]\n        while queue:\n            x, y = queue.pop(0)\n            if maze[x][y] == '#':\n                return False\n            if fire[x + y * R]:\n                return False\n            fire[x + y * R] = True\n            queue.append((x + 1, y))\n            queue.append((x - 1, y))\n            queue.append((x, y + 1))\n            queue.append((x, y - 1))\n        return True\n\n    if not bfs(0, 0):\n        return \"IMPOSSIBLE\"\n\n    return str(R - 1)\n"
    },
    {
        "number": 3434,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    health = list(map(int, stdin.split()))\n\n    # Calculate the probability of removing all opponent's minions\n    minion_count = n + m\n    probability = 1 / minion_count\n\n    # Calculate the probability of removing all minions\n    for i in range(n):\n        for j in range(m):\n            if health[i] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(m):\n        for j in range(n):\n            if health[j] > 0:\n                probability *= 1 - (health[j] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(n):\n        for j in range(m):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(m):\n        for j in range(n):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(n):\n        for j in range(m):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(m):\n        for j in range(n):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(n):\n        for j in range(m):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(m):\n        for j in range(n):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(n):\n        for j in range(m):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(m):\n        for j in range(n):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(n):\n        for j in range(m):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(m):\n        for j in range(n):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(n):\n        for j in range(m):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(m):\n        for j in range(n):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(n):\n        for j in range(m):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - (health[i] - 1) / 6\n\n    # Calculate the probability of removing all minions\n    for i in range(m):\n        for j in range(n):\n            if health[i] > 0 and health[j] > 0:\n                probability *= 1 - ("
    },
    {
        "number": 3435,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    P = stdin.strip()\n    count = 0\n    for i in range(n):\n        if P[i] == '*':\n            count += 1\n    return str(count)"
    },
    {
        "number": 3436,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    F = [[0] * (y + 1) for _ in range(x + 1)]\n    F[0][0] = 0\n    F[0][1] = 1\n    for i in range(1, x + 1):\n        F[i][0] = F[i - 1][0] + F[i - 2][0]\n        F[i][1] = F[i - 1][1] + F[i - 2][1]\n    for i in range(1, y + 1):\n        for j in range(1, x + 1):\n            F[i][j] = F[i - 1][j] + F[i][j - 1]\n    result = 0\n    for i in range(x + 1):\n        for j in range(y + 1):\n            result = (result + F[i][j]) % (10**9 + 7)\n    return str(result)"
    },
    {
        "number": 3437,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L1, L2, N = map(int, stdin.split())\n    tubes = []\n    for _ in range(N):\n        tubes.append(int(input()))\n\n    if len(tubes) < 2:\n        return \"Impossible\"\n\n    tubes.sort()\n    L1_sum, L2_sum = tubes[0], tubes[-1]\n    max_length = L1_sum + L2_sum\n\n    for i in range(N - 1):\n        L1_sum += tubes[i]\n        L2_sum -= tubes[i]\n        if L1_sum > L1 or L2_sum > L2:\n            break\n        max_length = max(max_length, L1_sum + L2_sum)\n\n    return str(max_length)\n"
    },
    {
        "number": 3438,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, a = map(int, stdin.split())\n    cache = [None] * c\n    accesses = [0] * a\n\n    for i in range(a):\n        accesses[i] = int(stdin.readline().strip())\n\n    for i in range(n):\n        if accesses[i] < c:\n            cache[accesses[i]] = i\n\n    min_access = float('inf')\n    min_access_index = -1\n\n    for i in range(c):\n        if cache[i] is not None and accesses[i] < min_access:\n            min_access = accesses[i]\n            min_access_index = i\n\n    return str(min_access_index + 1)\n"
    },
    {
        "number": 3439,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    map_grid = []\n    for _ in range(h):\n        row = list(map(int, stdin.split()))\n        map_grid.append(row)\n\n    i, j = map(int, stdin.split())\n    draining_device_position = (i, j)\n\n    draining_device_altitude = map_grid[i][j]\n    total_water_drained = 0\n\n    for x in range(i - 1, i + 2):\n        for y in range(j - 1, j + 2):\n            if 0 <= x < h and 0 <= y < w:\n                altitude = map_grid[x][y]\n                if altitude >= draining_device_altitude:\n                    total_water_drained += abs(altitude - draining_device_altitude)\n\n    return str(total_water_drained)\n"
    },
    {
        "number": 3440,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R, F = map(int, stdin.split())\n    flights = []\n    for _ in range(R):\n        a, b, c = map(int, stdin.split())\n        flights.append((a, b, c))\n\n    total_cost = 0\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            for k in range(j + 1, N + 1):\n                total_cost += flights[i][j][k]\n\n    return str(total_cost)"
    },
    {
        "number": 3441,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        roads.append((x, y))\n\n    def dfs(start, visited):\n        if start in visited:\n            return 0\n        visited.add(start)\n        count = 0\n        for neighbor in roads[start]:\n            count += dfs(neighbor, visited)\n        return count\n\n    return str(dfs(0, set()))"
    },
    {
        "number": 3442,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    count = 0\n    for i in range(X, Y + 1):\n        if i % 2 == 0:\n            count += 1\n            if i % 3 == 0:\n                count += 1\n        else:\n            count += 1\n            if i % 7 == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 3443,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    spots = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        spots.append((x, y))\n\n    def is_symmetric(x1, y1, x2, y2):\n        return abs(x1 - x2) == abs(y1 - y2)\n\n    def is_symmetry_around_point(x1, y1, x2, y2):\n        return abs(x1 - x2) == abs(y1 - y2)\n\n    def is_symmetry_across_line(x1, y1, x2, y2):\n        return abs(x1 - x2) == abs(y1 - y2)\n\n    def find_symmetry(spots):\n        min_distance = float('inf')\n        symmetry_point = None\n        for spot in spots:\n            distance = abs(spot[0] - spot[1])\n            if distance < min_distance:\n                min_distance = distance\n                symmetry_point = spot\n        return symmetry_point\n\n    symmetry_point = find_symmetry(spots)\n    if symmetry_point is None:\n        return \"No symmetry found.\"\n\n    symmetry_around_point = None\n    symmetry_across_line = None\n    for spot in spots:\n        if is_symmetry_around_point(spot[0], spot[1], symmetry_point[0], symmetry_point[1]):\n            symmetry_around_point = spot\n        elif is_symmetry_across_line(spot[0], spot[1], symmetry_point[0], symmetry_point[1]):\n            symmetry_across_line = spot\n\n    if symmetry_around_point is None:\n        return \"No symmetry around the point found.\"\n\n    if symmetry_across_line is None:\n        return \"No symmetry across the line found.\"\n\n    min_distance = float('inf')\n    min_spot = None\n    for spot in spots:\n        distance = abs(spot[0] - symmetry_point[0]) + abs(spot[1] - symmetry_point[1])\n        if distance < min_distance:\n            min_distance = distance\n            min_spot = spot\n\n    return str(min_spot[0]) + \" \" + str(min_spot[1])\n"
    },
    {
        "number": 3444,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    pistes = []\n    for _ in range(M):\n        a, b, w = map(int, stdin.split())\n        pistes.append((a, b, w))\n\n    pistes.sort(key=lambda x: (-x[2], x[0], x[1]))\n\n    pistes_count = [0] * N\n    for p in pistes:\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n\n    max_pistes = max(pistes_count)\n    max_pistes_count = 0\n\n    for p in pistes:\n        if p[0] == p[1]:\n            continue\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p[0]] -= 1\n        pistes_count[p[1]] -= 1\n        pistes_count[p[0]] += 1\n        pistes_count[p[1]] += 1\n        pistes_count[p["
    },
    {
        "number": 3445,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    delivery_times = []\n\n    for _ in range(N):\n        x1, y1 = map(int, stdin.strip().split())\n        x2, y2 = map(int, stdin.strip().split())\n\n        delivery_times.append(max(x1, x2) + 1)\n        delivery_times.append(max(y1, y2) + 1)\n\n    return str(max(delivery_times))"
    },
    {
        "number": 3446,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = []\n    for _ in range(n):\n        time, result = map(int, stdin.strip().split())\n        result = ''.join(result)\n        result = result.replace('-', '')\n        result = result.replace('a', 'b')\n        result = result.replace('b', 'a')\n        result = result.replace('c', 'd')\n        result = result.replace('d', 'c')\n        result = result.replace('e', 'f')\n        result = result.replace('f', 'e')\n        result = result.replace('g', 'h')\n        result = result.replace('h', 'g')\n        result = result.replace('i', 'j')\n        result = result.replace('j', 'i')\n        result = result.replace('k', 'l')\n        result = result.replace('l', 'k')\n        result = result.replace('m', 'n')\n        result = result.replace('n','m')\n        result = result.replace('o', 'p')\n        result = result.replace('p', 'o')\n        result = result.replace('q', 'r')\n        result = result.replace('r', 'q')\n        result = result.replace('s', 't')\n        result = result.replace('t','s')\n        result = result.replace('u', 'v')\n        result = result.replace('v', 'u')\n        result = result.replace('w', 'x')\n        result = result.replace('x', 'w')\n        result = result.replace('y', 'z')\n        result = result.replace('z', 'y')\n        result = result.replace('A', 'B')\n        result = result.replace('B', 'A')\n        result = result.replace('C', 'D')\n        result = result.replace('D', 'C')\n        result = result.replace('E', 'F')\n        result = result.replace('F', 'E')\n        result = result.replace('G', 'H')\n        result = result.replace('H', 'G')\n        result = result.replace('I', 'J')\n        result = result.replace('J', 'I')\n        result = result.replace('K', 'L')\n        result = result.replace('L', 'K')\n        result = result.replace('M', 'N')\n        result = result.replace('N', 'M')\n        result = result.replace('O', 'P')\n        result = result.replace('P', 'O')\n        result = result.replace('Q', 'R')\n        result = result.replace('R', 'Q')\n        result = result.replace('S', 'T')\n        result = result.replace('T', 'S')\n        result = result.replace('U', 'V')\n        result = result.replace('V', 'U')\n        result = result.replace('W', 'X')\n        result = result.replace('X', 'W')\n        result = result.replace('Y', 'Z')\n        result = result.replace('Z', 'Y')\n        result = result.replace('a', 'b')\n        result = result.replace('b', 'a')\n        result = result.replace('c', 'd')\n        result = result.replace('d', 'c')\n        result = result.replace('e', 'f')\n        result = result.replace('f', 'e')\n        result = result.replace('g', 'h')\n        result = result.replace('h', 'g')\n        result = result.replace('i', 'j')\n        result = result.replace('j', 'i')\n        result = result.replace('k', 'l')\n        result = result.replace('l', 'k')\n        result = result.replace('m', 'n')\n        result = result.replace('n','m')\n        result = result.replace('o', 'p')\n        result = result.replace('p', 'o')\n        result = result.replace('q', 'r')\n        result = result.replace('r', 'q')\n        result = result.replace('s', 't')\n        result = result.replace('t','s')\n        result = result.replace('u', 'v')\n        result = result.replace('v', 'u')\n        result = result.replace('w', 'x')\n        result = result.replace('x', 'w')\n        result = result.replace('y', 'z')\n        result = result.replace('z', 'y')\n        result = result.replace('A', 'B')\n        result = result.replace('B', 'A')\n        result = result.replace('C', 'D"
    },
    {
        "number": 3447,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    words = []\n    for _ in range(N):\n        word = input()\n        words.append(word)\n\n    def is_valid_word(word):\n        return len(word) <= 10 and all(c.isalpha() for c in word)\n\n    def is_valid_key(key):\n        return key in [2, 3, 4, 5, 6, 7, 8, 9, 0]\n\n    def key_press(word, key):\n        if key == 0:\n            return word\n        if key == 1:\n            return word[1:]\n        if key == 2:\n            return word[0]\n        if key == 3:\n            return word[-1]\n        if key == 4:\n            return word[1:-1]\n        if key == 5:\n            return word[1] + word[2]\n        if key == 6:\n            return word[0] + word[1]\n        if key == 7:\n            return word[0] + word[-1]\n        if key == 8:\n            return word[-1] + word[-2]\n        if key == 9:\n            return word[0] + word[-1]\n\n    def optimal_key_press(word):\n        key_map = {\n            'A': 2, 'B': 3, 'C': 4, 'D': 5, 'E': 6, 'F': 7, 'G': 8, 'H': 9, 'I': 0, 'J': 1, 'K': 2, 'L': 3, 'M': 4, 'N': 5, 'O': 6, 'P': 7, 'Q': 8, 'R': 9, 'S': 0, 'T': 1, 'U': 2, 'V': 3, 'W': 4, 'X': 5, 'Y': 6, 'Z': 7\n        }\n        key_count = [0] * 10\n        for i, c in enumerate(word):\n            key_count[key_map[c]] += 1\n        max_count = max(key_count)\n        max_key = 0\n        for i, count in enumerate(key_count):\n            if count == max_count:\n                max_key = i\n        return max_key\n\n    for _ in range(Q):\n        word = input()\n        if is_valid_word(word):\n            key_press_solution = optimal_key_press(word)\n            print(key_press_solution)\n        else:\n            print('Invalid word')"
    },
    {
        "number": 3448,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or n > 100 or k < 1 or k > n:\n        return \"NO\"\n\n    # Check if all stations are connected by both companies\n    for i in range(n):\n        for j in range(i + 1, n):\n            if MS[i] < MS[j] or ME[i] < ME[j] or VS[i] < VS[j] or VE[i] < VE[j]:\n                return \"NO\"\n\n    # Check if all stations are unique\n    MS = set(MS)\n    ME = set(ME)\n    VS = set(VS)\n    VE = set(VE)\n    if len(MS)!= len(ME) or len(MS)!= len(VS) or len(ME)!= len(VE):\n        return \"NO\"\n\n    # Check if all pairs of stations are connected by both companies\n    for i in range(n):\n        for j in range(i + 1, n):\n            if MS[i] < MS[j] or ME[i] < ME[j] or VS[i] < VS[j] or VE[i] < VE[j]:\n                return \"NO\"\n\n    # Check if all pairs of stations are unique\n    MS = set(MS)\n    ME = set(ME)\n    VS = set(VS)\n    VE = set(VE)\n    if len(MS)!= len(ME) or len(MS)!= len(VS) or len(ME)!= len(VE):\n        return \"NO\"\n\n    # Check if all pairs of stations are connected by Mobi\n    for i in range(n):\n        for j in range(i + 1, n):\n            if MS[i] < MS[j] or ME[i] < ME[j] or VS[i] < VS[j] or VE[i] < VE[j]:\n                return \"NO\"\n\n    # Check if all pairs of stations are connected by Vina\n    for i in range(n):\n        for j in range(i + 1, n):\n            if MS[i] < MS[j] or ME[i] < ME[j] or VS[i] < VS[j] or VE[i] < VE[j]:\n                return \"NO\"\n\n    # Check if all pairs of stations are connected by both companies\n    for i in range(n):\n        for j in range(i + 1, n):\n            if MS[i] < MS[j] or ME[i] < ME[j] or VS[i] < VS[j] or VE[i] < VE[j]:\n                return \"NO\"\n\n    # Check if all pairs of stations are connected by Mobi\n    for i in range(n):\n        for j in range(i + 1, n):\n            if MS[i] < MS[j] or ME[i] < ME[j] or VS[i] < VS[j] or VE[i] < VE[j]:\n                return \"NO\"\n\n    # Check if all pairs of stations are connected by Vina\n    for i in range(n):\n        for j in range(i + 1, n):\n            if MS[i] < MS[j] or ME[i] < ME[j] or VS[i] < VS[j] or VE[i] < VE[j]:\n                return \"NO\"\n\n    # Check if all pairs of stations are connected by both companies\n    for i in range(n):\n        for j in range(i + 1, n):\n            if MS[i] < MS[j] or ME[i] < ME[j] or VS[i] < VS[j] or VE[i] < VE[j]:\n                return \"NO\"\n\n    # Check if all pairs of stations are connected by Mobi\n    for i in range(n):\n        for j in range(i + 1, n):\n            if MS[i] < MS[j] or ME[i] < ME[j] or VS[i] < VS[j] or VE[i] < VE[j]:\n                return \"NO\"\n\n    # Check if all pairs of stations are connected by Vina\n    for i in range(n):\n        for j in range(i + 1, n):\n            if MS[i] < MS[j] or ME[i] < ME[j] or VS[i] < VS[j] or VE[i] < VE[j]:\n                return \"NO\"\n\n    # Check if all pairs of stations are connected by both companies\n    for i in"
    },
    {
        "number": 3449,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B, H, R, C = map(int, stdin.split())\n    lights = [int(x) for x in stdin.split()]\n\n    def fence(x, y, z):\n        return (x + y + z) % 2 == 0\n\n    def is_valid(x, y, z):\n        return 0 <= x < R and 0 <= y < C and 0 <= z < R and lights[x + y * R + z] >= B\n\n    def fence_cost(x, y, z):\n        return 11 if fence(x, y, z) else 43\n\n    total_cost = 0\n    for x in range(R):\n        for y in range(C):\n            for z in range(R):\n                if is_valid(x, y, z):\n                    total_cost += fence_cost(x, y, z)\n\n    return str(total_cost)"
    },
    {
        "number": 3450,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = []\n    for i in range(1, n+1):\n        result.append(str(i))\n    result.reverse()\n    result = ''.join(result)\n    if len(result) < 3:\n        return result\n    else:\n        return result[-3:]"
    },
    {
        "number": 3451,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = stdin.strip()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''.join(sequence)\n    sequence = list(sequence)\n    sequence.sort()\n    sequence = ''."
    },
    {
        "number": 3452,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    rooms = []\n    for _ in range(n):\n        rooms.append(list(map(int, stdin.strip().split())))\n\n    def dfs(room, visited, result):\n        if len(visited) == len(rooms):\n            result.append(room)\n            return\n\n        for i in range(len(rooms[room])):\n            if rooms[room][i] not in visited:\n                visited.append(rooms[room][i])\n                dfs(rooms[room][i], visited, result)\n                visited.pop()\n\n    result = []\n    dfs(1, [], result)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3453,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    tunnels = []\n    for _ in range(M):\n        A, B, L = map(int, stdin.split())\n        tunnels.append((A, B, L))\n\n    def dfs(start, visited, danger):\n        if start in visited:\n            return danger\n        visited.add(start)\n        danger += sum(dfs(t[0], visited, danger) for t in tunnels if t[0]!= start and t[1]!= start)\n        danger += sum(dfs(t[1], visited, danger) for t in tunnels if t[0]!= start and t[1]!= start)\n        return danger\n\n    danger_levels = [dfs(1, set(), 0) for _ in range(N)]\n    return''.join(map(str, danger_levels))"
    },
    {
        "number": 3454,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    # Initialize the picture\n    picture = [[0] * N for _ in range(M)]\n\n    # Initialize the painted cells\n    painted_cells = set()\n\n    # Iterate over the painting steps\n    for i in range(M):\n        for j in range(N):\n            # Check if the cell is already painted\n            if (i, j) in painted_cells:\n                continue\n\n            # Check if the cell is painted\n            if (i, j) in c:\n                picture[i][j] = 1\n                painted_cells.add((i, j))\n            else:\n                picture[i][j] = 0\n\n    # Calculate the result\n    result = 0\n    for i in range(M):\n        for j in range(N):\n            if picture[i][j] == 1:\n                result += 1\n\n    # Calculate the result modulo 100003\n    result = result % 100003\n\n    return str(result) + \" \" + str(result)"
    },
    {
        "number": 3455,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, R = map(int, stdin.split())\n    cars = []\n    for _ in range(M):\n        lane, length, distance = map(int, stdin.split())\n        cars.append((lane, length, distance))\n\n    def distance(car):\n        return cars[car][2]\n\n    def max_safety_factor(lane):\n        max_distance = float('-inf')\n        max_safety_factor = 0\n        for car in range(N):\n            if cars[car][0] == lane:\n                distance = distance(car)\n                if distance > max_distance:\n                    max_distance = distance\n                    max_safety_factor = distance / cars[car][1]\n        return max_safety_factor\n\n    max_safety_factor_lane = max_safety_factor(0)\n    max_safety_factor_right = max_safety_factor(N - 1)\n\n    if max_safety_factor_lane > max_safety_factor_right:\n        return \"Impossible\"\n    else:\n        return str(max_safety_factor_lane)"
    },
    {
        "number": 3456,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    crates = list(map(int, stdin.strip().split()))\n\n    # Initialize the stacks\n    stacks = [[] for _ in range(N)]\n\n    # Perform the actions\n    for i in range(N):\n        # Pick up one crate from the top of the current stack\n        if len(stacks[i]) > 0:\n            stacks[i].append(crates[i])\n        # Drop one crate onto the top of the current stack\n        elif len(stacks[i]) < N:\n            stacks[i].append(crates[i])\n            crates[i] = None\n        # Move the crane to an adjacent stack\n        else:\n            # Check if there is a crate to move\n            if len(crates) > 0:\n                # Move the crane to the next stack\n                stacks[i].append(crates[0])\n                crates.pop(0)\n            else:\n                # Move the crane to the next stack\n                stacks[i].append(crates[0])\n                crates.pop(0)\n\n    # Check if there is a crate left\n    if len(crates) > 0:\n        # Move the crane to the next stack\n        stacks[-1].append(crates[0])\n        crates.pop(0)\n\n    # Calculate the minimum number of actions\n    min_actions = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if len(stacks[i]) == len(stacks[j]):\n                min_actions += 1\n\n    return str(min_actions)\n"
    },
    {
        "number": 3457,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, Y = map(int, stdin.split())\n    MOD = 10**9 + 7\n\n    def dfs(x, y, visited):\n        if x == N and y == N:\n            return 1\n\n        if x < 0 or y < 0 or x >= N or y >= N or visited[x][y]:\n            return 0\n\n        visited[x][y] = True\n        count = dfs(x + 1, y, visited) + dfs(x - 1, y, visited) + dfs(x, y + 1, visited) + dfs(x, y - 1, visited)\n        visited[x][y] = False\n        return count % MOD\n\n    return str(dfs(0, 0, [[False] * N for _ in range(N)]))"
    },
    {
        "number": 3458,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    def xor_sum(a, b):\n        return sum(a & b)\n\n    def max_xor_sum(a, b):\n        return max(xor_sum(a, b), xor_sum(b, a))\n\n    max_xor_sum_subset = max_xor_sum(a[:n//2], a[n//2:])\n    max_xor_sum_file = max_xor_sum(a[:n//2], a[n//2:])\n\n    return str(max_xor_sum_subset) + '\\n' + str(max_xor_sum_file)\n"
    },
    {
        "number": 3459,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    council = {}\n    for _ in range(n):\n        name, party, clubs = stdin.readline().split()\n        clubs = [club.strip() for club in clubs.split()]\n        if clubs:\n            clubs = set(clubs)\n            if len(clubs) > 1:\n                return \"Impossible\"\n            club = clubs.pop()\n            if club not in council:\n                council[club] = []\n            council[club].append(name)\n        else:\n            return \"Impossible\"\n    for club, members in council.items():\n        if len(members) > 1:\n            return f\"{club} {', '.join(members)}\"\n    return \"Impossible\""
    },
    {
        "number": 3460,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    explosions = []\n    for _ in range(n):\n        x, r = map(int, stdin.strip().split())\n        explosions.append((x, r))\n\n    explosions.sort(key=lambda x: x[0])\n    explosions.reverse()\n\n    total_explosions = 0\n    for x, r in explosions:\n        for i in range(x, x + r):\n            total_explosions += 1\n\n    return str(total_explosions)\n"
    },
    {
        "number": 3461,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    hearings = []\n    for _ in range(n):\n        s, a, b = map(int, stdin.strip().split())\n        hearings.append((s, a, b))\n\n    hearings.sort(key=lambda x: x[0])\n    total_length = sum(hearing[2] for hearing in hearings)\n    expected_hearings = total_length / 2\n\n    return str(expected_hearings)"
    },
    {
        "number": 3462,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin.strip()\n    files = []\n    for line in stdin.readlines():\n        files.append(line.strip())\n    return [file for file in files if fnmatch.fnmatch(file, pattern)]"
    },
    {
        "number": 3463,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    p_i = [float(input()) for _ in range(M)]\n    p_i.sort()\n    p_i = p_i[::-1]\n    p_i = sum(p_i) / M\n    return str(p_i)"
    },
    {
        "number": 3464,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, p = map(float, stdin.split())\n    if x < 0 or x > 100 or p < 0 or p > 50:\n        return \"Invalid input\"\n\n    def max_profit(x, p):\n        total_loss = 0\n        total_profit = 0\n        for i in range(10):\n            total_loss += i * x\n            total_profit += i * p\n        return total_profit\n\n    max_profit_value = max_profit(x, p)\n    return f\"{max_profit_value:.3f}\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    roads = []\n    for _ in range(n):\n        a, b = map(int, stdin.strip().split())\n        roads.append((a, b))\n\n    roads.sort()\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if roads[i][1] == roads[j][0]:\n                result.append(f\"{i} {j}\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 3466,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    def is_balanced(s):\n        return sum(s) <= 10**5\n\n    def is_balanced_prefix(s):\n        return is_balanced(s) and all(b[i] == s[i] for i in range(len(s)))\n\n    def max_sweets(f):\n        s = 0\n        for i in range(m):\n            s += a[i] * f[i]\n        return s\n\n    def max_sweets_prefix(f):\n        s = 0\n        for i in range(k):\n            s += b[i] * f[i]\n        return s\n\n    max_sweets_prefix_list = [max_sweets_prefix(f) for f in a]\n    max_sweets_prefix_list.append(max_sweets_prefix(f) + 1)\n    max_sweets_prefix_list.sort()\n    max_sweets_prefix_list.pop()\n\n    max_sweets_list = [max_sweets(f) for f in a]\n    max_sweets_list.append(max_sweets(f) + 1)\n    max_sweets_list.sort()\n    max_sweets_list.pop()\n\n    max_sweets_list = [max_sweets_list[i] for i in range(len(max_sweets_list)) if max_sweets_list[i] <= max_sweets_prefix_list[i]]\n\n    return str(max(max_sweets_list))\n"
    },
    {
        "number": 3467,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    tram_stops = list(range(n))\n    tram_lines = []\n    for _ in range(m):\n        u, v, t_0, p, d = map(int, stdin.split())\n        tram_lines.append((u, v, t_0, p, d))\n\n    def is_valid_change(u, v, t_0, p, d):\n        return 0 <= u < n and 0 <= v < n and 0 <= t_0 < 10**9 and 1 <= p <= 10**9 and 1 <= d <= 10**9\n\n    def get_latest_time(u, v, t_0, p, d):\n        t = t_0\n        while True:\n            if is_valid_change(u, v, t, p, d):\n                return t\n            t += p\n\n    latest_time = get_latest_time(0, n - 1, 0, 1, 1)\n    if latest_time == -1:\n        return \"impossible\"\n    return str(latest_time)\n"
    },
    {
        "number": 3468,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    apps = [int(d) for d in stdin.split()]\n    disk_space = int(stdin.split())\n\n    # Sort the apps by their download size\n    apps.sort(key=lambda x: x[0])\n\n    # Initialize the maximum number of apps to install\n    max_apps = 0\n\n    # Iterate through the apps and install the largest number of apps\n    for i in range(n):\n        # Check if the current app can be installed\n        if i + 1 < n and apps[i][0] + apps[i + 1][0] <= c:\n            # Install the current app\n            max_apps += 1\n            disk_space -= apps[i][0]\n            disk_space -= apps[i + 1][0]\n            apps[i], apps[i + 1] = apps[i + 1], apps[i]\n\n    # Output the maximum number of apps\n    print(max_apps)\n\n    # Output the list of apps, sorted by their download size\n    for i in range(n):\n        print(i + 1, end=\" \")\n    print()\n    for i in range(n):\n        print(apps[i][0], end=\" \")\n    print()"
    },
    {
        "number": 3469,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    g = stdin.readline().strip()\n    k = stdin.readline().strip()\n    p = float(stdin.readline().strip())\n\n    if len(g)!= len(k):\n        return \"Error: Strings must have the same length.\"\n\n    if not g.isalpha() or not k.isalpha():\n        return \"Error: Strings must contain only characters 'H' and 'T'.\"\n\n    if not (g.count('H') == len(g) and k.count('H') == len(k) and g.count('T') == len(g) and k.count('T') == len(k)):\n        return \"Error: Strings must contain only 'H' and 'T' characters.\"\n\n    if not (0 < p < 1):\n        return \"Error: Probability must be between 0 and 1.\"\n\n    if len(g) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) > 1000000 or len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n        return \"Error: Game length must be less than or equal to 10^100.\"\n\n    if len(g) + len(k) > 1000000:\n       "
    },
    {
        "number": 3470,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 1000:\n        return \"Invalid input. Please enter a number between 1 and 1000.\"\n\n    mines = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or i == n - 1 or j == 0 or j == n - 1:\n                mines[i][j] = 1\n            elif i == 1 or i == n - 2 or j == 1 or j == n - 2:\n                mines[i][j] = 1\n            elif i == 2 or i == n - 3 or j == 2 or j == n - 3:\n                mines[i][j] = 1\n            elif i == 3 or i == n - 4 or j == 3 or j == n - 4:\n                mines[i][j] = 1\n            elif i == 4 or i == n - 5 or j == 4 or j == n - 5:\n                mines[i][j] = 1\n            elif i == 5 or i == n - 6 or j == 5 or j == n - 6:\n                mines[i][j] = 1\n            elif i == 6 or i == n - 7 or j == 6 or j == n - 7:\n                mines[i][j] = 1\n            elif i == 7 or i == n - 8 or j == 7 or j == n - 8:\n                mines[i][j] = 1\n            elif i == 8 or i == n - 9 or j == 8 or j == n - 9:\n                mines[i][j] = 1\n            elif i == 9 or i == n - 10 or j == 9 or j == n - 10:\n                mines[i][j] = 1\n            elif i == 10 or i == n - 11 or j == 10 or j == n - 11:\n                mines[i][j] = 1\n            elif i == 11 or i == n - 12 or j == 11 or j == n - 12:\n                mines[i][j] = 1\n            elif i == 12 or i == n - 13 or j == 12 or j == n - 13:\n                mines[i][j] = 1\n            elif i == 13 or i == n - 14 or j == 13 or j == n - 14:\n                mines[i][j] = 1\n            elif i == 14 or i == n - 15 or j == 14 or j == n - 15:\n                mines[i][j] = 1\n            elif i == 15 or i == n - 16 or j == 15 or j == n - 16:\n                mines[i][j] = 1\n            elif i == 16 or i == n - 17 or j == 16 or j == n - 17:\n                mines[i][j] = 1\n            elif i == 17 or i == n - 18 or j == 17 or j == n - 18:\n                mines[i][j] = 1\n            elif i == 18 or i == n - 19 or j == 18 or j == n - 19:\n                mines[i][j] = 1\n            elif i == 19 or i == n - 20 or j == 19 or j == n - 20:\n                mines[i][j] = 1\n            elif i == 20 or i == n - 21 or j == 20 or j == n - 21:\n                mines[i][j] = 1\n            elif i == 21 or i == n - 22 or j == 21 or j == n - 22:\n                mines[i][j] = 1\n            elif i == 22 or i == n - 23 or j == 22 or j == n - 23:\n                mines[i][j] = 1\n            elif i == 23 or i == n - 24 or j == 23 or j == n - 24:\n                mines[i][j] = 1\n            el"
    },
    {
        "number": 3471,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, Q = map(int, stdin.split())\n    xorbonacci = [0, 1, 1]\n    for i in range(2, K):\n        xorbonacci.append(xorbonacci[i-1] ^ xorbonacci[i-2] ^ xorbonacci[i-3])\n    xorbonacci.append(xorbonacci[K-1] ^ xorbonacci[K-2] ^ xorbonacci[K-3])\n\n    for _ in range(Q):\n        l, r = map(int, stdin.split())\n        result = xorbonacci[r] - xorbonacci[l-1]\n        print(result)"
    },
    {
        "number": 3472,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, N = map(int, stdin.split())\n    lines = []\n    for _ in range(N):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        lines.append((x1, y1, x2, y2))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def max_area(lines):\n        max_area = 0\n        for i in range(len(lines)):\n            for j in range(i + 1, len(lines)):\n                area = gcd(lines[i][1] - lines[j][1], lines[j][0] - lines[i][0])\n                max_area = max(max_area, area)\n        return max_area\n\n    max_area_lines = max_area(lines)\n    extra_lines = max_area_lines - N\n    return str(extra_lines)"
    },
    {
        "number": 3473,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Z, F = map(int, stdin.split())\n    forbidden_dates = []\n    for _ in range(F):\n        year, month, day = map(int, stdin.split())\n        forbidden_dates.append((year, month, day))\n\n    def is_leap_year(year: int) -> bool:\n        return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\n    def is_friday(year: int, month: int, day: int) -> bool:\n        return month == 10 and day == 18\n\n    def is_valid_date(year: int, month: int, day: int) -> bool:\n        return 2019 <= year <= 2118 and 10 <= month <= 12 and 1 <= day <= 31\n\n    def is_valid_forbidden_date(year: int, month: int, day: int) -> bool:\n        return is_valid_date(year, month, day) and not is_friday(year, month, day)\n\n    def surprise_penalty(year: int, month: int, day: int) -> int:\n        penalty = 0\n        for forbidden_date in forbidden_dates:\n            if year == forbidden_date[0] and month == forbidden_date[1] and day == forbidden_date[2]:\n                penalty += 1000000000\n        return penalty\n\n    def schedule(year: int) -> list:\n        schedule = []\n        for month in range(1, 13):\n            for day in range(1, 32):\n                if is_valid_date(year, month, day):\n                    schedule.append(f\"{year} {month:02d} {day:02d}\")\n        return schedule\n\n    def total_surprise_penalty(schedule: list) -> int:\n        total_penalty = 0\n        for year in range(2018, year + 1):\n            for month in range(1, 13):\n                for day in range(1, 32):\n                    if is_valid_date(year, month, day):\n                        total_penalty += surprise_penalty(year, month, day)\n        return total_penalty\n\n    schedule_list = schedule(2018)\n    total_penalty = total_surprise_penalty(schedule_list)\n    return str(total_penalty) + \"\\n\" + \"\\n\".join(schedule_list)"
    },
    {
        "number": 3474,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = map(float, stdin.split())\n    if x1 == x2 or y1 == y2:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 == x3 or y1 == y3:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 == x3 or y2 == y3:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x2 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x1 * x3 > 0:\n        return \"Can't hit the wall at all\"\n\n    if x2 * x3 > 0:\n        return \"Can't hit the wall at"
    },
    {
        "number": 3475,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, n = map(int, stdin.split())\n    d_min = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n\n    # Check if the number of modes of transportation is valid\n    if t > 200 or t < 1 or t!= t:\n        return \"IMPOSSIBLE\"\n\n    # Check if the number of points is valid\n    if n < 1 or n > 5 * 10**4:\n        return \"IMPOSSIBLE\"\n\n    # Check if the distance and heading ranges are valid\n    for i in range(t):\n        if d_min[i] < 0 or d_min[i] > 10**6 or a[i] < 0 or a[i] > 3.6 * 10**5 or h[i] < -1.8 * 10**5 or h[i] > 1.8 * 10**5:\n            return \"IMPOSSIBLE\"\n\n    # Calculate the total distance of the itineraries\n    total_distance = sum(d)\n\n    # Calculate the maximum heading range\n    max_heading_range = max(h)\n\n    # Calculate the maximum number of times we have to call for a new type of transportation\n    k = 0\n    for i in range(t):\n        # Calculate the distance between the i-th point and the (i+1)-th point\n        distance = d[i] + d[i+1]\n\n        # Calculate the angle between the i-th point and the (i+1)-th point\n        angle = (h[i] - h[i+1]) / 180 * math.pi\n\n        # Check if the distance is less than the minimum distance\n        if distance < d_min[i]:\n            continue\n\n        # Check if the angle is within the maximum heading range\n        if angle > max_heading_range:\n            continue\n\n        # Calculate the number of times we have to call for a new type of transportation\n        k += 1\n\n    return str(k)"
    },
    {
        "number": 3476,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    matrix = []\n    for _ in range(R):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n\n    operations = []\n    for i in range(R):\n        for j in range(C):\n            if i == 0 or j == 0 or i == R - 1 or j == C - 1:\n                operations.append(\"rotR\")\n            elif i == 1 or j == 1 or i == R - 2 or j == C - 2:\n                operations.append(\"rotS\")\n            elif i == 2 or j == 2 or i == R - 3 or j == C - 3:\n                operations.append(\"negR\")\n            elif i == 3 or j == 3 or i == R - 4 or j == C - 4:\n                operations.append(\"negS\")\n\n    max_sum = 0\n    for i in range(T):\n        operation = operations[i]\n        if operation == \"rotR\":\n            k = int(stdin.split()[1])\n            matrix = rotate_right(matrix, k)\n        elif operation == \"rotS\":\n            k = int(stdin.split()[1])\n            matrix = rotate_down(matrix, k)\n        elif operation == \"negR\":\n            i = int(stdin.split()[1])\n            matrix = negate_row(matrix, i)\n        elif operation == \"negS\":\n            j = int(stdin.split()[1])\n            matrix = negate_column(matrix, j)\n        else:\n            raise ValueError(\"Invalid operation\")\n\n        max_sum = max(max_sum, sum(matrix[i]))\n\n    return str(max_sum) + \" \" + \" \".join(operations)\n\n\ndef"
    },
    {
        "number": 3477,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    E = list(map(float, stdin.split()))\n\n    def min_sum(E):\n        min_sum = float('inf')\n        for i in range(n):\n            for j in range(m):\n                min_sum = min(min_sum, k[i] * (i - E[j]) ** 2 + k[j] * (E[j] - i) ** 2)\n        return min_sum\n\n    min_sum_E = min_sum(E)\n    return str(min_sum_E)\n"
    },
    {
        "number": 3478,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n\n    def is_connected(a, b):\n        for i in range(len(roads)):\n            if roads[i][0] == a and roads[i][1] == b:\n                return True\n        return False\n\n    def partition(cities):\n        def dfs(city):\n            if city == 1:\n                return [1]\n            if city == 2:\n                return [2]\n            if city in cities:\n                return [city]\n            return []\n\n        def backtrack(cities):\n            if not cities:\n                return\n            for city in cities:\n                for sub_cities in dfs(city):\n                    yield from backtrack(sub_cities)\n\n        return list(backtrack(cities))\n\n    def assign_cities(cities):\n        def dfs(city):\n            if city == 1:\n                return [1]\n            if city == 2:\n                return [2]\n            if city in cities:\n                return [city]\n            return []\n\n        def backtrack(cities):\n            if not cities:\n                return\n            for city in cities:\n                for sub_cities in dfs(city):\n                    yield from backtrack(sub_cities)\n\n        return list(backtrack(cities))\n\n    def find_collections(cities):\n        collections = []\n        for city in cities:\n            if is_connected(city, 1):\n                collections.append(1)\n            if is_connected(city, 2):\n                collections.append(2)\n        return collections\n\n    def main():\n        cities = list(range(n))\n        for i in range(m):\n            a, b = roads[i]\n            cities.remove(a)\n            cities.remove(b)\n        collections = assign_cities(cities)\n        collections = find_collections(collections)\n        if len(collections) == 1:\n            print(\"impossible\")\n        else:\n            print(\" \".join(map(str, collections)))\n\n    main()"
    },
    {
        "number": 3479,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n\n    # Calculate the total time it takes to move all n people from your house to the stadium\n    total_time = sum(t)\n\n    # Calculate the number of seconds it takes to move all n people from your house to the stadium\n    min_time = total_time // n\n\n    # Calculate the number of seconds it takes to move all n people from your house to the stadium, considering the additional time it takes to park and unpark cars\n    parked_time = total_time % n\n\n    # Calculate the number of seconds it takes to move all n people from your house to the stadium, considering the additional time it takes to drive to the stadium\n    unparked_time = total_time - parked_time\n\n    # Calculate the number of seconds it takes to move all n people from your house to the stadium, considering the additional time it takes to drive back to your house\n    back_time = total_time - 2 * parked_time\n\n    # Calculate the number of seconds it takes to move all n people from your house to the stadium, considering the additional time it takes to drive to the stadium and back to your house\n    total_time = min(min_time, unparked_time, back_time)\n\n    return str(total_time)\n"
    },
    {
        "number": 3480,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    L, D = map(int, lines[0].split())\n    lines = lines[1:]\n\n    result = []\n    for i in range(L):\n        line = lines[i]\n        syllables = line.split()\n        syllables = [syllable.strip('_') for syllable in syllables]\n        syllables = [syllable for syllable in syllables if syllable]\n\n        result.append(line)\n        result.append('=' * len(line))\n\n        for j in range(len(syllables)):\n            if j == 0:\n                result.append(syllables[j])\n            else:\n                result.append('_' * (len(syllables[j]) - len(syllables[j - 1])))\n\n        result.append('=' * len(line))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 3481,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    G, K, R = map(int, stdin.split())\n    roads = []\n    for _ in range(R):\n        a, b, t = map(int, stdin.split())\n        roads.append((a, b, t))\n\n    gigs = []\n    for _ in range(G):\n        v, s, e, m = map(int, stdin.split())\n        gigs.append((v, s, e, m))\n\n    def max_cryptocents(gigs):\n        def max_cryptocents_helper(gigs, total_cryptocents):\n            if not gigs:\n                return total_cryptocents\n\n            venue, start, end, m = gigs.pop(0)\n            if start == end:\n                return max_cryptocents_helper(gigs, total_cryptocents + m)\n\n            if start > end:\n                return max_cryptocents_helper(gigs, total_cryptocents)\n\n            if venue == 1:\n                return max_cryptocents_helper(gigs, total_cryptocents + m)\n\n            if venue == 2:\n                return max_cryptocents_helper(gigs, total_cryptocents + m)\n\n            return max(max_cryptocents_helper(gigs, total_cryptocents),\n                       max_cryptocents_helper(gigs, total_cryptocents + m))\n\n        return max_cryptocents_helper(gigs, 0)\n\n    return str(max_cryptocents(gigs))\n"
    },
    {
        "number": 3482,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, p = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    t, n = map(int, stdin.split())\n    trips = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        trips.append((a, b))\n\n    total_cost = 0\n    for i in range(t):\n        total_cost += p[0]\n        for j in range(1, l):\n            total_cost += p[j] * (d[j] - d[j-1])\n\n    return str(total_cost)"
    },
    {
        "number": 3483,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    weights = list(map(int, stdin.strip().split()))\n\n    max_weight = max(weights)\n    min_weight = min(weights)\n    distinct_weights = len(set(weights))\n\n    expected_weight = sum(weights) / distinct_weights\n\n    return f\"{max_weight} {min_weight} {distinct_weights} {expected_weight:.4f}\""
    },
    {
        "number": 3484,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    grid = [[0] * n for _ in range(k)]\n    for i in range(k):\n        row = list(map(int, stdin.split()))\n        for j in range(n):\n            grid[i][j] = row[j]\n    for i in range(k):\n        for j in range(n):\n            if grid[i][j] == 0:\n                for x in range(1, n + 1):\n                    if grid[i][j] + x in grid[i][j + 1:]:\n                        grid[i][j] = x\n                        break\n    if all(grid[i][j] == i + 1 for i in range(k) for j in range(n)):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 3485,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    cards = list(map(int, stdin.strip().split()))\n\n    def count_cards(cards):\n        counted = 0\n        for card in cards:\n            if card == -10:\n                counted += 1\n            elif card == 10:\n                counted += 1\n            else:\n                counted = 0\n                break\n        return counted\n\n    def calculate_payout(cards):\n        counted = count_cards(cards)\n        if counted == 0:\n            return 0\n        return sum(cards) / counted\n\n    max_payout = max(calculate_payout(cards), calculate_payout(cards[::-1]))\n    return str(max_payout)\n"
    },
    {
        "number": 3486,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    students = list(map(int, stdin.readline().split()))\n    num_ways = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if students[i] % students[j]!= 0:\n                num_ways += 1\n                break\n    return str(num_ways % (10**9 + 7))"
    },
    {
        "number": 3487,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, v, a = map(int, stdin.split())\n    pipes = []\n    for _ in range(p):\n        j, k, c = map(int, stdin.split())\n        pipes.append((j, k, c))\n\n    def max_flow(source: int, sink: int, capacity: int) -> float:\n        def dfs(node: int, flow: int, visited: Set[int], max_flow: float) -> float:\n            if node == sink:\n                return max_flow\n            if node in visited:\n                return 0\n            visited.add(node)\n            for neighbor in pipes[node]:\n                if neighbor[0] == source:\n                    new_flow = dfs(neighbor[1], min(flow, neighbor[2]), visited, max_flow)\n                    if new_flow > 0:\n                        return max(new_flow, dfs(neighbor[1], flow - new_flow, visited, max_flow))\n            return max_flow\n\n        visited = set()\n        max_flow = dfs(1, float('inf'), visited, 0)\n        return max_flow\n\n    def max_flow_value(source: int, sink: int, capacity: int) -> float:\n        max_flow = max_flow(source, sink, capacity)\n        return max_flow * (1 - a)\n\n    for _ in range(n - 1):\n        source, sink, capacity = map(int, stdin.split())\n        max_flow_value(source, sink, capacity)\n\n    return f\"{max_flow_value(1, n, 1)} {max_flow_value(2, n, 1)}\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = []\n    for _ in range(N):\n        x, y = map(int, stdin.split())\n        A.append((x, y))\n\n    Z = []\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i][0] - A[j][0]) ** 2 + (A[i][1] - A[j][1]) ** 2 <= 1:\n                Z.append((A[i][0], A[i][1]))\n                Z.append((A[j][0], A[j][1]))\n\n    min_vertices = float('inf')\n    for z in Z:\n        if len(z) < min_vertices:\n            min_vertices = len(z)\n\n    return str(min_vertices)\n"
    },
    {
        "number": 3489,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    routes = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        routes.append((a, b))\n\n    def dfs(start, visited):\n        if start == h:\n            return True\n        if start in visited:\n            return False\n        visited.add(start)\n        for i, (next_a, next_b) in enumerate(routes):\n            if next_a == start:\n                if dfs(next_b, visited):\n                    return True\n            elif next_b == start:\n                if dfs(next_a, visited):\n                    return True\n        return False\n\n    if dfs(0, set()):\n        return \"0\"\n\n    def backtrack(start, visited):\n        if start == 0:\n            return True\n        if start in visited:\n            return False\n        visited.add(start)\n        for i, (next_a, next_b) in enumerate(routes):\n            if next_a == start:\n                if backtrack(next_b, visited):\n                    return True\n            elif next_b == start:\n                if backtrack(next_a, visited):\n                    return True\n        return False\n\n    if backtrack(h, set()):\n        return \"0\"\n\n    return \" \".join(map(str, routes))\n"
    },
    {
        "number": 3490,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    brooms = []\n    for _ in range(N):\n        x, y, r = map(float, stdin.readline().strip().split())\n        brooms.append((x, y, r))\n\n    def rotate(broom, r):\n        x, y = broom\n        return (x, -y) if r < 0 else (x, y)\n\n    def crash(broom1, broom2):\n        x1, y1 = broom1\n        x2, y2 = broom2\n        return abs(x1 - x2) > 1 or abs(y1 - y2) > 1\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if crash(brooms[i], brooms[j]):\n                return \"crash\"\n\n    return \"ok\""
    },
    {
        "number": 3491,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    staircases = []\n    for _ in range(M):\n        i, j = map(int, stdin.split())\n        staircases.append((i, j))\n\n    def is_connected(i, j):\n        return i!= j and staircases[i][1]!= staircases[j][0]\n\n    def move_staircase(i, j):\n        if is_connected(i, j):\n            return\n        if i == j:\n            return\n        if i < j:\n            staircases[i], staircases[j] = staircases[j], staircases[i]\n        else:\n            staircases[i], staircases[j] = staircases[j], staircases[i]\n            staircases[i], staircases[j+1] = staircases[j+1], staircases[i]\n\n    for _ in range(M):\n        i, j = map(int, stdin.split())\n        move_staircase(i, j)\n\n    result = []\n    for i in range(N):\n        if is_connected(i, i):\n            result.append(\"R \" + str(i))\n        else:\n            result.append(\"G \" + str(i))\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 3492,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, r, f, t = map(int, stdin.split())\n    states = set(stdin.split())\n    max_factories = 0\n\n    for i in range(s):\n        if i in states:\n            max_factories = max(max_factories, f)\n\n    return str(max_factories)\n"
    },
    {
        "number": 3493,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    buttons = [0] * n\n    for i in range(n):\n        buttons[i] = int(stdin.strip())\n\n    max_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if buttons[i] == buttons[j]:\n                max_count += 1\n                break\n\n    result = []\n    for i in range(n):\n        result.append(buttons[i])\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 3494,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    matrix = []\n    for _ in range(R):\n        matrix.append(list(input()))\n\n    G = int(stdin.strip())\n    distances = []\n\n    for _ in range(G):\n        r1, s1 = map(int, stdin.strip().split())\n        r2, s2 = map(int, stdin.strip().split())\n\n        distance = ((r1 - r2) ** 2 + (s1 - s2) ** 2) ** 0.5\n        distances.append(distance)\n\n    return '\\n'.join(map(str, distances))"
    },
    {
        "number": 3495,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    x_target, y_target = map(int, stdin.split())\n\n    # Calculate the minimum distance between the tip and the target\n    min_distance = float('inf')\n    for i in range(N):\n        distance = ((x_target - x_target[i]) ** 2 + (y_target - y_target[i]) ** 2) ** 0.5\n        min_distance = min(min_distance, distance)\n\n    # Calculate the angle between the tip and the target\n    angle = math.atan2(y_target - y_target[0], x_target - x_target[0])\n\n    # Calculate the coordinates of the tip\n    x_tip = x_target + L * math.cos(angle)\n    y_tip = y_target + L * math.sin(angle)\n\n    # Calculate the coordinates of the other segments\n    x_segments = [x_target + L * math.cos(angle + math.pi / N * i) for i in range(N)]\n    y_segments = [y_target + L * math.sin(angle + math.pi / N * i) for i in range(N)]\n\n    # Calculate the coordinates of the arm\n    x_arm = [x_tip]\n    y_arm = [y_tip]\n    for i in range(1, N):\n        x_arm.append(x_segments[i - 1] + L * math.cos(angle + math.pi / N * i))\n        y_arm.append(y_segments[i - 1] + L * math.sin(angle + math.pi / N * i))\n\n    # Calculate the coordinates of the tip as close as possible to the target\n    x_tip_closest = x_target\n    y_tip_closest = y_target\n    for i in range(N):\n        distance = ((x_target - x_arm[i]) ** 2 + (y_target - y_arm[i]) ** 2) ** 0.5\n        if distance < min_distance:\n            x_tip_closest = x_arm[i]\n            y_tip_closest = y_arm[i]\n\n    # Output the coordinates of the tip as close as possible to the target\n    return f\"{x_tip_closest:.6f} {y_tip_closest:.6f}\""
    },
    {
        "number": 3496,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min_energy = float('inf')\n    for k in range(1, q + 1):\n        energy = sum(a[:k])\n        if energy < min_energy:\n            min_energy = energy\n    return str(min_energy)"
    },
    {
        "number": 3497,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, P = map(int, stdin.split())\n    T = set(range(V)) - {0}\n    Pigs = set(range(P))\n    W = 0\n\n    for u, v in stdin.splitlines():\n        if u not in T and v not in T:\n            if u not in Pigs and v not in Pigs:\n                W += 1\n                T.add(u)\n                T.add(v)\n                Pigs.add(u)\n                Pigs.add(v)\n\n    return str(W)"
    },
    {
        "number": 3498,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, r = map(int, stdin.split())\n    tasks = []\n    for _ in range(t):\n        start_time, base_priority, a = map(int, stdin.split())\n        instructions = []\n        for _ in range(a):\n            instruction = stdin.strip()\n            instructions.append(instruction)\n        tasks.append((start_time, base_priority, instructions))\n\n    def compute(start_time, base_priority, instructions):\n        for instruction in instructions:\n            if instruction == 'C':\n                yield start_time + 1\n            elif instruction == 'L':\n                yield start_time + 1\n            elif instruction == 'U':\n                yield start_time + 1\n\n    def lock(k):\n        yield start_time + 1\n\n    def unlock(k):\n        yield start_time + 1\n\n    def get_current_priority(task):\n        return max(task[1], task[2][0])\n\n    def get_blocked_tasks(task):\n        blocked_tasks = []\n        for instruction in task[2]:\n            if instruction == 'C':\n                blocked_tasks.append(task[0])\n            elif instruction == 'L':\n                for resource in range(r):\n                    if resource in task[2][task[2].index(instruction) + 1:\n                        blocked_tasks.append(task[0])\n            elif instruction == 'U':\n                for resource in range(r):\n                    if resource in task[2][task[2].index(instruction) + 1:\n                        blocked_tasks.append(task[0])\n        return blocked_tasks\n\n    def execute_next_instruction(task):\n        current_priority = get_current_priority(task)\n        blocked_tasks = get_blocked_tasks(task)\n        if not blocked_tasks:\n            yield start_time + 1\n        else:\n            for instruction in task[2]:\n                if instruction == 'C':\n                    yield start_time + 1\n                elif instruction == 'L':\n                    for resource in range(r):\n                        if resource in task[2][task[2].index(instruction) + 1]:\n                            yield start_time + 1\n                elif instruction == 'U':\n                    for resource in range(r):\n                        if resource in task[2][task[2].index(instruction) + 1]:\n                            yield start_time + 1\n\n    def process_task(task):\n        start_time, base_priority, instructions = task\n        current_time = start_time\n        while current_time <= current_processor_clock:\n            current_time += 1\n            if current_time > start_time:\n                current_processor_clock += 1\n            for instruction in instructions:\n                if instruction == 'C':\n                    yield start_time + 1\n                elif instruction == 'L':\n                    for resource in range(r):\n                        if resource in task[2][task[2].index(instruction) + 1]:\n                            yield start_time + 1\n                elif instruction == 'U':\n                    for resource in range(r):\n                        if resource in task[2][task[2].index(instruction) + 1]:\n                            yield start_time + 1\n\n    def process_tasks(tasks):\n        for task in tasks:\n            yield from process_task(task)\n\n    tasks = sorted(tasks, key=lambda x: x[0])\n    current_processor_clock = 0\n    for task in tasks:\n        yield from process_task(task)\n\n    return''.join(map(str, current_time))\n"
    },
    {
        "number": 3499,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.strip()\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def count_palindromes(s: str) -> int:\n        count = 0\n        for i in range(len(s) - 2 * N + 1):\n            if s[i:i + 2 * N] == s[i + N:i + 2 * N + 1]:\n                count += 1\n        return count\n\n    count = 0\n    for i in range(N, 2 * N + 1):\n        if is_palindrome(S) and count_palindromes(S[:i]) == 2:\n            count += 1\n    return str(count % (10**9 + 7))\n"
    },
    {
        "number": 3500,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    bingo_cards = []\n    for _ in range(n):\n        bingo_cards.append(list(map(int, stdin.strip().split())))\n\n    def is_valid_bingo_card(card):\n        return all(len(row) == 5 for row in card) and all(sum(row) == 3000 for row in card)\n\n    def is_valid_bingo_sequence(card):\n        return all(sum(row) == 5 for row in card)\n\n    def is_valid_tie(card1, card2):\n        return card1[0] == card2[0] or card1[0] == card2[4] or card1[0] == card2[8] or card1[0] == card2[12] or card1[0] == card2[16]\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_valid_bingo_card(bingo_cards[i]) and is_valid_bingo_card(bingo_cards[j]) and is_valid_bingo_sequence(bingo_cards[i]) and is_valid_bingo_sequence(bingo_cards[j]):\n                if is_valid_tie(bingo_cards[i], bingo_cards[j]):\n                    return \"no ties\"\n                elif is_valid_tie(bingo_cards[j], bingo_cards[i]):\n                    return \"no ties\"\n                else:\n                    return str(i + 1) + \" \" + str(j + 1)\n\n    return \"no ties\""
    },
    {
        "number": 3501,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    jaap_bet = a[0]\n    jan_bet = a[1]\n    thijs_bet = a[2]\n\n    # Calculate the number of pairs of camels that appear in the same order in all 3 bets\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if jaap_bet == a[i] and jan_bet == a[j] and thijs_bet == a[k]:\n                    count += 1\n\n    return str(count)\n"
    },
    {
        "number": 3502,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    data = []\n    for _ in range(n):\n        x, r, g = map(int, stdin.strip().split())\n        data.append((x, r, g))\n\n    def is_red(x, r, g):\n        return x == 0 or (x < 0 and r < 0) or (x > 0 and r > 0)\n\n    def is_green(x, r, g):\n        return x == 0 or (x < 0 and r > 0) or (x > 0 and r < 0)\n\n    def is_red_light(x, r, g):\n        return is_red(x, r, g)\n\n    def is_green_light(x, r, g):\n        return is_green(x, r, g)\n\n    def is_red_light_ahead(x, r, g):\n        return is_red(x, r, g) and is_red_light(x + r, r, g)\n\n    def is_green_light_ahead(x, r, g):\n        return is_green(x, r, g) and is_green_light(x + r, r, g)\n\n    def is_red_light_behind(x, r, g):\n        return is_red(x, r, g) and is_red_light(x - r, r, g)\n\n    def is_green_light_behind(x, r, g):\n        return is_green(x, r, g) and is_green_light(x - r, r, g)\n\n    def is_red_light_ahead_behind(x, r, g):\n        return is_red(x, r, g) and is_red_light_ahead(x + r, r, g) and is_red_light_behind(x - r, r, g)\n\n    def is_green_light_ahead_behind(x, r, g):\n        return is_green(x, r, g) and is_green_light_ahead(x + r, r, g) and is_green_light_behind(x - r, r, g)\n\n    def is_red_light_ahead_behind_green_light(x, r, g):\n        return is_red(x, r, g) and is_red_light_ahead(x + r, r, g) and is_red_light_behind(x - r, r, g) and is_green_light_ahead(x + r, r, g) and is_green_light_behind(x - r, r, g)\n\n    def is_green_light_ahead_behind_red_light(x, r, g):\n        return is_green(x, r, g) and is_green_light_ahead(x + r, r, g) and is_green_light_behind(x - r, r, g) and is_red_light_ahead(x + r, r, g) and is_red_light_behind(x - r, r, g)\n\n    def is_red_light_ahead_behind_green_light_ahead(x, r, g):\n        return is_red(x, r, g) and is_red_light_ahead(x + r, r, g) and is_red_light_behind(x - r, r, g) and is_green_light_ahead(x + r, r, g) and is_green_light_behind(x - r, r, g) and is_green_light_ahead(x + r, r, g) and is_green_light_behind(x - r, r, g)\n\n    def is_green_light_ahead_behind_red_light_ahead(x, r, g):\n        return is_green(x, r, g) and is_green_light_ahead(x + r, r, g) and is_green_light_behind(x - r, r, g) and is_red_light_ahead(x + r, r, g) and is_red_light_behind(x - r, r, g) and is_red_light_ahead(x + r, r, g) and is_red_light_behind(x - r, r, g)\n\n    def is_red_light_ahead_behind_green_light_ahead_behind(x, r, g):\n        return is_red(x, r, g) and is_red_light_ahead(x + r, r, g) and is_red"
    },
    {
        "number": 3503,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    pairs = []\n    for _ in range(n):\n        a, b = map(int, stdin.strip().split())\n        pairs.append((a, b))\n\n    valid_answers = set()\n    for a, b in pairs:\n        for op in ['+', '-', '*']:\n            for c in ['=', '']:\n                expr = f\"{a}{op}{b}{c}\"\n                if expr not in valid_answers:\n                    valid_answers.add(expr)\n\n    if not valid_answers:\n        return \"impossible\"\n\n    for expr in valid_answers:\n        print(expr)\n\n    return \"\""
    },
    {
        "number": 3504,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, S = map(int, stdin.split())\n    drops = []\n    for _ in range(D):\n        x, y = map(int, stdin.split())\n        drops.append((x, y))\n    sensors = []\n    for _ in range(S):\n        x1, x2, y = map(int, stdin.split())\n        sensors.append((x1, x2, y))\n\n    for drop in drops:\n        for sensor in sensors:\n            if drop[0] >= sensor[0] and drop[0] <= sensor[1] and drop[1] >= sensor[2] and drop[1] <= sensor[3]:\n                return \"0\"\n\n    return \"1\""
    },
    {
        "number": 3505,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if a[i] + a[j] == a[k]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 3506,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    cheerleaders = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        cheerleaders.append((a, b))\n\n    goals_sportify = 0\n    goals_spoilify = 0\n    for a, b in cheerleaders:\n        if a < t:\n            goals_sportify += b - a\n        else:\n            goals_spoilify += b - a\n\n    if goals_sportify > goals_spoilify:\n        return str(goals_sportify - goals_spoilify)\n    else:\n        return str(goals_spoilify - goals_sportify)"
    },
    {
        "number": 3507,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, W, d = map(int, stdin.split())\n    if R > W:\n        R, W = W, R\n    if R > d:\n        R = d\n    if W > d:\n        W = d\n\n    def is_valid(piles):\n        for i in range(len(piles)):\n            if piles[i] == 0:\n                return False\n            if piles[i] > 1:\n                return False\n        return True\n\n    def arrange(piles):\n        if len(piles) == 1:\n            return piles\n\n        for i in range(len(piles)):\n            for j in range(i + 1, len(piles)):\n                if piles[i] + piles[j] > R:\n                    break\n                if piles[i] + piles[j] > W:\n                    piles[i], piles[j] = piles[j], piles[i]\n                    break\n\n        return arrange(piles)\n\n    arrange_piles = [0] * R\n    arrange_piles[0] = W\n\n    for i in range(1, R):\n        arrange_piles[i] = arrange_piles[i - 1] + 1\n\n    result = arrange_piles[R - 1] % (10**9 + 7)\n    return str(result)"
    },
    {
        "number": 3508,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pillars = list(map(int, stdin.readline().strip().split()))\n\n    max_damage = 0\n    tear_down = 0\n\n    for i in range(n):\n        if i == 0:\n            max_damage += pillars[i]\n        else:\n            max_damage += pillars[i] - pillars[i-1]\n\n        if pillars[i] > pillars[i-1]:\n            tear_down = i\n\n    return f\"{max_damage} {tear_down}\""
    },
    {
        "number": 3509,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n, m = map(int, stdin.split())\n\n    intersections = []\n    for _ in range(m):\n        u, v, t = map(int, stdin.split())\n        intersections.append((u, v, t))\n\n    def distance(u, v):\n        return abs(u - v)\n\n    def min_distance(u, v):\n        return min(distance(u, v), distance(v, u))\n\n    def min_time(u, v):\n        return min_distance(u, v) + intersections[u - 1][2]\n\n    def min_time_to_reach_intersection(u):\n        return min(min_time(u, v) for v in range(n + 1))\n\n    def min_time_to_reach_intersection_with_epsilon(u):\n        return min(min_time(u, v) for v in range(n + 1) if distance(u, v) <= 1)\n\n    def min_time_to_reach_intersection_with_epsilon_and_loop(u):\n        return min(min_time(u, v) for v in range(n + 1) if distance(u, v) <= 1 and v!= u)\n\n    def min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time(u):\n        return min(min_time(u, v) for v in range(n + 1) if distance(u, v) <= 1 and v!= u and min_time(u, v) <= min_time_to_reach_intersection_with_epsilon_and_loop(u))\n\n    def min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time_to_reach_intersection(u):\n        return min(min_time(u, v) for v in range(n + 1) if distance(u, v) <= 1 and v!= u and min_time(u, v) <= min_time_to_reach_intersection_with_epsilon_and_loop(u) and min_time_to_reach_intersection(u) <= min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time(u))\n\n    def min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time_to_reach_intersection_with_epsilon(u):\n        return min(min_time(u, v) for v in range(n + 1) if distance(u, v) <= 1 and v!= u and min_time(u, v) <= min_time_to_reach_intersection_with_epsilon_and_loop(u) and min_time_to_reach_intersection(u) <= min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time(u) and min_time_to_reach_intersection_with_epsilon(u) <= min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time_to_reach_intersection(u))\n\n    def min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time_to_reach_intersection_with_epsilon_and_loop(u):\n        return min(min_time(u, v) for v in range(n + 1) if distance(u, v) <= 1 and v!= u and min_time(u, v) <= min_time_to_reach_intersection_with_epsilon_and_loop(u) and min_time_to_reach_intersection(u) <= min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time(u) and min_time_to_reach_intersection_with_epsilon(u) <= min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time_to_reach_intersection(u) and min_time_to_reach_intersection_with_epsilon_and_loop(u) <= min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time_to_reach_intersection_with_epsilon(u))\n\n    def min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time_to_reach_intersection_with_epsilon_and_loop_and_min_time(u):\n        return min(min_time"
    },
    {
        "number": 3510,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    positions = list(map(str.lower, stdin.strip().split()))\n    positions.sort()\n\n    alice_positions = set(positions[:n])\n    bob_positions = set(positions[n:])\n\n    alice_winning_positions = set()\n    for position in alice_positions:\n        alice_winning_positions.add(position)\n        alice_winning_positions.add(position + 1)\n        alice_winning_positions.add(position + 2)\n\n    alice_winning_positions = list(alice_winning_positions)\n    alice_winning_positions.sort()\n\n    alice_winning_positions_count = 0\n    for position in alice_winning_positions:\n        alice_winning_positions_count += 1\n        alice_winning_positions_count += 1\n        alice_winning_positions_count += 1\n\n    if alice_winning_positions_count == 0:\n        return \"-1\"\n\n    alice_winning_positions_count -= 1\n    alice_winning_positions_count -= 1\n    alice_winning_positions_count -= 1\n\n    return f\"{alice_winning_positions_count} {alice_winning_positions_count} {alice_winning_positions_count}\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    queries = []\n    for _ in range(Q):\n        queries.append(list(map(int, stdin.split())))\n\n    def expected_value(a, b):\n        return (a * b) ** (-1)\n\n    for query in queries:\n        if query[0] == 1:\n            u, v = query[1], query[2]\n            if 1 <= u <= N and 1 <= v <= N:\n                expected_value_u = expected_value(a_i(u), a_i(v))\n                expected_value_v = expected_value(a_i(v), a_i(u))\n                expected_value_sum = expected_value_u + expected_value_v\n                expected_value_sum %= 1000000007\n                print(expected_value_sum)\n            else:\n                print(\"Invalid input\")\n        elif query[0] == 2:\n            a = sum(a_i(u) ** 2 for u in range(1, N + 1))\n            b = sum(a_i(v) ** 2 for v in range(1, N + 1))\n            expected_value_a = expected_value(a, b)\n            expected_value_b = expected_value(b, a)\n            expected_value_ab = expected_value(a, b)\n            expected_value_ab %= 1000000007\n            print(expected_value_a * expected_value_b)\n        else:\n            print(\"Invalid input\")\n\n    def a_i(i):\n        return sum(1 for _ in range(i))\n\n    return \"\""
    },
    {
        "number": 3512,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    cities = list(map(int, stdin.readline().strip().split()))\n    flight_durations = list(map(int, stdin.readline().strip().split()))\n\n    def min_total_flight_duration(start: int, end: int) -> int:\n        if start == end:\n            return 0\n\n        min_flight_duration = float('inf')\n        visited = set()\n\n        for i in range(N):\n            if i == start or i == end:\n                continue\n\n            if i < start or i > end:\n                min_flight_duration = min(min_flight_duration, flight_durations[i])\n\n        return min_flight_duration\n\n    min_total_flight_duration_list = []\n    for i in range(N):\n        for j in range(i + 1, N):\n            min_total_flight_duration_list.append(min_total_flight_duration(i, j))\n\n    min_total_flight_duration = min(min_total_flight_duration_list)\n\n    return str(min_total_flight_duration)\n"
    },
    {
        "number": 3513,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    k = 0\n    for i in range(1, X+1):\n        if i % (X+1) == 0:\n            k += 1\n    return str(k)"
    },
    {
        "number": 3514,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    map_str = stdin.strip()\n\n    def is_valid(row, col):\n        return 0 <= row < R and 0 <= col < C and map_str[row][col] == '.'\n\n    def disarm_building(row, col):\n        if is_valid(row - 1, col) and map_str[row - 1][col] == 'x':\n            disarm_building(row - 1, col)\n        if is_valid(row + 1, col) and map_str[row + 1][col] == 'x':\n            disarm_building(row + 1, col)\n        if is_valid(row, col - 1) and map_str[row][col - 1] == 'x':\n            disarm_building(row, col - 1)\n        if is_valid(row, col + 1) and map_str[row][col + 1] == 'x':\n            disarm_building(row, col + 1)\n\n    disarm_building(0, 0)\n    return str(R * C - R * C // 2)\n"
    },
    {
        "number": 3515,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    cities = []\n    for _ in range(N):\n        y, d, r = map(int, stdin.readline().strip().split())\n        cities.append((y, d, r))\n\n    def min_distance(city1, city2):\n        return abs(city1[0] - city2[0]) + abs(city1[1] - city2[1])\n\n    def min_time(city1, city2):\n        return min(city1[2] + abs(city1[0] - city2[0]), city1[2] + abs(city1[1] - city2[1]))\n\n    def min_total_time(cities):\n        min_distance = min(cities, key=lambda x: min_distance(x, cities[1]))\n        min_time = min(cities, key=lambda x: min_time(x, cities[1]))\n        return min_time + min_distance\n\n    def min_total_time_helper(cities, i, total_time):\n        if i == N:\n            return total_time\n        min_distance = min(cities, key=lambda x: min_distance(x, cities[i+1]))\n        min_time = min(cities, key=lambda x: min_time(x, cities[i+1]))\n        return min_total_time_helper(cities, i+1, total_time + min_time + min_distance)\n\n    return str(min_total_time_helper(cities, 1, 0))"
    },
    {
        "number": 3516,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *levels = map(int, stdin.split())\n    shortcuts = [int(x) for x in stdin.split()]\n    items = [0] * (n + 1)\n    for i, (x, s) in enumerate(zip(levels, shortcuts)):\n        items[x] += s\n    for i in range(1, n + 1):\n        items[i] = max(items[i - 1], items[i])\n    return str(min(items))"
    },
    {
        "number": 3517,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    steps = [int(stdin.readline().strip()) for _ in range(N)]\n    dependencies = [[] for _ in range(N)]\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            dependencies[i].append(j)\n            dependencies[j].append(i)\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if steps[i] > steps[j]:\n                steps[i], steps[j] = steps[j], steps[i]\n\n    for i in range(N):\n        if steps[i] == 0:\n            return \"0\"\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if steps[i] > steps[j] and dependencies[i]!= dependencies[j]:\n                return str(steps[i])\n\n    return \"infinity\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = []\n    for _ in range(m):\n        p, q, c = map(int, stdin.split())\n        pairs.append((p, q, c))\n\n    def is_friend(p, q):\n        return pairs[p - 1][0] == pairs[q - 1][0]\n\n    def calculate_carbon_dioxide(p, q):\n        return pairs[p - 1][2] + pairs[q - 1][2]\n\n    def find_friend(p):\n        for i in range(n):\n            if is_friend(p, i + 1):\n                return i + 1\n        return None\n\n    def find_friend_groups(p):\n        groups = []\n        for i in range(n):\n            if is_friend(p, i + 1):\n                groups.append(i + 1)\n        return groups\n\n    def find_friend_groups_with_carbon_dioxide(p):\n        groups = find_friend_groups(p)\n        carbon_dioxide = 0\n        for group in groups:\n            carbon_dioxide += calculate_carbon_dioxide(p, group)\n        return groups, carbon_dioxide\n\n    def find_friend_groups_with_carbon_dioxide_and_friends(p):\n        groups, carbon_dioxide = find_friend_groups_with_carbon_dioxide(p)\n        for i in range(n):\n            if is_friend(p, i + 1):\n                groups.append(i + 1)\n        return groups, carbon_dioxide\n\n    def find_friend_groups_with_carbon_dioxide_and_friends_and_groups(p):\n        groups, carbon_dioxide = find_friend_groups_with_carbon_dioxide_and_friends(p)\n        for group in groups:\n            groups.append(group)\n        return groups, carbon_dioxide\n\n    def find_friend_groups_with_carbon_dioxide_and_friends_and_groups_and_friends(p):\n        groups, carbon_dioxide = find_friend_groups_with_carbon_dioxide_and_friends_and_groups(p)\n        for i in range(n):\n            if is_friend(p, i + 1):\n                groups.append(i + 1)\n        return groups, carbon_dioxide\n\n    def find_friend_groups_with_carbon_dioxide_and_friends_and_groups_and_friends_and_groups(p):\n        groups, carbon_dioxide = find_friend_groups_with_carbon_dioxide_and_friends_and_groups_and_friends(p)\n        for group in groups:\n            groups.append(group)\n        return groups, carbon_dioxide\n\n    def find_friend_groups_with_carbon_dioxide_and_friends_and_groups_and_friends_and_groups_and_friends(p):\n        groups, carbon_dioxide = find_friend_groups_with_carbon_dioxide_and_friends_and_groups_and_friends_and_groups(p)\n        for group in groups:\n            groups.append(group)\n        return groups, carbon_dioxide\n\n    def find_friend_groups_with_carbon_dioxide_and_friends_and_groups_and_friends_and_groups_and_friends_and_groups(p):\n        groups, carbon_dioxide = find_friend_groups_with_carbon_dioxide_and_friends_and_groups_and_friends_and_groups_and_friends(p)\n        for group in groups:\n            groups.append(group)\n        return groups, carbon_dioxide\n\n    def find_friend_groups_with_carbon_dioxide_and_friends_and_groups_and_friends_and_groups_and_friends_and_groups_and_friends_and_groups(p):\n        groups, carbon_dioxide = find_friend_groups_with_carbon_dioxide_and_friends_and_groups_and_friends_and_groups_and_friends_and_groups_and_friends(p)\n        for group in groups:\n            groups.append(group)\n        return groups, carbon_dioxide\n\n    def find_friend_groups_with_carbon_dioxide_and_friends_and_groups_and_friends_and_groups_and_friends_and_groups_and_friends_and_groups_and_friends_and_"
    },
    {
        "number": 3519,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    turns = 0\n    seen = set()\n    for i in range(N):\n        card1 = random.choice(range(1, 11))\n        card2 = random.choice(range(1, 11))\n        if card1 == card2:\n            continue\n        if card1 in seen:\n            card1 = random.choice(range(1, 11))\n        if card2 in seen:\n            card2 = random.choice(range(1, 11))\n        seen.add(card1)\n        seen.add(card2)\n        if card1 == card2:\n            turns += 1\n        else:\n            turns += 2\n    return str(turns)"
    },
    {
        "number": 3520,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, c = map(int, stdin.split())\n    t = [0] * p\n    x = [0] * p\n    y = [0] * p\n\n    for i in range(p):\n        t[i], x[i], y[i] = map(int, stdin.split())\n\n    max_seconds = 0\n    for i in range(n - 1):\n        if t[i + 1] - t[i] > c:\n            max_seconds = max(max_seconds, t[i + 1] - t[i])\n\n    return str(max_seconds)\n"
    },
    {
        "number": 3521,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    stars = []\n    for _ in range(N):\n        T, s, a = map(float, stdin.readline().strip().split())\n        stars.append((T, s, a))\n\n    def dist(a, b):\n        return abs(a - b)\n\n    def max_distance(stars):\n        max_dist = 0\n        for i in range(N):\n            for j in range(i + 1, N):\n                a = stars[i][2]\n                b = stars[j][2]\n                max_dist = max(max_dist, dist(a, b) + stars[i][0] + stars[j][0])\n        return max_dist\n\n    max_dist = max_distance(stars)\n    return str(max_dist)\n"
    },
    {
        "number": 3522,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    batteries = list(map(int, stdin.split()))\n    power_outputs = [batteries[i:i+k] for i in range(0, len(batteries), k)]\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(power_outputs[i] - power_outputs[j])\n            if diff < min_diff:\n                min_diff = diff\n    return str(min_diff)"
    },
    {
        "number": 3523,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, N1, N5, N10, N25 = map(int, stdin.split())\n\n    if P > 100000000:\n        return \"Impossible\"\n\n    coins = [N1, N5, N10, N25]\n    max_coins = 0\n\n    for i in range(len(coins)):\n        for j in range(i + 1, len(coins)):\n            for k in range(j + 1, len(coins)):\n                for l in range(k + 1, len(coins)):\n                    for m in range(l + 1, len(coins)):\n                        for n in range(m + 1, len(coins)):\n                            total_coins = coins[i] + coins[j] + coins[k] + coins[l] + coins[m] + coins[n]\n                            if total_coins == P:\n                                max_coins = max(max_coins, total_coins)\n\n    return str(max_coins)\n"
    },
    {
        "number": 3524,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s_1 = s[:s.index(s[0])]\n    s_2 = s[s.index(s[0])+1:]\n    if s_1 == s_2:\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 3525,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L, B = map(int, stdin.split())\n    S, D = map(int, stdin.split())\n    locks = []\n    for _ in range(L):\n        a, b, x, y = map(int, stdin.split())\n        locks.append((a, b, x, y))\n\n    def is_valid(a, b, x, y):\n        return 1 <= a <= N and 1 <= b <= N and a!= b and 1 <= x <= B and 1 <= y <= B and x <= y\n\n    def is_passable(a, b, x, y):\n        for lock in locks:\n            if lock[0] == a and lock[1] == b and lock[2] <= x <= lock[3] and lock[2] <= y <= lock[3]:\n                return True\n        return False\n\n    def count_passable(a, b, x, y):\n        count = 0\n        for lock in locks:\n            if lock[0] == a and lock[1] == b and lock[2] <= x <= lock[3] and lock[2] <= y <= lock[3]:\n                count += 1\n        return count\n\n    def main():\n        if not is_valid(S, D, 1, B):\n            print(\"Invalid room\")\n            return\n\n        if count_passable(S, D, 1, B) == 0:\n            print(\"No passable rooms\")\n            return\n\n        print(count_passable(S, D, 1, B))\n\n    main()"
    },
    {
        "number": 3526,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    hints = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        hints.append((l, r))\n\n    def count_answer_sequences(l, r):\n        count = 0\n        for i in range(n):\n            if i == l or i == r:\n                count += 1\n        return count\n\n    answer_sequences = set()\n    for l, r in hints:\n        count = count_answer_sequences(l, r)\n        answer_sequences.add(count)\n\n    return str(sum(answer_sequences))"
    },
    {
        "number": 3527,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, el = map(int, stdin.split())\n    cables = []\n    for _ in range(el):\n        a, b = map(int, stdin.split())\n        cables.append((a, b))\n\n    def distance(a, b):\n        return abs(a - b)\n\n    def hops(a, b):\n        return distance(a, b)\n\n    def min_hops(cables):\n        return min(hops(a, b) for a, b in cables)\n\n    def max_hops(cables):\n        return max(hops(a, b) for a, b in cables)\n\n    def max_distance(cables):\n        return max(distance(a, b) for a, b in cables)\n\n    def max_hops_distance(cables):\n        return max(min_hops(cables), max_hops(cables))\n\n    def max_hops_distance_and_cables(cables):\n        return max_hops_distance(cables), cables\n\n    cables = sorted(cables, key=lambda x: x[0])\n    max_hops_distance_and_cables(cables)\n    return str(max_hops_distance_and_cables[0])\n"
    },
    {
        "number": 3528,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nails = []\n    for _ in range(n):\n        x, y = map(int, stdin.strip().split())\n        nails.append((x, y))\n\n    nails.sort(key=lambda x: x[0])\n    areas = []\n    for i in range(n - 2):\n        area = 0\n        for j in range(i + 1, n):\n            area += abs(nails[i][0] - nails[j][0]) * abs(nails[i][1] - nails[j][1])\n        areas.append(area)\n\n    return '\\n'.join(map(str, areas))"
    },
    {
        "number": 3529,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        color, from_node, to_node = map(str, stdin.split())\n        edges.append((color, from_node, to_node))\n\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[1]].append(edge[2])\n        graph[edge[2]].append(edge[1])\n\n    def dfs(node, visited):\n        if node in visited:\n            return False\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited and dfs(neighbor, visited):\n                return True\n        return False\n\n    for i in range(n):\n        if not dfs(i, set()):\n            return \"0\"\n\n    return \"1\""
    },
    {
        "number": 3530,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n\n    def max_fun(i, k):\n        if k == 0:\n            return 0\n        return a[i] - (k - 1) ** 2 * b[i]\n\n    def max_fun_time(i, k):\n        return t[i]\n\n    max_fun_values = [max_fun(i, k) for i in range(N) for k in range(Q)]\n    max_fun_times = [max_fun_time(i, k) for i in range(N) for k in range(Q)]\n\n    max_fun_values.sort()\n    max_fun_times.sort()\n\n    for i in range(Q):\n        print(max_fun_values[i], end=\" \")\n\n    return \"\""
    },
    {
        "number": 3531,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, w = map(int, stdin.split())\n    special_places = list(map(int, stdin.split()))\n    potential_trails = []\n\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        potential_trails.append((a, b, c))\n\n    total_cost = 0\n    for i in range(k):\n        for j in range(i + 1, k):\n            if i == j:\n                continue\n            for k in range(j + 1, k + 1):\n                if k == i:\n                    continue\n                for l in range(l + 1, k + 1):\n                    if l == j:\n                        continue\n                    for m in range(m + 1, m + 1):\n                        if m == l:\n                            continue\n                        for n in range(n + 1, n + 1):\n                            if n == i or n == j or n == k or n == l or n == m:\n                                continue\n                            for o in range(o + 1, o + 1):\n                                if o == j or o == k or o == l or o == m or o == n:\n                                    continue\n                                for p in range(p + 1, p + 1):\n                                    if p == i or p == j or p == k or p == l or p == m or p == n or p == o:\n                                        continue\n                                    for q in range(q + 1, q + 1):\n                                        if q == i or q == j or q == k or q == l or q == m or q == n or q == o or q == p:\n                                            continue\n                                        for r in range(r + 1, r + 1):\n                                            if r == i or r == j or r == k or r == l or r == m or r == n or r == o or r == p or r == q:\n                                                continue\n                                            for s in range(s + 1, s + 1):\n                                                if s == i or s == j or s == k or s == l or s == m or s == n or s == o or s == p or s == q or s == r:\n                                                    continue\n                                                    total_cost += potential_trails[i - 1][j - 1][c - 1]\n\n    if total_cost == 0:\n        return \"-1\"\n    else:\n        return str(total_cost)"
    },
    {
        "number": 3532,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    mirko_string = stdin.strip()\n    explosion = stdin.strip()\n\n    explosion_set = set(explosion)\n    if len(explosion_set)!= len(explosion):\n        return \"FRULA\"\n\n    exploded_string = \"\"\n    for char in mirko_string:\n        if char in explosion_set:\n            exploded_string += char\n        else:\n            exploded_string += char\n\n    return exploded_string"
    },
    {
        "number": 3533,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    tickets = []\n    for _ in range(N):\n        entrance, exit = map(int, stdin.strip().split())\n        tickets.append((entrance, exit))\n\n    entrances = set(t[0] for t in tickets)\n    exits = set(t[1] for t in tickets)\n\n    def is_valid(entrance, exit):\n        return entrance in entrances and exit in exits\n\n    def calculate_toll(entrance, exit):\n        entrance_toll = entrances.difference({entrance})\n        exit_toll = exits.difference({exit})\n        return sum(entrance_toll) + sum(exit_toll)\n\n    result = 0\n    for entrance, exit in tickets:\n        if is_valid(entrance, exit):\n            result += calculate_toll(entrance, exit)\n\n    return str(result)\n"
    },
    {
        "number": 3534,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    max_keys = 0\n    max_key = -1\n\n    for i in range(n):\n        if a[i] > max_key:\n            max_key = a[i]\n            max_keys = 1\n        elif a[i] == max_key:\n            max_keys += 1\n\n    k = 1\n    while max_keys > 0:\n        if a[k - 1] > a[k]:\n            max_keys -= 1\n        else:\n            break\n        k += 1\n\n    return str(max_keys) + \" \" + str(k)\n"
    },
    {
        "number": 3535,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    valid_states = 0\n\n    for _ in range(K):\n        y, x = map(int, stdin.split())\n        if (y, x) in [(y, x + 1) for y in range(N) for x in range(M)] or (y, x) in [(y, x - 1) for y in range(N) for x in range(M)]:\n            valid_states += 1\n\n    return str(valid_states)"
    },
    {
        "number": 3536,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    p = int(stdin.readline().strip())\n\n    def is_heap(node: int) -> bool:\n        left = 2 * node + 1\n        right = 2 * node + 2\n        return left < n and b < b[left] and b < b[right]\n\n    def heapify(node: int) -> None:\n        largest = node\n        left = 2 * node + 1\n        right = 2 * node + 2\n\n        if left < n and b < b[left]:\n            largest = left\n\n        if right < n and b < b[right]:\n            largest = right\n\n        if largest!= node:\n            b[node], b[largest] = b[largest], b[node]\n            heapify(largest)\n\n    def build_heap(node: int) -> None:\n        heapify(node)\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(i)\n\n    def heap_to_list(node: int) -> list:\n        result = []\n        while node!= 0:\n            result.append(node)\n            node = b[node]\n        return result[::-1]\n\n    def heap_to_string(node: int) -> str:\n        return''.join(str(b[node]) for node in heap_to_list(node))\n\n    def heap_to_rational(node: int) -> str:\n        return str(b[node]) +'' + str(b[node]) +'' + str(b[node])\n\n    def heap_to_probability(node: int) -> str:\n        return str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node])\n\n    def heap_to_probability_mod(node: int) -> str:\n        return str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node])\n\n    def heap_to_probability_mod_inv(node: int) -> str:\n        return str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node])\n\n    def heap_to_probability_mod_inv_mod(node: int) -> str:\n        return str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node])\n\n    def heap_to_probability_mod_inv_mod_inv(node: int) -> str:\n        return str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) +'' + str(b[node]) + '"
    },
    {
        "number": 3537,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    flights = []\n    for _ in range(m):\n        a, b, s, e = map(int, stdin.split())\n        flights.append((a, b, s, e))\n\n    def min_frustration(flight):\n        a, b, s, e = flight\n        return abs(s - e) + abs(e - a)\n\n    itinerary = sorted(flights, key=min_frustration)\n    total_frustration = sum(min_frustration(flight) for flight in itinerary)\n    return str(total_frustration)\n"
    },
    {
        "number": 3538,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    frogs = []\n    for _ in range(n):\n        l, w, h = map(int, stdin.split())\n        frogs.append((l, w, h))\n\n    def can_escape(frog, pile):\n        if pile:\n            pile_frog = pile[0]\n            pile_height = pile[1]\n            pile_weight = pile[2]\n            pile_leap_capacity = pile[3]\n            pile_weight_sum = pile_weight + frog[2]\n            pile_height_sum = pile_height + frog[1]\n            pile_leap_capacity_sum = pile_leap_capacity + frog[0]\n            if pile_height_sum + pile_leap_capacity_sum > d:\n                return False\n            if pile_weight_sum > pile_leap_capacity_sum:\n                return False\n            if pile_frog[2] + pile_leap_capacity_sum > d:\n                return False\n            if pile_frog[2] + pile_leap_capacity_sum > pile_height_sum:\n                return False\n            return True\n        else:\n            return True\n\n    def max_escape_frogs(piles):\n        max_escape_count = 0\n        for pile in piles:\n            if can_escape(frogs[0], pile):\n                max_escape_count += 1\n        return max_escape_count\n\n    piles = []\n    for i in range(n):\n        pile = []\n        pile.append(frogs[i])\n        pile.append(d)\n        pile.append(frogs[i][2] + frogs[i][0])\n        pile.append(frogs[i][0])\n        piles.append(pile)\n\n    return str(max_escape_frogs(piles))\n"
    },
    {
        "number": 3539,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n\n    def dfs(u, visited, path, color):\n        if visited[u]:\n            return\n        visited[u] = True\n        path.append(u)\n        for v in graph[u]:\n            if not visited[v]:\n                dfs(v, visited, path, color)\n        if len(path) == 2:\n            if color == 1:\n                return 1\n            else:\n                return 0\n        path.pop()\n\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            graph[i].append(j)\n            graph[j].append(i)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i == j:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in a:\n                continue\n            if i in a and j in a:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in a:\n                continue\n            if i in a and j in a:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in b:\n                continue\n            if i in a and j in b:\n                continue\n            if i in b and j in"
    },
    {
        "number": 3540,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    puzzle = []\n    for line in stdin.splitlines():\n        puzzle.append(line)\n\n    # Check if the puzzle is valid\n    if len(puzzle)!= 4:\n        return \"Invalid puzzle\"\n\n    # Initialize the minimum number of moves\n    min_moves = 13\n\n    # Check if the puzzle is solvable\n    for i in range(4):\n        for j in range(4):\n            if puzzle[i][j] == \"R\":\n                if i > 0 and puzzle[i-1][j] == \"G\":\n                    min_moves = min(min_moves, 1)\n                if i < 3 and puzzle[i+1][j] == \"G\":\n                    min_moves = min(min_moves, 1)\n            elif puzzle[i][j] == \"G\":\n                if j > 0 and puzzle[i][j-1] == \"B\":\n                    min_moves = min(min_moves, 1)\n                if j < 3 and puzzle[i][j+1] == \"B\":\n                    min_moves = min(min_moves, 1)\n            elif puzzle[i][j] == \"B\":\n                if i > 0 and puzzle[i-1][j] == \"R\":\n                    min_moves = min(min_moves, 1)\n                if i < 3 and puzzle[i+1][j] == \"R\":\n                    min_moves = min(min_moves, 1)\n                if j > 0 and puzzle[i][j-1] == \"G\":\n                    min_moves = min(min_moves, 1)\n                if j < 3 and puzzle[i][j+1] == \"G\":\n                    min_moves = min(min_moves, 1)\n            elif puzzle[i][j] == \"Y\":\n                if i > 0 and puzzle[i-1][j] == \"R\":\n                    min_moves = min(min_moves, 1)\n                if i < 3 and puzzle[i+1][j] == \"R\":\n                    min_moves = min(min_moves, 1)\n                if j > 0 and puzzle[i][j-1] == \"G\":\n                    min_moves = min(min_moves, 1)\n                if j < 3 and puzzle[i][j+1] == \"G\":\n                    min_moves = min(min_moves, 1)\n                if i > 0 and j > 0 and puzzle[i-1][j-1] == \"B\":\n                    min_moves = min(min_moves, 1)\n                if i > 0 and j < 3 and puzzle[i-1][j+1] == \"B\":\n                    min_moves = min(min_moves, 1)\n                if i < 3 and j > 0 and puzzle[i+1][j-1] == \"B\":\n                    min_moves = min(min_moves, 1)\n                if i < 3 and j < 3 and puzzle[i+1][j+1] == \"B\":\n                    min_moves = min(min_moves, 1)\n\n    return str(min_moves)"
    },
    {
        "number": 3541,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n\n    def get_candy_value(candy: int) -> int:\n        if candy < 0:\n            return candy\n        else:\n            return candy + 1\n\n    def get_candy_assignment(candy: int) -> str:\n        if candy < 0:\n            return \"A\"\n        else:\n            return \"B\"\n\n    candy_values = [get_candy_value(candy) for candy in a]\n    candy_assignments = [get_candy_assignment(candy) for candy in a]\n\n    for i in range(1, N):\n        candy_values.append(candy_values[-1] + b[i - 1])\n        candy_assignments.append(candy_assignments[-1] + get_candy_assignment(b[i - 1]))\n\n    candy_values.sort()\n    candy_assignments.sort()\n\n    result = \"\"\n    for i in range(N):\n        result += candy_assignments[i]\n\n    return result"
    },
    {
        "number": 3542,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    points = []\n    for _ in range(N):\n        line = stdin.strip()\n        x, y = map(int, line.split())\n        points.append((x, y))\n\n    def is_valid(x1, y1, x2, y2):\n        return 0 <= x1 < N and 0 <= y1 < M and 0 <= x2 < N and 0 <= y2 < M\n\n    def distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def connect(x1, y1, x2, y2):\n        if is_valid(x1, y1, x2, y2):\n            wires = [(x1, y1), (x2, y2)]\n            for i in range(len(wires)):\n                for j in range(i + 1, len(wires)):\n                    if distance(wires[i][0], wires[i][1], wires[j][0], wires[j][1]) <= 1:\n                        wires[i], wires[j] = wires[j], wires[i]\n            return wires\n        else:\n            return []\n\n    wires = []\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            wires.extend(connect(points[i][0], points[i][1], points[j][0], points[j][1]))\n\n    if not wires:\n        return \"IMPOSSIBLE\"\n    else:\n        return str(min(wires))\n"
    },
    {
        "number": 3543,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dictionary = {}\n    for i in range(n):\n        word = input()\n        dictionary[word] = dictionary.get(word, 0) + 1\n\n    min_keystrokes = float('inf')\n    for i in range(m):\n        word = input()\n        if word in dictionary:\n            word_length = len(word)\n            if word_length < min_keystrokes:\n                min_keystrokes = word_length\n\n    return str(min_keystrokes)\n"
    },
    {
        "number": 3544,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    X = 12\n    widest_row = 1\n    for i in range(1, n + 1):\n        X = X - 1\n        if X < 0:\n            X = 12\n        widest_row = max(widest_row, i)\n    return str(widest_row)"
    },
    {
        "number": 3545,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    observed_output = stdin.strip().split()\n\n    # Initialize the result\n    result = []\n\n    # Iterate over the observed output\n    for i in range(len(observed_output)):\n        # Initialize the current token\n        current_token = \"\"\n\n        # Iterate over the observed output\n        for j in range(len(observed_output)):\n            # If the current token is not the same as the next observed output, add it to the result\n            if observed_output[i]!= observed_output[j]:\n                result.append(current_token)\n                current_token = observed_output[i]\n\n    # Add the last token to the result\n    result.append(current_token)\n\n    # Sort the result lexicographically\n    result.sort()\n\n    # Join the result into a string\n    return \" \".join(result)\n"
    },
    {
        "number": 3546,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    proofs = []\n    for _ in range(p):\n        l, k, *deps = map(int, stdin.split())\n        proofs.append((l, k, deps))\n\n    shortest_length = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(p):\n                for l in range(proofs[k][0], proofs[k][0] + proofs[k][1]):\n                    for d in proofs[k][2]:\n                        if l == proofs[k][0] + proofs[k][1] and d == i:\n                            shortest_length = min(shortest_length, l)\n\n    return str(shortest_length)"
    },
    {
        "number": 3547,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    area = 0\n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, stdin.strip().split())\n        area += (x2 - x1) * (y2 - y1)\n    return round(area, 2)"
    },
    {
        "number": 3548,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(int, stdin.split())\n    drinks = []\n    for _ in range(P):\n        a, b = map(int, stdin.split())\n        drinks.append((a, b))\n\n    nights = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if drinks[i][0] == drinks[j][0] and drinks[i][1] == drinks[j][1]:\n                nights += 1\n                break\n\n    return str(nights % (10**9 + 7))"
    },
    {
        "number": 3549,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3 = map(int, stdin.split())\n    x1, x2, x3 = map(int, stdin.split())\n    y1, y2, y3 = map(int, stdin.split())\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    def distance(x, y, m):\n        return (x - y) % m\n\n    def is_within_distance(x, y, z, m):\n        t = distance(x, z, m)\n        return x == x + t % m and abs(t) <= y\n\n    z = 0\n    for i in range(3):\n        if is_within_distance(x1, y1, z, m1):\n            z += distance(x1, y1, m1)\n        if is_within_distance(x2, y2, z, m2):\n            z += distance(x2, y2, m2)\n        if is_within_distance(x3, y3, z, m3):\n            z += distance(x3, y3, m3)\n\n    return str(z)"
    },
    {
        "number": 3550,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for line in stdin.splitlines():\n        if line.startswith(\"var\"):\n            name, value = line.split(\" = \")\n            result += f\"{name} = '{value}'\"\n        elif line.startswith(\"print\"):\n            expr = line.split()[1]\n            result += f\"{expr}\\n\"\n    return result"
    },
    {
        "number": 3551,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    bottles = [0] * N\n    for i in range(N):\n        bottles[i] = int(input())\n\n    moves = []\n    for i in range(N):\n        if bottles[i] >= T:\n            moves.append(\"fill \" + str(i + 1))\n            bottles[i] -= T\n        elif bottles[i] > 0:\n            moves.append(\"discard \" + str(i + 1))\n            bottles[i] = 0\n\n    moves.append(\"transfer \" + str(N) + \" 0\")\n    moves.append(\"transfer \" + str(N) + \" 1\")\n\n    return \"\\n\".join(moves)"
    },
    {
        "number": 3552,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n > 10**9 or m > 10**7 or k > 10**7:\n        return \"Invalid input\"\n\n    def divide_groups(groups):\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        return groups\n\n    def attack_enemy(groups):\n        for i in range(m):\n            for j in range(i + 1, m):\n                groups[i].append(groups[j].pop(0))\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            for j in range(i + 1, m):\n                groups[i].append(groups[j].pop(0))\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g for g in groups[i] if g > 0]\n        for i in range(m):\n            groups[i] = [g"
    },
    {
        "number": 3553,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    for _ in range(M):\n        query = stdin.strip()\n        if query == \"1 p v\":\n            p, v = map(int, query.split())\n            arr[p - 1] = v\n        elif query == \"2\":\n            length = 0\n            for i in range(1, N + 1):\n                if arr[i - 1] == K:\n                    length += 1\n            print(length)\n        else:\n            print(-1)\n\n    return '\\n'.join(map(str, arr))"
    },
    {
        "number": 3554,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, W, C = map(int, stdin.split())\n    total_ml = W * C\n    max_carrying_capacity = C\n    total_ml_left = total_ml\n    total_ml_to_carry = 0\n\n    while total_ml_left > 0:\n        total_ml_to_carry = min(total_ml_left, max_carrying_capacity)\n        total_ml_left -= total_ml_to_carry\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left += 1\n\n        if total_ml_to_carry > 0:\n            total_ml_to_carry -= 1\n            total_ml_left +="
    },
    {
        "number": 3555,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    toys = []\n    trees = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        toys.append((x, y))\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        trees.append((x, y))\n\n    def distance(p1, p2):\n        return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n\n    def get_next_toy(p, toys):\n        min_distance = float('inf')\n        min_toy = None\n        for toy in toys:\n            if distance(p, toy) < min_distance:\n                min_distance = distance(p, toy)\n                min_toy = toy\n        return min_toy\n\n    def get_next_tree(p, trees):\n        min_distance = float('inf')\n        min_tree = None\n        for tree in trees:\n            if distance(p, tree) < min_distance:\n                min_distance = distance(p, tree)\n                min_tree = tree\n        return min_tree\n\n    def get_leash_length(p, toys, trees):\n        next_toy = get_next_toy(p, toys)\n        next_tree = get_next_tree(p, trees)\n        if next_toy is None or next_tree is None:\n            return 0\n        return distance(p, next_toy) + distance(p, next_tree)\n\n    leash_length = get_leash_length((0, 0), toys, trees)\n    return f\"{leash_length:.2f}\""
    },
    {
        "number": 3556,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, q = map(int, stdin.split())\n    employees = []\n    for _ in range(m):\n        id, salary, height = map(int, stdin.split())\n        employees.append((id, salary, height))\n\n    def is_chairperson(id):\n        return id == employees[0][0]\n\n    def get_boss(id):\n        for employee in employees:\n            if employee[0] == id:\n                return employee[0]\n        return None\n\n    def get_subordinates(id):\n        subordinates = []\n        for employee in employees:\n            if employee[0] == id:\n                subordinates.append(employee[0])\n                for subordinate in get_subordinates(employee[0]):\n                    subordinates.append(subordinate)\n        return subordinates\n\n    def get_immediate_boss(id):\n        boss = get_boss(id)\n        if boss is None:\n            return None\n        return get_immediate_boss(boss)\n\n    def get_subordinates_count(id):\n        return len(get_subordinates(id))\n\n    for _ in range(q):\n        id = int(stdin.strip())\n        if is_chairperson(id):\n            print(0, end=\" \")\n        else:\n            boss = get_immediate_boss(id)\n            if boss is None:\n                print(0, end=\" \")\n            else:\n                print(boss, get_subordinates_count(boss))"
    },
    {
        "number": 3557,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n    p.sort()\n    max_chaos = 0\n    for i in range(n):\n        max_chaos = max(max_chaos, p[i] * (i + 1))\n    return str(max_chaos)"
    },
    {
        "number": 3558,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    buildings = []\n    for _ in range(N):\n        building = list(map(int, stdin.split()))\n        buildings.append(building)\n\n    buildings.sort(key=lambda x: x[0])\n\n    covered_length = 0\n    for i in range(N):\n        if buildings[i][0] == 1:\n            covered_length += buildings[i][1]\n\n    return str(covered_length)"
    },
    {
        "number": 3559,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, t = map(int, stdin.split())\n    map_str = stdin.strip()\n    map = [[int(c) for c in row] for row in map_str.split('\\n')]\n\n    # Initialize the map with Zerglings\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 1:\n                map[i][j] = 2\n\n    # Simulate the Zerg rush\n    for _ in range(t):\n        # Find the closest Zergling to attack\n        closest_attacking_zergling = None\n        closest_attacking_distance = float('inf')\n        for i in range(N):\n            for j in range(N):\n                if map[i][j] == 2:\n                    distance = abs(i - N // 2) + abs(j - N // 2)\n                    if distance < closest_attacking_distance:\n                        closest_attacking_zergling = (i, j)\n                        closest_attacking_distance = distance\n\n        # Attack the closest Zergling\n        for i in range(N):\n            for j in range(N):\n                if map[i][j] == 2:\n                    if i == closest_attacking_zergling[0] and j == closest_attacking_zergling[1]:\n                        map[i][j] = 0\n                    else:\n                        map[i][j] -= 1\n\n        # Move the Zerglings\n        for i in range(N):\n            for j in range(N):\n                if map[i][j] == 2:\n                    if i == N // 2:\n                        map[i][j] = 0\n                    elif j == N // 2:\n                        map[i][j] = 0\n                    else:\n                        for k in range(N):\n                            if map[i][k] == 2:\n                                if i == k:\n                                    map[i][j] = 0\n                                elif j == k:\n                                    map[i][j] = 0\n                                else:\n                                    map[i][j] -= 1\n\n        # Mark the dead Zerglings\n        for i in range(N):\n            for j in range(N):\n                if map[i][j] == 0:\n                    map[i][j] = 1\n\n    # Print the map\n    for row in map:\n        print(''.join(str(c) for c in row))\n\n    return '\\n'.join(str(c) for c in map)"
    },
    {
        "number": 3560,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    barbarians = []\n    for _ in range(N):\n        word = input()\n        barbarians.append(word)\n\n    for _ in range(Q):\n        T = int(input())\n        if T == 1:\n            P = input()\n            count = 0\n            for i in range(len(barbarians)):\n                if barbarians[i] in P:\n                    count += 1\n            print(count)\n        elif T == 2:\n            S = int(input())\n            answer = 0\n            for i in range(len(barbarians)):\n                if i == S - 1:\n                    answer += 1\n            print(answer)"
    },
    {
        "number": 3561,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, S, C, K = map(int, stdin.split())\n    if W + S + C > K:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 3562,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(float, stdin.split()))\n    b = list(map(float, stdin.split()))\n    c = list(map(float, stdin.split()))\n\n    max_grade = 0\n    for i in range(n):\n        for t_ in range(t):\n            grade = a[i] * t_ ** 2 + b[i] * t_ + c[i]\n            if grade > max_grade:\n                max_grade = grade\n\n    return str(max_grade)"
    },
    {
        "number": 3563,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    holes = list(map(int, stdin.split()[1:]))\n\n    # Find the convex hull of the holes\n    hull = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (holes[i][0] - holes[j][0]) ** 2 + (holes[i][1] - holes[j][1]) ** 2 <= 1:\n                hull.append((holes[i][0], holes[i][1]))\n\n    # Find the convex hull of the convex hull\n    hull_hull = []\n    for i in range(len(hull)):\n        for j in range(i + 1, len(hull)):\n            if (hull[i][0] - hull[j][0]) ** 2 + (hull[i][1] - hull[j][1]) ** 2 <= 1:\n                hull_hull.append((hull[i][0], hull[i][1]))\n\n    # Find the number of straight lines that can cover the holes\n    ell = 0\n    for i in range(len(hull)):\n        for j in range(i + 1, len(hull)):\n            if (hull[i][0] - hull[j][0]) ** 2 + (hull[i][1] - hull[j][1]) ** 2 <= 1:\n                ell += 1\n\n    return str(ell)\n"
    },
    {
        "number": 3564,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    islands = []\n    palm_trees = []\n    for _ in range(n):\n        islands.append(list(map(int, stdin.split())))\n    for _ in range(m):\n        palm_trees.append(list(map(int, stdin.split())))\n\n    def is_valid(x, y, r, h):\n        return 0 <= x <= n - 1 and 0 <= y <= m - 1 and islands[x][y] == 0 and palm_trees[x][y] == 0\n\n    def distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def climb_palm_tree(x, y, r, h):\n        for i in range(x - 1, -1, -1):\n            for j in range(y - 1, -1, -1):\n                if is_valid(i, j, r, h):\n                    islands[i][j] = 1\n                    palm_trees[i][j] = 1\n                    return distance(i, j, x, y) + 1\n        return 0\n\n    def find_tunnel(x1, y1, x2, y2):\n        if is_valid(x1, y1, 1, 1) and is_valid(x2, y2, 1, 1):\n            return climb_palm_tree(x1, y1, 1, 1) + climb_palm_tree(x2, y2, 1, 1)\n        return 0\n\n    tunnels = []\n    for i in range(n):\n        for j in range(m):\n            if islands[i][j] == 0:\n                tunnels.append((i, j))\n\n    for i in range(k):\n        x1, y1, r1, h1 = map(int, stdin.split())\n        x2, y2, r2, h2 = map(int, stdin.split())\n        if find_tunnel(x1, y1, x2, y2) < 1:\n            return \"impossible\"\n\n    return min(tunnels, key=lambda x: find_tunnel(x[0], x[1], tunnels[0][0], tunnels[0][1]))[1]\n"
    },
    {
        "number": 3565,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = []\n    for _ in range(n):\n        city = input()\n        cities.append(city)\n\n    routes = []\n    for _ in range(m):\n        src, dst, cost = map(str, input().split())\n        routes.append((src, dst, cost))\n\n    assignments = []\n    for _ in range(n):\n        assignment = []\n        for _ in range(4):\n            assignment.append(input())\n        assignments.append(assignment)\n\n    min_cost = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    for m in range(l + 1, n):\n                        if i!= j and i!= k and i!= l and i!= m:\n                            for n in range(m + 1, n):\n                                if j!= k and j!= l and j!= m:\n                                    for o in range(n + 1, n):\n                                        if k!= l and k!= m:\n                                            for p in range(o + 1, o + 4):\n                                                if l!= m:\n                                                    for q in range(p + 1, p + 4):\n                                                        if m!= n:\n                                                            for r in range(q + 1, q + 4):\n                                                                if n!= o:\n                                                                    for s in range(r + 1, r + 4):\n                                                                        if o!= p:\n                                                                            for t in range(s + 1, s + 4):\n                                                                                if p!= q:\n                                                                                    for u in range(t + 1, t + 4):\n                                                                                        if q!= r:\n                                                                                            for v in range(u + 1, u + 4):\n                                                                                                if r!= s:\n                                                                                                    for w in range(v + 1, v + 4):\n                                                                                                        if s!= t:\n                                                                                                            for x in range(w + 1, w + 4):\n                                                                                                                if t!= u:\n                                                                                                                    for y in range(x + 1, x + 4):\n                                                                                                                        if u!= v:\n                                                                                                                            for z in range(y + 1, y + 4):\n                                                                                                                                if v!= w:\n                                                                                                                                    for aa in range(z + 1, z + 4):\n                                                                                                                                        if w!= x:\n                                                                                                                                            for ab in range(aa + 1, aa + 4):\n                                                                                                                                                if x!= y:\n                                                                                                                                                    for ac in range(ab + 1, ab + 4):\n                                                                                                                                                        if y!= z:\n                                                                                                                                                            for ad in range(ac + 1, ac + 4):\n                                                                                                                                                                if z!= aa:\n                                                                                                                                                                    for ae in range(ad + 1, ad + 4):\n                                                                                                                                        if aa!= ab:\n                                                                                                                                            for af in range(ae + 1, ae + 4):\n                                                                                                                                                if ab!= ac:\n                                                                                                                                                    for ag in range(af + 1, af + 4):\n                                                                                                                                                        if ac!= ad:\n                                                                                                                                                            for ah in range(ag + 1, ag + 4):\n                                                                                                                                                                if ad!= ae:\n                                                                                                                                                                    for ai in range(ah + 1, ah + 4):\n                                                                                                                                        if ae!= af:\n                                                                                                                                            for aj in range(ai + 1, ai + 4):\n                                                                                                                                                if af!= ag:\n                                                                                                                                                    for ak in range(aj + 1, aj + 4):\n                                                                                                                                                        if ag!= ai:\n                                                                                                                                                            for al in range(ak + 1, ak + 4):\n                                                                                                                                                                if ai!= aj:\n                                                                                                                                                                    for am in range(al + 1, al + 4):\n                                                                                                                                        if aj!= ak:\n                                                                                                                                            for an in range(am + 1, am + 4):\n                                                                                                                                                if ak!= al:\n                                                                                                                                                    for ap in range(an + 1, an + 4):\n                                                                                                                                                        if al!= am:\n                                                                                                                                                            for aq in range(ap + 1, ap + 4):\n                                                                                                                                                                if am!= an:\n                                                                                                                                                                    for ar in range(aq + 1, ar + 4):\n                                                                                                                                        if an!= ap:\n                                                                                                                                            for as in range(ar + 1, ar + 4):\n                                                                                                                                                if ap!= aq:\n                                                                                                                                                    for at in range(as + 1, as + 4):\n                                                                                                                                                                if ar!= as:\n                                                                                                                                                                    for au in range(at + 1, at + 4):\n                                "
    },
    {
        "number": 3566,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    huts = list(map(int, stdin.split()))\n    days = list(map(int, stdin.split()))\n    positions = []\n\n    for i in range(n):\n        positions.append(huts[i])\n\n    for i in range(q):\n        j, x = map(int, stdin.split())\n        positions[j] = x\n\n    min_pos = min(positions)\n    max_pos = max(positions)\n\n    for i in range(n):\n        if positions[i] == min_pos:\n            positions[i] = max_pos\n        elif positions[i] == max_pos:\n            positions[i] = min_pos\n\n    return '\\n'.join(map(str, positions))"
    },
    {
        "number": 3567,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    characters = []\n    for _ in range(n):\n        line = input()\n        characters.append(line)\n\n    features = [0] * k\n    for char in characters:\n        for i in range(k):\n            features[i] += int(char[i])\n\n    max_similarity = 0\n    for i in range(k):\n        for j in range(i + 1, k):\n            similarity = features[i] * features[j]\n            if similarity > max_similarity:\n                max_similarity = similarity\n\n    return ''.join(str(x) for x in features)"
    },
    {
        "number": 3568,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f = int(stdin.strip())\n    for _ in range(f):\n        t1, t2 = map(int, stdin.readline().split())\n        n = int(stdin.readline())\n        intervals = []\n        for _ in range(n):\n            t, _ = map(int, stdin.readline().split())\n            intervals.append((t, t + 1))\n        for i in range(f):\n            for j in range(i + 1, f):\n                if intervals[i][1] < intervals[j][0]:\n                    return \"impossible\"\n    return \"possible\""
    },
    {
        "number": 3569,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    opponents = []\n    for _ in range(n):\n        x, y, r = map(int, stdin.strip().split())\n        opponents.append((x, y, r))\n\n    max_hits = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    for m in range(l + 1, n):\n                        for n in range(m + 1, n):\n                            if i!= j and i!= k and i!= l and i!= m and i!= n:\n                                for o in range(n):\n                                    if i!= o and j!= o and k!= o and l!= o and m!= o and n!= o:\n                                        if distance(opponents[i], opponents[j]) <= distance(opponents[i], opponents[k]) and distance(opponents[i], opponents[l]) <= distance(opponents[i], opponents[m]) and distance(opponents[i], opponents[n]) <= distance(opponents[j], opponents[k]) and distance(opponents[i], opponents[o]) <= distance(opponents[j], opponents[o]) and distance(opponents[i], opponents[n]) <= distance(opponents[k], opponents[o]) and distance(opponents[i], opponents[l]) <= distance(opponents[j], opponents[l]) and distance(opponents[i], opponents[m]) <= distance(opponents[j], opponents[m]) and distance(opponents[i], opponents[n]) <= distance(opponents[k], opponents[m]) and distance(opponents[i], opponents[l]) <= distance(opponents[k], opponents[l]) and distance(opponents[i], opponents[m]) <= distance(opponents[k], opponents[m]) and distance(opponents[i], opponents[n]) <= distance(opponents[l], opponents[m]) and distance(opponents[i], opponents[o]) <= distance(opponents[j], opponents[o]) and distance(opponents[i], opponents[n]) <= distance(opponents[k], opponents[o]) and distance(opponents[i], opponents[l]) <= distance(opponents[j], opponents[l]) and distance(opponents[i], opponents[m]) <= distance(opponents[j], opponents[m]) and distance(opponents[i], opponents[n]) <= distance(opponents[k], opponents[m]) and distance(opponents[i], opponents[l]) <= distance(opponents[k], opponents[l]) and distance(opponents[i], opponents[m]) <= distance(opponents[k], opponents[m]) and distance(opponents[i], opponents[n]) <= distance(opponents[l], opponents[m]) and distance(opponents[i], opponents[o]) <= distance(opponents[j], opponents[o]) and distance(opponents[i], opponents[n]) <= distance(opponents[k], opponents[o]) and distance(opponents[i], opponents[l]) <= distance(opponents[j], opponents[l]) and distance(opponents[i], opponents[m]) <= distance(opponents[j], opponents[m]) and distance(opponents[i], opponents[n]) <= distance(opponents[k], opponents[m]) and distance(opponents[i], opponents[l]) <= distance(opponents[k], opponents[l]) and distance(opponents[i], opponents[m]) <= distance(opponents[k], opponents[m]) and distance(opponents[i], opponents[n]) <= distance(opponents[l], opponents[m]) and distance(opponents[i], opponents[o]) <= distance(opponents[j], opponents[o]) and distance(opponents[i], opponents[n]) <= distance(opponents[k], opponents[o]) and distance(opponents[i], opponents[l]) <= distance(opponents[j], opponent"
    },
    {
        "number": 3570,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    events = []\n    dreams = []\n    scenarios = []\n\n    for line in stdin.splitlines():\n        if line.startswith(\"E \"):\n            events.append(line[2:])\n        elif line.startswith(\"D \"):\n            dreams.append(line[2:])\n        elif line.startswith(\"S \"):\n            scenarios.append(line[2:])\n\n    events.sort()\n    dreams.sort()\n    scenarios.sort()\n\n    for scenario in scenarios:\n        if scenario.startswith(\"S 1!\"):\n            scenario = scenario[5:]\n            if scenario in events:\n                return \"Yes\"\n            elif scenario in dreams:\n                return \"Plot Error\"\n            else:\n                return \"Plot Error\"\n        elif scenario.startswith(\"S 2!\"):\n            scenario = scenario[5:]\n            if scenario in events:\n                return \"Yes\"\n            elif scenario in dreams:\n                return \"Plot Error\"\n            else:\n                return \"Plot Error\"\n\n    return \"Plot Error\""
    },
    {
        "number": 3571,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, F, N = map(int, stdin.split())\n    lines = []\n    for _ in range(N):\n        line = input()\n        lines.append(line)\n\n    thumb_position = thumb(lines, H, F)\n    output = \"\"\n    for line in lines:\n        output += line\n        output += \"+\" * (W - len(line))\n        output += \"|\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"|\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * (W - len(line))\n        output += \"+\" * ("
    },
    {
        "number": 3572,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    control_points = []\n    for _ in range(n):\n        control_points.append(list(map(int, stdin.split())))\n\n    visited = set()\n    order = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if control_points[i][0] == control_points[j][0]:\n                continue\n            if control_points[i][1] == control_points[j][1]:\n                continue\n            if control_points[i][2] == control_points[j][2]:\n                continue\n            if control_points[i][3] == control_points[j][3]:\n                continue\n            if control_points[i][0] + control_points[j][1] == control_points[j][2] + control_points[j][3]:\n                continue\n            if control_points[i][1] + control_points[j][2] == control_points[j][0] + control_points[j][3]:\n                continue\n            if control_points[i][2] + control_points[j][0] == control_points[j][1] + control_points[j][3]:\n                continue\n            if control_points[i][3] + control_points[j][1] == control_points[j][2] + control_points[j][0]:\n                continue\n            if control_points[i][0] + control_points[j][1] + control_points[j][2] + control_points[j][3] == L:\n                order.append((i, j))\n                visited.add((i, j))\n                visited.add((j, i))\n                break\n\n    if len(visited) == n:\n        return \"possible\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 3573,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, C = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    expected_rounds = 0\n\n    for i in range(D):\n        for j in range(C):\n            if cards[j] == i + 1:\n                expected_rounds += 1\n                break\n\n    return str(expected_rounds)"
    },
    {
        "number": 3574,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    magical_array = [True] * N\n    for i in range(N):\n        magical_array[i] = False\n\n    for _ in range(Q):\n        L, R = map(int, stdin.split())\n        if L == R:\n            continue\n        for i in range(L, R + 1):\n            if magical_array[i]:\n                magical_array[i] = False\n                for j in range(i + 1, R + 1):\n                    magical_array[j] = True\n                    break\n\n    max_length = 0\n    for i in range(N):\n        if magical_array[i]:\n            max_length = max(max_length, i - L + 1)\n\n    return str(max_length)\n"
    },
    {
        "number": 3575,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    stations = list(range(n))\n    neighbours = set()\n\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        neighbours.add((u, v))\n\n    s, t = map(int, stdin.split())\n\n    def find_other_station(station):\n        for i in range(n):\n            if i == station:\n                continue\n            if stations[i] == station:\n                return i\n        return None\n\n    def find_other_station_with_train(station):\n        for i in range(n):\n            if i == station:\n                continue\n            if stations[i] == station:\n                return i\n            if stations[i] == find_other_station(station):\n                return i\n        return None\n\n    alice_station = find_other_station(s)\n    bob_station = find_other_station(t)\n\n    if alice_station is None or bob_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station_with_train(alice_station)\n    bob_other_station = find_other_station_with_train(bob_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station(alice_other_station)\n    bob_other_station = find_other_station(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station_with_train(alice_other_station)\n    bob_other_station = find_other_station_with_train(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station(alice_other_station)\n    bob_other_station = find_other_station(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station_with_train(alice_other_station)\n    bob_other_station = find_other_station_with_train(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station(alice_other_station)\n    bob_other_station = find_other_station(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station_with_train(alice_other_station)\n    bob_other_station = find_other_station_with_train(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station(alice_other_station)\n    bob_other_station = find_other_station(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station_with_train(alice_other_station)\n    bob_other_station = find_other_station_with_train(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station(alice_other_station)\n    bob_other_station = find_other_station(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station_with_train(alice_other_station)\n    bob_other_station = find_other_station_with_train(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station(alice_other_station)\n    bob_other_station = find_other_station(bob_other_station)\n\n    if alice_other_station is None or bob_other_station is None:\n        return \"never meet\"\n\n    alice_other_station = find_other_station_with"
    },
    {
        "number": 3576,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, K = map(int, stdin.split())\n    p = 10**11 + 3\n    q = 10**11 + 7\n    return str(int(p * q ** (-1)))"
    },
    {
        "number": 3577,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    flowers = [0] * n\n    for i in range(n):\n        L, R = map(int, stdin.strip().split())\n        flowers[i] = R - L + 1\n    return str(sum(flowers))"
    },
    {
        "number": 3578,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R, F = map(int, stdin.split())\n    flights = []\n    for _ in range(R):\n        a, b, c = map(int, stdin.split())\n        flights.append((a, b, c))\n\n    total_cost = 0\n    for i in range(F):\n        a, b, c = map(int, stdin.split())\n        total_cost += flights[i][2]\n\n    return str(total_cost)"
    },
    {
        "number": 3579,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    rectangles = []\n    for _ in range(h):\n        rectangles.append(list(map(int, stdin.split())))\n\n    mads = []\n    for i in range(h):\n        for j in range(w):\n            area = rectangles[i][j]\n            statisticians = sum(1 for _ in range(area))\n            mads.append(statisticians / area)\n\n    mad = sum(mads) / h / w\n    return f\"{mad:.3f}\""
    },
    {
        "number": 3580,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    queries = list(map(int, stdin.split()))\n\n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            prefix = [a[i] for a in queries]\n            prefix.extend([b[j - 1] for b in queries])\n            prefix.extend([a[j] for a in queries])\n            prefix.extend([b[j] for b in queries])\n            prefix.sort()\n            max_length = max(max_length, len(prefix))\n\n    return str(max_length)\n"
    },
    {
        "number": 3581,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    payout = [0] * H\n    for i in range(H):\n        payout[i] = float(stdin.split()[i])\n\n    balls = []\n    for _ in range(N):\n        ball = [0] * H\n        for i in range(H):\n            ball[i] = random.random()\n        balls.append(ball)\n\n    for _ in range(H):\n        for i in range(H):\n            for j in range(H):\n                for k in range(H):\n                    if i == j or i == k or j == k:\n                        payout[i] += payout[j] + payout[k]\n\n    expected_payout = sum(payout)\n    return str(expected_payout)\n"
    },
    {
        "number": 3582,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    # Initialize the mentor list\n    mentor_list = [a[i] for i in range(n)]\n\n    # Initialize the best assignment\n    best_assignment = [a[i] for i in range(n)]\n\n    # Iterate through the mentor list\n    for i in range(n):\n        # Iterate through the mentor list\n        for j in range(i + 1, n):\n            # Check if the mentor list is symmetric\n            if mentor_list[i] == mentor_list[j]:\n                # Check if the current assignment is better\n                if a[i] < a[j]:\n                    # Update the best assignment\n                    best_assignment[i] = mentor_list[i]\n                    best_assignment[j] = mentor_list[j]\n\n    # Convert the best assignment to a string\n    result =''.join(map(str, best_assignment))\n    return result"
    },
    {
        "number": 3583,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    vertices = []\n    for _ in range(n):\n        x, y = map(int, stdin.strip().split())\n        vertices.append((x, y))\n\n    def is_valid(vertex):\n        for i in range(n):\n            if i == vertex:\n                continue\n            if abs(vertices[i][0] - vertices[vertex][0]) ** 2 + abs(vertices[i][1] - vertices[vertex][1]) ** 2 <= 1:\n                return False\n        return True\n\n    def max_circumference(vertex):\n        max_length = 0\n        for i in range(n):\n            if i == vertex:\n                continue\n            if abs(vertices[i][0] - vertices[vertex][0]) ** 2 + abs(vertices[i][1] - vertices[vertex][1]) ** 2 <= 1:\n                length = abs(vertices[i][0] - vertices[vertex][0]) + abs(vertices[i][1] - vertices[vertex][1])\n                if length > max_length:\n                    max_length = length\n        return max_length\n\n    max_circumference_list = []\n    for vertex in range(n):\n        if is_valid(vertex):\n            max_circumference_list.append(max_circumference(vertex))\n\n    max_circumference_list.sort()\n    return str(max_circumference_list[0])\n"
    },
    {
        "number": 3584,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    onions = []\n    for _ in range(N):\n        x, y = map(int, stdin.split())\n        onions.append((x, y))\n\n    fence_posts = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        fence_posts.append((a, b))\n\n    def convex_hull(points):\n        points.sort(key=lambda x: x[0])\n        n = len(points)\n        if n < 3:\n            return points\n        mid = n // 2\n        left = convex_hull(points[:mid])\n        right = convex_hull(points[mid:])\n        return left + right\n\n    convex_hull_points = convex_hull(onions)\n    convex_hull_points.sort(key=lambda x: x[1])\n\n    def fence_post_hull(points):\n        points.sort(key=lambda x: x[1])\n        n = len(points)\n        if n < 3:\n            return points\n        mid = n // 2\n        left = fence_post_hull(points[:mid])\n        right = fence_post_hull(points[mid:])\n        return left + right\n\n    fence_post_hull_points = fence_post_hull(fence_posts)\n    fence_post_hull_points.sort(key=lambda x: x[1])\n\n    def convex_hull_intersect(hull, point):\n        left = 0\n        right = len(hull) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if hull[mid][1] > point[1]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    def fence_post_hull_intersect(hull, point):\n        left = 0\n        right = len(hull) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if hull[mid][1] > point[1]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    def intersect(hull1, hull2):\n        left1 = 0\n        right1 = len(hull1) - 1\n        left2 = 0\n        right2 = len(hull2) - 1\n        while left1 <= right1 and left2 <= right2:\n            if hull1[left1][1] > hull2[left2][1]:\n                right1 = left1 - 1\n            elif hull1[left1][1] < hull2[left2][1]:\n                left1 = left1 + 1\n            else:\n                if hull1[left1][0] > hull2[left2][0]:\n                    right2 = left2 - 1\n                elif hull1[left1][0] < hull2[left2][0]:\n                    left2 = left2 + 1\n                else:\n                    return True\n                left1 += 1\n                left2 += 1\n        return False\n\n    def intersect_hull(hull, point):\n        left = 0\n        right = len(hull) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if hull[mid][1] > point[1]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    def intersect_hull_hull(hull1, hull2):\n        left1 = 0\n        right1 = len(hull1) - 1\n        left2 = 0\n        right2 = len(hull2) - 1\n        while left1 <= right1 and left2 <= right2:\n            if hull1[left1][1] > hull2[left2][1]:\n                right1 = left1 - 1\n            elif hull1[left1][1] < hull2[left2][1]:\n                left1 = left1 + 1\n            else:\n                if hull1[left1][0] > hull2[left2][0]:\n                    right2 = left2 - 1\n                elif hull1[left1][0] < hull2[left2][0]:\n                    left2 = left2 + 1\n                else:\n                    return True\n                left1 += 1\n                left2 += 1\n        return False\n\n    def intersect_hull_hull_intersect(hull1, hull2):\n        left1 = 0\n        right1 = len(hull1) - 1\n        left2 = 0\n        right2 = len(hull2) - 1\n        while"
    },
    {
        "number": 3585,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    MOD = 998244353\n    MOD_INV = 1000000007\n\n    def is_heavier(s1, s2):\n        return s1 > s2\n\n    def get_group(bag, weighings):\n        for i, w in enumerate(weighings):\n            if w[0] == bag:\n                return i\n        return -1\n\n    def get_fake_bag(group, weighings):\n        if group == 0:\n            return 0\n        if group == 1:\n            return 1\n        if group == 2:\n            return 2\n        if group == 3:\n            return 3\n        if group == 4:\n            return 4\n        if group == 5:\n            return 5\n        if group == 6:\n            return 6\n        if group == 7:\n            return 7\n        if group == 8:\n            return 8\n        if group == 9:\n            return 9\n        return -1\n\n    def get_max_bags(m, k, weighings):\n        max_bags = 0\n        for i in range(m):\n            bag1, bag2 = weighings[i]\n            if bag1 == 1 and bag2 == 1:\n                max_bags = (max_bags + 1) % MOD\n            elif bag1 == 1 and bag2 == 2:\n                max_bags = (max_bags + 2) % MOD\n            elif bag1 == 1 and bag2 == 3:\n                max_bags = (max_bags + 3) % MOD\n            elif bag1 == 1 and bag2 == 4:\n                max_bags = (max_bags + 4) % MOD\n            elif bag1 == 1 and bag2 == 5:\n                max_bags = (max_bags + 5) % MOD\n            elif bag1 == 1 and bag2 == 6:\n                max_bags = (max_bags + 6) % MOD\n            elif bag1 == 1 and bag2 == 7:\n                max_bags = (max_bags + 7) % MOD\n            elif bag1 == 1 and bag2 == 8:\n                max_bags = (max_bags + 8) % MOD\n            elif bag1 == 1 and bag2 == 9:\n                max_bags = (max_bags + 9) % MOD\n            elif bag1 == 2 and bag2 == 1:\n                max_bags = (max_bags + 1) % MOD\n            elif bag1 == 2 and bag2 == 2:\n                max_bags = (max_bags + 2) % MOD\n            elif bag1 == 2 and bag2 == 3:\n                max_bags = (max_bags + 3) % MOD\n            elif bag1 == 2 and bag2 == 4:\n                max_bags = (max_bags + 4) % MOD\n            elif bag1 == 2 and bag2 == 5:\n                max_bags = (max_bags + 5) % MOD\n            elif bag1 == 2 and bag2 == 6:\n                max_bags = (max_bags + 6) % MOD\n            elif bag1 == 2 and bag2 == 7:\n                max_bags = (max_bags + 7) % MOD\n            elif bag1 == 2 and bag2 == 8:\n                max_bags = (max_bags + 8) % MOD\n            elif bag1 == 2 and bag2 == 9:\n                max_bags = (max_bags + 9) % MOD\n            elif bag1 == 3 and bag2 == 1:\n                max_bags = (max_bags + 1) % MOD\n            elif bag1 == 3 and bag2 == 2:\n                max_bags = (max_bags + 2) % MOD\n            elif bag1 == 3 and bag2 == 3:\n                max_bags = (max_bags + 3) % MOD\n            elif bag1 == 3 and bag2 == 4:\n                max_bags = (max_bags + 4) % MOD\n            elif bag1 == 3 and bag2 == 5:\n                max_bags = (max_bags + 5) % MOD\n            elif bag1 == 3 and bag2 == 6:\n                max_bags = (max_bags + 6) % MOD\n            elif bag1"
    },
    {
        "number": 3586,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = set(map(int, stdin.strip().split()))\n    d = float('-inf')\n    for a in s:\n        for b in s:\n            for c in s:\n                if a + b + c == d:\n                    return str(d)\n    return 'No solution'"
    },
    {
        "number": 3587,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    taboo_strings = []\n    for _ in range(N):\n        taboo_string = input().strip()\n        taboo_strings.append(taboo_string)\n\n    def is_valid(s: str) -> bool:\n        for t in taboo_strings:\n            if t in s:\n                return False\n        return True\n\n    def longest_valid_substring(s: str) -> str:\n        max_length = 0\n        current_length = 0\n        current_substring = \"\"\n        for i in range(len(s)):\n            if s[i] == current_substring[-1]:\n                current_substring += s[i]\n                current_length += 1\n            else:\n                if current_length > max_length:\n                    max_length = current_length\n                    current_substring = s[i]\n            if current_length == len(current_substring):\n                return current_substring\n        return \"\"\n\n    longest_valid_substring_str = longest_valid_substring(taboo_strings[0])\n    for s in taboo_strings[1:]:\n        if longest_valid_substring(s)!= longest_valid_substring_str:\n            return -1\n        longest_valid_substring_str = max(longest_valid_substring_str, longest_valid_substring(s))\n\n    return longest_valid_substring_str"
    },
    {
        "number": 3588,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    C, = map(int, stdin.split())\n    records = []\n    for _ in range(C):\n        records.append(list(map(int, stdin.split())))\n\n    # Calculate total shares held on each day\n    total_shares = [0] * 366\n    for i in range(C):\n        for j in range(len(records[i])):\n            total_shares[records[i][j]] += 1\n\n    # Print total shares held on each day\n    for i in range(366):\n        if total_shares[i] > 0:\n            print(f\"{total_shares[i]} {i+1} {i+1}\")"
    },
    {
        "number": 3589,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    result = []\n    for x in range(L, R + 1):\n        count = 0\n        while x > 0:\n            digit = x % 10\n            count += digit\n            x //= 10\n        result.append(count)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3590,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    A = []\n    B = []\n    for _ in range(a):\n        x, y = map(int, stdin.split())\n        A.append((x, y))\n    for _ in range(b):\n        x, y = map(int, stdin.split())\n        B.append((x, y))\n    A = [(x, y) for x, y in A]\n    B = [(x, y) for x, y in B]\n    A.sort()\n    B.sort()\n    i = j = 0\n    while i < len(A) and j < len(B):\n        if A[i][0] == B[j][0]:\n            if A[i][1] > B[j][1]:\n                i += 1\n            else:\n                j += 1\n        elif A[i][0] < B[j][0]:\n            i += 1\n        else:\n            j += 1\n    if i == len(A):\n        return \"0.0\"\n    else:\n        return str(min(A[i][1], B[j][1]) - max(A[i][1], B[j][1]))"
    },
    {
        "number": 3591,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    photos = []\n    for _ in range(k):\n        heights = list(map(int, stdin.split()))\n        photos.append(heights)\n\n    alice_heights = [heights[0] for heights in photos if heights[0] > heights[1]]\n    bob_heights = [heights[1] for heights in photos if heights[0] > heights[1]]\n\n    alice_index = alice_heights.index(max(alice_heights))\n    bob_index = bob_heights.index(max(bob_heights))\n\n    return str(alice_index + 1) + \"\\n\" + str(bob_index + 1)"
    },
    {
        "number": 3592,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p_t, p_1, p_2 = map(float, stdin.split())\n    pitas = 0\n    pizzas = 0\n    for i in range(1, 13):\n        pitas += p_1 * i\n        pizzas += p_2 * i\n    if pitas == 0 and pizzas == 0:\n        return \"None\"\n    return str(pitas) + \" \" + str(pizzas)"
    },
    {
        "number": 3593,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    board = []\n    for _ in range(N):\n        row = list(map(int, stdin.split()))\n        board.append(row)\n\n    def domino_overlap(a, b):\n        return abs(a[0] - b[0]) == 1 and abs(a[1] - b[1]) == 1\n\n    def domino_sum(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def domino_rotate(domino):\n        return (domino[0], -domino[1])\n\n    def domino_rotate_sum(domino):\n        return domino_sum(domino_rotate(domino), domino)\n\n    def domino_rotate_sum_max(dominoes):\n        max_sum = float('-inf')\n        for domino in dominoes:\n            sum_ = domino_rotate_sum(domino)\n            if sum_ > max_sum:\n                max_sum = sum_\n        return max_sum\n\n    dominoes = []\n    for i in range(N):\n        for j in range(3):\n            dominoes.append((board[i][j], board[i][j + 1]))\n\n    max_sum = domino_rotate_sum_max(dominoes)\n    return str(max_sum)\n"
    },
    {
        "number": 3594,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    scores = []\n    for _ in range(n):\n        name, num = stdin.strip().split()\n        num = int(num)\n        if num == 1:\n            scores.append(1)\n        else:\n            is_prime = True\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                scores.append(num)\n            else:\n                scores.append(1)\n    odd_even_ingmariay = [0] * 3\n    for i in range(1, n):\n        if scores[i] % 2 == 0:\n            odd_even_ingmariay[0] += scores[i]\n        else:\n            odd_even_ingmariay[1] += scores[i]\n        if scores[i] % 2 == 0:\n            odd_even_ingmariay[2] += scores[i]\n        else:\n            odd_even_ingmariay[2] += scores[i]\n    return''.join(map(str, odd_even_ingmariay))"
    },
    {
        "number": 3595,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, ell = map(int, stdin.split())\n    rooms = []\n    for _ in range(r):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        rooms.append((x1, y1, x2, y2))\n\n    def distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def expand(rooms, x, y, dx, dy, dist):\n        for i in range(4):\n            nx, ny = x + dx[i], y + dy[i]\n            if 0 <= nx < len(rooms) and 0 <= ny < len(rooms) and rooms[nx][ny] == 0:\n                rooms[nx][ny] = 1\n                dist += 1\n                expand(rooms, nx, ny, dx, dy, dist)\n        return dist\n\n    def max_rooms(rooms, x, y, dx, dy, dist):\n        max_dist = 0\n        for room in rooms:\n            if room[0] == x and room[1] == y:\n                max_dist = max(max_dist, dist)\n        return max_dist\n\n    dx = [-1, 0, 1, 0]\n    dy = [0, -1, 0, 1]\n\n    rooms = [room for room in rooms if room[2] - room[0] == 1 and room[3] - room[1] == 1]\n    max_rooms(rooms, 0, 0, dx, dy, 0)\n\n    return str(max_rooms(rooms, 0, 0, dx, dy, 0))\n"
    },
    {
        "number": 3596,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(float, stdin.split())\n    t1, t2, t3, t4 = map(int, stdin.split())\n    n, k, r, s, l = map(int, stdin.split())\n\n    def f(x):\n        return (a * (x ** t1) + b * (x ** t2) + c * (x ** t3) + d * (x ** t4)) / (x ** (t1 + t2 + t3 + t4))\n\n    def g(n):\n        return (f(n) + l) ** 2 / (pi * e) + 1\n\n    def P(x):\n        return sum(f(i) * (x ** i) for i in range(r + n))\n\n    def P_s(x):\n        return P(x)\n\n    def P_n(x):\n        return sum(P_s(i) * (x ** i) for i in range(n))\n\n    def P_g(n):\n        return P_n(n) + l\n\n    def P_g_n(n):\n        return P_g(n) + l\n\n    def P_g_n_s(n):\n        return P_g_n(n) + l\n\n    def P_g_n_s_l(n):\n        return P_g_n_s(n) + l\n\n    def P_g_n_s_l_g(n):\n        return P_g_n_s_l(n) + g(n)\n\n    def P_g_n_s_l_g_n(n):\n        return P_g_n_s_l_g(n) + n\n\n    def P_g_n_s_l_g_n_s(n):\n        return P_g_n_s_l_g_n(n) + s\n\n    def P_g_n_s_l_g_n_s_l(n):\n        return P_g_n_s_l_g_n_s(n) + l\n\n    def P_g_n_s_l_g_n_s_l_g(n):\n        return P_g_n_s_l_g_n_s_l(n) + g(n)\n\n    def P_g_n_s_l_g_n_s_l_g_n(n):\n        return P_g_n_s_l_g_n_s_l_g(n) + n\n\n    def P_g_n_s_l_g_n_s_l_g_n_s(n):\n        return P_g_n_s_l_g_n_s_l_g_n(n) + s\n\n    def P_g_n_s_l_g_n_s_l_g_n_s_l(n):\n        return P_g_n_s_l_g_n_s_l_g_n_s(n) + l\n\n    def P_g_n_s_l_g_n_s_l_g_n_s_l_g(n):\n        return P_g_n_s_l_g_n_s_l_g_n_s_l(n) + g(n)\n\n    def P_g_n_s_l_g_n_s_l_g_n_s_l_g_n(n):\n        return P_g_n_s_l_g_n_s_l_g_n_s_l_g(n) + n\n\n    def P_g_n_s_l_g_n_s_l_g_n_s_l_g_n_s(n):\n        return P_g_n_s_l_g_n_s_l_g_n_s_l_g_n(n) + s\n\n    def P_g_n_s_l_g_n_s_l_g_n_s_l_g_n_s_l(n):\n        return P_g_n_s_l_g_n_s_l_g_n_s_l_g_n_s(n) + l\n\n    def P_g_n_s_l_g_n_s_l_g_n_s_l_g_n_s_l_g(n):\n        return P_g_n_s_l_g_n_s_l"
    },
    {
        "number": 3597,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, l = map(int, stdin.split())\n    r = map(int, stdin.split())\n    h = map(int, stdin.split())\n\n    # Calculate the center of the table\n    x_center = w / 2\n    y_center = l / 2\n\n    # Calculate the center of the dashed line\n    x_dash = (w + h) / 2\n    y_dash = h / 2\n\n    # Calculate the center of the cue ball\n    x_cue = x_center + r[0]\n    y_cue = y_center - r[1]\n\n    # Calculate the center of the balls\n    x_ball1 = x_center + r[2]\n    y_ball1 = y_center - r[3]\n    x_ball2 = x_center + r[4]\n    y_ball2 = y_center - r[5]\n    x_ball3 = x_center + r[6]\n    y_ball3 = y_center - r[7]\n\n    # Calculate the angle to shoot the ball\n    theta = math.degrees(math.atan2(y_ball2 - y_ball1, x_ball2 - x_ball1))\n\n    # Calculate the distance to place the ball\n    d = math.sqrt((x_ball1 - x_center) ** 2 + (y_ball1 - y_center) ** 2)\n\n    # Check if the trick shot is possible\n    if d <= h / 2 and theta >= 0 and theta <= 180:\n        return f\"{d:.2f} {theta:.2f}\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 3598,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    magnets = [int(m) for m in stdin.readline().split()]\n    prices = [int(m) for m in stdin.readline().split()]\n\n    def is_upside_down(magnet):\n        return magnet % 2 == 1\n\n    def get_cheapest_price(magnets):\n        cheapest_price = float('inf')\n        for i in range(n):\n            current_price = sum(magnets[i:i+10])\n            if current_price < cheapest_price:\n                cheapest_price = current_price\n        return cheapest_price\n\n    cheapest_price = get_cheapest_price(magnets)\n    for i in range(n):\n        if is_upside_down(magnets[i]):\n            magnets[i] = 10 - magnets[i]\n        else:\n            magnets[i] = 10 - magnets[i]\n\n    return str(cheapest_price)"
    },
    {
        "number": 3599,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, N = map(int, stdin.split())\n    breaks = list(map(int, stdin.split()))\n\n    # Sort the breaks in ascending order\n    breaks.sort()\n\n    # Initialize the number of minutes spent on stage for each musician\n    stage_minutes = [0] * N\n\n    # Initialize the number of breaks for each musician\n    breaks_for_musician = [0] * N\n\n    # Initialize the number of breaks for the current musician\n    current_breaks = 0\n\n    # Initialize the number of breaks for the next musician\n    next_breaks = 0\n\n    # Initialize the number of breaks for the previous musician\n    previous_breaks = 0\n\n    # Initialize the number of breaks for the current musician\n    current_musician_breaks = 0\n\n    # Initialize the number of breaks for the next musician\n    next_musician_breaks = 0\n\n    # Initialize the number of breaks for the previous musician\n    previous_musician_breaks = 0\n\n    # Initialize the number of breaks for the current musician\n    current_musician_breaks_for_stage = 0\n\n    # Initialize the number of breaks for the next musician\n    next_musician_breaks_for_stage = 0\n\n    # Initialize the number of breaks for the previous musician\n    previous_musician_breaks_for_stage = 0\n\n    # Initialize the number of breaks for the current musician\n    current_musician_breaks_for_break = 0\n\n    # Initialize the number of breaks for the next musician\n    next_musician_breaks_for_break = 0\n\n    # Initialize the number of breaks for the previous musician\n    previous_musician_breaks_for_break = 0\n\n    # Initialize the number of breaks for the current musician\n    current_musician_breaks_for_stage_and_break = 0\n\n    # Initialize the number of breaks for the next musician\n    next_musician_breaks_for_stage_and_break = 0\n\n    # Initialize the number of breaks for the previous musician\n    previous_musician_breaks_for_stage_and_break = 0\n\n    # Initialize the number of breaks for the current musician\n    current_musician_breaks_for_stage_and_break_and_next = 0\n\n    # Initialize the number of breaks for the next musician\n    next_musician_breaks_for_stage_and_break_and_next = 0\n\n    # Initialize the number of breaks for the previous musician\n    previous_musician_breaks_for_stage_and_break_and_next = 0\n\n    # Initialize the number of breaks for the current musician\n    current_musician_breaks_for_stage_and_break_and_next_and_previous = 0\n\n    # Initialize the number of breaks for the next musician\n    next_musician_breaks_for_stage_and_break_and_next_and_previous = 0\n\n    # Initialize the number of breaks for the previous musician\n    previous_musician_breaks_for_stage_and_break_and_next_and_previous = 0\n\n    # Initialize the number of breaks for the current musician\n    current_musician_breaks_for_stage_and_break_and_next_and_previous_and_current = 0\n\n    # Initialize the number of breaks for the next musician\n    next_musician_breaks_for_stage_and_break_and_next_and_previous_and_current = 0\n\n    # Initialize the number of breaks for the previous musician\n    previous_musician_breaks_for_stage_and_break_and_next_and_previous_and_current = 0\n\n    # Initialize the number of breaks for the current musician\n    current_musician_breaks_for_stage_and_break_and_next_and_previous_and_current_and_next = 0\n\n    # Initialize the number of breaks for the next musician\n    next_musician_breaks_for_stage_and_break_and_next_and_previous_and_current_and_next = 0\n\n    # Initialize the number of breaks for the previous musician\n    previous_musician_breaks_for_stage_and_break_and_next_and_previous_and_current_and_next = 0\n\n    # Initialize the number of breaks for the current musician\n    current_musician_breaks_for_stage_and_break_and_next_and_previous_and_current_and_next_and_previous = 0\n\n    # Initialize the number of breaks for the next"
    },
    {
        "number": 3600,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    intersections = []\n    for _ in range(n):\n        d = int(stdin.strip())\n        intersections.append(d)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if intersections[i] == intersections[j]:\n                return \"impossible\"\n\n    return \"possible\""
    },
    {
        "number": 3601,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    misha_path = []\n    nadia_path = []\n    for _ in range(n):\n        x1, y1 = map(int, stdin.readline().strip().split())\n        x2, y2 = map(int, stdin.readline().strip().split())\n        misha_path.append((x1, y1))\n        nadia_path.append((x2, y2))\n\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def min_distance(p1, p2):\n        return min(distance(p1, p2), distance(p2, p1))\n\n    def min_time(p1, p2):\n        return min_distance(p1, p2) / 1000\n\n    def min_time_between_points(p1, p2):\n        return min_time(p1, p2) + min_distance(p1, p2) / 2\n\n    def min_time_between_paths(p1, p2):\n        return min(min_time_between_points(p1, p2), min_time_between_points(p2, p1))\n\n    def min_time_between_paths_and_points(p1, p2):\n        return min(min_time_between_paths(p1, p2), min_time_between_paths(p2, p1))\n\n    def min_time_between_paths_and_points_and_points(p1, p2):\n        return min(min_time_between_paths_and_points(p1, p2), min_time_between_paths_and_points(p2, p1))\n\n    def min_time_between_paths_and_points_and_points_and_points(p1, p2):\n        return min(min_time_between_paths_and_points_and_points(p1, p2), min_time_between_paths_and_points_and_points(p2, p1))\n\n    def min_time_between_paths_and_points_and_points_and_points_and_points(p1, p2):\n        return min(min_time_between_paths_and_points_and_points_and_points(p1, p2), min_time_between_paths_and_points_and_points_and_points(p2, p1))\n\n    def min_time_between_paths_and_points_and_points_and_points_and_points_and_points(p1, p2):\n        return min(min_time_between_paths_and_points_and_points_and_points_and_points(p1, p2), min_time_between_paths_and_points_and_points_and_points_and_points(p2, p1))\n\n    def min_time_between_paths_and_points_and_points_and_points_and_points_and_points_and_points(p1, p2):\n        return min(min_time_between_paths_and_points_and_points_and_points_and_points_and_points(p1, p2), min_time_between_paths_and_points_and_points_and_points_and_points_and_points(p2, p1))\n\n    def min_time_between_paths_and_points_and_points_and_points_and_points_and_points_and_points_and_points(p1, p2):\n        return min(min_time_between_paths_and_points_and_points_and_points_and_points_and_points_and_points(p1, p2), min_time_between_paths_and_points_and_points_and_points_and_points_and_points_and_points(p2, p1))\n\n    def min_time_between_paths_and_points_and_points_and_points_and_points_and_points_and_points_and_points_and_points(p1, p2):\n        return min(min_time_between_paths_and_points_and_points_and_points_and_points_and_points_and_points_and_points(p1, p2), min_time_between_paths_and_points_and_points_and_points_"
    },
    {
        "number": 3602,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, k = map(int, stdin.split())\n    lamps = []\n    for _ in range(k):\n        i, j = map(int, stdin.split())\n        lamps.append((i, j))\n\n    def is_illuminated(i, j):\n        return (i >= 0 and i < n and j >= 0 and j < n) and (i, j) not in lamps\n\n    def is_illuminated_by_one_lamp(i, j):\n        return (i >= 0 and i < n and j >= 0 and j < n) and (i, j) in lamps and (i, j) not in lamps[i] and (i, j) not in lamps[j]\n\n    def is_illuminated_by_two_lamps(i, j):\n        return (i >= 0 and i < n and j >= 0 and j < n) and (i, j) in lamps and (i, j) not in lamps[i] and (i, j) not in lamps[j] and (i, j) not in lamps[(i, j) % n]\n\n    def is_possible(i, j):\n        return (is_illuminated(i, j) and is_illuminated_by_one_lamp(i, j) and is_illuminated_by_two_lamps(i, j))\n\n    for i in range(n):\n        for j in range(n):\n            if is_possible(i, j):\n                return \"1\"\n\n    return \"0\""
    },
    {
        "number": 3603,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    translators = list(map(int, stdin.split()))\n\n    # Sort translators by identifier\n    translators.sort()\n\n    # Find pairs of translators\n    pairs = []\n    for i in range(M - 1):\n        for j in range(i + 1, M):\n            if translators[i] == translators[j]:\n                pairs.append((translators[i], translators[j]))\n\n    # Check if there are any pairs of translators that can be matched\n    if len(pairs) == 0:\n        return \"impossible\"\n\n    # Find the number of pairs that can be matched\n    num_pairs = len(pairs)\n\n    # Find the number of translators that can be matched\n    num_translators = len(translators)\n\n    # Find the number of pairs that can be matched\n    num_pairs_matched = 0\n\n    # Find the number of translators that can be matched\n    num_translators_matched = 0\n\n    # Match up the translators\n    for i in range(num_pairs):\n        for j in range(i + 1, num_pairs):\n            if pairs[i][0] == pairs[j][0] and pairs[i][1] == pairs[j][1]:\n                num_pairs_matched += 1\n                num_translators_matched += 1\n\n    # Check if there are any pairs of translators that can be matched\n    if num_pairs_matched == 0:\n        return \"impossible\"\n\n    # Find the number of pairs that can be matched\n    num_pairs_matched = 0\n\n    # Find the number of translators that can be matched\n    num_translators_matched = 0\n\n    # Match up the translators\n    for i in range(num_translators):\n        for j in range(i + 1, num_translators):\n            if translators[i] == translators[j]:\n                num_pairs_matched += 1\n                num_translators_matched += 1\n\n    # Check if there are any pairs of translators that can be matched\n    if num_pairs_matched == 0:\n        return \"impossible\"\n\n    # Find the number of pairs that can be matched\n    num_pairs_matched = 0\n\n    # Find the number of translators that can be matched\n    num_translators_matched = 0\n\n    # Match up the translators\n    for i in range(num_pairs):\n        for j in range(i + 1, num_pairs):\n            if pairs[i][0] == pairs[j][1] and pairs[i][1] == pairs[j][0]:\n                num_pairs_matched += 1\n                num_translators_matched += 1\n\n    # Check if there are any pairs of translators that can be matched\n    if num_pairs_matched == 0:\n        return \"impossible\"\n\n    # Find the number of pairs that can be matched\n    num_pairs_matched = 0\n\n    # Find the number of translators that can be matched\n    num_translators_matched = 0\n\n    # Match up the translators\n    for i in range(num_translators):\n        for j in range(i + 1, num_translators):\n            if translators[i] == translators[j]:\n                num_pairs_matched += 1\n                num_translators_matched += 1\n\n    # Check if there are any pairs of translators that can be matched\n    if num_pairs_matched == 0:\n        return \"impossible\"\n\n    # Find the number of pairs that can be matched\n    num_pairs_matched = 0\n\n    # Find the number of translators that can be matched\n    num_translators_matched = 0\n\n    # Match up the translators\n    for i in range(num_pairs):\n        for j in range(i + 1, num_pairs):\n            if pairs[i][0] == pairs[j][1] and pairs[i][1] == pairs[j][0]:\n                num_pairs_matched += 1\n                num_translators_matched += 1\n\n    # Check if there are any pairs of translators that can be matched\n    if num_pairs_matched == 0:\n        return \"impossible\"\n\n    # Find the number of pairs that can be matched\n    num_pairs_matched = 0\n\n    # Find the number of translators that can be matched\n    num_translators_matched = 0\n\n    # Match up the translators\n    for i in range(num_"
    },
    {
        "number": 3604,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    sensors = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        sensors.append((x, y))\n\n    def distance(p1, p2):\n        return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n\n    def find_subset(sensors, subset):\n        if len(subset) == n:\n            return subset\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if distance(sensors[i], sensors[j]) <= d:\n                    subset.append(i + 1)\n                    subset.append(j + 1)\n                    subset = find_subset(sensors, subset)\n                    subset.pop()\n                    subset.pop()\n\n        return subset\n\n    subset = find_subset(sensors, [])\n    subset.sort()\n    return str(len(subset)) + '\\n' +''.join(map(str, subset))"
    },
    {
        "number": 3605,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    trees = list(map(int, stdin.split()))\n    trees.sort()\n    min_diff = float('inf')\n    for i in range(k):\n        for j in range(i + 1, k):\n            diff = abs(trees[i] - trees[j])\n            if diff < min_diff:\n                min_diff = diff\n    return str(min_diff)"
    },
    {
        "number": 3606,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    plants = []\n    for _ in range(N):\n        x, y = map(int, stdin.split())\n        plants.append((x, y))\n\n    directions = stdin.strip().split()\n    jumps = []\n    for direction in directions:\n        if direction == 'A':\n            jumps.append((plants[0][0] + 1, plants[0][1]))\n        elif direction == 'B':\n            jumps.append((plants[0][0] - 1, plants[0][1]))\n        elif direction == 'C':\n            jumps.append((plants[0][0], plants[0][1] + 1))\n        elif direction == 'D':\n            jumps.append((plants[0][0], plants[0][1] - 1))\n\n    for _ in range(K):\n        x, y = map(int, stdin.split())\n        for i, (dx, dy) in enumerate(jumps):\n            if x == plants[i][0] + dx and y == plants[i][1] + dy:\n                jumps.pop(i)\n                break\n\n    x, y = plants[0]\n    for dx, dy in jumps:\n        x += dx\n        y += dy\n\n    return f\"{x} {y}\""
    },
    {
        "number": 3607,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    labels = {}\n    current_label = 0\n\n    for line in stdin.splitlines():\n        line = line.strip()\n\n        if line.startswith(\"LET\"):\n            label = int(line.split()[1])\n            labels[label] = current_label\n            current_label += 1\n        elif line.startswith(\"IF\"):\n            condition = line.split()[1]\n            if condition in labels:\n                current_label = labels[condition]\n            else:\n                current_label += 1\n        elif line.startswith(\"PRINT\"):\n            statement = line.split()[1]\n            output += statement + \"\\n\"\n        elif line.startswith(\"PRINTLN\"):\n            statement = line.split()[1]\n            output += statement + \"\\n\"\n\n    return output"
    },
    {
        "number": 3608,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    tasks = list(map(int, stdin.readline().strip().split()))\n    difficulty = [0] * N\n    for i in range(N):\n        difficulty[i] = tasks[i]\n    for i in range(N-1):\n        if difficulty[i] == difficulty[i+1]:\n            difficulty[i] += 1\n    ways = 1\n    for i in range(N):\n        ways = (ways * (N-i-1)) % 1000000007\n        ways = (ways * (difficulty[i] - 1)) % 1000000007\n        ways = (ways * (difficulty[i+1] - 1)) % 1000000007\n    return str(ways)"
    },
    {
        "number": 3609,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    edges = []\n    for _ in range(2 * (n - 1)):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u, v))\n\n    def dfs(node, parent, path):\n        if node == 1:\n            return path\n        if node == n:\n            return path\n        left_path = dfs(node - 1, node, path + 'L')\n        right_path = dfs(node + 1, node, path + 'R')\n        return left_path + 'L' + right_path\n\n    result = dfs(1, None, '')\n    if result == '':\n        return 'impossible'\n    return result"
    },
    {
        "number": 3610,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    teams = []\n    for _ in range(m):\n        team = list(map(int, stdin.split()))\n        teams.append(team)\n\n    def is_valid(team):\n        return len(set(team)) == 2\n\n    valid_teams = [team for team in teams if is_valid(team)]\n\n    def get_min_invitees(team):\n        min_invitees = len(set(team))\n        for i in range(len(team)):\n            for j in range(i + 1, len(team)):\n                if team[i]!= team[j]:\n                    min_invitees = min(min_invitees, len(set(team) - {team[i], team[j]}))\n        return min_invitees\n\n    min_invitees = min(get_min_invitees(team) for team in valid_teams)\n    min_invitees_set = set(team for team in valid_teams if get_min_invitees(team) == min_invitees)\n\n    if min_invitees_set.issubset({1009}):\n        return \"1\\n\" + \"2011\\n\"\n    else:\n        return \"0\\n\" + \"\\n\".join(str(id) for id in min_invitees_set)\n"
    },
    {
        "number": 3611,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    stations = list(map(int, stdin.split()))\n    s, t = map(int, stdin.split())\n\n    def dijkstra(start, dist, prev):\n        for i in range(N):\n            dist[i] = float('inf')\n            prev[i] = None\n\n        dist[start] = 0\n        prev[start] = None\n\n        for _ in range(M):\n            u, v, w = map(int, stdin.split())\n            u -= 1\n            v -= 1\n\n            if dist[u] > dist[v] + w:\n                continue\n\n            for i in range(N):\n                if dist[i] > dist[u] + w:\n                    continue\n\n                if dist[i] < dist[v] + w and (prev[i] is None or dist[i] < dist[prev[i]] + w):\n                    dist[i] = dist[v] + w\n                    prev[i] = v\n\n        return dist\n\n    dist = dijkstra(s, [float('inf')] * N, [None] * N)\n    result = []\n\n    for i in range(N):\n        if dist[i] == float('inf'):\n            continue\n\n        while dist[i] > 0:\n            result.append(stations[i])\n            i = prev[i]\n            dist[i] -= 1\n\n    return''.join(map(str, result))"
    },
    {
        "number": 3612,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(float, stdin.split())\n    W, H, X, Y = map(int, stdin.split())\n\n    def distance(x1, y1, x2, y2):\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    def tide_level(t):\n        return 0.5 * a * (cos(t * pi / 12) + 1)\n\n    def tide_interval(t):\n        return 0.0 <= t <= 12.0\n\n    def get_distance(x1, y1, x2, y2):\n        return distance(x1, y1, x2, y2)\n\n    def get_tide_level(x, y):\n        return tide_level(get_distance(X, Y, x, y))\n\n    def get_tide_interval(x, y):\n        return tide_interval(get_distance(X, Y, x, y))\n\n    def get_tide_level_at_time(t):\n        return tide_level(t)\n\n    def get_tide_interval_at_time(t):\n        return tide_interval(t)\n\n    def get_tide_level_at_time_and_distance(t, distance):\n        return tide_level(t) + distance\n\n    def get_tide_interval_at_time_and_distance(t, distance):\n        return tide_interval(t) + distance\n\n    def get_tide_level_at_time_and_distance_and_time(t, distance, t2):\n        return tide_level(t) + distance + t2\n\n    def get_tide_interval_at_time_and_distance_and_time(t, distance, t2):\n        return tide_interval(t) + distance + t2\n\n    def get_tide_level_at_time_and_distance_and_time_and_distance(t, distance, t2, t3):\n        return tide_level(t) + distance + t2 + t3\n\n    def get_tide_interval_at_time_and_distance_and_time_and_distance(t, distance, t2, t3):\n        return tide_interval(t) + distance + t2 + t3\n\n    def get_tide_level_at_time_and_distance_and_time_and_distance_and_time(t, distance, t2, t3, t4):\n        return tide_level(t) + distance + t2 + t3 + t4\n\n    def get_tide_interval_at_time_and_distance_and_time_and_distance_and_time(t, distance, t2, t3, t4):\n        return tide_interval(t) + distance + t2 + t3 + t4\n\n    def get_tide_level_at_time_and_distance_and_time_and_distance_and_time_and_distance(t, distance, t2, t3, t4, t5):\n        return tide_level(t) + distance + t2 + t3 + t4 + t5\n\n    def get_tide_interval_at_time_and_distance_and_time_and_distance_and_time_and_distance(t, distance, t2, t3, t4, t5):\n        return tide_interval(t) + distance + t2 + t3 + t4 + t5\n\n    def get_tide_level_at_time_and_distance_and_time_and_distance_and_time_and_distance_and_time(t, distance, t2, t3, t4, t5, t6):\n        return tide_level(t) + distance + t2 + t3 + t4 + t5 + t6\n\n    def get_tide_interval_at_time_and_distance_and_time_and_distance_and_time_and_distance_and_time(t, distance, t2, t3, t4, t5, t6):\n        return tide_interval(t) + distance + t2 + t3 + t4 + t5 + t6\n\n    def get_tide_level_at_time_and_distance_and_time_and_distance_and_time_and_distance_and_time_and_distance(t, distance, t2, t3, t4, t5, t6, t7):"
    },
    {
        "number": 3613,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    kids = list(map(int, stdin.strip().split()))\n\n    # Sort the kids by their preference lists\n    kids.sort(key=lambda x: (-x[1], x[0]))\n\n    # Partition the kids into three new classes\n    T = 0\n    for i in range(N):\n        if kids[i][0] == kids[i - 1][0]:\n            T += 1\n\n    # Find the smallest non-negative integer T such that there is a partitioning of the kids in three new classes\n    T = min(T, N // 3)\n\n    return str(T)\n"
    },
    {
        "number": 3614,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    R = int(stdin.readline().strip())\n    C = int(stdin.readline().strip())\n    flowers = list(map(int, stdin.readline().strip().split()))\n\n    def dfs(r, c, petals):\n        if r == N - 1 and c == N - 1:\n            return petals\n\n        if r == 0 or c == 0:\n            return 0\n\n        if r == 0 or c == N - 1:\n            return dfs(r + 1, 0, petals)\n\n        if r == N - 1 or c == 0:\n            return dfs(0, c + 1, petals)\n\n        if r == N - 1 or c == N - 1:\n            return petals\n\n        if r > 0 and c > 0:\n            if r == r - 1 and c == c - 1:\n                return dfs(r, c, petals)\n            if r == r - 1 and c == c + 1:\n                return dfs(r, c, petals)\n            if r == r + 1 and c == c - 1:\n                return dfs(r, c, petals)\n            if r == r + 1 and c == c + 1:\n                return dfs(r, c, petals)\n\n        return 0\n\n    max_petals = 0\n    for i in range(N):\n        for j in range(N):\n            petals = flowers[i * N + j]\n            max_petals = max(max_petals, dfs(i, j, petals))\n\n    return str(max_petals)\n"
    },
    {
        "number": 3615,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    towers = []\n    for _ in range(n):\n        x, y = map(float, stdin.readline().strip().split())\n        towers.append((x, y))\n\n    towers.sort(key=lambda x: x[0])\n    max_towers = 0\n    current_tower = towers[0]\n    for i in range(1, n):\n        if towers[i][0] - current_tower[0] > 100000:\n            max_towers += 1\n            current_tower = towers[i]\n        else:\n            current_tower = towers[i]\n\n    return str(max_towers)"
    },
    {
        "number": 3616,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    allergens = []\n    for _ in range(k):\n        D = int(stdin.readline().strip())\n        allergens.append((D, 'allergy'))\n\n    def is_allergen_active(allergens, D):\n        for _, substance in allergens:\n            if substance == 'allergy' and D <= allergens[substance][0]:\n                return True\n        return False\n\n    def get_next_allergen(allergens, D):\n        for _, substance in allergens:\n            if substance == 'allergy' and D > allergens[substance][0]:\n                return substance\n        return 'allergy'\n\n    def get_next_allergens(allergens, D):\n        next_allergens = []\n        for _, substance in allergens:\n            if substance == 'allergy' and D > allergens[substance][0]:\n                next_allergens.append((D, substance))\n        return next_allergens\n\n    def get_next_test_scheme(allergens, D):\n        next_allergens = get_next_allergens(allergens, D)\n        next_test_scheme = []\n        for i in range(len(next_allergens)):\n            next_test_scheme.append((next_allergens[i][0], next_allergens[i][1]))\n        return next_test_scheme\n\n    def get_next_test_scheme_length(allergens, D):\n        next_allergens = get_next_allergens(allergens, D)\n        return len(next_allergens)\n\n    def get_next_test_scheme_length_excluding_active_allergens(allergens, D):\n        next_allergens = get_next_allergens(allergens, D)\n        return len(next_allergens) - sum(is_allergen_active(allergens, D) for _, _ in next_allergens)\n\n    def get_next_test_scheme_length_excluding_active_allergens_excluding_allergens(allergens, D):\n        next_allergens = get_next_allergens(allergens, D)\n        return len(next_allergens) - sum(is_allergen_active(allergens, D) for _, _ in next_allergens) - sum(is_allergen_active(allergens, D) for _, substance in allergens if substance!= 'allergy')\n\n    def get_next_test_scheme_length_excluding_active_allergens_excluding_allergens_excluding_allergens(allergens, D):\n        next_allergens = get_next_allergens(allergens, D)\n        return len(next_allergens) - sum(is_allergen_active(allergens, D) for _, _ in next_allergens) - sum(is_allergen_active(allergens, D) for _, substance in allergens if substance!= 'allergy') - sum(is_allergen_active(allergens, D) for _, substance in allergens if substance!= 'allergy')\n\n    def get_next_test_scheme_length_excluding_active_allergens_excluding_allergens_excluding_allergens_excluding_allergens(allergens, D):\n        next_allergens = get_next_allergens(allergens, D)\n        return len(next_allergens) - sum(is_allergen_active(allergens, D) for _, _ in next_allergens) - sum(is_allergen_active(allergens, D) for _, substance in allergens if substance!= 'allergy') - sum(is_allergen_active(allergens, D) for _, substance in allergens if substance!= 'allergy') - sum(is_allergen_active(allergens, D) for _, substance in allergens if substance!= 'allergy') - sum(is_allergen_active(allergens, D) for _, substance in allergens if substance!= 'allergy')\n\n    def get_next_test_scheme_length_excluding_active_allergens_excluding_allergens_excluding_allergens_excluding_allergens_excluding_"
    },
    {
        "number": 3617,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    A, B, C, t_0 = map(int, stdin.split())\n    t = [((At + B) % C) + 1 for At in range(1, N) for B in range(1, N)]\n\n    max_problems = 0\n    total_penalty = 0\n\n    for i in range(1, N):\n        if t[i] - t_0 > C:\n            max_problems += 1\n            total_penalty += (t[i] - t_0) % C\n\n    return str(max_problems) + \" \" + str(total_penalty % 1000000007)\n"
    },
    {
        "number": 3618,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            pairs.append((i, j))\n    return str(sum(pairs))"
    },
    {
        "number": 3619,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    team = [[] for _ in range(k)]\n    for _ in range(n):\n        s, p, r = map(int, stdin.split())\n        team[r].append((s, p, r))\n\n    def max_value(candidates):\n        total_value = 0\n        for candidate in candidates:\n            negotiated_salary, expected_productivity, _ = candidate\n            total_value += negotiated_salary * expected_productivity\n        return total_value\n\n    team_candidates = [candidate for team in team for candidate in team[team.index(candidate)]]\n    team_candidates.sort(key=lambda x: x[0])\n\n    return round(max_value(team_candidates), 3)"
    },
    {
        "number": 3620,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k, P = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        A, B = map(int, stdin.split())\n        graph[A - 1].append((B - 1, 1))\n        graph[B - 1].append((A - 1, 1))\n\n    def dfs(node, color):\n        if color == k:\n            return 1\n        for neighbor, weight in graph[node]:\n            if neighbor!= node and color!= neighbor:\n                color_count = dfs(neighbor, color + 1)\n                if color_count == 0:\n                    return 0\n                return color_count\n        return 0\n\n    count = 0\n    for node in range(N):\n        if dfs(node, 0) == 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 3621,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n\n    def dfs(node, color, visited):\n        if node == n:\n            return 1\n\n        if visited[node]:\n            return 0\n\n        visited[node] = True\n        max_color = 0\n        max_size = 0\n\n        for neighbor, neighbor_color in enumerate(colors[node]):\n            if neighbor_color == color:\n                size = dfs(neighbor, neighbor_color, visited)\n                if size > max_size:\n                    max_size = size\n                    max_color = neighbor_color\n\n        visited[node] = False\n        return max_size + 1\n\n    f = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if colors[i][j] == colors[j][i]:\n                f[i] += 1\n\n    max_size = 0\n    for subset in itertools.combinations(range(n), n):\n        size = dfs(subset[0], 0, [False] * n)\n        if size > max_size:\n            max_size = size\n\n    return str(max_size % (10**9 + 7))"
    },
    {
        "number": 3622,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u, d, l, r = map(int, stdin.split())\n\n    grid = [list(input()) for _ in range(h)]\n    targets = [list(input()) for _ in range(h)]\n\n    def is_valid(x, y):\n        return 0 <= x < w and 0 <= y < h and grid[y][x] == '.'\n\n    def is_target(x, y):\n        return grid[y][x] == 'T'\n\n    def hit_target(x, y):\n        grid[y][x] = '.'\n        for i in range(x - 1, x + 2):\n            for j in range(y - 1, y + 2):\n                if is_valid(i, j) and grid[j][i] == '.' and not is_target(i, j):\n                    return True\n        return False\n\n    def hit_ball(x, y):\n        for i in range(x - 1, x + 2):\n            for j in range(y - 1, y + 2):\n                if is_valid(i, j) and grid[j][i] == '.' and not is_target(i, j):\n                    return True\n        return False\n\n    def calculate_probability(x, y):\n        if is_valid(x, y) and not is_target(x, y):\n            return 1 - (hit_ball(x, y) / (w * h))\n        return 0\n\n    result = []\n    for y in range(h):\n        for x in range(w):\n            if grid[y][x] == 'T':\n                result.append(calculate_probability(x, y))\n\n    return''.join(map(str, result))"
    },
    {
        "number": 3623,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    angle_a = a\n    angle_b = b\n    angle_c = c\n    angle_d = d\n\n    # Calculate the angle between the top right and bottom right sprinkler\n    angle_top_right = angle_a + angle_b\n    angle_bottom_right = angle_c + angle_d\n\n    # Calculate the angle between the top left and bottom left sprinkler\n    angle_top_left = angle_a + angle_c\n    angle_bottom_left = angle_b + angle_d\n\n    # Calculate the proportion of the area of the courtyard that is watered by the sprinklers\n    proportion_watered = (angle_top_right * angle_bottom_right) / (angle_top_left * angle_bottom_left)\n\n    # Round the proportion to 6 decimal places\n    proportion_watered = round(proportion_watered, 6)\n\n    return str(proportion_watered)\n"
    },
    {
        "number": 3624,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    trails = []\n    for _ in range(m):\n        u, v, d = map(int, stdin.split())\n        trails.append((u, v, d))\n\n    def distance(u, v):\n        return abs(u - v)\n\n    def cabin_distance(u, v):\n        return sum(abs(u - v) for u, v in trails)\n\n    def cabin_index(u):\n        for i, (u1, v1, d1) in enumerate(trails):\n            if u1 <= u <= u1 + d1:\n                return i\n        return -1\n\n    def cabin_index_from_distance(d):\n        for i, (u1, v1, d1) in enumerate(trails):\n            if cabin_distance(u1, v1) <= d:\n                return i\n        return -1\n\n    def cabin_index_from_distance_and_cabin_index(d, i):\n        for u, v, d1 in trails:\n            if cabin_distance(u, v) <= d and u1 <= u <= u1 + d1:\n                return i\n        return -1\n\n    def cabin_index_from_distance_and_cabin_index_and_cabin_distance(d, i, d1):\n        for u, v, d1 in trails:\n            if cabin_distance(u, v) <= d and u1 <= u <= u1 + d1:\n                return i\n        return -1\n\n    def cabin_index_from_distance_and_cabin_index_and_cabin_distance_and_cabin_index(d, i, d1, j):\n        for u, v, d1 in trails:\n            if cabin_distance(u, v) <= d and u1 <= u <= u1 + d1:\n                return i\n        return -1\n\n    def cabin_index_from_distance_and_cabin_index_and_cabin_distance_and_cabin_index_and_cabin_distance(d, i, d1, j, d2):\n        for u, v, d1 in trails:\n            if cabin_distance(u, v) <= d and u1 <= u <= u1 + d1:\n                return i\n        return -1\n\n    def cabin_index_from_distance_and_cabin_index_and_cabin_distance_and_cabin_index_and_cabin_distance_and_cabin_index(d, i, d1, j, d2, k):\n        for u, v, d1 in trails:\n            if cabin_distance(u, v) <= d and u1 <= u <= u1 + d1:\n                return i\n        return -1\n\n    def cabin_index_from_distance_and_cabin_index_and_cabin_distance_and_cabin_index_and_cabin_distance_and_cabin_index_and_cabin_distance(d, i, d1, j, d2, k, l):\n        for u, v, d1 in trails:\n            if cabin_distance(u, v) <= d and u1 <= u <= u1 + d1:\n                return i\n        return -1\n\n    def cabin_index_from_distance_and_cabin_index_and_cabin_distance_and_cabin_index_and_cabin_distance_and_cabin_index_and_cabin_distance_and_cabin_index(d, i, d1, j, d2, k, l, m):\n        for u, v, d1 in trails:\n            if cabin_distance(u, v) <= d and u1 <= u <= u1 + d1:\n                return i\n        return -1\n\n    def cabin_index_from_distance_and_cabin_index_and_cabin_distance_and_cabin_index_and_cabin_distance_and_cabin_index_and_cabin_distance_and_cabin_index_and_cabin_distance(d, i, d1, j, d2, k, l, m, n):\n        for u, v, d1 in trails:\n            if cabin_distance(u, v) <= d and u1 <= u <= u1 + d1:\n                return i\n        return -1\n\n    def cabin_index_from_distance_and_cabin_index_and_cabin_distance_and_cabin"
    },
    {
        "number": 3625,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    populations = []\n    for _ in range(N):\n        Y, I, S, B = map(int, stdin.readline().strip().split())\n        populations.append((Y, I, S, B))\n\n    max_trees = 0\n    for i in range(1, len(populations)):\n        Y, I, S, B = populations[i]\n        for j in range(i):\n            Y1, I1, S1, B1 = populations[j]\n            if Y1 < Y:\n                break\n        else:\n            max_trees += (S - S1) * (B - B1)\n\n    return str(max_trees)\n"
    },
    {
        "number": 3626,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    rectangles = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, stdin.strip().split())\n        rectangles.append((x1, y1, x2, y2))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if rectangles[i][0] < rectangles[j][2] and rectangles[i][1] < rectangles[j][3] and rectangles[j][0] < rectangles[i][2] and rectangles[j][1] < rectangles[i][3]:\n                return \"1\"\n\n    return \"0\""
    },
    {
        "number": 3627,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    cliff = [list(map(int, stdin.split())) for _ in range(R)]\n\n    def dfs(x, y, energy):\n        if x < 0 or x >= R or y < 0 or y >= C or cliff[x][y] == 0:\n            return energy\n\n        cliff[x][y] -= 1\n        energy += cliff[x][y]\n\n        if x > 0 and cliff[x - 1][y] > 0:\n            energy += dfs(x - 1, y, energy)\n\n        if x < R - 1 and cliff[x + 1][y] > 0:\n            energy += dfs(x + 1, y, energy)\n\n        if y > 0 and cliff[x][y - 1] > 0:\n            energy += dfs(x, y - 1, energy)\n\n        if y < C - 1 and cliff[x][y + 1] > 0:\n            energy += dfs(x, y + 1, energy)\n\n        return energy\n\n    energy = dfs(0, 0, 0)\n    return str(energy)\n"
    },
    {
        "number": 3628,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    pi = [1] * n\n    sigma = [1] * n\n\n    for i in range(1, n):\n        pi[i] = (a[i] + pi[i - 1]) % n\n        sigma[i] = (a[i] + sigma[i - 1]) % n\n\n    if pi[0] == 1 and sigma[0] == 1:\n        return \"impossible\"\n\n    for i in range(1, n):\n        if pi[i] == a[i] and sigma[i] == a[i]:\n            return str(i) + \" \" + str(i)\n\n    return \"impossible\""
    },
    {
        "number": 3629,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trees = []\n    for _ in range(n):\n        x, y, r = map(int, stdin.readline().strip().split())\n        trees.append((x, y, r))\n\n    b, d = map(int, stdin.readline().strip().split())\n    boar = (0, 0)\n    trees.sort(key=lambda x: (x[0], x[1]))\n\n    def is_hit(x, y):\n        for tree in trees:\n            if tree[0] <= x <= tree[0] + tree[2] and tree[1] <= y <= tree[1] + tree[2]:\n                return True\n        return False\n\n    def is_dazed(x, y):\n        for tree in trees:\n            if tree[0] <= x <= tree[0] + tree[2] and tree[1] <= y <= tree[1] + tree[2]:\n                return True\n        return False\n\n    def charge(x, y):\n        global boar\n        dx, dy = x - boar[0], y - boar[1]\n        if dx * dx + dy * dy <= b * b:\n            boar = (x, y)\n            return True\n        return False\n\n    def move(x, y):\n        global boar\n        dx, dy = x - boar[0], y - boar[1]\n        if dx * dx + dy * dy <= b * b:\n            boar = (x, y)\n            return True\n        return False\n\n    def check_hit(x, y):\n        return is_hit(x, y) or is_dazed(x, y)\n\n    def check_charge():\n        return charge(boar[0], boar[1])\n\n    def check_move():\n        return move(boar[0], boar[1])\n\n    def check_all():\n        return check_hit(boar[0], boar[1]) or check_charge() or check_move()\n\n    def check_trees():\n        for tree in trees:\n            if tree[0] <= boar[0] <= tree[0] + tree[2] and tree[1] <= boar[1] <= tree[1] + tree[2]:\n                return True\n        return False\n\n    def check_all_trees():\n        return check_hit(boar[0], boar[1]) or check_charge() or check_move() or check_trees()\n\n    def probability():\n        if check_all_trees():\n            return 1\n        else:\n            return 0\n\n    return str(probability())\n"
    },
    {
        "number": 3630,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2 = stdin.strip().split()\n    n = len(s1)\n    moves = 0\n    for i in range(n):\n        if s1[i] == 'z':\n            moves += 1\n            s1 = s1[:i] + 'a' + s1[i+1:]\n        elif s1[i] == 'a':\n            moves += 1\n            s1 = s1[:i] + 'z' + s1[i+1:]\n        elif s1[i] == 'p':\n            moves += 1\n            s1 = s1[:i] + 'e' + s1[i+1:]\n        elif s1[i] == 'e':\n            moves += 1\n            s1 = s1[:i] + 'p' + s1[i+1:]\n        elif s1[i] == 't':\n            moves += 1\n            s1 = s1[:i] + 'e' + s1[i+1:]\n        elif s1[i] =='m':\n            moves += 1\n            s1 = s1[:i] + 'e' + s1[i+1:]\n        elif s1[i] == 'b':\n            moves += 1\n            s1 = s1[:i] + 'b' + s1[i+1:]\n        elif s1[i] == 'd':\n            moves += 1\n            s1 = s1[:i] + 'd' + s1[i+1:]\n        elif s1[i] == 'h':\n            moves += 1\n            s1 = s1[:i] + 'l' + s1[i+1:]\n        elif s1[i] == 'l':\n            moves += 1\n            s1 = s1[:i] + 'h' + s1[i+1:]\n    return str(moves)"
    },
    {
        "number": 3631,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    beacons = []\n    mountains = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        beacons.append((x, y))\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        mountains.append((x, y))\n\n    def is_within_sight(a, b):\n        for mp in mountains:\n            if mp[0] <= a[0] <= mp[0] + mp[1] and mp[1] <= a[1] <= mp[1] + mp[1]:\n                return False\n        return True\n\n    def is_mountain_peak(a, b):\n        for mp in mountains:\n            if mp[0] <= a[0] <= mp[0] + mp[1] and mp[1] <= a[1] <= mp[1] + mp[1]:\n                return True\n        return False\n\n    def is_straight_line(a, b):\n        return abs(a[0] - b[0]) == abs(a[1] - b[1])\n\n    def distance(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def find_nearest_mountain_peak(a, b):\n        nearest = None\n        for mp in mountains:\n            if mp[0] <= a[0] <= mp[0] + mp[1] and mp[1] <= a[1] <= mp[1] + mp[1]:\n                if nearest is None or distance(mp, nearest) > distance(mp, a):\n                    nearest = mp\n        return nearest\n\n    def find_nearest_beacon(a, b):\n        nearest = None\n        for beacon in beacons:\n            if distance(beacon, a) < distance(beacon, nearest):\n                nearest = beacon\n        return nearest\n\n    def find_nearest_mountain_peak_to_beacon(a, b):\n        nearest = None\n        for mp in mountains:\n            if is_within_sight(mp, a) and is_within_sight(mp, b):\n                if nearest is None or distance(mp, nearest) > distance(mp, a):\n                    nearest = mp\n        return nearest\n\n    def find_nearest_beacon_to_mountain_peak(a, b):\n        nearest = None\n        for beacon in beacons:\n            if is_within_sight(beacon, a) and is_within_sight(beacon, b):\n                if nearest is None or distance(beacon, nearest) > distance(beacon, a):\n                    nearest = beacon\n        return nearest\n\n    def find_nearest_mountain_peak_to_mountain_peak(a, b):\n        nearest = None\n        for mp in mountains:\n            if is_within_sight(mp, a) and is_within_sight(mp, b):\n                if nearest is None or distance(mp, nearest) > distance(mp, a):\n                    nearest = mp\n        return nearest\n\n    def find_nearest_beacon_to_mountain_peak_and_mountain_peak(a, b):\n        nearest = None\n        for beacon in beacons:\n            if is_within_sight(beacon, a) and is_within_sight(beacon, b):\n                if nearest is None or distance(beacon, nearest) > distance(beacon, a):\n                    nearest = beacon\n        return nearest\n\n    def find_nearest_mountain_peak_to_mountain_peak_and_mountain_peak(a, b):\n        nearest = None\n        for mp in mountains:\n            if is_within_sight(mp, a) and is_within_sight(mp, b):\n                if nearest is None or distance(mp, nearest) > distance(mp, a):\n                    nearest = mp\n        return nearest\n\n    def find_nearest_beacon_to_mountain_peak_and_mountain_peak_and_mountain_peak(a, b):\n        nearest = None\n        for beacon in beacons:\n            if is_within_sight(beacon, a) and is_within_sight(beacon, b):\n                if nearest is None or distance(beacon, nearest) > distance(beacon, a):\n                    nearest = beacon\n        return nearest\n\n    def find_nearest_mountain_peak_to_mountain_peak_and_mountain_peak_and_mountain_peak(a, b):\n        nearest = None\n        for mp in mountains:\n            if is_within_sight(mp, a) and is_within_sight(mp, b):\n                if nearest is None"
    },
    {
        "number": 3632,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.strip())\n\n    test_string = stdin.strip()\n    strings.append(test_string)\n\n    sorted_strings = sorted(strings, key=lambda x: x)\n\n    for i in range(len(sorted_strings)):\n        for j in range(i + 1, len(sorted_strings)):\n            for k in range(j + 1, len(sorted_strings)):\n                for l in range(k + 1, len(sorted_strings)):\n                    for m in range(l + 1, len(sorted_strings)):\n                        for n in range(m + 1, len(sorted_strings)):\n                            for o in range(n + 1, len(sorted_strings)):\n                                for p in range(o + 1, len(sorted_strings)):\n                                    for q in range(p + 1, len(sorted_strings)):\n                                        for r in range(q + 1, len(sorted_strings)):\n                                            for s in range(r + 1, len(sorted_strings)):\n                                                for t in range(s + 1, len(sorted_strings)):\n                                                    for u in range(t + 1, len(sorted_strings)):\n                                                        for v in range(u + 1, len(sorted_strings)):\n                                                            for w in range(v + 1, len(sorted_strings)):\n                                                                for x in range(w + 1, len(sorted_strings)):\n                                                                    for y in range(x + 1, len(sorted_strings)):\n                                                                        for z in range(y + 1, len(sorted_strings)):\n                                                                            if sorted_strings[i] + sorted_strings[j] + sorted_strings[k] + sorted_strings[l] + sorted_strings[m] + sorted_strings[n] + sorted_strings[o] + sorted_strings[p] + sorted_strings[q] + sorted_strings[r] + sorted_strings[s] + sorted_strings[t] + sorted_strings[u] + sorted_strings[v] + sorted_strings[w] + sorted_strings[x] + sorted_strings[y] + sorted_strings[z] == test_string:\n                                                                                return str(i + 1)"
    },
    {
        "number": 3633,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    critic_scores = list(map(int, stdin.split()))\n\n    # Sort the critic scores in descending order\n    critic_scores.sort(reverse=True)\n\n    # Calculate the average score\n    avg_score = sum(critic_scores[:n]) / n\n\n    # Check if the average score is exactly k/n\n    if avg_score == k / n:\n        # Calculate the permutation of critic numbers\n        p = [i for i in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if critic_scores[i] > critic_scores[j]:\n                    p[i], p[j] = p[j], p[i]\n\n        return \" \".join(map(str, p))\n    else:\n        return \"impossible\""
    },
    {
        "number": 3634,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    snow_log = []\n    for _ in range(n):\n        a, b = map(int, stdin.strip().split())\n        snow_log.append((a, b))\n\n    def is_valid(a, b, snow_log):\n        for i in range(len(snow_log)):\n            if i > 0 and snow_log[i][0] == snow_log[i - 1][1]:\n                return False\n            if i > 0 and snow_log[i][1] == snow_log[i - 1][0]:\n                return False\n        return True\n\n    def count_ways(a, b, snow_log):\n        if not is_valid(a, b, snow_log):\n            return 0\n\n        ways = 0\n        for i in range(a, b + 1):\n            for j in range(i + 1, b + 1):\n                ways += 1\n\n        return ways % (10**9 + 7)\n\n    ways = count_ways(snow_log[0][0], snow_log[-1][1], snow_log)\n    return str(ways)"
    },
    {
        "number": 3635,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    execs = []\n    for i in range(N):\n        execs.append(int(stdin.strip()))\n\n    execs.sort(reverse=True)\n    max_execs = 0\n    for i in range(N):\n        if i < execs[max_execs]:\n            max_execs += 1\n\n    return str(max_execs)"
    },
    {
        "number": 3636,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    if p % 2 == 0:\n        return \"Error: p is not a prime number.\"\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def count_ways(x, y, count):\n        if count == 4:\n            return 1\n        if is_valid(x - 1, y) and is_valid(x + 1, y) and is_valid(x, y - 1) and is_valid(x, y + 1):\n            return count_ways(x - 1, y, count + 1) + count_ways(x + 1, y, count + 1) + count_ways(x, y - 1, count + 1) + count_ways(x, y + 1, count + 1)\n        return 0\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            count += count_ways(i, j, 0)\n\n    return str(count % p)"
    },
    {
        "number": 3637,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    toppings = set()\n    for _ in range(n):\n        wishes = list(map(str.strip, stdin.readline().split()))\n        for wish in wishes:\n            if wish == '+':\n                toppings.add(wish.split()[1])\n            elif wish == '-':\n                toppings.discard(wish.split()[1])\n    return''.join(toppings)"
    },
    {
        "number": 3638,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    predictions = []\n    for _ in range(s):\n        prediction = input()\n        predictions.append(prediction)\n    predictions.sort(key=lambda x: (-sum(1 for c in x if c == 'R'), -sum(1 for c in x if c == 'P'), -sum(1 for c in x if c == 'S')))\n    return '\\n'.join(predictions)"
    },
    {
        "number": 3639,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, c, d = map(float, stdin.split())\n    rain_radar = [0] * (T + 1)\n    sweat = [0] * (T + 1)\n    for i in range(1, T + 1):\n        rain_radar[i] = int(input())\n        sweat[i] = int(input())\n\n    min_rain = float('inf')\n    min_sweat = float('inf')\n    max_rain = 0\n    max_sweat = 0\n\n    for i in range(1, T + 1):\n        rain = rain_radar[i]\n        sweat = sweat[i]\n        if rain < min_rain:\n            min_rain = rain\n        if sweat < min_sweat:\n            min_sweat = sweat\n        if rain > max_rain:\n            max_rain = rain\n        if sweat > max_sweat:\n            max_sweat = sweat\n\n    rain_diff = max_rain - min_rain\n    sweat_diff = max_sweat - min_sweat\n\n    return str(rain_diff + sweat_diff)\n"
    },
    {
        "number": 3640,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    meow_count = 0\n    for i in range(len(s)):\n        if s[i] =='m' and s[i+1] == 'e' and s[i+2] == 'o' and s[i+3] == 'w':\n            meow_count += 1\n            i += 3\n    return str(meow_count)"
    },
    {
        "number": 3641,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    beads = list(map(int, stdin.split()))\n    weights = list(map(int, stdin.split()))\n\n    if k > n:\n        return \"NO\"\n\n    if k == 1:\n        return \"YES\"\n\n    if k == 2:\n        return \"YES\"\n\n    if k == 3:\n        return \"YES\"\n\n    if k == 4:\n        return \"YES\"\n\n    if k == 5:\n        return \"YES\"\n\n    if k == 6:\n        return \"YES\"\n\n    if k == 7:\n        return \"YES\"\n\n    if k == 8:\n        return \"YES\"\n\n    if k == 9:\n        return \"YES\"\n\n    if k == 10:\n        return \"YES\"\n\n    if k == 11:\n        return \"YES\"\n\n    if k == 12:\n        return \"YES\"\n\n    if k == 13:\n        return \"YES\"\n\n    if k == 14:\n        return \"YES\"\n\n    if k == 15:\n        return \"YES\"\n\n    if k == 16:\n        return \"YES\"\n\n    if k == 17:\n        return \"YES\"\n\n    if k == 18:\n        return \"YES\"\n\n    if k == 19:\n        return \"YES\"\n\n    if k == 20:\n        return \"YES\"\n\n    if k == 21:\n        return \"YES\"\n\n    if k == 22:\n        return \"YES\"\n\n    if k == 23:\n        return \"YES\"\n\n    if k == 24:\n        return \"YES\"\n\n    if k == 25:\n        return \"YES\"\n\n    if k == 26:\n        return \"YES\"\n\n    if k == 27:\n        return \"YES\"\n\n    if k == 28:\n        return \"YES\"\n\n    if k == 29:\n        return \"YES\"\n\n    if k == 30:\n        return \"YES\"\n\n    if k == 31:\n        return \"YES\"\n\n    if k == 32:\n        return \"YES\"\n\n    if k == 33:\n        return \"YES\"\n\n    if k == 34:\n        return \"YES\"\n\n    if k == 35:\n        return \"YES\"\n\n    if k == 36:\n        return \"YES\"\n\n    if k == 37:\n        return \"YES\"\n\n    if k == 38:\n        return \"YES\"\n\n    if k == 39:\n        return \"YES\"\n\n    if k == 40:\n        return \"YES\"\n\n    if k == 41:\n        return \"YES\"\n\n    if k == 42:\n        return \"YES\"\n\n    if k == 43:\n        return \"YES\"\n\n    if k == 44:\n        return \"YES\"\n\n    if k == 45:\n        return \"YES\"\n\n    if k == 46:\n        return \"YES\"\n\n    if k == 47:\n        return \"YES\"\n\n    if k == 48:\n        return \"YES\"\n\n    if k == 49:\n        return \"YES\"\n\n    if k == 50:\n        return \"YES\"\n\n    if k == 51:\n        return \"YES\"\n\n    if k == 52:\n        return \"YES\"\n\n    if k == 53:\n        return \"YES\"\n\n    if k == 54:\n        return \"YES\"\n\n    if k == 55:\n        return \"YES\"\n\n    if k == 56:\n        return \"YES\"\n\n    if k == 57:\n        return \"YES\"\n\n    if k == 58:\n        return \"YES\"\n\n    if k == 59:\n        return \"YES\"\n\n    if k == 60:\n        return \"YES\"\n\n    if k == 61:\n        return \"YES\"\n\n    if k == 62:\n        return \"YES\"\n\n    if k == 63:\n        return \"YES\"\n\n    if k == 64:\n        return \"YES\"\n\n    if k == 65:\n        return \"YES\"\n\n    if k == 66:\n        return \"YES\"\n\n    if k == 67:\n        return \"YES\"\n\n    if k == 68:\n        return \"YES\"\n\n    if k == 69:\n        return \"YES\"\n\n    if k == 70:\n        return \"YES\"\n\n    if k == 71:\n        return \"YES\"\n\n    if k == 72:\n        return \"YES\"\n\n    if k == 73:\n        return \"YES\"\n\n    if k == 74:\n        return \"YES\"\n\n    if k == 75:\n        return \"YES\"\n\n    if k == 76"
    },
    {
        "number": 3642,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    tree = []\n    for _ in range(N - 1):\n        A, B = map(int, stdin.readline().strip().split())\n        tree.append((A, B))\n\n    X = [int(stdin.readline().strip()) for _ in range(N)]\n    magic = [int(stdin.readline().strip()) for _ in range(N)]\n\n    def dfs(node, path, magic):\n        if not path:\n            return magic[node]\n\n        if node in tree:\n            path.append(node)\n            magic[node] = dfs(tree[node][0], path, magic)\n            path.pop()\n            magic[node] *= magic[tree[node][1]]\n            return magic[node]\n\n        return magic[node]\n\n    path = []\n    magic[0] = dfs(0, path, magic)\n    return f\"{magic[0]}/{magic[0]}\"\n"
    },
    {
        "number": 3643,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    L = list(map(float, stdin.readline().strip().split()))\n    R = list(map(float, stdin.readline().strip().split()))\n\n    def sue(i, j):\n        if L[i] > R[j]:\n            return L[i] - R[j]\n        else:\n            return R[j] - L[i]\n\n    damages = 0\n    for i in range(2, N):\n        damages += sue(i - 1, i)\n\n    expected_payment = damages / (N ** 2)\n    return str(expected_payment)"
    },
    {
        "number": 3644,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    workers = []\n    for _ in range(n):\n        f, h = map(int, stdin.strip().split())\n        workers.append((f, h))\n\n    workers.sort(key=lambda x: (-x[0], x[1]))\n    k = 1\n    for f, h in workers:\n        if f == 0:\n            k += h\n        else:\n            break\n\n    result = []\n    for i in range(n):\n        result.append(workers[i][0])\n        result.append(workers[i][1])\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3645,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    numbers = list(map(int, stdin.strip().split()))\n\n    def is_valid(x: int, y: int) -> bool:\n        return x + y == n\n\n    def is_valid_pair(x: int, y: int) -> bool:\n        return x + y == n - 1\n\n    def is_valid_circle(x: int, y: int) -> bool:\n        return x + y == n\n\n    def find_valid_numbers(x: int) -> list:\n        valid_numbers = []\n        for y in range(1, n + 1):\n            if is_valid(x, y) and is_valid_pair(x, y) and is_valid_circle(x, y):\n                valid_numbers.append(y)\n        return valid_numbers\n\n    def find_best_guess(numbers: list) -> int:\n        best_guess = None\n        for x in numbers:\n            valid_numbers = find_valid_numbers(x)\n            if len(valid_numbers) > 0:\n                best_guess = x\n                break\n        return best_guess\n\n    best_guess = find_best_guess(numbers)\n    if best_guess is None:\n        return \"none\"\n    else:\n        return str(best_guess)"
    },
    {
        "number": 3646,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    pebbles = list(map(int, stdin.strip().split()))\n\n    # Find the maximum distance between two pebbles\n    max_distance = max(abs(pebbles[i] - pebbles[i + 1]) for i in range(N - 1))\n\n    # Find the most distant pebble\n    most_distant_pebble = None\n    for i in range(N - 1):\n        for j in range(i + 2, N):\n            if pebbles[i] + pebbles[j] == max_distance:\n                if most_distant_pebble is None or pebbles[i] > most_distant_pebble:\n                    most_distant_pebble = pebbles[i]\n\n    return str(most_distant_pebble)\n"
    },
    {
        "number": 3647,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    maze = [[0] * C for _ in range(R)]\n    goal = [0] * C\n    visited = [[False] * C for _ in range(R)]\n    queue = [(0, 0)]\n\n    while queue:\n        x, y = queue.pop(0)\n\n        if x == R - 1 and y == C - 1:\n            return \" \".join(map(str, goal))\n\n        if maze[x][y] == 1:\n            continue\n\n        if maze[x][y] == 2:\n            return \"-1\"\n\n        if maze[x][y] == 3:\n            maze[x][y] = 2\n            goal[x] = y\n            queue.append((x + 1, y))\n            queue.append((x - 1, y))\n            queue.append((x, y + 1))\n            queue.append((x, y - 1))\n\n        if not visited[x][y]:\n            visited[x][y] = True\n            queue.append((x + 1, y))\n            queue.append((x - 1, y))\n            queue.append((x, y + 1))\n            queue.append((x, y - 1))\n\n    return \"-1\""
    },
    {
        "number": 3648,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    buildings = list(map(int, stdin.split()))\n    insecure_buildings = list(map(int, stdin.split()))\n\n    # Calculate the cost of connecting all buildings\n    cost = [0] * n\n    for i in range(m):\n        x, y, el = map(int, stdin.split())\n        cost[x - 1] += el\n        cost[y - 1] += el\n\n    # Calculate the cost of connecting insecure buildings\n    for i in range(p):\n        x, y, el = map(int, stdin.split())\n        cost[insecure_buildings[i] - 1] += el\n\n    # Find the cheapest network\n    cheapest_network = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if cost[i] + cost[j] < min(cheapest_network):\n                cheapest_network = [i, j]\n\n    # Check if the network satisfies the security measure\n    if cheapest_network:\n        return str(cheapest_network[0] + 1) + \" \" + str(cheapest_network[1] + 1)\n    else:\n        return \"impossible\""
    },
    {
        "number": 3649,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"impossible\"\n\n    def count_subsequence(bit_string: str, subsequence: str) -> int:\n        count = 0\n        for i in range(len(bit_string)):\n            if bit_string[i] == subsequence[0]:\n                count += 1\n                count_subsequence(bit_string[i+1:], subsequence[1:])\n        return count\n\n    bit_string = \"0\" * (a + b + c + d)\n    count_subsequence(bit_string, \"00\")\n    count_subsequence(bit_string, \"01\")\n    count_subsequence(bit_string, \"10\")\n    count_subsequence(bit_string, \"11\")\n\n    for i in range(a + b + c + d):\n        if bit_string[i] == \"1\":\n            return bit_string\n\n    return \"impossible\""
    },
    {
        "number": 3650,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, B = map(int, stdin.split())\n    target_board = []\n    for _ in range(B):\n        row, col = map(int, stdin.split())\n        target_board.append((row, col))\n\n    moves = []\n    for i in range(N):\n        for j in range(M):\n            if i == 0 or j == 0 or i == N - 1 or j == M - 1:\n                moves.append((i, j))\n            elif i == 1 or j == 1 or i == N - 2 or j == M - 2:\n                moves.append((i, j))\n            elif i == 2 or j == 2 or i == N - 3 or j == M - 3:\n                moves.append((i, j))\n            elif i == 3 or j == 3 or i == N - 4 or j == M - 4:\n                moves.append((i, j))\n            elif i == 4 or j == 4 or i == N - 5 or j == M - 5:\n                moves.append((i, j))\n            elif i == 5 or j == 5 or i == N - 6 or j == M - 6:\n                moves.append((i, j))\n            elif i == 6 or j == 6 or i == N - 7 or j == M - 7:\n                moves.append((i, j))\n            elif i == 7 or j == 7 or i == N - 8 or j == M - 8:\n                moves.append((i, j))\n            elif i == 8 or j == 8 or i == N - 9 or j == M - 9:\n                moves.append((i, j))\n            elif i == 9 or j == 9 or i == N - 10 or j == M - 10:\n                moves.append((i, j))\n            elif i == 10 or j == 10 or i == N - 11 or j == M - 11:\n                moves.append((i, j))\n            elif i == 11 or j == 11 or i == N - 12 or j == M - 12:\n                moves.append((i, j))\n            elif i == 12 or j == 12 or i == N - 13 or j == M - 13:\n                moves.append((i, j))\n            elif i == 13 or j == 13 or i == N - 14 or j == M - 14:\n                moves.append((i, j))\n            elif i == 14 or j == 14 or i == N - 15 or j == M - 15:\n                moves.append((i, j))\n            elif i == 15 or j == 15 or i == N - 16 or j == M - 16:\n                moves.append((i, j))\n            elif i == 16 or j == 16 or i == N - 17 or j == M - 17:\n                moves.append((i, j))\n            elif i == 17 or j == 17 or i == N - 18 or j == M - 18:\n                moves.append((i, j))\n            elif i == 18 or j == 18 or i == N - 19 or j == M - 19:\n                moves.append((i, j))\n            elif i == 19 or j == 19 or i == N - 20 or j == M - 20:\n                moves.append((i, j))\n            elif i == 20 or j == 20 or i == N - 21 or j == M - 21:\n                moves.append((i, j))\n            elif i == 21 or j == 21 or i == N - 22 or j == M - 22:\n                moves.append((i, j))\n            elif i == 22 or j == 22 or i == N - 23 or j == M - 23:\n                moves.append((i, j))\n            elif i == 23 or j == 23 or i == N - 24 or j == M - 24:\n                moves.append((i, j))\n            elif i == 24 or j == 24 or i == N - 25 or j == M - 25:\n                moves.append((i, j))\n            elif i == 25 or j == 25 or"
    },
    {
        "number": 3651,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    planets = []\n    for _ in range(n):\n        x, y, z = map(int, stdin.strip().split())\n        planets.append((x, y, z))\n\n    def distance(p1, p2):\n        return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 + (p1[2] - p2[2]) ** 2) ** 0.5\n\n    def shortest_distance(p1, p2):\n        return min(distance(p1, p2), distance(p2, p1))\n\n    def shortest_path(p1, p2):\n        if p1 == p2:\n            return 0\n        return shortest_distance(p1, p2) + shortest_path(p2, p1)\n\n    def shortest_path_to_home(planets):\n        return min(shortest_path(p1, p2) for p1, p2 in zip(planets, planets[1:]))\n\n    return str(shortest_path_to_home(planets))\n"
    },
    {
        "number": 3652,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    table = list(map(int, stdin.readline().strip().split()))\n\n    # Delete the second, fourth, sixth and seventh columns\n    for i in range(N - 2, -1, -1):\n        table.pop(i)\n\n    # Sort each row in ascending order\n    for i in range(N):\n        table[i] = sorted(set(table[i]))\n\n    # Check if all rows are identical\n    for i in range(N):\n        if table[i]!= table[0]:\n            return str(i + 1)\n\n    return \"0\""
    },
    {
        "number": 3653,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.readline().strip())\n    x1, y1 = map(int, stdin.readline().strip().split())\n    x2, y2 = map(int, stdin.readline().strip().split())\n\n    if x1 == x2 or y1 == y2:\n        return \"Invalid input\"\n\n    dx = x2 - x1\n    dy = y2 - y1\n\n    if dx == 0 and dy == 0:\n        return \"Invalid input\"\n\n    if dx == 0:\n        chain_length = abs(y2 - y1)\n    elif dy == 0:\n        chain_length = abs(x2 - x1)\n    else:\n        chain_length = abs(x1 * y2 - x2 * y1) / (dx * dy)\n\n    return str(chain_length)\n"
    },
    {
        "number": 3654,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    if k < 1 or n < 1:\n        return \"Invalid input\"\n\n    def f(k, n):\n        if k == 1:\n            return 42\n        elif k == 2:\n            return 11 * k + 77\n        else:\n            return 2 * f(k - 1, n) - f(k - 2, n) + 10 * k\n\n    result = f(k, n)\n    return str(result)\n"
    },
    {
        "number": 3655,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input images\n    w1, h1 = map(int, stdin.split())\n    floor_image = [[int(c) for c in stdin.split()] for _ in range(h1)]\n\n    # Read the floor image\n    w2, h2 = map(int, stdin.split())\n    floor_image = [[int(c) for c in stdin.split()] for _ in range(h2)]\n\n    # Find the initial set of locations\n    locations = []\n    for i in range(h1):\n        for j in range(w1):\n            if floor_image[i][j] == 1:\n                locations.append((i, j))\n\n    # Find the candidate locations\n    for i in range(h2):\n        for j in range(w2):\n            if floor_image[i][j] == 1:\n                locations.append((i, j))\n\n    # Sort the locations by x-coordinate and y-coordinate\n    locations.sort(key=lambda x: (x[0], x[1]))\n\n    # Output the candidate locations\n    for location in locations:\n        print(location[0] + \" \" + str(location[1]))\n\n    return \"\""
    },
    {
        "number": 3656,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B, T, f = map(int, stdin.split())\n    bugs = []\n    for _ in range(B):\n        p, s = map(float, stdin.split())\n        bugs.append((p, s))\n\n    total_severity = 0\n    for p, s in bugs:\n        total_severity += p * s\n\n    expected_severity = total_severity * T * f\n    return str(expected_severity)\n"
    },
    {
        "number": 3657,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, v_h, N, S = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n\n    if N == 1:\n        return \"IMPOSSIBLE\"\n\n    left_gates = [x[0], x[1]]\n    right_gates = [x[2], x[3]]\n\n    left_gate_speeds = [s[0], s[1]]\n    right_gate_speeds = [s[2], s[3]]\n\n    left_gate_positions = [left_gates[0], left_gates[1]]\n    right_gate_positions = [right_gates[0], right_gates[1]]\n\n    left_gate_speeds.sort()\n    right_gate_speeds.sort()\n\n    left_gate_positions.sort()\n    right_gate_positions.sort()\n\n    left_gate_speeds_sum = sum(left_gate_speeds)\n    right_gate_speeds_sum = sum(right_gate_speeds)\n\n    left_gate_positions_sum = sum(left_gate_positions)\n    right_gate_positions_sum = sum(right_gate_positions)\n\n    left_gate_speeds_diff = left_gate_speeds_sum - left_gate_speeds[0]\n    right_gate_speeds_diff = right_gate_speeds_sum - right_gate_speeds[-1]\n\n    left_gate_positions_diff = left_gate_positions_sum - left_gate_positions[0]\n    right_gate_positions_diff = right_gate_positions_sum - right_gate_positions[-1]\n\n    if left_gate_speeds_diff == 0 and right_gate_speeds_diff == 0:\n        return \"IMPOSSIBLE\"\n\n    left_gate_speeds_diff = left_gate_speeds_diff / left_gate_speeds_sum\n    right_gate_speeds_diff = right_gate_speeds_diff / right_gate_speeds_sum\n\n    left_gate_positions_diff = left_gate_positions_diff / left_gate_positions_sum\n    right_gate_positions_diff = right_gate_positions_diff / right_gate_positions_sum\n\n    left_gate_speeds_diff = min(left_gate_speeds_diff, right_gate_speeds_diff)\n    left_gate_positions_diff = min(left_gate_positions_diff, right_gate_positions_diff)\n\n    left_gate_speeds_diff = max(left_gate_speeds_diff, 0)\n    left_gate_positions_diff = max(left_gate_positions_diff, 0)\n\n    left_gate_speeds_diff = min(left_gate_speeds_diff, v_h)\n    left_gate_positions_diff = min(left_gate_positions_diff, v_h)\n\n    left_gate_speeds_diff = max(left_gate_speeds_diff, 0)\n    left_gate_positions_diff = max(left_gate_positions_diff, 0)\n\n    left_gate_speeds_diff = min(left_gate_speeds_diff, left_gate_speeds[0])\n    left_gate_positions_diff = min(left_gate_positions_diff, left_gate_positions[0])\n\n    left_gate_speeds_diff = max(left_gate_speeds_diff, 0)\n    left_gate_positions_diff = max(left_gate_positions_diff, 0)\n\n    left_gate_speeds_diff = min(left_gate_speeds_diff, left_gate_speeds[-1])\n    left_gate_positions_diff = min(left_gate_positions_diff, left_gate_positions[-1])\n\n    left_gate_speeds_diff = max(left_gate_speeds_diff, 0)\n    left_gate_positions_diff = max(left_gate_positions_diff, 0)\n\n    left_gate_speeds_diff = min(left_gate_speeds_diff, left_gate_speeds[0])\n    left_gate_positions_diff = min(left_gate_positions_diff, left_gate_positions[0])\n\n    left_gate_speeds_diff = max(left_gate_speeds_diff, 0)\n    left_gate_positions_diff = max(left_gate_positions_diff, 0)"
    },
    {
        "number": 3658,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, A = map(int, stdin.split())\n    trees = []\n    for _ in range(P):\n        x, y = map(float, stdin.split())\n        trees.append((x, y))\n    for _ in range(A):\n        x, y = map(float, stdin.split())\n        trees.append((x, y))\n    area = 0\n    for i in range(P + A):\n        for j in range(i + 1, P + A):\n            if i == j:\n                continue\n            x1, y1 = trees[i]\n            x2, y2 = trees[j]\n            if x1 == x2 and y1 == y2:\n                area += 1\n    return str(area)"
    },
    {
        "number": 3659,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    area = 0\n    for i in range(N):\n        h, t = map(int, stdin.readline().split())\n        area += h * t\n    return str(area)"
    },
    {
        "number": 3660,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    message = stdin.strip()\n    n = int(stdin.readline().strip())\n    stickers = []\n    for _ in range(n):\n        word, price = stdin.readline().strip().split()\n        stickers.append((word, price))\n\n    def can_assemble(stickers: List[Tuple[str, int]]) -> bool:\n        for i in range(len(stickers)):\n            for j in range(i + 1, len(stickers)):\n                if stickers[i][0] == stickers[j][0]:\n                    return False\n                if stickers[i][0] == stickers[j][0] and stickers[i][1] > stickers[j][1]:\n                    return False\n        return True\n\n    if can_assemble(stickers):\n        min_cost = 0\n        for i in range(len(stickers)):\n            for j in range(i + 1, len(stickers)):\n                if stickers[i][0] == stickers[j][0]:\n                    min_cost += stickers[i][1]\n                elif stickers[i][0] == stickers[j][0] and stickers[i][1] > stickers[j][1]:\n                    min_cost += stickers[i][1]\n        return str(min_cost)\n    else:\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 3661,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S, L = map(int, stdin.split())\n    parties = ['INDV', 'CORP']\n    result = []\n\n    for i in range(L):\n        A, B = map(int, stdin.split())\n        if A == R and B == S:\n            result.append(parties[A - 1])\n        elif A == S and B == R:\n            result.append(parties[B - 1])\n        else:\n            result.append('INDI')\n\n    return '\\n'.join(result)"
    },
    {
        "number": 3662,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L, W = map(int, stdin.split())\n    trees = []\n    for _ in range(N):\n        p, q = map(int, stdin.split())\n        trees.append((p, q))\n\n    trees.sort(key=lambda x: x[0])\n    total_distance = 0\n    for i in range(N):\n        total_distance += abs(trees[i][0] - trees[i + 1][0])\n\n    return str(total_distance)\n"
    },
    {
        "number": 3663,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    routes = []\n    for _ in range(n - 1):\n        u, v, c = map(int, stdin.strip().split())\n        routes.append((u, v, c))\n\n    x = [0] * n\n    y = [0] * n\n    for i in range(n):\n        x[i], y[i] = map(int, stdin.strip().split())\n\n    min_cost = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            cost = min(routes[i][1], routes[j][0]) * routes[i][2] + min(routes[j][1], routes[i][0]) * routes[j][2]\n            if cost < min_cost:\n                min_cost = cost\n\n    return str(min_cost)\n"
    },
    {
        "number": 3664,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, i, j, numSteps = map(int, stdin.split())\n    ice_grid = [['.' for _ in range(c)] for _ in range(r)]\n    zamboni_row = i\n    zamboni_col = j\n    zamboni_color = 'A'\n    for step in range(numSteps):\n        if step % 2 == 0:\n            zamboni_color = 'P' if zamboni_color == 'A' else 'Z'\n        else:\n            zamboni_color = 'Q' if zamboni_color == 'P' else 'A'\n        ice_grid[zamboni_row][zamboni_col] = zamboni_color\n        zamboni_row += 1 if zamboni_row < r else 0\n        zamboni_col += 1 if zamboni_col < c else 0\n    return ''.join(ice_grid)"
    },
    {
        "number": 3665,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n\n    for i in range(n):\n        numbers[i] = int(''.join(str(numbers[i]).zfill(m)))\n\n    sorted_numbers = sorted(numbers)\n    result = []\n\n    for num in sorted_numbers:\n        result.append(str(num))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 3666,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n1, d1, n2, d2 = map(int, stdin.split())\n    if n1 * d1 > 10000 or n2 * d2 > 10000:\n        return \"impossible\"\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def sprocket_sizes(n, d):\n        return n * d, n * d + 10000\n\n    front_sprocket_sizes = sprocket_sizes(n1, d1)\n    rear_sprocket_sizes = sprocket_sizes(n2, d2)\n\n    if gcd(front_sprocket_sizes[0], rear_sprocket_sizes[0]) == 1:\n        return \"impossible\"\n\n    front_ratio = front_sprocket_sizes[0] / front_sprocket_sizes[1]\n    rear_ratio = rear_sprocket_sizes[0] / rear_sprocket_sizes[1]\n\n    if front_ratio > rear_ratio:\n        return \" \".join(map(str, front_sprocket_sizes)) + \" \" + \" \".join(map(str, rear_sprocket_sizes))\n    else:\n        return \" \".join(map(str, rear_sprocket_sizes)) + \" \" + \" \".join(map(str, front_sprocket_sizes))"
    },
    {
        "number": 3667,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, p = map(int, stdin.split())\n    wells = []\n    pipes = []\n    for _ in range(p):\n        x, y = map(int, stdin.split())\n        wells.append((x, y))\n        pipes.append((x, y, w))\n\n    for i in range(w):\n        for j in range(i + 1, w):\n            if pipes[i][0] == pipes[j][0]:\n                return \"impossible\"\n\n    for i in range(p):\n        for j in range(i + 1, p):\n            if pipes[i][1] == pipes[j][0]:\n                return \"impossible\"\n\n    for i in range(w):\n        for j in range(i + 1, w):\n            if pipes[i][1] == pipes[j][1]:\n                return \"impossible\"\n\n    for i in range(p):\n        for j in range(i + 1, p):\n            if pipes[i][2] == pipes[j][1]:\n                return \"impossible\"\n\n    for i in range(w):\n        for j in range(i + 1, w):\n            if pipes[i][2] == pipes[j][2]:\n                return \"impossible\"\n\n    return \"possible\""
    },
    {
        "number": 3668,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colleagues = []\n    for _ in range(m):\n        colleagues.append(input())\n\n    max_colleagues = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if len(set(colleagues[i]) & set(colleagues[j])) == len(colleagues[i]) and len(set(colleagues[i]) & set(colleagues[j])) > max_colleagues:\n                max_colleagues = len(set(colleagues[i]) & set(colleagues[j]))\n\n    return str(max_colleagues)"
    },
    {
        "number": 3669,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    points = []\n    for _ in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n\n    def is_valid(x1, y1, x2, y2):\n        return abs(x2 - x1) == abs(y2 - y1)\n\n    def is_valid_line(line):\n        x1, y1 = line[0], line[1]\n        x2, y2 = line[2], line[3]\n        return is_valid(x1, y1, x2, y2)\n\n    def is_valid_points(points):\n        for i in range(len(points) - 1):\n            x1, y1 = points[i]\n            x2, y2 = points[i + 1]\n            if not is_valid_line((x1, y1, x2, y2)):\n                return False\n        return True\n\n    def get_winner(points):\n        if is_valid_points(points):\n            return \"Mirko\"\n        else:\n            return \"Slavko\"\n\n    return get_winner(points)"
    },
    {
        "number": 3670,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = []\n\n    for i in range(n):\n        num = int(stdin.strip())\n        if num % 2 == 0:\n            result.append(num)\n\n    return''.join(map(str, result))"
    },
    {
        "number": 3671,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    job_offers = list(map(int, stdin.strip().split()))\n\n    max_cookies = 0\n    for i in range(N):\n        if i % 2 == 0:\n            job_offer = job_offers[i]\n            if job_offer - job_offers[i - 1] >= 400000:\n                max_cookies += 1000000\n        else:\n            job_offer = job_offers[i]\n            if job_offer - job_offers[i - 1] >= 500000:\n                max_cookies += 1000000\n\n    return str(max_cookies)"
    },
    {
        "number": 3672,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    islands = []\n    for _ in range(m):\n        islands.append(list(map(int, stdin.split())))\n\n    for i in range(m):\n        for j in range(i + 1, m):\n            if islands[i][j] == 0:\n                islands[i][j] = islands[j][i] = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if islands[i][j] == 0:\n                islands[i][j] = islands[j][i] = 0\n\n    for i in range(m):\n        for j in range(n):\n            if islands[i][j] == 0:\n                return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 3673,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arrows = []\n    for i in range(N):\n        arrows.append(i)\n\n    for i in range(K):\n        for j in range(i + 1, N):\n            if arrows[j] - arrows[i] == 1:\n                arrows[j], arrows[i] = arrows[i], arrows[j]\n                break\n\n    result = []\n    for i in range(N):\n        result.append(arrows[i])\n\n    return''.join(map(str, result))"
    },
    {
        "number": 3674,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, p, q = map(int, stdin.split())\n\n    if m < n:\n        return \"IMPOSSIBLE\"\n\n    for i in range(m):\n        if i < n:\n            p = p * 10 + 8\n        else:\n            p = p * 10 + 8\n\n    for i in range(m - n):\n        if i < n:\n            q = q * 10 + 8\n        else:\n            q = q * 10 + 8\n\n    result = p * q\n    return str(result)"
    },
    {
        "number": 3675,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.strip())\n\n    max_length = 0\n    for i in range(len(strings[0])):\n        for j in range(len(strings[0])):\n            for s in itertools.permutations(strings[0], i + 1):\n                for t in itertools.permutations(strings[0], j + 1):\n                    subseq = ''.join(s) + ''.join(t)\n                    if subseq in strings:\n                        max_length = max(max_length, len(subseq))\n\n    return str(max_length)\n"
    },
    {
        "number": 3676,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    count = 0\n    for i in range(R):\n        for j in range(C):\n            count += 1\n            if i == 0 or i == R - 1 or j == 0 or j == C - 1:\n                count += 1\n            if i > 0 and j > 0:\n                count += 1\n            if i < R - 1 and j < C - 1:\n                count += 1\n    return str(count)"
    },
    {
        "number": 3677,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    book = []\n    for i in range(N):\n        D = list(map(int, input().split()))\n        book.append(D)\n\n    comittee = []\n    for i in range(N):\n        for j in range(i + 1, N):\n            if book[i][j] == 0:\n                comittee.append((i, j))\n\n    if len(comittee) == 0:\n        return \"0\"\n\n    max_size = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if len(set(comittee[i]) & set(comittee[j])) > max_size:\n                max_size = len(set(comittee[i]) & set(comittee[j]))\n\n    return str(max_size)\n"
    },
    {
        "number": 3678,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.strip().split())\n        points.append((x, y))\n\n    def is_valid_loop(points):\n        n = len(points)\n        for i in range(n - 1):\n            if points[i][0] == points[i + 1][0]:\n                return False\n            if points[i][1] == points[i + 1][1]:\n                return False\n        return True\n\n    if is_valid_loop(points):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 3679,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    total_gifts = 0\n    for i in range(n):\n        total_gifts += 1\n    return str(total_gifts)"
    },
    {
        "number": 3680,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    poles = list(map(int, stdin.split()))\n\n    cuts = 0\n    for i in range(K):\n        if i < N - 1:\n            cuts += 1\n            for j in range(i + 1, N):\n                if poles[j] - poles[i] > poles[j] - poles[i - 1]:\n                    cuts += 1\n                    break\n\n    return str(cuts)"
    },
    {
        "number": 3681,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    queries = []\n    for _ in range(Q):\n        query = list(map(int, stdin.split()))\n        queries.append(query)\n\n    for query in queries:\n        if query[0] == 0:\n            K, x, p = query\n            p = list(map(int, p))\n            if x > M:\n                print(\"Invalid week number\")\n                continue\n            for i in range(K):\n                if p[i] < 1 or p[i] > N:\n                    print(\"Invalid teacher number\")\n                    continue\n            for i in range(K):\n                if p[i] == p[i + 1]:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == p[K]:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == p[0]:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i + 1:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == N:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i + 1:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == N:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i + 1:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == N:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i + 1:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == N:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i + 1:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == N:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i + 1:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == N:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i + 1:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == N:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i + 1:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == N:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i + 1:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == N:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == i + 1:\n                    print(\"Invalid reassignment plan\")\n                    continue\n            for i in range(K):\n                if p[i] == N:"
    },
    {
        "number": 3682,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline())\n    fragments = []\n    for _ in range(N):\n        file_name, code = stdin.readline().strip().split()\n        fragments.append((file_name, code))\n\n    # Find the longest match\n    longest_match = 0\n    longest_match_fragments = []\n    for file_name, code in fragments:\n        lines = code.split('\\n')\n        for i in range(len(lines)):\n            for j in range(i + 1, len(lines)):\n                if lines[i].strip() == lines[j].strip():\n                    match_length = j - i + 1\n                    if match_length > longest_match:\n                        longest_match = match_length\n                        longest_match_fragments = [(file_name, code)]\n                    elif match_length == longest_match:\n                        longest_match_fragments.append((file_name, code))\n\n    # Output the result\n    result = ''\n    for file_name, code in longest_match_fragments:\n        result += f\"{file_name} {code}\\n\"\n\n    return result if result else '0'\n"
    },
    {
        "number": 3683,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, h = map(int, stdin.split())\n    scores = [list(map(int, stdin.split())) for _ in range(h)]\n\n    # Initialize the rank list\n    rank = [0] * p\n\n    # Calculate the rank for each player\n    for i in range(p):\n        for j in range(h):\n            if scores[j][i] > 0:\n                rank[i] += 1\n\n    # Sort the rank list in descending order\n    rank.sort(reverse=True)\n\n    # Print the rank list\n    for i in range(p):\n        print(rank[i])\n\n    return \"\""
    },
    {
        "number": 3684,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, C = map(int, stdin.split())\n    users = []\n    for _ in range(n):\n        p, b, u = map(int, stdin.split())\n        users.append((p, b, u))\n\n    def send_data(user, buffer_size):\n        if buffer_size < 0:\n            return False\n        if buffer_size == 0:\n            return True\n        if buffer_size > user[1]:\n            return False\n        return True\n\n    def get_next_user(user, buffer_size):\n        for i, (p, b, u) in enumerate(users):\n            if p + buffer_size <= b:\n                return i\n        return -1\n\n    def get_next_user_buffer_size(user, buffer_size):\n        for i, (p, b, u) in enumerate(users):\n            if p + buffer_size <= b:\n                return buffer_size\n        return 0\n\n    def get_next_user_bandwidth(user, buffer_size):\n        for i, (p, b, u) in enumerate(users):\n            if p + buffer_size <= b:\n                return u\n        return 0\n\n    def get_next_user_buffer_size_and_bandwidth(user, buffer_size):\n        for i, (p, b, u) in enumerate(users):\n            if p + buffer_size <= b:\n                return buffer_size, u\n        return 0\n\n    def get_next_user_buffer_size_and_bandwidth_and_send_data(user, buffer_size):\n        for i, (p, b, u) in enumerate(users):\n            if p + buffer_size <= b:\n                return buffer_size, u, send_data(user, buffer_size)\n        return 0\n\n    def get_next_user_buffer_size_and_bandwidth_and_send_data_and_get_next_user(user, buffer_size):\n        for i, (p, b, u) in enumerate(users):\n            if p + buffer_size <= b:\n                return buffer_size, u, send_data(user, buffer_size), get_next_user(user, buffer_size)\n        return 0\n\n    def get_next_user_buffer_size_and_bandwidth_and_send_data_and_get_next_user_and_get_next_user_buffer_size(user, buffer_size):\n        for i, (p, b, u) in enumerate(users):\n            if p + buffer_size <= b:\n                return buffer_size, u, send_data(user, buffer_size), get_next_user(user, buffer_size), get_next_user_buffer_size(user, buffer_size)\n        return 0\n\n    def get_next_user_buffer_size_and_bandwidth_and_send_data_and_get_next_user_and_get_next_user_buffer_size_and_bandwidth(user, buffer_size):\n        for i, (p, b, u) in enumerate(users):\n            if p + buffer_size <= b:\n                return buffer_size, u, send_data(user, buffer_size), get_next_user(user, buffer_size), get_next_user_buffer_size_and_bandwidth(user, buffer_size)\n        return 0\n\n    def get_next_user_buffer_size_and_bandwidth_and_send_data_and_get_next_user_and_get_next_user_buffer_size_and_bandwidth_and_send_data(user, buffer_size):\n        for i, (p, b, u) in enumerate(users):\n            if p + buffer_size <= b:\n                return buffer_size, u, send_data(user, buffer_size), get_next_user(user, buffer_size), get_next_user_buffer_size_and_bandwidth_and_send_data(user, buffer_size)\n        return 0\n\n    def get_next_user_buffer_size_and_bandwidth_and_send_data_and_get_next_user_and_get_next_user_buffer_size_and_bandwidth_and_send_data_and_get_next_user(user, buffer_size):\n        for i, (p, b, u) in enumerate(users):\n            if p + buffer_size <= b:\n                return buffer_size, u, send_data(user, buffer_size), get_next_user(user, buffer_size), get_next_user_buffer_size_and_bandwidth_and_send_data"
    },
    {
        "number": 3685,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    dorm_bed = [(x, y) for x in range(r) for y in range(c)]\n    fridge_kitchen = [(x, y) for x in range(r) for y in range(c)]\n    patrolling_masters = []\n    for _ in range(p):\n        row, col = map(int, stdin.split())\n        patrolling_masters.append((row, col))\n\n    def is_blocked(row, col):\n        for i in range(r):\n            if row - i in range(r) and col - i in range(c) and dorm_bed[row - i][col - i] == '#':\n                return True\n        for i in range(c):\n            if row - i in range(r) and col + i in range(c) and dorm_bed[row - i][col + i] == '#':\n                return True\n        return False\n\n    def is_valid_move(row, col, patrolling_masters):\n        for i in range(r):\n            if row - i in range(r) and col - i in range(c) and dorm_bed[row - i][col - i] == '.' and not is_blocked(row - i, col - i):\n                return True\n        for i in range(c):\n            if row - i in range(r) and col + i in range(c) and dorm_bed[row - i][col + i] == '.' and not is_blocked(row - i, col + i):\n                return True\n        for i in range(r):\n            if row + i in range(r) and col - i in range(c) and dorm_bed[row + i][col - i] == '.' and not is_blocked(row + i, col - i):\n                return True\n        for i in range(c):\n            if row + i in range(r) and col + i in range(c) and dorm_bed[row + i][col + i] == '.' and not is_blocked(row + i, col + i):\n                return True\n        for i in range(p):\n            for j in range(i + 1, p):\n                if patrolling_masters[i][0] - i in range(r) and patrolling_masters[i][1] - j in range(c) and dorm_bed[patrolling_masters[i][0] - i][patrolling_masters[i][1] - j] == '.' and not is_blocked(patrolling_masters[i][0] - i, patrolling_masters[i][1] - j):\n                    return True\n        return False\n\n    def min_turns(row, col, patrolling_masters):\n        if is_blocked(row, col):\n            return IMPOSSIBLE\n        if not is_valid_move(row, col, patrolling_masters):\n            return IMPOSSIBLE\n        return 1 + min(min_turns(row - 1, col, patrolling_masters), min_turns(row + 1, col, patrolling_masters), min_turns(row, col - 1, patrolling_masters), min_turns(row, col + 1, patrolling_masters))\n\n    return str(min_turns(dorm_bed[0][0], dorm_bed[0][1], patrolling_masters))"
    },
    {
        "number": 3686,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    targets = []\n    for _ in range(N):\n        x, y = map(int, stdin.strip().split())\n        targets.append((x, y))\n\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def line_of_sight(p1, p2):\n        return distance(p1, p2)\n\n    def shoot(p1, p2, n):\n        if n == 1:\n            return p1, p2\n        else:\n            return shoot(p2, p1, n - 1)\n\n    def line_up(p1, p2):\n        if distance(p1, p2) <= 1:\n            return p1, p2\n        else:\n            return line_up(shoot(p1, p2, 2), p2)\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            p1, p2 = targets[i], targets[j]\n            if line_of_sight(p1, p2) <= 1:\n                p1, p2 = line_up(p1, p2)\n                if p1 == p2:\n                    return \"failure\"\n\n    return \"success\""
    },
    {
        "number": 3687,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q, s = map(int, stdin.split())\n    q_queues = [int(c) for c in stdin.split()]\n    d = int(stdin.split())\n\n    # Check if all queues have the same size\n    for i in range(q):\n        if q_queues[i]!= q_queues[i + 1]:\n            return \"impossible\"\n\n    # Check if all sensors have the same number of queues\n    for i in range(s):\n        if len(set(q_queues[i:i + q]))!= q:\n            return \"impossible\"\n\n    # Calculate the total amount of data that can be transferred\n    total_data = sum(a_i for a_i in stdin.split())\n\n    # Calculate the number of megabytes that can be transferred\n    megabytes_per_downlink = d / (n * q)\n\n    # Calculate the number of megabytes that can be transferred during a downlink window\n    megabytes_per_downlink_window = megabytes_per_downlink * (n - 1)\n\n    # Check if the total megabytes can be transferred\n    if megabytes_per_downlink_window > total_data:\n        return \"impossible\"\n\n    return \"possible\""
    },
    {
        "number": 3688,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    shopping_malls = []\n    for _ in range(n):\n        x, y, t = map(int, stdin.split())\n        shopping_malls.append((x, y, t))\n\n    def bfs(start):\n        queue = [(start, 0)]\n        visited = set()\n        while queue:\n            (x, y) = queue.pop(0)\n            if x == 0 and y == 0:\n                return 0\n            visited.add((x, y))\n            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if (nx, ny) not in visited and 0 <= nx < n and 0 <= ny < m:\n                    queue.append((nx, ny))\n        return -1\n\n    def dfs(x, y, t):\n        if x == 0 and y == 0:\n            return 0\n        if x == 0 or y == m - 1:\n            return 1\n        if shopping_malls[t - 1][2] == shopping_malls[t - 1][3]:\n            return 1\n        return dfs(x, y + 1, t) + dfs(x + 1, y, t) + dfs(x, y - 1, t) - dfs(x - 1, y, t)\n\n    min_moves = float('inf')\n    for i in range(m):\n        for j in range(n):\n            if shopping_malls[i][0] == j:\n                min_moves = min(min_moves, dfs(j, j, i + 1))\n\n    return str(min_moves)"
    },
    {
        "number": 3689,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = len(a)\n    b = [0] * m\n    for i in range(m - k):\n        b[i] = a[i]\n    for i in range(m - 1, -1, -1):\n        if b[i] == b[i + k]:\n            b[i] = 0\n    y = 0\n    for i in range(m):\n        if b[i] == 0:\n            y = i + 1\n            break\n    return str(y) + ''.join(map(str, b))"
    },
    {
        "number": 3690,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m, s, t_1, t_2 = map(int, stdin.split())\n\n    if t_1 == t_2:\n        return \"NO\"\n\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n\n    if t_1 == 0:\n        return \"NO\"\n\n    if t_2 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 11:\n        return \"YES\"\n\n    if t_2 == 1:\n        return \"YES\"\n\n    if t_1 == 1:\n        return \"YES\"\n\n    if t_2 == 11:\n        return \"YES\"\n\n    if t_1 == 11:\n        return \"YES\"\n\n    if t_2 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t_1 == 12:\n        return \"YES\"\n\n    if t"
    },
    {
        "number": 3691,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_0, y_0, a_x, a_y, b_x, b_y = map(int, stdin.split())\n    x_s, y_s, t = map(int, stdin.split())\n\n    # Calculate the number of nodes required to collect t seconds\n    nodes_required = t // (a_x * x_0 + b_x) + 1\n\n    # Calculate the number of nodes required to collect t seconds\n    nodes_required = min(nodes_required, t % (a_x * x_0 + b_x))\n\n    return str(nodes_required)"
    },
    {
        "number": 3692,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    regions = 0\n    for i in range(n):\n        x1, y1, r1 = map(int, stdin.readline().split())\n        x2, y2, r2 = map(int, stdin.readline().split())\n        if x1 == x2 and y1 == y2:\n            continue\n        if r1 == r2:\n            continue\n        if x1 == x2:\n            if y1 > y2:\n                regions += 1\n            else:\n                regions += 1\n        elif y1 == y2:\n            if x1 > x2:\n                regions += 1\n            else:\n                regions += 1\n        else:\n            if x1 > x2:\n                regions += 1\n            else:\n                regions += 1\n            if y1 > y2:\n                regions += 1\n            else:\n                regions += 1\n    return str(regions)"
    },
    {
        "number": 3693,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input data\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(int, stdin.split())\n\n    # Check if the squares intersect\n    if x1 == x2 and y1 == y2 and x3 == x4 and y3 == y4:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3694,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    # Check if Tokitsukaze wins\n    if sum(a) == 0:\n        return \"sjfnb\"\n\n    # Check if CSL wins\n    if sum(a) == n * a[0]:\n        return \"cslnb\"\n\n    # Check if there is a valid first move\n    for i in range(1, n):\n        if a[i] > 0:\n            continue\n        for j in range(i):\n            if a[j] > 0:\n                continue\n            if sum(a[:i] + a[i+1:]) == n * a[i]:\n                return \"sjfnb\"\n\n    # Check if there is a valid second move\n    for i in range(n-1, 0, -1):\n        if a[i] > 0:\n            continue\n        for j in range(i):\n            if a[j] > 0:\n                continue\n            if sum(a[:i] + a[i+1:]) == n * a[i]:\n                return \"cslnb\"\n\n    # If there is no valid move, return \"sjfnb\"\n    return \"sjfnb\""
    },
    {
        "number": 3695,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    t = [int(x) for x in stdin.split()]\n    max_bowl = 0\n    for i in range(n):\n        if t[i] < T:\n            max_bowl = max(max_bowl, i + 1)\n    return str(max_bowl)"
    },
    {
        "number": 3696,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    a = [0] * n\n    b = [0] * n\n    a[0] = 1\n    b[0] = 1\n    for i in range(1, n):\n        a[i] = a[i-1] + a[i-1]\n        b[i] = b[i-1] + b[i-1]\n    gcd = a[0]\n    for i in range(1, n):\n        if a[i] > gcd:\n            gcd = a[i]\n    for i in range(1, n):\n        if b[i] > gcd:\n            gcd = b[i]\n    if gcd == 1:\n        return str(n) + \" \" + \" \".join(map(str, a))\n    else:\n        return str(n) + \" \" + \" \".join(map(str, b))"
    },
    {
        "number": 3697,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, a = map(int, stdin.split())\n    g = list(map(int, stdin.split()))\n\n    # Count the number of votes for each candidate\n    votes = [0] * n\n    for i in range(m):\n        votes[g[i - 1]] += 1\n\n    # Sort the candidates by the number of votes\n    sorted_candidates = sorted(range(n), key=lambda x: (-votes[x], g[x - 1]))\n\n    # Determine the outcome for each candidate\n    result = [0] * n\n    for i in range(m):\n        if votes[sorted_candidates[i - 1]] == k:\n            result[sorted_candidates[i - 1]] = 1\n        elif votes[sorted_candidates[i - 1]] < k:\n            result[sorted_candidates[i - 1]] = 2\n        else:\n            result[sorted_candidates[i - 1]] = 3\n\n    # Print the result\n    for i in range(n):\n        print(result[i])\n\n    return \"\""
    },
    {
        "number": 3698,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n\n    def count_special_numbers(n: int) -> int:\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    special_numbers = [2, 3, 5, 6]\n    count = 0\n    for num in special_numbers:\n        count += count_special_numbers(num)\n\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 3699,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    y = list(map(int, stdin.readline().strip().split()))\n    t = list(map(int, stdin.readline().strip().split()))\n    recycling_bin_x = int(stdin.readline().strip())\n    recycling_bin_y = int(stdin.readline().strip())\n\n    def distance(x1, y1, x2, y2):\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    def min_distance(adil_x, adil_y, bera_x, bera_y):\n        adil_path = [(adil_x, adil_y)]\n        bera_path = [(bera_x, bera_y)]\n\n        while adil_path and bera_path:\n            adil_x, adil_y = adil_path.pop()\n            bera_x, bera_y = bera_path.pop()\n\n            if distance(adil_x, adil_y, recycling_bin_x, recycling_bin_y) < distance(bera_x, bera_y, recycling_bin_x, recycling_bin_y):\n                adil_path.append((adil_x, adil_y))\n            else:\n                bera_path.append((bera_x, bera_y))\n\n        return distance(adil_x, adil_y, recycling_bin_x, recycling_bin_y)\n\n    result = min_distance(x[0], y[0], recycling_bin_x, recycling_bin_y)\n    return str(result)"
    },
    {
        "number": 3700,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0 or k == 0:\n        return \"0\"\n\n    ways = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i == j:\n                continue\n            if (i, j) not in [(a, b) for a in range(n) for b in range(i + 1, n) if a!= b]:\n                ways += 1\n\n    if ways == 0:\n        return \"0\"\n    else:\n        return str(ways)"
    },
    {
        "number": 3701,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = stdin.strip()\n    if n == 1:\n        return \"0\"\n\n    # Reverse the entire string\n    a = a[::-1]\n\n    # Invert the first substring\n    a = a[1:][::-1]\n\n    # Invert the second substring\n    a = a[2:][::-1]\n\n    # Replace each symbol to the opposite one\n    for i in range(n):\n        a = a.replace(a[i], \"0\" if a[i] == \"1\" else \"1\")\n\n    # Pay the cost of the first operation\n    if n == 1:\n        return \"0\"\n    else:\n        return str(x + y)"
    },
    {
        "number": 3702,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, d = map(int, stdin.split())\n    if n < 3 or a < 1 or d < 1 or a + (n - 1) * d > 10**6:\n        return \"-1\"\n\n    b = 2\n    e = 1\n    while True:\n        if len(str(b)) < 18:\n            break\n        if str(b) in [str(x) for x in range(a, a + (n - 1) * d, d)]:\n            break\n        b += e\n\n    return str(b) + \" \" + str(e)"
    },
    {
        "number": 3703,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    F = [1] * (n + 1)\n    F[1] = 1\n\n    for i in range(2, n + 1):\n        F[i] = F[i - 1] * i % 1000000007\n\n    return str(F[k])"
    },
    {
        "number": 3704,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    blacklist = []\n    whitelist = []\n\n    for _ in range(n):\n        line = stdin.strip()\n        if line.startswith('-'):\n            blacklist.append(line[1:])\n        elif line.startswith('+'):\n            whitelist.append(line[1:])\n\n    def is_valid_subnet(subnet: str) -> bool:\n        if '/' in subnet:\n            a, b, c, d = subnet.split('/')\n            return 0 <= int(a) <= 255 and 0 <= int(b) <= 255 and 0 <= int(c) <= 255 and 0 <= int(d) <= 255\n        else:\n            return 0 <= int(subnet) <= 255\n\n    def is_valid_address(address: str) -> bool:\n        if '/' in address:\n            a, b, c, d = address.split('/')\n            return 0 <= int(a) <= 255 and 0 <= int(b) <= 255 and 0 <= int(c) <= 255 and 0 <= int(d) <= 255\n        else:\n            return 0 <= int(address) <= 255\n\n    def is_valid_subnet_in_blacklist(subnet: str) -> bool:\n        for subnet_ in blacklist:\n            if subnet.startswith(subnet_):\n                return True\n        return False\n\n    def is_valid_address_in_whitelist(address: str) -> bool:\n        for subnet_ in whitelist:\n            if address.startswith(subnet_):\n                return True\n        return False\n\n    def is_valid_address_in_blacklist(address: str) -> bool:\n        for subnet_ in blacklist:\n            if address.startswith(subnet_):\n                return True\n        return False\n\n    def is_valid_address_in_whitelist_or_blacklist(address: str) -> bool:\n        for subnet_ in whitelist + blacklist:\n            if address.startswith(subnet_):\n                return True\n        return False\n\n    def is_valid_address_in_subnet(address: str, subnet: str) -> bool:\n        if '/' in subnet:\n            a, b, c, d = subnet.split('/')\n            return 0 <= int(a) <= 255 and 0 <= int(b) <= 255 and 0 <= int(c) <= 255 and 0 <= int(d) <= 255\n        else:\n            return 0 <= int(subnet) <= 255\n\n    def is_valid_address_in_subnet_in_blacklist(address: str, subnet: str) -> bool:\n        for subnet_ in blacklist:\n            if is_valid_address_in_subnet(address, subnet):\n                return True\n        return False\n\n    def is_valid_address_in_subnet_in_whitelist(address: str, subnet: str) -> bool:\n        for subnet_ in whitelist:\n            if is_valid_address_in_subnet(address, subnet):\n                return True\n        return False\n\n    def is_valid_address_in_subnet_in_blacklist_or_whitelist(address: str, subnet: str) -> bool:\n        for subnet_ in blacklist + whitelist:\n            if is_valid_address_in_subnet(address, subnet):\n                return True\n        return False\n\n    def is_valid_address_in_subnet_in_whitelist_or_blacklist(address: str, subnet: str) -> bool:\n        for subnet_ in whitelist + blacklist:\n            if is_valid_address_in_subnet(address, subnet):\n                return True\n        return False\n\n    def is_valid_address_in_subnet_in_blacklist_or_whitelist_or_source(address: str, subnet: str) -> bool:\n        if is_valid_address_in_subnet_in_blacklist(address, subnet):\n            return True\n        if is_valid_address_in_subnet_in_whitelist(address, subnet):\n            return True\n        if is_valid_address_in_subnet_in_blacklist_or_whitelist(address, subnet):\n            return True\n        if is_valid_address_in_subnet_in_whitelist_or_blacklist(address, subnet):\n            return True\n        if is_valid_address_in_subnet_in_blacklist_or_whitelist_or_source(address, subnet):\n            return True\n        return False\n\n    def is_valid_address_in_source_blacklist(address: str) -> bool:\n        for subnet_ in blacklist:\n            if is_valid_address_in_subnet_in_blacklist_or_whitelist_or_source(address, subnet):\n                return True\n        return False\n\n    def is"
    },
    {
        "number": 3705,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    count = 0\n    for i in range(n):\n        if len(s) == 11 and s.startswith(\"8\") and s.endswith(\"00000000000\"):\n            count += 1\n    return str(count)"
    },
    {
        "number": 3706,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n\n    moves = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 0:\n                moves.append(\"row \" + str(i + 1))\n                moves.append(\"col \" + str(j + 1))\n\n    moves.sort()\n    moves = [move.split() for move in moves]\n\n    for move in moves:\n        row, col = map(int, move)\n        if row == 1 and col == 1:\n            return \"col 1\"\n        elif row == 1 and col == 2:\n            return \"col 2\"\n        elif row == 1 and col == 3:\n            return \"col 3\"\n\n    return \"-1\""
    },
    {
        "number": 3707,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, k, d = map(int, stdin.split())\n    if n < 1 or t < 1 or k < 1 or d < 1 or t + d < 1 or t + d > 1000:\n        return \"NO\"\n\n    if n % 2 == 0:\n        return \"NO\"\n\n    if t + d > 1000:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 3708,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    volcanoes = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        volcanoes.append((x, y))\n\n    def dfs(i, j, visited):\n        if i == n and j == n:\n            return 0\n\n        if i < 1 or i > n or j < 1 or j > n:\n            return -1\n\n        if visited[i][j]:\n            return -1\n\n        visited[i][j] = True\n        time = dfs(i + 1, j, visited)\n        if time == -1:\n            return -1\n        time += dfs(i, j + 1, visited)\n        if time == -1:\n            return -1\n        return time + 1\n\n    if dfs(1, 1, [[False] * n for _ in range(n)]) == -1:\n        return -1\n    return dfs(n, n, [[False] * n for _ in range(n)])"
    },
    {
        "number": 3709,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    selected_problems = [0] * n\n    for _ in range(k):\n        selected_problems.append(int(input()))\n\n    if sum(selected_problems) > n // 2:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 3710,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ancient_numbers = list(map(int, stdin.split()))\n\n    for i in range(n):\n        if ancient_numbers[i] % k!= ancient_numbers[i]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 3711,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k > 2 * 10**9:\n        return \"-1\"\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def cut(x, y, cuts):\n        if len(cuts) == k:\n            return True\n\n        if is_valid(x, y):\n            cuts.append((x, y))\n            return cut(x + 1, y, cuts) or cut(x, y + 1, cuts)\n        else:\n            return False\n\n    cuts = []\n    cut(0, 0, cuts)\n    return len(cuts)"
    },
    {
        "number": 3712,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Count the number of students in each compartment\n    count = [0] * n\n    for i in range(n):\n        count[i] += a[i]\n\n    # Find the number of students needed to swap places\n    min_swap = n\n    for i in range(n):\n        if count[i] == 0:\n            min_swap = min(min_swap, i + 1)\n\n    return str(min_swap)\n"
    },
    {
        "number": 3713,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.strip()))\n    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if s[i] == 1:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 0\n    return str(max_length)"
    },
    {
        "number": 3714,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    crush = list(map(int, stdin.strip().split()))\n    t = 1\n    for i in range(1, n):\n        if crush[i] == i:\n            t += 1\n    return str(t)"
    },
    {
        "number": 3715,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    days = list(map(int, stdin.strip().split()))\n\n    min_days = float('inf')\n    for i in range(n):\n        if days[i] == 0:\n            min_days = min(min_days, i + 1)\n        elif days[i] == 1:\n            min_days = min(min_days, i + 2)\n        elif days[i] == 2:\n            min_days = min(min_days, i + 3)\n        elif days[i] == 3:\n            min_days = min(min_days, i + 4)\n\n    return str(min_days)\n"
    },
    {
        "number": 3716,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 10**6:\n        return \"Invalid input\"\n\n    # Find the three positive integers that are not greater than n\n    a, b, c = 1, 2, 3\n    while a <= n and b <= n and c <= n:\n        if a * b * c > n:\n            a += 1\n        elif b * c * a > n:\n            b += 1\n        else:\n            c += 1\n\n    # Find the LCM of the three integers\n    lcm = a * b * c\n\n    return str(lcm)\n"
    },
    {
        "number": 3717,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    rectangles = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, stdin.readline().strip().split())\n        rectangles.append((x1, y1, x2, y2))\n\n    def is_inside(x: int, y: int, rect: tuple[int, int, int, int]) -> bool:\n        return x >= rect[0] and x <= rect[2] and y >= rect[1] and y <= rect[3]\n\n    def is_boundary(x: int, y: int, rect: tuple[int, int, int, int]) -> bool:\n        return x == rect[0] or x == rect[2] or y == rect[1] or y == rect[3]\n\n    def find_common_point(rectangles: List[tuple[int, int, int, int]]) -> tuple[int, int]:\n        for rect in rectangles:\n            if is_inside(rect[0], rect[1], rect) and is_inside(rect[2], rect[3], rect):\n                return rect[0], rect[1]\n        return None\n\n    result = find_common_point(rectangles)\n    if result is not None:\n        print(result[0], result[1])\n    else:\n        print(\"No common point found\")\n\n    return \"\""
    },
    {
        "number": 3718,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = list(map(int, stdin.strip().split()))\n\n    # Check if there are at least three balls\n    if n < 3:\n        return \"NO\"\n\n    # Check if there are any two balls of the same size\n    for i in range(n):\n        for j in range(i + 1, n):\n            if t[i] == t[j]:\n                return \"NO\"\n\n    # Check if there are any two balls of sizes that differ by more than 2\n    for i in range(n):\n        for j in range(i + 1, n):\n            if t[i] - t[j] > 2:\n                return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 3719,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    y1 = list(map(int, stdin.split()))\n    y2 = list(map(int, stdin.split()))\n\n    # Find the maximum number of spaceships that can be destroyed\n    max_spaceships = 0\n    for i in range(n):\n        for j in range(m):\n            if y1[i] == -100 and y2[j] == 100:\n                max_spaceships += 1\n\n    return str(max_spaceships)\n"
    },
    {
        "number": 3720,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Vasya\"\n    elif n == 2:\n        return \"Petya\"\n    else:\n        for i in range(1, n+1):\n            if i == 1:\n                continue\n            for j in range(1, i+1):\n                if i == j:\n                    continue\n                for k in range(1, i+1):\n                    if i == k:\n                        continue\n                    if i**2 == j**2 or i**3 == j**3 or i**4 == j**4:\n                        return \"Vasya\"\n                        break\n        return \"Petya\""
    },
    {
        "number": 3721,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    samples = []\n    for _ in range(q):\n        r, c = map(int, stdin.split())\n        samples.append((r, c))\n\n    def is_valid(r, c):\n        return 1 <= r <= n and 1 <= c <= m\n\n    def is_valid_sample(r, c):\n        return r!= c\n\n    def is_valid_fusion(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1\n\n    def is_valid_sample_fusion(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1\n\n    def is_valid_sample_fusion_element(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 4 and c!= 4\n\n    def is_valid_sample_fusion_element_2(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 1 and c!= 1\n\n    def is_valid_sample_fusion_element_3(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 3 and c!= 3\n\n    def is_valid_sample_fusion_element_4(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 4 and c!= 4\n\n    def is_valid_sample_fusion_element_5(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 5 and c!= 5\n\n    def is_valid_sample_fusion_element_6(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 6 and c!= 6\n\n    def is_valid_sample_fusion_element_7(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 7 and c!= 7\n\n    def is_valid_sample_fusion_element_8(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 8 and c!= 8\n\n    def is_valid_sample_fusion_element_9(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 9 and c!= 9\n\n    def is_valid_sample_fusion_element_10(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 10 and c!= 10\n\n    def is_valid_sample_fusion_element_11(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 11 and c!= 11\n\n    def is_valid_sample_fusion_element_12(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 12 and c!= 12\n\n    def is_valid_sample_fusion_element_13(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 13 and c!= 13\n\n    def is_valid_sample_fusion_element_14(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 14 and c!= 14\n\n    def is_valid_sample_fusion_element_15(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 15 and c!= 15\n\n    def is_valid_sample_fusion_element_16(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 16 and c!= 16\n\n    def is_valid_sample_fusion_element_17(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 17 and c!= 17\n\n    def is_valid_sample_fusion_element_18(r, c):\n        return r!= c and r!= n - 1 and c!= m - 1 and r!= 18 and c!= "
    },
    {
        "number": 3722,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    c_aa = stdin.strip()\n    c_ab = stdin.strip()\n    c_ba = stdin.strip()\n    c_bb = stdin.strip()\n\n    def can_be_s(s: str) -> bool:\n        return s == 'ABAB' or s == 'ABBA' or s == 'BBAB' or s == 'BBBA'\n\n    def count_strings(s: str, n: int) -> int:\n        count = 0\n        for i in range(n):\n            count += can_be_s(s[:i] + 'A' + s[i+1:])\n        return count\n\n    for _ in range(n):\n        s = c_aa + c_ab + c_ba + c_bb\n        count = count_strings(s, n)\n        if count % (10**9 + 7) == 0:\n            print(count)\n            break"
    },
    {
        "number": 3723,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pokemons = list(map(int, stdin.readline().strip().split()))\n    \n    max_pokemon_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if gcd(pokemons[i], pokemons[j]) == 1:\n                max_pokemon_count += 1\n                break\n    \n    return str(max_pokemon_count)\n\ndef"
    },
    {
        "number": 3724,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.strip()\n\n    def choose_i(s):\n        i = 0\n        while i < len(s) - 1 and s[i] == s[i + 1]:\n            i += 1\n        return i\n\n    def replace_char(s, i, char):\n        return s[:i] + char + s[i + 1:]\n\n    def remove_char(s, i):\n        return s[:i] + s[i + 1:]\n\n    def count_distinct_strings(s):\n        count = 0\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1]:\n                count += 1\n        return count\n\n    def process_string(s):\n        i = choose_i(s)\n        char = s[i]\n        s = replace_char(s, i, char)\n        s = remove_char(s, i + 1)\n        return s\n\n    def process_strings(s):\n        count = 0\n        for i in range(len(s)):\n            s = process_string(s)\n            count += count_distinct_strings(s)\n        return count\n\n    result = process_strings(S)\n    result %= (10**9 + 7)\n    return str(result)"
    },
    {
        "number": 3725,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, h_1, a_1, x_1, y_1, h_2, a_2, x_2, y_2 = map(int, stdin.split())\n\n    if h_1 == a_1 and h_2 == a_2:\n        return \"0\"\n\n    if h_1 == a_1:\n        x_1 = (x_1 * h_1 + y_1) % m\n        y_1 = (x_1 * h_1 + y_1) % m\n    else:\n        x_1 = (x_1 * h_1 + y_1) % m\n        y_1 = (x_1 * h_1 + y_1) % m\n\n    if h_2 == a_2:\n        x_2 = (x_2 * h_2 + y_2) % m\n        y_2 = (x_2 * h_2 + y_2) % m\n    else:\n        x_2 = (x_2 * h_2 + y_2) % m\n        y_2 = (x_2 * h_2 + y_2) % m\n\n    if x_1 == x_2:\n        return \"0\"\n\n    if x_1 < x_2:\n        return str(x_2 - x_1) + \" \" + str(y_2 - y_1)\n    else:\n        return str(x_1 - x_2) + \" \" + str(y_1 - y_2)"
    },
    {
        "number": 3726,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize the cards as face up\n    cards = [True] * N\n\n    # Perform the first operation\n    for i in range(N):\n        if cards[i]:\n            for j in range(i + 1, N):\n                if cards[j]:\n                    cards[j] = False\n\n    # Perform the second operation\n    for i in range(N):\n        if cards[i]:\n            for j in range(i + 1, N):\n                if cards[j]:\n                    cards[j] = False\n\n    # Count the number of operations required\n    count = 0\n    for i in range(N):\n        if cards[i]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 3727,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b + c + d!= 10:\n        return \"NO\"\n\n    beautiful_sequence = [0] * (a + b + c + d)\n    beautiful_sequence[0] = 0\n    beautiful_sequence[1] = 1\n    for i in range(2, a + b + c + d):\n        beautiful_sequence[i] = beautiful_sequence[i - 1] + 1\n\n    for i in range(a + b + c + d - 1):\n        if beautiful_sequence[i] - beautiful_sequence[i + 1]!= 1:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 3728,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [list(map(int, stdin.split())) for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if i == 0 and j == m - 1:\n                continue\n            if i == n - 1 and j == m - 1:\n                continue\n            if i == n - 1 and j == 0:\n                continue\n            if i == 0:\n                if j == 0:\n                    continue\n                if j == m - 1:\n                    continue\n                if table[i][j] == table[i][j - 1]:\n                    continue\n                table[i][j], table[i][j - 1] = table[i][j - 1], table[i][j]\n                if solution(stdin):\n                    return \"YES\"\n                table[i][j], table[i][j - 1] = table[i][j - 1], table[i][j]\n                continue\n            if j == 0:\n                continue\n            if j == m - 1:\n                continue\n            if table[i][j] == table[i - 1][j]:\n                continue\n            table[i][j], table[i - 1][j] = table[i - 1][j], table[i][j]\n            if solution(stdin):\n                return \"YES\"\n            table[i][j], table[i - 1][j] = table[i - 1][j], table[i][j]\n\n    return \"NO\""
    },
    {
        "number": 3729,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f, w, h = map(int, stdin.split())\n    if f == 0 and w == 0 and h == 0:\n        return \"0\"\n\n    arrangements = []\n    for i in range(1, f + 1):\n        for j in range(1, w + 1):\n            if i == 1 and j == 1:\n                arrangements.append((i, j))\n            elif i == 1 and j == w:\n                arrangements.append((i, j))\n            elif i == f and j == 1:\n                arrangements.append((i, j))\n            elif i == f and j == w:\n                arrangements.append((i, j))\n            elif i == 1 and j == 1:\n                arrangements.append((i, j))\n            elif i == 1 and j == w:\n                arrangements.append((i, j))\n            elif i == f and j == 1:\n                arrangements.append((i, j))\n            elif i == f and j == w:\n                arrangements.append((i, j))\n\n    arrangements.sort(key=lambda x: (-x[0], -x[1]))\n    arrangements.reverse()\n\n    count = 0\n    for i in range(len(arrangements)):\n        for j in range(i + 1, len(arrangements)):\n            if arrangements[i][0]!= arrangements[j][0] or arrangements[i][1]!= arrangements[j][1]:\n                count += 1\n                break\n\n    return str(count)\n"
    },
    {
        "number": 3730,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    max_length = 0\n    current_length = 1\n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    max_length = max(max_length, current_length)\n\n    return str(max_length)\n"
    },
    {
        "number": 3731,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, l, r = map(int, stdin.split())\n    s = list(map(str, list(range(1, 13)) + list(range(1, 13))))\n    s.sort()\n    count = 0\n    for i in range(l, r + 1):\n        t = s[i - l + 1:i + 1]\n        if len(set(t)) == len(t):\n            count += 1\n    return str(count)"
    },
    {
        "number": 3732,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, m = map(int, stdin.split())\n\n    if x >= m or y >= m:\n        return \"-1\"\n\n    operations = 0\n    while x + y < m:\n        x += 1\n        y += 1\n        operations += 1\n\n    return str(operations)"
    },
    {
        "number": 3733,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, I = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Find the smallest integer k such that K <= 2^k\n    k = 0\n    while a[0] <= 1:\n        k += 1\n        a.remove(a[0])\n\n    # Compress the array\n    compressed_a = []\n    for i in range(n):\n        if a[i] < 2**k:\n            compressed_a.append(a[i])\n        else:\n            compressed_a.append(2**k - 1)\n\n    # Calculate the minimal number of changed elements\n    min_changed = 0\n    for i in range(n):\n        if compressed_a[i]!= a[i]:\n            min_changed += 1\n\n    return str(min_changed)"
    },
    {
        "number": 3734,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin.split()\n    if len(days)!= 2:\n        return \"NO\"\n\n    day1 = days[0].lower()\n    day2 = days[1].lower()\n\n    if day1 == \"monday\" and day2 == \"tuesday\":\n        return \"YES\"\n    elif day1 == \"sunday\" and day2 == \"sunday\":\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3735,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b = 0, n\n    while a + b < n:\n        a, b = b, a + b\n    return str(a) + str(b)"
    },
    {
        "number": 3736,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.strip()\n    mirror_name = \"\"\n    for i in range(len(name)):\n        mirror_name += chr(ord(name[i]) ^ 1)\n    return mirror_name == name"
    },
    {
        "number": 3737,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stewards = list(map(int, stdin.strip().split()))\n\n    def is_valid_steward(strength: int) -> bool:\n        return 1 <= strength <= n\n\n    def support_steward(strength: int) -> int:\n        count = 0\n        for steward in stewards:\n            if steward < strength:\n                count += 1\n        return count\n\n    return str(support_steward(stewards[0]))"
    },
    {
        "number": 3738,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = stdin.strip()\n    moves = {'U': (0, 1), 'D': (0, -1), 'L': (-1, 0), 'R': (1, 0)}\n    steps = 0\n    x, y = 0, 0\n    for i in range(len(s)):\n        if s[i] == 'U':\n            x, y = x, y + 1\n        elif s[i] == 'D':\n            x, y = x, y - 1\n        elif s[i] == 'L':\n            x, y = x - 1, y\n        elif s[i] == 'R':\n            x, y = x + 1, y\n        steps += 1\n        if x == a and y == b:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 3739,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_list = stdin.split()\n    n = int(input_list[0])\n    a = int(input_list[1])\n    b = int(input_list[2])\n\n    # Check if input is valid\n    if n <= 3 or n > 10**9 or a <= 3 or a > 10**9 or b <= 3 or b > 10**9:\n        return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 3 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 5 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 7 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 11 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 13 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 17 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 19 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 23 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 29 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 31 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 37 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 41 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 43 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 47 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 53 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 59 == 0:\n        if a + b == n:\n            return \"1\"\n        else:\n            return \"0\"\n\n    # Check if input is a valid Goldbach conjecture\n    if n % 2 == 0 and n % 61 == 0:\n        if a + b == n:\n            return \"1\"\n       "
    },
    {
        "number": 3740,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    f = [0] * (n + 1)\n    f[0] = 1\n    f[1] = 1\n\n    for i in range(2, n + 1):\n        f[i] = f[i - 1] + f[i - 2]\n\n    count = 0\n    for i in range(n - 1):\n        count += f[i + 1]\n\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 3741,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    def dfs(node, visited):\n        if node in visited:\n            return False\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited and dfs(neighbor, visited):\n                return True\n        return False\n\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i]!= 0 and a[j]!= 0:\n                graph[i].append(j)\n                graph[j].append(i)\n\n    if not dfs(0, set()):\n        return \"-1\"\n\n    cycle = []\n    visited = set()\n    stack = [0]\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            cycle.append(node)\n            visited.add(node)\n            stack.extend(graph[node])\n\n    return len(cycle)\n"
    },
    {
        "number": 3742,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # Count the number of pairs of adjacent bulbs with different parity\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] % 2!= p[j] % 2:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 3743,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_colors = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if j - i > 1 and n % (i - j) == 0:\n                max_colors = max(max_colors, 2)\n    return str(max_colors)"
    },
    {
        "number": 3744,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    # Sort the students by their a and b skills\n    a.sort()\n    b.sort()\n\n    # Calculate the strength of each team\n    programming_team_strength = sum(a)\n    sports_team_strength = sum(b)\n\n    # Calculate the maximum strength of the university\n    max_strength = programming_team_strength + sports_team_strength\n\n    # Calculate the members of the programming team\n    programming_team_members = []\n    for i in range(p):\n        programming_team_members.append(i + 1)\n\n    # Calculate the members of the sports team\n    sports_team_members = []\n    for i in range(s):\n        sports_team_members.append(i + 1)\n\n    # Print the maximum strength of the university\n    print(max_strength)\n\n    # Print the members of the programming team\n    print(*programming_team_members)\n\n    # Print the members of the sports team\n    print(*sports_team_members)\n\n    return \"\""
    },
    {
        "number": 3745,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n\n    G = []\n    for u in range(1, n + 1):\n        G.append([])\n        for v in range(1, n + 1):\n            G[u].append(False)\n\n    for u, v in edges:\n        if G[u][v]:\n            continue\n        for i in range(n):\n            if G[u][i] and G[i][v]:\n                G[u][v] = True\n                break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][v]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][u]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][u]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][v]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][u]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][v]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][u]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][v]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][u]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][v]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][u]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][v]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][u]:\n                    G[u][v] = True\n                    break\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if G[u][v]:\n                continue\n            for i in range(n):\n                if G[i][v]:\n                    G[u][v] = True\n                   "
    },
    {
        "number": 3746,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = list(map(int, stdin.split()))\n    n = int(stdin.split()[2])\n\n    def move(i: int, j: int, k: int) -> int:\n        if i == j:\n            return 0\n        if t[i] == t[j]:\n            return 1\n        if t[i] < t[j]:\n            return move(i + 1, j, k)\n        else:\n            return move(i, j - 1, k)\n\n    def count_moves(i: int, j: int, k: int) -> int:\n        if i == j:\n            return 1\n        if t[i] == t[j]:\n            return 1\n        if t[i] < t[j]:\n            return count_moves(i + 1, j, k)\n        else:\n            return count_moves(i, j - 1, k)\n\n    moves = count_moves(0, 2, 3)\n    return str(moves)\n"
    },
    {
        "number": 3747,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.strip()\n    count = 0\n    for i in range(len(text)):\n        if text[i].isupper():\n            count += 1\n    return str(count)"
    },
    {
        "number": 3748,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    S = stdin.strip()\n    result = \"YES\"\n\n    for i in range(H):\n        for j in range(W):\n            if i == 0 or j == 0 or i == H - 1 or j == W - 1:\n                continue\n\n            if S[i][j] == S[H + 1 - i][W + 1 - j]:\n                continue\n\n            result = \"NO\"\n            break\n\n    return result"
    },
    {
        "number": 3749,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    # Count the integers that are initially written on the board\n    count = 0\n    for i in range(N):\n        if A[i] == X:\n            count += 1\n\n    # Count the integers that can be written as XOR of X and A\n    xor_count = 0\n    for i in range(N):\n        if A[i]!= X:\n            xor_count += A[i] ^ X\n\n    # Find the count modulo 998244353\n    return str(count % 998244353)"
    },
    {
        "number": 3750,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if a + b <= 0:\n        return \"-1\"\n    max_sets = 0\n    for i in range(1, k + 1):\n        max_sets = max(max_sets, i)\n    return str(max_sets)"
    },
    {
        "number": 3751,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    identifiers = stdin.split()\n    obfuscated_identifiers = []\n\n    for identifier in identifiers:\n        if identifier not in obfuscated_identifiers:\n            obfuscated_identifiers.append(identifier)\n\n    return \"YES\" if len(obfuscated_identifiers) == 26 else \"NO\""
    },
    {
        "number": 3752,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, d, t = map(int, stdin.split())\n    if k < 1 or d < 1 or t < 1 or t > 10**18:\n        return \"Invalid input\"\n\n    def cook_chicken(stove_on: bool) -> float:\n        if stove_on:\n            return t\n        else:\n            return 2 * t\n\n    total_time = 0\n    for _ in range(k):\n        total_time += cook_chicken(True)\n\n    total_time += cook_chicken(False)\n    return str(total_time)\n"
    },
    {
        "number": 3753,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    island = []\n    for _ in range(n):\n        island.append(list(input()))\n\n    def dfs(x, y, visited):\n        if x == n or y == m or island[x][y] == \".\":\n            return False\n        if island[x][y] == \"#\":\n            return True\n        visited[x][y] = True\n        if dfs(x + 1, y, visited):\n            return True\n        if dfs(x, y + 1, visited):\n            return True\n        visited[x][y] = False\n        return False\n\n    visited = [[False] * m for _ in range(n)]\n    if dfs(1, 1, visited):\n        return \"1\"\n    else:\n        return \"2\""
    },
    {
        "number": 3754,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    d_list = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize the graph\n    graph = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(N):\n        graph[i + 1][i + 1] = 1\n\n    # Connecting components\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            if d_list[i - 1] + d_list[j - 1] == d_list[i] + d_list[j]:\n                graph[i + 1][j] = graph[i + 1][j - 1] + graph[i][j - 1]\n\n    # Counting the number of ways to make the figure complete\n    ways = 0\n    for i in range(N + 1):\n        ways += graph[i][i]\n\n    return str(ways % 998244353)"
    },
    {
        "number": 3755,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_val = a[0]\n    count = 1\n\n    for i in range(1, n):\n        if a[i] > max_val:\n            max_val = a[i]\n            count = 1\n        elif a[i] == max_val:\n            count += 1\n        else:\n            max_val = a[i]\n            count = 1\n\n    print(max_val)\n    print(count)\n\n    for i in range(1, n):\n        if a[i] == max_val:\n            print(i)\n            break\n\n    return \"\""
    },
    {
        "number": 3756,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    grade = float(stdin.strip())\n    max_grade = 0\n    current_grade = grade\n    for i in range(t):\n        current_grade = round(current_grade, 1)\n        if current_grade > max_grade:\n            max_grade = current_grade\n    return str(max_grade)"
    },
    {
        "number": 3757,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_00, a_01, a_10, a_11 = map(int, stdin.split())\n    if a_00 == a_01 == a_10 == a_11:\n        return \"Impossible\"\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i == j:\n                continue\n            for k in range(1, 10):\n                if k == i or k == j:\n                    continue\n                for l in range(1, 10):\n                    if l == i or l == j or l == k:\n                        continue\n                    if a_00 + a_01 + a_10 + a_11 == i + j + k + l:\n                        return str(i) + str(j) + str(k) + str(l)\n    return \"Impossible\""
    },
    {
        "number": 3758,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    game_field = [['.' for _ in range(n)] for _ in range(n)]\n    packmen = [0] * n\n    asterisks = [0] * n\n    time = 0\n\n    for i in range(n):\n        for j in range(n):\n            if game_field[i][j] == 'P':\n                packmen[i] += 1\n            elif game_field[i][j] == '*':\n                asterisks[i] += 1\n\n    for i in range(n):\n        for j in range(n):\n            if game_field[i][j] == 'P':\n                if packmen[i] == 0:\n                    time += 1\n                else:\n                    packmen[i] -= 1\n            elif game_field[i][j] == '*':\n                if asterisks[i] == 0:\n                    time += 1\n                else:\n                    asterisks[i] -= 1\n\n    return str(time)"
    },
    {
        "number": 3759,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    special_points = []\n    for i in range(n):\n        special_points.append(i)\n\n    blocked_points = []\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if i == special_points[0] or i == special_points[1] or j == special_points[0] or j == special_points[1]:\n                blocked_points.append((i, j))\n\n    return str(len(blocked_points))"
    },
    {
        "number": 3760,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, a, b = map(int, stdin.split())\n    x_1, y_1, x_2, y_2 = x, y, x, y\n\n    if x_1 > x_2 or y_1 > y_2:\n        return \"Invalid input\"\n\n    if x_1 == x_2 or y_1 == y_2:\n        return \"Invalid input\"\n\n    if a == 1:\n        return \"Invalid input\"\n\n    if b == 1:\n        return \"Invalid input\"\n\n    if x_1 < 0 or x_1 >= n or y_1 < 0 or y_1 >= m or x_2 < 0 or x_2 >= n or y_2 < 0 or y_2 >= m:\n        return \"Invalid input\"\n\n    if x_1 == x_2 or y_1 == y_2:\n        return \"Invalid input\"\n\n    if x_1 == x_2:\n        x_1, x_2 = x_2, x_1\n\n    if y_1 == y_2:\n        y_1, y_2 = y_2, y_1\n\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n\n    if x_1 == x_2:\n        x_1, x_2 = x_2, x_1\n\n    if y_1 == y_2:\n        y_1, y_2 = y_2, y_1\n\n    if x_1 < 0 or x_1 >= n or y_1 < 0 or y_1 >= m or x_2 < 0 or x_2 >= n or y_2 < 0 or y_2 >= m:\n        return \"Invalid input\"\n\n    if x_1 == x_2 or y_1 == y_2:\n        return \"Invalid input\"\n\n    if x_1 == x_2:\n        x_1, x_2 = x_2, x_1\n\n    if y_1 == y_2:\n        y_1, y_2 = y_2, y_1\n\n    if x_1 < 0 or x_1 >= n or y_1 < 0 or y_1 >= m or x_2 < 0 or x_2 >= n or y_2 < 0 or y_2 >= m:\n        return \"Invalid input\"\n\n    if x_1 == x_2 or y_1 == y_2:\n        return \"Invalid input\"\n\n    if x_1 == x_2:\n        x_1, x_2 = x_2, x_1\n\n    if y_1 == y_2:\n        y_1, y_2 = y_2, y_1\n\n    x_1, y_1, x_2, y_2 = sorted([x_1, y_1, x_2, y_2])\n\n    if x_1 == x_2 or y_1 == y_2:\n        return \"Invalid input\"\n\n    if x_1 == x_2:\n        x_1, x_2 = x_2, x_1\n\n    if y_1 == y_2:\n        y_1, y_2 = y_2, y_1\n\n    x_1, y_1, x_2, y_2 = sorted([x_1, y_1, x_2, y_2])\n\n    if x_1 == x_2 or y_1 == y_2:\n        return \"Invalid input\"\n\n    if x_1 == x_2:\n        x_1, x_2 = x_2, x_1\n\n    if y_1 == y_2:\n        y_1, y_2 = y_2, y_1\n\n    x_1, y_1, x_2, y_2 = sorted([x_1, y_1, x_2, y_2])\n\n    if x_1 == x_2 or y_1 == y_2:\n        return \"Invalid input\"\n\n    if x_1 == x_2:\n        x_1, x_2 = x_2, x_1\n\n    if y_1 == y_2:\n        y_1, y_2 = y_2, y_1\n\n    x_1, y_1, x_2, y_2 = sorted([x_1, y_1, x_2, y_2])\n\n    if x_1 == x_2 or y_1 == y_2:\n        return \"Invalid input\"\n\n   "
    },
    {
        "number": 3761,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x, y = map(int, s.split())\n    directions = ['F', 'T']\n    dx, dy = 0, 1\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'F':\n            count += 1\n            if count == 1:\n                dx, dy = 1, 0\n            elif count == 2:\n                dx, dy = -1, 0\n        elif s[i] == 'T':\n            count -= 1\n            if count == 0:\n                dx, dy = -dy, dx\n            elif count == 1:\n                dx, dy = dy, -dx\n    if x == 0 and y == 0:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 3762,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    count = 0\n    for i in range(1, k + 1):\n        count += sum(1 for a in range(i) for b in range(i) if a!= b)\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 3763,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    p = int(stdin.strip())\n\n    # Calculate the sum of sizes of all guests in the restaurant\n    total_size = sum(a)\n\n    # Calculate the sum of sizes of all guests in the queue\n    queue_size = sum(a)\n\n    # Calculate the sum of sizes of all guests in the restaurant plus the size of this guest from the queue\n    total_guest_size = total_size + a[0]\n\n    # Calculate the number of orders of guests in the queue\n    num_orders = int(total_guest_size / p)\n\n    # Calculate the average number of visitors who have come to the restaurant for all possible n! orders of guests in the queue\n    average_visitors = num_orders * (num_orders + 1) / 2\n\n    # Calculate the absolute or relative error\n    error = abs(average_visitors - num_orders) / num_orders\n\n    return str(average_visitors) + '\\n'"
    },
    {
        "number": 3764,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    rangers = []\n    for _ in range(n):\n        strength = int(input())\n        rangers.append(strength)\n\n    rangers.sort(reverse=True)\n    max_strength = rangers[0]\n    min_strength = rangers[0]\n\n    for _ in range(k):\n        for i in range(1, n):\n            strength = rangers[i] ^ x\n            rangers[i] = strength\n            if strength > max_strength:\n                max_strength = strength\n            if strength < min_strength:\n                min_strength = strength\n\n    return str(max_strength) + \" \" + str(min_strength)"
    },
    {
        "number": 3765,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, w, n = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    extensions = [a_list[i] * a for i in range(n)]\n    extensions.sort()\n    if h * w < sum(extensions):\n        return \"-1\"\n    else:\n        return \"0\""
    },
    {
        "number": 3766,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    hints = []\n    for _ in range(n):\n        color, value = stdin.strip().split()\n        hints.append((color, value))\n    return str(min(len(hints), len(set(hints))))"
    },
    {
        "number": 3767,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, *b = map(int, stdin.split())\n    k = min(n, len(a))\n    t = sum(b) / k\n    return str(k) + \" \" + str(t)"
    },
    {
        "number": 3768,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return \"Impossible\"\n\n    def count_cards(cards):\n        count = 0\n        for card in cards:\n            if card == 'A':\n                count += 1\n            elif card == 'B':\n                count += 2\n        return count\n\n    def count_repetitions(cards):\n        count = 0\n        for card in cards:\n            if card == 'A':\n                count += 1\n            elif card == 'B':\n                count += 2\n        return count\n\n    def count_cards_with_letter(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count_and_count_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count_and_count_and_count_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count_and_count_and_count_and_count_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count_and_count_and_count_and_count_and_count_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count(cards, letter):\n        count = 0\n        for card in cards:\n            if card == letter:\n                count += 1\n        return count\n\n    def count_cards_with_letter_and_repetitions_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count_and_count_"
    },
    {
        "number": 3769,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, k = map(int, stdin.split())\n    if p % 2 == 0 or p == 1:\n        return \"Invalid input\"\n\n    count = 0\n    for i in range(1, p):\n        if i % 2 == 0:\n            continue\n        if i * i % p == k:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 3770,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    U = list(map(int, stdin.split()))\n    V = list(map(int, stdin.split()))\n\n    graph = []\n    for i in range(n):\n        graph.append([])\n        for j in range(m):\n            graph[i].append(0)\n\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        graph[a - 1][b - 1] = 1\n        graph[b - 1][a - 1] = 1\n\n    def dfs(u, visited):\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                dfs(v, visited)\n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited)\n\n    max_profit = 0\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j] == 1:\n                max_profit = max(max_profit, A[i] - B[i] + U[i] - V[j])\n\n    return str(max_profit)\n"
    },
    {
        "number": 3771,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = [list(map(str, stdin.split())) for _ in range(H)]\n\n    def dfs(i, j, visited):\n        if i < 0 or i >= H or j < 0 or j >= W or a[i][j] == 'o':\n            return False\n        if a[i][j] == 'S':\n            return True\n        if a[i][j] == 'T' and (i == 0 or j == 0 or i == H - 1 or j == W - 1):\n            return True\n        visited[i, j] = True\n        if dfs(i - 1, j, visited) or dfs(i + 1, j, visited) or dfs(i, j - 1, visited) or dfs(i, j + 1, visited):\n            return True\n        visited[i, j] = False\n        return False\n\n    def remove_leaves(i, j, visited):\n        if i < 0 or i >= H or j < 0 or j >= W or a[i][j] == 'o':\n            return False\n        if a[i][j] == 'S':\n            return True\n        if a[i][j] == 'T' and (i == 0 or j == 0 or i == H - 1 or j == W - 1):\n            return True\n        visited[i, j] = True\n        if remove_leaves(i - 1, j, visited) or remove_leaves(i + 1, j, visited) or remove_leaves(i, j - 1, visited) or remove_leaves(i, j + 1, visited):\n            return True\n        visited[i, j] = False\n        return False\n\n    def find_leaves(i, j, visited):\n        if i < 0 or i >= H or j < 0 or j >= W or a[i][j] == 'o':\n            return False\n        if a[i][j] == 'S':\n            return True\n        if a[i][j] == 'T' and (i == 0 or j == 0 or i == H - 1 or j == W - 1):\n            return True\n        visited[i, j] = True\n        if find_leaves(i - 1, j, visited) or find_leaves(i + 1, j, visited) or find_leaves(i, j - 1, visited) or find_leaves(i, j + 1, visited):\n            return True\n        visited[i, j] = False\n        return False\n\n    def find_leaves_count(i, j, visited):\n        if i < 0 or i >= H or j < 0 or j >= W or a[i][j] == 'o':\n            return 0\n        if a[i][j] == 'S':\n            return 1\n        if a[i][j] == 'T' and (i == 0 or j == 0 or i == H - 1 or j == W - 1):\n            return 1\n        return find_leaves_count(i - 1, j, visited) + find_leaves_count(i + 1, j, visited) + find_leaves_count(i, j - 1, visited) + find_leaves_count(i, j + 1, visited)\n\n    def find_leaves_count_recursive(i, j, visited):\n        if i < 0 or i >= H or j < 0 or j >= W or a[i][j] == 'o':\n            return 0\n        if a[i][j] == 'S':\n            return 1\n        if a[i][j] == 'T' and (i == 0 or j == 0 or i == H - 1 or j == W - 1):\n            return 1\n        return find_leaves_count_recursive(i - 1, j, visited) + find_leaves_count_recursive(i + 1, j, visited) + find_leaves_count_recursive(i, j - 1, visited) + find_leaves_count_recursive(i, j + 1, visited) + 1\n\n    visited = [[False] * W for _ in range(H)]\n    leaves_count = find_leaves_count_recursive(0, 0, visited)\n    if leaves_count == 0:\n        return -1\n\n    i, j = 0, 0\n    while True:\n        if dfs(i, j, visited):\n            i -= 1\n            j -= 1\n        else:\n            break\n\n    while True:\n        if remove_leaves(i,"
    },
    {
        "number": 3772,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 1:\n        return \"1\"\n    elif a == 3 and b == 2:\n        return \"3\"\n    else:\n        res = 1\n        for i in range(1, b + 1):\n            res += (1 / (1 / res + 1))\n        return str(res)"
    },
    {
        "number": 3773,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    K = list(map(int, stdin.readline().strip().split()))\n\n    def remove_stones(pile, X):\n        if X == 0:\n            return pile\n        if pile[0] <= X:\n            pile = pile[1:]\n        else:\n            pile = pile[:X]\n        return pile\n\n    def take_turn(pile, X):\n        if pile[0] <= X:\n            pile = pile[1:]\n        else:\n            pile = pile[:X]\n        return pile\n\n    def play_game(pile, X):\n        if pile[0] <= X:\n            pile = pile[1:]\n        else:\n            pile = pile[:X]\n        if pile[0] == 0:\n            return \"Aoki\"\n        else:\n            return \"Takahashi\"\n\n    for i in range(N):\n        pile = remove_stones(A[i], K[i])\n        if play_game(pile, K[i]) == \"Takahashi\":\n            return \"Takahashi\"\n        pile = take_turn(pile, K[i])\n        if play_game(pile, K[i]) == \"Aoki\":\n            return \"Aoki\"\n\n    return \"Draw\""
    },
    {
        "number": 3774,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    chessboard = [[0] * m for _ in range(n)]\n    max_chessmen = 0\n\n    for i in range(n):\n        for j in range(m):\n            chessboard[i][j] = 1\n            max_chessmen += 1\n\n    for i in range(n):\n        for j in range(m):\n            if chessboard[i][j] == 1:\n                for k in range(i - 1, -1, -1):\n                    for l in range(j - 1, -1, -1):\n                        if chessboard[k][l] == 1 and abs(i - k) + abs(j - l) == 3:\n                            chessboard[k][l] = 0\n                            max_chessmen -= 1\n\n    return str(max_chessmen)"
    },
    {
        "number": 3775,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, stdin.split())))\n    for _ in range(m):\n        pairs.append(list(map(int, stdin.split())))\n    shared_numbers = set()\n    for pair in pairs:\n        if len(pair) == 1:\n            shared_numbers.add(pair[0])\n    if len(shared_numbers) == 1:\n        return str(list(shared_numbers)[0])\n    else:\n        return \"0\""
    },
    {
        "number": 3776,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    format = int(stdin.strip())\n    time = stdin.strip().split(':')\n    hours = int(time[0])\n    minutes = int(time[1])\n\n    if format == 12:\n        hours = hours % 12 + 1\n    elif format == 24:\n        hours = hours % 24\n\n    if minutes == 0:\n        minutes = 59\n\n    if hours < 10:\n        hours = '0' + str(hours)\n    if minutes < 10:\n        minutes = '0' + str(minutes)\n\n    return f'{hours}:{minutes}'"
    },
    {
        "number": 3777,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X = int(stdin.readline())\n\n    edges = []\n    for _ in range(M):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n\n    def dfs(u, visited, path, weight):\n        if u == N:\n            return weight\n\n        if visited[u]:\n            return 0\n\n        visited[u] = True\n        path.append(u)\n        weight += edges[u][0]\n\n        for v, w in edges[u]:\n            weight += dfs(v, visited, path, weight)\n\n        path.pop()\n        visited[u] = False\n        return weight\n\n    def find_spanning_tree(u, visited, path, weight):\n        if u == N:\n            return weight\n\n        if visited[u]:\n            return 0\n\n        visited[u] = True\n        path.append(u)\n        weight += edges[u][0]\n\n        for v, w in edges[u]:\n            weight += find_spanning_tree(v, visited, path, weight)\n\n        path.pop()\n        visited[u] = False\n        return weight\n\n    def find_smallest_weight_tree(u, visited, path, weight):\n        if u == N:\n            return weight\n\n        if visited[u]:\n            return 0\n\n        visited[u] = True\n        path.append(u)\n        weight += edges[u][0]\n\n        for v, w in edges[u]:\n            weight += find_smallest_weight_tree(v, visited, path, weight)\n\n        path.pop()\n        visited[u] = False\n        return weight\n\n    def find_weight(u, visited, path, weight):\n        if u == N:\n            return weight\n\n        if visited[u]:\n            return 0\n\n        visited[u] = True\n        path.append(u)\n        weight += edges[u][0]\n\n        for v, w in edges[u]:\n            weight += find_weight(v, visited, path, weight)\n\n        path.pop()\n        visited[u] = False\n        return weight\n\n    def find_ways(u, visited, path, weight):\n        if u == N:\n            return 1\n\n        if visited[u]:\n            return 0\n\n        visited[u] = True\n        path.append(u)\n        weight += edges[u][0]\n\n        for v, w in edges[u]:\n            weight += find_ways(v, visited, path, weight)\n\n        path.pop()\n        visited[u] = False\n        return weight\n\n    def find_ways_with_x(u, visited, path, weight):\n        if u == N:\n            return 1\n\n        if visited[u]:\n            return 0\n\n        visited[u] = True\n        path.append(u)\n        weight += edges[u][0]\n\n        for v, w in edges[u]:\n            weight += find_ways_with_x(v, visited, path, weight)\n\n        path.pop()\n        visited[u] = False\n        return weight\n\n    def find_ways_with_x_and_spanning_tree(u, visited, path, weight):\n        if u == N:\n            return 1\n\n        if visited[u]:\n            return 0\n\n        visited[u] = True\n        path.append(u)\n        weight += edges[u][0]\n\n        for v, w in edges[u]:\n            weight += find_ways_with_x_and_spanning_tree(v, visited, path, weight)\n\n        path.pop()\n        visited[u] = False\n        return weight\n\n    def find_ways_with_x_and_smallest_weight_tree(u, visited, path, weight):\n        if u == N:\n            return 1\n\n        if visited[u]:\n            return 0\n\n        visited[u] = True\n        path.append(u)\n        weight += edges[u][0]\n\n        for v, w in edges[u]:\n            weight += find_ways_with_x_and_smallest_weight_tree(v, visited, path, weight)\n\n        path.pop()\n        visited[u] = False\n        return weight\n\n    def find_ways_with_x_and_weight(u, visited, path, weight):\n        if u == N:\n            return 1\n\n        if visited[u]:\n            return 0\n\n        visited[u] = True\n        path.append(u)\n        weight += edges[u][0]\n\n        for v, w in edges[u]:\n            weight += find_ways_with_x_and_weight(v, visited, path, weight)\n\n        path.pop()\n        visited[u] = False\n        return weight\n\n    def find_ways_with_x_and"
    },
    {
        "number": 3778,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    # Check if there are any valid configurations\n    for i in range(n):\n        if a[i] > 3:\n            return \"-1\"\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the columns\n    for i in range(n):\n        # Initialize the boomerang position\n        r = i\n        c = 0\n\n        # Iterate over the boomerang positions\n        while c < n:\n            # Check if the boomerang hits a target\n            if a[i] > 0:\n                # Check if the boomerang hits the target\n                if a[i] == a[r]:\n                    # If the boomerang hits the target, place the target\n                    result.append(f\"{r} {c}\")\n                    a[i] -= 1\n                    a[r] -= 1\n                else:\n                    # If the boomerang does not hit the target, bounce off\n                    r += 1\n                    c += 1\n            else:\n                # If the boomerang does not hit a target, move to the next position\n                c += 1\n\n    # Print the result\n    for row in result:\n        print(row)\n\n    return str(len(result))\n"
    },
    {
        "number": 3779,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    banknotes = list(map(int, stdin.split()))\n\n    def is_happy(amount):\n        if amount == 0:\n            return True\n        digits = [int(digit) for digit in str(amount)]\n        for i in range(len(digits)):\n            if digits[i]!= digits[i + 1]:\n                return False\n        return True\n\n    def get_happy_amount(amount):\n        if amount == 0:\n            return 0\n        digits = [int(digit) for digit in str(amount)]\n        for i in range(len(digits)):\n            if digits[i]!= digits[i + 1]:\n                return 0\n        return 10 ** len(digits)\n\n    happy_amounts = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if banknotes[i] + banknotes[j] == 0:\n                happy_amounts.append(get_happy_amount(banknotes[i]))\n\n    happy_amounts.sort()\n    return '\\n'.join(map(str, happy_amounts))\n"
    },
    {
        "number": 3780,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    v_max, t = map(int, stdin.split())\n    wind_vectors = []\n    for i in range(t):\n        u_x, u_y = map(int, stdin.split())\n        wind_vectors.append((u_x, u_y))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append((0, 0))\n    wind_vectors.append"
    },
    {
        "number": 3781,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        N = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        bag_count = [0] * N\n        dish_count = [0] * N\n        for i in range(N):\n            bag_count[i] = a[i]\n            dish_count[i] = 0\n\n        for i in range(N):\n            if bag_count[i] > 0:\n                dish_count[i] += 1\n                bag_count[i] -= 1\n\n        for i in range(N):\n            if dish_count[i] > 0:\n                bag_count[i] += 1\n                dish_count[i] -= 1\n\n        for i in range(N):\n            if bag_count[i] == 0:\n                dish_count[i] += 1\n\n        if dish_count[0] > dish_count[1]:\n            return \"First\"\n        else:\n            return \"Second\""
    },
    {
        "number": 3782,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    X, Y = float('inf'), float('inf')\n    for i in range(Q):\n        X, Y = min(X, A[i]), max(Y, A[i])\n\n    return str(X - Y)"
    },
    {
        "number": 3783,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, k = map(int, stdin.split())\n    subsets = [set() for _ in range(N)]\n    for i in range(N):\n        subsets[i].add(i)\n    for i in range(N):\n        for j in range(i + 1, N):\n            subsets[i].add(j)\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(k + 1, N + 1):\n                subsets[i].add(k)\n    total_cost = 0\n    for subset in subsets:\n        total_cost += sum(subset)\n    return str(total_cost % (10**9 + 7))"
    },
    {
        "number": 3784,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    worlds = []\n    for _ in range(n):\n        worlds.append([])\n\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        worlds[u].append(v)\n        worlds[v].append(u)\n\n    visited = set()\n    for i in range(n):\n        if i not in visited:\n            dfs(i, worlds, visited)\n\n    return str(len(visited))\n\ndef"
    },
    {
        "number": 3785,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    maze = []\n    for _ in range(n):\n        maze.append(list(stdin.strip()))\n\n    def dfs(x, y, visited):\n        if x < 0 or x >= n or y < 0 or y >= m or maze[x][y] == '.' or visited[x][y]:\n            return False\n        visited[x][y] = True\n        if maze[x][y] == '#':\n            return True\n        if dfs(x - 1, y, visited) and dfs(x + 1, y, visited) and dfs(x, y - 1, visited) and dfs(x, y + 1, visited):\n            return True\n        visited[x][y] = False\n        return False\n\n    def add_walls(x, y, visited):\n        if x < 0 or x >= n or y < 0 or y >= m or maze[x][y] == '.' or visited[x][y]:\n            return False\n        visited[x][y] = True\n        if maze[x][y] == '#':\n            return True\n        if add_walls(x - 1, y, visited) and add_walls(x + 1, y, visited) and add_walls(x, y - 1, visited) and add_walls(x, y + 1, visited):\n            return True\n        visited[x][y] = False\n        return False\n\n    def transform_walls(x, y, visited):\n        if x < 0 or x >= n or y < 0 or y >= m or maze[x][y] == '.' or visited[x][y]:\n            return False\n        visited[x][y] = True\n        if maze[x][y] == '#':\n            return True\n        if transform_walls(x - 1, y, visited) and transform_walls(x + 1, y, visited) and transform_walls(x, y - 1, visited) and transform_walls(x, y + 1, visited):\n            return True\n        visited[x][y] = False\n        return False\n\n    def fill_maze(x, y, visited):\n        if x < 0 or x >= n or y < 0 or y >= m or maze[x][y] == '.' or visited[x][y]:\n            return False\n        visited[x][y] = True\n        if maze[x][y] == '#':\n            return True\n        if fill_maze(x - 1, y, visited) and fill_maze(x + 1, y, visited) and fill_maze(x, y - 1, visited) and fill_maze(x, y + 1, visited):\n            return True\n        visited[x][y] = False\n        return False\n\n    def solve(x, y, visited):\n        if x < 0 or x >= n or y < 0 or y >= m or maze[x][y] == '.' or visited[x][y]:\n            return False\n        visited[x][y] = True\n        if maze[x][y] == '#':\n            return True\n        if add_walls(x, y, visited) and transform_walls(x, y, visited) and fill_maze(x, y, visited):\n            return True\n        visited[x][y] = False\n        return False\n\n    for _ in range(k):\n        x, y = random.randint(0, n - 1), random.randint(0, m - 1)\n        while not solve(x, y, [[False] * m for _ in range(n)]):\n            x, y = random.randint(0, n - 1), random.randint(0, m - 1)\n\n    result = []\n    for i in range(n):\n        row = ''.join(maze[i])\n        result.append(row)\n\n    return '\\n'.join(result)"
    },
    {
        "number": 3786,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n\n    count = 0\n    for i in range(1, n):\n        count += p[i] - 1\n\n    return str(count)"
    },
    {
        "number": 3787,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N < 1 or N > 300000 or A < 1 or A > 300000 or B < 1 or B > 300000:\n        return \"-1\"\n\n    def longest_increasing_subsequence(arr, start, end):\n        if start == end:\n            return [arr[start]]\n\n        max_length = 1\n        current_length = 1\n        current_start = start\n\n        for i in range(start + 1, end + 1):\n            if arr[i] > arr[current_start]:\n                current_length += 1\n                if current_length > max_length:\n                    max_length = current_length\n                    current_start = i\n            else:\n                current_length = 1\n\n        return longest_increasing_subsequence(arr, current_start, end)\n\n    def longest_decreasing_subsequence(arr, start, end):\n        if start == end:\n            return [arr[start]]\n\n        max_length = 1\n        current_length = 1\n        current_start = start\n\n        for i in range(start + 1, end + 1):\n            if arr[i] < arr[current_start]:\n                current_length += 1\n                if current_length > max_length:\n                    max_length = current_length\n                    current_start = i\n            else:\n                current_length = 1\n\n        return longest_decreasing_subsequence(arr, current_start, end)\n\n    def find_longest_increasing_subsequence(arr, start, end):\n        if start == end:\n            return [arr[start]]\n\n        max_length = 1\n        current_length = 1\n        current_start = start\n\n        for i in range(start + 1, end + 1):\n            if arr[i] > arr[current_start]:\n                current_length += 1\n                if current_length > max_length:\n                    max_length = current_length\n                    current_start = i\n            else:\n                current_length = 1\n\n        return find_longest_increasing_subsequence(arr, current_start, end)\n\n    def find_longest_decreasing_subsequence(arr, start, end):\n        if start == end:\n            return [arr[start]]\n\n        max_length = 1\n        current_length = 1\n        current_start = start\n\n        for i in range(start + 1, end + 1):\n            if arr[i] < arr[current_start]:\n                current_length += 1\n                if current_length > max_length:\n                    max_length = current_length\n                    current_start = i\n            else:\n                current_length = 1\n\n        return find_longest_decreasing_subsequence(arr, current_start, end)\n\n    def find_sequence(arr, start, end):\n        if start == end:\n            return [arr[start]]\n\n        max_length = 1\n        current_length = 1\n        current_start = start\n\n        for i in range(start + 1, end + 1):\n            if arr[i] > arr[current_start]:\n                current_length += 1\n                if current_length > max_length:\n                    max_length = current_length\n                    current_start = i\n            else:\n                current_length = 1\n\n        if max_length == 1:\n            return find_sequence(arr, current_start, end)\n\n        longest_increasing_subsequence_list = longest_increasing_subsequence(arr, start, end)\n        longest_decreasing_subsequence_list = longest_decreasing_subsequence(arr, start, end)\n\n        if len(longest_increasing_subsequence_list) == 1 and len(longest_decreasing_subsequence_list) == 1:\n            return [longest_increasing_subsequence_list[0], longest_decreasing_subsequence_list[0]]\n\n        if len(longest_increasing_subsequence_list) > 1 and len(longest_decreasing_subsequence_list) > 1:\n            return [longest_increasing_subsequence_list[0], longest_decreasing_subsequence_list[0]]\n\n        if len(longest_increasing_subsequence_list) > 1:\n            return [longest_increasing_subsequence_list[0]]\n\n        if len(longest_decreasing_subsequence_list) > 1:\n            return [longest_decreasing_subsequence_list[0]]\n\n    sequence = find_sequence(range(1, N + 1), 0, N)\n    if len("
    },
    {
        "number": 3788,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def is_valid(a, b):\n        return gcd(a, b) > 1\n\n    def construct_tree(a, is_valid):\n        if len(a) == 1:\n            return a[0]\n\n        mid = len(a) // 2\n        left = construct_tree(a[:mid], is_valid)\n        right = construct_tree(a[mid:], is_valid)\n\n        if is_valid(left, right):\n            return left\n        else:\n            return right\n\n    tree = construct_tree(a, is_valid)\n    if tree == a:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 3789,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_money = 0\n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            if a[i] % 2 == 0:\n                max_money += a[i] * 2\n        else:\n            if a[i] % 2 == 0:\n                max_money += a[i]\n\n    return str(max_money)\n"
    },
    {
        "number": 3790,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    max_length = 1\n    current_length = 1\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] > 0:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return str(max_length)"
    },
    {
        "number": 3791,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n\n    # Find the minimum deviation of cyclic shifts\n    min_dev = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(p[i] - p[j]) < min_dev:\n                min_dev = abs(p[i] - p[j])\n                shift_i = i\n                shift_j = j\n\n    # Find the id of the minimum deviation cyclic shift\n    shift_id = 0\n    for i in range(n):\n        if abs(p[i] - p[shift_i]) < min_dev:\n            shift_id = i\n            break\n\n    return str(min_dev) +'' + str(shift_id)\n"
    },
    {
        "number": 3792,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = input()\n    t = input()\n\n    def is_prefix(s: str, t: str) -> bool:\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n\n    def count_strings(s: str, t: str) -> int:\n        count = 0\n        for i in range(len(s)):\n            if s[i] == t[i]:\n                count += 1\n        return count\n\n    def max_count(s: str, t: str) -> int:\n        max_count = 0\n        for i in range(len(s)):\n            if is_prefix(s, t):\n                max_count = max(max_count, count_strings(s, t))\n        return max_count\n\n    return str(max_count)\n"
    },
    {
        "number": 3793,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0].split()[0])\n    m = int(lines[0].split()[1])\n    k = int(lines[0].split()[2])\n\n    # Read the original coordinates\n    original_coordinates = []\n    for _ in range(n):\n        line = lines[1].split()\n        original_coordinates.append([int(line[0]), int(line[1]), int(line[2])])\n\n    # Read the swapped coordinates\n    swapped_coordinates = []\n    for _ in range(m):\n        line = lines[2].split()\n        swapped_coordinates.append([int(line[0]), int(line[1]), int(line[2])])\n\n    # Check if there is a valid way to restore the cube\n    for i in range(n):\n        for j in range(m):\n            if original_coordinates[i][j] == swapped_coordinates[j][i]:\n                return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 3794,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if n == 1:\n        return \"YES\"\n\n    if n == 2:\n        if a[0] == 1 and a[1] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if n == 3:\n        if a[0] == 1 and a[1] == 1 and a[2] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if n == 4:\n        if a[0] == 1 and a[1] == 1 and a[2] == 1 and a[3] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if n == 5:\n        if a[0] == 1 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    return \"NO\""
    },
    {
        "number": 3795,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, e = map(int, stdin.split())\n    if n == 0:\n        return \"0\"\n\n    # Find the maximum number of rubles that can be obtained by buying $d$ and $e$ bills\n    max_rubles = n * d + n * e\n\n    # Find the maximum number of rubles that can be obtained by buying $d$ and $e$ bills\n    max_rubles = max(max_rubles, n * d + n * e)\n\n    return str(max_rubles)\n"
    },
    {
        "number": 3796,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    def is_beautiful(row):\n        return all(row[i]!= row[i + 1] for i in range(len(row) - 1))\n\n    def is_valid(row, col, num):\n        return row[col] == num\n\n    def choose_numbers(row, col, num):\n        row[col] = num\n        return row\n\n    def fill_rectangle(row, col, num):\n        for i in range(len(row)):\n            row[i] = choose_numbers(row, i, num)\n\n    def construct_rectangle(row, col, num):\n        if is_beautiful(row):\n            return row, col\n        else:\n            for i in range(len(row)):\n                if is_valid(row, i, num):\n                    fill_rectangle(row, i, num)\n            return row, col\n\n    def construct_rectangles(n):\n        rectangles = []\n        for i in range(n):\n            row, col = construct_rectangle(a, i, a[i])\n            rectangles.append((row, col))\n        return rectangles\n\n    rectangles = construct_rectangles(n)\n    max_rect = max(rectangles, key=lambda x: len(x[0]))\n    x = len(max_rect[0])\n    p = len(max_rect[0])\n    q = x\n    for row in max_rect[0]:\n        print(\" \".join(map(str, row)))\n    return f\"{x}\\n{p} {q}\""
    },
    {
        "number": 3797,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    colors = set()\n    for i in range(1, N + 1):\n        colors.add(i)\n    ways = 0\n    for i in range(1, M + 1):\n        x = i\n        while x > 0:\n            if x % 2 == 0:\n                ways += colors.pop()\n            x //= 2\n    return str(ways % (10**9 + 7))"
    },
    {
        "number": 3798,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if n < 2 or s < 2:\n        return -1\n\n    def f(b, n):\n        if n < b:\n            return n\n        else:\n            return f(b, n // b) + (n % b)\n\n    b = 2\n    while f(b, n)!= s:\n        b += 1\n\n    return b"
    },
    {
        "number": 3799,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n < 3:\n        return \"First\" if s[0] == s[1] else \"Second\"\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            return \"First\" if s[i] == s[0] else \"Second\"\n    return \"First\" if s[0] == s[1] else \"Second\""
    },
    {
        "number": 3800,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    s = list(map(int, stdin.strip().split()))\n\n    b = [[0] * (a + 1) for _ in range(a + 1)]\n    for i in range(a + 1):\n        for j in range(a + 1):\n            b[i][j] = s[i - 1] * s[j - 1]\n\n    count = 0\n    for i in range(a + 1):\n        for j in range(a + 1):\n            if b[i][j] == a:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 3801,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n\n    # Calculate the probability of each picture\n    p = [w[i] / sum(w) for i in range(n)]\n\n    # Calculate the expected weight of each picture\n    expected_weights = [p[i] * a[i] for i in range(n)]\n\n    # Calculate the expected weight of each picture after all visits\n    expected_weights_after_visits = [expected_weights[i] + 1 for i in range(n)]\n\n    # Calculate the expected weight of each picture after all visits modulo 998244353\n    expected_weights_after_visits_modulo_998244353 = [expected_weights_after_visits[i] % 998244353 for i in range(n)]\n\n    # Print the expected weights\n    for i in range(n):\n        print(expected_weights_after_visits_modulo_998244353[i])\n\n    return \"\""
    },
    {
        "number": 3802,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, virus = stdin.strip().split()\n    s_1 = s_1.upper()\n    s_2 = s_2.upper()\n    virus = virus.upper()\n\n    def lcs(s1, s2):\n        m, n = len(s1), len(s2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[m][n]\n\n    lcs_length = lcs(s_1, s_2)\n    if lcs_length == 0:\n        return \"0\"\n\n    lcs_start = 0\n    lcs_end = 0\n    while lcs_start < len(s_1) and lcs_end < len(s_2):\n        if s_1[lcs_start] == s_2[lcs_end]:\n            lcs_start += 1\n            lcs_end += 1\n        elif s_1[lcs_start] < s_2[lcs_end]:\n            lcs_start += 1\n        else:\n            lcs_end += 1\n\n    return s_1[lcs_start - 1:lcs_end]\n"
    },
    {
        "number": 3803,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hp_y, atk_y, def_y = map(int, stdin.split())\n    hp_m, atk_m, def_m = map(int, stdin.split())\n    h, a, d = map(int, stdin.split())\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk = 1\n    price_def = 1\n\n    # Calculate the price of 1 HP, 1 ATK and 1 DEF\n    price_hp = 1\n    price_atk"
    },
    {
        "number": 3804,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    matrix = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            matrix[i][j] = i + j\n    result = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if matrix[i][j] == t:\n                result += 1\n    return str(result)"
    },
    {
        "number": 3805,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequence = list(stdin.strip())\n    sequence = [c == '+' for c in sequence]\n    sequence = [c for i, c in enumerate(sequence) if i % 2 == 0]\n    sequence = [c for i, c in enumerate(sequence) if i % 2 == 1]\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == sequence[i + 1]]\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1]!= sequence[i + 1]]\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '+']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '-' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence) if sequence[i - 1] == '+' and sequence[i + 1] == '-']\n    sequence = [c for i, c in enumerate(sequence"
    },
    {
        "number": 3806,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p_x, p_y = map(int, stdin.split())\n    polygon = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        polygon.append((x, y))\n\n    p = (p_x, p_y)\n    polygon.append(p)\n\n    polygon.sort(key=lambda x: x[0])\n\n    area = 0\n    for i in range(n - 1):\n        x1, y1 = polygon[i]\n        x2, y2 = polygon[i + 1]\n        area += (x2 - x1) * (y1 + y2)\n\n    return str(area)"
    },
    {
        "number": 3807,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    blocks = []\n    volume = 0\n    for i in range(m):\n        side = int(input())\n        volume += side**3\n        blocks.append((side, volume))\n\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    max_blocks = blocks[0][0]\n    max_volume = blocks[0][1]\n\n    for i in range(1, len(blocks)):\n        if blocks[i][1] > max_volume:\n            max_blocks = blocks[i][0]\n            max_volume = blocks[i][1]\n\n    return str(max_blocks), str(max_volume)"
    },
    {
        "number": 3808,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequence = stdin.strip()\n    stack = []\n    for i in range(n):\n        if sequence[i] == '(':\n            stack.append(i)\n        elif sequence[i] == ')':\n            if not stack:\n                return \"No\"\n            else:\n                stack.pop()\n    return \"Yes\""
    },
    {
        "number": 3809,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    people = list(map(int, stdin.split()))\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"5\"\n    if n == 4:\n        return \"2\"\n    if n == 5:\n        return \"0\"\n    if n == 6:\n        return \"0\"\n    if n == 7:\n        return \"0\"\n    if n == 8:\n        return \"0\"\n    if n == 9:\n        return \"0\"\n    if n == 10:\n        return \"0\"\n    if n == 11:\n        return \"0\"\n    if n == 12:\n        return \"0\"\n    if n == 13:\n        return \"0\"\n    if n == 14:\n        return \"0\"\n    if n == 15:\n        return \"0\"\n    if n == 16:\n        return \"0\"\n    if n == 17:\n        return \"0\"\n    if n == 18:\n        return \"0\"\n    if n == 19:\n        return \"0\"\n    if n == 20:\n        return \"0\"\n    if n == 21:\n        return \"0\"\n    if n == 22:\n        return \"0\"\n    if n == 23:\n        return \"0\"\n    if n == 24:\n        return \"0\"\n    if n == 25:\n        return \"0\"\n    if n == 26:\n        return \"0\"\n    if n == 27:\n        return \"0\"\n    if n == 28:\n        return \"0\"\n    if n == 29:\n        return \"0\"\n    if n == 30:\n        return \"0\"\n    if n == 31:\n        return \"0\"\n    if n == 32:\n        return \"0\"\n    if n == 33:\n        return \"0\"\n    if n == 34:\n        return \"0\"\n    if n == 35:\n        return \"0\"\n    if n == 36:\n        return \"0\"\n    if n == 37:\n        return \"0\"\n    if n == 38:\n        return \"0\"\n    if n == 39:\n        return \"0\"\n    if n == 40:\n        return \"0\"\n    if n == 41:\n        return \"0\"\n    if n == 42:\n        return \"0\"\n    if n == 43:\n        return \"0\"\n    if n == 44:\n        return \"0\"\n    if n == 45:\n        return \"0\"\n    if n == 46:\n        return \"0\"\n    if n == 47:\n        return \"0\"\n    if n == 48:\n        return \"0\"\n    if n == 49:\n        return \"0\"\n    if n == 50:\n        return \"0\"\n    if n == 51:\n        return \"0\"\n    if n == 52:\n        return \"0\"\n    if n == 53:\n        return \"0\"\n    if n == 54:\n        return \"0\"\n    if n == 55:\n        return \"0\"\n    if n == 56:\n        return \"0\"\n    if n == 57:\n        return \"0\"\n    if n == 58:\n        return \"0\"\n    if n == 59:\n        return \"0\"\n    if n == 60:\n        return \"0\"\n    if n == 61:\n        return \"0\"\n    if n == 62:\n        return \"0\"\n    if n == 63:\n        return \"0\"\n    if n == 64:\n        return \"0\"\n    if n == 65:\n        return \"0\"\n    if n == 66:\n        return \"0\"\n    if n == 67:\n        return \"0\"\n    if n == 68:\n        return \"0\"\n    if n == 69:\n        return \"0\"\n    if n == 70:\n        return \"0\"\n    if n == 71:\n        return \"0\"\n    if n == 72:\n        return \"0\"\n    if n == 73:\n        return \"0\"\n    if n == 74:\n        return \"0\"\n    if n == 75:\n        return \"0\"\n    if n == 76:\n        return \"0\"\n    if n == 77:\n        return \"0\"\n    if n == 7"
    },
    {
        "number": 3810,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    # Sort the boxes by their labels\n    a.sort()\n\n    # Initialize the number of piles\n    num_piles = 1\n\n    # Iterate through the boxes\n    for i in range(n):\n        # Find the indices of the boxes that divide both a[i] and a[i+1]\n        j = i + 1\n        while j < n and a[j] % a[i] == 0:\n            j += 1\n        k = j - 1\n\n        # Check if there exists a position where the two piles have different boxes\n        if k > 0 and a[k] % a[i]!= 0:\n            num_piles += 1\n\n    # Calculate the modulo of the number of piles\n    modulo = 10**9 + 7\n    result = num_piles % modulo\n\n    return str(result)"
    },
    {
        "number": 3811,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pairs = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        pairs.append((a, b))\n\n    gcd = 1\n    for a, b in pairs:\n        gcd = gcd * a // b\n\n    return str(gcd)"
    },
    {
        "number": 3812,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    operations = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        operations.append((a, b))\n    operations.sort(key=lambda x: (-x[0], -x[1]))\n    result = []\n    for a, b in operations:\n        if a == 0 and b == 0:\n            result.append(\"0\")\n        elif a == 0:\n            result.append(\"1 0\")\n        elif b == 0:\n            result.append(\"1 3\")\n        else:\n            result.append(\"2\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 3813,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split()))\n    X = list(map(int, stdin.readline().strip().split()))\n\n    def dfs(v, color, weight):\n        if v == 1:\n            return True, color, weight\n        for p in P[v]:\n            if not dfs(p, color, weight):\n                return False, color, weight\n        return True, color, weight\n\n    for i in range(n):\n        if not dfs(i, \"white\", X[i]):\n            return \"IMPOSSIBLE\"\n\n    return \"POSSIBLE\""
    },
    {
        "number": 3814,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    MOD = 10**9 + 7\n\n    def is_valid(toppings: str) -> bool:\n        return len(set(toppings)) == 2\n\n    def count_valid_sets(toppings: str) -> int:\n        count = 0\n        for i in range(2, len(toppings) + 1):\n            if is_valid(toppings[:i]):\n                count += 1\n        return count\n\n    def count_valid_sets_mod(toppings: str) -> int:\n        count = 0\n        for i in range(2, len(toppings) + 1):\n            if is_valid(toppings[:i]):\n                count += 1\n        return count % MOD\n\n    def count_valid_sets_mod_with_toppings(toppings: str) -> int:\n        count = 0\n        for i in range(2, len(toppings) + 1):\n            if is_valid(toppings[:i]):\n                count += 1\n        return count % MOD\n\n    def count_valid_sets_mod_with_toppings_and_no_toppings(toppings: str) -> int:\n        count = 0\n        for i in range(2, len(toppings) + 1):\n            if is_valid(toppings[:i]):\n                count += 1\n        return count % MOD\n\n    def count_valid_sets_mod_with_toppings_and_no_toppings_and_no_toppings(toppings: str) -> int:\n        count = 0\n        for i in range(2, len(toppings) + 1):\n            if is_valid(toppings[:i]):\n                count += 1\n        return count % MOD\n\n    def count_valid_sets_mod_with_toppings_and_no_toppings_and_no_toppings_and_no_toppings(toppings: str) -> int:\n        count = 0\n        for i in range(2, len(toppings) + 1):\n            if is_valid(toppings[:i]):\n                count += 1\n        return count % MOD\n\n    def count_valid_sets_mod_with_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings(toppings: str) -> int:\n        count = 0\n        for i in range(2, len(toppings) + 1):\n            if is_valid(toppings[:i]):\n                count += 1\n        return count % MOD\n\n    def count_valid_sets_mod_with_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings(toppings: str) -> int:\n        count = 0\n        for i in range(2, len(toppings) + 1):\n            if is_valid(toppings[:i]):\n                count += 1\n        return count % MOD\n\n    def count_valid_sets_mod_with_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings(toppings: str) -> int:\n        count = 0\n        for i in range(2, len(toppings) + 1):\n            if is_valid(toppings[:i]):\n                count += 1\n        return count % MOD\n\n    def count_valid_sets_mod_with_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings(toppings: str) -> int:\n        count = 0\n        for i in range(2, len(toppings) + 1):\n            if is_valid(toppings[:i]):\n                count += 1\n        return count % MOD\n\n    def count_valid_sets_mod_with_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings_and_no_toppings_"
    },
    {
        "number": 3815,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    # Check if the sequence is k-periodic\n    if k > n:\n        return \"Error: Sequence is not k-periodic.\"\n\n    # Calculate the sum of s_i * a^n - s_i * b^i for all i\n    sum_s_i_ab_i = sum(s[i] * a ** (n - i) * b ** i for i in range(k))\n\n    # Calculate the non-negative remainder of division\n    remainder = sum_s_i_ab_i % (10 ** 9 + 9)\n\n    return str(remainder)"
    },
    {
        "number": 3816,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, l = map(int, stdin.split())\n    ways = 0\n    for i in range(a, b + 1):\n        for j in range(i + 1, b + 1):\n            for k in range(j + 1, b + 1):\n                area = (i * j * k) // 2\n                if area <= l:\n                    ways += 1\n    return str(ways)"
    },
    {
        "number": 3817,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    for i in range(1, 2**m):\n        if not is_wool_sequence(i):\n            count += 1\n    return str(count % (10**9 + 9))\n\n\ndef"
    },
    {
        "number": 3818,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    edges = []\n    for _ in range(N - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a, b))\n\n    def dfs(vertex, color):\n        if color == 0:\n            return 0\n        max_niceness = 0\n        for neighbor, length in edges:\n            if neighbor == vertex:\n                continue\n            if color == neighbor % 2:\n                neighbor_niceness = dfs(neighbor, neighbor % 2)\n            else:\n                neighbor_niceness = 0\n            max_niceness = max(max_niceness, neighbor_niceness + length)\n        return max_niceness\n\n    max_niceness = 0\n    for color in range(2):\n        max_niceness = max(max_niceness, dfs(1, color))\n    return (max_niceness % (10**9 + 7))"
    },
    {
        "number": 3819,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the cards in increasing order\n    a.sort()\n    b.sort()\n\n    # Calculate the minimum number of operations\n    operations = 0\n    i = 0\n    while i < n:\n        if a[i] == b[i]:\n            i += 1\n        else:\n            operations += 1\n            i += 1\n\n    return str(operations)"
    },
    {
        "number": 3820,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.strip()\n    t = stdin.strip()\n\n    if '*' in s:\n        s = s.replace('*', '')\n\n    if '*' in t:\n        t = t.replace('*', '')\n\n    if s == t:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3821,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(float, stdin.readline().strip().split()))\n\n    # Calculate the probability of each friend coming up with a problem\n    prob = [p[i] for i in range(n)]\n    prob.append(1 - sum(prob))\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob = max(prob)\n    min_prob = min(prob)\n    max_prob_friends = [p[i] for i in range(n) if prob[i] == max_prob]\n    min_prob_friends = [p[i] for i in range(n) if prob[i] == min_prob]\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob = [p[i] for i in range(n) if prob[i] == max_prob]\n    min_prob_friends_prob = [p[i] for i in range(n) if prob[i] == min_prob]\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_sum = sum(max_prob_friends_prob)\n    min_prob_friends_prob_sum = sum(min_prob_friends_prob)\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff = max_prob_friends_prob_sum - min_prob_friends_prob_sum\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff_abs = abs(max_prob_friends_prob_diff)\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff_sign = max_prob_friends_prob_diff / max_prob_friends_prob_diff_abs\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff_sign_max = max(max_prob_friends_prob_diff_sign)\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff_sign_min = min(max_prob_friends_prob_diff_sign)\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff_sign_max_friends = [p[i] for i in range(n) if prob[i] == max_prob and i not in max_prob_friends]\n    max_prob_friends_prob_diff_sign_min_friends = [p[i] for i in range(n) if prob[i] == min_prob and i not in min_prob_friends]\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff_sign_max_friends_prob = [p[i] for i in range(n) if prob[i] == max_prob and i not in max_prob_friends and i not in max_prob_friends_prob]\n    max_prob_friends_prob_diff_sign_min_friends_prob = [p[i] for i in range(n) if prob[i] == min_prob and i not in min_prob_friends and i not in min_prob_friends_prob]\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff_sign_max_friends_prob_sum = sum(max_prob_friends_prob_diff_sign_max_friends_prob)\n    max_prob_friends_prob_diff_sign_min_friends_prob_sum = sum(max_prob_friends_prob_diff_sign_min_friends_prob)\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff_sign_max_friends_prob_diff = max_prob_friends_prob_diff_sign_max_friends_prob_sum - max_prob_friends_prob_diff_sign_min_friends_prob_sum\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff_sign_max_friends_prob_diff_abs = abs(max_prob_friends_prob_diff_sign_max_friends_prob_diff)\n\n    # Calculate the probability of each friend coming up with a problem\n    max_prob_friends_prob_diff_sign_max_friends_prob_diff_sign = max_prob_friends_prob_diff_sign_max_friends_prob_diff /"
    },
    {
        "number": 3822,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, v_1, v_2, k = map(int, stdin.split())\n    if n > 10000 or l > 1000000 or v_1 > v_2 or k > n:\n        return \"Error: Invalid input\"\n\n    time = 0\n    for i in range(n):\n        time += v_1\n\n    return str(time)"
    },
    {
        "number": 3823,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(float, stdin.strip().split()))\n    a.sort()\n    a.reverse()\n    a_sum = sum(a)\n    a_n = len(a)\n    a_n_half = a_n // 2\n    a_half = a[a_n_half]\n    a_half_plus_one = a_half + 1\n    a_half_minus_one = a_half - 1\n    a_half_plus_one_rounded = round(a_half_plus_one)\n    a_half_minus_one_rounded = round(a_half_minus_one)\n    a_half_plus_one_rounded_plus_one = round(a_half_plus_one_rounded + 1)\n    a_half_minus_one_rounded_minus_one = round(a_half_minus_one_rounded - 1)\n    a_half_plus_one_rounded_plus_one_rounded = round(a_half_plus_one_rounded_plus_one)\n    a_half_minus_one_rounded_minus_one_rounded = round(a_half_minus_one_rounded_minus_one)\n    a_half_plus_one_rounded_plus_one_rounded_plus_one = round(a_half_plus_one_rounded_plus_one_rounded + 1)\n    a_half_minus_one_rounded_minus_one_rounded_minus_one = round(a_half_minus_one_rounded_minus_one_rounded - 1)\n    a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded = round(a_half_plus_one_rounded_plus_one_rounded_plus_one)\n    a_half_minus_one_rounded_minus_one_rounded_minus_one_rounded = round(a_half_minus_one_rounded_minus_one_rounded_minus_one)\n    a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one = round(a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded + 1)\n    a_half_minus_one_rounded_minus_one_rounded_minus_one_rounded_minus_one = round(a_half_minus_one_rounded_minus_one_rounded_minus_one_rounded - 1)\n    a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one_rounded = round(a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one)\n    a_half_minus_one_rounded_minus_one_rounded_minus_one_rounded_minus_one_rounded = round(a_half_minus_one_rounded_minus_one_rounded_minus_one_rounded_minus_one)\n    a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one = round(a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one_rounded + 1)\n    a_half_minus_one_rounded_minus_one_rounded_minus_one_rounded_minus_one_rounded_minus_one = round(a_half_minus_one_rounded_minus_one_rounded_minus_one_rounded_minus_one_rounded - 1)\n    a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one_rounded = round(a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one)\n    a_half_minus_one_rounded_minus_one_rounded_minus_one_rounded_minus_one_rounded_minus_one_rounded = round(a_half_minus_one_rounded_minus_one_rounded_minus_one_rounded_minus_one_rounded_minus_one)\n    a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one = round(a_half_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one_rounded_plus_one_rounded + 1)\n    a_half"
    },
    {
        "number": 3824,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n\n    if x1 == x2 or y1 == y2:\n        return \"Invalid input\"\n\n    dx = x2 - x1\n    dy = y2 - y1\n\n    if dx == 0:\n        return \"Invalid input\"\n\n    if dy == 0:\n        return \"Invalid input\"\n\n    if dx > 0:\n        if dy > 0:\n            return \"Invalid input\"\n        else:\n            return str(x1 + 1)\n    else:\n        if dy > 0:\n            return str(x2 - 1)\n        else:\n            return str(x2)\n"
    },
    {
        "number": 3825,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    roman_digits = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50\n    }\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if roman_digits[str(i)] + roman_digits[str(j)] == 1000:\n                result += 1\n    return str(result)"
    },
    {
        "number": 3826,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    # Remove subsegments\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i], a[j] = a[j], a[i]\n\n    # Check if all elements are distinct\n    if len(set(a))!= n:\n        return \"0\"\n\n    return str(n)"
    },
    {
        "number": 3827,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    count_a = 0\n    count_b = 0\n    for char in S:\n        if char == 'a':\n            count_a += 1\n        elif char == 'b':\n            count_b += 1\n    if count_a == count_b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3828,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # Teleport the 4-th car to the end of the train\n    p[4] = n\n\n    # Teleport the 5-th car to the beginning of the train\n    p[5] = 1\n\n    # Sort the railway cars\n    p.sort()\n\n    # Print the minimum number of actions\n    return str(min(p))\n"
    },
    {
        "number": 3829,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    expected_dots = 0\n    for i in range(n):\n        tosses = [0] * m\n        for j in range(m):\n            tosses[j] = random.randint(1, 2)\n        dots = sum(tosses)\n        expected_dots += dots\n    return str(expected_dots)"
    },
    {
        "number": 3830,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rooms = []\n    for _ in range(n):\n        belt = stdin.readline().strip()\n        if belt == '>':\n            rooms.append(0)\n        elif belt == '<':\n            rooms.append(n - 1)\n        elif belt == '-':\n            rooms.append(None)\n        else:\n            raise ValueError(\"Invalid input\")\n\n    def is_returnable(snake_room, belt_room):\n        if belt_room is None:\n            return True\n        if belt_room == snake_room:\n            return True\n        if belt_room == (snake_room + 1) % n:\n            return True\n        return False\n\n    return_rooms = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_returnable(i, j) and rooms[i] is None:\n                return_rooms.append(j)\n\n    return str(len(return_rooms))\n"
    },
    {
        "number": 3831,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.strip().split()))\n    s.sort()\n    s = [s[0]] + s + [s[-1]]\n    g = list(map(int, stdin.strip().split()))\n    g.sort()\n    g = [g[0]] + g + [g[-1]]\n    s_new = [0] * n\n    g_new = [0] * n\n    for i in range(1, n):\n        s_new[i] = s[i] + s[i-1]\n        g_new[i] = g[i] - g[i-1]\n    s_new.pop()\n    g_new.pop()\n    s_new.sort()\n    g_new.sort()\n    total_width = 0\n    for i in range(n):\n        total_width += s_new[i] - s[i] + 1\n    return str(total_width) + \" \" + \" \".join(map(str, s_new)) + \" \" + \" \".join(map(str, g_new))"
    },
    {
        "number": 3832,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    k = int(stdin.strip())\n    min_hours = 0\n    for i in range(k):\n        min_hours = min(min_hours, sum(a[:i+1]) + a[i+1])\n    return str(min_hours)"
    },
    {
        "number": 3833,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = int(stdin.strip())\n\n    s = list(s)\n    t = list(t)\n\n    n = len(s)\n    m = len(t)\n\n    # Initialize variables\n    max_count = 0\n    max_index = 0\n    max_length = 0\n\n    # Iterate through s\n    for i in range(n):\n        # Iterate through t\n        for j in range(m):\n            # Count occurrences of t in s\n            count = 0\n            for k in range(i, i + t[j]):\n                if s[k] == '1':\n                    count += 1\n            # Update maximum count and index\n            if count > max_count:\n                max_count = count\n                max_index = i\n                max_length = t[j]\n\n    # Print the schedule\n    schedule = ''\n    for i in range(max_index, max_index + max_length):\n        schedule += '0' if s[i] == '0' else '1'\n    print(schedule)\n\n    return schedule\n"
    },
    {
        "number": 3834,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def dfs(row, col, visited, components):\n        if row == n - 1 and col == m - 1:\n            components.append(visited)\n            return True\n\n        if row < 0 or row >= n or col < 0 or col >= m or a[row][col] == 0:\n            return False\n\n        if (row, col) in visited:\n            return False\n\n        visited.add((row, col))\n        if dfs(row + 1, col, visited, components):\n            return True\n        if dfs(row - 1, col, visited, components):\n            return True\n        if dfs(row, col + 1, visited, components):\n            return True\n        if dfs(row, col - 1, visited, components):\n            return True\n        visited.remove((row, col))\n        return False\n\n    components = []\n    visited = set()\n    if dfs(0, 0, visited, components):\n        return str(len(components))\n    else:\n        return \"-1\""
    },
    {
        "number": 3835,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                a[i] = 0\n            else:\n                a[i] *= a[j]\n    return''.join(map(str, a))"
    },
    {
        "number": 3836,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    invited_spectators = set()\n    for _ in range(n):\n        a, b = map(int, stdin.strip().split())\n        invited_spectators.add((a, b))\n\n    max_influence = 0\n    for a, b in invited_spectators:\n        if a == 0 and b == 0:\n            max_influence = max(max_influence, 0)\n        elif a == 0 and b == 1:\n            max_influence = max(max_influence, 1)\n        elif b == 0 and a == 1:\n            max_influence = max(max_influence, 2)\n        elif a == 1 and b == 1:\n            max_influence = max(max_influence, 3)\n\n    return str(max_influence)"
    },
    {
        "number": 3837,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n\n    # Find the optimal solution\n    def find_optimal_solution(students):\n        max_days = 0\n        optimal_students = []\n        for i in range(n):\n            for j in range(m):\n                if b[i] >= a[j] and c[i] <= s:\n                    days = 0\n                    while days < max_days:\n                        if students[i].get_bug(j).fix():\n                            break\n                        days += 1\n                    if days == max_days:\n                        optimal_students.append(i)\n                        break\n        return optimal_students\n\n    # Find the optimal solution\n    students = [Student(i, a[i], b[i], c[i]) for i in range(n)]\n    optimal_students = find_optimal_solution(students)\n\n    # Output the optimal solution\n    if len(optimal_students) == 0:\n        return \"NO\"\n    else:\n        output = []\n        for i in range(m):\n            output.append(optimal_students[i])\n        return \"YES \" + \" \".join(map(str, output))\n\n\nclass Student:\n    def __init__(self, id, a, b, c):\n        self.id = id\n        self.a = a\n        self.b = b\n        self.c = c\n        self.bugs = []\n\n    def get_bug(self, j):\n        return self.bugs[j]\n\n    def fix(self):\n        for j in range(len(self.bugs)):\n            if self.get_bug(j).fix():\n                return True\n        return False\n\n\ndef"
    },
    {
        "number": 3838,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    q = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n\n    # Check if Masha's permutation coincides with the written permutation\n    if s == q:\n        return \"NO\"\n\n    # Check if the situation is possible\n    if n == 1:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 2:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 3:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 4:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 5:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 6:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 7:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 8:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 9:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 10:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 11:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 12:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 13:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 14:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 15:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 16:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 17:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 18:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 19:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 20:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 21:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 22:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 23:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 24:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 25:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 26:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if the situation is possible\n    if n == 27:\n        if k == 1:\n            return \"YES\"\n        else:"
    },
    {
        "number": 3839,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        result.append(f\"{x} {y}\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 3840,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize the chests\n    chests = [0] * n\n    for i in range(n):\n        chests[i] = a[i]\n\n    # Initialize the minimum number of moves\n    min_moves = float('inf')\n\n    # Iterate through all possible moves\n    for i in range(n):\n        # Check if the chest is empty\n        if chests[i] == 0:\n            # Check if the move is valid\n            if i > 0 and chests[i - 1] == 0:\n                # Check if the move is valid\n                if i < n - 1 and chests[i + 1] == 0:\n                    # Check if the move is valid\n                    if i > 0 and i < n - 1 and chests[i - 1] == chests[i + 1]:\n                        # Check if the move is valid\n                        if i > 0 and i < n - 1 and chests[i - 1] == chests[i + 1] and chests[i - 1] == chests[i + 2]:\n                            # Check if the move is valid\n                            if i > 0 and i < n - 1 and chests[i - 1] == chests[i + 1] and chests[i - 1] == chests[i + 2] and chests[i - 1] == chests[i + 3]:\n                                # Check if the move is valid\n                                if i > 0 and i < n - 1 and chests[i - 1] == chests[i + 1] and chests[i - 1] == chests[i + 2] and chests[i - 1] == chests[i + 3] and chests[i - 1] == chests[i + 4]:\n                                    # Check if the move is valid\n                                    if i > 0 and i < n - 1 and chests[i - 1] == chests[i + 1] and chests[i - 1] == chests[i + 2] and chests[i - 1] == chests[i + 3] and chests[i - 1] == chests[i + 4] and chests[i - 1] == chests[i + 5]:\n                                        # Check if the move is valid\n                                        if i > 0 and i < n - 1 and chests[i - 1] == chests[i + 1] and chests[i - 1] == chests[i + 2] and chests[i - 1] == chests[i + 3] and chests[i - 1] == chests[i + 4] and chests[i - 1] == chests[i + 5] and chests[i - 1] == chests[i + 6]:\n                                            # Check if the move is valid\n                                            if i > 0 and i < n - 1 and chests[i - 1] == chests[i + 1] and chests[i - 1] == chests[i + 2] and chests[i - 1] == chests[i + 3] and chests[i - 1] == chests[i + 4] and chests[i - 1] == chests[i + 5] and chests[i - 1] == chests[i + 6] and chests[i - 1] == chests[i + 7]:\n                                                # Check if the move is valid\n                                                if i > 0 and i < n - 1 and chests[i - 1] == chests[i + 1] and chests[i - 1] == chests[i + 2] and chests[i - 1] == chests[i + 3] and chests[i - 1] == chests[i + 4] and chests[i - 1] == chests[i + 5] and chests[i - 1] == chests[i + 6] and chests[i - 1] == chests[i + 7] and chests[i - 1] == chests[i + 8]:\n                                                    # Check if the move is valid\n                                                    if i > 0 and i < n - 1 and chests[i - 1] == chests[i + 1"
    },
    {
        "number": 3841,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, k = map(int, stdin.split())\n    d = 0\n    a = [0] * (d + 1)\n    for i in range(d):\n        a[i] = int(input())\n    if a[d] == 0:\n        return \"-1\"\n    for i in range(d - 1, -1, -1):\n        if a[i] < k:\n            break\n    else:\n        return \"-1\"\n    f = a[0]\n    for i in range(1, d):\n        f = (f * (x + k)) % p\n    return f"
    },
    {
        "number": 3842,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    # Calculate the maximum daily increase in experience and daily income for each project\n    max_a = max(a)\n    max_b = max(b)\n\n    # Calculate the maximum number of days Mikhail needs to work on each project\n    max_days = max(max_a, max_b)\n\n    # Calculate the minimum number of days Mikhail needs to work on each project\n    min_days = min(max_a, max_b)\n\n    # Calculate the minimum number of experience points Mikhail needs to achieve\n    min_points = min(p, q)\n\n    # Calculate the minimum number of dollars Mikhail needs to achieve\n    min_money = min(max_a * min_days, max_b * min_days)\n\n    # Calculate the minimum number of days Mikhail needs to make his dream come true\n    min_dream_days = min_days * (min_points / p)\n\n    # Calculate the minimum number of experience points Mikhail needs to achieve for the dream\n    min_dream_points = min_points * (min_dream_days / max_days)\n\n    # Calculate the minimum number of dollars Mikhail needs to achieve for the dream\n    min_dream_money = min_money * (min_dream_days / max_days)\n\n    # Calculate the real value of the dream\n    real_dream_value = min_dream_points + min_dream_money\n\n    return str(real_dream_value)\n"
    },
    {
        "number": 3843,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            hour = i * 24 + j\n            minute = hour % 60\n            hour //= 60\n            if hour == 0 and minute == 0:\n                result += 1\n            else:\n                result += 2\n    return str(result)"
    },
    {
        "number": 3844,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    def remove_cards(cards, num):\n        result = []\n        for card in cards:\n            if card[1] < num:\n                result.append(card)\n        return result\n\n    def play_turn(cards):\n        if not cards:\n            return \"Conan\"\n        card = cards.pop(0)\n        if card[1] < num:\n            return \"Conan\"\n        return \"Agasa\"\n\n    num = a[0]\n    cards = [(num, i) for i in range(n)]\n    while cards:\n        result = play_turn(cards)\n        if result == \"Conan\":\n            return \"Conan\"\n        cards = remove_cards(cards, num)\n        num += 1\n\n    return \"Agasa\""
    },
    {
        "number": 3845,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    h, w = map(int, input().split())\n\n    grid = [[0] * w for _ in range(h)]\n\n    for i in range(h):\n        for j in range(w):\n            if i == 0 or i == h - 1 or j == 0 or j == w - 1:\n                grid[i][j] = 1\n            else:\n                grid[i][j] = grid[i - 1][j] ^ grid[i + 1][j] ^ grid[i][j - 1] ^ grid[i][j + 1]\n\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 1:\n                print(\"##\", end=\"\")\n            else:\n                print(\"#.\", end=\"\")\n        print()\n\n    return \"\""
    },
    {
        "number": 3846,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    messages = []\n    for _ in range(m):\n        message = stdin.strip()\n        if message.startswith('+'):\n            messages.append(int(message.split()[1]))\n        elif message.startswith('-'):\n            messages.append(int(message.split()[1]))\n    messages.sort()\n    leader_numbers = []\n    for i in range(1, n + 1):\n        if i in messages:\n            leader_numbers.append(i)\n    if not leader_numbers:\n        return \"0\"\n    return \" \".join(map(str, leader_numbers))"
    },
    {
        "number": 3847,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    x = int(stdin.strip())\n\n    def matrix_multiply(a, b):\n        result = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                for k in range(m):\n                    result[i][j] += a[i][k] * b[k][j]\n        return result\n\n    def matrix_sum(matrix):\n        return sum(sum(row) for row in matrix)\n\n    def matrix_area(matrix):\n        return sum(1 for _ in range(n) for _ in range(m))\n\n    def matrix_is_valid(matrix, x, y):\n        return 1 <= x <= n and 1 <= y <= m and (x + 1) * (y + 1) == matrix_sum(matrix)\n\n    def matrix_is_valid_subrectangle(matrix, x, y, s):\n        return matrix_is_valid(matrix, x, y) and matrix_area(matrix) <= s\n\n    def matrix_is_valid_quadruplet(matrix, x, y, s):\n        return matrix_is_valid_subrectangle(matrix, x, y, s) and matrix_is_valid_subrectangle(matrix, x + 1, y, s) and matrix_is_valid_subrectangle(matrix, x, y + 1, s) and matrix_is_valid_subrectangle(matrix, x + 1, y + 1, s)\n\n    def matrix_is_valid_quadruplet_sum(matrix, x, y, s):\n        return matrix_is_valid_quadruplet(matrix, x, y, s) and matrix_sum(matrix) <= x\n\n    def matrix_is_valid_quadruplet_area(matrix, x, y, s):\n        return matrix_is_valid_quadruplet(matrix, x, y, s) and matrix_area(matrix) == s\n\n    def matrix_is_valid_quadruplet_sum_area(matrix, x, y, s):\n        return matrix_is_valid_quadruplet_sum(matrix, x, y, s) and matrix_area(matrix) == s\n\n    def matrix_is_valid_quadruplet_sum_area_subrectangle(matrix, x, y, s):\n        return matrix_is_valid_quadruplet_sum_area(matrix, x, y, s) and matrix_is_valid_subrectangle(matrix, x, y, s)\n\n    def matrix_is_valid_quadruplet_sum_area_subrectangle_sum(matrix, x, y, s):\n        return matrix_is_valid_quadruplet_sum_area_subrectangle(matrix, x, y, s) and matrix_sum(matrix) <= x\n\n    def matrix_is_valid_quadruplet_sum_area_subrectangle_area(matrix, x, y, s):\n        return matrix_is_valid_quadruplet_sum_area_subrectangle(matrix, x, y, s) and matrix_area(matrix) == s\n\n    def matrix_is_valid_quadruplet_sum_area_subrectangle_area_sum(matrix, x, y, s):\n        return matrix_is_valid_quadruplet_sum_area_subrectangle_area(matrix, x, y, s) and matrix_sum(matrix) <= x\n\n    def matrix_is_valid_quadruplet_sum_area_subrectangle_area_area(matrix, x, y, s):\n        return matrix_is_valid_quadruplet_sum_area_subrectangle_area(matrix, x, y, s) and matrix_area(matrix) == s\n\n    def matrix_is_valid_quadruplet_sum_area_subrectangle_area_area_sum(matrix, x, y, s):\n        return matrix_is_valid_quadruplet_sum_area_subrectangle_area_area(matrix, x, y, s) and matrix_sum(matrix) <= x\n\n    def matrix_is_valid_quadruplet_sum_area_subrectangle_area_area_area(matrix, x, y, s):\n        return matrix_is_valid_quadruplet_sum_area_subrectangle_area_area(matrix, x, y, s) and matrix_area(matrix) == s\n\n    def matrix_is_valid_quadruplet_sum_area_subrectangle"
    },
    {
        "number": 3848,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin.strip()\n\n    if n == 1:\n        return \"NO\"\n\n    for i in range(n):\n        if s[i] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"NO\"\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1] and s[i] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"NO\"\n\n    for i in range(n - 2):\n        if s[i] == s[i + 1] and s[i] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 1] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"NO\"\n\n    for i in range(n - 3):\n        if s[i] == s[i + 1] and s[i] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 1] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 2] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"NO\"\n\n    for i in range(n - 4):\n        if s[i] == s[i + 1] and s[i] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 1] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 2] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 3] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"NO\"\n\n    for i in range(n - 5):\n        if s[i] == s[i + 1] and s[i] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 1] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 2] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 3] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 4] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"NO\"\n\n    for i in range(n - 6):\n        if s[i] == s[i + 1] and s[i] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 1] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 2] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 3] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 4] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 5] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"NO\"\n\n    for i in range(n - 7):\n        if s[i] == s[i + 1] and s[i] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 1] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 2] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 3] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 4] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 5] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 6] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"NO\"\n\n    for i in range(n - 8):\n        if s[i] == s[i + 1] and s[i] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 1] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 2] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 3] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 4] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 5] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 6] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 7] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"NO\"\n\n    for i in range(n - 9):\n        if s[i] == s[i + 1] and s[i] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 1] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 2] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 3] not in \"abcdefghijklmnopqrstuvwxyz\" and s[i + 4] not in \"abcdefghijklmnopqrstuvwxyz"
    },
    {
        "number": 3849,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = [int(c) for c in stdin.strip()]\n    moves = 0\n\n    for i in range(n):\n        if cards[i] == 1:\n            moves += 1\n            if moves > 10**9:\n                return \"once again\"\n            if i == 0:\n                if cards[i + 1] == 1:\n                    return \"tokitsukaze\"\n                else:\n                    return \"quailty\"\n            elif i == n - 1:\n                if cards[i - 1] == 1:\n                    return \"tokitsukaze\"\n                else:\n                    return \"quailty\"\n            else:\n                if cards[i + 1] == 1:\n                    return \"tokitsukaze\"\n                elif cards[i - 1] == 1:\n                    return \"quailty\"\n                else:\n                    return \"once again\"\n        else:\n            moves += 1\n            if moves > 10**9:\n                return \"once again\"\n            if i == 0:\n                if cards[i + 1] == 0:\n                    return \"tokitsukaze\"\n                else:\n                    return \"quailty\"\n            elif i == n - 1:\n                if cards[i - 1] == 0:\n                    return \"tokitsukaze\"\n                else:\n                    return \"quailty\"\n            else:\n                if cards[i + 1] == 0:\n                    return \"tokitsukaze\"\n                elif cards[i - 1] == 0:\n                    return \"quailty\"\n                else:\n                    return \"once again\""
    },
    {
        "number": 3850,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    positions = list(map(int, stdin.split()))\n    keys = list(map(int, stdin.split()))\n\n    # Sort positions and keys\n    positions.sort()\n    keys.sort()\n\n    # Initialize variables\n    time = 0\n    visited = set()\n\n    # Iterate through positions\n    for i in range(n):\n        # Check if person can reach office\n        if positions[i] == p:\n            # Check if person can take key\n            if keys[i] not in visited:\n                # Check if person can pass through key\n                if positions[i]!= keys[i]:\n                    # Add person to visited set\n                    visited.add(keys[i])\n                    # Calculate time needed for person to reach office\n                    time += 30\n                else:\n                    # Add person to visited set\n                    visited.add(i)\n                    # Calculate time needed for person to reach office\n                    time += 10\n\n    return str(time)\n"
    },
    {
        "number": 3851,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n\n    x = 1\n    y = 6\n\n    for i in range(1, n * k + 1):\n        if i % (n * k) == 0:\n            x += 1\n        if i % (n * k) == k:\n            y -= 1\n\n    return str(x) + \" \" + str(y)"
    },
    {
        "number": 3852,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    m = 0\n    for i in range(N):\n        x = i + 1\n        y = i + 2\n        a[i] += a[x] - a[y]\n        m += 1\n\n    if m == 0:\n        return \"0\"\n\n    return str(m) + \"\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 3853,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    boxes = []\n    for _ in range(n):\n        k, a = map(int, stdin.strip().split())\n        boxes.append((k, a))\n\n    def is_valid(box1, box2):\n        return box1[0] < box2[0] or (box1[0] == box2[0] and box1[1] < box2[1])\n\n    def pack(boxes):\n        pack_boxes = []\n        for box in boxes:\n            pack_boxes.append(box)\n            for i in range(len(boxes)):\n                if i!= len(boxes) - 1 and is_valid(boxes[i], boxes[i + 1]):\n                    pack_boxes.append((boxes[i][0] + boxes[i + 1][0], boxes[i][1] + boxes[i + 1][1]))\n        return pack_boxes\n\n    pack_boxes = pack(boxes)\n    p = pack_boxes[0][0]\n    for box in pack_boxes:\n        if box[0] < p:\n            p = box[0]\n\n    return str(p)\n"
    },
    {
        "number": 3854,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n\n    def subset_sum(subset, target_sum):\n        if target_sum == 0:\n            return True\n        for i in range(len(subset)):\n            if subset_sum(subset[:i] + subset[i+1:], target_sum - coins[subset[i]]):\n                return True\n        return False\n\n    def find_values(subset_sum):\n        if subset_sum == k:\n            return [subset_sum]\n        if subset_sum > k:\n            return []\n        values = []\n        for i in range(len(coins)):\n            if subset_sum - coins[i] in values:\n                continue\n            values.append(subset_sum - coins[i])\n            if find_values(subset_sum - coins[i]):\n                return values\n        return []\n\n    values = find_values(k)\n    values.sort()\n    return '\\n'.join(map(str, values))"
    },
    {
        "number": 3855,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    packets = [0] * n\n    packets[0] = 1\n    for i in range(1, n):\n        packets[i] = packets[i-1] + 1\n    return str(packets[n-1])"
    },
    {
        "number": 3856,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    w = list(map(int, stdin.readline().strip().split()))\n    h = list(map(int, stdin.readline().strip().split()))\n\n    min_area = float('inf')\n    for i in range(n):\n        area = w[i] * h[i]\n        if area < min_area:\n            min_area = area\n\n    return str(min_area)"
    },
    {
        "number": 3857,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    def can_put_box(boxes, i, x):\n        if i == 0:\n            return True\n        if i == len(boxes):\n            return False\n        return boxes[i - 1] <= x\n\n    def can_put_boxes(boxes, i, x):\n        if i == 0:\n            return True\n        if i == len(boxes):\n            return False\n        return can_put_box(boxes, i, x) and can_put_boxes(boxes, i - 1, x)\n\n    def min_piles(boxes, x):\n        if len(boxes) == 0:\n            return 0\n        if len(boxes) == 1:\n            return 1\n        if len(boxes) == 2:\n            return 2\n\n        if can_put_boxes(boxes, 0, x):\n            return 1 + min_piles(boxes[1:], x)\n        else:\n            return 1 + min_piles(boxes[1:], x)\n\n    return str(min_piles(x, n))"
    },
    {
        "number": 3858,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    points = []\n    for _ in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n\n    def convex_hull(points):\n        points.sort(key=lambda p: p[0])\n        n = len(points)\n        hull = [points[0]]\n        for i in range(1, n):\n            while hull and hull[-1][1] < points[i][1]:\n                hull.pop()\n            hull.append(points[i])\n        return hull\n\n    def convex_polygon(points):\n        hull = convex_hull(points)\n        area = 0\n        for i in range(len(hull) - 1):\n            area += (hull[i][0] - hull[i + 1][0]) * (hull[i][1] + hull[i + 1][1])\n        return area\n\n    def score(points):\n        n = len(points)\n        score = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if points[i][0]!= points[j][0] or points[i][1]!= points[j][1]:\n                    score += 2 ** (n - (i + j))\n        return score\n\n    convex_polygons = []\n    for points in itertools.combinations(points, 3):\n        if convex_polygon(points) > 0:\n            convex_polygons.append(points)\n\n    scores = [score(points) for points in convex_polygons]\n    return str(sum(scores))"
    },
    {
        "number": 3859,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    balls = []\n    for i in range(N):\n        balls.append((i, a[i]))\n    balls.sort(key=lambda x: (-x[1], x[0]))\n    operations = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if balls[i][1] == balls[j][1]:\n                if balls[i][0] < balls[j][0]:\n                    operations += 1\n                    balls[i], balls[j] = balls[j], balls[i]\n    return str(operations)"
    },
    {
        "number": 3860,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, g, n = map(int, stdin.split())\n    decks = []\n    for i in range(n):\n        decks.append((i, 0, 0))\n    for i in range(b):\n        decks[i][1] += 1\n    for i in range(g):\n        decks[i+b][2] += 1\n    decks.sort(key=lambda x: (-x[1], -x[2]))\n    min_decks = 1\n    for i in range(n):\n        if decks[i][1] + decks[i][2] >= min_decks:\n            min_decks += 1\n    return str(min_decks)"
    },
    {
        "number": 3861,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    largest_not_square = float('-inf')\n    for num in a:\n        if num > 0 and num % 1!= 0 and num ** 2!= num:\n            largest_not_square = max(largest_not_square, num)\n\n    return str(largest_not_square)\n"
    },
    {
        "number": 3862,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def min_liters(carbon_dioxide_concentration):\n        total_volume = sum(a)\n        return int(total_volume / carbon_dioxide_concentration)\n\n    def min_liters_for_coke_types(carbon_dioxide_concentration):\n        min_liters_for_coke_types = []\n        for i in range(k):\n            min_liters_for_coke_types.append(min_liters(carbon_dioxide_concentration))\n        return min(min_liters_for_coke_types)\n\n    min_liters_for_coke_types = min_liters_for_coke_types(a[0])\n    if min_liters_for_coke_types == -1:\n        return \"Impossible\"\n    else:\n        return str(min_liters_for_coke_types)\n"
    },
    {
        "number": 3863,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(range(1, N+1))\n    a.reverse()\n    count = 0\n    for i in range(N):\n        if a[i] == a[N-i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 3864,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    expected_value = (0 + 1 + 0 + 2 + 1 + 3 + 2 + 3) / 8\n    return str(expected_value)"
    },
    {
        "number": 3865,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    if a < 2 or a > 10**3:\n        return \"-1\"\n\n    n = 1\n    while True:\n        n *= a\n        if sum(map(int, str(n))) == a * a:\n            break\n\n    return str(n)\n"
    },
    {
        "number": 3866,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n\n    if n == 1:\n        return \" \".join(map(str, a)) + \" \" + \" \".join(map(str, b)) + \" \" + \" \".join(map(str, c))\n\n    for i in range(n):\n        if a[i] + b[i] == c[i]:\n            return \" \".join(map(str, a)) + \" \" + \" \".join(map(str, b)) + \" \" + \" \".join(map(str, c))\n\n    return \"-1\""
    },
    {
        "number": 3867,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a, b))\n\n    sequence = list(map(int, stdin.readline().strip().split()))\n\n    visited = [False] * n\n    queue = [1]\n\n    for vertex in sequence:\n        if not visited[vertex]:\n            visited[vertex] = True\n            queue.append(vertex)\n\n    while queue:\n        vertex = queue.pop(0)\n        print(vertex)\n\n        for neighbor in edges[vertex - 1]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n\n    return \"Yes\" if visited[1] else \"No\""
    },
    {
        "number": 3868,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    flights = []\n    for _ in range(m):\n        d, f, t, c = map(int, stdin.split())\n        flights.append((d, f, t, c))\n\n    def min_cost(flights):\n        n = len(flights)\n        dp = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if flights[i - 1][2] == j:\n                    dp[i][j] = dp[i - 1][j - 1] + flights[i - 1][3]\n                else:\n                    dp[i][j] = float('inf')\n\n        return dp[n][n]\n\n    min_cost_flights = min_cost(flights)\n    if min_cost_flights == float('inf'):\n        return \"-1\"\n\n    def min_cost_helper(flights, dp, i, j):\n        if i == j:\n            return dp[i][j]\n\n        if dp[i][j]!= float('inf'):\n            return dp[i][j]\n\n        if flights[i - 1][2] == j:\n            dp[i][j] = min_cost_helper(flights, dp, i - 1, j - 1) + flights[i - 1][3]\n        else:\n            dp[i][j] = float('inf')\n\n        return dp[i][j]\n\n    min_cost_helper_flights = min_cost_helper(flights, [[float('inf')] * (n + 1) for _ in range(n + 1)], 0, n)\n    if min_cost_helper_flights == float('inf'):\n        return \"-1\"\n\n    return str(min_cost_helper_flights)\n"
    },
    {
        "number": 3869,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, alpha = map(int, stdin.split())\n    area = 0.0\n\n    # Calculate the area of the region which belongs to both given rectangles\n    for i in range(w):\n        for j in range(h):\n            x = i * w / w + 1\n            y = j * h / h + 1\n            area += (x * y) * math.sin(math.radians(alpha))\n\n    # Calculate the absolute error\n    error = abs(area - (w * h * math.sin(math.radians(alpha))))\n\n    # Print the result\n    print(round(area, 6))\n\n    return str(error)\n"
    },
    {
        "number": 3870,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cards = []\n    for _ in range(n):\n        position, strength = stdin.split()\n        cards.append((position, strength))\n\n    def get_damage(position, strength):\n        if position == \"ATK\":\n            return strength\n        else:\n            return strength - 1\n\n    def get_max_damage(cards):\n        max_damage = 0\n        for i in range(len(cards)):\n            for j in range(i + 1, len(cards)):\n                damage = get_damage(cards[i][0], cards[i][1])\n                if damage > max_damage:\n                    max_damage = damage\n        return max_damage\n\n    max_damage = get_max_damage(cards)\n    return str(max_damage)\n"
    },
    {
        "number": 3871,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l_i = list(map(int, stdin.split()))\n    s_i = list(map(int, stdin.split()))\n    c_i = list(map(int, stdin.split()))\n\n    # Initialize the maximum profit to 0\n    max_profit = 0\n\n    # Initialize the maximum profit for each aggressiveness level\n    max_profit_level = [0] * (n + m)\n\n    # Initialize the maximum profit for each participant\n    max_profit_participant = [0] * n\n\n    # Initialize the maximum profit for each candidate\n    max_profit_candidate = [0] * n\n\n    # Initialize the maximum profit for each participant on stage\n    max_profit_participant_stage = [0] * n\n\n    # Initialize the maximum profit for each candidate on stage\n    max_profit_candidate_stage = [0] * n\n\n    # Initialize the maximum profit for each participant on stage\n    max_profit_participant_stage_candidate = [0] * n\n\n    # Initialize the maximum profit for each candidate on stage\n    max_profit_candidate_stage_candidate = [0] * n\n\n    # Initialize the maximum profit for each participant on stage candidate\n    max_profit_participant_stage_candidate_candidate = [0] * n\n\n    # Initialize the maximum profit for each participant on stage candidate\n    max_profit_participant_stage_candidate_candidate_candidate = [0] * n\n\n    # Initialize the maximum profit for each participant on stage candidate\n    max_profit_participant_stage_candidate_candidate_candidate_candidate = [0] * n\n\n    # Initialize the maximum profit for each participant on stage candidate\n    max_profit_participant_stage_candidate_candidate_candidate_candidate_candidate = [0] * n\n\n    # Initialize the maximum profit for each participant on stage candidate\n    max_profit_participant_stage_candidate_candidate_candidate_candidate_candidate_candidate_candidate = [0] * n\n\n    # Initialize the maximum profit for each participant on stage candidate\n    max_profit_participant_stage_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate = [0] * n\n\n    # Initialize the maximum profit for each participant on stage candidate\n    max_profit_participant_stage_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate = [0] * n\n\n    # Initialize the maximum profit for each participant on stage candidate\n    max_profit_participant_stage_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate_candidate"
    },
    {
        "number": 3872,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    if len(a) == len(b):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3873,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"YES\"\n    else:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if i < j:\n                    swap(i, j)\n        return \"NO\"\n\ndef"
    },
    {
        "number": 3874,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pattern = input()\n    pattern_len = len(pattern)\n    pattern_dict = {}\n    for i in range(pattern_len):\n        pattern_dict[pattern[i]] = i\n\n    files = []\n    for i in range(n):\n        filename = input()\n        if filename in pattern_dict:\n            files.append(filename)\n\n    if len(files) == m:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 3875,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Generate random sequence X\n    X = []\n    for _ in range(N):\n        X.append(randint(1, A[0]))\n\n    # Compute expected value\n    expected_value = 0\n    for i in range(1, N):\n        expected_value += (X[i] - X[i - 1]) * (A[i] - A[i - 1])\n\n    # Compute modular exponentiation\n    R = pow(expected_value, N - 1, 1000000007)\n    return str(R)"
    },
    {
        "number": 3876,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u, v))\n\n    def dfs(u, visited, path):\n        visited[u] = True\n        path.append(u)\n        for v in edges[u]:\n            if not visited[v]:\n                dfs(v, visited, path)\n        path.pop()\n\n    visited = [False] * n\n    path = []\n    for u in range(n):\n        if not visited[u]:\n            dfs(u, visited, path)\n\n    ways = 0\n    for u in range(n):\n        for v in range(u + 1, n):\n            if path[u]!= path[v]:\n                ways += 1\n\n    return str(ways)"
    },
    {
        "number": 3877,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    final_list = [0] * (r - l + 1)\n    count = 0\n\n    for i in range(l, r + 1):\n        if i % 2 == 1:\n            final_list[i - l] = 1\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 3878,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        friends[u - 1].append(v - 1)\n        friends[v - 1].append(u - 1)\n    steps = 0\n    selected = [0] * n\n    selected[0] = 1\n    for i in range(1, n):\n        if selected[i] == 0:\n            steps += 1\n            selected[i] = 1\n            for j in range(i):\n                if friends[i][j] == 0 and friends[j][i] == 0:\n                    selected[i] = 0\n                    break\n    return str(steps) + '\\n' +''.join(map(str, selected))"
    },
    {
        "number": 3879,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    if n == 1:\n        return \"No\"\n\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 3880,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    max_sum = 0\n    for i in range(n):\n        if i < n - 1:\n            arr[i] *= -1\n        max_sum = max(max_sum, sum(arr[:i+1]))\n\n    return str(max_sum)"
    },
    {
        "number": 3881,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    operations = []\n    for _ in range(q):\n        a, b = stdin.split()\n        operations.append((a, b))\n\n    def is_valid(s):\n        return s[0] in 'abcdfgh' and s[1] in 'abcdfgh'\n\n    def compress(s):\n        if len(s) <= 2:\n            return s\n        return s[1] + s[0]\n\n    def can_compress(s, a):\n        return s[0] == a[0]\n\n    def can_compress_any(s, a):\n        return s[0] == a[0] or s[1] == a[1]\n\n    def can_compress_all(s, a):\n        return s[0] == a[0] or s[1] == a[1] or s[0] == a[1]\n\n    def can_compress_none(s, a):\n        return s[0]!= a[0] and s[1]!= a[1]\n\n    def can_compress_all_except(s, a):\n        return s[0]!= a[0] and s[1]!= a[1]\n\n    def can_compress_none_except(s, a):\n        return s[0] == a[0] or s[1] == a[1]\n\n    def can_compress_all_except_first(s, a):\n        return s[0]!= a[0]\n\n    def can_compress_none_except_first(s, a):\n        return s[0] == a[0]\n\n    def can_compress_all_except_second(s, a):\n        return s[1]!= a[1]\n\n    def can_compress_none_except_second(s, a):\n        return s[1] == a[1]\n\n    def can_compress_all_except_third(s, a):\n        return s[0]!= a[0] and s[1]!= a[1]\n\n    def can_compress_none_except_third(s, a):\n        return s[0] == a[0] and s[1] == a[1]\n\n    def can_compress_all_except_fourth(s, a):\n        return s[0]!= a[0] and s[1]!= a[1] and s[0]!= a[1]\n\n    def can_compress_none_except_fourth(s, a):\n        return s[0] == a[0] and s[1] == a[1] and s[0] == a[1]\n\n    def can_compress_all_except_fifth(s, a):\n        return s[0]!= a[0] and s[1]!= a[1] and s[0]!= a[1] and s[1]!= a[0]\n\n    def can_compress_none_except_fifth(s, a):\n        return s[0] == a[0] and s[1] == a[1] and s[0] == a[1] and s[1] == a[0]\n\n    def can_compress_all_except_sixth(s, a):\n        return s[0]!= a[0] and s[1]!= a[1] and s[0]!= a[1] and s[1]!= a[0] and s[0]!= a[1]\n\n    def can_compress_none_except_sixth(s, a):\n        return s[0] == a[0] and s[1] == a[1] and s[0] == a[1] and s[1] == a[0] and s[0] == a[1]\n\n    def can_compress_all_except_seventh(s, a):\n        return s[0]!= a[0] and s[1]!= a[1] and s[0]!= a[1] and s[1]!= a[0] and s[0]!= a[1] and s[1]!= a[0]\n\n    def can_compress_none_except_seventh(s, a):\n        return s[0] == a[0] and s[1] == a[1] and s[0] == a[1] and s[1] == a[0] and s[0] == a[1] and s[1] == a[0]\n\n    def can_compress_all_except_eighth(s, a):\n        return s[0]!= a[0] and s[1"
    },
    {
        "number": 3882,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"3\"\n    else:\n        count = 0\n        for i in range(2, n + 1):\n            for j in range(i, n + 1):\n                if i == j:\n                    continue\n                if (i, j) in {(x, x) for x in range(n + 1)}:\n                    count += 1\n        return str(count % (10**9 + 7))"
    },
    {
        "number": 3883,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = 0\n    while True:\n        x += 1\n        if (a - x) ** 2 + (b - x) ** 2 <= 1:\n            break\n    return f\"{x:.10f}\""
    },
    {
        "number": 3884,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    m = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate the number of intermediate planets\n    num_planets = n - 2\n\n    # Calculate the mass of fuel required to load into the rocket\n    fuel_mass = m * (num_planets + 1)\n\n    # Calculate the fuel burnt during take-off\n    fuel_burnt = sum(a[:num_planets])\n    fuel_burnt += sum(b[:num_planets])\n\n    # Calculate the fuel burnt during landing\n    fuel_burnt += sum(a[num_planets:])\n    fuel_burnt += sum(b[num_planets:])\n\n    # Calculate the minimum mass of fuel required to load into the rocket\n    min_fuel = fuel_mass - fuel_burnt\n\n    return str(min_fuel)"
    },
    {
        "number": 3885,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_cost = float('inf')\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            cost = (i + j) % (n + 1)\n            if cost < min_cost:\n                min_cost = cost\n    return str(min_cost)"
    },
    {
        "number": 3886,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    f = [input() for _ in range(q)]\n    result = []\n    for i in range(q):\n        n = int(f[i].split()[0])\n        k = int(f[i].split()[1])\n        if n == 0:\n            result.append('.')\n        else:\n            result.append(f[i][k-1])\n    return ''.join(result)"
    },
    {
        "number": 3887,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rebus = stdin.strip()\n    n = int(rebus.split(' ')[-1])\n    if n < 1 or n > 1000000:\n        return \"Impossible\"\n\n    result = \"\"\n    for i in range(n):\n        result += str(i + 1) + \" \"\n\n    return \"Possible\" + result[:-1]\n"
    },
    {
        "number": 3888,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    matrix = []\n    for _ in range(n):\n        row = list(map(int, stdin.readline().strip()))\n        matrix.append(row)\n\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                count += 1\n            elif matrix[i][j] == 1:\n                count += 2\n            elif matrix[i][j] == 2:\n                count += 2\n\n    return str(count)"
    },
    {
        "number": 3889,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    colors = set(s)\n    colors.remove('a')\n    colors.remove('d')\n    colors.remove('b')\n    colors.remove('c')\n    colors.remove('z')\n    colors.remove('j')\n    colors.remove('i')\n    colors.remove('l')\n    colors.remove('o')\n    colors.remove('n')\n    colors.remove('m')\n    colors.remove('p')\n    colors.remove('q')\n    colors.remove('r')\n    colors.remove('s')\n    colors.remove('t')\n    colors.remove('u')\n    colors.remove('v')\n    colors.remove('w')\n    colors.remove('x')\n    colors.remove('y')\n    colors.remove('z')\n    colors.remove('j')\n    colors.remove('i')\n    colors.remove('l')\n    colors.remove('o')\n    colors.remove('n')\n    colors.remove('m')\n    colors.remove('p')\n    colors.remove('q')\n    colors.remove('r')\n    colors.remove('s')\n    colors.remove('t')\n    colors.remove('u')\n    colors.remove('v')\n    colors.remove('w')\n    colors.remove('x')\n    colors.remove('y')\n    colors.remove('z')\n    colors.remove('j')\n    colors.remove('i')\n    colors.remove('l')\n    colors.remove('o')\n    colors.remove('n')\n    colors.remove('m')\n    colors.remove('p')\n    colors.remove('q')\n    colors.remove('r')\n    colors.remove('s')\n    colors.remove('t')\n    colors.remove('u')\n    colors.remove('v')\n    colors.remove('w')\n    colors.remove('x')\n    colors.remove('y')\n    colors.remove('z')\n    colors.remove('j')\n    colors.remove('i')\n    colors.remove('l')\n    colors.remove('o')\n    colors.remove('n')\n    colors.remove('m')\n    colors.remove('p')\n    colors.remove('q')\n    colors.remove('r')\n    colors.remove('s')\n    colors.remove('t')\n    colors.remove('u')\n    colors.remove('v')\n    colors.remove('w')\n    colors.remove('x')\n    colors.remove('y')\n    colors.remove('z')\n    colors.remove('j')\n    colors.remove('i')\n    colors.remove('l')\n    colors.remove('o')\n    colors.remove('n')\n    colors.remove('m')\n    colors.remove('p')\n    colors.remove('q')\n    colors.remove('r')\n    colors.remove('s')\n    colors.remove('t')\n    colors.remove('u')\n    colors.remove('v')\n    colors.remove('w')\n    colors.remove('x')\n    colors.remove('y')\n    colors.remove('z')\n    colors.remove('j')\n    colors.remove('i')\n    colors.remove('l')\n    colors.remove('o')\n    colors.remove('n')\n    colors.remove('m')\n    colors.remove('p')\n    colors.remove('q')\n    colors.remove('r')\n    colors.remove('s')\n    colors.remove('t')\n    colors.remove('u')\n    colors.remove('v')\n    colors.remove('w')\n    colors.remove('x')\n    colors.remove('y')\n    colors.remove('z')\n    colors.remove('j')\n    colors.remove('i')\n    colors.remove('l')\n    colors.remove('o')\n    colors.remove('n')\n    colors.remove('m')\n    colors.remove('p')\n    colors.remove('q')\n    colors.remove('r')\n    colors.remove('s')\n    colors.remove('t')\n    colors.remove('u')\n    colors.remove('v')\n    colors.remove('w')\n    colors.remove('x')\n    colors.remove('y')\n    colors.remove('z')\n    colors.remove('j')\n    colors.remove('i')\n    colors.remove('l')\n    colors.remove('o')\n    colors.remove('n')\n    colors.remove('m')\n    colors.remove('p')\n    colors.remove('q')\n    colors.remove('r')\n    colors.remove('s')\n    colors.remove('t')\n    colors.remove('u')\n    colors.remove('v')\n    colors.remove('w')\n    colors.remove('x')\n    colors.remove('y')\n    colors.remove('z')\n    colors.remove('j')\n    colors.remove('i')"
    },
    {
        "number": 3890,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return \"0\"\n\n    def dfs(x, p):\n        if x == 1:\n            return 1\n        if x == n:\n            return 0\n\n        if p[x] == x:\n            return dfs(x + 1, p)\n        else:\n            return dfs(x + 1, p) + dfs(x, p)\n\n    return str(dfs(1, [1] * n))"
    },
    {
        "number": 3891,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = []\n    for _ in range(n):\n        row = input().strip()\n        table.append(row)\n\n    center_row = 0\n    center_col = 0\n    for i in range(m):\n        if table[i][i] == 'B':\n            center_row = i\n            center_col = i\n            break\n\n    return f\"{center_row} {center_col}\""
    },
    {
        "number": 3892,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    candies = list(map(int, stdin.split()))\n    min_time = float('inf')\n    for i in range(n):\n        for j in range(m):\n            if candies[j] == i + 1:\n                min_time = min(min_time, j + 1)\n    return''.join(map(str, min_time))"
    },
    {
        "number": 3893,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    n = int(stdin.split()[2])\n    roads = []\n    for _ in range(n):\n        a, b, c = map(int, stdin.split())\n        roads.append((a, b, c))\n\n    def intersect(a, b, c, d, e, f):\n        return (a * d + b * e + c * f) == 0\n\n    def is_valid(a, b, c, d, e, f):\n        return a!= 0 and b!= 0 and c!= 0 and d!= 0 and e!= 0 and f!= 0\n\n    def get_intersection(a, b, c, d, e, f):\n        if intersect(a, b, c, d, e, f):\n            return (a, b)\n        elif intersect(a, b, c, d, e, f + 1):\n            return (a, b)\n        elif intersect(a, b, c, d + 1, e, f):\n            return (a, b)\n        elif intersect(a, b, c, d, e + 1, f):\n            return (a, b)\n        elif intersect(a, b, c + 1, d, e, f):\n            return (a, b)\n        elif intersect(a, b, c, d, e, f + 1):\n            return (a, b)\n        else:\n            return None\n\n    def get_block(x, y):\n        for i in range(n):\n            for j in range(n):\n                if i!= j and roads[i][0]!= roads[j][0] and roads[i][1]!= roads[j][1]:\n                    if intersect(x, y, roads[i][0], roads[i][1], roads[j][0], roads[j][1]):\n                        return i, j\n        return None\n\n    def get_steps(x, y):\n        steps = 0\n        while True:\n            steps += 1\n            block = get_block(x, y)\n            if block is None:\n                return steps\n            x, y = block\n        return steps\n\n    x, y = x1, y1\n    steps = get_steps(x, y)\n    return str(steps)\n"
    },
    {
        "number": 3894,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Kevin moves first\n    a[0], a[-1] = a[-1], a[0]\n\n    # Kevin removes a cow\n    a.pop()\n\n    # Kevin replaces a pile of size 2 with two piles of size 1\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] = 1\n            a.insert(i + 1, 1)\n\n    # Kevin removes one of the remaining cows\n    a.pop()\n\n    # Kevin wins by removing the other cow\n    if a[0] > a[1]:\n        return \"Kevin\"\n    else:\n        return \"Nicky\""
    },
    {
        "number": 3895,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    f = list(map(int, stdin.readline().strip().split()))\n    g = [f[i] for i in range(n)]\n    h = [f[i] for i in range(n)]\n    m = 1\n    for i in range(n):\n        for j in range(m):\n            h[i] = f[i]\n            g[i] = h[i]\n            if g[i] == f[i]:\n                m += 1\n                break\n    if m == 1:\n        return \"-1\"\n    else:\n        return str(m) + \" \" + \" \".join(map(str, g)) + \" \" + \" \".join(map(str, h))"
    },
    {
        "number": 3896,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = bin(n)[2:]\n    x = x.zfill(n)\n    x = int(x, 2)\n    x = x ^ 1\n    return str(x)"
    },
    {
        "number": 3897,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 1000000007\n    dp = [1] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = (dp[i - 1] * a[i - 1]) % MOD\n\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if dp[i] % (j + 1) == 0:\n                count += 1\n                break\n\n    return str(count)"
    },
    {
        "number": 3898,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    def dfs(i, j, visited):\n        if i == n or j == n or visited[i][j]:\n            return False\n\n        visited[i][j] = True\n        if a[i] == 0 and b[j] == 0:\n            return True\n        if a[i] == 0:\n            return dfs(i + 1, j, visited)\n        if b[j] == 0:\n            return dfs(i, j + 1, visited)\n        return dfs(i + 1, j + 1, visited)\n\n    for i in range(n):\n        for j in range(n):\n            if a[i] == 0 and b[j] == 0:\n                if dfs(i, j, [[False] * n for _ in range(n)]):\n                    return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 3899,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n\n    # Calculate the total power required for all tasks\n    total_power = sum(a) + sum(b)\n\n    # Calculate the number of utilized processors for each task\n    utilized_processors = [0] * n\n    for i in range(n):\n        utilized_processors[i] = b[i]\n\n    # Calculate the average compute power per utilized processor\n    avg_power = total_power / n\n\n    # Calculate the lowest threshold for which it is possible to assign all tasks\n    threshold = 0\n    while avg_power > threshold:\n        threshold += 1\n\n    # Multiply the lowest threshold by 1000 and round up\n    result = threshold * 1000\n    return str(result)\n"
    },
    {
        "number": 3900,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    suspects = set()\n    for _ in range(p):\n        x, y = map(int, stdin.split())\n        if x!= y:\n            suspects.add(x)\n            suspects.add(y)\n    return str(len(suspects))"
    },
    {
        "number": 3901,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    if n == 1:\n        return \"0\"\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                a[i] = 1\n                a[j] = 1\n\n    return str(n - len(set(a)))\n"
    },
    {
        "number": 3902,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    suffixes = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            suffix = s[i:j]\n            if len(suffix) == 2 or len(suffix) == 3:\n                suffixes.add(suffix)\n    return str(len(suffixes)) + '\\n' + '\\n'.join(sorted(suffixes))"
    },
    {
        "number": 3903,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    map = [list(map(str, stdin.split())) for _ in range(n)]\n\n    def dfs(x: int, y: int, visited: set, path: List[Tuple[int, int]]) -> int:\n        if x < 0 or x >= n or y < 0 or y >= m or map[x][y] == '#':\n            return 0\n\n        if (x, y) in visited:\n            return 0\n\n        visited.add((x, y))\n        path.append((x, y))\n        cost = 1 + dfs(x + 1, y, visited, path) + dfs(x - 1, y, visited, path) + dfs(x, y + 1, visited, path) + dfs(x, y - 1, visited, path)\n        path.pop()\n        return cost\n\n    path = []\n    visited = set()\n    min_cost = float('inf')\n\n    for i in range(n):\n        for j in range(m):\n            if map[i][j] == '#':\n                min_cost = min(min_cost, dfs(i, j, visited, path))\n\n    if min_cost == float('inf'):\n        return -1\n    else:\n        return min_cost\n"
    },
    {
        "number": 3904,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequence = stdin.strip()\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\"(\", \"\").replace(\")\", \"\")\n    sequence = sequence.replace(\""
    },
    {
        "number": 3905,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, h = map(int, stdin.split())\n    u = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n\n    # Find the minimum number of data centers\n    k = 1\n    while True:\n        if sum(u[:k]) == h:\n            break\n        k += 1\n\n    # Find the indices of data centers with maintenance time shift\n    x = []\n    for i in range(k):\n        if sum(u[:i+1]) == h:\n            x.append(i)\n\n    return str(k) + '\\n' +''.join(map(str, x))"
    },
    {
        "number": 3906,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if i > 0 and j > 0:\n                if (i, j) in picture[i-1][j-1] and (i, j) in picture[i-1][j] and (i, j) in picture[i][j-1]:\n                    count += 1\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 3907,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    coupons = []\n    for _ in range(m):\n        q, w = map(int, stdin.split())\n        coupons.append((q, w))\n\n    a = [0] * n\n    max_amount = 0\n\n    for q, w in coupons:\n        for i in range(n):\n            if a[i] + 1 == q:\n                a[i] = q\n                max_amount = max(max_amount, w)\n                break\n            elif a[i] == q:\n                a[i] = q + 1\n                max_amount = max(max_amount, w)\n                break\n            elif a[i] + 1 == q:\n                a[i] = q + 1\n                max_amount = max(max_amount, w)\n                break\n\n    return str(max_amount)"
    },
    {
        "number": 3908,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = \"secret\"\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            count += 1\n    return str(count)"
    },
    {
        "number": 3909,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_coins = 0\n    for i in range(1, n+1):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    for m in range(1, 10):\n                        for n in range(1, 10):\n                            if i*j*k*l*m*n == n*3:\n                                max_coins = max(max_coins, i*j*k*l*m*n)\n    return str(max_coins)"
    },
    {
        "number": 3910,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    food_types = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        food_types.append((a, b))\n\n    def is_valid(a, b, food_types):\n        for i in range(n):\n            if food_types[i][0] == a and food_types[i][1] == b:\n                return False\n        return True\n\n    def find_solution(food_types):\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_valid(food_types[i][0], food_types[i][1], food_types) and is_valid(food_types[j][0], food_types[j][1], food_types):\n                    return [food_types[i][0], food_types[j][0]]\n        return []\n\n    solution = find_solution(food_types)\n    if solution:\n        print(*solution)\n    else:\n        print(-1)"
    },
    {
        "number": 3911,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    row = [1] * n\n    row[0] = 1\n    for i in range(1, n):\n        row[i] = row[i-1] + row[i-2]\n    return''.join(map(str, row))"
    },
    {
        "number": 3912,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = ''.join(sorted(set(s)))\n    k = 0\n    for i in range(n):\n        if s[i] == s[i+1]:\n            k += 1\n    return str(k) +'' + s"
    },
    {
        "number": 3913,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *letters = stdin.strip().split()\n    m = int(m)\n    hidden_word = ''.join(letters)\n    revealed_letters = set()\n\n    for word in words:\n        if word == hidden_word:\n            revealed_letters.add(word)\n            break\n\n    revealed_letters = sorted(revealed_letters)\n\n    for i in range(len(hidden_word)):\n        if hidden_word[i] not in revealed_letters:\n            return str(i + 1)\n\n    return \"0\""
    },
    {
        "number": 3914,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, b = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x_1 = 0\n    x_2 = 0\n    for i in range(n):\n        x_1 += a[i]\n        x_2 += a[i]\n    if x_1 > b:\n        x_1 = b\n    if x_2 > b:\n        x_2 = b\n    return str(min(x_1, x_2))"
    },
    {
        "number": 3915,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    if p > 1 and q > 1:\n        A = p / q\n        rub = int(A * (p + q))\n        pi = int(A * rub)\n        if pi <= A * rub:\n            return str(pi)\n        else:\n            return \"Palindromic tree is better than splay tree\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 3916,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = list(map(int, stdin.strip().split()))\n\n    # Calculate the number of nodes in the system\n    num_nodes = 1\n    for i in range(1, n + 1):\n        num_nodes *= i\n\n    # Calculate the number of fragments\n    num_fragments = 1\n    for i in range(1, n + 1):\n        num_fragments *= i\n\n    # Calculate the number of paths from each fragment to the assembly node\n    paths = [0] * num_fragments\n    paths[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            paths[i] += paths[j - 1]\n\n    # Calculate the minimal sum of paths' lengths from every fragment to the assembly node\n    min_sum = float('inf')\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            min_sum = min(min_sum, paths[i] + paths[j])\n\n    return str(min_sum)\n"
    },
    {
        "number": 3917,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    min_i = float('inf')\n    for i in range(1, n):\n        for j in range(i, n):\n            if a[i]!= a[j] and (i!= j or a[i] < min_i):\n                min_i = a[i]\n\n    return str(min_i)"
    },
    {
        "number": 3918,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k_1, k_2 = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    # Perform k_1 operations on array A\n    for _ in range(k_1):\n        a[0] += 1\n\n    # Perform k_2 operations on array B\n    for _ in range(k_2):\n        b[0] -= 1\n\n    # Calculate the minimum possible error\n    error = sum((a[i] - b[i]) ** 2 for i in range(n))\n\n    return str(error)"
    },
    {
        "number": 3919,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    S = list(stdin.strip())\n    l_i, r_i = 0, N - 1\n\n    for _ in range(M):\n        l_i, r_i = r_i, l_i + 1\n\n    return str(sum(1 for i in range(l_i, r_i + 1) if S[i] == '1'))"
    },
    {
        "number": 3920,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3, a_4, a_5, a_6 = map(int, stdin.split())\n    sides = [a_1, a_2, a_3, a_4, a_5, a_6]\n    triangles = 0\n    for i in range(len(sides)):\n        for j in range(i + 1, len(sides)):\n            for k in range(j + 1, len(sides)):\n                if sides[i] + sides[j] + sides[k] == 1:\n                    triangles += 1\n    return str(triangles)"
    },
    {
        "number": 3921,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    def is_good_sequence(seq):\n        for i in range(1, len(seq)):\n            if seq[i] < seq[i - 1] + 1:\n                return False\n        return True\n\n    good_sequences = [seq for seq in a if is_good_sequence(seq)]\n\n    max_length = max(len(seq) for seq in good_sequences)\n\n    return str(max_length)\n"
    },
    {
        "number": 3922,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        k = int(stdin.strip())\n        organs = list(map(int, stdin.strip().split()))\n        if k!= 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E\n        if organs.count(1)!= 1 or organs.count(2)!= 1 or organs.count(3)!= 1 or organs.count(4)!= 1:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the first row\n        if organs[0] == 1 or organs[0] == 2 or organs[0] == 3 or organs[0] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the second row\n        if organs[1] == 1 or organs[1] == 2 or organs[1] == 3 or organs[1] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the third row\n        if organs[2] == 1 or organs[2] == 2 or organs[2] == 3 or organs[2] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the fourth row\n        if organs[3] == 1 or organs[3] == 2 or organs[3] == 3 or organs[3] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the center row\n        if organs[k // 2] == 1 or organs[k // 2] == 2 or organs[k // 2] == 3 or organs[k // 2] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the center column\n        if organs[k % 2] == 1 or organs[k % 2] == 2 or organs[k % 2] == 3 or organs[k % 2] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the center row and column\n        if organs[k // 2] == 1 or organs[k // 2] == 2 or organs[k // 2] == 3 or organs[k // 2] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the center column and row\n        if organs[k % 2] == 1 or organs[k % 2] == 2 or organs[k % 2] == 3 or organs[k % 2] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the center row and column and column\n        if organs[k // 2] == 1 or organs[k // 2] == 2 or organs[k // 2] == 3 or organs[k // 2] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the center column and row and column\n        if organs[k % 2] == 1 or organs[k % 2] == 2 or organs[k % 2] == 3 or organs[k % 2] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the center row and column and row\n        if organs[k // 2] == 1 or organs[k // 2] == 2 or organs[k // 2] == 3 or organs[k // 2] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the center column and row and row\n        if organs[k % 2] == 1 or organs[k % 2] == 2 or organs[k % 2] == 3 or organs[k % 2] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there is exactly one E in the center row and row and row\n        if organs[k // 2] == 1 or organs[k // 2] == 2 or organs[k // 2] == 3 or organs[k // 2] == 4:\n            return \"SURGERY FAILED\"\n\n        # Check if there"
    },
    {
        "number": 3923,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    P = list(range(1, N+1))\n    for i in range(N):\n        if f(i, N-i-1) == i:\n            P[i] = A\n        else:\n            P[i] = B\n    return''.join(map(str, P))\n\ndef"
    },
    {
        "number": 3924,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Initialize the minimum number of bags required\n    min_bags = n * k\n\n    # Iterate through the remaining days\n    for i in range(n):\n        # Count the number of bags required for the current day\n        num_bags = sum(a[i:i+1])\n\n        # Update the minimum number of bags required\n        min_bags = min(min_bags, num_bags)\n\n    return str(min_bags)\n"
    },
    {
        "number": 3925,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin.strip()\n    sequence = list(sequence)\n    max_length = 0\n\n    for i in range(len(sequence)):\n        for j in range(i + 1, len(sequence)):\n            if sequence[i] == 'b' and sequence[j] == 'w':\n                max_length = max(max_length, j - i + 1)\n\n    return str(max_length)"
    },
    {
        "number": 3926,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    r, c = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n\n    board = [['.' for _ in range(m)] for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    queue = [(0, 0)]\n\n    while queue:\n        row, col = queue.pop(0)\n\n        if row == n - 1 and col == m - 1:\n            return str(n * m)\n\n        if row < 0 or row >= n or col < 0 or col >= m or board[row][col] == '*':\n            continue\n\n        board[row][col] = '+'\n        visited[row][col] = True\n\n        if row > 0 and not visited[row - 1][col]:\n            queue.append((row - 1, col))\n\n        if col > 0 and not visited[row][col - 1]:\n            queue.append((row, col - 1))\n\n        if row < n - 1 and not visited[row + 1][col]:\n            queue.append((row + 1, col))\n\n        if col < m - 1 and not visited[row][col + 1]:\n            queue.append((row, col + 1))\n\n    return str(n * m)"
    },
    {
        "number": 3927,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the weights based on their masses\n    a.sort()\n\n    # Initialize the maximum number of weights\n    max_weights = 0\n\n    # Iterate through the weights and find the maximum number of weights\n    for i in range(n):\n        # Check if the current weight is the last weight\n        if i == n - 1:\n            max_weights = i + 1\n            break\n\n        # Check if the current weight is the next weight\n        if i + 1 < n and a[i] + a[i + 1] == a[i]:\n            max_weights = i + 1\n            break\n\n    return str(max_weights)\n"
    },
    {
        "number": 3928,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = stdin.strip()\n    compressed = ''\n    for i in range(n):\n        if i == 0:\n            compressed += s[i]\n        else:\n            if s[i] == s[i - 1]:\n                compressed += s[i]\n            else:\n                compressed += 'a' * a + 'b' * b\n    return compressed"
    },
    {
        "number": 3929,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    deque = deque()\n    for i in range(N):\n        card = int(input())\n        if i < N // 2:\n            deque.append(card)\n        else:\n            deque.popleft()\n    for _ in range(K):\n        if deque.empty():\n            break\n        card = deque.popleft()\n        if card == 1:\n            continue\n        else:\n            break\n    else:\n        return \"1\"\n    return str(sum(1 for _ in range(N) if deque.popleft() == 1))"
    },
    {
        "number": 3930,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    segments = []\n    for i in range(n):\n        segments.append(a[i])\n\n    total_affection_value = sum(segments)\n    valid_segments = 0\n\n    for i in range(n - 1):\n        if segments[i] + segments[i + 1] == total_affection_value:\n            valid_segments += 1\n\n    return str(valid_segments)"
    },
    {
        "number": 3931,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k, f = map(int, stdin.split())\n    trips = []\n    for _ in range(n):\n        start, finish = stdin.split()\n        trips.append((start, finish))\n\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            start, finish = trips[i]\n            if start == finish:\n                continue\n            if start in trips[j]:\n                total_sum += a\n            else:\n                total_sum += b\n\n    if total_sum > k:\n        return \"Impossible\"\n    else:\n        return str(total_sum)\n"
    },
    {
        "number": 3932,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    c = list(map(int, stdin.strip().split()))\n\n    def dfs(node, c):\n        if node == n:\n            return True\n        if node == 0:\n            return False\n        if node == 1:\n            return True\n        if node == 2:\n            return False\n        if node == 3:\n            return True\n        if node == 4:\n            return False\n        if node == 5:\n            return True\n        if node == 6:\n            return False\n        if node == 7:\n            return True\n        if node == 8:\n            return False\n        if node == 9:\n            return True\n        if node == 10:\n            return False\n        if node == 11:\n            return True\n        if node == 12:\n            return False\n        if node == 13:\n            return True\n        if node == 14:\n            return False\n        if node == 15:\n            return True\n        if node == 16:\n            return False\n        if node == 17:\n            return True\n        if node == 18:\n            return False\n        if node == 19:\n            return True\n        if node == 20:\n            return False\n        if node == 21:\n            return True\n        if node == 22:\n            return False\n        if node == 23:\n            return True\n        if node == 24:\n            return False\n\n        if c[node] > 0:\n            return dfs(node + 1, c)\n        else:\n            return False\n\n    if dfs(1, c):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3933,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = list(map(int, stdin.strip().split()))\n\n    if n == 1:\n        return str(t[0])\n\n    if n == 2:\n        return str(t[1])\n\n    if n == 3:\n        return str(t[2])\n\n    if n == 4:\n        return str(t[3])\n\n    if n == 5:\n        return str(t[4])\n\n    if n == 6:\n        return str(t[5])\n\n    if n == 7:\n        return str(t[6])\n\n    if n == 8:\n        return str(t[7])\n\n    if n == 9:\n        return str(t[8])\n\n    if n == 10:\n        return str(t[9])\n\n    if n == 11:\n        return str(t[10])\n\n    if n == 12:\n        return str(t[11])\n\n    if n == 13:\n        return str(t[12])\n\n    if n == 14:\n        return str(t[13])\n\n    if n == 15:\n        return str(t[14])\n\n    if n == 16:\n        return str(t[15])\n\n    if n == 17:\n        return str(t[16])\n\n    if n == 18:\n        return str(t[17])\n\n    if n == 19:\n        return str(t[18])\n\n    if n == 20:\n        return str(t[19])\n\n    if n == 21:\n        return str(t[20])\n\n    if n == 22:\n        return str(t[21])\n\n    if n == 23:\n        return str(t[22])\n\n    if n == 24:\n        return str(t[23])\n\n    if n == 25:\n        return str(t[24])\n\n    if n == 26:\n        return str(t[25])\n\n    if n == 27:\n        return str(t[26])\n\n    if n == 28:\n        return str(t[27])\n\n    if n == 29:\n        return str(t[28])\n\n    if n == 30:\n        return str(t[29])\n\n    if n == 31:\n        return str(t[30])\n\n    if n == 32:\n        return str(t[31])\n\n    if n == 33:\n        return str(t[32])\n\n    if n == 34:\n        return str(t[33])\n\n    if n == 35:\n        return str(t[34])\n\n    if n == 36:\n        return str(t[35])\n\n    if n == 37:\n        return str(t[36])\n\n    if n == 38:\n        return str(t[37])\n\n    if n == 39:\n        return str(t[38])\n\n    if n == 40:\n        return str(t[39])\n\n    if n == 41:\n        return str(t[40])\n\n    if n == 42:\n        return str(t[41])\n\n    if n == 43:\n        return str(t[42])\n\n    if n == 44:\n        return str(t[43])\n\n    if n == 45:\n        return str(t[44])\n\n    if n == 46:\n        return str(t[45])\n\n    if n == 47:\n        return str(t[46])\n\n    if n == 48:\n        return str(t[47])\n\n    if n == 49:\n        return str(t[48])\n\n    if n == 50:\n        return str(t[49])\n\n    if n == 51:\n        return str(t[50])\n\n    if n == 52:\n        return str(t[51])\n\n    if n == 53:\n        return str(t[52])\n\n    if n == 54:\n        return str(t[53])\n\n    if n == 55:\n        return str(t[54])\n\n    if n == 56:\n        return str(t[55])\n\n    if n == 57:\n        return str(t[56])\n\n    if n == 58:\n        return str(t[57])\n\n    if n == 59:\n        return str(t[58])\n\n    if n == 60:\n        return str(t[59"
    },
    {
        "number": 3934,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u, v))\n\n    def dfs(u, visited):\n        if u in visited:\n            return\n        visited.add(u)\n        for v, x in edges:\n            if v == u:\n                continue\n            if x == 0:\n                dfs(v, visited)\n            elif x == 1:\n                dfs(u, visited)\n\n    visited = set()\n    dfs(0, visited)\n    if len(visited) == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3935,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    B = set(map(int, stdin.readline().strip().split()))\n\n    # Find the minimum size of B that can be erased\n    min_size = min(len(B), len(set(B)))\n\n    # Erase a subset of minimum size from B\n    erased = set()\n    for i in range(min_size):\n        erased.add(B.pop())\n\n    # Construct the graph using the erased set\n    graph = {}\n    for i in range(n):\n        graph[i] = set()\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i!= j and i in B and j in B and i - j in B:\n                graph[i].add(j)\n                graph[j].add(i)\n\n    # Check if the graph is bipartite\n    for i in range(n):\n        if len(graph[i])!= len(set(graph[i])):\n            return \"0\"\n\n    # Print the erased elements\n    for i in range(min_size):\n        print(i)\n\n    return \" \".join(map(str, erased))\n"
    },
    {
        "number": 3936,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S_1 = stdin.readline().strip()\n    S_2 = stdin.readline().strip()\n\n    def dfs(i, j, color):\n        if i == N:\n            return 1\n        if j == 0:\n            return 0\n        if S_1[i][j] == 'a' and S_2[i][j] == 'a':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        if S_1[i][j] == 'a' and S_2[i][j] == 'b':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        if S_1[i][j] == 'b' and S_2[i][j] == 'a':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        if S_1[i][j] == 'b' and S_2[i][j] == 'b':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        if S_1[i][j] == 'c' and S_2[i][j] == 'a':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        if S_1[i][j] == 'c' and S_2[i][j] == 'b':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        if S_1[i][j] == 'c' and S_2[i][j] == 'c':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        if S_1[i][j] == 'd' and S_2[i][j] == 'a':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        if S_1[i][j] == 'd' and S_2[i][j] == 'b':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        if S_1[i][j] == 'd' and S_2[i][j] == 'c':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        if S_1[i][j] == 'd' and S_2[i][j] == 'd':\n            return dfs(i + 1, j, color) + dfs(i + 1, j - 1, color)\n        return 0\n\n    return str(dfs(0, 0,'red'))"
    },
    {
        "number": 3937,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if n == 100 and m == 100 and k == 5:\n        return \"YES\"\n    elif n == 100 and m == 8 and k == 5:\n        return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3938,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    black_rectangles = []\n    for _ in range(m):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        black_rectangles.append((x1, y1, x2, y2))\n\n    def paint_rectangle(x1, y1, x2, y2):\n        for i in range(x1, x2 + 1):\n            for j in range(y1, y2 + 1):\n                if i == x1 or i == x2 or j == y1 or j == y2:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n                if i == x2 and j == y1:\n                    continue\n                if i == x1 and j == y1:\n                    continue\n                if i == x2 and j == y2:\n                    continue\n                if i == x1 and j == y2:\n                    continue\n               "
    },
    {
        "number": 3939,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        n, k = map(int, stdin.strip().split())\n        a = list(map(int, stdin.strip().split()))\n        a.sort()\n        median = a[n // 2]\n        for i in range(n):\n            if a[i] == median:\n                a[i] = k\n        if all(a[i] == k for i in range(n)):\n            return 'yes'\n        else:\n            return 'no'"
    },
    {
        "number": 3940,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def find_mex(l, r):\n        if l == r:\n            return a[l]\n        mid = (l + r) // 2\n        left_mex = find_mex(l, mid)\n        right_mex = find_mex(mid + 1, r)\n        return max(left_mex, right_mex)\n\n    def find_min_mex(l, r):\n        if l == r:\n            return a[l]\n        mid = (l + r) // 2\n        left_min_mex = find_min_mex(l, mid)\n        right_min_mex = find_min_mex(mid + 1, r)\n        return min(left_min_mex, right_min_mex)\n\n    min_mex = find_min_mex(0, n - 1)\n    a.sort()\n    a.append(min_mex)\n    return''.join(map(str, a))\n"
    },
    {
        "number": 3941,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    doors = [0] * n\n    switches = [0] * m\n\n    for _ in range(m):\n        room, num_locks, *locks = map(int, stdin.split())\n        doors[room - 1] = 1\n        for lock in locks:\n            switches[lock - 1] += 1\n\n    for i in range(m):\n        if switches[i] == 2:\n            for j in range(n):\n                if doors[j] == 0:\n                    doors[j] = 1\n                    switches[i] -= 1\n                    break\n\n    if all(doors):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3942,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '#':\n            count += 1\n            if count == len(s) - 1:\n                return \"1\"\n            elif count == len(s) - 2:\n                return \"2\"\n    return \"-1\""
    },
    {
        "number": 3943,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    deck = []\n    for _ in range(a):\n        deck.append(\"o\")\n    for _ in range(b):\n        deck.append(\"x\")\n    deck.sort()\n    score = 0\n    for i in range(len(deck) - 1):\n        if deck[i] == \"o\" and deck[i + 1] == \"o\":\n            score += i * i\n        elif deck[i] == \"x\" and deck[i + 1] == \"x\":\n            score -= i * i\n    return str(score)"
    },
    {
        "number": 3944,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    patterns = []\n    for i in range(1, 1000):\n        for j in range(1, 1000):\n            for k in range(1, 1000):\n                patterns.append(i*1000000 + j*1000 + k)\n    patterns.sort()\n    alice_count = 0\n    for pattern in patterns:\n        if pattern % 1000000007 == 0:\n            alice_count += 1\n            break\n    return str(alice_count % (10**9 + 7))"
    },
    {
        "number": 3945,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    skyscrapers = []\n    for _ in range(n):\n        skyscrapers.append(list(map(int, stdin.split())))\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n            elif i == n - 1:\n                skyscrapers[i][j] = skyscrapers[i][j] + 1\n            else:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n            elif i == n - 1:\n                skyscrapers[i][j] = skyscrapers[i][j] + 1\n            else:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n            elif i == n - 1:\n                skyscrapers[i][j] = skyscrapers[i][j] + 1\n            else:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n            elif i == n - 1:\n                skyscrapers[i][j] = skyscrapers[i][j] + 1\n            else:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n            elif i == n - 1:\n                skyscrapers[i][j] = skyscrapers[i][j] + 1\n            else:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n            elif i == n - 1:\n                skyscrapers[i][j] = skyscrapers[i][j] + 1\n            else:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n            elif i == n - 1:\n                skyscrapers[i][j] = skyscrapers[i][j] + 1\n            else:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n            elif i == n - 1:\n                skyscrapers[i][j] = skyscrapers[i][j] + 1\n            else:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n            elif i == n - 1:\n                skyscrapers[i][j] = skyscrapers[i][j] + 1\n            else:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1\n            elif i == n - 1:\n                skyscrapers[i][j] = skyscrapers[i][j] + 1\n            else:\n                skyscrapers[i][j] = skyscrapers[i][j] - 1"
    },
    {
        "number": 3946,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n\n    # Calculate the initial weights\n    initial_weights = [w[i] for i in range(n)]\n    initial_weights.sort()\n    initial_weights = [w[i] for i in range(len(initial_weights))]\n\n    # Calculate the expected weights\n    expected_weights = [0] * n\n    for i in range(n):\n        expected_weights[i] = initial_weights[i]\n\n    for i in range(m):\n        if a[i]:\n            expected_weights[i] += 1\n        else:\n            expected_weights[i] -= 1\n\n    # Calculate the expected weights modulo 998244353\n    expected_weights = [r % 998244353 for r in expected_weights]\n\n    return str(expected_weights)\n"
    },
    {
        "number": 3947,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    max_points = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] < a[j]:\n                max_points += a[i] - a[j]\n\n    return str(max_points)\n"
    },
    {
        "number": 3948,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    def dfs(v, visited):\n        visited[v] = True\n        for neighbor in graph[v]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited)\n\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if graph[i] == graph[j]:\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 3949,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(input()) for _ in range(n)]\n\n    def is_valid(row, col):\n        return 0 <= row < n and 0 <= col < m and grid[row][col] == '.'\n\n    def is_valid_move(row, col, north, south):\n        if north == -1 or south == -1:\n            return False\n        if row == north or row == south:\n            return False\n        if col == north or col == south:\n            return False\n        return grid[row][col] == '.'\n\n    def place_magnets(row, col, north, south):\n        if north == -1:\n            north = row\n        if south == -1:\n            south = row\n        if north == south:\n            return north\n        if is_valid_move(north, col, north, south):\n            grid[north][col] = '#'\n            return north\n        if is_valid_move(south, col, north, south):\n            grid[south][col] = '#'\n            return south\n        return -1\n\n    def count_north_magnets(row, col):\n        north = -1\n        south = -1\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '#':\n                    if north == -1:\n                        north = i\n                    if south == -1:\n                        south = i\n                    if is_valid_move(i, j, north, south):\n                        north = i\n                        south = i\n        return north - south\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                north = place_magnets(i, j, -1, -1)\n                if north == -1:\n                    return -1\n                if count_north_magnets(i, j) < 1:\n                    return -1\n\n    return str(count_north_magnets(0, 0))"
    },
    {
        "number": 3950,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Initialize the selected positions\n    selected_positions = set()\n\n    # Perform queries\n    for _ in range(q):\n        # Get the segment to be selected\n        l, r = map(int, stdin.split())\n\n        # Check if the segment is valid\n        if l > r or l < 1 or r > n or l > r:\n            return \"NO\"\n\n        # Mark the segment as selected\n        selected_positions.add((l, r))\n\n        # Set the values of elements on the selected positions\n        for i in range(l, r + 1):\n            a[i] = i\n\n    # Check if the array can be obtained\n    if len(selected_positions) == n:\n        # Restore the array\n        for i in range(n):\n            a[i] = 0\n\n        # Print the selected positions\n        for l, r in selected_positions:\n            for i in range(l, r + 1):\n                print(a[i], end=\" \")\n            print()\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3951,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    G = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            G[i][j] = a[i]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            G[i][j] = G[i][j - 1]\n\n    for i in range(n):\n        for j in range(n):\n            if G[i][j] == 0:\n                return \"Error: GCD table is not defined\"\n            for k in range(i + 1, n):\n                if G[i][j] % G[k][j] == 0:\n                    G[i][j] = G[k][j]\n                    break\n\n    return \" \".join(map(str, G[0]))\n"
    },
    {
        "number": 3952,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.strip().split())\n        points.append((x, y))\n\n    strange_area = [(points[0][0], points[0][1]), (points[1][0], points[1][1]), (points[2][0], points[2][1])]\n    upper_side = (points[0][0], points[0][1])\n\n    for i in range(3):\n        for j in range(i + 1, 3):\n            if (strange_area[i][0] < points[j][0] < strange_area[j][0]) and (strange_area[i][1] < points[j][1] < strange_area[j][1]):\n                return \"6\"\n\n    return \"3\""
    },
    {
        "number": 3953,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    evil_tiles = [row.count('E') for row in stdin.strip().split('\\n')]\n    purification_spells = []\n    for i in range(n):\n        for j in range(n):\n            if evil_tiles[i] > evil_tiles[j]:\n                purification_spells.append((i, j))\n\n    if not purification_spells:\n        return '-1'\n\n    purification_spells.sort(key=lambda x: (-evil_tiles[x[0]], -evil_tiles[x[1]]))\n    purification_spells = purification_spells[:n * n]\n\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i in purification_spells and j in purification_spells:\n                result.append(f'{i+1} {j+1}')\n            elif i in purification_spells:\n                result.append(f'{i+1} {j+1}')\n            elif j in purification_spells:\n                result.append(f'{i+1} {j+1}')\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 3954,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def f(a, l, r):\n        return sum(a[i] for i in range(l, r+1))\n\n    def m(a):\n        return max(f(a, 1, n), f(a, 1, n-1), f(a, 1, n-2), f(a, 1, n-3), f(a, 1, n-4), f(a, 1, n-5), f(a, 1, n-6), f(a, 1, n-7), f(a, 1, n-8), f(a, 1, n-9), f(a, 1, n-10))\n\n    max_value = m(a)\n    return str(max_value)\n"
    },
    {
        "number": 3955,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    max_result = 0\n    for i in range(k):\n        result = 0\n        for j in range(n):\n            result = (result << 1) | (a[j] & 1)\n        max_result = max(max_result, result)\n\n    return str(max_result)"
    },
    {
        "number": 3956,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    result = []\n    for i in range(2, K + 1):\n        count = 0\n        for j in range(1, N + 1):\n            if i % j == 0:\n                count += 1\n        result.append(count)\n    result.sort()\n    return str(result[-1])"
    },
    {
        "number": 3957,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = []\n    for _ in range(n - 1):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        roads.append((x1, y1, x2, y2))\n\n    total_distance = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_distance += distance(i, j, roads)\n\n    return str(total_distance)\n\n\ndef"
    },
    {
        "number": 3958,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    history = list(map(int, stdin.strip()))\n    n = len(history)\n    subsequences = []\n    for i in range(n):\n        subsequence = []\n        for j in range(i):\n            if history[j] == 1 and history[j+1] == 1:\n                subsequence.append(j+1)\n        subsequences.append(subsequence)\n\n    for subsequence in subsequences:\n        subsequence.sort()\n\n    result = 0\n    for subsequence in subsequences:\n        if len(subsequence) > 1:\n            result += 1\n\n    return str(result)"
    },
    {
        "number": 3959,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    gyms = []\n    for _ in range(n):\n        gyms.append(list(map(int, stdin.split())))\n\n    def is_valid_evolution_plan(plan):\n        for i in range(m):\n            if plan[i] == plan[i + 1]:\n                return False\n        return True\n\n    def count_distinct_evolution_plans():\n        distinct_plans = set()\n        for i in range(1, m):\n            for j in range(i + 1, m):\n                if is_valid_evolution_plan(gyms[i - 1] + gyms[j - 1]):\n                    distinct_plans.add(gyms[i - 1] + gyms[j - 1])\n        return len(distinct_plans)\n\n    return str(count_distinct_evolution_plans())"
    },
    {
        "number": 3960,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_f = float('-inf')\n    for l in range(n):\n        for r in range(l + 1, n):\n            f = sum(abs(a[i] - a[i + 1]) for i in range(l, r)) * (-1) ** (r - l)\n            if f > max_f:\n                max_f = f\n\n    return str(max_f)"
    },
    {
        "number": 3961,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n\n    def dfs(i, p):\n        if i == n:\n            return 1\n        if i == 1:\n            return 1\n        if p[i] % 2 == 1:\n            return dfs(i + 1, p)\n        else:\n            return dfs(i + 1, p)\n\n    return str(dfs(1, p))"
    },
    {
        "number": 3962,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    circles = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        circles.append((l, r))\n\n    def min_chairs(circle):\n        left, right = circle\n        return min(left, right)\n\n    circles.sort(key=min_chairs)\n    total_chairs = 0\n    for i in range(n):\n        total_chairs += circles[i][0] + circles[i][1]\n\n    return total_chairs"
    },
    {
        "number": 3963,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    m = int(stdin.readline().strip())\n\n    ways = 1\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if a[i] + a[j] + a[k] == m:\n                    ways = (ways * (b[i] + b[j] + b[k])) % (10**9 + 7)\n\n    return str(ways)\n"
    },
    {
        "number": 3964,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, b, mod = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def is_good_plan(plan):\n        total_bugs = sum(a[i] for i in range(n) if plan[i] == 1)\n        return total_bugs <= b\n\n    def is_good_plan_sequence(plan):\n        for i in range(n):\n            if plan[i] == 0:\n                continue\n            for j in range(i + 1, n):\n                if plan[j] == 0:\n                    continue\n                if plan[i] + plan[j] == m:\n                    return True\n        return False\n\n    def is_good_plan_sequence_modulo(plan):\n        for i in range(n):\n            if plan[i] == 0:\n                continue\n            for j in range(i + 1, n):\n                if plan[j] == 0:\n                    continue\n                if plan[i] + plan[j] == m:\n                    return True\n        return False\n\n    good_plans = 0\n    for plan in itertools.permutations(range(n)):\n        if is_good_plan(plan):\n            good_plans += 1\n\n    if is_good_plan_sequence(plan):\n        good_plans += 1\n\n    if is_good_plan_sequence_modulo(plan):\n        good_plans += 1\n\n    return str(good_plans % mod)"
    },
    {
        "number": 3965,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    text = stdin.readline().strip()\n\n    syllables = []\n    for line in text.split('\\n'):\n        words = line.split()\n        for word in words:\n            if word.isalpha():\n                syllables.append(word)\n\n    matches = 0\n    for i in range(n):\n        syllable_count = 0\n        for word in syllables:\n            if word.isalpha():\n                syllable_count += 1\n                if syllable_count == p[i]:\n                    matches += 1\n                    break\n\n    if matches == n:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3966,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    score = sum(a)\n    max_score = 0\n    for i in range(n):\n        if i == 0:\n            max_score += a[i]\n        else:\n            max_score += a[i] + score\n    return str(max_score)"
    },
    {
        "number": 3967,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    d = 3\n    while d <= n:\n        cut_parts = 0\n        for i in range(n):\n            if a[i] <= d:\n                cut_parts += 1\n                a[i] -= d\n        if cut_parts <= k:\n            return str(d)\n        d += 1\n    return \"No solution found\""
    },
    {
        "number": 3968,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n\n    infected = [False] * N\n    infected_indices = []\n\n    for i in range(1, N + 1):\n        if infected[i - 1]:\n            infected_indices.append(i)\n\n    infected_indices.sort()\n\n    for i in range(D):\n        for j in range(1, N + 1):\n            if infected[j - 1]:\n                infected[j - 1] = False\n                infected_indices.remove(j)\n                break\n\n    for i in range(1, N + 1):\n        if infected[i - 1]:\n            infected_indices.append(i)\n\n    return''.join(map(str, infected_indices))\n"
    },
    {
        "number": 3969,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    plants = []\n    for _ in range(n):\n        x, y = map(float, stdin.split())\n        plants.append((x, y))\n\n    plants.sort(key=lambda x: x[0])\n\n    min_replants = 0\n    for i in range(m - 1):\n        if plants[i][0] < plants[i + 1][0]:\n            min_replants += 1\n\n    return str(min_replants)"
    },
    {
        "number": 3970,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def is_k_multiple_free(a, k):\n        for i in range(n):\n            if a[i] * k in a:\n                return False\n        return True\n\n    def find_largest_k_multiple_free_subset(a, k):\n        max_size = 0\n        for i in range(1, k + 1):\n            if is_k_multiple_free(a, i):\n                max_size = max(max_size, i)\n        return max_size\n\n    largest_k_multiple_free_subset = find_largest_k_multiple_free_subset(a, k)\n    return str(largest_k_multiple_free_subset)\n"
    },
    {
        "number": 3971,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_points = 0\n    for i in range(n):\n        if a[i] == 2:\n            max_points += 1\n            for j in range(i + 1, n):\n                if a[j] == a[i] + 1 and a[j] == a[i] - 1:\n                    max_points += 1\n\n    return str(max_points)"
    },
    {
        "number": 3972,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if i == j == k:\n                    continue\n                if i < j < k:\n                    count += 1\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 3973,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    favorite_level = 1\n\n    for i in range(n - 1):\n        favorite_level = a[i]\n        a[i] = a[i + 1]\n\n    for i in range(n):\n        if i == n - 1:\n            a[i] = favorite_level\n        else:\n            a[i] = a[i + 1]\n\n    return str(n)"
    },
    {
        "number": 3974,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    input_str = stdin.strip()\n\n    # Initialize variables\n    distinct_people = 0\n    distinct_people_count = 0\n\n    # Iterate through the input\n    for i in range(len(input_str)):\n        # If the current character is a plus, increment the distinct people count\n        if input_str[i] == '+':\n            distinct_people_count += 1\n\n        # If the current character is a minus, decrement the distinct people count\n        elif input_str[i] == '-':\n            distinct_people_count -= 1\n\n        # If the distinct people count reaches 0, increment the distinct people\n        if distinct_people_count == 0:\n            distinct_people += 1\n\n    # Return the result\n    return str(distinct_people)\n"
    },
    {
        "number": 3975,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    graph = [[] for _ in range(n)]\n    for line in stdin.splitlines():\n        type, *indices = line.strip().split()\n        if type == \"AND\":\n            for i in range(2):\n                graph[int(indices[i])].append(int(indices[i+2]))\n        elif type == \"OR\":\n            for i in range(2):\n                graph[int(indices[i])].append(int(indices[i+2]))\n        elif type == \"XOR\":\n            for i in range(2):\n                graph[int(indices[i])].append(int(indices[i+2]))\n        elif type == \"NOT\":\n            graph[int(indices[0])].append(int(indices[0]))\n        elif type == \"IN\":\n            graph[int(indices[0])].append(int(indices[1]))\n    def dfs(vertex, visited):\n        if vertex == 1:\n            return \"0\"\n        if vertex in visited:\n            return \"0\"\n        visited.add(vertex)\n        result = \"\"\n        for child in graph[vertex]:\n            result += dfs(child, visited)\n        return result\n    return \"\".join(dfs(1, set()))"
    },
    {
        "number": 3976,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    valid_qs = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if (i + j) % p == 0:\n                valid_qs.append((i, j))\n\n    valid_qs.sort()\n    return str(len(valid_qs)) + '\\n' + '\\n'.join(map(str, valid_qs))\n"
    },
    {
        "number": 3977,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n        edges.append((v, u))\n\n    def dfs(node, visited):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited)\n\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited)\n\n    max_edges = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if graph[i] == graph[j]:\n                max_edges += 1\n\n    return str(max_edges)"
    },
    {
        "number": 3978,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    colors = set()\n    used_colors = set()\n\n    for i in range(n):\n        if i in used_colors:\n            continue\n\n        for j in range(i + 1, n + 1):\n            if j in used_colors:\n                continue\n\n            if a[i] % a[j] == 0:\n                colors.add(a[i])\n                used_colors.add(a[i])\n                used_colors.add(a[j])\n                break\n\n    return str(len(colors))"
    },
    {
        "number": 3979,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    words = []\n    for _ in range(n):\n        word = list(map(int, stdin.split()))\n        words.append(word)\n\n    def is_lexicographically_greater(word1, word2):\n        for i in range(min(len(word1), len(word2))):\n            if word1[i]!= word2[i]:\n                return word1[i] < word2[i]\n        return len(word1) < len(word2)\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_lexicographically_greater(words[i], words[j]):\n                return \"No\"\n\n    for i in range(m):\n        for j in range(i + 1, m):\n            if is_lexicographically_greater(words[i], words[j]):\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 3980,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_beauty = 0\n    max_permutation = []\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            beauty = 0\n            for k in range(i):\n                if i & (1 << k)!= 0 and j & (1 << k)!= 0:\n                    beauty += 1\n            if beauty > max_beauty:\n                max_beauty = beauty\n                max_permutation = [i]\n            elif beauty == max_beauty:\n                max_permutation.append(i)\n\n    print(max_beauty)\n    print(\" \".join(map(str, max_permutation)))\n\n    return \"\""
    },
    {
        "number": 3981,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    engines = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        engines.append((x, y))\n\n    safe = True\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            for k in range(2):\n                a, b = engines[i]\n                x, y = engines[j]\n                if k == 0:\n                    a, b = b, a\n                if k == 1:\n                    a, b = -b, -a\n                x_a, y_a = a * x + b * y, a * y - b * x\n                x_b, y_b = b * x + a * y, b * y - a * x\n                if (x_a, y_a) in engines[j] or (x_b, y_b) in engines[j]:\n                    safe = False\n                    break\n\n    if safe:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3982,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    S = \"\"\n    for _ in range(m):\n        c = input().strip()\n        if c == \"0\":\n            S += \"0\"\n        elif c == \"1\":\n            S += \"1\"\n    count = 0\n    for i in range(len(S)):\n        if S[i] == \"0\" or S[i] == \"1\":\n            count += 1\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 3983,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        N, M = map(int, stdin.readline().split())\n        G = [[] for _ in range(N + 1)]\n        for _ in range(M):\n            a, b = map(int, stdin.readline().split())\n            G[a].append(b)\n            G[b].append(a)\n        good_graph = True\n        for i in range(1, N + 1):\n            if len(set(G[i]))!= N:\n                good_graph = False\n                break\n        if good_graph:\n            print(\"First\")\n        else:\n            print(\"Second\")\n    return \"\""
    },
    {
        "number": 3984,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    k = int(stdin.readline().strip())\n    if k > n:\n        return \"No\"\n\n    winner = \"Mike\"\n    for i in range(k):\n        l, r = i, i\n        while l > 0 and s[l - 1] == s[l]:\n            l -= 1\n        while r < n and s[r + 1] == s[r]:\n            r += 1\n        if l == r:\n            winner = \"Ann\"\n            break\n\n    return winner"
    },
    {
        "number": 3985,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    pairs = []\n    for i in range(m):\n        pairs.append(list(map(int, stdin.split())))\n\n    max_operations = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % 2 == 1 and a[j] % 2 == 1 and 1 <= a[i] < j <= n:\n                max_operations += 1\n                a[i] //= 2\n                a[j] //= 2\n\n    return str(max_operations)"
    },
    {
        "number": 3986,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or k < 1 or k > 26:\n        return \"-1\"\n\n    def is_valid(s):\n        return len(set(s)) == len(s) and len(set(s)) == n and len(set(s)) == k\n\n    def is_valid_pair(s):\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                return False\n        return True\n\n    def lexicographically_smallest(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_string(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_lexicographically_smallest(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_string_pair(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_lexicographically_smallest_pair(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_string_pair_and_lexicographically_smallest(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_string_pair_and_lexicographically_smallest_pair(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_string_pair_and_lexicographically_smallest_pair_and_find_string(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_string_pair_and_lexicographically_smallest_pair_and_find_string_pair(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_string_pair_and_lexicographically_smallest_pair_and_find_string_pair_and_find_string(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_string_pair_and_lexicographically_smallest_pair_and_find_string_pair_and_find_string_pair(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_string_pair_and_lexicographically_smallest_pair_and_find_string_pair_and_find_string_pair_and_find_string(s):\n        for i in range(len(s) - 1):\n            if s[i] < s[i + 1]:\n                return s[i], s[i + 1]\n        return s[-1], s[0]\n\n    def find_string_pair_and_lexicographically_"
    },
    {
        "number": 3987,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    def reverse_subsequence(a, l, r):\n        if l == r:\n            return [a[l]]\n        else:\n            mid = (l + r) // 2\n            left_subsequence = reverse_subsequence(a, l, mid)\n            right_subsequence = reverse_subsequence(a, mid + 1, r)\n            return left_subsequence + [a[mid]] + right_subsequence\n\n    longest_non_decreasing_subsequence = max(reverse_subsequence(a, 0, n - 1))\n\n    return str(longest_non_decreasing_subsequence)\n"
    },
    {
        "number": 3988,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        t, u, v = map(int, stdin.split())\n        edges.append((t, u, v))\n\n    def orient_edge(edge):\n        if edge[0] == 1:\n            return (1, 0)\n        else:\n            return (0, 1)\n\n    def orient_graph(graph):\n        oriented_graph = []\n        for u, v, t in graph:\n            if t == 1:\n                oriented_graph.append((u, v, orient_edge(t)))\n            else:\n                oriented_graph.append((v, u, orient_edge(t)))\n        return oriented_graph\n\n    def reachable_vertices(graph, start):\n        visited = set()\n        queue = [(start, 0)]\n        while queue:\n            u, depth = queue.pop(0)\n            if u in visited:\n                continue\n            visited.add(u)\n            for v, w, _ in graph[u]:\n                if v not in visited:\n                    queue.append((v, depth + 1))\n        return len(visited)\n\n    def max_reachable_vertices(graph):\n        max_reachable = 0\n        for start in range(n):\n            if reachable_vertices(graph, start) > max_reachable:\n                max_reachable = reachable_vertices(graph, start)\n        return max_reachable\n\n    def min_reachable_vertices(graph):\n        min_reachable = float('inf')\n        for start in range(n):\n            if reachable_vertices(graph, start) < min_reachable:\n                min_reachable = reachable_vertices(graph, start)\n        return min_reachable\n\n    oriented_graph = orient_graph(edges)\n    max_reachable = max_reachable_vertices(oriented_graph)\n    min_reachable = min_reachable_vertices(oriented_graph)\n\n    result = []\n    for i in range(max_reachable + 1):\n        result.append(str(i))\n\n    for i in range(min_reachable + 1):\n        result.append('-')\n\n    for i in range(max_reachable + 1):\n        result.append('+')\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 3989,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 10**6:\n        a = a * 7\n        return str(a)\n    else:\n        return \"0\""
    },
    {
        "number": 3990,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    routes = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        routes.append((u, v))\n\n    def is_valid(u, v):\n        for r in routes:\n            if r[0] == u and r[1] == v:\n                return False\n        return True\n\n    def min_time(u, v):\n        if not is_valid(u, v):\n            return -1\n\n        def dfs(u, visited):\n            if u == n:\n                return 0\n\n            if visited[u]:\n                return 0\n\n            visited[u] = True\n            time = 1 + dfs(u + 1, visited)\n            visited[u] = False\n            return time\n\n        return dfs(u, [False] * n)\n\n    return str(min_time(1, n))"
    },
    {
        "number": 3991,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort()\n    x.append(n)\n    x.sort"
    },
    {
        "number": 3992,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Check if there is a way for Charlie to make Alice happy\n    for i in range(n):\n        if a[i] % 17!= 0:\n            return \"-1\"\n\n    # Calculate the minimum number of seconds for Charlie to help Bob make Alice happy\n    x = 0\n    for i in range(n):\n        if a[i] % 3!= 0:\n            x += 1\n\n    return str(x)"
    },
    {
        "number": 3993,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n\n    operations = 0\n    i = 0\n    while i < n:\n        if i + k <= n:\n            operations += 1\n            i += k\n        else:\n            operations += 1\n            i = 0\n\n    return str(operations)"
    },
    {
        "number": 3994,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, lights = map(int, stdin.split())\n    lights = [int(x) for x in stdin.split()]\n    lights = [0] * n\n    lights[0] = 1\n    lights[1] = 1\n    lights[2] = 1\n    lights[3] = 1\n    lights[4] = 1\n    lights[5] = 1\n    lights[6] = 1\n    lights[7] = 1\n    lights[8] = 1\n    lights[9] = 1\n    lights[10] = 1\n    lights[11] = 1\n    lights[12] = 1\n    lights[13] = 1\n    lights[14] = 1\n    lights[15] = 1\n    lights[16] = 1\n    lights[17] = 1\n    lights[18] = 1\n    lights[19] = 1\n    lights[20] = 1\n    lights[21] = 1\n    lights[22] = 1\n    lights[23] = 1\n    lights[24] = 1\n    lights[25] = 1\n    lights[26] = 1\n    lights[27] = 1\n    lights[28] = 1\n    lights[29] = 1\n    lights[30] = 1\n    lights[31] = 1\n    lights[32] = 1\n    lights[33] = 1\n    lights[34] = 1\n    lights[35] = 1\n    lights[36] = 1\n    lights[37] = 1\n    lights[38] = 1\n    lights[39] = 1\n    lights[40] = 1\n    lights[41] = 1\n    lights[42] = 1\n    lights[43] = 1\n    lights[44] = 1\n    lights[45] = 1\n    lights[46] = 1\n    lights[47] = 1\n    lights[48] = 1\n    lights[49] = 1\n    lights[50] = 1\n    lights[51] = 1\n    lights[52] = 1\n    lights[53] = 1\n    lights[54] = 1\n    lights[55] = 1\n    lights[56] = 1\n    lights[57] = 1\n    lights[58] = 1\n    lights[59] = 1\n    lights[60] = 1\n    lights[61] = 1\n    lights[62] = 1\n    lights[63] = 1\n    lights[64] = 1\n    lights[65] = 1\n    lights[66] = 1\n    lights[67] = 1\n    lights[68] = 1\n    lights[69] = 1\n    lights[70] = 1\n    lights[71] = 1\n    lights[72] = 1\n    lights[73] = 1\n    lights[74] = 1\n    lights[75] = 1\n    lights[76] = 1\n    lights[77] = 1\n    lights[78] = 1\n    lights[79] = 1\n    lights[80] = 1\n    lights[81] = 1\n    lights[82] = 1\n    lights[83] = 1\n    lights[84] = 1\n    lights[85] = 1\n    lights[86] = 1\n    lights[87] = 1\n    lights[88] = 1\n    lights[89] = 1\n    lights[90] = 1\n    lights[91] = 1\n    lights[92] = 1\n    lights[93] = 1\n    lights[94] = 1\n    lights[95] = 1\n    lights[96] = 1\n    lights[97] = 1\n    lights[98] = 1\n    lights[99] = 1\n    lights[100] = 1\n    lights[101] = 1\n    lights[102] = 1\n    lights[103] = 1\n    lights[104] = 1\n    lights[105] = 1\n    lights[106] = 1\n    lights[107] = 1\n    lights[108] = 1\n    lights[109] ="
    },
    {
        "number": 3995,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = \"01\" * n\n    t = \"\"\n    for i in range(n):\n        if s[i] == \"0\":\n            t += s[i] + s[i+1] + s[i+2:]\n            s = s[:i] + s[i+3:]\n    if len(t) == k:\n        return t\n    else:\n        return \"\""
    },
    {
        "number": 3996,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    p = 10**9 + 7\n    q = 10**9 + 7\n    for i in range(n):\n        p = (p * a[i]) % p\n        q = (q * a[i]) % q\n    x = p % p\n    y = q % q\n    return str(x) + '/' + str(y)"
    },
    {
        "number": 3997,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    p = list(map(int, stdin.readline().strip().split()))\n    w = list(map(int, stdin.readline().strip().split()))\n\n    def dfs(v, parent):\n        count = 0\n        for u in range(n):\n            if u == v or u == parent:\n                continue\n            if a[u] <= a[v] and dist(u, v) <= a[u]:\n                count += dfs(u, v)\n        return count\n\n    return''.join(map(str, dfs(1, -1)))\n"
    },
    {
        "number": 3998,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    r = list(map(int, stdin.readline().strip().split()))\n\n    R = 0\n    t = 0\n\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            R += r[i]\n\n    if t > 10**4:\n        return \"No solution exists\"\n\n    for i in range(t):\n        for j in range(n):\n            if r[j] == 0:\n                print(\"0\", end=\"\")\n            else:\n                print(\"1\", end=\"\")\n        print()\n\n    return str(R)\n"
    },
    {
        "number": 3999,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    colors = [int(stdin.readline().strip()) for _ in range(N)]\n    used_tiles = set()\n\n    for i in range(N):\n        for j in range(3):\n            used_tiles.add((i, j))\n\n    for i in range(N):\n        for j in range(3):\n            for k in range(3):\n                for l in range(3):\n                    if (i, j) in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i, j) not in used_tiles and (k, l) not in used_tiles:\n                        continue\n                    if (i, j) in used_tiles and (k, l) in used_tiles:\n                        continue\n                    if (i"
    }
]