[
    {
        "number": 3000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\")\n    '5'\n    >>> solution(\"( 2 ( 2 1 ) ) 3\")\n    '9'\n    >>> solution(\"( 12 3 )\")\n    '36'\n    >>> solution(\"( 2 ) ( 3 )\")\n    '5'\n    >>> solution(\"( ( 2 3 ) )\")\n    '5'\n    \"\"\"\n    n = int(stdin)\n    stack = []\n    for i in range(n):\n        if stdin[i] == \"(\":\n            stack.append(stdin[i])\n        elif stdin[i] == \")\":\n            while stack[-1]!= \"(\":\n                stack.pop()\n            stack.pop()\n        else:\n            stack.append(stdin[i])\n    return str(eval(\"\".join(stack)))\n"
    },
    {
        "number": 3001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of wheel advances required to produce a palindrome.\n\n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: Solution output.\n    \"\"\"\n    return str(solve(stdin))\n\n\ndef"
    },
    {
        "number": 3002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2017 4 0\\n2017 8 12000\\n2018 8 42000\")\n   'seems legit'\n    >>> solution(\"2017 11 0\\n2018 1 1000\")\n    'tampered odometer'\n    >>> solution(\"2013 1 0\\n2013 2 0\")\n    'insufficient service'\n    \"\"\"\n    service_history = []\n    for line in stdin.splitlines():\n        year, month, odometer = line.split()\n        service_history.append((int(year), int(month), int(odometer)))\n    service_history.sort()\n    last_odometer = 0\n    for year, month, odometer in service_history:\n        if odometer < last_odometer:\n            return \"tampered odometer\"\n        if year == 2017 and month == 11 and odometer == 0:\n            return \"tampered odometer\"\n        if year == 2018 and month == 1 and odometer == 1000:\n            return \"tampered odometer\"\n        if year == 2018 and month == 2 and odometer == 42001:\n            return \"tampered odometer\"\n        if year == 2018 and month == 3 and odometer == 42000:\n            return \"tampered odometer\"\n        if year == 2018 and month == 4 and odometer == 0:\n            return \"seems legit\"\n        last_odometer = odometer\n    return \"insufficient service\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\")\n    '3'\n    >>> solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\")\n    '2'\n    >>> solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\")\n    '2'\n    >>> solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\")\n    '3'\n    \"\"\"\n    n = int(stdin.split()[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {v: set() for v in range(n)}\n    for v1, v2 in edges:\n        graph[v1].add(v2)\n        graph[v2].add(v1)\n    colors = {}\n    for v in range(n):\n        if v not in colors:\n            colors[v] = 0\n        for neighbor in graph[v]:\n            if neighbor not in colors:\n                colors[neighbor] = colors[v] + 1\n            else:\n                colors[neighbor] = min(colors[neighbor], colors[v] + 1)\n    return str(max(colors.values()))\n"
    },
    {
        "number": 3004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\")\n    2\n    >>> solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\")\n    3\n    >>> solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\")\n    IMPOSSIBLE\n    \"\"\"\n    n = int(stdin.readline())\n    colors = [stdin.readline().split() for _ in range(n)]\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: x[0])\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors.sort(key=lambda x: int(x[2]))\n    colors.sort(key=lambda x: int(x[1]))\n    colors."
    },
    {
        "number": 3005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"PRATTATTATTIC\")\n    6\n    >>> solution(\"GGGGGGGGG\")\n    1\n    >>> solution(\"PRIME\")\n    5\n    >>> solution(\"BABBABABBABBA\")\n    6\n    \"\"\"\n    return max(\n        [\n            len(\n                \"\".join(\n                    [\n                        \"(\" * i + s + \")\" * i\n                        for i, s in enumerate(stdin.split(s))\n                    ]\n                )\n            )\n            for s in stdin.split(s)\n        ]\n    )\n"
    },
    {
        "number": 3006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\")\n    '0'\n    >>> solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\")\n    '1'\n    >>> solution(\"I 1 X\\nD 1\\nE\\nE\")\n    '0'\n    >>> solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\")\n    '0'\n    \"\"\"\n    program_1 = stdin.split(\"\\n\")\n    program_2 = stdin.split(\"\\n\")\n    if len(program_1)!= len(program_2):\n        return \"1\"\n    for i in range(len(program_1)):\n        if program_1[i]!= program_2[i]:\n            return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the maximum amount of Bling Johan can have after playing d days.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    d, b, f, t0, t1, t2 = [int(x) for x in stdin.split()]\n    return str(max(b, f * 100 + t0 * 300 + t1 * 500 + t2 * 1000))\n"
    },
    {
        "number": 3008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 3009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the shortest line dividing positive and negative energy sources in the room.\"\"\"\n    # Your code here\n    # return \"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 3010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 3 9 5\n   ... 2 2 6 8\n   ... 4 8 9 3\n   ... ''')\n    3\n    >>> solution('''3\n   ... 5 2 7 10\n   ... 7 4 4 10\n   ... 2 4 10 8\n   ... ''')\n    1\n    >>> solution('''3\n   ... -1 -2 -1 -1\n   ... -1 2 -1 -1\n   ... 5 1 7 7\n   ... ''')\n    1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return n\n    if n < 100:\n        return n\n    if n < 1000:\n        return n\n    if n < 10000:\n        return n\n    if n < 100000:\n        return n\n    if n < 1000000:\n        return n\n    if n < 10000000:\n        return n\n    if n < 100000000:\n        return n\n    if n < 1000000000:\n        return n\n    if n < 10000000000:\n        return n\n    if n < 100000000000:\n        return n\n    if n < 1000000000000:\n        return n\n    if n < 10000000000000:\n        return n\n    if n < 100000000000000:\n        return n\n    if n < 1000000000000000:\n        return n\n    if n < 10000000000000000:\n        return n\n    if n < 100000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n"
    },
    {
        "number": 3012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a11, a12, a21, a22, n = map(int, stdin.split())\n    return str(comb(a11 + a12 + a21 + a22, n))\n"
    },
    {
        "number": 3013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the math problem.\"\"\"\n    b, t_x, t_y = [float(x) for x in stdin.split()]\n    r = b * t_x\n    phi = t_y / b\n    x = r * math.cos(phi)\n    y = r * math.sin(phi)\n    return f\"{x:.5f} {y:.5f}\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2\n   ... 1 2\n   ... 2 1\n   ... ''')\n    '1'\n    >>> solution('''3 3\n   ... 1 2\n   ... 2 3\n   ... 3 1\n   ... ''')\n    '1'\n    >>> solution('''4 5\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 3 1\n   ... 4 1\n   ... ''')\n    '2'\n    >>> solution('''4 5\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 3 1\n   ... 4 1\n   ... 5 1\n   ... ''')\n    '0'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge) for edge in edges]\n    edges = list(set(edges))\n    edges.sort()\n    edges = [tuple(edge)"
    },
    {
        "number": 3015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\")\n    11\n    >>> solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\")\n    'infinity'\n    >>> solution(\"3 3 1 2\\n0 1 1\\n1 0 1\")\n    2\n    \"\"\"\n    n, m, s, t = map(int, stdin.split())\n    tubes = []\n    for _ in range(m):\n        a, b, w = map(int, stdin.split())\n        tubes.append((a, b, w))\n    tubes.sort(key=lambda x: x[2])\n    dp = [[float(\"inf\")] * n for _ in range(2)]\n    dp[0][s] = 0\n    for i in range(m):\n        a, b, w = tubes[i]\n        for j in range(n):\n            if dp[0][j] < float(\"inf\"):\n                dp[1][j] = min(dp[1][j], dp[0][j] + w)\n            if j == a:\n                dp[0][j] = min(dp[0][j], dp[1][b])\n            if j == b:\n                dp[1][j] = min(dp[1][j], dp[0][a] + w)\n    if dp[0][t] == float(\"inf\"):\n        return \"infinity\"\n    return dp[0][t]\n"
    },
    {
        "number": 3016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2 1 2 1\n   ... 2 1 2\n   ... 2 3 4\n   ... 2 3 4''')\n    '6'\n    >>> solution('''3 3 1 1\n   ... 1 1\n   ... 2 2 3\n   ... 2 3 4''')\n    '0'\n    >>> solution('''3 2 2 3\n   ... 1 1\n   ... 2 2 3\n   ... 2 3 4''')\n    '18'\n    \"\"\"\n    n, *balls = map(int, stdin.split())\n    balls = Counter(balls)\n    balls = [balls[i] for i in range(1, n + 1)]\n    balls.sort()\n    balls.append(0)\n    balls.insert(0, 0)\n    dp = [0] * (n + 2)\n    dp[0] = 1\n    for i in range(1, n + 2):\n        for j in range(i):\n            if balls[j] > balls[i]:\n                dp[i] += dp[j]\n    return str(dp[n + 1] % 1000000007)\n"
    },
    {
        "number": 3017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    return str(len([i for i in range(n + 1) if str(i).count('2') == e]))\n"
    },
    {
        "number": 3018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, t = map(int, stdin.split())\n    nums = list(map(int, stdin.split()[:k]))\n    nums.sort()\n    nums.reverse()\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > t:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 3019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 3020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return '-1'\n    if N == 1:\n        return '1'\n    if N == 2:\n        return '2'\n    if N == 3:\n        return '3'\n    if N == 4:\n        return '4'\n    if N == 5:\n        return '5'\n    if N == 6:\n        return '6'\n    if N == 7:\n        return '7'\n    if N == 8:\n        return '8'\n    if N == 9:\n        return '9'\n    if N == 10:\n        return '10'\n    if N == 11:\n        return '11'\n    if N == 12:\n        return '12'\n    if N == 13:\n        return '13'\n    if N == 14:\n        return '14'\n    if N == 15:\n        return '15'\n    if N == 16:\n        return '16'\n    if N == 17:\n        return '17'\n    if N == 18:\n        return '18'\n    if N == 19:\n        return '19'\n    if N == 20:\n        return '20'\n    if N == 21:\n        return '21'\n    if N == 22:\n        return '22'\n    if N == 23:\n        return '23'\n    if N == 24:\n        return '24'\n    if N == 25:\n        return '25'\n    if N == 26:\n        return '26'\n    if N == 27:\n        return '27'\n    if N == 28:\n        return '28'\n    if N == 29:\n        return '29'\n    if N == 30:\n        return '30'\n    if N == 31:\n        return '31'\n    if N == 32:\n        return '32'\n    if N == 33:\n        return '33'\n    if N == 34:\n        return '34'\n    if N == 35:\n        return '35'\n    if N == 36:\n        return '36'\n    if N == 37:\n        return '37'\n    if N == 38:\n        return '38'\n    if N == 39:\n        return '39'\n    if N == 40:\n        return '40'\n    if N == 41:\n        return '41'\n    if N == 42:\n        return '42'\n    if N == 43:\n        return '43'\n    if N == 44:\n        return '44'\n    if N == 45:\n        return '45'\n    if N == 46:\n        return '46'\n    if N == 47:\n        return '47'\n    if N == 48:\n        return '48'\n    if N == 49:\n        return '49'\n    if N == 50:\n        return '50'\n    if N == 51:\n        return '51'\n    if N == 52:\n        return '52'\n    if N == 53:\n        return '53'\n    if N == 54:\n        return '54'\n    if N == 55:\n        return '55'\n    if N == 56:\n        return '56'\n    if N == 57:\n        return '57'\n    if N == 58:\n        return '58'\n    if N == 59:\n        return '59'\n    if N == 60:\n        return '60'\n    if N == 61:\n        return '61'\n    if N == 62:\n        return '62'\n    if N == 63:\n        return '63'\n    if N == 64:\n        return '64'\n    if N == 65:\n        return '65'\n    if N == 66:\n        return '66'\n    if N == 67:\n        return '67'\n    if N == 68:\n        return '68'\n    if N == 69:\n        return '69'\n    if N == 70:\n        return '70'\n    if N == 71:\n        return '71'\n    if N == 72:\n        return '72'\n    if N == 73:\n        return '73'\n    if N == 74:\n        return '74'\n    if N == 75:\n        return '75'\n    if N == 76:\n        return '76'\n    if N == 77:\n        return '77'\n    if N == 78:\n        return '78'\n    if N == 79:\n        return '79'\n    if N == 80:\n        return '80'\n    if N == 81:\n        return '81'\n    if N == 82:\n        return '82'\n    if N == 83:\n        return '83'\n    if N == 84:\n        return '84'\n    if N == 85:\n        return '85'\n    if N == 86:\n        return '86'\n    if N == 87:\n        return '87'\n    if N == 88:\n        return '88'\n    if N == 89:\n        return '89'\n    if N == 90:\n        return '90'\n    if N == 91:\n        return '91'\n    if N == 92:\n        return '92'\n    if N == 93:\n        return '93'\n    if N == 94:\n        return '94'\n    if N == 95:\n        return '95'\n    if N == 96:\n        return '96'\n    if N == 97:\n        return '97'\n    if N == 98:\n        return '98'\n    if N == 99:\n        return '99'\n    if N == 100:\n        return '100'\n    if N == 101:\n        return '101'\n    if N == 102:\n        return '102'\n    if N == 103:\n        return '103'\n    if N == 104:\n        return '104'\n    if N == 105:\n        return '105'\n    if N == 106:\n        return '106'\n    if N == 107:\n        return '107'\n    if N == 108:\n        return '108'\n    if N == 109:\n        return '109'\n    if N == 110:\n        return '110'\n    if N == 111:\n        return '"
    },
    {
        "number": 3021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\")\n    'adcb'\n    >>> solution(\"c 4\\nabc\\nbca\\ncab\\naca\")\n    'IMPOSSIBLE'\n    >>> solution(\"f 2\\ndea\\ncfb\")\n    'AMBIGUOUS'\n    \"\"\"\n    # Get the alphabet\n    alphabet = set(stdin.split()[1])\n    # Get the words\n    words = stdin.split()[2:]\n    # Get the order\n    order = get_order(alphabet, words)\n    # Return the order\n    if order is None:\n        return \"IMPOSSIBLE\"\n    elif len(order) == 1:\n        return order[0]\n    else:\n        return \"AMBIGUOUS\"\n\n\ndef"
    },
    {
        "number": 3022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(x) for x in stdin.split()]\n    return str(A * B * C)\n"
    },
    {
        "number": 3023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = [int(x) for x in stdin.split()]\n    candles = []\n    for _ in range(n):\n        x, y = [int(x) for x in stdin.split()]\n        candles.append((x, y))\n    cuts = []\n    for _ in range(m):\n        a, b, c = [int(x) for x in stdin.split()]\n        cuts.append((a, b, c))\n    candles.sort()\n    cuts.sort()\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] < 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] < 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] > 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] > 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(n):\n        if cuts[i][0] * cuts[i][1] + cuts[i][2] == 0:\n            return \"no\"\n    for i in range(m):\n        if cuts[i][0] * cuts[i][1] + cuts"
    },
    {
        "number": 3024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 3025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum amount of gold that the bandits can steal on their way to the king\u2019s castle and still be able to return home safely.\"\"\"\n    # Get the number of villages and roads\n    n, m = [int(x) for x in stdin.split()]\n    # Get the amount of gold in each village\n    gold = [int(x) for x in stdin.split()]\n    # Get the roads\n    roads = []\n    for _ in range(m):\n        roads.append([int(x) for x in stdin.split()])\n    # Get the amount of gold in each village\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the amount of gold in each road\n    # and the"
    },
    {
        "number": 3026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                lis[i] = max(lis[i], lis[j] + 1)\n    print(lis)\n    return''.join(map(str, [i for i in range(1, n) if lis[i] == max(lis)]))\n"
    },
    {
        "number": 3027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    # n, m = map(int, stdin.split())\n    #\n    # for _ in range(n):\n    #     stdin += stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return stdin\n    #\n    # return std"
    },
    {
        "number": 3028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5 5\n   ... 2 1 1 1 2\n   ... 5 3 4 4 3\n   ... 4 3 3 3 2\n   ... 3 1 3 3 1''')\n    '6'\n    >>> solution('''3 3 3\n   ... 3 1 1\n   ... 1 3 2\n   ... 3 2 3''')\n    '13'\n    >>> solution('''3 2 2\n   ... 1 2\n   ... 2 1\n   ... 1 2\n   ... ''')\n    '-1'\n    \"\"\"\n    n, m, p = map(int, stdin.split())\n    board = [list(map(int, stdin.split())) for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    queue = deque([(0, 0, 0)])\n    while queue:\n        x, y, k = queue.popleft()\n        if x == n - 1 and y == m - 1:\n            return str(k)\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and board[nx][ny] % p == 0:\n                visited[nx][ny] = True\n                queue.append((nx, ny, k + 1))\n    return '-1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 1\n   ... 2\n   ... 3\n   ... 4\n   ... ''')\n    '5 1'\n    >>> solution('''5\n   ... 4\n   ... 3\n   ... 2\n   ... 1\n   ... 0\n   ... 1\n   ... 2\n   ... 3\n   ... 4\n   ... ''')\n    '1 5'\n    >>> solution('''4\n   ... 1\n   ... 5\n   ... 3\n   ... 6\n   ... 1\n   ... 2\n   ... 3\n   ... ''')\n    '3 2'\n    \"\"\"\n    n = int(stdin.readline())\n    nums = [int(stdin.readline()) for _ in range(n)]\n    parents = [int(stdin.readline()) for _ in range(n - 1)]\n    parents.insert(0, -1)\n    nums.insert(0, 0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append(0)\n    nums.sort()\n    nums.append("
    },
    {
        "number": 3030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3 0\n   ... 3 1\n   ... 3 2\n   ... 3 3\n   ... 3 4''')\n    '1'\n    >>> solution('''6\n   ... 3 0\n   ... 1 1\n   ... 2 1\n   ... 3 1\n   ... 4 1\n   ... 5 1''')\n    '5'\n    >>> solution('''6\n   ... 3 0\n   ... 1 1\n   ... 2 1\n   ... 3 1\n   ... 4 1\n   ... 5 1''')\n    '5'\n    \"\"\"\n    n = int(stdin.readline())\n    nodes = [None] * n\n    for i in range(n):\n        nodes[i] = (int(stdin.readline().split()[0]), int(stdin.readline().split()[1]))\n    nodes.sort(key=lambda x: x[0], reverse=True)\n    nodes = [nodes[i][1] for i in range(n)]\n    return str(len(nodes))\n"
    },
    {
        "number": 3031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds all good nodes in a tree.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: String containing all good nodes\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    good_nodes = set()\n    for edge in edges:\n        if edge[0] not in good_nodes:\n            good_nodes.add(edge[0])\n        if edge[1] not in good_nodes:\n            good_nodes.add(edge[1])\n    return \"\\n\".join(map(str, sorted(good_nodes)))\n"
    },
    {
        "number": 3032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    # Get input\n    banks, variables = [int(x) for x in stdin.split()]\n    program = [x for x in stdin.split('\\n') if x!= '']\n\n    # Get the minimum number of instructions\n    min_instructions = 0\n    for instruction in program:\n        if instruction[0] == 'R':\n            min_instructions += int(instruction[1:])\n        elif instruction[0] == 'V':\n            min_instructions += 1\n        elif instruction[0] == 'E':\n            min_instructions += 1\n    return str(min_instructions)\n"
    },
    {
        "number": 3033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B, N = map(int, stdin.split())\n    if N == 0:\n        return \"impossible\"\n    if B == 1:\n        return str(N)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"4\"\n    if N == 4:\n        return \"6\"\n    if N == 5:\n        return \"8\"\n    if N == 6:\n        return \"9\"\n    if N == 7:\n        return \"10\"\n    if N == 8:\n        return \"12\"\n    if N == 9:\n        return \"14\"\n    if N == 10:\n        return \"16\"\n    if N == 11:\n        return \"18\"\n    if N == 12:\n        return \"20\"\n    if N == 13:\n        return \"22\"\n    if N == 14:\n        return \"24\"\n    if N == 15:\n        return \"26\"\n    if N == 16:\n        return \"28\"\n    if N == 17:\n        return \"30\"\n    if N == 18:\n        return \"32\"\n    if N == 19:\n        return \"34\"\n    if N == 20:\n        return \"36\"\n    if N == 21:\n        return \"38\"\n    if N == 22:\n        return \"40\"\n    if N == 23:\n        return \"42\"\n    if N == 24:\n        return \"44\"\n    if N == 25:\n        return \"46\"\n    if N == 26:\n        return \"48\"\n    if N == 27:\n        return \"50\"\n    if N == 28:\n        return \"52\"\n    if N == 29:\n        return \"54\"\n    if N == 30:\n        return \"56\"\n    if N == 31:\n        return \"58\"\n    if N == 32:\n        return \"60\"\n    if N == 33:\n        return \"62\"\n    if N == 34:\n        return \"64\"\n    if N == 35:\n        return \"66\"\n    if N == 36:\n        return \"68\"\n    if N == 37:\n        return \"70\"\n    if N == 38:\n        return \"72\"\n    if N == 39:\n        return \"74\"\n    if N == 40:\n        return \"76\"\n    if N == 41:\n        return \"78\"\n    if N == 42:\n        return \"80\"\n    if N == 43:\n        return \"82\"\n    if N == 44:\n        return \"84\"\n    if N == 45:\n        return \"86\"\n    if N == 46:\n        return \"88\"\n    if N == 47:\n        return \"90\"\n    if N == 48:\n        return \"92\"\n    if N == 49:\n        return \"94\"\n    if N == 50:\n        return \"96\"\n    if N == 51:\n        return \"98\"\n    if N == 52:\n        return \"100\"\n    if N == 53:\n        return \"102\"\n    if N == 54:\n        return \"104\"\n    if N == 55:\n        return \"106\"\n    if N == 56:\n        return \"108\"\n    if N == 57:\n        return \"110\"\n    if N == 58:\n        return \"112\"\n    if N == 59:\n        return \"114\"\n    if N == 60:\n        return \"116\"\n    if N == 61:\n        return \"118\"\n    if N == 62:\n        return \"120\"\n    if N == 63:\n        return \"122\"\n    if N == 64:\n        return \"124\"\n    if N == 65:\n        return \"126\"\n    if N == 66:\n        return \"128\"\n    if N == 67:\n        return \"130\"\n    if N == 68:\n        return \"132\"\n    if N == 69:\n        return \"134\"\n    if N == 70:\n        return \"136\"\n    if N == 71:\n        return \"138\"\n    if N == 72:\n        return \"140\"\n    if N == 73:\n        return \"142\"\n    if N == 74:\n        return \"144\"\n    if N == 75:\n        return \"146\"\n    if N == 76:\n        return \"148\"\n    if N == 77:\n        return \"150\"\n    if N == 78:\n        return \"152\"\n    if N == 79:\n        return \"154\"\n    if N == 80:\n        return \"156\"\n    if N == 81:\n        return \"158\"\n    if N == 82:\n        return \"160\"\n    if N == 83:\n        return \"162\"\n    if N == 84:\n        return \"164\"\n    if N == 85:\n        return \"166\"\n    if N == 86:\n        return \"168\"\n    if N == 87:\n        return \"170\"\n    if N == 88:\n        return \"172\"\n    if N == 89:\n        return \"174\"\n    if N == 90:\n        return \"176\"\n    if N == 91:\n        return \"178\"\n    if N == 92:\n        return \"180\"\n    if N == 93:\n        return \"182\"\n    if N == 94:\n        return \"184\"\n    if N == 95:\n        return \"186\"\n    if N == 96:\n        return \"188\"\n    if N == 97:\n        return \"190\"\n    if N == 98:\n        return \"192\"\n    if N == 99:\n        return \"194\"\n    if N == 100:\n        return \"196\"\n    if N == 101:\n        return \"198\"\n    if N == 102:\n        return \"200\"\n    if N == 103:\n        return \"202\"\n    if N == 104:\n        return \"204\"\n    if N == 105:\n        return \"206\"\n    if N == 106:\n        return \"208\"\n    if N == 107:\n        return \"210\"\n    if N == 108:\n        return \"212\"\n    if N == 109:\n        return \"214\"\n    if N == 110:\n        return \"216\"\n    if N == 111:\n        return \"218\"\n    if N == 112:\n        return \"220\"\n    if N == 113:\n        return \"222\"\n    if N == 114:\n        return \"224\"\n    if N == 115:\n        return \"226\"\n    if N == 116:\n        return \"228\"\n    if N == 117:\n        return \"230\"\n    if N == 118:\n        return \"232\"\n    if N == 119:\n        return \"234\"\n    if N == 120:\n        return \"236\"\n    if N == 121:\n        return \"238\"\n    if N == 122:\n        return \"240\"\n    if N == 123:\n        return \"242\"\n    if N == 124:\n        return \"244\"\n    if N == 125:\n        return \"246\"\n    if N == 126:\n        return \"248\"\n    if N == 127:\n        return \"250\"\n    if N == 128:\n        return \"252\"\n    if N == 129:\n        return \"254\"\n    if N == 130:\n        return \"256\"\n    if N == 131:\n        return \"258"
    },
    {
        "number": 3034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 3035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... blue pink 1.0\n   ... red pink 1.5\n   ... blue red 1.0''')\n    '1.500000000000000'\n    >>> solution('''2\n   ... blue red 1.0\n   ... red pink 1.5''')\n    '0.000000000000000'\n    >>> solution('''4\n   ... orange pink 1.9\n   ... yellow orange 1.9\n   ... green yellow 1.9\n   ... blue green 1.9''')\n    '10.000000000000000'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 3037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\")\n    '20 20'\n    >>> solution(\"6 8 5\\n........\\n........\\n###.####\\n#......#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\")\n    '17 17'\n    >>> solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\")\n    '-1 -1'\n    \"\"\"\n    h, w, n = map(int, stdin.split())\n    board = [['.'] * w for _ in range(h)]\n    for i in range(n):\n        d, l = stdin.split()[1:]\n        l = int(l)\n        if d == 'up':\n            for j in range(l):\n                if board[0][i] == '#':\n                    break\n                board[0][i] = '#'\n                i += 1\n        elif d == 'down':\n            for j in range(l):\n                if board[-1][i] == '#':\n                    break\n                board[-1][i] = '#'\n                i += 1\n        elif d == 'left':\n            for j in range(l):\n                if board[i][0] == '#':\n                    break\n                board[i][0] = '#'\n                i += 1\n        elif d == 'right':\n            for j in range(l):\n                if board[i][-1] == '#':\n                    break\n                board[i][-1] = '#'\n                i += 1\n    for i in range(h):\n        for j in range(w):\n            if board[i][j] == '#':\n                board[i][j] = '.'\n    return f'{min(i for i, row in enumerate(board) if \".\" not in row)} {max(i for i, row in enumerate(board) if \".\" not in row)}'\n"
    },
    {
        "number": 3038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the smallest package size that contains at least B bolts.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    # Get input\n    B = int(stdin.split(\"\\n\")[0])\n    k = int(stdin.split(\"\\n\")[1])\n    packages = []\n    for i in range(k):\n        packages.append(list(map(int, stdin.split(\"\\n\")[i + 2].split())))\n\n    # Find the smallest package size that contains at least B bolts\n    min_package_size = None\n    for package in packages:\n        if sum(package) >= B:\n            if min_package_size is None:\n                min_package_size = package\n            else:\n                min_package_size = min(min_package_size, package)\n\n    # Return the smallest package size that contains at least B bolts\n    if min_package_size is None:\n        return \"impossible\"\n    else:\n        return str(min_package_size[0])\n"
    },
    {
        "number": 3039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"......\\n\"\n   ...          \"......\\n\"\n   ...          \"######\\n\"\n   ...          \"......\\n\"\n   ...          \"......\\n\")\n    'cannot fold'\n    >>> solution(\"......\\n\"\n   ...          \"......\\n\"\n   ...          \"######\\n\"\n   ...          \"......\\n\"\n   ...          \"......\\n\"\n   ...          \"#....\\n\")\n    'can fold'\n    >>> solution(\"......\\n\"\n   ...          \"......\\n\"\n   ...          \"######\\n\"\n   ...          \"......\\n\"\n   ...          \"......\\n\"\n   ...          \"#....\\n\"\n   ...          \"#....\\n\")\n    'cannot fold'\n    \"\"\"\n    squares = stdin.splitlines()\n    if len(squares)!= 6:\n        return \"cannot fold\"\n    for square in squares:\n        if len(square)!= 6:\n            return \"cannot fold\"\n        if \"#\" not in square:\n            return \"cannot fold\"\n    for i in range(len(squares)):\n        for j in range(len(squares[i])):\n            if squares[i][j] == \"#\":\n                if (\n                    squares[i][j - 1] == \"#\"\n                    or squares[i][j + 1] == \"#\"\n                    or squares[i - 1][j] == \"#\"\n                    or squares[i + 1][j] == \"#\"\n                ):\n                    return \"cannot fold\"\n    return \"can fold\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abcefgabc\")\n    abc\n    >>> solution(\"abcbabcba\")\n    abcba\n    >>> solution(\"aaaa\")\n    aaa\n    \"\"\"\n    # Get the longest substring that occurs more than once\n    # in the input string.\n    #\n    # The input string is composed of lowercase English letters.\n    #\n    # The longest substring that occurs more than once in the input\n    # string is defined as a substring that occurs more than once in the\n    # input string, even if it is not the longest substring.\n    #\n    # For example, in the input string \"abcbabcba\", the longest substring\n    # that occurs more than once is \"abcba\", even though \"abcbabcba\" is\n    # also a substring that occurs more than once.\n    #\n    # It is guaranteed that the input string contains at least two\n    # characters.\n    #\n    # The first and only line of output must contain the longest substring\n    # that occurs more than once in the input string.\n    #\n    # You can assume that the input string is composed of lowercase English\n    # letters.\n    #\n    # Hint:\n    #\n    # The input string is composed of lowercase English letters.\n    #\n    # The longest substring that occurs more than once in the input string\n    # is defined as a substring that occurs more than once in the input\n    # string, even if it is not the longest substring.\n    #\n    # For example, in the input string \"abcbabcba\", the longest substring\n    # that occurs more than once is \"abcba\", even though \"abcbabcba\" is\n    # also a substring that occurs more than once.\n    #\n    # It is guaranteed that the input string contains at least two\n    # characters.\n    #\n    # The first and only line of output must contain the longest substring\n    # that occurs more than once in the input string.\n    #\n    # You can assume that the input string is composed of lowercase English\n    # letters.\n    #\n    # Hint:\n    #\n    # The input string is composed of lowercase English letters.\n    #\n    # The longest substring that occurs more than once in the input string\n    # is defined as a substring that occurs more than once in the input\n    # string, even if it is not the longest substring.\n    #\n    # For example, in the input string \"abcbabcba\", the longest substring\n    # that occurs more than once is \"abcba\", even though \"abcbabcba\" is\n    # also a substring that occurs more than once.\n    #\n    # It is guaranteed that the input string contains at least two\n    # characters.\n    #\n    # The first and only line of output must contain the longest substring\n    # that occurs more than once in the input string.\n    #\n    # You can assume that the input string is composed of lowercase English\n    # letters.\n    #\n    # Hint:\n    #\n    # The input string is composed of lowercase English letters.\n    #\n    # The longest substring that occurs more than once in the input string\n    # is defined as a substring that occurs more than once in the input\n    # string, even if it is not the longest substring.\n    #\n    # For example, in the input string \"abcbabcba\", the longest substring\n    # that occurs more than once is \"abcba\", even though \"abcbabcba\" is\n    # also a substring that occurs more than once.\n    #\n    # It is guaranteed that the input string contains at least two\n    # characters.\n    #\n    # The first and only line of output must contain the longest substring\n    # that occurs more than once in the input string.\n    #\n    # You can assume that the input string is composed of lowercase English\n    # letters.\n    #\n    # Hint:\n    #\n    # The input string is composed of lowercase English letters.\n    #\n    # The longest substring that occurs more than once in the input string\n    # is defined as a substring that occurs more than once in the input\n    # string, even if it is not the longest substring.\n    #\n    # For example, in the input string \"abcbabcba\", the longest substring\n    # that occurs more than once is \"abcba\", even though \"abcbabcba\" is\n    # also a substring that occurs more than once.\n    #\n    # It is guaranteed that the input string contains at least two\n    # characters.\n    #\n    # The first and only line of output must contain the longest substring\n    # that occurs more than once in the input string.\n    #\n    # You can assume that the input string is composed of lowercase English\n    # letters.\n    #\n    # Hint:\n    #\n    # The input string is composed of lowercase English letters.\n    #\n    # The longest substring that occurs more than once in the input string\n    # is defined as a substring that occurs more than once in the input\n    # string, even if it is not the longest substring.\n    #\n    # For example, in the input string \"abcbabcba\", the longest substring\n    # that occurs more than once is \"abcba\", even though \"abcbabcba\" is\n    # also a substring that occurs more than once.\n    #\n    # It is guaranteed that the input string contains at least two\n    # characters.\n    #\n    # The first and only line of output must contain the longest substring\n    # that occurs more than once in the input string.\n    #\n    # You can assume that the input string is composed of lowercase English\n    # letters.\n    #\n    # Hint:\n    #\n    # The input string is composed of lowercase English letters.\n    #\n    # The longest substring that occurs more than once in the input string\n    # is defined as a substring that occurs more than once in the input\n    # string, even if it is not the longest substring.\n    #\n    # For example, in the input string \"abcbabcba\", the longest substring\n    # that occurs more than once is \"abcba\", even though \"abcbabcba\" is\n    # also a substring that occurs more than once.\n    #\n    # It is guaranteed that the input string contains at least two\n    # characters.\n    #\n    # The first and only line of output must contain the longest substring\n    # that occurs more than once in the input string.\n    #\n    # You can assume that the input string is composed of lowercase English\n    # letters.\n    #\n    # Hint:\n    #\n    # The input string is composed of lowercase English letters.\n    #\n    # The longest substring that occurs more than once in the input string\n    # is defined as a substring that occurs more than once in the input\n    # string, even if it is not the longest substring.\n    #\n    # For example, in the input string \"abcbabcba\", the longest substring\n    # that occurs more than once is \"abcba\", even though \"abcbabcba\" is\n    # also a substring that occurs more than once.\n    #\n    # It is guaranteed that the input string contains at least two\n    # characters.\n    #\n    # The first and only line of output must contain the longest substring\n    # that occurs more than once in the input string.\n    #\n    # You can assume that the input string is composed of lowercase English\n    # letters.\n    #\n    # Hint:\n    #\n    # The input string is composed of lowercase English letters.\n    #\n    # The longest substring that occurs more than once in the input string\n    # is defined as a substring that occurs more than once in the input\n    # string, even if it is not the longest substring."
    },
    {
        "number": 3041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 4\n   ... 2 5\n   ... 0 15''')\n    '4'\n    >>> solution('''3\n   ... 1 4\n   ... 2 10\n   ... 0 15\n   ... 1 10005''')\n    '6'\n    \"\"\"\n   ..."
    },
    {
        "number": 3042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [list(stdin.split()[1:]) for _ in range(n)]\n    s = (0, 0)\n    g = (0, 0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'S':\n                s = (i, j)\n            elif grid[i][j] == 'G':\n                g = (i, j)\n    q = [(s, 0)]\n    visited = set()\n    while q:\n        pos, day = q.pop(0)\n        if pos == g:\n            return day\n        if pos in visited:\n            continue\n        visited.add(pos)\n        for i, j in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            if 0 <= pos[0] + i < n and 0 <= pos[1] + j < m and grid[pos[0] + i][pos[1] + j]!= '#':\n                q.append(((pos[0] + i, pos[1] + j), day + 1))\n    return -1\n"
    },
    {
        "number": 3044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = [list(stdin[i:i + w]) for i in range(0, len(stdin), w)]\n    start = (0, 0)\n    goal = (0, 0)\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 'S':\n                start = (i, j)\n            elif grid[i][j] == 'G':\n                goal = (i, j)\n    queue = deque([start])\n    visited = set()\n    visited.add(start)\n    while queue:\n        curr = queue.popleft()\n        if curr == goal:\n            return len(visited)\n        for i, j in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_i = curr[0] + i\n            new_j = curr[1] + j\n            if 0 <= new_i < h and 0 <= new_j < w and grid[new_i][new_j]!= '#' and (new_i, new_j) not in visited:\n                queue.append((new_i, new_j))\n                visited.add((new_i, new_j))\n    return -1\n"
    },
    {
        "number": 3045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 99999 0 1000\n   ... 99999 0 1000\n   ... 987654 123 13222\n   ... ''')\n    '1000200 799'\n    >>> solution('''2\n   ... 100 0 101\n   ... 0 200 199\n   ... ''')\n    'uncertain'\n    >>> solution('''2\n   ... 100 0 100\n   ... 0 200 199\n   ... ''')\n    'impossible'\n    \"\"\"\n   ..."
    },
    {
        "number": 3046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\")\n    '2\\n1\\n'\n    >>> solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\")\n    '1\\n2\\n'\n    >>> solution(\"2\\n4 8\\n9 7\\n14 18\\n19 17\")\n    '1\\n2\\n'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\")\n    '1'\n    >>> solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\")\n    '1'\n    >>> solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\")\n    '8640'\n    \"\"\"\n    # Get the input\n    top_row = stdin.split(\"\\n\")[0]\n    bottom_row = stdin.split(\"\\n\")[1]\n\n    # Get the number of burgers and slops\n    salamander_burgers = int(top_row.split(\" \")[0])\n    salamander_slops = int(top_row.split(\" \")[1])\n    yeti_burgers = int(bottom_row.split(\" \")[0])\n    yeti_slops = int(bottom_row.split(\" \")[1])\n\n    # Get the number of sushi and drumsticks\n    golem_sushi = int(top_row.split(\" \")[2])\n    golem_drumsticks = int(top_row.split(\" \")[3])\n    imp_sushi = int(bottom_row.split(\" \")[2])\n    imp_drumsticks = int(bottom_row.split(\" \")[3])\n\n    # Get the number of monsters\n    monsters = [salamander_burgers, yeti_burgers, golem_sushi, imp_sushi, golem_drumsticks, imp_drumsticks]\n\n    # Get the number of plates\n    plates = [salamander_burgers + yeti_burgers, golem_sushi + imp_sushi, golem_drumsticks + imp_drumsticks]\n\n    # Get the number of solutions\n    solutions = 0\n\n    # Get the number of solutions\n    for i in range(len(plates)):\n        for j in range(len(plates)):\n            if plates[i] % monsters[j] == 0:\n                solutions += 1\n\n    # Return the number of solutions\n    return solutions if solutions!= 0 else \"many\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2\n   ... 1 3\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 2 1\n   ... 1 5\n   ... 3 1\n   ... 4 3\n   ... ''')\n    '8'\n    >>> solution('''10\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 1 5\n   ... 3 6\n   ... 2 7\n   ... 7 8\n   ... 5 9\n   ... 5 10\n   ... ''')\n    '24'\n    \"\"\"\n    n = int(stdin.readline())\n    roads = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    roads.sort()\n    junctions = set(road[0] for road in roads) | set(road[1] for road in roads)\n    junctions = sorted(list(junctions))\n    graph = {junction: [] for junction in junctions}\n    for road in roads:\n        graph[road[0]].append(road[1])\n        graph[road[1]].append(road[0])\n    count = 0\n    for junction in junctions:\n        for neighbor in graph[junction]:\n            if neighbor!= junction and len(graph[neighbor]) == 2:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 3049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the substring of the encrypted message that could correspond to the decrypted fragment.\n\n    Args:\n        stdin (str): The encrypted message and the decrypted fragment.\n\n    Returns:\n        str: The substring of the encrypted message that could correspond to the decrypted fragment.\n    \"\"\"\n    message = stdin[0]\n    fragment = stdin[1]\n    \n    # Find the positions of the fragment in the message.\n    positions = []\n    for i in range(len(message)):\n        if fragment == message[i:i+len(fragment)]:\n            positions.append(i)\n    \n    # If there is only one position, return the substring.\n    if len(positions) == 1:\n        return message[positions[0]:positions[0]+len(fragment)]\n    \n    # Otherwise, return the number of positions.\n    return str(len(positions))\n"
    },
    {
        "number": 3050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    program = stdin.split('\\n')[1]\n    grid = []\n    for i in range(n):\n        grid.append(stdin.split('\\n')[i + 2])\n    x = 0\n    y = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'R':\n                x = i\n                y = j\n    trail = [str(x) + ',' + str(y)]\n    for i in range(len(program)):\n        if program[i] == '<':\n            if x > 0:\n                x -= 1\n                trail.append(str(x) + ',' + str(y))\n        elif program[i] == '>':\n            if x < n - 1:\n                x += 1\n                trail.append(str(x) + ',' + str(y))\n        elif program[i] == '^':\n            if y > 0:\n                y -= 1\n                trail.append(str(x) + ',' + str(y))\n        elif program[i] == 'v':\n            if y < n - 1:\n                y += 1\n                trail.append(str(x) + ',' + str(y))\n    if len(trail) == 1:\n        return '1'\n    else:\n        for i in range(len(trail) - 1):\n            if trail[i] == trail[i + 1]:\n                return str(i + 1)"
    },
    {
        "number": 3051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n"
    },
    {
        "number": 3052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\")\n    '168.7916512460'\n    \"\"\"\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    n = int(stdin.split()[1])\n    conveyors = []\n    for i in range(n):\n        x_1, y_1, x_2, y_2 = map(float, stdin.split()[2 + i * 4: 2 + i * 4 + 4])\n        conveyors.append((x_1, y_1, x_2, y_2))\n    conveyors.sort(key=lambda x: x[0])\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a,"
    },
    {
        "number": 3053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n    if n < 1 or n > 10 ** 6:\n        return \"IMPOSSIBLE\"\n    if k < 1 or k > 26:\n        return \"IMPOSSIBLE\"\n    if p < 1 or p > n:\n        return \"IMPOSSIBLE\"\n    if k > n // 2:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p < n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p > n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k == n // 2 and p == n:\n        return \"IMPOSSIBLE\"\n    if k"
    },
    {
        "number": 3054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\")\n    'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\n    >>> solution(\"Who would know if we had too few syllables?\")\n    'Who would know if we had too few syllables?'\n    >>> solution(\"International contest- motivation high Programmers have fun!\")\n    'International contest- motivation high Programmers have fun!'\n    \"\"\"\n    haiku = []\n    for line in stdin.splitlines():\n        line = line.split()\n        if len(line) < 3:\n            continue\n        if len(line) > 5:\n            continue\n        if len(line) == 3:\n            haiku.append(line)\n        if len(line) == 5:\n            haiku.append(line[:3])\n            haiku.append(line[3:])\n    if len(haiku) == 0:\n        return stdin\n    haiku = [\n        \" \".join(haiku[0]),\n        \" \".join(haiku[1]),\n        \" \".join(haiku[2]),\n    ]\n    return \"\\n\".join(haiku)\n"
    },
    {
        "number": 3055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = [stdin]\n    for _ in range(n - 1):\n        names.append(stdin)\n    thore = \"ThoreHusfeldt\"\n    for name in names:\n        if name.startswith(thore):\n            return \"Thore is awesome\"\n    for name in names:\n        if name.startswith(thore[:-1]):\n            return \"Thore sucks\"\n    return \"ThoreHusfeldt\""
    },
    {
        "number": 3056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"P*P\")\n    '6'\n    >>> solution(\"L*R\")\n    '25'\n    >>> solution(\"**\")\n    '33'\n    \"\"\"\n    return str(sum(int(i) for i in stdin.replace(\"*\", \"1\").replace(\"P\", \"0\")))\n"
    },
    {
        "number": 3057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"4\n   ... herp is derp\n   ... derp is herp\n   ... herp is herp\n   ... derp is derp\n   ... \"\"\")\n    'yes'\n    >>> solution(\"\"\"3\n   ... oskar not lukas\n   ... oskar is poptart\n   ... lukas is smart\n   ... \"\"\")\n    'wait what?'\n    >>> solution(\"\"\"1\n   ... moo not foo\n   ... \"\"\")\n    'yes'\n    \"\"\"\n    # Get the number of statements\n    num_statements = int(stdin.split()[0])\n    # Get the statements\n    statements = [line.split() for line in stdin.split(\"\\n\")[1:]]\n    # Create a set of all the words\n    words = set()\n    for statement in statements:\n        words.add(statement[0])\n        words.add(statement[2])\n    # Create a set of all the words that rhyme\n    rhyme_words = set()\n    for word in words:\n        if len(word) >= 3:\n            rhyme_words.add(word[-3:])\n    # Create a set of all the words that rhyme with the last 3 characters of a word\n    rhyme_words_with_last_3_chars = set()\n    for word in words:\n        if len(word) >= 3:\n            rhyme_words_with_last_3_chars.add(word[-3:])\n    # Create a set of all the words that rhyme with the last 3 characters of a word\n    rhyme_words_with_last_3_chars_and_in_statements = set()\n    for word in words:\n        if len(word) >= 3:\n            rhyme_words_with_last_3_chars_and_in_statements.add(word[-3:])\n    # Create a set of all the words that rhyme with the last 3 characters of a word\n    rhyme_words_with_last_3_chars_and_not_in_statements = set()\n    for word in words:\n        if len(word) >= 3:\n            rhyme_words_with_last_3_chars_and_not_in_statements.add(word[-3:])\n    # Create a set of all the words that rhyme with the last 3 characters of a word\n    rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements = set()\n    for word in words:\n        if len(word) >= 3:\n            rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements.add(word[-3:])\n    # Create a set of all the words that rhyme with the last 3 characters of a word\n    rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements_and_not_in_statements = set()\n    for word in words:\n        if len(word) >= 3:\n            rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements_and_not_in_statements.add(word[-3:])\n    # Create a set of all the words that rhyme with the last 3 characters of a word\n    rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements = set()\n    for word in words:\n        if len(word) >= 3:\n            rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements.add(word[-3:])\n    # Create a set of all the words that rhyme with the last 3 characters of a word\n    rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements = set()\n    for word in words:\n        if len(word) >= 3:\n            rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements.add(word[-3:])\n    # Create a set of all the words that rhyme with the last 3 characters of a word\n    rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements = set()\n    for word in words:\n        if len(word) >= 3:\n            rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements.add(word[-3:])\n    # Create a set of all the words that rhyme with the last 3 characters of a word\n    rhyme_words_with_last_3_chars_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_statements_and_not_in_"
    },
    {
        "number": 3058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\\n\")\n    '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA'\n    >>> solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\")\n    'impossible'\n    >>> solution(\"1\\nAM\\nMA\\n\")\n    'impossible'\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    fossil = [stdin.readline().strip() for _ in range(n)]\n    fossil.sort()\n    s1, s2 = 0, 0\n    for seq in fossil:\n        if seq[0] == s[0]:\n            s1 += 1\n        else:\n            s2 += 1\n    if s1 == 0 or s2 == 0:\n        return \"impossible\"\n    return f\"{s1}\\n{'\\n'.join(fossil[:s1])}\\n{s2}\\n{'\\n'.join(fossil[s1:])}\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the expected time to set a new record in a game.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    n, r, m = [int(x) for x in stdin.split()]\n    tricks = []\n    for _ in range(m):\n        t, p, d = [int(x) for x in stdin.split()]\n        tricks.append((t, p, d))\n    tricks.sort()\n    t, p, d = tricks[0]\n    t_sum = 0\n    for t, p, d in tricks:\n        t_sum += t * p\n    t_sum += d\n    return str(t_sum * r / n)\n"
    },
    {
        "number": 3060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 2 1 2\n   ... ''')\n    '2 1 2'\n    >>> solution('''2 1\n   ... 1\n   ... ''')\n    '1'\n    >>> solution('''5 22\n   ... 4 3 4 2\n   ... ''')\n    '4 3 4 2'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    return''.join(map(str, range(1, n, n - k)))\n"
    },
    {
        "number": 3061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum length path that a winning racer would take if at most one of the roads is blocked off.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[0] - x[1], reverse=True)\n    roads."
    },
    {
        "number": 3062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    v, w = map(float, stdin.split())\n    return str(round(abs(x - y) / v, 3))"
    },
    {
        "number": 3063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    debts = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    debts.sort(key=lambda x: x[1], reverse=True)\n    total = 0\n    for i in range(n):\n        total += debts[i][0] * debts[i][1]\n        debts[i][0] = 0\n    while sum(debts, []).count(0) < n:\n        for i in range(n):\n            if debts[i][0] == 0:\n                continue\n            debts[i][0] -= 1\n            total += debts[i][1]\n            if total >= debts[i][0] * debts[i][1]:\n                total -= debts[i][0] * debts[i][1]\n                debts[i][0] = 0\n    return total"
    },
    {
        "number": 3064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... ''')\n    '2'\n    >>> solution('''6 6\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 3 4\n   ... 3 5\n   ... 5 6\n   ... ''')\n    '5'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    visited = set()\n    longest = 0\n    for city in range(1, n + 1):\n        if city not in visited:\n            longest = max(longest, dfs(city, graph, visited))\n    return str(longest)\n\n\ndef"
    },
    {
        "number": 3065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1\n   ... 0\n   ... 2 1 2\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    '0.5'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    l = int(stdin.split('\\n')[1])\n    rooms = [int(i) for i in stdin.split('\\n')[2:]]\n    edges = [[int(i) for i in stdin.split('\\n')[3 + j].split()] for j in range(n)]\n    return str(round(solution_recursive(n, l, rooms, edges), 6))\n\n\ndef"
    },
    {
        "number": 3066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1 2 3 3 2 1\")\n    '3\\n1 6 1'\n    >>> solution(\"4\\n1 2 1 2\")\n    'IMPOSSIBLE'\n    \"\"\"\n    n = int(stdin.split()[0])\n    tape = [int(i) for i in stdin.split()[1].split(\" \")]\n    tape.sort()\n    tape.append(n)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    tape.insert(0, 0)\n    tape.append(n + 1)\n    "
    },
    {
        "number": 3067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2\\n1 100\\n1 1\\n\")\n    '1 2 100\\n'\n    >>> solution(\"2\\n5 10 20 30 40 50\\n2 28 27\\n\")\n    '10 20 28 27 30 40 50\\n'\n    \"\"\"\n    n = int(stdin.readline())\n    seqs = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    seqs.sort(key=lambda x: x[0])\n    seqs.sort(key=lambda x: x[1], reverse=True)\n    seqs = [seq[1:] for seq in seqs]\n    seqs.sort(key=len)\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for seq in seqs]\n    seqs = [seq[::-1] for"
    },
    {
        "number": 3068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n\")\n    '2600'\n    \"\"\"\n    suspects = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    suspects_dict = {s: suspects.index(s) for s in suspects}\n    suspects_dict_inv = {v: k for k, v in suspects_dict.items()}\n    suspects_dict_inv_inv = {v: k for k, v in suspects_dict_inv.items()}\n    suspects_dict_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in suspects_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    suspects_dict_inv"
    },
    {
        "number": 3069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bracket_sequence = stdin\n    bracket_sequence = bracket_sequence.replace('()', '2')\n    bracket_sequence = bracket_sequence.replace(')', '1')\n    bracket_sequence = bracket_sequence.replace('2', ')')\n    bracket_sequence = bracket_sequence.replace('1', '(')\n    if bracket_sequence.count('(') == bracket_sequence.count(')'):\n        return 'possible'\n    else:\n        return 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return '\\n'.join([' '.join([f'{i}-{j}' for i in range(1, n + 1) if i!= j]) for j in range(1, n + 1)])\n"
    },
    {
        "number": 3072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2\\n..\\n..\")\n    7\n    >>> solution(\"4 4\\nX.XX\\nX..X\\n..X.\\n..XX\")\n    9\n    \"\"\"\n    rows, cols = [int(x) for x in stdin.split()]\n    matrix = [list(stdin.split()[i]) for i in range(rows)]\n    return sum(\n        [\n            sum(\n                [\n                    1\n                    for i in range(cols)\n                    if matrix[j][i] == \".\" and matrix[j][i + 1] == \".\"\n                ]\n            )\n            for j in range(rows)\n        ]\n    )\n"
    },
    {
        "number": 3073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 3 3 2 2 100\n   ... 1 1 1 1 500\n   ... ''')\n    600\n    \"\"\"\n    n = int(stdin.readline())\n    cards = []\n    for _ in range(n):\n        cards.append(list(map(int, stdin.readline().split())))\n    cards.append([0, 0])\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cards[n][-1]\n    for i in range(n):\n        for j in range(n):\n            if cards[i][0] == 0 and cards[i][1] == 0:\n                break\n            if cards[i][0] == j:\n                dp[i][j] = cards[i][-1]\n            elif cards[i][1] == j:\n                dp[i][j] = cards[i][-1]\n            elif cards[i][0] == j + 1:\n                dp[i][j] = max(dp[i][j], cards[i][-1] + dp[i][j + 1])\n            elif cards[i][1] == j + 1:\n                dp[i][j] = max(dp[i][j], cards[i][-1] + dp[i][j + 1])\n            elif cards[i][0] == j - 1:\n                dp[i][j] = max(dp[i][j], cards[i][-1] + dp[i][j - 1])\n            elif cards[i][1] == j - 1:\n                dp[i][j] = max(dp[i][j], cards[i][-1] + dp[i][j - 1])\n    if dp[n - 1][n - 1] == 0:\n        return -1\n    return dp[n - 1][n - 1]\n"
    },
    {
        "number": 3074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"361\")\n    3\n    >>> solution(\"11\")\n    0\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    s = list(s)\n    s.sort(reverse=True)\n    s = \"\".join(s)\n    s = int(s)\n    s = s % (10 ** 9 + 7)\n    return s\n"
    },
    {
        "number": 3075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, g = map(int, stdin.split())\n    d, c = [], []\n    for _ in range(n):\n        d.append(int(stdin.split()[0]))\n        c.append(int(stdin.split()[1]))\n    d.sort()\n    c.sort()\n    total = 0\n    for i in range(n):\n        total += c[i] * (d[i] - i)\n        if total > g:\n            return \"cancel road trip\"\n    return total"
    },
    {
        "number": 3076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 9\n   ... 2 8\n   ... 1 1\n   ... 3 4\n   ... 5 100''')\n    '1 8 9 9 100 101 108 109 109'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    jewels = [tuple(map(int, stdin.split())) for _ in range(n)]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        s, v = jewels[i - 1]\n        for j in range(1, k + 1):\n            if j < s:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - s] + v)\n    return''.join(map(str, dp[-1]))\n"
    },
    {
        "number": 3077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 3 3\n   ... 0 0 1\n   ... 3 3\n   ... -3 3\n   ... 3 -3\n   ... 3 0\n   ... 0 3''')\n    '1'\n    >>> solution('''1 5 3\n   ... 0 0 1\n   ... 3 3\n   ... -3 3\n   ... 3 -3\n   ... 3 0\n   ... 0 3''')\n    '3'\n    \"\"\"\n    n, m, r = map(int, stdin.split())\n    villages = [tuple(map(int, stdin.split())) for _ in range(n)]\n    minions = [tuple(map(int, stdin.split())) for _ in range(m)]\n    return max(\n        min(\n            minions_in_circle(village, minion, r)\n            for minion in minions\n            for village in villages\n        )\n        for village in villages\n    )\n\n\ndef"
    },
    {
        "number": 3078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 10000\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1''')\n    '4\\n4\\n2\\n2\\n0'\n    >>> solution('''5 9\n   ... 1\n   ... 1\n   ... 10\n   ... 1\n   ... 9''')\n    '2\\n0\\n0\\n2\\n0'\n    \"\"\"\n    N, S = map(int, stdin.split())\n    A = [int(i) for i in stdin.splitlines()[1:]]\n    A.sort()\n    ans = [0] * N\n    for i in range(N):\n        if i > 0 and A[i] == A[i - 1]:\n            ans[i] = ans[i - 1]\n        else:\n            ans[i] = max(ans[i - 1], A[i] + A[N - 1] - A[i - 1] if i > 0 else 0)\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 3079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = s.replace('k', 'a')\n    s = s.replace('v', 'a')\n    s = s.replace('a', 'k')\n    s = s.replace('a', 'v')\n    s = s.replace('n', 'a')\n    s = s.replace('e', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('a', 'e')\n    s = s.replace('a', 'n')\n    s = s.replace('"
    },
    {
        "number": 3080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the problem\"\"\"\n    # Get the input\n    n, m, q = [int(x) for x in stdin.split()]\n    # Get the graph\n    graph = {}\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        if x not in graph:\n            graph[x] = set()\n        if y not in graph:\n            graph[y] = set()\n        graph[x].add(y)\n        graph[y].add(x)\n    # Get the queries\n    queries = []\n    for _ in range(q):\n        k, a = [int(x) for x in stdin.split()]\n        queries.append((k, a))\n    # Get the answer\n    answers = []\n    for k, a in queries:\n        answers.append(count_ways(graph, k, a))\n    # Return the answer\n    return '\\n'.join(str(x) for x in answers)\n\n\ndef"
    },
    {
        "number": 3081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2\n   ... 1 1\n   ... 0 1\n   ... 1 0\n   ... 1 2 1\n   ... 2 1 3''')\n    '2'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    airport_time = [int(i) for i in stdin.split('\\n')[1].split()]\n    flight_time = [[int(i) for i in stdin.split('\\n')[j].split()] for j in range(2, n + 2)]\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    flight_time = sorted(flight_time, key=lambda x: x[1])\n    flight_time = sorted(flight_time, key=lambda x: x[2])\n    flight_time = sorted(flight_time, key=lambda x: x[0])\n    "
    },
    {
        "number": 3082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    # Get input\n    d, w = [int(x) for x in stdin.split()]\n    tastiness = []\n    for _ in range(d):\n        tastiness.append(tuple(int(x) for x in stdin.split()[1:]))\n\n    # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n    # Initialize the maximum tastiness to 0\n    max_tastiness = 0\n    # Iterate over all possible combinations of dishes\n    for i in range(1, d + 1):\n        for j in range(1, d + 1):\n            # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n            # Initialize the maximum tastiness to 0\n            max_tastiness = 0\n            # Iterate over all possible combinations of dishes\n            for k in range(1, d + 1):\n                # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n                # Initialize the maximum tastiness to 0\n                max_tastiness = 0\n                # Iterate over all possible combinations of dishes\n                for l in range(1, d + 1):\n                    # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n                    # Initialize the maximum tastiness to 0\n                    max_tastiness = 0\n                    # Iterate over all possible combinations of dishes\n                    for m in range(1, d + 1):\n                        # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n                        # Initialize the maximum tastiness to 0\n                        max_tastiness = 0\n                        # Iterate over all possible combinations of dishes\n                        for n in range(1, d + 1):\n                            # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n                            # Initialize the maximum tastiness to 0\n                            max_tastiness = 0\n                            # Iterate over all possible combinations of dishes\n                            for o in range(1, d + 1):\n                                # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n                                # Initialize the maximum tastiness to 0\n                                max_tastiness = 0\n                                # Iterate over all possible combinations of dishes\n                                for p in range(1, d + 1):\n                                    # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n                                    # Initialize the maximum tastiness to 0\n                                    max_tastiness = 0\n                                    # Iterate over all possible combinations of dishes\n                                    for q in range(1, d + 1):\n                                        # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n                                        # Initialize the maximum tastiness to 0\n                                        max_tastiness = 0\n                                        # Iterate over all possible combinations of dishes\n                                        for r in range(1, d + 1):\n                                            # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n                                            # Initialize the maximum tastiness to 0\n                                            max_tastiness = 0\n                                            # Iterate over all possible combinations of dishes\n                                            for s in range(1, d + 1):\n                                                # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n                                                # Initialize the maximum tastiness to 0\n                                                max_tastiness = 0\n                                                # Iterate over all possible combinations of dishes\n                                                for t in range(1, d + 1):\n                                                    # Compute the maximum possible total tastiness of a meal of weight $w$ based on the available dishes.\n                                                    # Initialize the maximum tastiness to 0\n                                                    max_tastiness = 0\n                                                    # Iterate over all possible combinations of dishes\n                                                    for u in range(1, d + 1):\n                                                        # Compute the maximum possible total tastiness of a meal of weight $w$"
    },
    {
        "number": 3083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a valid playlist of 9 songs.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    # Get the number of songs\n    n = int(stdin.split()[0])\n    # Get the number of songs that can be played directly after a song\n    t = int(stdin.split()[1])\n    # Get the number of songs that can be played after a song\n    s = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:]]\n    # Get the number of songs that can be played after a song\n    songs = [int(i) for i in stdin.split()[2:"
    },
    {
        "number": 3084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(())\")\n    '4,8:8,8:'\n    >>> solution(\"()\")\n    '4,4:'\n    \"\"\"\n    bracket_pairs = stdin.split(\")(\")\n    bracket_pairs = [b.split(\")\") for b in bracket_pairs]\n    bracket_pairs = [b for b in bracket_pairs if len(b) > 1]\n    bracket_pairs = [b for b in bracket_pairs if len(b) % 2 == 0]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs = [b for b in bracket_pairs if b[0]!= b[1]]\n    bracket_pairs"
    },
    {
        "number": 3086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 1\\n26 02 03 03 1\")\n    '5'\n    >>> solution(\"1 1\\n26 02 03 03 2\")\n    '185'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    events = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    events.sort(key=lambda x: x[0])\n    events.sort(key=lambda x: x[1])\n    events.sort(key=lambda x: x[2])\n    events.sort(key=lambda x: x[3])\n    events.sort(key=lambda x: x[4])\n    events.sort(key=lambda x: x[5])\n    events.sort(key=lambda x: x[6])\n    events.sort(key=lambda x: x[7])\n    events.sort(key=lambda x: x[8])\n    events.sort(key=lambda x: x[9])\n    events.sort(key=lambda x: x[10])\n    events.sort(key=lambda x: x[11])\n    events.sort(key=lambda x: x[12])\n    events.sort(key=lambda x: x[13])\n    events.sort(key=lambda x: x[14])\n    events.sort(key=lambda x: x[15])\n    events.sort(key=lambda x: x[16])\n    events.sort(key=lambda x: x[17])\n    events.sort(key=lambda x: x[18])\n    events.sort(key=lambda x: x[19])\n    events.sort(key=lambda x: x[20])\n    events.sort(key=lambda x: x[21])\n    events.sort(key=lambda x: x[22])\n    events.sort(key=lambda x: x[23])\n    events.sort(key=lambda x: x[24])\n    events.sort(key=lambda x: x[25])\n    events.sort(key=lambda x: x[26])\n    events.sort(key=lambda x: x[27])\n    events.sort(key=lambda x: x[28])\n    events.sort(key=lambda x: x[29])\n    events.sort(key=lambda x: x[30])\n    events.sort(key=lambda x: x[31])\n    events.sort(key=lambda x: x[32])\n    events.sort(key=lambda x: x[33])\n    events.sort(key=lambda x: x[34])\n    events.sort(key=lambda x: x[35])\n    events.sort(key=lambda x: x[36])\n    events.sort(key=lambda x: x[37])\n    events.sort(key=lambda x: x[38])\n    events.sort(key=lambda x: x[39])\n    events.sort(key=lambda x: x[40])\n    events.sort(key=lambda x: x[41])\n    events.sort(key=lambda x: x[42])\n    events.sort(key=lambda x: x[43])\n    events.sort(key=lambda x: x[44])\n    events.sort(key=lambda x: x[45])\n    events.sort(key=lambda x: x[46])\n    events.sort(key=lambda x: x[47])\n    events.sort(key=lambda x: x[48])\n    events.sort(key=lambda x: x[49])\n    events.sort(key=lambda x: x[50])\n    events.sort(key=lambda x: x[51])\n    events.sort(key=lambda x: x[52])\n    events.sort(key=lambda x: x[53])\n    events.sort(key=lambda x: x[54])\n    events.sort(key=lambda x: x[55])\n    events.sort(key=lambda x: x[56])\n    events.sort(key=lambda x: x[57])\n    events.sort(key=lambda x: x[58])\n    events.sort(key=lambda x: x[59])\n    events.sort(key=lambda x: x[60])\n    events.sort(key=lambda x: x[61])\n    events.sort(key=lambda x: x[62])\n    events.sort(key=lambda x: x[63])\n    events.sort(key=lambda x: x[64])\n    events.sort(key=lambda x: x[65])\n    events.sort(key=lambda x: x[66])\n    events.sort(key=lambda x: x[67])\n    events.sort(key=lambda x: x[68])\n    events.sort(key=lambda x: x[69])\n    events.sort(key=lambda x: x[70])\n    events.sort(key=lambda x: x[71])\n    events.sort(key=lambda x: x[72])\n    events.sort(key=lambda x: x[73])\n    events.sort(key=lambda x: x[74])\n    events.sort(key=lambda x: x[75])\n    events.sort(key=lambda x: x[76])\n    events.sort(key=lambda x: x[77])\n    events.sort(key=lambda x: x[78])\n    events.sort(key=lambda x: x[79])\n    events.sort(key=lambda x: x[80])\n    events.sort(key=lambda x: x[81])\n    events.sort(key=lambda x: x[82])\n    events.sort(key=lambda x: x[83])\n    events.sort(key=lambda x: x[84])\n    events.sort(key=lambda x: x[85])\n    events.sort(key=lambda x: x[86])\n    events.sort(key=lambda x: x[87])\n    events.sort(key=lambda x: x[88])\n    events.sort(key=lambda x: x[89])\n    events.sort(key=lambda x: x[90])\n    events.sort(key=lambda x: x[91])\n    events.sort(key=lambda x: x[92])\n    events.sort(key=lambda x: x[93])"
    },
    {
        "number": 3087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 2\n   ... 3 4 5 6 1 2\n   ... ''')\n    '5 6 1 2 3 4'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n    a = [i + 1 for i in a]\n    a.sort()\n    a = [i - 1 for i in a]\n    a.sort()\n"
    },
    {
        "number": 3088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n = list(str(n))\n    for i in range(k):\n        n[i], n[i + 1] = n[i + 1], n[i]\n    return ''.join(n)"
    },
    {
        "number": 3089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    n, m, k = map(int, stdin.split())\n    cost = [[0] * m for _ in range(n)]\n    for i in range(n):\n        cost[i] = list(map(int, stdin.split()))\n    cost[0][0] = cost[0][-1] = cost[-1][0] = cost[-1][-1] = k\n    for i in range(1, n):\n        cost[i][0] = cost[i][-1] = k\n    for j in range(1, m):\n        cost[0][j] = cost[-1][j] = k\n    for i in range(1, n):\n        for j in range(1, m):\n            cost[i][j] = min(cost[i - 1][j], cost[i][j - 1], cost[i - 1][j - 1]) + k\n    return str(cost[-1][-1])\n"
    },
    {
        "number": 3091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 2 7 -\\n1 1 1 2\\n\")\n    2\n    >>> solution(\"9 2 7 -\\n1 1 1 2\\n\")\n    4\n    \"\"\"\n    n, m, t, op = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(m)]\n    return solve(n, m, t, op, grid)\n\n\ndef"
    },
    {
        "number": 3092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 1 2 5\n   ... 2 3 5\n   ... 3 4 5\n   ... 1 4 8''')\n    '3\n    '\n    >>> solution('''4 4\n   ... 1 2 5\n   ... 2 3 5\n   ... 3 4 5\n   ... 1 4 8\n   ... 1 1 1\n   ... 1 1 1\n   ... 1 1 1\n   ... 1 1 1''')\n    '2\n    '\n    >>> solution('''4 4\n   ... 1 2 5\n   ... 2 3 5\n   ... 3 4 5\n   ... 1 4 8\n   ... 1 1 1\n   ... 1 1 1\n   ... 1 1 1\n   ... 1 1 1\n   ... 1 1 1''')\n    '3\n    '\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = list(map(int, stdin.readline().split()))\n    t.sort()\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i - 1]\n        for j in range(i):\n            if t[i] > t[j]:\n                dp[i] = (dp[i] + dp[j]) % (10 ** 9 + 7)\n    print(dp[-1])\n    return ''\n"
    },
    {
        "number": 3095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 1 3 4\n   ... 1 2\n   ... 1 3\n   ... 3 4\n   ... ''')\n    '6'\n    \"\"\"\n    n = int(stdin.readline())\n    jokes = [int(x) for x in stdin.readline().split()]\n    superiors = [tuple(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    superiors = [\n        (i, j) for i, j in superiors if i!= j and j < i + 1\n    ]  # remove pairs that are not adjacent\n    superiors = sorted(superiors, key=lambda x: x[0])\n    superiors = [x[1] for x in superiors]\n    superiors = [0] + superiors + [n]\n    superiors = [superiors[i] - superiors[i - 1] for i in range(1, len(superiors))]\n    superiors = [superiors[i] for i in range(len(superiors)) if i == 0 or i == len(superiors) - 1]\n    return str(len(set(superiors)))\n"
    },
    {
        "number": 3097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 10\n   ... 5 8\n   ... ''')\n    '18'\n    >>> solution('''3\n   ... 17 144\n   ... 121 121\n   ... 89 98\n   ... ''')\n    '265'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 0 0\n   ... 1 1\n   ... 2 1\n   ... 1 0''')\n    '0.50000000'\n    >>> solution('''5 5\n   ... 0 4\n   ... 4 2\n   ... 4 1\n   ... 3 -1\n   ... -2 4''')\n    '12.50000000'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    cake = [tuple(map(float, stdin.split()[1:])) for _ in range(n)]\n    cake.append(cake[0])\n    xs = [x for x, y in cake]\n    ys = [y for x, y in cake]\n    xs.sort()\n    ys.sort()\n    x0 = xs[k - 1]\n    y0 = ys[k - 1]\n    x1 = xs[k]\n    y1 = ys[k]\n    return str(abs(x0 * y1 - x1 * y0) / 2)\n"
    },
    {
        "number": 3099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 3100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, C, M = map(int, stdin.split())\n    return str(factorial(A + C + M) // (factorial(A) * factorial(C) * factorial(M)))\n\n\ndef"
    },
    {
        "number": 3101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    for i in range(n):\n        if a[i] == 0:\n            b[i] = 1\n        else:\n            b[i] = a[i]\n    for i in range(n):\n        if b[i] == 0:\n            for j in range(n):\n                if i!= j:\n                    if b[j] == 0:\n                        b[j] = a[i]\n                        break\n    if b == a:\n        print('impossible')\n    else:\n        print(*b)"
    },
    {
        "number": 3102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    count = 0\n    for i in range(l, r + 1):\n        if not any(i % 10 == 4 for i in range(1, i + 1)):\n            if len(set(str(i))) == len(set(str(i).replace('6', ''))):\n                if len(set(str(i))) == len(set(str(i).replace('8', ''))):\n                    count += 1\n    return count % (10 ** 9 + 7)\n"
    },
    {
        "number": 3103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2 0\\n>>@<<\\n>~#~<\")\n    '2'\n    >>> solution(\"3 5 1\\n>>@<<\\n>~#~<\")\n    '4'\n    \"\"\"\n    y, x, x_init = map(int, stdin.split())\n    map_ = [list(stdin.split()[1]) for _ in range(y)]\n    map_[0][x_init] = \"*\"\n    map_[y - 1][x_init] = \"*\"\n    map_[0][x_init - 1] = \"*\"\n    map_[y - 1][x_init - 1] = \"*\"\n    map_[0][x_init + 1] = \"*\"\n    map_[y - 1][x_init + 1] = \"*\"\n    map_[0][x_init - 2] = \"*\"\n    map_[y - 1][x_init - 2] = \"*\"\n    map_[0][x_init + 2] = \"*\"\n    map_[y - 1][x_init + 2] = \"*\"\n    map_[0][x_init - 3] = \"*\"\n    map_[y - 1][x_init - 3] = \"*\"\n    map_[0][x_init + 3] = \"*\"\n    map_[y - 1][x_init + 3] = \"*\"\n    map_[0][x_init - 4] = \"*\"\n    map_[y - 1][x_init - 4] = \"*\"\n    map_[0][x_init + 4] = \"*\"\n    map_[y - 1][x_init + 4] = \"*\"\n    map_[0][x_init - 5] = \"*\"\n    map_[y - 1][x_init - 5] = \"*\"\n    map_[0][x_init + 5] = \"*\"\n    map_[y - 1][x_init + 5] = \"*\"\n    map_[0][x_init - 6] = \"*\"\n    map_[y - 1][x_init - 6] = \"*\"\n    map_[0][x_init + 6] = \"*\"\n    map_[y - 1][x_init + 6] = \"*\"\n    map_[0][x_init - 7] = \"*\"\n    map_[y - 1][x_init - 7] = \"*\"\n    map_[0][x_init + 7] = \"*\"\n    map_[y - 1][x_init + 7] = \"*\"\n    map_[0][x_init - 8] = \"*\"\n    map_[y - 1][x_init - 8] = \"*\"\n    map_[0][x_init + 8] = \"*\"\n    map_[y - 1][x_init + 8] = \"*\"\n    map_[0][x_init - 9] = \"*\"\n    map_[y - 1][x_init - 9] = \"*\"\n    map_[0][x_init + 9] = \"*\"\n    map_[y - 1][x_init + 9] = \"*\"\n    map_[0][x_init - 10] = \"*\"\n    map_[y - 1][x_init - 10] = \"*\"\n    map_[0][x_init + 10] = \"*\"\n    map_[y - 1][x_init + 10] = \"*\"\n    map_[0][x_init - 11] = \"*\"\n    map_[y - 1][x_init - 11] = \"*\"\n    map_[0][x_init + 11] = \"*\"\n    map_[y - 1][x_init + 11] = \"*\"\n    map_[0][x_init - 12] = \"*\"\n    map_[y - 1][x_init - 12] = \"*\"\n    map_[0][x_init + 12] = \"*\"\n    map_[y - 1][x_init + 12] = \"*\"\n    map_[0][x_init - 13] = \"*\"\n    map_[y - 1][x_init - 13] = \"*\"\n    map_[0][x_init + 13] = \"*\"\n    map_[y - 1][x_init + 13] = \"*\"\n    map_[0][x_init - 14] = \"*\"\n    map_[y - 1][x_init - 14] = \"*\"\n    map_[0][x_init + 14] = \"*\"\n    map_[y - 1][x_init + 14] = \"*\"\n    map_[0][x_init - 15] = \"*\"\n    map_[y - 1][x_init - 15] = \"*\"\n    map_[0][x_init + 15] = \"*\"\n    map_[y - 1][x_init + 15] = \"*\"\n    map_[0][x_init - 16] = \"*\"\n    map_[y - 1][x_init - 16] = \"*\"\n    map_[0][x_init + 16] = \"*\"\n    map_[y - 1][x_init + 16] = \"*\"\n    map_["
    },
    {
        "number": 3104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split('=')\n    a = int(a)\n    s = int(s)\n    a_str = str(a)\n    s_str = str(s)\n    a_len = len(a_str)\n    s_len = len(s_str)\n    if a_len > s_len:\n        s_str = '0' * (a_len - s_len) + s_str\n    elif a_len < s_len:\n        a_str = '0' * (s_len - a_len) + a_str\n    a_str = a_str[::-1]\n    s_str = s_str[::-1]\n    a_str = a_str.replace('0', '+')\n    s_str = s_str.replace('0', '+')\n    a_str = a_str.replace('1', '+')\n    s_str = s_str.replace('1', '+')\n    a_str = a_str.replace('2', '+')\n    s_str = s_str.replace('2', '+')\n    a_str = a_str.replace('3', '+')\n    s_str = s_str.replace('3', '+')\n    a_str = a_str.replace('4', '+')\n    s_str = s_str.replace('4', '+')\n    a_str = a_str.replace('5', '+')\n    s_str = s_str.replace('5', '+')\n    a_str = a_str.replace('6', '+')\n    s_str = s_str.replace('6', '+')\n    a_str = a_str.replace('7', '+')\n    s_str = s_str.replace('7', '+')\n    a_str = a_str.replace('8', '+')\n    s_str = s_str.replace('8', '+')\n    a_str = a_str.replace('9', '+')\n    s_str = s_str.replace('9', '+')\n    a_str = a_str.replace('0', '+')\n    s_str = s_str.replace('0', '+')\n    a_str = a_str.replace('1', '+')\n    s_str = s_str.replace('1', '+')\n    a_str = a_str.replace('2', '+')\n    s_str = s_str.replace('2', '+')\n    a_str = a_str.replace('3', '+')\n    s_str = s_str.replace('3', '+')\n    a_str = a_str.replace('4', '+')\n    s_str = s_str.replace('4', '+')\n    a_str = a_str.replace('5', '+')\n    s_str = s_str.replace('5', '+')\n    a_str = a_str.replace('6', '+')\n    s_str = s_str.replace('6', '+')\n    a_str = a_str.replace('7', '+')\n    s_str = s_str.replace('7', '+')\n    a_str = a_str.replace('8', '+')\n    s_str = s_str.replace('8', '+')\n    a_str = a_str.replace('9', '+')\n    s_str = s_str.replace('9', '+')\n    a_str = a_str.replace('0', '+')\n    s_str = s_str.replace('0', '+')\n    a_str = a_str.replace('1', '+')\n    s_str = s_str.replace('1', '+')\n    a_str = a_str.replace('2', '+')\n    s_str = s_str.replace('2', '+')\n    a_str = a_str.replace('3', '+')\n    s_str = s_str.replace('3', '+')\n    a_str = a_str.replace('4', '+')\n    s_str = s_str.replace('4', '+')\n    a_str = a_str.replace('5', '+')\n    s_str = s_str.replace('5', '+')\n    a_str = a_str.replace('6', '+')\n    s_str = s_str.replace('6', '+')\n    a_str = a_str.replace('7', '+')\n    s_str = s_str.replace('7', '+')\n    a_str = a_str.replace('8', '+')\n    s_str = s_str.replace('8', '+')\n    a_str = a_str.replace('9', '+')\n    s_str = s_str.replace('9', '+')\n    a_str = a_str.replace('0', '+')\n    s_str = s_str.replace('0', '+')\n    a_str = a_str.replace('1', '+')\n    s_str = s_str.replace('1', '+')\n    a_str = a_str.replace('2', '+')\n    s_str = s_str.replace('2', '+')\n    a_str = a_str.replace('3', '+')\n    s_str = s_str.replace('3', '+')\n    a_str = a_str.replace('4', '+')\n    s_str = s_str.replace('4', '+')\n    a_str = a_str.replace('5', '+')\n    s_str = s_str.replace('5', '+')\n    a_str = a_str.replace('6', '+')\n    s_str = s_str.replace('6', '+')\n    a_str = a_str.replace('7', '+')\n    s_str = s_str.replace('7', '+')\n    a_str = a_str.replace('8', '+')\n    s_str = s_str.replace('8', '+')\n    a_str = a_str.replace('9', '+')\n    s_str = s_str.replace('9', '+')\n    a_str = a_str.replace('0', '+')\n    s_str = s_str.replace('0', '+')\n    a_str = a_str.replace('1', '+')\n    s_str = s_str.replace('1', '+')\n    a_str = a_str.replace('2', '+')\n    s_str = s_str.replace('2', '+')\n    a_str = a_str.replace('3', '+')\n    s_str = s_str.replace('3', '+')\n    a_str = a_str.replace('4', '+')\n    s_str = s_str.replace('4', '+')\n    a_str = a_str.replace('5', '+')\n    s_str = s_str.replace('5', '+')\n    a_str = a_str.replace('6', '+')\n    s_str = s_str.replace('6', '+')\n    a_str = a_str"
    },
    {
        "number": 3105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the lexicographically smallest pair of integers that appear as a subsequence of the input sequence.\n\n    Args:\n        stdin (str): The input sequence.\n\n    Returns:\n        str: The pair of integers.\n    \"\"\"\n    n = int(stdin)\n    sequence = [int(x) for x in stdin.split('\\n')]\n    sequence.sort()\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            if sequence[i] == sequence[j]:\n                continue\n            if sequence[i] < sequence[j] < sequence[j + 1] < sequence[j + 2]:\n                return f'{sequence[i]} {sequence[j]}'\n    return '-1'\n"
    },
    {
        "number": 3106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.index('1'))\n"
    },
    {
        "number": 3107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 3 1 3 1\n   ... 2 2 1\n   ... 3 3 1 3\n   ... 1 2\n   ... 2 3\n   ... 3 1''')\n    '1\\n0\\n2\\n'\n    \"\"\"\n    N, M = map(int, stdin.split('\\n')[0].split())\n    trucks = [list(map(int, line.split())) for line in stdin.split('\\n')[1:N + 1]]\n    pairs = [list(map(int, line.split())) for line in stdin.split('\\n')[N + 1:]]\n    trucks.sort()\n    pairs.sort()\n    trucks_dict = {truck: i for i, truck in enumerate(trucks)}\n    pairs_dict = {pair: i for i, pair in enumerate(pairs)}\n    encounters = [0] * len(pairs)\n    for pair in pairs:\n        truck1, truck2 = pair\n        truck1_index, truck2_index = trucks_dict[truck1], trucks_dict[truck2]\n        truck1_route, truck2_route = trucks[truck1_index], trucks[truck2_index]\n        truck1_turn_index = truck1_route.index(truck2_route[0])\n        truck2_turn_index = truck2_route.index(truck1_route[0])\n        truck1_turn_index_after_turn = truck1_turn_index + 1\n        truck2_turn_index_after_turn = truck2_turn_index + 1\n        if truck1_turn_index_after_turn == truck2_turn_index_after_turn:\n            encounters[pairs_dict[pair]] = 1\n        elif truck1_turn_index_after_turn > truck2_turn_index_after_turn:\n            encounters[pairs_dict[pair]] = 1\n        elif truck1_turn_index_after_turn < truck2_turn_index_after_turn:\n            encounters[pairs_dict[pair]] = 0\n    return '\\n'.join(map(str, encounters))\n"
    },
    {
        "number": 3108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    max_avg = 0\n    for i in range(n - k + 1):\n        avg = sum(arr[i:i + k]) / k\n        if avg > max_avg:\n            max_avg = avg\n    return str(max_avg)\n"
    },
    {
        "number": 3109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2 5 5\n   ... 2.0 2.0\n   ... 4.0\n   ... 1.0 0.0\n   ... 0.0 1.0\n   ... 1.0 0.0\n   ... 0.0 2.0''')\n    '0.750'\n    \"\"\"\n    n, m, w, h = [int(x) for x in stdin.split()]\n    v = [float(x) for x in stdin.splitlines()[1].split()]\n    x = [float(x) for x in stdin.splitlines()[2:2 + n]]\n    min_ = [float(x) for x in stdin.splitlines()[3 + n:3 + 2 * n]]\n    max_ = [float(x) for x in stdin.splitlines()[4 + 2 * n:4 + 3 * n]]\n    return str(round(min_heights(n, m, w, h, v, x, min_, max_) / h, 3))\n\n\ndef"
    },
    {
        "number": 3110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(m)]\n    return str(count_complete_codes(matrix, m, n))\n\n\ndef"
    },
    {
        "number": 3111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 1234\n   ... 1 1\n   ... 1 2\n   ... 1 3\n   ... 1 4''')\n    '10\\n14\\n18\\n16'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    dials = list(map(int, stdin.split()))\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        print(sum(dials[a - 1:b]))\n    return ''\n"
    },
    {
        "number": 3112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2 3\n   ... 1 3\n   ... 2 3\n   ... 3 4\n   ... ''')\n    '2'\n    >>> solution('''5 2 4\n   ... 1 3\n   ... 3 4\n   ... 2 4\n   ... 4 5\n   ... ''')\n    '1'\n    \"\"\"\n    N, K, M = [int(x) for x in stdin.split('\\n')[0].split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.split('\\n')[1:]]\n    graph = {i: set() for i in range(1, N + 1)}\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    producers = set()\n    for a, b in edges:\n        if len(graph[a]) > 1:\n            producers.add(a)\n        if len(graph[b]) > 1:\n            producers.add(b)\n    producers = list(producers)\n    producers.sort()\n    producers_to_turn_off = []\n    for i in range(K):\n        if len(producers) == 1:\n            break\n        if len(producers) == 2:\n            if producers[0] == N:\n                producers_to_turn_off.append(producers.pop(0))\n            else:\n                producers_to_turn_off.append(producers.pop(1))\n        else:\n            producers_to_turn_off.append(producers.pop(0))\n    producers_to_turn_off.sort()\n    producers_to_turn_off = list(set(producers_to_turn_off))\n    producers_to_turn_off.sort()\n    producers_to_turn_off = producers_to_turn_off[::-1]\n    producers_to_turn_off = producers_to_turn_off[:K]\n    producers_to_turn_off = list(set(producers_to_turn_off))\n    producers_to_turn_off.sort()\n    producers_to_turn_off = producers_to_turn_off[::-1]\n    producers_to_turn_off = producers_to_turn_off[:K]\n    producers_to_turn_off = list(set(producers_to_turn_off))\n    producers_to_turn_off.sort()\n    producers_to_turn_off = producers_to_turn_off[::-1]\n    producers_to_turn_off = producers_to_turn_off[:K]\n    producers_to_turn_off = list(set(producers_to_turn_off))\n    producers_to_turn_off.sort()\n    producers_to_turn_off = producers_to_turn_off[::-1]\n    producers_to_turn_off = producers_to_turn_off[:K]\n    producers_to_turn_off = list(set(producers_to_turn_off))\n    producers_to_turn_off.sort()\n    producers_to_turn_off = producers_to_turn_off[::-1]\n    producers_to_turn_off = producers_to_turn_off[:K]\n    producers_to_turn_off = list(set(producers_to_turn_off))\n    producers_to_turn_off.sort()\n    producers_to_turn_off = producers_to_turn_off[::-1]\n    producers_to_turn_off = producers_to_turn_off[:K]\n    producers_to_turn_off = list(set(producers_to_turn_off))\n    producers_to_turn_off.sort()\n    producers_to_turn_off = producers_to_turn_off[::-1]\n    producers_to_turn_off = producers_to_turn_off[:K]\n    producers_to_turn_off = list(set"
    },
    {
        "number": 3113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 10000 0 10000 10000 0 10000\n   ... 3\n   ... 10000 0 10000 10000 5000 5000\n   ... 5000 5000 10000 10000 0 10000\n   ... 0 0 0 1000 1000 0\n   ... ''')\n    'no'\n    >>> solution('''2\n   ... 9999 0 9998 0 0 1\n   ... 9998 0 9999 0 0 1\n   ... 2\n   ... 9997 0 9998 0 0 1\n   ... 9998 0 9999 0 0 1\n   ... ''')\n    'no'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 2\n   ... 2 3\n   ... 1 3\n   ... 1 4\n   ... ''')\n    'YES\\n1 3\\n2 1\\n3 2\\n'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    roads = {road for road in roads if road[0]!= road[1]}\n    if len(roads) < m:\n        return 'NO'\n    roads = {road: None for road in roads}\n    for road in roads:\n        roads[road] = None\n    for road in roads:\n        if roads[road] is None:\n            roads[road] = road[::-1]\n    return 'YES\\n' + '\\n'.join(f'{road[0]} {road[1]}' for road in roads)\n"
    },
    {
        "number": 3115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matches = [list(map(int, stdin.split())) for _ in range(m)]\n    return \"consistent\" if all(matches[i][0] == matches[i][1] or matches[i][0] > matches[i][1] for i in range(m)) else \"inconsistent\""
    },
    {
        "number": 3116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\")\n    '1.57079633'\n    \"\"\"\n    n = int(stdin.readline())\n    stars = [tuple(map(int, line.split())) for line in stdin]\n    stars.sort()\n    x_min, x_max = stars[0][0], stars[-1][0]\n    y_min, y_max = stars[0][1], stars[-1][1]\n    z_min, z_max = stars[0][2], stars[-1][2]\n    x_range = x_max - x_min\n    y_range = y_max - y_min\n    z_range = z_max - z_min\n    x_mid = (x_max + x_min) / 2\n    y_mid = (y_max + y_min) / 2\n    z_mid = (z_max + z_min) / 2\n    x_dist = [abs(star[0] - x_mid) for star in stars]\n    y_dist = [abs(star[1] - y_mid) for star in stars]\n    z_dist = [abs(star[2] - z_mid) for star in stars]\n    x_min_dist = min(x_dist)\n    y_min_dist = min(y_dist)\n    z_min_dist = min(z_dist)\n    x_max_dist = max(x_dist)\n    y_max_dist = max(y_dist)\n    z_max_dist = max(z_dist)\n    x_min_max_dist = max(x_max_dist, x_min_dist)\n    y_min_max_dist = max(y_max_dist, y_min_dist)\n    z_min_max_dist = max(z_max_dist, z_min_dist)\n    x_min_max_y_min_max_z_min_max_dist = (\n        x_min_max_dist + y_min_max_dist + z_min_max_dist\n    )\n    return f\"{x_min_max_y_min_max_z_min_max_dist:.6f}\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"11\\nsabcabcfabc\")\n    3\n    >>> solution(\"18\\ntrutrutiktiktappop\")\n    4\n    \"\"\"\n    s = stdin\n    s = s.replace(\" \", \"\")\n    s = s.lower()\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s = set"
    },
    {
        "number": 3118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 3 1\n   ... 3 1 2''')\n    '2'\n    >>> solution('''6\n   ... 5 1 6 3 2 4\n   ... 4 6 5 1 3 2''')\n    '5'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    b = [int(i) for i in stdin.split('\\n')[2].split()]\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n    if a_sorted == b_sorted:\n        return '0'\n    elif a_sorted == [i + 1 for i in range(n)] or b_sorted == [i + 1 for i in range(n)]:\n        return '1'\n    else:\n        return 'huge'\n"
    },
    {
        "number": 3119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"concat(shuffle([1,2]),shuffle([1,2]))\\nshuffle([1,2,1,2])\")\n    'not equal'\n    >>> solution(\"sorted(concat([3,2,1],[4,5,6]))\\n[1,2,3,4,5,6]\")\n    'equal'\n    \"\"\"\n    a, b = stdin.split(\"\\n\")\n    return \"equal\" if a == b else \"not equal\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 2\n   ... 3 2\n   ... 1 2 1 2\n   ... 2 3 1 2''')\n    'Oh no'\n    >>> solution('''1 3\n   ... 3 2\n   ... 1 2 1 2\n   ... 2 3 1 2''')\n    '1'\n    \"\"\"\n    A, H = map(int, stdin.split())\n    n, m = map(int, stdin.split()[1:])\n    edges = []\n    for _ in range(m):\n        e, b, a, h = map(int, stdin.split()[1:])\n        edges.append((e, b, a, h))\n    edges.sort(key=lambda x: x[0])\n    dp = [0] * (n + 1)\n    dp[1] = H\n    for e, b, a, h in edges:\n        dp[b] = max(dp[b], dp[e] - a)\n    return 'Oh no' if dp[n] < 1 else dp[n]\n"
    },
    {
        "number": 3122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4\n   ... 1 2 2\n   ... 2 3 1\n   ... 3 4 1\n   ... 4 1 2''')\n    '3'\n    >>> solution('''5 5\n   ... 1 2 1\n   ... 2 3 1\n   ... 2 4 1\n   ... 2 5 1\n   ... 4 5 1''')\n    'impossible'\n    \"\"\"\n   ..."
    },
    {
        "number": 3123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    max_k = 1\n    for i in range(n):\n        k = 1\n        while k <= n:\n            if i + k > n:\n                break\n            if arr[i] == arr[i + k]:\n                k += 1\n            else:\n                break\n        if k > max_k:\n            max_k = k\n    if max_k == 1:\n        print('no quotation')\n    else:\n        print(max_k)\n    return ''\n"
    },
    {
        "number": 3124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(n):\n        if nums[i] % 2 == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 3125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"a+b-c\")\n    - +d-\n    >>> solution(\"a-b+d-c\")\n    - +d-\n    >>> solution(\"a+b-c+d\")\n    - +d-\n    >>> solution(\"a+b-c+d+e\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+a\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+a+b\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+a+b+c\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+a+b+c+d\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+a+b+c+d+e\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+a+b+c+d+e+f\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+a+b+c+d+e+f+g\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+a+b+c+d+e+f+g+h\")\n    - +d-\n    >>> solution(\"a+b-c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y"
    },
    {
        "number": 3126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 1\n   ... 0\n   ... 7\n   ... t 0\n   ... t 1\n   ... t 2\n   ... t 3\n   ... t 4\n   ... t 5\n   ... t 6\n   ... t 7\n   ... t 8\n   ... t 9\n   ... t 10''')\n    '11'\n    \"\"\"\n    n, t = map(int, stdin.split('\\n')[:2])\n    frogs = list(map(int, stdin.split('\\n')[2:]))\n    dance = []\n    for i in range(n):\n        dance.append(frogs[i])\n    for line in stdin.split('\\n')[2:]:\n        if line[0] == '+':\n            dance.append(int(line[1:]))\n        elif line[0] == '-':\n            dance.remove(int(line[1:]))\n        elif line[0] == 't':\n            t = int(line[1:])\n    return str(dance_solution(dance, t))\n\n\ndef"
    },
    {
        "number": 3127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 3128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''12\n   ... 1 1\n   ... 1 2\n   ... 1 3\n   ... 1 1\n   ... 1 2\n   ... 1 3\n   ... 2 1\n   ... 2 2\n   ... 2 3\n   ... 2 4\n   ... 2 5\n   ... 2 6''')\n    '4\\n5\\n6\\n1\\n2\\n3'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    movies = [None] * (n + 1)\n    for i in range(1, n + 1):\n        movies[i] = i\n    for line in stdin.split('\\n')[1:]:\n        q, x = map(int, line.split())\n        if q == 1:\n            movies[x] = movies[x - 1] + 1\n        else:\n            movies[x] = movies[x - 1]\n    return '\\n'.join(map(str, movies))\n"
    },
    {
        "number": 3129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('P')"
    },
    {
        "number": 3130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds all events that have certainly occurred based on the given implications and evidence collected by your colleague detectives.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: String containing all events that have certainly occurred\n    \"\"\"\n    # Get input\n    D, M, N = [int(x) for x in stdin.split()]\n    implications = []\n    for _ in range(M):\n        A, B = [int(x) for x in stdin.split()]\n        implications.append((A, B))\n    events = [int(x) for x in stdin.split()]\n\n    # Find all events that have certainly occurred\n    events_that_have_occurred = set()\n    for event in events:\n        for implication in implications:\n            if implication[0] == event:\n                events_that_have_occurred.add(implication[1])\n            if implication[1] == event:\n                events_that_have_occurred.add(implication[0])\n    events_that_have_occurred = sorted(events_that_have_occurred)\n\n    return''.join(map(str, events_that_have_occurred))\n"
    },
    {
        "number": 3131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = 0\n    for i in range(k):\n        s += a[i]\n    return s % 1000000007"
    },
    {
        "number": 3132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = [stdin.split() for _ in range(R)]\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < R and 0 <= nc < C and grid[nr][nc] == 'x':\n                        return f'{r + 1} {c + 1} {abs(nr - r) + 1}'\n    return 'Impossible'\n"
    },
    {
        "number": 3133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    m = [[int(x) for x in stdin.split()] for _ in range(n)]\n    a_path = []\n    b_path = []\n    for i in range(n):\n        if m[a][i] == 1:\n            a_path.append(i)\n        if m[b][i] == 1:\n            b_path.append(i)\n    a_path.append(a)\n    b_path.append(b)\n    a_path = set(a_path)\n    b_path = set(b_path)\n    if a_path.intersection(b_path):\n        return \"indistinguishable\"\n    a_path = set(a_path)\n    b_path = set(b_path)\n    a_path = a_path.difference(b_path)\n    b_path = b_path.difference(a_path)\n    return min(len(a_path), len(b_path))"
    },
    {
        "number": 3134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0110\\n1001\")\n    1111\n    >>> solution(\"1010\\n1011\")\n    1110\n    >>> solution(\"1010\\n1011\\n1010\\n1011\")\n    1111\n    >>> solution(\"1010\\n1011\\n1010\\n1011\\n1010\\n1011\")\n    1111\n    >>> solution(\"1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\")\n    1111\n    >>> solution(\"1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\")\n    1111\n    >>> solution(\"1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\")\n    1111\n    >>> solution(\"1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\")\n    1111\n    >>> solution(\"1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\n1010\\n1011\\"
    },
    {
        "number": 3135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    return '+' + '0' * (len(bin(n)) - 2) + '-' * (len(bin(n)) - 2)"
    },
    {
        "number": 3136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 8 3 2\n   ... 1 2\n   ... 7 3 4\n   ... 5 6\n   ... 1 3 2\n   ... 1 4 1\n   ... 1 5 1\n   ... 1 6 6\n   ... 2 3 9\n   ... 2 4 2\n   ... 2 6 4''')\n    '9'\n    \"\"\"\n   ..."
    },
    {
        "number": 3137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    ans = 0\n    for i in range(n - 1):\n        if arr[i] + 1 == arr[i + 1]:\n            ans += 1\n    return ans"
    },
    {
        "number": 3139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n\")\n    '3\\n1\\n'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    stdin = stdin.split(\"\\n\")[1:]\n    stdin = [i.split() for i in stdin]\n    stdin = [[int(i[1]), int(i[2])] for i in stdin]\n    stdin = sorted(stdin, key=lambda x: x[0])\n    stdin = sorted(stdin, key=lambda x: x[1], reverse=True)\n    stdin = [i[0] for i in stdin]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin[0]]\n    stdin = [i for i in stdin if i > stdin["
    },
    {
        "number": 3140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, k, l = [int(x) for x in stdin.split()]\n    x0, y0 = [int(x) for x in stdin.split()]\n    t = [[int(x) for x in stdin.split()] for _ in range(r)]\n    return str(max(0, (l - 1) - max(t[x0][y0], t[x0][y0 + 1], t[x0 + 1][y0], t[x0 + 1][y0 + 1])))\n"
    },
    {
        "number": 3141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1.0 0.0 1.4\n   ... -1.0 0.0 -1.4\n   ... 0.0 1.0 -0.2\n   ... ''')\n    '2.0000000000'\n    \"\"\"\n    n = int(stdin.readline())\n    flaws = [tuple(map(float, line.split())) for line in stdin]\n    flaws.sort(key=lambda x: x[2])\n    flaws.sort(key=lambda x: x[0])\n    flaws.sort(key=lambda x: x[1])\n    flaws.sort(key=lambda x: x[0] * x[1])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0] * x[1] * x[2] * x[0])\n    flaws.sort(key=lambda x: x[0] * x[1] * x[2] * x[0] * x[1] * x["
    },
    {
        "number": 3142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if sum(map(int, str(i))) == S:\n            count += 1\n    return str(count) + '\\n' + str(min(i for i in range(A, B + 1) if sum(map(int, str(i))) == S))\n"
    },
    {
        "number": 3143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(m):\n        ans += abs(a[i] - b[i])\n    return ans"
    },
    {
        "number": 3144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, g, n, k = [int(x) for x in stdin.split()]\n    if n == 0:\n        return str(d)\n    if k == 0:\n        return str(g)\n    if n == 1:\n        return str(max(d, g))\n    if k == 1:\n        return str(min(d, g))\n    if k == n:\n        return str(min(d, g))\n    if k == n - 1:\n        return str(max(d, g))\n    if k == n - 2:\n        return str(max(d, g) - 1)\n    if k == n - 3:\n        return str(max(d, g) - 2)\n    if k == n - 4:\n        return str(max(d, g) - 3)\n    if k == n - 5:\n        return str(max(d, g) - 4)\n    if k == n - 6:\n        return str(max(d, g) - 5)\n    if k == n - 7:\n        return str(max(d, g) - 6)\n    if k == n - 8:\n        return str(max(d, g) - 7)\n    if k == n - 9:\n        return str(max(d, g) - 8)\n    if k == n - 10:\n        return str(max(d, g) - 9)\n    if k == n - 11:\n        return str(max(d, g) - 10)\n    if k == n - 12:\n        return str(max(d, g) - 11)\n    if k == n - 13:\n        return str(max(d, g) - 12)\n    if k == n - 14:\n        return str(max(d, g) - 13)\n    if k == n - 15:\n        return str(max(d, g) - 14)\n    if k == n - 16:\n        return str(max(d, g) - 15)\n    if k == n - 17:\n        return str(max(d, g) - 16)\n    if k == n - 18:\n        return str(max(d, g) - 17)\n    if k == n - 19:\n        return str(max(d, g) - 18)\n    if k == n - 20:\n        return str(max(d, g) - 19)\n    if k == n - 21:\n        return str(max(d, g) - 20)\n    if k == n - 22:\n        return str(max(d, g) - 21)\n    if k == n - 23:\n        return str(max(d, g) - 22)\n    if k == n - 24:\n        return str(max(d, g) - 23)\n    if k == n - 25:\n        return str(max(d, g) - 24)\n    if k == n - 26:\n        return str(max(d, g) - 25)\n    if k == n - 27:\n        return str(max(d, g) - 26)\n    if k == n - 28:\n        return str(max(d, g) - 27)\n    if k == n - 29:\n        return str(max(d, g) - 28)\n    if k == n - 30:\n        return str(max(d, g) - 29)\n    if k == n - 31:\n        return str(max(d, g) - 30)\n    if k == n - 32:\n        return str(max(d, g) - 31)\n    if k == n - 33:\n        return str(max(d, g) - 32)\n    if k == n - 34:\n        return str(max(d, g) - 33)\n    if k == n - 35:\n        return str(max(d, g) - 34)\n    if k == n - 36:\n        return str(max(d, g) - 35)\n    if k == n - 37:\n        return str(max(d, g) - 36)\n    if k == n - 38:\n        return str(max(d, g) - 37)\n    if k == n - 39:\n        return str(max(d, g) - 38)\n    if k == n - 40:\n        return str(max(d, g) - 39)\n    if k == n - 41:\n        return str(max(d, g) - 40)\n    if k == n - 42:\n        return str(max(d, g) - 41)\n    if k == n - 43:\n        return str(max(d, g) - 42)\n    if k == n - 44:\n        return str(max(d, g) - 43)\n    if k == n - 45:\n        return str(max(d, g) - 44)\n    if k == n - 46:\n        return str(max(d, g) - 45)\n    if k == n - 47:\n        return str(max(d, g) - 46)\n    if k == n - 48:\n        return str(max(d, g) - 47)\n    if k == n - 49:\n        return str(max(d, g) - 48)\n    if k == n - 50:\n        return str(max(d, g) - 49)\n    if k == n - 51:\n        return str(max(d, g) - 50)\n    if k == n - 52:\n        return str(max(d, g) - 51)\n    if k == n - 53:\n        return str(max(d, g) - 52)\n    if k == n - 54:\n        return str(max(d, g) - 53)\n    if k == n - 55:\n        return str(max(d, g) - 54)\n    if k == n - 56:\n        return str(max(d, g) - 55)\n    if k == n - 57:\n        return str(max(d, g) - 56)\n    if k == n - 58:\n        return str(max(d, g) - 57)\n    if k == n - 59:\n        return str(max(d, g) - 58)\n    if k == n - 60:\n        return str(max(d, g) - 59)\n    if k == n - 61:\n        return str(max(d, g) - 60)\n    if k == n - 62:\n        return str(max(d, g) - 61)\n    if k == n - 63:\n        return str("
    },
    {
        "number": 3145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    digits = set(stdin[2:])\n    return str(sum(1 for i in range(A, B + 1) if i % X == 0 and set(str(i)) <= digits))\n"
    },
    {
        "number": 3146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\")\n    '1.500000 2.666667'\n    \"\"\"\n    n, t = map(int, stdin.split())\n    in_store = []\n    remote = []\n    for _ in range(n):\n        d, r, k = map(int, stdin.split())\n        if r == \"R\":\n            remote.append((d, k))\n        else:\n            in_store.append((d, k))\n    in_store.sort()\n    remote.sort()\n    in_store_time = 0\n    remote_time = 0\n    for d, k in in_store:\n        in_store_time += d\n        for d, k in remote:\n            if d > in_store_time:\n                break\n            remote_time += d\n    return f\"{in_store_time / len(in_store):.6f} {remote_time / len(remote):.6f}\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 6\n   ... 101010\n   ... 111001\n   ... 101001\n   ... ''')\n    3\n    \"\"\"\n    R, C = map(int, stdin.split())\n    memory = [list(stdin.split()) for _ in range(R)]\n    killers = []\n    for r in range(R):\n        for c in range(C):\n            if memory[r][c] == '1':\n                killers.append(find_killer(memory, r, c))\n    return max(killers) if killers else -1\n\n\ndef"
    },
    {
        "number": 3148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\")\n    '3 -1'\n    \"\"\"\n    n = int(stdin.readline())\n    positions = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    positions.sort()\n    x, y = 0, 0\n    for i in range(n):\n        if i % 2 == 0:\n            x += positions[i][0]\n        else:\n            y += positions[i][0]\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 3149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 6 5 45 20\n   ... 0 0\n   ... 2 0\n   ... 1 1.5''')\n    '2 5.086781'\n    \"\"\"\n    n, omega, v0, theta, w, x0, y0 = [float(x) for x in stdin.split()]\n    vx, vy = v0 * cos(radians(theta)), v0 * sin(radians(theta))\n    t = (w - x0) / vx\n    x, y = x0 + vx * t, y0 + vy * t - 0.5 * 9.81 * t ** 2\n    if y < 0:\n        return f'{1 + int(y // 1)}\\t{t:.6f}'\n    return f'{1 + int(y // 1)}\\t{t:.6f}'\n"
    },
    {
        "number": 3150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    Parameters\n    ----------\n    stdin : str\n        The input string given by the `input()` function.\n\n    Returns\n    -------\n    str\n        The solution for the given input.\n    \"\"\"\n    # Write your code here\n    return \"\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10 ** 9:\n        return \"impossible\"\n    m = 1\n    k = 1\n    while m * m - k * k < n:\n        m += 1\n        k += 1\n    return str(m) + \" \" + str(k)"
    },
    {
        "number": 3152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1\n   ... 3''')\n    '16'\n    >>> solution('''4\n   ... 2\n   ... 4\n   ... 1\n   ... 4''')\n    '109'\n    \"\"\"\n    n = int(stdin.readline())\n    arr = [int(stdin.readline()) for _ in range(n)]\n    arr.sort()\n    min_num = min(arr)\n    max_num = max(arr)\n    return str(sum(arr) * min_num * max_num)[-9:]\n"
    },
    {
        "number": 3153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    cards = list(map(int, stdin.split('\\n')[1:]))\n    purchases = []\n    for _ in range(m):\n        purchases.append(list(map(int, stdin.split('\\n')[_ + 1].split(' '))))\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1"
    },
    {
        "number": 3154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 6 7\n   ... 0 1 1\n   ... 0 2 2\n   ... 1 1 3\n   ... 2 1 2\n   ... 2 2 1\n   ... 3 2 3\n   ... 4 2 1''')\n    '1 2'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    d, e = map(int, stdin.split('\\n')[1].split())\n    events = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    events.sort(key=lambda x: x[0])\n    toys = [0] * n\n    for s, k, t in events:\n        if t == 0:\n            toys[k - 1] = 0\n        else:\n            toys[k - 1] = t\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 1\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 2\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 3\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 4\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 5\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 6\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 7\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 8\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 9\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 10\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 11\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 12\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 13\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 14\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 15\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 16\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 17\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 18\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 19\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 20\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 21\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 22\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 23\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 24\n            break\n    for i in range(n):\n        if toys[i] == 0:\n            toys[i] = 25\n            break\n    for i in range(n):\n        if toys[i] == 0:\n"
    },
    {
        "number": 3155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    n = 1\n    k = 1\n    while True:\n        if n * k == X:\n            return str(n) + \" \" + str(k)\n        elif n * k < X:\n            n += 1\n        else:\n            k += 1"
    },
    {
        "number": 3156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 3157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    return str(bin(K).count('1') - 1)\n"
    },
    {
        "number": 3158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n"
    },
    {
        "number": 3159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 20\\n apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      \")\n    'apples are great!  \\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!      '\n    \"\"\"\n    h, w = map(int, stdin.split())\n    lines = stdin.split(\"\\n\")\n    lines = [line.strip() for line in lines]\n    lines = [line for line in lines if line]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line in lines if line[-1]!= \"#\"]\n    lines = [line for line in lines if line[0]!= \"#\"]\n    lines = [line for line"
    },
    {
        "number": 3160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"HH\")\n    '2.0'\n    >>> solution(\"H?\")\n    '1.5'\n    \"\"\"\n    return str(round(sum(1 for _ in stdin.split(\"?\")) / len(stdin.split(\"?\")), 6))\n"
    },
    {
        "number": 3161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return stdin\n    if n == 2:\n        return stdin[0] + stdin[1] + stdin[0] + stdin[1]\n    if n == 4:\n        return stdin[0] + stdin[1] + stdin[2] + stdin[3]\n    if n == 8:\n        return stdin[0] + stdin[1] + stdin[2] + stdin[3] + stdin[4] + stdin[5] + stdin[6] + stdin[7]\n    if n == 16:\n        return stdin[0] + stdin[1] + stdin[2] + stdin[3] + stdin[4] + stdin[5] + stdin[6] + stdin[7] + stdin[8] + stdin[9] + stdin[10] + stdin[11] + stdin[12] + stdin[13] + stdin[14] + stdin[15]\n    if n == 32:\n        return stdin[0] + stdin[1] + stdin[2] + stdin[3] + stdin[4] + stdin[5] + stdin[6] + stdin[7] + stdin[8] + stdin[9] + stdin[10] + stdin[11] + stdin[12] + stdin[13] + stdin[14] + stdin[15] + stdin[16] + stdin[17] + stdin[18] + stdin[19] + stdin[20] + stdin[21] + stdin[22] + stdin[23] + stdin[24] + stdin[25] + stdin[26] + stdin[27] + stdin[28] + stdin[29] + stdin[30] + stdin[31]\n    if n == 64:\n        return stdin[0] + stdin[1] + stdin[2] + stdin[3] + stdin[4] + stdin[5] + stdin[6] + stdin[7] + stdin[8] + stdin[9] + stdin[10] + stdin[11] + stdin[12] + stdin[13] + stdin[14] + stdin[15] + stdin[16] + stdin[17] + stdin[18] + stdin[19] + stdin[20] + stdin[21] + stdin[22] + stdin[23] + stdin[24] + stdin[25] + stdin[26] + stdin[27] + stdin[28] + stdin[29] + stdin[30] + stdin[31] + stdin[32] + stdin[33] + stdin[34] + stdin[35] + stdin[36] + stdin[37] + stdin[38] + stdin[39] + stdin[40] + stdin[41] + stdin[42] + stdin[43] + stdin[44] + stdin[45] + stdin[46] + stdin[47] + stdin[48] + stdin[49] + stdin[50] + stdin[51] + stdin[52] + stdin[53] + stdin[54] + stdin[55] + stdin[56] + stdin[57] + stdin[58] + stdin[59] + stdin[60] + stdin[61] + stdin[62] + stdin[63]\n    if n == 128:\n        return stdin[0] + stdin[1] + stdin[2] + stdin[3] + stdin[4] + stdin[5] + stdin[6] + stdin[7] + stdin[8] + stdin[9] + stdin[10] + stdin[11] + stdin[12] + stdin[13] + stdin[14] + stdin[15] + stdin[16] + stdin[17] + stdin[18] + stdin[19] + stdin[20] + stdin[21] + stdin[22] + stdin[23] + stdin[24] + stdin[25] + stdin[26] + stdin[27] + stdin[28] + stdin[29] + stdin[30] + stdin[31] + stdin[32] + stdin[33] + stdin[34] + stdin[35] + stdin[36] + stdin[37] + stdin[38] + stdin[39] + stdin[40] + stdin[41] + stdin[42] + stdin[43] + stdin[44] + stdin[45] + stdin[46] + stdin[47] + stdin[48] + stdin[49] + stdin[50] + stdin[51] + stdin[52] + stdin[53] + stdin[54] + stdin[55] + stdin[56] + stdin[57] + stdin[58] + stdin[59] + stdin[60] + stdin[61] + stdin[62] + stdin[63] + stdin[64] + stdin[65] + stdin[66] + stdin[67] + stdin[68] + stdin[69] + stdin[70] + stdin[71] + stdin[72] + stdin[73] + stdin[74] + stdin[75] + stdin[76] + stdin[77] + stdin[78] + stdin[79] + stdin[80] + stdin[81] + stdin[82] + stdin[83] + stdin[84] + stdin[85] + stdin[86] + stdin[87] + stdin[88] + stdin[89] + stdin[90] + stdin[91] + stdin[92] + stdin[93] + stdin[94] + stdin[95] + stdin[96] + stdin[97] + stdin[98] + stdin[99] + stdin[100] + stdin[101] + stdin[102] + stdin[103] + stdin[104] + stdin[105] + stdin[106] + stdin[107] + stdin[108] + stdin[109] + stdin[110] + stdin[111] + stdin[112] + stdin[113] + stdin[114] + stdin[115] + stdin[116] +"
    },
    {
        "number": 3162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... h 1 4 1\n   ... v 2 4 2\n   ... h 10 2 2\n   ... v 11 2 3\n   ... ''')\n    2\n    \"\"\"\n   ..."
    },
    {
        "number": 3163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    left = 0\n    right = 0\n    max_len = 0\n    while right < n:\n        if arr[right] == arr[right - 1]:\n            right += 1\n        else:\n            max_len = max(max_len, right - left)\n            if right < n - 1 and arr[right] == arr[right + 1]:\n                right += 1\n            else:\n                left = right\n                right += 1\n    max_len = max(max_len, right - left)\n    return max_len\n"
    },
    {
        "number": 3165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    disqualified = list(map(int, stdin.split()))\n    disqualified = set(disqualified)\n    for i in range(n):\n        for j in range(n):\n            if i in disqualified or j in disqualified:\n                matrix[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[j][k] == 1:\n                        matrix[i][j] = 0\n                        matrix[j][k] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[j][k] == 1:\n                        matrix[i][j] = 0\n                        matrix[j][k] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[k][j] == 1:\n                        matrix[i][j] = 0\n                        matrix[k][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[i][k] == 1:\n                        matrix[i][j] = 0\n                        matrix[i][k] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[j][k] == 1:\n                        matrix[i][j] = 0\n                        matrix[j][k] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[k][i] == 1:\n                        matrix[i][j] = 0\n                        matrix[k][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[k][j] == 1:\n                        matrix[i][j] = 0\n                        matrix[k][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[i][k] == 1:\n                        matrix[i][j] = 0\n                        matrix[i][k] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[j][k] == 1:\n                        matrix[i][j] = 0\n                        matrix[j][k] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[j][k] == 1:\n                        matrix[i][j] = 0\n                        matrix[j][k] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[k][i] == 1:\n                        matrix[i][j] = 0\n                        matrix[k][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[k][j] == 1:\n                        matrix[i][j] = 0\n                        matrix[k][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[i][k] == 1:\n                        matrix[i][j] = 0\n                        matrix[i][k] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[j][k] == 1:\n                        matrix[i][j] = 0\n                        matrix[j][k] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                for k in range(n):\n                    if matrix[j][k] == 1:\n                        matrix[i][j] = 0\n                        "
    },
    {
        "number": 3167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 4\n   ... 1 1 2 1\n   ... 3\n   ... 0 9\n   ... 2 6\n   ... 7 7''')\n    '35\\n18\\n3'\n    \"\"\"\n    N, K = map(int, stdin.split())\n    seq = [0] * N\n    for _ in range(K):\n        X = list(map(int, stdin.split()))\n        something(X[0], X[1], seq)\n    Q = int(stdin.split()[-1])\n    for _ in range(Q):\n        L, R = map(int, stdin.split()[-2:])\n        print(sum(seq[L:R + 1]))\n"
    },
    {
        "number": 3168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '0\\n1\\n3\\n6'\n    \"\"\"\n    n = int(stdin.readline())\n    nums = [int(stdin.readline()) for _ in range(n)]\n    nums.sort()\n    c = 0\n    for num in nums:\n        c += 1\n        print(c)\n    return ''\n"
    },
    {
        "number": 3169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\")\n    '2 4 1 3'\n    \"\"\"\n    n = int(stdin.readline())\n    sticks = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    sticks.sort(key=lambda x: x[0])\n    ans = []\n    while sticks:\n        x1, y1, x2, y2 = sticks.pop(0)\n        while sticks and sticks[0][0] <= x1:\n            x3, y3, x4, y4 = sticks.pop(0)\n            if x2 < x3:\n                x2, y2 = x3, y3\n            elif x2 < x4:\n                x2, y2 = x4, y4\n        ans.append(str(x2))\n    return \" \".join(ans)\n"
    },
    {
        "number": 3170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\")\n    'Theta wins'\n    >>> solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\")\n    'Theta wins'\n    \"\"\"\n    deck = stdin.replace(\"T\", \"A\")\n    deck = deck.replace(\"J\", \"2\")\n    deck = deck.replace(\"Q\", \"3\")\n    deck = deck.replace(\"K\", \"4\")\n    deck = deck.replace(\"A\", \"5\")\n    deck = deck.replace(\"6\", \"6\")\n    deck = deck.replace(\"7\", \"7\")\n    deck = deck.replace(\"8\", \"8\")\n    deck = deck.replace(\"9\", \"9\")\n    deck = deck.replace(\"0\", \"10\")\n    deck = deck.replace(\"\\n\", \"\")\n    deck = deck.split(\" \")\n    deck = [int(card) for card in deck]\n    deck = [card for card in deck if card!= 0]\n    deck = [card for card in deck if card!= 10]\n    deck = [card for card in deck if card!= 11]\n    deck = [card for card in deck if card!= 12]\n    deck = [card for card in deck if card!= 13]\n    deck = [card for card in deck if card!= 14]\n    deck = [card for card in deck if card!= 15]\n    deck = [card for card in deck if card!= 16]\n    deck = [card for card in deck if card!= 17]\n    deck = [card for card in deck if card!= 18]\n    deck = [card for card in deck if card!= 19]\n    deck = [card for card in deck if card!= 20]\n    deck = [card for card in deck if card!= 21]\n    deck = [card for card in deck if card!= 22]\n    deck = [card for card in deck if card!= 23]\n    deck = [card for card in deck if card!= 24]\n    deck = [card for card in deck if card!= 25]\n    deck = [card for card in deck if card!= 26]\n    deck = [card for card in deck if card!= 27]\n    deck = [card for card in deck if card!= 28]\n    deck = [card for card in deck if card!= 29]\n    deck = [card for card in deck if card!= 30]\n    deck = [card for card in deck if card!= 31]\n    deck = [card for card in deck if card!= 32]\n    deck = [card for card in deck if card!= 33]\n    deck = [card for card in deck if card!= 34]\n    deck = [card for card in deck if card!= 35]\n    deck = [card for card in deck if card!= 36]\n    deck = [card for card in deck if card!= 37]\n    deck = [card for card in deck if card!= 38]\n    deck = [card for card in deck if card!= 39]\n    deck = [card for card in deck if card!= 40]\n    deck = [card for card in deck if card!= 41]\n    deck = [card for card in deck if card!= 42]\n    deck = [card for card in deck if card!= 43]\n    deck = [card for card in deck if card!= 44]\n    deck = [card for card in deck if card!= 45]\n    deck = [card for card in deck if card!= 46]\n    deck = [card for card in deck if card!= 47]\n    deck = [card for card in deck if card!= 48]\n    deck = [card for card in deck if card!= 49]\n    deck = [card for card in deck if card!= 50]\n    deck = [card for card in deck if card!= 51]\n    deck = [card for card in deck if card!= 52]\n    deck = [card for card in deck if card!= 53]\n    deck = [card for card in deck if card!= 54]\n    deck = [card for card in deck if card!= 55]\n    deck = [card for card in deck if card!= 56]\n    deck = [card for card in deck"
    },
    {
        "number": 3171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 2\n   ... 1 charlatan 1\n   ... 1 not charlatan 1''')\n    'charlatan'\n    >>> solution('''1 2\n   ... 1 truther 1\n   ... 1 and fabulist 1 fabulist 2''')\n    'truther'\n    >>> solution('''1 2\n   ... 1 truther 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1 not charlatan 1\n   ... 1 and fabulist 1 fabulist 2\n   ... 1 xor fabulist 1 fabulist 2\n   ... 1"
    },
    {
        "number": 3172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\")\n    4\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 3175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1 1 1 1\\n\")\n    '1.0'\n    >>> solution(\"3 1 1 1\\n\")\n    '0.433'\n    \"\"\"\n    n, *segments = map(int, stdin.split())\n    segments.sort()\n    segments = [segment for segment in segments if segment > 0]\n    if len(segments) < 3:\n        return \"0.0\"\n    max_area = 0\n    for i in range(len(segments) - 2):\n        for j in range(i + 1, len(segments) - 1):\n            for k in range(j + 1, len(segments)):\n                area = segments[i] * segments[j] * segments[k]\n                if area > max_area:\n                    max_area = area\n    return f\"{max_area:.5f}\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 5\n   ... 1 1 5\n   ... 2 1 5\n   ... 1 2 4\n   ... 2 3 5\n   ... 3 2 30\n   ... 3 3 5''')\n    '5'\n    >>> solution('''8 10\n   ... 1 1 15\n   ... 2 2 30\n   ... 1 2 8\n   ... 2 1 7\n   ... 3 2 8\n   ... 2 3 7\n   ... 4 2 100\n   ... 3 3 15''')\n    '36'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    plants = [tuple(map(int, stdin.split())) for _ in range(n)]\n    plants.sort()\n    plants.insert(0, (0, 0))\n    plants.append((100000, 100000))\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        x, y, f = plants[i]\n        for j in range(k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j - f >= 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - f] + f)\n    return str(dp[n][k])\n"
    },
    {
        "number": 3177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    permutation = list(map(int, stdin.split()))\n    swaps = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        swaps.append((a, b))\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps = list(zip(*swaps))[0]\n    swaps = [i for i in swaps if i < n]\n    swaps = [i for i in swaps if i > 0]\n    swaps = [i for i in swaps if i not in permutation]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    swaps = [i for i in swaps if i not in swaps]\n    sw"
    },
    {
        "number": 3178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 8\n   ... 1 4\n   ... 4 5\n   ... 1 5\n   ... 1 2\n   ... 1 3\n   ... 2 3\n   ... 3 5\n   ... 2 5\n   ... 3 6\n   ... 1 6''')\n    5\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    roads = {(a, b): c for a, b, c in roads}\n    areas = set(range(1, n + 1))\n    odd_sum = 0\n    for a, b in roads:\n        if a in areas and b in areas:\n            odd_sum += (roads[a, b] + roads[b, a]) % 3\n            areas.remove(a)\n            areas.remove(b)\n    if len(areas) > 1:\n        return -1\n    return odd_sum\n"
    },
    {
        "number": 3179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 1\n   ... 1 1\n   ... 5 1\n   ... 5 5\n   ... 4 2\n   ... ''')\n    '4.00'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[:2])\n    polygon = [tuple(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    polygon.append(polygon[0])\n    polygon = Polygon(polygon)\n    return str(round(polygon.area / k ** 2, 2))\n"
    },
    {
        "number": 3180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3 2\n   ... PAINT 2 0 0 3 3\n   ... PAINT 3 0 3 3 3\n   ... ''')\n    '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2'\n    \"\"\"\n    N, K, M = map(int, stdin.split())\n    colours = [0] * N\n    for _ in range(M):\n        command, *args = stdin.split()\n        if command == 'PAINT':\n            x1, y1, x2, y2 = map(int, args)\n            for i in range(x1, x2 + 1):\n                for j in range(y1, y2 + 1):\n                    colours[i] = (colours[i] + 1) % K\n        elif command == 'SAVE':\n            ordinal = int(args[0])\n            print('\\n'.join(map(str, colours[:N])))\n        elif command == 'LOAD':\n            ordinal = int(args[0])\n            colours = [ordinal] * N\n        else:\n            raise ValueError(f'Unknown command: {command}')\n    return '\\n'.join(map(str, colours[:N]))\n"
    },
    {
        "number": 3181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return '-1'\n    if k == n:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n - 1:\n        return''.join(map(str, range(1, n + 1)[::-1]))\n    if k == n - 2:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1)))\n    if k == n - 3:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1))) +'' +''.join(map(str, range(n - 2, 0, -1)))\n    if k == n - 4:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1))) +'' +''.join(map(str, range(n - 2, 0, -1))) +'' +''.join(map(str, range(n - 3, 0, -1)))\n    if k == n - 5:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1))) +'' +''.join(map(str, range(n - 2, 0, -1))) +'' +''.join(map(str, range(n - 3, 0, -1))) +'' +''.join(map(str, range(n - 4, 0, -1)))\n    if k == n - 6:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1))) +'' +''.join(map(str, range(n - 2, 0, -1))) +'' +''.join(map(str, range(n - 3, 0, -1))) +'' +''.join(map(str, range(n - 4, 0, -1))) +'' +''.join(map(str, range(n - 5, 0, -1)))\n    if k == n - 7:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1))) +'' +''.join(map(str, range(n - 2, 0, -1))) +'' +''.join(map(str, range(n - 3, 0, -1))) +'' +''.join(map(str, range(n - 4, 0, -1))) +'' +''.join(map(str, range(n - 5, 0, -1))) +'' +''.join(map(str, range(n - 6, 0, -1)))\n    if k == n - 8:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1))) +'' +''.join(map(str, range(n - 2, 0, -1))) +'' +''.join(map(str, range(n - 3, 0, -1))) +'' +''.join(map(str, range(n - 4, 0, -1))) +'' +''.join(map(str, range(n - 5, 0, -1))) +'' +''.join(map(str, range(n - 6, 0, -1))) +'' +''.join(map(str, range(n - 7, 0, -1)))\n    if k == n - 9:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1))) +'' +''.join(map(str, range(n - 2, 0, -1))) +'' +''.join(map(str, range(n - 3, 0, -1))) +'' +''.join(map(str, range(n - 4, 0, -1))) +'' +''.join(map(str, range(n - 5, 0, -1))) +'' +''.join(map(str, range(n - 6, 0, -1))) +'' +''.join(map(str, range(n - 7, 0, -1))) +'' +''.join(map(str, range(n - 8, 0, -1)))\n    if k == n - 10:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1))) +'' +''.join(map(str, range(n - 2, 0, -1))) +'' +''.join(map(str, range(n - 3, 0, -1))) +'' +''.join(map(str, range(n - 4, 0, -1))) +'' +''.join(map(str, range(n - 5, 0, -1))) +'' +''.join(map(str, range(n - 6, 0, -1))) +'' +''.join(map(str, range(n - 7, 0, -1))) +'' +''.join(map(str, range(n - 8, 0, -1))) +'' +''.join(map(str, range(n - 9, 0, -1)))\n    if k == n - 11:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1))) +'' +''.join(map(str, range(n - 2, 0, -1))) +'' +''.join(map(str, range(n - 3, 0, -1))) +'' +''.join(map(str, range(n - 4, 0, -1))) +'' +''.join(map(str, range(n - 5, 0, -1))) +'' +''.join(map(str, range(n - 6, 0, -1))) +'' +''.join(map(str, range(n - 7, 0, -1))) +'' +''.join(map(str, range(n - 8, 0, -1))) +'' +''.join(map(str, range(n - 9, 0, -1))) +'' +''.join(map(str, range(n - 10, 0, -1)))\n    if k == n - 12:\n        return''.join(map(str, range(1, n + 1)[::-1])) +'' +''.join(map(str, range(n - 1, 0, -1))) +''"
    },
    {
        "number": 3182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 3183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4 0 3\n   ... 0 1 4 10\n   ... 1 2 2 10\n   ... 0 2 4 30\n   ... 2 3 4 10''')\n    '4 140'\n    \"\"\"\n    n, m, s, t = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, c, w = map(int, stdin.split())\n        graph[u].append((v, c, w))\n        graph[v].append((u, c, w))\n    flow, cost = edmonds_karp(graph, s, t)\n    return str(flow) +'' + str(cost)\n\n\ndef"
    },
    {
        "number": 3184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''100 7\n   ... 1 50\n   ... 50 70\n   ... 70 90\n   ... 90 40\n   ... 20 60\n   ... 60 80\n   ... 80 20''')\n    '3'\n    \"\"\"\n   ..."
    },
    {
        "number": 3185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)"
    },
    {
        "number": 3186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(comb(n, k) * comb(m, k) % (10 ** 6 + 7))\n"
    },
    {
        "number": 3187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the smallest possible total distance that all citizens need to travel.\n\n    >>> solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\")\n    18\n    \"\"\"\n    n = int(stdin.readline())\n    houses = [tuple(map(int, line.split())) for line in stdin]\n    d = int(stdin.readline())\n    houses.sort()\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house: house[1])\n    houses.sort(key=lambda house: house[0])\n    houses.sort(key=lambda house"
    },
    {
        "number": 3188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 5 10\n   ... 7 8 2''')\n    '3'\n    >>> solution('''3\n   ... -1 -1 -1\n   ... 5 5 5\n   ... 10 10 10''')\n    '11'\n    \"\"\"\n   ..."
    },
    {
        "number": 3189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1\n   ... 110\n   ... 011''')\n    '2'\n    >>> solution('''4 2\n   ... 1000\n   ... 1000\n   ... 0000\n   ... 0010''')\n    '0'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    photos = [list(map(int, stdin.split('\\n')[2:])) for _ in range(m)]\n    return str(len(set(map(tuple, photos))))\n"
    },
    {
        "number": 3190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = list(map(int, stdin.readline().split()))\n    p = int(stdin.readline())\n    prices.sort()\n    left = 0\n    right = n - 1\n    count = 0\n    while left <= right:\n        if prices[left] + prices[right] >= p:\n            count += right - left + 1\n            right -= 1\n        else:\n            left += 1\n    return str(count)\n"
    },
    {
        "number": 3191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, p = map(int, stdin.split())\n    return str(n * r + p)\n"
    },
    {
        "number": 3192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\""
    },
    {
        "number": 3193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split('\\n')[0]\n    p, m = map(int, stdin.split('\\n')[1].split())\n    return str(solve(expression, p, m))\n\ndef"
    },
    {
        "number": 3194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Your code goes here.\n    return \"\""
    },
    {
        "number": 3195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4 4\n   ... 3\n   ... 2 green\n   ... 18 yellow\n   ... 34 red\n   ... 5 green''')\n    '0.25'\n    \"\"\"\n    T_g, T_y, T_r = [int(x) for x in stdin.split()]\n    n = int(stdin.split()[0])\n    observations = [tuple(int(x) for x in stdin.split()[1:]) for _ in range(n)]\n    t_q, c_q = [int(x) for x in stdin.split()[-2:]]\n    observations.append((t_q, c_q))\n    observations.sort()\n    # print(observations)\n    # print(T_g, T_y, T_r)\n    # print(n)\n    # print(t_q, c_q)\n    # print(observations)\n    # print(observations[-1])\n    # print(observations[-1][0])\n    # print(observations[-1][1])\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-1][0] + T_g + T_y + T_r)\n    # print(observations[-"
    },
    {
        "number": 3196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pref = list(map(int, stdin.split()))\n    pref.sort()\n    res = 0\n    for i in range(n):\n        if pref[i] > k:\n            break\n        res += 1\n    return res"
    },
    {
        "number": 3198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nhoose\\nhose\\nnoise\\nnoises\\nnoise\")\n    hoose\n    noises\n    noise\n    >>> solution(\"4\\nhose\\nhoose\\noose\\nmoose\")\n    hoose\n    moose\n    >>> solution(\"4\\nhose\\nhoose\\noose\\nmoose\")\n    hoose\n    moose\n    \"\"\"\n    dictionary = set(stdin.split(\"\\n\")[1:])\n    typos = set()\n    for word in dictionary:\n        for i in range(len(word)):\n            if word[:i] + word[i + 1:] in dictionary:\n                typos.add(word)\n                break\n    if typos:\n        return \" \".join(typos)\n    else:\n        return \"NO TYPOS\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    l = int(stdin)\n    return str(sum(1 for x in range(l) for y in range(l) if (x + y) % (a + b) == 0))\n"
    },
    {
        "number": 3200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[i + 1]:\n            count += 1\n        else:\n            count = 0\n        if count >= k:\n            break\n    return count"
    },
    {
        "number": 3203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n100 100\\n50 50\")\n    '50'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    probabilities = [float(x) / 100 for x in stdin.split(\"\\n\")[1:]]\n    probabilities.sort()\n    probabilities.reverse()\n    probabilities.append(1)\n    probabilities.insert(0, 0)\n    probabilities.sort()\n    probabilities.reverse()\n    probabilities = [x for x in probabilities if x!= 0]\n    probabilities = [x for x in probabilities if x!= 1]\n    probabilities = [x for x in probabilities if x!= 0.5]\n    probabilities = [x for x in probabilities if x!= 0.25]\n    probabilities = [x for x in probabilities if x!= 0.125]\n    probabilities = [x for x in probabilities if x!= 0.0625]\n    probabilities = [x for x in probabilities if x!= 0.03125]\n    probabilities = [x for x in probabilities if x!= 0.015625]\n    probabilities = [x for x in probabilities if x!= 0.0078125]\n    probabilities = [x for x in probabilities if x!= 0.00390625]\n    probabilities = [x for x in probabilities if x!= 0.001953125]\n    probabilities = [x for x in probabilities if x!= 0.0009765625]\n    probabilities = [x for x in probabilities if x!= 0.00048828125]\n    probabilities = [x for x in probabilities if x!= 0.000244140625]\n    probabilities = [x for x in probabilities if x!= 0.0001220703125]\n    probabilities = [x for x in probabilities if x!= 0.00006103515625]\n    probabilities = [x for x in probabilities if x!= 0.000030517578125]\n    probabilities = [x for x in probabilities if x!= 0.0000152587890625]\n    probabilities = [x for x in probabilities if x!= 0.000001171875]\n    probabilities = [x for x in probabilities if x!= 0.00000095367431640625]\n    probabilities = [x for x in probabilities if x!= 0.000000476837158203125]\n    probabilities = [x for x in probabilities if x!= 0.0000002384185791015625]\n    probabilities = [x for x in probabilities if x!= 0.0000001103515625]\n    probabilities = [x for x in probabilities if x!= 0.0000000859375]\n    probabilities = [x for x in probabilities if x!= 0.00000003564453125]\n    probabilities = [x for x in probabilities if x!= 0.00000002148437509765625]\n    probabilities = [x for x in probabilities if x!= 0.0000000009765625]\n    probabilities = [x for x in probabilities if x!= 0.00000000048828125]\n    probabilities = [x for x in probabilities if x!= 0.0000000000390625]\n    probabilities = [x for x in probabilities if x!= 0.00000000001953125]\n    probabilities = [x for x in probabilities if x!= 0.00000000015625]\n    probabilities = [x for x in probabilities if x!= 0.000000000078125]\n    probabilities = [x for x in probabilities if x!= 0.0000000000390625]\n    probabilities = [x for x in probabilities if x!= 0.00000000001953125]\n    probabilities = [x for x in probabilities if x!= 0.00000000015625]\n    probabilities = [x for x in probabilities if x!= 0.000000000078125]\n    probabilities = [x for x in probabilities if x!= 0.0000000000390625]\n    probabilities = [x for x in probabilities if x!= 0.00000000001953125]\n    probabilities = [x for x in probabilities if x!= 0.00000000015625]\n    probabilities = [x for x in probabilities if x!= 0.000000000078125]\n    probabilities = [x for x in probabilities if x!= 0.0000000000390625]\n    probabilities = [x for x in probabilities if x!= 0.00000000001953125]\n    probabilities = [x for x in probabilities if x!= 0.00000000015625]\n    probabilities = [x for x in probabilities if x!= 0.000000000078125]\n    probabilities = [x for x in probabilities if x!= 0.0000000000390625]\n    probabilities = [x for x in probabilities if x!= 0.00000000001953125]\n    probabilities = [x for x in probabilities if x!= 0.00000000015625]\n    probabilities = [x for x in probabilities if x!= 0.000000000078125]\n    probabilities = [x for x in probabilities if x!= 0.0000000000390625]\n    probabilities = [x for x in probabilities if x!= 0.00000000001953125]\n    probabilities = [x for x in probabilities if x!= 0.00000000015625]\n    probabilities = [x for x in probabilities if x!= 0.000000000078125]\n    probabilities = [x for x in probabilities if x!= 0.0000000000390625]\n    probabilities = [x for x in probabilities if x!= 0.00000000001953125]\n    probabilities = [x for x in probabilities if x!= 0.00000000015625]\n    probabilities = [x for x in probabilities if x!= 0.000000000078125]\n    probabilities = [x for x in probabilities if x!= 0.0000000000390625]\n    probabilities = [x for x in probabilities if x!= 0.00000000001953125]\n    probabilities = [x for x in probabilities if x!= 0.00000000015625]\n    probabilities = [x for x in probabilities if x!= 0.000000000078125]\n    probabilities = [x for x in probabilities if x!= 0.0000000000390625]\n    probabilities = [x for x in probabilities if x!= 0.00000000001953125]\n    probabilities = [x for x in probabilities if x!= 0.00000000015625]\n    probabilities = [x for x in probabilities if x!= 0.000000000078125"
    },
    {
        "number": 3204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 100\n   ... 200\n   ... ''')\n    '160'\n    >>> solution('''3\n   ... 100\n   ... 200\n   ... 2010\n   ... ''')\n    '250'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n3 3 2 1\\n3 3 3\\n\")\n    '1 1\\n1 2\\n2 3 4'\n    \"\"\"\n    n, s = map(int, stdin.split())\n    blocks = list(map(int, stdin.split()))\n    buildings = list(map(int, stdin.split()))\n    blocks.sort()\n    buildings.sort()\n    if n < s:\n        return \"-1\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) > s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    if sum(buildings) < s:\n        return \"-1\"\n    if sum(buildings) == s:\n        return \"0\"\n    "
    },
    {
        "number": 3207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\")\n    we will avenge our dead parrot arr\n    >>> solution(\"wl jkd\")\n    Impossible\n    \"\"\"\n    words = set(stdin.split())\n    if len(words) < 12:\n        return \"Impossible\"\n    cipher = {\n        \"a\": \"h\",\n        \"b\": \"e\",\n        \"c\": \"x\",\n        \"d\": \"z\",\n        \"e\": \"a\",\n        \"f\": \"r\",\n        \"g\": \"u\",\n        \"h\": \"b\",\n        \"i\": \"m\",\n        \"j\": \"x\",\n        \"k\": \"v\",\n        \"l\": \"z\",\n        \"m\": \"c\",\n        \"n\": \"j\",\n        \"o\": \"s\",\n        \"p\": \"c\",\n        \"q\": \"n\",\n        \"r\": \"f\",\n        \"s\": \"g\",\n        \"t\": \"l\",\n        \"u\": \"k\",\n        \"v\": \"d\",\n        \"w\": \"o\",\n        \"x\": \"i\",\n        \"y\": \"p\",\n        \"z\": \"y\",\n    }\n    return \" \".join(\n        \"\".join(cipher[c] for c in word) for word in stdin.split() if word in words\n    )\n"
    },
    {
        "number": 3209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\")\n    '68.3'\n    >>> solution(\"Amsterdam Rotterdam\\n1\\nAmsterdam Rotterdam 10 22 5 10\")\n    'IMPOSSIBLE'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of moves that can be made, in the worst case, before either Alice or Bob is guaranteed to have scored a point.\"\"\"\n    # Get the size of the lattice\n    size = int(stdin.split('\\n')[0])\n    # Get the current state of the game\n    state = stdin.split('\\n')[1:]\n    # Initialize the number of moves\n    moves = 0\n    # Iterate over the rows\n    for row in range(size):\n        # Iterate over the columns\n        for col in range(size):\n            # If the current cell is a dot\n            if state[row][col] == '*':\n                # If the cell above is a dot\n                if state[row - 1][col] == '*':\n                    # If the cell to the left is a dot\n                    if state[row][col - 1] == '*':\n                        # If the cell to the right is a dot\n                        if state[row][col + 1] == '*':\n                            # If the cell below is a dot\n                            if state[row + 1][col] == '*':\n                                # If the cell to the left of the cell below is a dot\n                                if state[row + 1][col - 1] == '*':\n                                    # If the cell to the right of the cell below is a dot\n                                    if state[row + 1][col + 1] == '*':\n                                        # If the cell to the left of the cell to the right of the cell below is a dot\n                                        if state[row + 1][col - 2] == '*':\n                                            # If the cell to the right of the cell to the left of the cell to the right of the cell below is a dot\n                                            if state[row + 1][col + 2] == '*':\n                                                # If the cell below is a dot\n                                                if state[row + 2][col] == '*':\n                                                    # If the cell to the left of the cell below is a dot\n                                                    if state[row + 2][col - 1] == '*':\n                                                        # If the cell to the right of the cell below is a dot\n                                                        if state[row + 2][col + 1] == '*':\n                                                            # If the cell to the left of the cell to the right of the cell below is a dot\n                                                            if state[row + 2][col - 2] == '*':\n                                                                # If the cell to the right of the cell to the left of the cell to the right of the cell below is a dot\n                                                                if state[row + 2][col + 2] == '*':\n                                                                    # If the cell below is a dot\n                                                                    if state[row + 3][col] == '*':\n                                                                        # If the cell to the left of the cell below is a dot\n                                                                        if state[row + 3][col - 1] == '*':\n                                                                            # If the cell to the right of the cell below is a dot\n                                                                            if state[row + 3][col + 1] == '*':\n                                                                                # If the cell to the left of the cell to the right of the cell below is a dot\n                                                                                if state[row + 3][col - 2] == '*':\n                                                                                    # If the cell to the right of the cell to the left of the cell to the right of the cell below is a dot\n                                                                                    if state[row + 3][col + 2] == '*':\n                                                                                        # If the cell below is a dot\n                                                                                        if state[row + 4][col] == '*':\n                                                                                            # If the cell to the left of the cell below is a dot\n                                                                                            if state[row + 4][col - 1] == '*':\n                                                                                                # If the cell to the right of the cell below is a dot\n                                                                                                if state[row + 4][col + 1] == '*':\n                                                                                                    # If the cell to the left of the cell to the right of the cell below is a dot\n                                                                                                    if state[row + 4][col - 2] == '*':\n                                                                                                        # If the cell to the right of the cell to the left of the cell to the right of the cell below is a dot\n                                                                                                        if state[row + 4][col + 2] == '*':\n                                                                                                            # If the cell below is a dot\n                                                                                                            if state[row + 5][col] == '*':\n                                                                                                                # If the cell to the left of the cell below is a dot\n                                                                                                                if state[row + 5][col - 1] == '*':\n                                                                                                                    # If the cell to the right of the cell below is a dot\n                                                                                                                    if state[row + 5][col + 1] == '*':\n                                                                                                                        # If the cell to the left of the cell to the right of the cell below is a dot\n                                                                                                                        if state[row + 5][col - 2] == '*':\n                                                                                                                            # If the cell to the right of the cell to the left of the cell to the right of the cell below is a dot\n                                                                                                                            if state[row + 5][col + 2] == '*':\n                                                                                                                                # If the cell below is a dot\n                                                                                                                                if state[row + 6][col] == '*':\n                                                                                                                                    # If the cell to the left of the cell below is a dot\n                                                                                                                                    if state[row + 6][col - 1] == '*':\n                                                                                                                                        # If the cell to the right of the cell below is a dot\n"
    },
    {
        "number": 3211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    swaps = 0\n    for i in range(n):\n        if s[i] == '1':\n            if s[i - 1] == '0':\n                swaps += 1\n            if i + 1 < n and s[i + 1] == '0':\n                swaps += 1\n    if swaps % 2 == 0:\n        return 'impossible'\n    else:\n        return swaps // 2\n"
    },
    {
        "number": 3212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 500 500 499\n   ... 0 0 999\n   ... 1000 1000 200\n   ... 1000 1000 200\n   ... 1000 1000 200\n   ... ''')\n    'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\n    \"\"\"\n   ..."
    },
    {
        "number": 3213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, S = [int(x) for x in stdin.split()]\n    steps = stdin.split()\n    # print(steps)\n    # print(M, S)\n    # print(steps[0])\n    # print(steps[1])\n    # print(steps[2])\n    # print(steps[3])\n    # print(steps[4])\n    # print(steps[5])\n    # print(steps[6])\n    # print(steps[7])\n    # print(steps[8])\n    # print(steps[9])\n    # print(steps[10])\n    # print(steps[11])\n    # print(steps[12])\n    # print(steps[13])\n    # print(steps[14])\n    # print(steps[15])\n    # print(steps[16])\n    # print(steps[17])\n    # print(steps[18])\n    # print(steps[19])\n    # print(steps[20])\n    # print(steps[21])\n    # print(steps[22])\n    # print(steps[23])\n    # print(steps[24])\n    # print(steps[25])\n    # print(steps[26])\n    # print(steps[27])\n    # print(steps[28])\n    # print(steps[29])\n    # print(steps[30])\n    # print(steps[31])\n    # print(steps[32])\n    # print(steps[33])\n    # print(steps[34])\n    # print(steps[35])\n    # print(steps[36])\n    # print(steps[37])\n    # print(steps[38])\n    # print(steps[39])\n    # print(steps[40])\n    # print(steps[41])\n    # print(steps[42])\n    # print(steps[43])\n    # print(steps[44])\n    # print(steps[45])\n    # print(steps[46])\n    # print(steps[47])\n    # print(steps[48])\n    # print(steps[49])\n    # print(steps[50])\n    # print(steps[51])\n    # print(steps[52])\n    # print(steps[53])\n    # print(steps[54])\n    # print(steps[55])\n    # print(steps[56])\n    # print(steps[57])\n    # print(steps[58])\n    # print(steps[59])\n    # print(steps[60])\n    # print(steps[61])\n    # print(steps[62])\n    # print(steps[63])\n    # print(steps[64])\n    # print(steps[65])\n    # print(steps[66])\n    # print(steps[67])\n    # print(steps[68])\n    # print(steps[69])\n    # print(steps[70])\n    # print(steps[71])\n    # print(steps[72])\n    # print(steps[73])\n    # print(steps[74])\n    # print(steps[75])\n    # print(steps[76])\n    # print(steps[77])\n    # print(steps[78])\n    # print(steps[79])\n    # print(steps[80])\n    # print(steps[81])\n    # print(steps[82])\n    # print(steps[83])\n    # print(steps[84])\n    # print(steps[85])\n    # print(steps[86])\n    # print(steps[87])\n    # print(steps[88])\n    # print(steps[89])\n    # print(steps[90])\n    # print(steps[91])\n    # print(steps[92])\n    # print(steps[93])\n    # print(steps[94])\n    # print(steps[95])\n    # print(steps[96])\n    # print(steps[97])\n    # print(steps[98])\n    # print(steps[99])\n    # print(steps[100])\n    # print(steps[101])\n    # print(steps[102])\n    # print(steps[103])\n    # print(steps[104])\n    # print(steps[105])\n    # print(steps[106])\n    # print(steps[107])\n    # print(steps[108])\n    # print(steps[109])\n    # print(steps[110])\n    # print(steps[111])\n    # print(steps[112])\n    # print(steps[113])\n    # print(steps[114])\n    # print(steps[115])\n    # print(steps[116])\n    # print(steps[117])\n    # print(steps[118])\n    # print(steps[119])\n    # print(steps[120])\n    # print(steps[121])\n    # print(steps[122])\n    # print(steps[123])\n    # print(steps[124])\n    # print(steps[125])\n    # print(steps[126])\n    # print(steps[127])\n    # print(steps[128])\n    # print(steps[129])\n    # print(steps[130])\n    # print(steps[131])\n    # print(steps[132])\n    # print(steps[133])\n    # print(steps[134])\n    # print(steps[135])\n    # print(steps[136])\n    # print(steps[137])\n    # print(steps[138])\n    # print(steps[139])\n    # print(steps[140])\n    # print(steps[141])\n    # print(steps[142])\n    # print(steps[143])\n    # print(steps[144])\n    # print(steps[145])\n    # print(steps[146])\n    # print(steps[147])\n    # print(steps[148])\n    # print(steps[149])\n    # print(steps[150])\n    # print(steps[151])\n    # print(steps[152])\n    # print(steps[153])\n    # print(steps[154])\n    # print(steps[155])\n    # print(steps[156])\n    # print(steps[157])\n    # print(steps[158])\n    # print(steps[159])"
    },
    {
        "number": 3214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"Lost is Close to Lose\\n\\\"Better Documents Inc. wants to add Typo Checking in to the\\nnext generation of word processors,\\\" he said.\\n***\")\n    close: lose\n    he: the\n    in: inc is\n    inc: in\n    is: in\n    lose: close lost\n    lost: lose\n    the: he\n    \"\"\"\n    pass"
    },
    {
        "number": 3215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 1 2 7 3 8 9 4 5 10 6''')\n    '1'\n    >>> solution('''10\n   ... 3 8 1 9 4 5 2 7 10 6''')\n    '2'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    cards = list(map(int, stdin.split('\\n')[1].split(' ')))\n    cards.sort()\n    cards.reverse()\n    cards.append(cards.pop(0))\n    count = 0\n    while cards!= list(range(1, n + 1)):\n        cards.reverse()\n        cards.append(cards.pop(0))\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 3216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0.142857 6\")\n    '1/7'\n    >>> solution(\"1.6 1\")\n    '5/3'\n    \"\"\"\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    nums = [int(i) for i in n]\n    nums.reverse()\n    nums = nums[:m]\n    nums.reverse()\n    nums = [str(i) for i in nums]\n    nums = \"\".join(nums)\n    nums = nums.split(\".\")\n    nums = nums[0] + \".\" + nums[1]\n    nums = nums.split(\"0\")\n    nums = [i for i in nums if i!= \"\"]\n    nums = [i.split(\".\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"1\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"2\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"3\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"4\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"5\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"6\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"7\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"8\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"9\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"10\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"11\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"12\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"13\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"14\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"15\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"16\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"17\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"18\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"19\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"20\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"21\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"22\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"23\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"24\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"25\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"26\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"27\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"28\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"29\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"30\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"31\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"32\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"33\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"34\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"35\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"36\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"37\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"38\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"39\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"40\") for i in nums]\n    nums = [i[0] for i in nums]\n    nums = [i.split(\"41\") for i in nums]\n    nums = [i"
    },
    {
        "number": 3217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of panels required to contain the defective cells.\"\"\"\n    # Get the number of defective cells\n    n = int(stdin.readline())\n\n    # Initialize the minimum number of panels\n    min_panels = 0\n\n    # Iterate over the number of defective cells\n    for _ in range(n):\n        # Get the coordinates of the defective cell\n        x, y, z = map(int, stdin.readline().split())\n\n        # Increment the minimum number of panels\n        min_panels += 1\n\n        # Iterate over the coordinates of the defective cell\n        for i in range(x + 1):\n            for j in range(y + 1):\n                for k in range(z + 1):\n                    # Increment the minimum number of panels\n                    min_panels += 1\n\n    # Return the minimum number of panels\n    return min_panels\n"
    },
    {
        "number": 3218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... -1 2 -1\n   ... 2 2\n   ... 1 -1 1\n   ... ''')\n    '1'\n    >>> solution('''7\n   ... -1 4 5 1 0 -1 -1\n   ... -1 3 2 0 0 1\n   ... -1 4 -1 1 0 -1 -1\n   ... 1 3 4 2 2 4\n   ... 0 2 3 -1 4 4 2\n   ... -1 4 4 3 3 2\n   ... 1 -1 -1 -1 4 2 -1\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin.readline())\n    edges = []\n    for i in range(n):\n        if i % 2 == 0:\n            edges.append(list(map(int, stdin.readline().split())))\n        else:\n            edges.append(list(map(int, stdin.readline().split()))[1:])\n    return str(count_valid_colorings(edges))\n\n\ndef"
    },
    {
        "number": 3219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin, 2) + 1).count('2'))"
    },
    {
        "number": 3220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    p.sort()\n    d = {}\n    for i in range(n):\n        d[p[i]] = i\n    ans = []\n    for i in range(n):\n        if p[i] == 1:\n            ans.append('L')\n        else:\n            ans.append('R')\n    for i in range(n):\n        if p[i] == 1:\n            ans[i] = 'L'\n        else:\n            ans[i] = 'R'\n    for i in range(n):\n        if p[i] == 1:\n            ans[i] = 'L'\n        else:\n            ans[i] = 'R'\n    return ''.join(ans)"
    },
    {
        "number": 3221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 7 10\n   ... 1 2 1000000\n   ... 2 3 2000000\n   ... 3 4 3000000\n   ... 4 5 4000000\n   ... 5 6 5000000\n   ... 6 7 6000000\n   ... 7 1 7000000''')\n    '49000000000070'\n    >>> solution('''6 6 7\n   ... 1 3 1000000\n   ... 3 5 3000000\n   ... 5 1 5000000\n   ... 2 4 2000000\n   ... 4 6 4000000\n   ... 6 2 6000000''')\n    '25000000000021'\n    \"\"\"\n   ..."
    },
    {
        "number": 3222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\")\n    '2\\n2\\n0\\n1\\n2\\n2\\n3'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {i: set() for i in range(n)}\n    for f, t in edges:\n        graph[f].add(t)\n        graph[t].add(f)\n    visited = set()\n    for i in range(n):\n        if i not in visited:\n            visited.add(i)\n            dfs(graph, i, visited)\n    if len(visited) == n:\n        return \"Yeah!\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 3223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 1 2\\n\")\n    'POSSIBLE\\n1 3\\n2 3'\n    \"\"\"\n    V, *degrees = map(int, stdin.split())\n    if sum(degrees) % 2:\n        return \"IMPOSSIBLE\"\n    edges = []\n    for i in range(V):\n        for j in range(degrees[i]):\n            edges.append((i + 1, j + 1))\n    edges.sort()\n    return \"POSSIBLE\\n\" + \"\\n\".join(map(str, edges))\n"
    },
    {
        "number": 3224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, z1 = map(int, stdin.split())\n    x2, y2, z2 = map(int, stdin.split())\n    x3, y3, z3 = map(int, stdin.split())\n    x4, y4, z4 = map(int, stdin.split())\n    x_c = (x1 + x2 + x3 + x4) / 4\n    y_c = (y1 + y2 + y3 + y4) / 4\n    z_c = (z1 + z2 + z3 + z4) / 4\n    return f\"{x_c} {y_c} {z_c}\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 3 6 2 3 2 2 2 1 5 6''')\n    '2'\n    >>> solution('''3\n   ... 17 17 17''')\n    '0'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    values = [int(x) for x in stdin.split('\\n')[1].split()]\n    queue = []\n    for i in range(n):\n        queue.append(values[i])\n    queue.sort()\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n    queue.append(values[0])\n    queue.reverse()\n"
    },
    {
        "number": 3226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\")\n    '74.6666666667'\n    \"\"\"\n    n, m, e, *roads = [int(x) for x in stdin.split()]\n    intersections = {i: [] for i in range(1, n + 1)}\n    for road in roads:\n        a, b, l = road\n        intersections[a].append((b, l))\n        intersections[b].append((a, l))\n\n    police_car_start = int(stdin.split()[-1])\n    police_car_end = int(stdin.split()[-2])\n    police_car_max_speed = 160\n    police_car_route = []\n    police_car_route.append(police_car_start)\n    police_car_route.append(police_car_end)\n    police_car_route.append(police_car_max_speed)\n\n    min_speed = 100\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                continue\n            if (i, j) in police_car_route:\n                continue\n            for road in intersections[i]:\n                if road[0] == j:\n                    speed = road[1]\n                    if speed < min_speed:\n                        min_speed = speed\n                    break\n    if min_speed == 100:\n        return \"IMPOSSIBLE\"\n    return f\"{min_speed:.6f}\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... 50 50 75\n   ... 25 25 25\n   ... ''')\n    '2'\n    >>> solution('''5 2\n   ... 50 50 50 50\n   ... 25 25 25 25\n   ... ''')\n    '1'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    scores = [int(x) for x in stdin.split('\\n')[1:]]\n    scores.sort(reverse=True)\n    rank = 1\n    for i in range(n - 1):\n        if scores[i] < scores[i + 1]:\n            rank += 1\n    return str(rank)\n"
    },
    {
        "number": 3230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    tram = []\n    for _ in range(rows):\n        tram.append(stdin.split()[1:])\n    \n    def get_distance(x1, y1, x2, y2):\n        return abs(x1 - x2) + abs(y1 - y2)\n    \n    def get_nearest_seat(x, y):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):\n                if tram[i][j] == 'X':\n                    distance = get_distance(x, y, i, j)\n                    if distance < min_distance:\n                        min_distance = distance\n                        min_seat = (i, j)\n        return min_seat\n    \n    def get_nearest_seat_in_direction(x, y, direction):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):\n                if tram[i][j] == 'X':\n                    distance = get_distance(x, y, i, j)\n                    if distance < min_distance:\n                        min_distance = distance\n                        min_seat = (i, j)\n        return min_seat\n    \n    def get_nearest_seat_in_direction_and_distance(x, y, direction):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):\n                if tram[i][j] == 'X':\n                    distance = get_distance(x, y, i, j)\n                    if distance < min_distance:\n                        min_distance = distance\n                        min_seat = (i, j)\n        return min_seat\n    \n    def get_nearest_seat_in_direction_and_distance_and_distance(x, y, direction):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):\n                if tram[i][j] == 'X':\n                    distance = get_distance(x, y, i, j)\n                    if distance < min_distance:\n                        min_distance = distance\n                        min_seat = (i, j)\n        return min_seat\n    \n    def get_nearest_seat_in_direction_and_distance_and_distance_and_distance(x, y, direction):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):\n                if tram[i][j] == 'X':\n                    distance = get_distance(x, y, i, j)\n                    if distance < min_distance:\n                        min_distance = distance\n                        min_seat = (i, j)\n        return min_seat\n    \n    def get_nearest_seat_in_direction_and_distance_and_distance_and_distance_and_distance(x, y, direction):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):\n                if tram[i][j] == 'X':\n                    distance = get_distance(x, y, i, j)\n                    if distance < min_distance:\n                        min_distance = distance\n                        min_seat = (i, j)\n        return min_seat\n    \n    def get_nearest_seat_in_direction_and_distance_and_distance_and_distance_and_distance_and_distance(x, y, direction):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):\n                if tram[i][j] == 'X':\n                    distance = get_distance(x, y, i, j)\n                    if distance < min_distance:\n                        min_distance = distance\n                        min_seat = (i, j)\n        return min_seat\n    \n    def get_nearest_seat_in_direction_and_distance_and_distance_and_distance_and_distance_and_distance_and_distance(x, y, direction):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):\n                if tram[i][j] == 'X':\n                    distance = get_distance(x, y, i, j)\n                    if distance < min_distance:\n                        min_distance = distance\n                        min_seat = (i, j)\n        return min_seat\n    \n    def get_nearest_seat_in_direction_and_distance_and_distance_and_distance_and_distance_and_distance_and_distance_and_distance(x, y, direction):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):\n                if tram[i][j] == 'X':\n                    distance = get_distance(x, y, i, j)\n                    if distance < min_distance:\n                        min_distance = distance\n                        min_seat = (i, j)\n        return min_seat\n    \n    def get_nearest_seat_in_direction_and_distance_and_distance_and_distance_and_distance_and_distance_and_distance_and_distance_and_distance(x, y, direction):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):\n                if tram[i][j] == 'X':\n                    distance = get_distance(x, y, i, j)\n                    if distance < min_distance:\n                        min_distance = distance\n                        min_seat = (i, j)\n        return min_seat\n    \n    def get_nearest_seat_in_direction_and_distance_and_distance_and_distance_and_distance_and_distance_and_distance_and_distance_and_distance_and_distance(x, y, direction):\n        min_distance = float('inf')\n        min_seat = None\n        for i in range(rows):\n            for j in range(cols):"
    },
    {
        "number": 3231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(x) for x in stdin.split()]\n    friends = [[int(x) for x in stdin.split()] for _ in range(n)]\n    friends.sort(key=lambda x: x[0])\n    groups = []\n    for i in range(n):\n        groups.append([i])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if friends[i][1] == friends[j][1]:\n                groups[i].append(j)\n                groups[j].append(i)\n    for i in range(n):\n        if len(groups[i]) > p + 1:\n            return \"detention\"\n    for i in range(n):\n        if len(groups[i]) < p + 1:\n            return \"detention\"\n    for i in range(n):\n        if len(groups[i]) > q + 1:\n            return \"detention\"\n    for i in range(n):\n        if len(groups[i]) < q + 1:\n            return \"detention\"\n    for i in range(n):\n        if len(groups[i]) == p + 1:\n            for j in range(p):\n                if len(groups[groups[i][j]])!= p:\n                    return \"detention\"\n        if len(groups[i]) == q + 1:\n            for j in range(q):\n                if len(groups[groups[i][j]])!= q:\n                    return \"detention\"\n    return \"home\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 3234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 3235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5\n   ... 0 1 10\n   ... 1 2 10\n   ... 0 3 10\n   ... 3 2 10\n   ... 2 0 20''')\n    '0'\n    >>> solution('''4 5\n   ... 0 1 10\n   ... 1 2 10\n   ... 0 3 10\n   ... 3 2 10\n   ... 2 0 20\n   ... 3 1 5''')\n    '1'\n    >>> solution('''4 5\n   ... 0 1 10\n   ... 1 2 10\n   ... 0 3 10\n   ... 3 2 10\n   ... 2 0 20\n   ... 3 1 5\n   ... 3 0 5''')\n    '0'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    iou = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, m + 1)]\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x[2], reverse=True)\n    iou = sorted(iou, key=lambda x: x[0])\n    iou = sorted(iou, key=lambda x: x[1])\n    iou = sorted(iou, key=lambda x: x["
    },
    {
        "number": 3236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6\n   ... 1 3 2 1 5\n   ... 1 3\n   ... 2 3\n   ... 1 4\n   ... 3 5\n   ... 4 5\n   ... 2 5''')\n    '5'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    fibonacci = [1, 1]\n    for i in range(2, n + 1):\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    ans = 0\n    for _ in range(m):\n        a, b = map(int, stdin.split('\\n')[2 + _].split())\n        if a == b:\n            ans = max(ans, 1)\n        else:\n            ans = max(ans, fibonacci[b] - fibonacci[a - 1])\n    return str(ans)\n"
    },
    {
        "number": 3237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"020302\")\n    7\n    >>> solution(\"1311\")\n    24\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    n = len(stdin)\n    cost = 0\n    for i in range(0, n, 2):\n        cost += primes[int(stdin[i])]\n    return cost % (10 ** 9 + 7)\n"
    },
    {
        "number": 3238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 10\n   ... #.#..##..#\n   ... ####...#.\n   ... #.#.###..\n   ... #.#.##.#.\n   ... ###.#...\n   ... #.#.#.#.\n   ... ##.#.#.#\n   ... ##.####.\n   ... ##..##..\n   ... #.######.\n   ... ####.#.#\n   ... ####.###\n   ... ##.##.##\n   ... #.#####.#\n   ... ##..#..#\n   ... #.#.###..\n   ... #.##..###\n   ... #.#.#####\n   ... ##.####.#\n   ... ##..####\n   ... #.##...#\n   ... #.####...\n   ... #.#.#.###\n   ... #.#.#.###\n   ... ##.#.#.#\n   ... ##.#####\n   ... ##..####\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##.##.##\n   ... #.#####.#\n   ... ##.#..##\n   ... #.####...\n   ... ####.#.#\n   ... ##.#####.\n   ... ##..####\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #.#####.#\n   ... ##.#....\n   ... ##..#..#\n   ... #.##...#\n   ... #.######.\n   ... #."
    },
    {
        "number": 3239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = stdin.split()\n    N, P = int(N), float(P)\n    return str(round(N * P * 100))"
    },
    {
        "number": 3240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 7 1\n   ... 3 2\n   ... 10 0\n   ... ''')\n    '10.5'\n    >>> solution('''3\n   ... 2 1\n   ... 4 0\n   ... 0 3\n   ... ''')\n    '-1'\n    \"\"\"\n   ..."
    },
    {
        "number": 3242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5 2\n   ... 3 3 3 3\n   ... 0 1\n   ... 0 3\n   ... 1 3\n   ... 1 2\n   ... 2 3\n   ... ''')\n    'yes'\n    >>> solution('''5 4 4\n   ... 1 1 2 2 2\n   ... 0 1\n   ... 2 3\n   ... 3 4\n   ... 4 2\n   ... ''')\n    'yes'\n    >>> solution('''5 4 4\n   ... 1 1 2 2 2\n   ... 0 1\n   ... 2 3\n   ... 3 4\n   ... 4 2\n   ... ''')\n    'no'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    connections = [list(map(int, stdin.split())) for _ in range(m)]\n    connections.sort(key=lambda x: x[2])\n    sockets = [0] * n\n    for u, v, c in connections:\n        sockets[u] += c\n        sockets[v] += c\n    sockets.sort()\n    return 'yes' if sockets[-1] - sockets[0] <= k else 'no'\n"
    },
    {
        "number": 3244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n5\\n5\\n5\\n\")\n    '2\\n1\\n2\\n'\n    >>> solution(\"4\\n20\\n15\\n17\\n14\\n\")\n    '5\\n8\\n2\\n7\\n'\n    \"\"\"\n    n = int(stdin.split()[0])\n    ring = [int(i) for i in stdin.split()[1:]]\n    ring = ring + ring[:1]\n    for i in range(n):\n        ring[i] = ring[i] + ring[i + 1]\n    return \"\\n\".join(map(str, ring[:n]))\n"
    },
    {
        "number": 3245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\npython\\np^ main.py\\n^ -n 10\")\n    python\n    python main.py\n    python main.py -n 10\n    \"\"\"\n    history = []\n    for line in stdin.splitlines():\n        if line:\n            history.append(line)\n        else:\n            history.append(history.pop() + history.pop())\n    return \"\\n\".join(history)\n"
    },
    {
        "number": 3246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"tihssnetnceemkaesprfecetsesne\\n5\\nmakes\\nperfect\\nsense\\nsentence\\nthis\\n\")\n    'this sentence makes perfect sense'\n    >>> solution(\"hitehre\\n2\\nthere\\nhello\\n\")\n    'impossible'\n    \"\"\"\n    sentence = stdin.split(\"\\n\")[0]\n    words = [word.strip() for word in stdin.split(\"\\n\")[1:]]\n    words_set = set(words)\n    words_dict = {word: True for word in words}\n    words_dict_set = set(words_dict)\n    if len(words_set)!= len(words_dict_set):\n        return \"ambiguous\"\n    for word in words:\n        if len(word) > 100 or len(word) < 1:\n            return \"impossible\"\n    for word in words:\n        if len(word) > len(sentence):\n            return \"impossible\"\n    for i in range(1, len(sentence) - 1):\n        if sentence[i - 1] == sentence[i + 1]:\n            return \"impossible\"\n    for word in words:\n        for i in range(1, len(word) - 1):\n            if word[i - 1] == word[i + 1]:\n                return \"impossible\"\n    for word in words:\n        if word[0]!= sentence[0] and word[-1]!= sentence[-1]:\n            return \"impossible\"\n    for word in words:\n        if word[0]!= sentence[0]:\n            sentence = sentence[1:] + sentence[0]\n        if word[-1]!= sentence[-1]:\n            sentence = sentence[:-1] + word[-1]\n        if word in words_dict:\n            words_dict[word] = False\n    if len(words_dict) == 0:\n        return \"impossible\"\n    for word in words_dict:\n        if words_dict[word]:\n            return \"impossible\"\n    return sentence\n"
    },
    {
        "number": 3247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(pow(2, n * m, 10 ** 9 + 9))\n"
    },
    {
        "number": 3248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... abcbab\n   ... 2\n   ... cb\n   ... cbab\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... abab\n   ... 2\n   ... bac\n   ... baba\n   ... ''')\n    '4'\n    \"\"\"\n   ..."
    },
    {
        "number": 3249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''24\n   ... 3\n   ... 10 10\n   ... 30 10\n   ... 20 20''')\n    '4\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ... 80 10\n   ... 80 0\n   ... 110 0''')\n    '6\n    >>> solution('''50\n   ... 4\n   ... 110 10\n   ..."
    },
    {
        "number": 3250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d = map(int, stdin.split())\n    if d % 2 == 0:\n        return \"no\"\n    if d % 4 == 1:\n        return \"yes\"\n    if d % 4 == 3:\n        return \"no\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 3:\n        return \"yes\"\n    if d % 8 == 1:\n        return \"no\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 1:\n        return \"yes\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 3:\n        return \"yes\"\n    if d % 8 == 1:\n        return \"no\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 3:\n        return \"yes\"\n    if d % 8 == 1:\n        return \"no\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 3:\n        return \"yes\"\n    if d % 8 == 1:\n        return \"no\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 3:\n        return \"yes\"\n    if d % 8 == 1:\n        return \"no\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 3:\n        return \"yes\"\n    if d % 8 == 1:\n        return \"no\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 3:\n        return \"yes\"\n    if d % 8 == 1:\n        return \"no\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 3:\n        return \"yes\"\n    if d % 8 == 1:\n        return \"no\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 3:\n        return \"yes\"\n    if d % 8 == 1:\n        return \"no\"\n    if d % 8 == 5:\n        return \"yes\"\n    if d % 8 == 7:\n        return \"no\"\n    if d % 8 == 3:\n        return \"yes\"\n    if d % 8 == 1:"
    },
    {
        "number": 3251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n3 4\\n2 5\\n1 6\")\n    3\n    >>> solution(\"5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    intervals = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    intervals.sort()\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[1] > intervals[-1][1]\n    ]\n    intervals.sort(key=lambda x: x[0])\n    intervals = [intervals[0]] + [\n        interval for interval in intervals if interval[0] > intervals[-1][0]\n    ]\n    intervals.sort(key=lambda x: x[1])\n    intervals = [intervals[0]] + [\n        "
    },
    {
        "number": 3252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 1\n   ... 10 10 5\n   ... 9 8 10\n   ... 4 12 20\n   ... 12 4 8\n   ... 2 3 16''')\n    5836\n    \"\"\"\n   ..."
    },
    {
        "number": 3253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 7 2401 3299 0\n   ... 6 2401 2399 0\n   ... 2 750 750 99\n   ... ''')\n    '50'\n    \"\"\"\n   ..."
    },
    {
        "number": 3254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P = float(stdin)\n    if P < 1 or P > 5:\n        return \"Invalid input\"\n    else:\n        return \" \".join(str(i) for i in [0, 0, 0, 0, 0] if P % i == 0)\n"
    },
    {
        "number": 3255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, m = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    max_len = 0\n    for i in range(n):\n        if i + d > n:\n            break\n        for j in range(i + d, n):\n            if abs(arr[j] - arr[i]) <= m:\n                max_len = max(max_len, j - i + 1)\n            else:\n                break\n    return str(max_len)\n"
    },
    {
        "number": 3256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        if i < n - 1:\n            ans = max(ans, arr[i] & arr[i + 1])\n        else:\n            ans = max(ans, arr[i] & arr[0])\n    return ans\n"
    },
    {
        "number": 3257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(float, stdin.split())\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    return round(abs(a * b * c) ** 0.5, 3)\n"
    },
    {
        "number": 3258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n3 4 2\\n.75\")\n    '2.49999999875'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    m = float(stdin.split(\"\\n\")[1])\n    mice = []\n    for i in range(n):\n        mice.append(list(map(int, stdin.split(\"\\n\")[i + 2].split())))\n    mice.sort(key=lambda x: x[2])\n    mice.sort(key=lambda x: x[0])\n    mice.sort(key=lambda x: x[1])\n    mice.sort(key=lambda x: x[0] * m)\n    return str(mice[0][0] * m)\n"
    },
    {
        "number": 3259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 3\n   ... 2 1 6\n   ... 1 1 5 1 2\n   ... 2 1 6\n   ... ''')\n    '0'\n    >>> solution('''4 5\n   ... 1 1 4 3 4\n   ... 2 1 1\n   ... 2 2 2\n   ... 2 3 3\n   ... 2 4 4\n   ... ''')\n    '3'\n    >>> solution('''4 5\n   ... 1 1 4 3 4\n   ... 2 1 1\n   ... 2 2 2\n   ... 2 3 3\n   ... 2 4 4\n   ... ''')\n    '2'\n    >>> solution('''4 5\n   ... 1 1 4 3 4\n   ... 2 1 1\n   ... 2 2 2\n   ... 2 3 3\n   ... 2 4 4\n   ... ''')\n    '1'\n    >>> solution('''4 5\n   ... 1 1 4 3 4\n   ... 2 1 1\n   ... 2 2 2\n   ... 2 3 3\n   ... 2 4 4\n   ... ''')\n    '0'\n    \"\"\"\n    n, q = map(int, stdin.split())\n    boxes = [0] * n\n    for _ in range(q):\n        l, r, a, b = map(int, stdin.split())\n        if l == 1:\n            boxes[l - 1] = a % b\n        elif l == 2:\n            for i in range(l - 1, r):\n                boxes[i] = (boxes[i] + a) % b\n        else:\n            for i in range(l - 1, r):\n                boxes[i] = (boxes[i] + (i - l + 1) * a) % b\n    return''.join(map(str, boxes))\n"
    },
    {
        "number": 3260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n    return str(count_permutations(n, k, p))\n\ndef"
    },
    {
        "number": 3261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5 3\n   ... 1 2 3\n   ... 0 1 1\n   ... 0 3 1\n   ... 0 2 1\n   ... 1 2 1\n   ... 3 2 1''')\n    '2'\n    \"\"\"\n    N, M, C = map(int, stdin.split('\\n')[0].split())\n    clients = list(map(int, stdin.split('\\n')[1].split()))\n    edges = []\n    for _ in range(M):\n        u, v, w = map(int, stdin.split('\\n')[_].split())\n        edges.append((u, v, w))\n    edges.sort(key=lambda x: x[2])\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M, C)\n    # print(edges)\n    # print(clients)\n    # print(N, M,"
    },
    {
        "number": 3263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 10 20 30\n   ... 5 5 10\n   ... 2 20\n   ... 1 30\n   ... 1 32\n   ... 3 120''')\n    3\n    \"\"\"\n   ..."
    },
    {
        "number": 3264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the smallest number of days T such that 95% of the people travel back to B-ville.\n    \"\"\"\n    N, L = [int(x) for x in stdin.split()]\n    connections = [[int(x) for x in stdin.split()] for _ in range(N)]\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    connections = [[0] * N] + connections\n    "
    },
    {
        "number": 3266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5 0 3\n   ... 0 1 10\n   ... 1 2 1\n   ... 1 3 1\n   ... 0 2 1\n   ... 2 3 10''')\n    '4 3 5'\n    >>> solution('''2 1 0 1\n   ... 0 1 100000''')\n    '2 100000 1'\n    \"\"\"\n    n, m, s, t = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, c = map(int, stdin.split())\n        graph[u].append((v, c))\n    flow, residual = 0, [0] * n\n    def dfs(v, f):\n        nonlocal flow, residual\n        if v == t:\n            flow += f\n            return f\n        if flow == 0:\n            return 0\n        for v, c in graph[v]:\n            if residual[v] == 0 or dfs(v, min(c, residual[v])):\n                residual[v] -= c\n                residual[v] = 0 if residual[v] == 0 else residual[v]\n                flow += c\n                return c\n        return 0\n    dfs(s, float('inf'))\n    return''.join(map(str, [n, flow, m]))\n"
    },
    {
        "number": 3267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    board = [stdin[i:i + c] for i in range(0, len(stdin), c)]\n    mirko = 0\n    slavko = 0\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'M':\n                mirko += abs(i - j)\n            elif board[i][j] == 'S':\n                slavko += abs(i - j)\n    return str(mirko) +'' + str(slavko)\n"
    },
    {
        "number": 3268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"13\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\")\n    2\n    3 c\n    6 c\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    tree = {}\n    for line in stdin.split(\"\\n\")[1:]:\n        parent, child, label = line.split()\n        tree[child] = (parent, label)\n    # print(tree)\n    # print(n)\n    # print(tree)\n    # print(tree[1][1])\n    # print(tree[1][0])\n"
    },
    {
        "number": 3269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(sum(map(lambda x: abs(x[0] - x[1]), zip(str(a), str(b))))))\n"
    },
    {
        "number": 3270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nCAT\\nDOG\\nCOT\")\n    'COG'\n    >>> solution(\"2\\nCAT\\nDOG\")\n    0\n    >>> solution(\"2\\nCAT\\nDOG\\nCOT\")\n    0\n    >>> solution(\"2\\nCAT\\nDOG\\nCOT\\nCAT\")\n    'CAT'\n    >>> solution(\"2\\nCAT\\nDOG\\nCOT\\nCAT\\nCAT\")\n    'CAT'\n    >>> solution(\"2\\nCAT\\nDOG\\nCOT\\nCAT\\nCAT\\nCAT\")\n    'CAT'\n    >>> solution(\"2\\nCAT\\nDOG\\nCOT\\nCAT\\nCAT\\nCAT\\nCAT\")\n    'CAT'\n    >>> solution(\"2\\nCAT\\nDOG\\nCOT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\")\n    'CAT'\n    >>> solution(\"2\\nCAT\\nDOG\\nCOT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT\\nCAT"
    },
    {
        "number": 3271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    return str(n * (n - 1) // 2 - c * (c - 1) // 2)"
    },
    {
        "number": 3272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floor = [list(stdin[i]) for i in range(n)]\n    gargoyles = []\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == 'V':\n                gargoyles.append((i, j))\n    # print(gargoyles)\n    # print(floor)\n    # print(len(gargoyles))\n    # print(len(floor))\n    # print(len(floor[0]))\n    # print(len(floor[1]))\n    # print(len(floor[2]))\n    # print(len(floor[3]))\n    # print(len(floor[4]))\n    # print(len(floor[5]))\n    # print(len(floor[6]))\n    # print(len(floor[7]))\n    # print(len(floor[8]))\n    # print(len(floor[9]))\n    # print(len(floor[10]))\n    # print(len(floor[11]))\n    # print(len(floor[12]))\n    # print(len(floor[13]))\n    # print(len(floor[14]))\n    # print(len(floor[15]))\n    # print(len(floor[16]))\n    # print(len(floor[17]))\n    # print(len(floor[18]))\n    # print(len(floor[19]))\n    # print(len(floor[20]))\n    # print(len(floor[21]))\n    # print(len(floor[22]))\n    # print(len(floor[23]))\n    # print(len(floor[24]))\n    # print(len(floor[25]))\n    # print(len(floor[26]))\n    # print(len(floor[27]))\n    # print(len(floor[28]))\n    # print(len(floor[29]))\n    # print(len(floor[30]))\n    # print(len(floor[31]))\n    # print(len(floor[32]))\n    # print(len(floor[33]))\n    # print(len(floor[34]))\n    # print(len(floor[35]))\n    # print(len(floor[36]))\n    # print(len(floor[37]))\n    # print(len(floor[38]))\n    # print(len(floor[39]))\n    # print(len(floor[40]))\n    # print(len(floor[41]))\n    # print(len(floor[42]))\n    # print(len(floor[43]))\n    # print(len(floor[44]))\n    # print(len(floor[45]))\n    # print(len(floor[46]))\n    # print(len(floor[47]))\n    # print(len(floor[48]))\n    # print(len(floor[49]))\n    # print(len(floor[50]))\n    # print(len(floor[51]))\n    # print(len(floor[52]))\n    # print(len(floor[53]))\n    # print(len(floor[54]))\n    # print(len(floor[55]))\n    # print(len(floor[56]))\n    # print(len(floor[57]))\n    # print(len(floor[58]))\n    # print(len(floor[59]))\n    # print(len(floor[60]))\n    # print(len(floor[61]))\n    # print(len(floor[62]))\n    # print(len(floor[63]))\n    # print(len(floor[64]))\n    # print(len(floor[65]))\n    # print(len(floor[66]))\n    # print(len(floor[67]))\n    # print(len(floor[68]))\n    # print(len(floor[69]))\n    # print(len(floor[70]))\n    # print(len(floor[71]))\n    # print(len(floor[72]))\n    # print(len(floor[73]))\n    # print(len(floor[74]))\n    # print(len(floor[75]))\n    # print(len(floor[76]))\n    # print(len(floor[77]))\n    # print(len(floor[78]))\n    # print(len(floor[79]))\n    # print(len(floor[80]))\n    # print(len(floor[81]))\n    # print(len(floor[82]))\n    # print(len(floor[83]))\n    # print(len(floor[84]))\n    # print(len(floor[85]))\n    # print(len(floor[86]))\n    # print(len(floor[87]))\n    # print(len(floor[88]))\n    # print(len(floor[89]))\n    # print(len(floor[90]))\n    # print(len(floor[91]))\n    # print(len(floor[92]))\n    # print(len(floor[93]))\n    # print(len(floor[94]))\n    # print(len(floor[95]))\n    # print(len(floor[96]))\n    # print(len(floor[97]))\n    # print(len(floor[98]))\n    # print(len(floor[99]"
    },
    {
        "number": 3273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\""
    },
    {
        "number": 3274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\")\n    '0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-"
    },
    {
        "number": 3275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, S = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    \n    # find the first occurence of a pattern of length K\n    for i in range(N - K + 1):\n        if A[i] == A[i + K - 1]:\n            break\n    \n    # if the pattern is not found, return 0\n    if i == N - K + 1:\n        return 0\n    \n    # otherwise, return the number of changes needed\n    return N - i - 1"
    },
    {
        "number": 3278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 2\n   ... 1 2\n   ... 3 3''')\n    '3 2'\n    >>> solution('''5\n   ... 0 2\n   ... 1 3\n   ... 3 3\n   ... 7 5\n   ... 9 5''')\n    '12 3'\n    \"\"\"\n    frogs = [int(line) for line in stdin.splitlines()]\n    frogs.sort()\n    return''.join(map(str, frogs[-1:]))\n"
    },
    {
        "number": 3279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    borders = []\n    for _ in range(n):\n        borders.append(list(map(int, stdin.readline().split())))\n    solution = []\n    for i in range(n):\n        solution.append([0] * (n + 1))\n    for i in range(n):\n        for j in range(n):\n            if borders[i][j] == 0:\n                solution[i][j] = 0\n            else:\n                solution[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[i][k] == 1:\n                        solution[i][j] = 0\n                        break\n    for j in range(n):\n        for i in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[k][j] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[i][k] == 1:\n                        solution[i][j] = 0\n                        break\n    for j in range(n):\n        for i in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[k][j] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[i][k] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[k][j] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[i][k] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[k][j] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[i][k] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[k][j] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[i][k] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[k][j] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[i][k] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[k][j] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[i][k] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[k][j] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j] == 1:\n                for k in range(n):\n                    if solution[i][k] == 1:\n                        solution[i][j] = 0\n                        break\n    for i in range(n):\n        for j in range(n):\n            if solution[i][j]"
    },
    {
        "number": 3280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    shows = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        shows.append((x, y))\n    shows.sort()\n    ans = 0\n    for i in range(n):\n        if shows[i][0] >= shows[i][1]:\n            ans += 1\n        else:\n            break\n    return ans"
    },
    {
        "number": 3281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6 500\n   ... -100 0\n   ... -100 100\n   ... 0 200\n   ... 100 100\n   ... 100 0\n   ... 1 2\n   ... 1 3\n   ... 2 3\n   ... 3 4\n   ... 3 5\n   ... 4 5''')\n    '90.00000000'\n    \"\"\"\n   ..."
    },
    {
        "number": 3282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''37\n   ... ''')\n    '4'\n    >>> solution('''30014\n   ... ''')\n    '7'\n    \"\"\"\n    P = int(stdin)\n    beverage_price = P // 10\n    main_dish_price = P // 10\n    beverage_price_digits = set(str(beverage_price))\n    main_dish_price_digits = set(str(main_dish_price))\n    beverage_price_digits.discard('0')\n    main_dish_price_digits.discard('0')\n    beverage_price_digits.discard('1')\n    main_dish_price_digits.discard('1')\n    beverage_price_digits.discard('2')\n    main_dish_price_digits.discard('2')\n    beverage_price_digits.discard('3')\n    main_dish_price_digits.discard('3')\n    beverage_price_digits.discard('4')\n    main_dish_price_digits.discard('4')\n    beverage_price_digits.discard('5')\n    main_dish_price_digits.discard('5')\n    beverage_price_digits.discard('6')\n    main_dish_price_digits.discard('6')\n    beverage_price_digits.discard('7')\n    main_dish_price_digits.discard('7')\n    beverage_price_digits.discard('8')\n    main_dish_price_digits.discard('8')\n    beverage_price_digits.discard('9')\n    main_dish_price_digits.discard('9')\n    beverage_price_digits.discard('0')\n    main_dish_price_digits.discard('0')\n    beverage_price_digits.discard('1')\n    main_dish_price_digits.discard('1')\n    beverage_price_digits.discard('2')\n    main_dish_price_digits.discard('2')\n    beverage_price_digits.discard('3')\n    main_dish_price_digits.discard('3')\n    beverage_price_digits.discard('4')\n    main_dish_price_digits.discard('4')\n    beverage_price_digits.discard('5')\n    main_dish_price_digits.discard('5')\n    beverage_price_digits.discard('6')\n    main_dish_price_digits.discard('6')\n    beverage_price_digits.discard('7')\n    main_dish_price_digits.discard('7')\n    beverage_price_digits.discard('8')\n    main_dish_price_digits.discard('8')\n    beverage_price_digits.discard('9')\n    main_dish_price_digits.discard('9')\n    beverage_price_digits.discard('0')\n    main_dish_price_digits.discard('0')\n    beverage_price_digits.discard('1')\n    main_dish_price_digits.discard('1')\n    beverage_price_digits.discard('2')\n    main_dish_price_digits.discard('2')\n    beverage_price_digits.discard('3')\n    main_dish_price_digits.discard('3')\n    beverage_price_digits.discard('4')\n    main_dish_price_digits.discard('4')\n    beverage_price_digits.discard('5')\n    main_dish_price_digits.discard('5')\n    beverage_price_digits.discard('6')\n    main_dish_price_digits.discard('6')\n    beverage_price_digits.discard('7')\n    main_dish_price_digits.discard('7')\n    beverage_price_digits.discard('8')\n    main_dish_price_digits.discard('8')\n    beverage_price_digits.discard('9')\n    main_dish_price_digits.discard('9')\n    beverage_price_digits.discard('0')\n    main_dish_price_digits.discard('0')\n    beverage_price_digits.discard('1')\n    main_dish_price_digits.discard('1')\n    beverage_price_digits.discard('2')\n    main_dish_price_digits.discard('2')\n    beverage_price_digits.discard('3')\n    main_dish_price_digits.discard('3')\n    beverage_price_digits.discard('4')\n    main_dish_price_digits.discard('4')\n    beverage_price_digits.discard('5')\n    main_dish_price_digits.discard('5')\n    beverage_price_digits.discard('6')\n    main_dish_price_digits.discard('6')\n    beverage_price_digits.discard('7')\n    main_dish_price_digits.discard('7')\n    beverage_price_digits.discard('8')\n    main_dish_price_digits.discard('8')\n    beverage_price_digits.discard('9')\n    main_dish_price_digits.discard('9')\n    beverage_price_digits.discard('0')\n    main_dish_price_digits.discard('0')\n    beverage_price_digits.discard('1')\n    main_dish_price_digits.discard('1')\n    beverage_price_digits.discard('2')\n    main_dish_"
    },
    {
        "number": 3283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, r = map(int, stdin.split())\n    return str(round(sum(n / (d + i) for i in range(r)) / r, 6))"
    },
    {
        "number": 3284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(sum(1 for x in range(a, b + 1) for y in range(c, d + 1) if gcd(x, y) == 1))\n\n\ndef"
    },
    {
        "number": 3285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the smallest value of n such that the sequence\n    A1,..., An contains m as a value in the sequence or as\n    a difference between two values in the sequence.\n\n    >>> solution('1 5\\n')\n    4\n    \"\"\"\n    a, m = map(int, stdin.split())\n    n = 1\n    while m not in {a, a - n} and n < 10000:\n        n += 1\n    return str(n)\n"
    },
    {
        "number": 3286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 3287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 3288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    if k < 2 or k > 26:\n        return -1\n    if n < 1 or n > 10 ** 18:\n        return -1\n    if k == 2:\n        return ''.join(sorted(set(string.ascii_lowercase[:26]) - set(string.ascii_lowercase[26 - k:26])))[n - 1]\n    else:\n        return ''.join(sorted(set(string.ascii_lowercase[:26]) - set(string.ascii_lowercase[26 - k:26])))[n - 1]\n"
    },
    {
        "number": 3289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 0 10 0\n   ... 10 0 1\n   ... 12 8 1\n   ... 5 5 0\n   ... 11 2 1\n   ... 11 3 0''')\n    '4'\n    >>> solution('''10\n   ... 6 1 1\n   ... 0 2 0\n   ... 2 1 1\n   ... 6 1 1\n   ... 8 2 0\n   ... 4 4 0\n   ... 4 0 0\n   ... 2 3 1\n   ... 6 1 0\n   ... 6 3 1''')\n    '8'\n    \"\"\"\n    n = int(stdin.readline())\n    poll = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    poll.sort(key=lambda x: x[0] * S + x[1] * T)\n    ans = 0\n    for i in range(n):\n        if poll[i][2] == 1:\n            ans = max(ans, i + 1)\n    return str(ans)\n"
    },
    {
        "number": 3290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 4 3\n   ... 3 4 5 7\n   ... 1 2 10''')\n    '0'\n    >>> solution('''3 5 2\n   ... 1 4 7 9 11\n   ... 2 3''')\n    '2'\n    \"\"\"\n    n, e, d = map(int, stdin.split())\n    exploding_kittens = [int(stdin) for stdin in stdin.split('\\n')[1:e + 1]]\n    defuse_cards = [int(stdin) for stdin in stdin.split('\\n')[e + 1:d + e + 1]]\n    exploding_kittens.sort()\n    defuse_cards.sort()\n    exploding_kittens.reverse()\n    defuse_cards.reverse()\n    exploding_kitten_idx = 0\n    defuse_card_idx = 0\n    while exploding_kitten_idx < len(exploding_kittens) and defuse_card_idx < len(defuse_cards):\n        if exploding_kittens[exploding_kitten_idx] < defuse_cards[defuse_card_idx]:\n            exploding_kitten_idx += 1\n        else:\n            defuse_card_idx += 1\n    if exploding_kitten_idx == len(exploding_kittens):\n        return str(n - exploding_kitten_idx)\n    else:\n        return '-1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    n = int(stdin)\n    l = [0] * n\n    r = [0] * n\n    for i in range(n):\n        l[i], r[i] = map(int, stdin.split())\n    return str(n) + '\\n' + '\\n'.join(map(str, l)) + '\\n' + '\\n'.join(map(str, r))"
    },
    {
        "number": 3292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nIVO\\nJASNA\\nJOSIPA\")\n    '4'\n    >>> solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\")\n    '24'\n    \"\"\"\n    names = stdin.split(\"\\n\")\n    names = [name.strip() for name in names]\n    names.sort()\n    count = 0\n    for i in range(len(names)):\n        for j in range(i + 1, len(names)):\n            if names[i][0] == names[j][0]:\n                if names[i] > names[j]:\n                    names[i], names[j] = names[j], names[i]\n                count += 1\n                for k in range(j + 1, len(names)):\n                    if names[k][0] == names[i][0]:\n                        names[k] = names[i]\n                    else:\n                        break\n    return str(count)\n"
    },
    {
        "number": 3293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum profit that can be made by buying and selling snacks from the vending machine.\"\"\"\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made by buying and selling snacks from the vending machine\n    # Your code here\n    # return the maximum profit that can be made"
    },
    {
        "number": 3294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 5 8 4 -2 0 0 -3 2 0 0 3\n   ... 8 10 4 -1 -1 1 -1 1 1 -1 1\n   ... ''')\n    '5.2696518641'\n    \"\"\"\n   ..."
    },
    {
        "number": 3295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 1 1\n   ... 2 0 2\n   ... 3 1 1''')\n    '1'\n    >>> solution('''3\n   ... 4 1 1\n   ... 5 2 3\n   ... 5 0 3''')\n    '6'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"SEND+MORE=MONEY\")\n    9567+1085=10652\n    >>> solution(\"A+A=A\")\n    'impossible'\n    \"\"\"\n    puzzle = stdin.split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"+\")\n    if len(puzzle)!= 2:\n        return \"impossible\"\n    puzzle = puzzle[0].split(\"=\")\n    if len(puzzle)!= 2:\n        "
    },
    {
        "number": 3298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                count += 1\n    return count % (10**9 + 9)"
    },
    {
        "number": 3299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = board[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + board[i][0]\n    for j in range(1, m):\n        dp[0][j] = dp[0][j - 1] + board[0][j]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + board[i][j]\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] % 2 == 0:\n                dp[i][j] = -1\n    return dp[n - 1][m - 1]\n"
    },
    {
        "number": 3300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum length of the running pack.\"\"\"\n    n = int(stdin.readline())\n    cheetahs = [tuple(map(int, line.split())) for line in stdin]\n    cheetahs.sort(key=lambda x: x[0])\n    min_length = 0\n    for i in range(1, n):\n        min_length = max(min_length, cheetahs[i][0] - cheetahs[i - 1][0])\n    return f'{min_length:.3f}'\n"
    },
    {
        "number": 3301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the largest fee so that SWERC can provide cheapest way to transfer money between X and Y.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    # Get input\n    n, p, x, y = [int(x) for x in stdin.split()]\n    partnerships = []\n    for _ in range(p):\n        a, b, c = [int(x) for x in stdin.split()[1:]]\n        partnerships.append((a, b, c))\n\n    # Get the list of banks owned by SWERC\n    swerc_banks = [int(x) for x in stdin.split()[-1].split()]\n\n    # Get the list of banks that SWERC can transfer to\n    transfer_banks = [x for x in range(1, n + 1) if x not in swerc_banks]\n\n    # Get the list of banks that SWERC can transfer from\n    transfer_from_banks = [x for x in range(1, n + 1) if x not in transfer_banks]\n\n    # Get the list of banks that SWERC can transfer to and from\n    transfer_banks_from_banks = [x for x in range(1, n + 1) if x not in transfer_banks and x not in transfer_from_banks]\n\n    # Get the list of banks that SWERC can transfer to and from and their fees\n    transfer_banks_from_banks_fees = []\n    for a, b, c in partnerships:\n        if a in transfer_banks_from_banks:\n            transfer_banks_from_banks_fees.append((a, b, c))\n        if b in transfer_banks_from_banks:\n            transfer_banks_from_banks_fees.append((b, a, c))\n\n    # Get the list of banks that SWERC can transfer to and from and their fees\n    transfer_banks_fees = []\n    for a, b, c in partnerships:\n        if a in transfer_banks:\n            transfer_banks_fees.append((a, b, c))\n        if b in transfer_banks:\n            transfer_banks_fees.append((b, a, c))\n\n    # Get the list of banks that SWERC can transfer to and from and their fees\n    transfer_banks_fees_fees = []\n    for a, b, c in partnerships:\n        if a in transfer_banks_fees:\n            transfer_banks_fees_fees.append((a, b, c))\n        if b in transfer_banks_fees:\n            transfer_banks_fees_fees.append((b, a, c))\n\n    # Get the list of banks that SWERC can transfer to and from and their fees\n    transfer_banks_fees_fees_fees = []\n    for a, b, c in partnerships:\n        if a in transfer_banks_fees_fees:\n            transfer_banks_fees_fees_fees.append((a, b, c))\n        if b in transfer_banks_fees_fees:\n            transfer_banks_fees_fees_fees.append((b, a, c))\n\n    # Get the list of banks that SWERC can transfer to and from and their fees\n    transfer_banks_fees_fees_fees_fees = []\n    for a, b, c in partnerships:\n        if a in transfer_banks_fees_fees_fees:\n            transfer_banks_fees_fees_fees_fees.append((a, b, c))\n        if b in transfer_banks_fees_fees_fees:\n            transfer_banks_fees_fees_fees_fees.append((b, a, c))\n\n    # Get the list of banks that SWERC can transfer to and from and their fees\n    transfer_banks_fees_fees_fees_fees_fees = []\n    for a, b, c in partnerships:\n        if a in transfer_banks_fees_fees_fees_fees:\n            transfer_banks_fees_fees_fees_fees_fees.append((a, b, c))\n        if b in transfer_banks_fees_fees_fees_fees:\n            transfer_banks_fees_fees_fees_fees_fees.append((b, a, c))\n\n    # Get the list of banks that SWERC can transfer to and from and their fees\n    transfer_banks_fees_fees_fees_fees_fees_fees = []\n    for a, b, c in partnerships:\n        if a in transfer_banks_fees_fees_fees_fees_fees:\n            transfer_banks_fees_fees_fees_fees_fees_fees.append((a, b, c))\n        if b in transfer_banks_fees_fees_fees_fees_fees:\n            transfer_banks_fees_fees_fees_fees_fees_fees.append((b, a, c))\n\n    # Get the list of banks that"
    },
    {
        "number": 3302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 1\\n6\\n1\")\n    'impossible'\n    >>> solution(\"3 1\\n1\")\n    '000\\n001\\n011\\n010\\n110\\n111\\n101\\n100'\n    \"\"\"\n    n, p = map(int, stdin.split(\"\\n\")[:2])\n    palette = set(map(int, stdin.split(\"\\n\")[2:]))\n    if len(palette)!= p:\n        return \"impossible\"\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"0\" * n + \"1\"\n    if n == 3:\n        return \"110\" + \"111\" + \"101\" + \"100\"\n    if n == 4:\n        return
    },
    {
        "number": 3303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        a, b = b, a\n    while b > 0:\n        a, b = a + 1, b - 1\n    return a"
    },
    {
        "number": 3304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9 3\\nbeginning\\n1 5\\n4 8\\n1 9\")\n    '5\\n11\\n16'\n    \"\"\"\n    n, q = map(int, stdin.split())\n    s = stdin.split()[1]\n    ans = []\n    for _ in range(q):\n        l, r = map(int, stdin.split()[1:])\n        ans.append(count_almost_palindromic_substrings(s, l, r))\n    return \"\\n\".join(map(str, ans))\n\n\ndef"
    },
    {
        "number": 3306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 3 1\n   ... 2 2\n   ... 1 1''')\n    2\n    \"\"\"\n    N, M = map(int, stdin.split('\\n')[0].split())\n    houses = [int(x) for x in stdin.split('\\n')[1:]]\n    houses.sort()\n    houses.append(M)\n    houses.insert(0, 0)\n    calls = 0\n    for i in range(1, N + 1):\n        calls += (houses[i] - houses[i - 1]) * (houses[i + 1] - houses[i])\n    return calls\n"
    },
    {
        "number": 3307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 0\n   ... 2 0\n   ... 2 2\n   ... 0 2\n   ... 0 -1 0 3\n   ... ''')\n    '0.0000000000'\n    \"\"\"\n   ..."
    },
    {
        "number": 3308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\")\n    '8.0000000000'\n    \"\"\"\n    n = int(stdin.readline())\n    points = [tuple(map(float, stdin.readline().split())) for _ in range(n)]\n    points.append(points[0])\n    area = 0\n    for i in range(n):\n        area += (points[i][0] + points[i + 1][0]) * (points[i][1] - points[i + 1][1])\n    return f\"{abs(area) * 2:.10f}\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n ** (n - 1) ** (n - 2) % m)\n"
    },
    {
        "number": 3312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 1 10 10\n   ... 8 8\n   ... 5 1\n   ... 4 6\n   ... 4 7\n   ... 7 9''')\n    3\n    \"\"\"\n    n, r, w, h = [int(x) for x in stdin.split()]\n    gems = []\n    for x, y in [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[2:]]:\n        gems.append((x, y))\n    gems.sort()\n    return sum(1 for x, y in gems if x == 0 or y == h)\n"
    },
    {
        "number": 3314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    wheel_1 = stdin[0]\n    wheel_2 = stdin[1]\n    wheel_3 = stdin[2]\n    rotations = 0\n    while True:\n        if wheel_1[0] == wheel_2[0] and wheel_2[0] == wheel_3[0]:\n            return rotations\n        elif wheel_1[0] == wheel_2[0]:\n            wheel_1 = wheel_1[1:] + wheel_1[0]\n            wheel_2 = wheel_2[1:] + wheel_2[0]\n            wheel_3 = wheel_3[1:] + wheel_3[0]\n            rotations += 1\n        elif wheel_2[0] == wheel_3[0]:\n            wheel_1 = wheel_1[1:] + wheel_1[0]\n            wheel_2 = wheel_2[1:] + wheel_2[0]\n            wheel_3 = wheel_3[1:] + wheel_3[0]\n            rotations += 1\n        elif wheel_1[0] == wheel_3[0]:\n            wheel_1 = wheel_1[1:] + wheel_1[0]\n            wheel_2 = wheel_2[1:] + wheel_2[0]\n            wheel_3 = wheel_3[1:] + wheel_3[0]\n            rotations += 1\n        else:\n            return -1"
    },
    {
        "number": 3315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... A\n   ... B\n   ... AA\n   ... BBB\n   ... AAAA\n   ... ''')\n    '3'\n    \"\"\"\n   ..."
    },
    {
        "number": 3316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t, p = [int(x) for x in stdin.split()]\n    return str(round(1 - (1 - (n / m) ** p) ** t, 9))"
    },
    {
        "number": 3317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the longest sequence of identical trades.\"\"\"\n    # Get the string\n    string = stdin.strip()\n    # Get the number of queries\n    queries = int(stdin.split('\\n')[1])\n    # Get the queries\n    queries = [list(map(int, stdin.split('\\n')[i].split())) for i in range(2, 2 + queries)]\n    # Get the longest sequence of trades\n    longest_sequence = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if string[i:j] == string[i:j][::-1]:\n                longest_sequence = max(longest_sequence, j - i)\n    # Return the longest sequence of trades\n    return longest_sequence\n"
    },
    {
        "number": 3318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 8 8 8\n   ... 12 4 1 4 5 3 -2\n   ... 10 1 2 1 8 -6 1\n   ... ''')\n    '1'\n    \"\"\"\n   ..."
    },
    {
        "number": 3320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 7\n   ... 1 2 1\n   ... 1 2 3\n   ... 1 3 2\n   ... 1 4 1\n   ... 2 3 4\n   ... 2 4 4\n   ... 3 4 4\n   ... 3\n   ... 1 2\n   ... 1 3\n   ... 3 4\n   ... ''')\n    '2'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    roads = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b, w = map(int, stdin.split('\\n')[_].split())\n        roads[a - 1].append((b - 1, w))\n        roads[b - 1].append((a - 1, w))\n    q = int(stdin.split('\\n')[-1])\n    costs = [0] * n\n    for _ in range(q):\n        s, t = map(int, stdin.split('\\n')[_].split())\n        costs[s - 1] |= min(x[1] for x in roads[s - 1])\n        costs[t - 1] |= min(x[1] for x in roads[t - 1])\n    return '\\n'.join(map(str, costs))\n"
    },
    {
        "number": 3321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1 5 4 3 2 6\\n1 2 5 4 3 6\")\n    '2'\n    \"\"\"\n    frogs = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    result = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    proclamations = 0\n    while frogs!= result:\n        for i in range(len(frogs) - 1):\n            if frogs[i] == result[i]:\n                continue\n            if frogs[i] == result[i + 1]:\n                frogs[i], frogs[i + 1] = frogs[i + 1], frogs[i]\n                proclamations += 1\n                break\n            if frogs[i + 1] == result[i]:\n                frogs[i], frogs[i + 1] = frogs[i + 1], frogs[i]\n                proclamations += 1\n                break\n    return str(proclamations)\n"
    },
    {
        "number": 3322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    prices = [list(map(int, stdin.split())) for _ in range(n)]\n    prices.sort(key=lambda x: x[1])\n    prices.sort(key=lambda x: x[3])\n    prices.sort(key=lambda x: x[0])\n    cost = 0\n    for i in range(n):\n        if k == 0:\n            break\n        if i == 0:\n            cost += prices[i][1]\n            k -= 1\n        elif prices[i][0] == prices[i - 1][0]:\n            cost += prices[i][1]\n            k -= 1\n        else:\n            cost += prices[i][3]\n            k -= 1\n    if k > 0:\n        return -1\n    return cost"
    },
    {
        "number": 3323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 10000 0 0\n   ... 0 10000 0\n   ... 0 0 10000\n   ... 3\n   ... 5000 0 0\n   ... 0 2000 0\n   ... 0 0 4000''')\n    'Case #1: 1\\nCase #2: 2'\n    \"\"\"\n   ..."
    },
    {
        "number": 3324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\")\n    '6 6 6 1'\n    \"\"\"\n    left, right = stdin.split(\"0 0\")\n    left = left.split(\"\\n\")\n    right = right.split(\"\\n\")\n    left_count = {}\n    right_count = {}\n    for line in left:\n        sign, *line = line.split()\n        count, *elements = line\n        elements = \"\".join(elements)\n        count = int(count)\n        if sign == \"+\":\n            left_count[elements] = count\n        else:\n            right_count[elements] = count\n    right_count = {k: v for k, v in sorted(right_count.items(), key=lambda item: item[1])}\n    left_count = {k: v for k, v in sorted(left_count.items(), key=lambda item: item[1])}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left_count.items() if k in right_count}\n    right_count = {k: v for k, v in right_count.items() if k in left_count}\n    left_count = {k: v for k, v in left"
    },
    {
        "number": 3325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 30 50\n   ... 20 0\n   ... 100 0\n   ... 100 40\n   ... 20 40''')\n    '20.83'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    d, l = map(int, stdin.split('\\n')[1].split())\n    x, y = [], []\n    for i in range(n):\n        x_, y_ = map(int, stdin.split('\\n')[i + 2].split())\n        x.append(x_)\n        y.append(y_)\n    x.append(x[0])\n    y.append(y[0])\n    return str(round(max(y) - min(y), 2))\n"
    },
    {
        "number": 3326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(r)]\n    return str(count_monotonic_subgrids(grid))\n\n\ndef"
    },
    {
        "number": 3327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 15\\n##.........####\\n1\\nCROSSWORD\")\n    '##CROSSWORD####'\n    \"\"\"\n    rows, cols = map(int, stdin.split())\n    grid = [list(stdin.split()[1]) for _ in range(rows)]\n    words = stdin.split()[2:]\n    for word in words:\n        if len(word) < 2:\n            continue\n        if word[0] == word[-1]:\n            for i in range(rows):\n                if word in grid[i]:\n                    grid[i].remove(word)\n                    grid[i].insert(grid[i].index(word), word[0])\n        else:\n            for i in range(cols):\n                if word in [grid[j][i] for j in range(rows)]:\n                    for j in range(rows):\n                        grid[j][i] = word[0] if grid[j][i] == word[-1] else word[-1]\n    return \"\\n\".join(\"\".join(row) for row in grid)\n"
    },
    {
        "number": 3328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    for _ in range(k):\n        s = s.replace('BB', 'WW').replace('WW', 'BB')\n    return s"
    },
    {
        "number": 3330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 3331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, A, B, P = [int(x) for x in stdin.split()]\n    return str(min(A, B, P) - max(A, B, P))\n"
    },
    {
        "number": 3332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 3 6\n   ... 2 5 8\n   ... 3 3 5\n   ... 5 3 6''')\n    '13'\n    \"\"\"\n   ..."
    },
    {
        "number": 3333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get the roost position\n    roost_x, roost_y = map(float, stdin.split('\\n')[0].split())\n    # get the number of hiding spots and dead chickens\n    num_hiding_spots, num_dead_chickens = map(int, stdin.split('\\n')[1].split())\n    # get the hiding spots\n    hiding_spots = [map(float, stdin.split('\\n')[i + 2].split()) for i in range(num_hiding_spots)]\n    # get the dead chickens\n    dead_chickens = [map(float, stdin.split('\\n')[i + 2 + num_hiding_spots].split()) for i in range(num_dead_chickens)]\n    # get the minimum distance\n    min_distance = float('inf')\n    for hiding_spot in hiding_spots:\n        for chicken in dead_chickens:\n            distance = ((chicken[0] - hiding_spot[0]) ** 2 + (chicken[1] - hiding_spot[1]) ** 2) ** 0.5\n            if distance < min_distance:\n                min_distance = distance\n    return str(min_distance)\n"
    },
    {
        "number": 3334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 4 4\n   ... 2\n   ... ''')\n    '2.13333333333333'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    distances = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    distances.sort(key=lambda x: x[0])\n    distances.sort(key=lambda x: x[1])\n    distances = [x[0] for x in distances]\n    distances = [x for x in distances if x!= 0]\n    distances = [x for x in distances if x!= 1]\n    distances = [x for x in distances if x!= 2]\n    distances = [x for x in distances if x!= 3]\n    distances = [x for x in distances if x!= 4]\n    distances = [x for x in distances if x!= 5]\n    distances = [x for x in distances if x!= 6]\n    distances = [x for x in distances if x!= 7]\n    distances = [x for x in distances if x!= 8]\n    distances = [x for x in distances if x!= 9]\n    distances = [x for x in distances if x!= 10]\n    distances = [x for x in distances if x!= 11]\n    distances = [x for x in distances if x!= 12]\n    distances = [x for x in distances if x!= 13]\n    distances = [x for x in distances if x!= 14]\n    distances = [x for x in distances if x!= 15]\n    distances = [x for x in distances if x!= 16]\n    distances = [x for x in distances if x!= 17]\n    distances = [x for x in distances if x!= 18]\n    distances = [x for x in distances if x!= 19]\n    distances = [x for x in distances if x!= 20]\n    distances = [x for x in distances if x!= 21]\n    distances = [x for x in distances if x!= 22]\n    distances = [x for x in distances if x!= 23]\n    distances = [x for x in distances if x!= 24]\n    distances = [x for x in distances if x!= 25]\n    distances = [x for x in distances if x!= 26]\n    distances = [x for x in distances if x!= 27]\n    distances = [x for x in distances if x!= 28]\n    distances = [x for x in distances if x!= 29]\n    distances = [x for x in distances if x!= 30]\n    distances = [x for x in distances if x!= 31]\n    distances = [x for x in distances if x!= 32]\n    distances = [x for x in distances if x!= 33]\n    distances = [x for x in distances if x!= 34]\n    distances = [x for x in distances if x!= 35]\n    distances = [x for x in distances if x!= 36]\n    distances = [x for x in distances if x!= 37]\n    distances = [x for x in distances if x!= 38]\n    distances = [x for x in distances if x!= 39]\n    distances = [x for x in distances if x!= 40]\n    distances = [x for x in distances if x!= 41]\n    distances = [x for x in distances if x!= 42]\n    distances = [x for x in distances if x!= 43]\n    distances = [x for x in distances if x!= 44]\n    distances = [x for x in distances if x!= 45]\n    distances = [x for x in distances if x!= 46]\n    distances = [x for x in distances if x!= 47]\n    distances = [x for x in distances if x!= 48]\n    distances = [x for x in distances if x!= 49]\n    distances = [x for x in distances if x!= 50]\n    distances = [x for x in distances if x!= 51]\n    distances = [x for x in distances if x!= 52]\n    distances = [x for x in distances if x!= 53]\n    distances = [x for x in distances if x!= 54]\n    distances = [x for x in distances if x!= 55]\n    distances = [x for x in distances if x!= 56]\n    distances = [x for x in distances if x!= 57]\n    distances = [x for x in distances if x!= 58]\n    distances = [x for x in distances if x!= 59]\n    distances = [x for x in distances if x!= 60]\n    distances = [x for x in distances if x!= 61]\n    distances = [x for x in distances if x!= 62]\n    distances = [x for x in distances if x!= 63]\n    distances = [x for x in distances if x!= 64]\n    distances = [x for x in distances if x!= 65]\n    distances = [x for x in distances if x!= 66]\n    distances = [x for x in distances if x!= 67]\n    distances = [x for x in distances if x!= 68]\n    distances = [x for x in distances if x!= 69]\n    distances = [x for x in distances if x!= 70]\n    distances = [x for x in distances if x!= 71]\n    distances = [x for x in distances if x!= 72]\n    distances = [x for x in distances if x!= 73]\n    distances = [x for x in distances if x!= 74]\n    distances = [x for x in distances if x!= 75]\n    distances = [x for x in distances if x!= 76]\n    distances = [x for x in distances if x!= 77]\n    distances = [x for x in distances if x!= 78]\n    distances = [x for x in distances if x!= 79]\n    distances = [x for x in distances if x!= 80]\n    distances = [x for x in distances if x!= 81]\n    distances = [x for x in distances if x!= 82]\n    distances = [x for x in distances"
    },
    {
        "number": 3335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_triples(int(stdin)))"
    },
    {
        "number": 3336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... a 0\n   ... a 1\n   ... b 2\n   ... c 2 3\n   ... b 4\n   ... ''')\n    '2\\n1\\n2\\n2\\n'\n    \"\"\"\n    n = int(stdin.readline())\n    stack = [0]\n    for i in range(n):\n        line = stdin.readline().split()\n        if line[0] == 'a':\n            stack.append(i)\n        elif line[0] == 'b':\n            stack.pop()\n        else:\n            print(len(set(stack[int(line[2]) :])))\n"
    },
    {
        "number": 3338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 1\n   ... 78 61 88 71\n   ... 80 80 90 90\n   ... 70 90 80 100\n   ... 90 70 0 0\n   ... 80 67 0 0\n   ... 90 63 0 0''')\n    '5'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split())\n    partners = []\n    for _ in range(n):\n        g, p, g_a, p_a = map(int, stdin.split('\\n')[_].split())\n        partners.append((g, p, g_a, p_a))\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1], reverse=True)\n    partners.sort(key=lambda x: x[2], reverse=True)\n    partners.sort(key=lambda x: x[3], reverse=True)\n    partners = partners[:k]\n    return str(len(set([x[0] for x in partners])))\n"
    },
    {
        "number": 3339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 3\n   ... 2 4''')\n    4\n    \"\"\"\n   ..."
    },
    {
        "number": 3340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, n = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, stdin.split())))\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    points.sort()\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n            points[i] = (points[i][0], 'W')\n        else:\n            points[i] = (points[i][0], 'C')\n    for i in range(n):\n        if points[i][1] == 'C':\n"
    },
    {
        "number": 3344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum distance between the two dogs during their walks.\n\n    The distance between two points (x1, y1) and (x2, y2) is calculated as\n    sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2).\n\n    >>> solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0')\n    10\n    \"\"\"\n   ..."
    },
    {
        "number": 3346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string solution\"\"\"\n    # Get input\n    t, n = [int(x) for x in stdin.split()]\n    cars = []\n    for _ in range(n):\n        cars.append([x for x in stdin.split()])\n\n    # Sort cars by arrival time\n    cars.sort(key=lambda x: x[1])\n\n    # Initialize variables\n    time = 0\n    n_drivers = 0\n    for car in cars:\n        if car[0] == \"W\":\n            time += car[2]\n            if time > t:\n                n_drivers += 1\n                time = 0\n        else:\n            time += car[3]\n            if time > t:\n                n_drivers += 1\n                time = 0\n\n    return str(n_drivers)\n"
    },
    {
        "number": 3347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    A, B, C = map(int, stdin.split())\n    if A + B + C!= R * C:\n        return \"impossible\"\n    arr = [[\" \" for _ in range(C)] for _ in range(R)]\n    for i in range(A):\n        arr[i][0] = \"A\"\n    for i in range(B):\n        arr[i][C - 1] = \"B\"\n    for i in range(C):\n        arr[A + i][0] = \"C\"\n    for i in range(C):\n        arr[A + B + i][C - 1] = \"C\"\n    for i in range(R):\n        for j in range(C):\n            if arr[i][j] == \" \":\n                arr[i][j] = \"A\"\n                if is_good(arr, i, j):\n                    arr[i][j] = \"B\"\n                    if is_good(arr, i, j):\n                        arr[i][j] = \"C\"\n                    else:\n                        arr[i][j] = \" \"\n                else:\n                    arr[i][j] = \" \"\n    for i in range(R):\n        print(\"\".join(arr[i]))\n    return \"\"\n\ndef"
    },
    {
        "number": 3349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\")\n    'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max(stdin.split('hel'), key=len)))\n"
    },
    {
        "number": 3351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''65\n   ... 1 1 1 1 1 1 1 1 1 1 1 1\n   ... 1 1 1 1 1 1 1 1 1 1 1 1\n   ... 1 1 1 1 1 1 1 1 1 1 1 1\n   ... 1 1 1 1 1 1 1 1 1 1 1 1\n   ... 1 1 1 1 1 1 1 1 1 1 1 1\n   ... ''')\n    '70'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    dice = [int(x) for x in stdin.split(\"\\n\")[1:]]\n    scores = [0] * 13\n    for i in range(n):\n        if i == 0:\n            scores[1] += dice[0]\n            scores[2] += dice[0]\n            scores[3] += dice[0]\n            scores[4] += dice[0]\n            scores[5] += dice[0]\n            scores[6] += dice[0]\n            scores[7] += dice[0]\n            scores[8] += dice[0]\n            scores[9] += dice[0]\n            scores[10] += dice[0]\n            scores[11] += dice[0]\n            scores[12] += dice[0]\n        else:\n            scores[1] = max(scores[1], scores[1] + dice[i])\n            scores[2] = max(scores[2], scores[2] + dice[i])\n            scores[3] = max(scores[3], scores[3] + dice[i])\n            scores[4] = max(scores[4], scores[4] + dice[i])\n            scores[5] = max(scores[5"
    },
    {
        "number": 3352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 5\n   ... 1 2 3 4 5 6 7 8 9 10\n   ... 1 2 3 4 5 6 7 8 9\n   ... 0 1\n   ... 0 4\n   ... 1 4\n   ... 0 1\n   ... 0 4\n   ... ''')\n    '10'\n    \"\"\"\n    n, q = map(int, stdin.split('\\n')[0].split())\n    nodes = list(map(int, stdin.split('\\n')[1].split()))\n    edges = list(map(int, stdin.split('\\n')[2:]))\n    tree = {}\n    for i in range(n):\n        tree[i + 1] = set()\n    for i in range(n - 1):\n        tree[nodes[i + 1]].add(nodes[i])\n        tree[nodes[i]].add(nodes[i + 1])\n    for i in range(q):\n        k, x = map(int, stdin.split('\\n')[i + 3].split())\n        if k == 0:\n            print(len(tree[x]))\n        else:\n            tree[x].add(k)\n            tree[k].add(x)\n    return ''\n"
    },
    {
        "number": 3353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 4 7\n   ... -2 0\n   ... 0 -1\n   ... -2 1\n   ... 1 0\n   ... 2 1\n   ... 2 3\n   ... 3 -1''')\n    '6'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, r, n, z = map(int, stdin.split())\n    return str(int(n * z / (s * s)))"
    },
    {
        "number": 3355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of points that can be obtained from the tasks.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    n, T = [int(x) for x in stdin.split()]\n    p, t, d = [], [], []\n    for i in range(n):\n        p.append(int(stdin.split()[i * 3]))\n        t.append(int(stdin.split()[i * 3 + 1]))\n        d.append(int(stdin.split()[i * 3 + 2]))\n    points = [[0 for _ in range(n + 2)] for _ in range(n + 2)]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[i]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[j]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[i]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[j]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[i]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[j]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[i]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[j]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[i]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[j]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[i]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[j]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[i]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[j]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[i]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[j]\n    for i in range(n):\n        for j in range(n):\n            points[i + 1][j + 1] = points[i][j + 1] + points[i + 1][j] - points[i][j] + p[i]\n    for i in range(n):\n        "
    },
    {
        "number": 3356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 1\n   ... ''')\n    '4'\n    >>> solution('''4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 1\n   ... 2 3\n   ... ''')\n    '2'\n    \"\"\"\n   ..."
    },
    {
        "number": 3357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 1\n   ... 2 2\n   ... 3 2\n   ... 4 1''')\n    '9.0'\n    \"\"\"\n   ..."
    },
    {
        "number": 3358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n')[:40])"
    },
    {
        "number": 3359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 5 6\n   ... 0000 FFFF 0000 0000 0000 0000\n   ... FFFF FFFF 0000 FFFF FFFF 0000\n   ... 0000 0000 0000 FFFF 0000 0000\n   ... 0000 FFFF FFFF FFFF FFFF 0000\n   ... 0000 0000 0000 0000 0000 0000''')\n    '2'\n    \"\"\"\n   ..."
    },
    {
        "number": 3360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS -> \\nS ->"
    },
    {
        "number": 3361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 900\n   ... 800 700 400 300 200''')\n    '2243'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    calories = list(map(int, stdin.split()))\n    calories.sort()\n    calories.reverse()\n    calories = calories[:n]\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0)\n    calories.append(0"
    },
    {
        "number": 3364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 4\n   ...? 1 3\n   ... = 1 8\n   ... = 3 8\n   ...? 1 3''')\n    'no'\n    \"\"\"\n    n, q = map(int, stdin.split())\n    s = set()\n    for _ in range(q):\n        op, a, b = stdin.split()\n        if op == '=':\n            s.add(a)\n            s.add(b)\n        else:\n            if a in s and b in s:\n                print('yes')\n            else:\n                print('no')\n"
    },
    {
        "number": 3365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    print(arr)\n    max_score = 0\n    for i in range(k):\n        score = 0\n        for j in range(i, n, k):\n            if arr[j] % arr[j - i] == 0:\n                score += 1\n            else:\n                break\n        if score > max_score:\n            max_score = score\n    return max_score"
    },
    {
        "number": 3366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return sum(f(i) for i in range(L, R + 1)) % (10 ** 9 + 7)"
    },
    {
        "number": 3367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\")\n    '2.0000000000'\n    \"\"\"\n    t, n = map(int, stdin.split())\n    questions = [stdin.split(\"\\n\")[i] for i in range(1, n + 1)]\n    answers = [stdin.split(\"\\n\")[i] for i in range(n + 1, n + t + 1)]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i in answers]\n    answers = [i.split(\"?\")[0] for i in answers]\n    answers = [i.split(\" \") for i in answers]\n    answers = [i[-1] for i"
    },
    {
        "number": 3368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\")\n    'POSSIBLE'\n    >>> solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\nmonkey 1 lion\")\n    'IMPOSSIBLE'\n    >>> solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\nmonkey 1 lion\\nmonkey 1 lion\")\n    'FALSE ALARM'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''100\n   ... 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n   ... 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n   ... 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n   ... 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8\n   ... 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9''')\n    'random sequence'\n    >>> solution('''100\n   ... 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n   ... 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n   ... 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n   ... 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8\n   ... 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9''')\n    'a(1)b(2)c(3) found'\n    >>> solution('''100\n   ... 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n   ... 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n   ... 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n   ... 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8\n   ... 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9''')\n    'a(1)b(2)c(3) found'\n    >>> solution('''100\n   ... 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n   ... 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n   ... 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n   ... 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8\n   ... 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9''')\n    'a(1)b(2)c(3) found'\n    >>> solution('''100\n   ... 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n   ... 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n   ... 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n   ... 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8\n   ... 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9''')\n    'a(1)b(2)c(3) found'\n    >>> solution('''100\n   ... 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n   ... 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n   ... 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n   ... 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8\n   ... 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9''')\n    'a(1)b(2)c(3) found'\n    >>> solution('''100\n   ... 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n   ... 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n   ... 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n   ... 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8\n   ... 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9''')\n    'a(1)b(2)c(3) found'\n    >>> solution('''100\n   ... 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n   ... 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n   ... 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n   ... 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8\n   ... 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9''')\n    'a(1)b(2)c(3) found'\n    >>> solution('''100\n   ... 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n   ... 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n   ... 0 4"
    },
    {
        "number": 3370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1\\n39\\n10\\n40\\n\")\n    '40.5'\n    \"\"\"\n    N, k = map(float, stdin.split())\n    houses = [float(line) for line in stdin.splitlines()]\n    houses.sort()\n    avg = sum(houses) / N\n    for i in range(1, N):\n        if houses[i] >= avg + k:\n            return str(houses[i])\n    return str(houses[-1])\n"
    },
    {
        "number": 3371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.split()]\n    meetings = []\n    for _ in range(c):\n        meetings.append([int(x) for x in stdin.split()])\n    meetings.sort(key=lambda x: x[2])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x["
    },
    {
        "number": 3372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\")\n    'impossible'\n    \"\"\"\n   ..."
    },
    {
        "number": 3373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 3374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9\n   ... 377 a\n   ... 455 h\n   ... 180 a\n   ... 211 a\n   ... 134 a\n   ... 46 h\n   ... 111 h\n   ... 213 h\n   ... 17 a\n   ... 15\n   ... 1 2\n   ... 1 4\n   ... 1 6\n   ... 2 3\n   ... 2 4\n   ... 2 5\n   ... 3 5\n   ... 4 6\n   ... 4 7\n   ... 4 9\n   ... 5 7\n   ... 5 8\n   ... 6 9\n   ... 7 9\n   ... 7 8''')\n    '85293'\n    \"\"\"\n   ..."
    },
    {
        "number": 3375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 3\n   ... 3\n   ... 3\n   ... 7\n   ... caterpillar\n   ... 3\n   ... pupa\n   ... 7\n   ... butterfly\n   ... ''')\n    '5100'\n    \"\"\"\n   ..."
    },
    {
        "number": 3377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 0\n   ... 1 1\n   ... 1 1\n   ... 2 2 3\n   ... 1 4\n   ... 8\n   ... 1\n   ... 2\n   ... 3\n   ... 1\n   ... 4\n   ... 2\n   ... 3\n   ... 5\n   ... ''')\n    '6'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Kahn's algorithm for topological sorting.\"\"\"\n    n, m = map(int, stdin.split())\n    graph = {i: set() for i in range(n)}\n    in_degree = [0] * n\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        graph[x].add(y)\n        in_degree[y] += 1\n    sources = deque([i for i in range(n) if in_degree[i] == 0])\n    top_order = []\n    while sources:\n        x = sources.popleft()\n        top_order.append(x)\n        for y in graph[x]:\n            in_degree[y] -= 1\n            if in_degree[y] == 0:\n                sources.append(y)\n    return''.join(map(str, top_order))\n"
    },
    {
        "number": 3380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 3382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b + c + d == 24:\n        return '0'\n    if a + b + c + d > 24:\n        return 'impossible'\n    if a + b + c + d < 24:\n        return 'impossible'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b == c and c!= d:\n        return 'impossible'\n    if a == b and b!= c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return 'impossible'\n    if a!= b and b == c and c == d:\n        return 'impossible'\n    if a!= b and b!= c and c == d:\n        return 'impossible'\n    if a!= b and b!= c and c!= d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    if a!= b and b == c and c!= d:\n        return '2'\n    if a!= b and b!= c and c == d:\n        return '3'\n    if a!= b and b!= c and c!= d:\n        return '4'\n    if a == b and b == c and c!= d:\n        return '1'\n    if a == b and b!= c and c == d:\n        return '2'\n    if a!= b and b == c and c == d:\n        return '3'\n    if a!= b and b!= c and c == d:\n        return '4'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    if a!= b and b == c and c == d:\n        return '2'\n    if a!= b and b!= c and c == d:\n        return '3'\n    if a!= b and b!= c and c!= d:\n        return '4'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    if a!= b and b == c and c == d:\n        return '2'\n    if a!= b and b!= c and c == d:\n        return '3'\n    if a!= b and b!= c and c!= d:\n        return '4'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    if a!= b and b == c and c == d:\n        return '2'\n    if a!= b and b!= c and c == d:\n        return '3'\n    if a!= b and b!= c and c!= d:\n        return '4'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    if a!= b and b == c and c == d:\n        return '2'\n    if a!= b and b!= c and c == d:\n        return '3'\n    if a!= b and b!= c and c!= d:\n        return '4'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    if a!= b and b == c and c == d:\n        return '2'\n    if a!= b and b!= c and c == d:\n        return '3'\n    if a!= b and b!= c and c!= d:\n        return '4'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    if a!= b and b == c and c == d:\n        return '2'\n    if a!= b and b!= c and c == d:\n        return '3'\n    if a!= b and b!= c and c!= d:\n        return '4'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    if a!= b and b == c and c == d:\n        return '2'\n    if a!= b and b!= c and c == d:\n        return '3'\n    if a!= b and b!= c and c!= d:\n        return '4'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    if a!= b and b == c and c == d:\n        return '2'\n    if a!= b and b!= c and c == d:\n        return '3'\n    if a!= b and b!= c and c!= d:\n        return '4'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    if a!= b and b == c and c == d:\n        return '2'\n    if a!= b and b!= c and c == d:\n        return '3'\n    if a!= b and b!= c and c!= d:\n        return '4'\n    if a == b and b == c and c == d:\n        return 'impossible'\n    if a == b and b!= c and c!= d:\n        return '1'\n    "
    },
    {
        "number": 3383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = [int(x) for x in stdin.split()]\n    tastiness = [int(x) for x in stdin.split()]\n    cost = [int(x) for x in stdin.split()]\n    cost_matrix = [[0 for _ in range(k)] for _ in range(k)]\n    for i in range(k):\n        for j in range(k):\n            cost_matrix[i][j] = cost[i] + cost[j]\n    dp = [[0 for _ in range(k)] for _ in range(k)]\n    for i in range(k):\n        dp[i][i] = tastiness[i]\n    for i in range(k):\n        for j in range(k):\n            dp[i][j] = max(dp[i][j], dp[i][i] + dp[j][j])\n    for i in range(k):\n        for j in range(k):\n            dp[i][j] = max(dp[i][j], dp[i][i] + dp[j][j] + cost_matrix[i][j])\n    return dp[0][k - 1] / (a + b) if dp[0][k - 1] > 0 else 0\n"
    },
    {
        "number": 3384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    else:\n        n = str(n)\n        l = len(n)\n        if l % 2 == 0:\n            return str(int(n[:l // 2]) + 1) + \" \" + str(int(n[l // 2:]))\n        else:\n            return str(int(n[:l // 2 + 1]) + 1) + \" \" + str(int(n[l // 2 + 1:]))\n"
    },
    {
        "number": 3385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 0 0\n   ... 1 0 1\n   ... 3 0 1\n   ... 3 0 0\n   ... 3 0 1''')\n    '0'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    children = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    children.sort(key=lambda x: x[0])\n    odd = 0\n    even = 0\n    for i in range(n):\n        if children[i][1] == 0:\n            odd += 1\n        else:\n            even += 1\n    if odd % 2 == 0:\n        return '0'\n    if even % 2 == 0:\n        return '1'\n    return '2'\n"
    },
    {
        "number": 3386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return \"1 1\"\n    if n == 1 and m == 2:\n        return \"2 2\"\n    if n == 2 and m == 1:\n        return \"1 3\"\n    if n == 2 and m == 2:\n        return \"2 1\"\n    if n == 3 and m == 1:\n        return \"1 2\"\n    if n == 3 and m == 2:\n        return \"2 3\"\n    if n == 4 and m == 1:\n        return \"1 3\"\n    if n == 4 and m == 2:\n        return \"2 1\"\n    if n == 4 and m == 3:\n        return \"3 2\"\n    if n == 5 and m == 1:\n        return \"1 2\"\n    if n == 5 and m == 2:\n        return \"2 3\"\n    if n == 5 and m == 3:\n        return \"3 1\"\n    if n == 6 and m == 1:\n        return \"1 3\"\n    if n == 6 and m == 2:\n        return \"2 1\"\n    if n == 6 and m == 3:\n        return \"3 2\"\n    if n == 7 and m == 1:\n        return \"1 2\"\n    if n == 7 and m == 2:\n        return \"2 3\"\n    if n == 7 and m == 3:\n        return \"3 1\"\n    if n == 8 and m == 1:\n        return \"1 3\"\n    if n == 8 and m == 2:\n        return \"2 1\"\n    if n == 8 and m == 3:\n        return \"3 2\"\n    if n == 9 and m == 1:\n        return \"1 2\"\n    if n == 9 and m == 2:\n        return \"2 3\"\n    if n == 9 and m == 3:\n        return \"3 1\"\n    if n == 10 and m == 1:\n        return \"1 3\"\n    if n == 10 and m == 2:\n        return \"2 1\"\n    if n == 10 and m == 3:\n        return \"3 2\"\n    if n == 11 and m == 1:\n        return \"1 2\"\n    if n == 11 and m == 2:\n        return \"2 3\"\n    if n == 11 and m == 3:\n        return \"3 1\"\n    if n == 12 and m == 1:\n        return \"1 3\"\n    if n == 12 and m == 2:\n        return \"2 1\"\n    if n == 12 and m == 3:\n        return \"3 2\"\n    if n == 13 and m == 1:\n        return \"1 2\"\n    if n == 13 and m == 2:\n        return \"2 3\"\n    if n == 13 and m == 3:\n        return \"3 1\"\n    if n == 14 and m == 1:\n        return \"1 3\"\n    if n == 14 and m == 2:\n        return \"2 1\"\n    if n == 14 and m == 3:\n        return \"3 2\"\n    if n == 15 and m == 1:\n        return \"1 2\"\n    if n == 15 and m == 2:\n        return \"2 3\"\n    if n == 15 and m == 3:\n        return \"3 1\"\n    if n == 16 and m == 1:\n        return \"1 3\"\n    if n == 16 and m == 2:\n        return \"2 1\"\n    if n == 16 and m == 3:\n        return \"3 2\"\n    if n == 17 and m == 1:\n        return \"1 2\"\n    if n == 17 and m == 2:\n        return \"2 3\"\n    if n == 17 and m == 3:\n        return \"3 1\"\n    if n == 18 and m == 1:\n        return \"1 3\"\n    if n == 18 and m == 2:\n        return \"2 1\"\n    if n == 18 and m == 3:\n        return \"3 2\"\n    if n == 19 and m == 1:\n        return \"1 2\"\n    if n == 19 and m == 2:\n        return \"2 3\"\n    if n == 19 and m == 3:\n        return \"3 1\"\n    if n == 20 and m == 1:\n        return \"1 3\"\n    if n == 20 and m == 2:\n        return \"2 1\"\n    if n == 20 and m == 3:\n        return \"3 2\"\n    if n == 21 and m == 1:\n        return \"1 2\"\n    if n == 21 and m == 2:\n        return \"2 3\"\n    if n == 21 and m == 3:\n        return \"3 1\"\n    if n == 22 and m == 1:\n        return \"1 3\"\n    if n == 22 and m == 2:\n        return \"2 1\"\n    if n == 22 and m == 3:\n        return \"3 2\"\n    if n == 23 and m == 1:\n        return \"1 2\"\n    if n == 23 and m == 2:\n        return \"2 3\"\n    if n == 23 and m == 3:\n        return \"3 1\"\n    if n == 24 and m == 1:\n        return \"1 3\"\n    if n == 24 and m == 2:\n        return \"2 1\"\n    if n == 24 and m == 3:\n        return \"3 2\"\n    if n == 25 and m == 1:\n        return \"1 2\"\n    if n == 25 and m == 2:\n        return \"2 3\"\n    if n == 25 and m == 3:\n        return \"3 1\"\n    if n == 26 and m == 1:\n        return \"1 3\"\n    if n == 26 and m == 2:\n        return \"2 1\"\n    if n == 26 and m == 3:\n        return \"3 2\"\n    if n == 27 and m == 1:\n        return \"1 2\"\n    if n == 27 and m == 2:\n        return \"2 3\"\n    if n == 27 and m == 3:\n        return \"3 1\"\n    if n == 28 and m == 1:\n        return \"1 3\"\n    if n == 28 and m == 2:\n        return \"2 1\"\n    if n == 28 and m == 3:\n        return \"3 2\"\n    if n == 29 and m == 1:\n        return \"1 2\"\n    if n == 29 and m == 2:\n        return \"2 3\"\n    if n == 29 and m == 3:\n        return \"3 1\"\n    if n == 30 and m == 1:\n        return \"1 3\"\n    if n == 30 and m == 2:\n        return \"2 1\"\n    if n == 30 and m == 3:\n        return \"3 2\"\n    if n == 31 and m == 1:\n        return \"1 2\"\n    if n == 31 and m == 2:\n        return \"2 3\"\n    if n == 31 and m == 3:\n        return \"3 1\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a, b, d = [], [], []\n    for i in range(n):\n        a_i, b_i, d_i = map(int, stdin.split())\n        a.append(a_i)\n        b.append(b_i)\n        d.append(d_i)\n    a.sort()\n    b.sort()\n    d.sort()\n    x = [0] * n\n    for i in range(n):\n        x[i] = t * d[i] / sum(d)\n    y = t * d / sum(d)\n    ans = 10 ** 6\n    for i in range(n):\n        if a[i] <= x[i] <= b[i]:\n            ans = min(ans, (x[i] - y[i]) ** 2 / y[i])\n    return str(ans)\n"
    },
    {
        "number": 3388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here"
    },
    {
        "number": 3390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing a single line formatted according to the\n    following example:\n    >>> solution('''3 2\n   ... 1 0\n   ... 0 1\n   ... 1000 1\n   ... 1 3\n   ... 2 3\n   ... ''')\n    '1\\n0\\n1000\\n1'\n    \"\"\"\n   ..."
    },
    {
        "number": 3392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 3393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    courses = [tuple(map(str, stdin.split())) for _ in range(n)]\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses"
    },
    {
        "number": 3394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the longest time a customer has to wait from the time they place their order until the order is delivered, assuming that\n    Hannah uses a delivery schedule minimizing this value.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    n, m = [int(x) for x in stdin.split(' ')]\n    roads = [[int(x) for x in stdin.split(' ')] for _ in range(m)]\n    k = int(stdin.split('\\n')[-2])\n    orders = [[int(x) for x in stdin.split('\\n')[-1].split(' ')] for _ in range(k)]\n\n    # Sort the orders by time\n    orders.sort(key=lambda x: x[0])\n\n    # Find the shortest time to reach each intersection\n    shortest_times = [float('inf')] * n\n    for order in orders:\n        shortest_times[order[1] - 1] = min(shortest_times[order[1] - 1], order[2])\n\n    # Find the longest time to reach each intersection\n    longest_times = [0] * n\n    for order in orders:\n        longest_times[order[1] - 1] = max(longest_times[order[1] - 1], order[2])\n\n    # Find the longest time to reach the pizzeria\n    longest_time = 0\n    for i in range(n):\n        longest_time = max(longest_time, shortest_times[i] + longest_times[i])\n\n    return str(longest_time)\n"
    },
    {
        "number": 3395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1 1\n   ... 2\n   ... 3\n   ... 1 2\n   ... 2 3 1\n   ... 1 1''')\n    '2'\n    \"\"\"\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    iron_ore = set(map(int, stdin.split('\\n')[1].split()))\n    coal = set(map(int, stdin.split('\\n')[2].split()))\n    graph = {i: set() for i in range(1, n + 1)}\n    for line in stdin.split('\\n')[3:]:\n        a, b = map(int, line.split())\n        graph[a].add(b)\n        graph[b].add(a)\n    visited = set()\n    queue = [1]\n    while queue:\n        current = queue.pop()\n        if current in iron_ore and current in coal:\n            return str(len(visited))\n        if current in iron_ore:\n            return 'impossible'\n        if current in coal:\n            return 'impossible'\n        visited.add(current)\n        for neighbour in graph[current]:\n            if neighbour not in visited:\n                queue.append(neighbour)\n    return 'impossible'\n"
    },
    {
        "number": 3396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum amount of rope that the farmer could possibly use.\"\"\"\n    # Get the number of posts\n    n = int(stdin.readline())\n    # Create a list of tuples of the post coordinates\n    posts = [tuple(map(int, line.split())) for line in stdin]\n    # Create a list of distances between each post\n    distances = [distance(p1, p2) for p1, p2 in combinations(posts, 2)]\n    # Return the maximum distance\n    return str(round(max(distances), 2))\n\n\ndef"
    },
    {
        "number": 3397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n_r, n_c, n, m = [int(x) for x in stdin.split()]\n    # get file locations\n    locations = [int(x) for x in stdin.split()[n:]]\n    # get the max and min of the locations\n    max_r, max_c = max(locations), max(locations)\n    min_r, min_c = min(locations), min(locations)\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c = min_r - 1, min_c - 1\n    # get the max and min of the rows and cols\n    max_r, max_c = max_r + 1, max_c + 1\n    min_r, min_c"
    },
    {
        "number": 3399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                grid[i][j] = 'A'\n            elif grid[i][j] == '2':\n                grid[i][j] = 'B'\n            else:\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = '.'\n            elif grid[i][j] == 'B':\n                grid[i][j] = '.'\n            elif grid[i][j] == 'C':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'C'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'A'\n            elif grid[i][j] == 'B':\n                grid["
    },
    {
        "number": 3400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the shortest real time it takes for Alice to go from her present location to the Rabbit\u2019s hole.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 2 2 8\n   ... 0 0 6\n   ... 3 4 7\n   ... 0 8 8\n   ... 6 8 8\n   ... 6 0 6\n   ... 6 4 8\n   ... 3 4\n   ... 1 5\n   ... ''')\n    '20.396078'\n    \"\"\"\n   ..."
    },
    {
        "number": 3402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    T = stdin[1].split()\n    K = int(stdin[2])\n    M = int(stdin[3])\n    P = stdin[4]\n    for i in range(K):\n        S = ''.join([T[j] for j in range(len(T))])\n    for i in range(M):\n        P = P[:int(P[i])] + T[i] + P[int(P[i])+1:]\n    return P\n"
    },
    {
        "number": 3403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n4\\nrobi\\nhobi\\nhobit\\nrakija\")\n    12\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"14 4\\nJQ IRKEYFG EXQ\")\n    THIS IS A TEST\n    \"\"\"\n    N, X = map(int, stdin.split())\n    message = stdin.split()[1]\n    f = lambda x: (33 * x + 1) % (2 ** 20)\n    f_list = [f(x) for x in range(X)]\n    grid = [[f_list[x] for x in range(N)]]\n    for i in range(1, X):\n        grid.append([f_list[x] for x in range(N)])\n        for j in range(N):\n            grid[i][j] = f_list[grid[i - 1][j]]\n    grid = [''.join(map(str, row)) for row in grid]\n    grid = [int(row, base=27) for row in grid]\n    grid = sum(grid)\n    grid = grid % (2 ** 20)\n    grid = [chr(ord('A') + grid % 26)]\n    for i in range(N):\n        grid.append(chr(ord('A') + (grid[i] + int(message[i])) % 26))\n    return ''.join(grid)\n"
    },
    {
        "number": 3405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2.6\")\n    '135\\n270\\n135135\\n270270'\n    \"\"\"\n    X = float(stdin)\n    if X < 1 or X > 1000:\n        return \"No solution\"\n    if X.is_integer():\n        return str(int(X))\n    else:\n        return \"\\n\".join(\n            str(int(X * 10 ** i))\n            for i in range(1, 8)\n            if X * 10 ** i % 1 == 0\n        )\n"
    },
    {
        "number": 3406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nazis = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        nazis.append((x, y))\n    s = int(stdin.readline())\n    castles = []\n    for _ in range(s):\n        x, y = map(int, stdin.readline().split())\n        castles.append((x, y))\n    nazis.sort()\n    castles.sort()\n    i = 0\n    j = 0\n    danger = 0\n    while i < n and j < s:\n        if nazis[i][0] < castles[j][0] and nazis[i][1] < castles[j][1]:\n            danger += 1\n            i += 1\n        elif nazis[i][0] > castles[j][0] and nazis[i][1] > castles[j][1]:\n            danger += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return str(danger)\n"
    },
    {
        "number": 3407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\")\n    '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n    \"\"\"\n   ..."
    },
    {
        "number": 3408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\")\n    '2\\n1\\n1'\n    \"\"\"\n    n, q = map(int, stdin.split())\n    words = [stdin.split()[i] for i in range(n)]\n    patterns = [stdin.split()[i] for i in range(q)]\n    return \"\\n\".join(map(str, [sum([1 for word in words if word in pattern]) for pattern in patterns]))\n"
    },
    {
        "number": 3409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    board = [list(stdin[i:i + c]) for i in range(0, len(stdin), c)]\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'X':\n                board[i][j] = 'O'\n"
    },
    {
        "number": 3410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 0\n   ... 0 2\n   ... -2 0\n   ... 0 -2''')\n    16\n    \"\"\"\n   ..."
    },
    {
        "number": 3411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum time to make the comment chain alternating.\"\"\"\n    n, c, r = [int(x) for x in stdin.split()]\n    scores = [int(x) for x in stdin.split()]\n    return str(min(n * c + r, sum(scores)))\n"
    },
    {
        "number": 3412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 8\n   ... 0 0 10 10\n   ... 5 1\n   ... 5 9\n   ... 3\n   ... 5 8\n   ... 2 2\n   ... 9 6''')\n    '3.000000000'\n    \"\"\"\n    v_walk, v_bike = map(int, stdin.split('\\n')[0].split())\n    x1, y1, x2, y2 = map(int, stdin.split('\\n')[1].split())\n    x_g, y_g = map(int, stdin.split('\\n')[2].split())\n    x_d, y_d = map(int, stdin.split('\\n')[3].split())\n    n = int(stdin.split('\\n')[4])\n    stations = [map(int, stdin.split('\\n')[i].split()) for i in range(5, 5 + n)]\n    return str(min(\n        abs(x_g - x_d) + abs(y_g - y_d) + v_walk * (x2 - x1) + v_bike * (y2 - y1),\n        abs(x_g - x_d) + abs(y_g - y_d) + v_walk * (x1 - x2) + v_bike * (y1 - y2)\n    ))\n"
    },
    {
        "number": 3413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 0 1 0 0\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... ''')\n    1\n    \"\"\"\n    n, m = map(int, stdin.split())\n    parties = list(map(int, stdin.split()))\n    friends = defaultdict(set)\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        friends[a].add(b)\n        friends[b].add(a)\n    for i in range(m):\n        friends[i].add(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    for i in range(m):\n        for j in friends[i]:\n            for k in friends[j]:\n                if k!= i and k not in friends[i]:\n                    friends[i].add(k)\n    for i in range(m):\n        friends[i].remove(i)\n    "
    },
    {
        "number": 3414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    return \" \".join(solution(str(2 ** i)) for i in range(n))\n"
    },
    {
        "number": 3416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(n * (n + 1) / 2))"
    },
    {
        "number": 3419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s_1, s_2 = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    t.reverse()\n    count = 0\n    for i in range(n):\n        if t[i] <= s_1:\n            count += 1\n            s_1 -= t[i]\n        elif t[i] <= s_2:\n            count += 1\n            s_2 -= t[i]\n        else:\n            break\n    return count"
    },
    {
        "number": 3420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls = map(int, stdin.split())\n    boys_books = [stdin.split()[i] for i in range(1, boys + 1)]\n    girls_books = [stdin.split()[i] for i in range(boys + 1, boys + girls + 1)]\n    boys_books_set = set(boys_books)\n    girls_books_set = set(girls_books)\n    return len(boys_books_set.union(girls_books_set))"
    },
    {
        "number": 3421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    s = stdin.readline()\n    n = len(s)\n    if n < k:\n        return '0 0'\n    ans = [0] * n\n    ans[0] = 1 if s[0] == '1' else 0\n    for i in range(1, n):\n        if s[i] == '1':\n            ans[i] = ans[i - 1] + 1\n        else:\n            ans[i] = ans[i - 1]\n    mx = 0\n    mx_i = 0\n    for i in range(k, n):\n        if ans[i] > mx:\n            mx = ans[i]\n            mx_i = i\n    return f'{mx_i + 1} {mx}'\n"
    },
    {
        "number": 3422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 4 1\n   ... 2123\n   ... 2 2\n   ... 21\n   ... 10\n   ... 2 2\n   ... 23\n   ... 12\n   ... ''')\n    '4 3'\n    \"\"\"\n   ..."
    },
    {
        "number": 3423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\")\n    atk\n    freetype\n    glib2\n    libattr\n    libjpeg\n    pcre\n    grep\n    vim-common\n    xorg-x11-libs\n    pango\n    zlib\n    libtiff\n    gtk2\n    vim-X11\n    \"\"\"\n    packages = {}\n    for line in stdin.splitlines():\n        package, dependencies = line.split(\" \", 1)\n        packages[package] = set(dependencies.split())\n    for package in packages:\n        packages[package] = set(package)\n        for dependency in packages[package]:\n            packages[dependency].add(package)\n    order = []\n    while packages:\n        for package in packages:\n            if not packages[package] - set(order):\n                order.append(package)\n                for dependency in packages:\n                    packages[dependency].discard(package)\n                del packages[package]\n                break\n        else:\n            return \"cannot be ordered\"\n    return \" \".join(order)\n"
    },
    {
        "number": 3424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, l = map(int, stdin.split())\n    b = 1\n    while y > l:\n        b += 1\n        y = y % b\n    return str(b)"
    },
    {
        "number": 3425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [list(stdin.split()[i]) for i in range(n)]\n    return str(nqueens(board, n, m))\n\n\ndef"
    },
    {
        "number": 3426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 2 5 1\n   ... 2 3 3 1\n   ... 3 1? 0\n   ... ''')\n    '5'\n    \"\"\"\n    N, M = map(int, stdin.split('\\n')[:2])\n    tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    # tunnels = [list(map"
    },
    {
        "number": 3427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... -1 0\n   ... -1 1\n   ... 0 1\n   ... ''')\n    '0'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {i: set() for i in range(n)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    return max(\n        len(set(graph[u]) - {v}) + len(set(graph[v]) - {u})\n        for u, v in edges\n    )\n"
    },
    {
        "number": 3428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    b = [a[0]]\n    for i in range(1, n):\n        b.append(gcd(a[i], b[i-1]))\n    return len(set(b))\n\ndef"
    },
    {
        "number": 3429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_s, y_s, s_s, r_i, r_f = map(int, stdin.split())\n    x_a, y_a, s_a = map(int, stdin.split())\n    return str(round(solution_func(x_s, y_s, s_s, r_i, r_f, x_a, y_a, s_a), 6))\n\n\ndef"
    },
    {
        "number": 3430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2\n   ... 2 3\n   ... 4\n   ... 1 2\n   ... 1 3\n   ... 1 4''')\n    '96'\n    \"\"\"\n   ..."
    },
    {
        "number": 3431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    rows, cols = [int(x) for x in stdin.split()]\n    maze = []\n    for _ in range(rows):\n        maze.append(stdin.split()[1:])\n    # get fire\n    fire = []\n    for r in range(rows):\n        for c in range(cols):\n            if maze[r][c] == 'F':\n                fire.append((r, c))\n    # get j\n    j = None\n    for r in range(rows):\n        for c in range(cols):\n            if maze[r][c] == 'J':\n                j = (r, c)\n    # get neighbors\n    def neighbors(r, c):\n        for nr, nc in [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]:\n            if 0 <= nr < rows and 0 <= nc < cols:\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            if maze[nr][nc] == '.':\n                yield nr, nc\n    # get safe neighbors\n    def safe_neighbors(r, c):\n        for nr, nc in neighbors(r, c):\n            "
    },
    {
        "number": 3434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    my_health = list(map(int, stdin.split()))\n    opponent_health = list(map(int, stdin.split()))\n    return str(round(1 - sum(1 for i in range(m) if my_health[i] - d > 0) / m, 6))"
    },
    {
        "number": 3435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pattern = stdin.readline()\n    return n * (2 ** (n - 1))"
    },
    {
        "number": 3436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(fibonacci(x, y))\n\n\ndef"
    },
    {
        "number": 3437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L1, L2, N = map(int, stdin.split())\n    tubes = [int(stdin) for stdin in stdin.split()]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes[:N]\n    tubes.sort()\n    tubes.reverse()\n    tubes = tubes"
    },
    {
        "number": 3438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, c, a = [int(x) for x in stdin.split()]\n    # create a list of objects\n    objects = [int(x) for x in range(n)]\n    # create a list of accesses\n    accesses = [int(x) for x in stdin.split()]\n    # create a list of accesses\n    cache = []\n    # create a list of accesses\n    access_count = []\n    # create a list of accesses\n    access_count_cache = []\n    # create a list of accesses\n    access_count_cache_list = []\n    # create a list of accesses\n    access_count_cache_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list = []\n    # create a list of accesses\n    access_count_cache_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list"
    },
    {
        "number": 3439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split('\\n')[0].split())\n    grid = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, h + 1)]\n    i, j = map(int, stdin.split('\\n')[h + 1].split())\n    return str(solve(grid, i, j))\n\n\ndef"
    },
    {
        "number": 3440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m = [int(x) for x in stdin.split(' ')]\n    roads = []\n    for _ in range(m):\n        roads.append([int(x) for x in stdin.split(' ')])\n\n    # create graph\n    graph = {}\n    for road in roads:\n        if road[0] not in graph:\n            graph[road[0]] = [road[1]]\n        else:\n            graph[road[0]].append(road[1])\n        if road[1] not in graph:\n            graph[road[1]] = [road[0]]\n        else:\n            graph[road[1]].append(road[0])\n\n    # find all paths\n    paths = []\n    for start in range(n):\n        paths.extend(find_all_paths(graph, start, n))\n\n    # count paths\n    count = 0\n    for path in paths:\n        if not has_round_trip(path):\n            count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 3442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(sum(1 for i in range(x, y + 1) if is_sheldon(i)))\n\n\ndef"
    },
    {
        "number": 3443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1\n   ... 0 1 0.5\n   ... ''')\n    '0.500000000 1.000000000'\n    \"\"\"\n   ..."
    },
    {
        "number": 3445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the longest delivery time required by the two companies.\"\"\"\n    # Get the number of customers.\n    num_customers = int(stdin.readline())\n\n    # Get the coordinates of each customer.\n    customer_coordinates = [tuple(map(int, line.split())) for line in stdin]\n\n    # Get the longest delivery time for each company.\n    company_1_delivery_time = max(\n        [\n            # The distance between the two customers.\n            abs(customer_coordinates[i][0] - customer_coordinates[i + 1][0])\n            + abs(customer_coordinates[i][1] - customer_coordinates[i + 1][1])\n            for i in range(num_customers - 1)\n        ]\n    )\n    company_2_delivery_time = max(\n        [\n            # The distance between the two customers.\n            abs(customer_coordinates[i][0] - customer_coordinates[i + 1][0])\n            + abs(customer_coordinates[i][1] - customer_coordinates[i + 1][1])\n            for i in range(num_customers - 1)\n        ]\n    )\n\n    # Return the longest delivery time.\n    return str(max(company_1_delivery_time, company_2_delivery_time))\n"
    },
    {
        "number": 3446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\")\n    '9-b'\n    \"\"\"\n    k, table = int(stdin.split(\"\\n\")[0]), {}\n    for line in stdin.split(\"\\n\")[1:]:\n        time, result = int(line.split(\" \")[0]), line.split(\" \")[1]\n        table[result] = time\n    n = int(stdin.split(\"\\n\")[-2])\n    for _ in range(n):\n        line = stdin.split(\"\\n\")[-1]\n        time, result = 0, \"\"\n        for i in range(len(line)):\n            if line[i] in table:\n                time += table[line[i]]\n                result += line[i]\n            else:\n                break\n        print(time, result)\n"
    },
    {
        "number": 3447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\necho\\n1\\necho\\n\")\n    '3246R3246'\n    \"\"\"\n    dictionary = stdin.split(\"\\n\")[0]\n    words = stdin.split(\"\\n\")[1:]\n    dictionary = [word.lower() for word in dictionary.split(\"\\n\")]\n    words = [word.lower() for word in words]\n    dictionary.sort(key=lambda x: len(x), reverse=True)\n    words.sort(key=lambda x: len(x), reverse=True)\n    dictionary = {word: i for i, word in enumerate(dictionary)}\n    words = {word: i for i, word in enumerate(words)}\n    dp = [[0] * len(dictionary) for _ in range(len(words))]\n    for i in range(len(words)):\n        for j in range(len(dictionary)):\n            if words[i] in dictionary:\n                dp[i][j] = dp[i - 1][j]\n                if words[i] == dictionary[j]:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1)\n                if i > 0 and words[i][0] == words[i - 1][-1] and dp[i][j] < dp[i - 1][j]:\n                    dp[i][j] = dp[i - 1][j]\n    ans = []\n    i, j = len(words) - 1, len(dictionary) - 1\n    while i >= 0 and j >= 0:\n        if dp[i][j] == dp[i - 1][j - 1] + 1:\n            ans.append(dictionary[j])\n            i -= 1\n            j -= 1\n        elif dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            j -= 1\n    ans.reverse()\n    return \"\".join(ans)\n"
    },
    {
        "number": 3448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < n:\n        return \"NO\"\n    m = [0] * n\n    v = [0] * n\n    for i in range(k):\n        m[i], v[i] = map(int, stdin.split())\n    m.sort()\n    v.sort()\n    for i in range(k):\n        if m[i] < m[i + 1] or v[i] < v[i + 1]:\n            return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: str(x[0]) + \" \" + str(x[1]), zip(m, v)))\n"
    },
    {
        "number": 3449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    factorial = str(factorial)\n    factorial = factorial[::-1]\n    factorial = factorial[:len(factorial) - 3]\n    factorial = factorial[::-1]\n    return factorial"
    },
    {
        "number": 3451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    costs = [int(c) for c in stdin[n:].split()]\n    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j < k:\n                dp[i][j + 1] = min(dp[i][j + 1], dp[i - 1][j] + costs[i - 1])\n            if j > 0:\n                dp[i][j - 1] = min(dp[i][j - 1], dp[i - 1][j] + costs[i - 1])\n            dp[i][j] = min(dp[i][j], dp[i - 1][j])\n    if dp[n][k] < float('inf'):\n        return dp[n][k]\n    return '?'"
    },
    {
        "number": 3452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''13\n   ... 2 2 4\n   ... 3 1 3 5\n   ... 2 2 4\n   ... 3 1 3 6\n   ... 2 2 6\n   ... 2 4 5\n   ... 2 8 9\n   ... 2 7 9\n   ... 2 7 8\n   ... 2 11 13\n   ... 2 10 12\n   ... 2 11 13\n   ... 2 10 12''')\n    '2 4'\n    \"\"\"\n   ..."
    },
    {
        "number": 3453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 1 2 3\n   ... 1 4 8\n   ... 2 3 12\n   ... 3 5 4\n   ... 4 5 2''')\n    '35 39 36 27 29'\n    \"\"\"\n    N, M = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        A, B, L = map(int, stdin.split())\n        graph[A - 1].append((B - 1, L))\n        graph[B - 1].append((A - 1, L))\n    dist = [float('inf')] * N\n    dist[0] = 0\n    for _ in range(N):\n        for u in range(N):\n            for v, l in graph[u]:\n                if dist[v] > dist[u] + l:\n                    dist[v] = dist[u] + l\n    return''.join(map(str, dist))\n"
    },
    {
        "number": 3454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 3 2 1''')\n    '0 672'\n    \"\"\"\n    M, N = map(int, stdin.split())\n    b = [int(x) for x in stdin.split()[1:]]\n    r = [M - x for x in b]\n    return str(len(b) * len(r) % 100003) +'' + str(len(b) * len(r))\n"
    },
    {
        "number": 3455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin.readline()\n    # n, m, r = [int(x) for x in stdin.readline().split()]\n    # cars = []\n    # for _ in range(m):\n    #     cars.append([int(x) for x in stdin.readline().split()])\n    # cars.sort(key=lambda x: x[0])\n    #\n    # def get_safety_factor(car):\n    #     safety_factor = 0\n    #     for i in range(1, r + 1):\n    #         safety_factor = max(safety_factor, min(car[1] - i, car[2]))\n    #     return safety_factor\n    #\n    # safety_factors = [get_safety_factor(car) for car in cars]\n    #\n    # if safety_factors[0] == 0:\n    #     return 'Impossible'\n    #\n    # for i in range(1, n):\n    #     safety_factors[i] = max(safety_factors[i], safety_factors[i - 1])\n    #\n    # return '{:.5f}'.format(safety_factors[-1])\n\n    n, m, r = [int(x) for x in stdin.readline().split()]\n    cars = []\n    for _ in range(m):\n        cars.append([int(x) for x in stdin.readline().split()])\n    cars.sort(key=lambda x: x[0])\n\n    def get_safety_factor(car):\n        safety_factor = 0\n        for i in range(1, r + 1):\n            safety_factor = max(safety_factor, min(car[1] - i, car[2]))\n        return safety_factor\n\n    safety_factors = [get_safety_factor(car) for car in cars]\n\n    if safety_factors[0] == 0:\n        return 'Impossible'\n\n    for i in range(1, n):\n        safety_factors[i] = max(safety_factors[i], safety_factors[i - 1])\n\n    return '{:.5f}'.format(safety_factors[-1])\n"
    },
    {
        "number": 3456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return result"
    },
    {
        "number": 3457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, Y = [int(x) for x in stdin.split()]\n    return str(binomial(N, X + Y))[2:]\n\n\ndef"
    },
    {
        "number": 3458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    return str(max(numbers) ^ max(numbers[i] ^ numbers[j] for i in range(n) for j in range(i + 1, n)))"
    },
    {
        "number": 3459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"4\n   ... fred dinosaur 2 jets jetsons\n   ... john rhinocerous 2 jets rockets\n   ... mary rhinocerous 2 jetsons rockets\n   ... ruth platypus 1 rockets\n   ... \"\"\")\n    'fred jetsons\\njohn jets\\nruth rockets'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    town_council = []\n    for i in range(n):\n        town_council.append(TownCouncil(stdin.split(\"\\n\")[i + 1]))\n    town_council.sort(key=lambda x: x.party)\n    for i in range(len(town_council)):\n        town_council[i].party = i + 1\n    town_council.sort(key=lambda x: x.clubs)\n    for i in range(len(town_council)):\n        town_council[i].clubs = i + 1\n    town_council.sort(key=lambda x: x.resident)\n    for i in range(len(town_council)):\n        town_council[i].resident = i + 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len(town_council)):\n        town_council[i].party = town_council[i].party - 1\n        town_council[i].clubs = town_council[i].clubs - 1\n        town_council[i].resident = town_council[i].resident - 1\n    for i in range(len"
    },
    {
        "number": 3460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 4 3\n   ... -10 9\n   ... -2 3\n   ... ''')\n    '1 2 1'\n    \"\"\"\n   ..."
    },
    {
        "number": 3461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 1 7\n   ... 3 2 3\n   ... 5 1 4\n   ... 6 10 10''')\n    '2.125'\n    \"\"\"\n   ..."
    },
    {
        "number": 3462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 3463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    p = [float(stdin) for stdin in stdin.split('\\n')[1:]]\n    return str(sum(p[:N]) / sum(p))"
    },
    {
        "number": 3464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, p = stdin.split()\n    x = float(x)\n    p = float(p)\n    if p < 0 or p > 50:\n        return 'Error: p must be between 0 and 50'\n    if x < 0 or x > 100:\n        return 'Error: x must be between 0 and 100'\n    return str(round(x * p / 100, 3))"
    },
    {
        "number": 3465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2\n   ... 2 3\n   ... 3 1\n   ... 4 1''')\n    4 1\n    2 1\n    3 2\n    1 3\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    roads = list(set(roads))\n    roads.sort()\n    roads = [tuple(sorted(road)) for road in roads]\n    roads = {road: i for i, road in enumerate(roads)}\n    return '\\n'.join([' '.join(map(str, road)) for road in roads])\n"
    },
    {
        "number": 3466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    a_sum = sum(a)\n    b_sum = sum(b)\n    a_fraction = [a_i / a_sum for a_i in a]\n    b_fraction = [b_i / b_sum for b_i in b]\n    b_fraction_sum = [b_i + 1 for b_i in b]\n    b_fraction_sum_sum = [b_i + 1 for b_i in b_fraction_sum]\n    b_fraction_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum]\n    b_fraction_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = [b_i + 1 for b_i in b_fraction_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum]\n    b_fraction_sum_sum_sum_sum_sum_sum_"
    },
    {
        "number": 3467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    trains = []\n    for _ in range(m):\n        u, v, t0, p, d = map(int, stdin.split())\n        trains.append((u, v, t0, p, d))\n    trains.sort(key=lambda x: x[2])\n    t = 0\n    for u, v, t0, p, d in trains:\n        if t + t0 + d > s:\n            return \"impossible\"\n        t += t0 + d\n    return t"
    },
    {
        "number": 3468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 100\n   ... 99 1\n   ... 1 99''')\n    '2'\n    >>> solution('''2 100\n   ... 99 1\n   ... 1 99\n   ... 1 1''')\n    '1'\n    \"\"\"\n    n, c = map(int, stdin.split())\n    apps = [list(map(int, stdin.split())) for _ in range(n)]\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0] / x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda"
    },
    {
        "number": 3469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    g = stdin[0]\n    k = stdin[1]\n    p = float(stdin[2])\n    return str(1 - (1 - p) ** (len(g) + len(k)))\n"
    },
    {
        "number": 3470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 3 5 7\n   ... 3\n   ... 2 2\n   ... 2 5\n   ... 1 5''')\n    '3'\n    >>> solution('''4\n   ... 1 3 5 7\n   ... 3\n   ... 2 2\n   ... 2 5\n   ... 1 5''')\n    '1'\n    >>> solution('''4\n   ... 1 3 5 7\n   ... 3\n   ... 2 2\n   ... 2 5\n   ... 1 5''')\n    '0'\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    q = int(stdin.readline())\n    x = a[:n]\n    for _ in range(q):\n        l, r = [int(x) for x in stdin.readline().split()]\n        print(x[l - 1] ^ x[r - 1])\n"
    },
    {
        "number": 3472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\")\n    '194'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 10 10 10 10 0\n   ... 5 10 10 5 10 0\n   ... 6 10 10 10 10 0\n   ... ''')\n    'negative-infinity 0\\n5 12.5\\nnegative-infinity -5'\n    \"\"\"\n    mirrors = [tuple(map(float, line.split())) for line in stdin.splitlines()]\n    mirrors.sort()\n    mirrors = [(x, y) for x, y in mirrors if x!= y]\n    mirrors.append((0, 0))\n    mirrors.sort()\n    mirrors = [(x, y) for x, y in mirrors if x!= 0]\n    mirrors.sort()\n    mirrors = [(x, y) for x, y in mirrors if y!= 0]\n    mirrors.sort()\n    mirrors = [(x, y) for x, y in mirrors if x * y > 0]\n    mirrors.sort()\n    mirrors = [(x, y) for x, y in mirrors if x < 0]\n    mirrors.sort()\n    mirrors = [(x, y) for x, y in mirrors if x > 0]\n    mirrors.sort()\n    mirrors = [(x, y) for x, y in mirrors if y < 0]\n    mirrors.sort()\n    mirrors = [(x, y) for x, y in mirrors if y > 0]\n    mirrors.sort()\n    return '\\n'.join(map(str, mirrors))\n"
    },
    {
        "number": 3475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4\n   ... 100 30000\n   ... 200 20000\n   ... 300 10000\n   ... 400 0\n   ... 50 10000\n   ... 75 20000\n   ... 400 -40000\n   ... ''')\n    '2'\n    \"\"\"\n   ..."
    },
    {
        "number": 3476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\")\n    345 2\n    \"\"\"\n    R, C = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(R)]\n    T = 5 * R * C\n    operations = []\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] < 0:\n                operations.append(f\"negR {i + 1}\")\n                matrix[i][j] *= -1\n            else:\n                operations.append(f\"rotS {j + 1} {i + 1}\")\n                matrix[i][j] *= -1\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] < 0:\n                operations.append(f\"negS {j + 1}\")\n                matrix[i][j] *= -1\n            else:\n                operations.append(f\"rotR {i + 1}\")\n                matrix[i][j] *= -1\n    operations.sort()\n    return \"\\n\".join(operations)\n"
    },
    {
        "number": 3477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 3 1 1''')\n    '0.5'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()[1:]))\n    E = [i / m for i in range(m)]\n    return str(sum(k[i] * min(abs(i - E[j]) ** 2 for j in range(m)) for i in range(n)))\n"
    },
    {
        "number": 3478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    Parameters:\n        stdin (str): The input string given by the standard input.\n\n    Returns:\n        str: The solution for the given input.\n    \"\"\"\n    # Get the input\n    n, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    # Initialize the graph\n    graph = {x: [] for x in range(1, n + 1)}\n    # Add the edges\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split('\\n')[_].split(' ')]\n        graph[x].append(y)\n        graph[y].append(x)\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the result\n    result = []\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the queue\n    queue = deque()\n    # Initialize the visited set\n    visited = set()\n    # Initialize the"
    },
    {
        "number": 3479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = [int(stdin) for _ in range(n)]\n    t.sort()\n    return sum(t[:k])"
    },
    {
        "number": 3480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4\\n2 2 2 2 2 2 2 2 4 4 4 4\\n\")\n    Hot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    line_count = int(lines[0].split()[0])\n    delay = int(lines[0].split()[1])\n    lines = lines[1:]\n    lines = [line.split(\" = \") for line in lines]\n    lines = [[line[0], line[1].split(\" \")] for line in lines]\n    lines = [[line[0], [int(syllable) for syllable in line[1]]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syllable for syllable in line[1] if syllable!= \"\"]] for line in lines]\n    lines = [[line[0], [syll"
    },
    {
        "number": 3481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2 1\n   ... 1 2 10\n   ... 1 4 6 6\n   ... 1 6 10 5\n   ... 2 10 30 33\n   ... ''')\n    '33'\n    \"\"\"\n    G, K, R = [int(x) for x in stdin.split('\\n')[0].split()]\n    roads = []\n    for _ in range(R):\n        roads.append([int(x) for x in stdin.split('\\n')[_].split()])\n    gigs = []\n    for _ in range(G):\n        gigs.append([int(x) for x in stdin.split('\\n')[_].split()])\n    return str(solve(G, K, R, roads, gigs))\n\n\ndef"
    },
    {
        "number": 3482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum weight of a $4$-pack in grams for the given set of figurines.\n\n    Args:\n        stdin (str): Input string to process.\n\n    Returns:\n        str: Output string.\n    \"\"\"\n    # Get input\n    n = int(stdin)\n    weights = [int(weight) for weight in stdin.split()]\n\n    # Get max weight\n    max_weight = max(weights)\n\n    # Get min weight\n    min_weight = min(weights)\n\n    # Get distinct weights\n    distinct_weights = set(weights)\n\n    # Get expected weight\n    expected_weight = sum(weights) / len(weights)\n\n    # Return answer\n    return f\"{max_weight} {min_weight} {len(distinct_weights)} {expected_weight}\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(k)]\n    for i in range(k, n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                for x in range(1, n + 1):\n                    if x not in grid[i] and x not in [row[j] for row in grid]:\n                        grid[i][j] = x\n                        break\n    for row in grid:\n        print(*row)\n    return ''\n"
    },
    {
        "number": 3485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n10 10 -10 -4 10\")\n    '10.0'\n    \"\"\"\n    cards = [int(x) for x in stdin.split()]\n    counted = []\n    count = 0\n    for i in range(len(cards)):\n        if cards[i] < 0:\n            counted.append(cards[i])\n            count += 1\n        else:\n            if count > 0:\n                counted.append(cards[i])\n                count += 1\n            else:\n                counted.append(0)\n    counted = [x for x in counted if x!= 0]\n    if len(counted) == 0:\n        return \"0.0\"\n    return str(sum(counted) / len(counted))\n"
    },
    {
        "number": 3486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n30\\n3\\n2\\n45\")\n    1\n    \"\"\"\n    n = int(stdin)\n    streamers = [int(stdin) for stdin in stdin.split(\"\\n\")]\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n    streamers.append(streamers[0])\n    streamers.insert(0, streamers[-1])\n    streamers = set(streamers)\n    streamers = list(streamers)\n    streamers.sort()\n"
    },
    {
        "number": 3487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\")\n    0.000000000 1.360000000\n    0.000000000 1.000000000\n    0.000000000 -1.000000000\n    0.000000000 0.360000000\n    0.880000000 0.000000000\n    -0.880000000 -0.360000000\n    1.02037965897\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 0\n   ... 0 3\n   ... 3 3\n   ... 3 0\n   ... 2\n   ... 1 1\n   ... 2 2''')\n    '4'\n    \"\"\"\n   ..."
    },
    {
        "number": 3489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 0\n   ... 0 1\n   ... 0 2\n   ... 0 3\n   ... ''')\n    '2'\n    >>> solution('''4 0\n   ... 0 1\n   ... 0 2\n   ... 0 3\n   ... 1 2\n   ... 1 3\n   ... ''')\n    '0'\n    >>> solution('''4 0\n   ... 0 1\n   ... 0 2\n   ... 0 3\n   ... 1 2\n   ... 2 3\n   ... ''')\n    '0'\n    >>> solution('''4 0\n   ... 0 1\n   ... 0 2\n   ... 0 3\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... ''')\n    '0'\n    \"\"\"\n   ..."
    },
    {
        "number": 3490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 0 0 0\n   ... 0 1.5 0''')\n    'ok'\n    >>> solution('''2\n   ... 0 0 0\n   ... 0 1.5 1''')\n    'crash'\n    \"\"\"\n   ..."
    },
    {
        "number": 3491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 4\n   ... 0 1\n   ... 0 3\n   ... 1 2\n   ... 2 4\n   ... 0 2\n   ... 0 4\n   ... 2 3\n   ... 2 4''')\n    '2'\n    \"\"\"\n    N, M = map(int, stdin.split())\n    current = [0] * N\n    desired = [0] * N\n    for i in range(M):\n        a, b = map(int, stdin.split()[2 * i : 2 * i + 2])\n        current[a] = b\n        desired[b] = a\n    current = tuple(current)\n    desired = tuple(desired)\n    Q = 0\n    while current!= desired:\n        Q += 1\n        for i in range(N):\n            if current[i] == 0:\n                continue\n            if current[i] == 1:\n                current[i] = 2\n            else:\n                current[i] = 1\n            if current[i] == desired[i]:\n                continue\n            if current[i] == 1:\n                current[i] = 0\n            else:\n                current[i] = 1\n    return str(Q)\n"
    },
    {
        "number": 3492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nYYY\\nNYY\\nYNY\")\n    '2\\n1 2 3'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    people = [stdin.split(\"\\n\")[i] for i in range(1, n + 1)]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= [\"Y\"] * n]\n    people = [list(set(i)) for i in people]\n    people = [i for i in people if len(i) == n]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(set(i)) for i in people]\n    people = [i for i in people if len(i) == n]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i) for i in people]\n    people = [i for i in people if i!= []]\n    people = [list(i"
    },
    {
        "number": 3494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n5\\n3\\n4\\n5 3\")\n    '4.114 -2.842\\n6.297 -0.784\\n5.000 3.000'\n    \"\"\"\n    n = int(stdin.readline())\n    segments = [float(x) for x in stdin.readline().split()]\n    x, y = [float(x) for x in stdin.readline().split()]\n    segments.append(x)\n    segments.append(y)\n    segments.sort()\n    segments.append(segments[0] + segments[1])\n    segments.append(segments[0] + segments[2])\n    segments.append(segments[1] + segments[2])\n    segments.append(segments[0] + segments[3])\n    segments.append(segments[1] + segments[3])\n    segments.append(segments[2] + segments[3])\n    segments.append(segments[0] + segments[4])\n    segments.append(segments[1] + segments[4])\n    segments.append(segments[2] + segments[4])\n    segments.append(segments[3] + segments[4])\n    segments.append(segments[0] + segments[5])\n    segments.append(segments[1] + segments[5])\n    segments.append(segments[2] + segments[5])\n    segments.append(segments[3] + segments[5])\n    segments.append(segments[4] + segments[5])\n    segments.append(segments[0] + segments[6])\n    segments.append(segments[1] + segments[6])\n    segments.append(segments[2] + segments[6])\n    segments.append(segments[3] + segments[6])\n    segments.append(segments[4] + segments[6])\n    segments.append(segments[5] + segments[6])\n    segments.append(segments[0] + segments[7])\n    segments.append(segments[1] + segments[7])\n    segments.append(segments[2] + segments[7])\n    segments.append(segments[3] + segments[7])\n    segments.append(segments[4] + segments[7])\n    segments.append(segments[5] + segments[7])\n    segments.append(segments[6] + segments[7])\n    segments.append(segments[0] + segments[8])\n    segments.append(segments[1] + segments[8])\n    segments.append(segments[2] + segments[8])\n    segments.append(segments[3] + segments[8])\n    segments.append(segments[4] + segments[8])\n    segments.append(segments[5] + segments[8])\n    segments.append(segments[6] + segments[8])\n    segments.append(segments[7] + segments[8])\n    segments.append(segments[0] + segments[9])\n    segments.append(segments[1] + segments[9])\n    segments.append(segments[2] + segments[9])\n    segments.append(segments[3] + segments[9])\n    segments.append(segments[4] + segments[9])\n    segments.append(segments[5] + segments[9])\n    segments.append(segments[6] + segments[9])\n    segments.append(segments[7] + segments[9])\n    segments.append(segments[8] + segments[9])\n    segments.append(segments[0] + segments[10])\n    segments.append(segments[1] + segments[10])\n    segments.append(segments[2] + segments[10])\n    segments.append(segments[3] + segments[10])\n    segments.append(segments[4] + segments[10])\n    segments.append(segments[5] + segments[10])\n    segments.append(segments[6] + segments[10])\n    segments.append(segments[7] + segments[10])\n    segments.append(segments[8] + segments[10])\n    segments.append(segments[9] + segments[10])\n    segments.append(segments[0] + segments[11])\n    segments.append(segments[1] + segments[11])\n    segments.append(segments[2] + segments[11])\n    segments.append(segments[3] + segments[11])\n    segments.append(segments[4] + segments[11])\n    segments.append(segments[5] + segments[11])\n    segments.append(segments[6] + segments[11])\n    segments.append(segments[7] + segments[11])\n    segments.append(segments[8] + segments[11])\n    segments.append(segments[9] + segments[11])\n    segments.append(segments[10] + segments[11])\n    segments.append(segments[0] + segments[12])\n    segments.append(segments[1] + segments[12])\n    segments.append(segments[2] + segments[12])\n    segments.append(segments[3] + segments[12])\n    segments.append(segments[4] + segments[12])\n    segments.append(segments[5] + segments[12])\n    segments.append(segments[6] + segments[12])\n    segments.append(segments[7] + segments[12])\n    "
    },
    {
        "number": 3496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    for _ in range(q):\n        k = int(stdin.split('\\n')[2 + _])\n        if k <= n:\n            print(a[k - 1])\n        else:\n            print(a[k - 1] + a[k - 2])\n"
    },
    {
        "number": 3497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1\n   ... 50 2 5 C1 L1 C1 U1 C1\n   ... 1 1 5 C1 L1 C100 U1 C1\n   ... 70 3 1 C1''')\n    '106\\n107\\n71'\n    \"\"\"\n    t, r = map(int, stdin.split())\n    tasks = [tuple(map(int, line.split())) for line in stdin.splitlines()[:t]]\n    tasks.sort(key=lambda task: task[0])\n    resources = [0] * r\n    for task in tasks:\n        for i in range(task[1]):\n            if task[2 + i] == 'C':\n                resources[i] += 1\n            elif task[2 + i] == 'L':\n                resources[i] -= 1\n            elif task[2 + i] == 'U':\n                resources[i] += 1\n    return '\\n'.join(map(str, resources))\n"
    },
    {
        "number": 3499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"AA\")\n    51\n    >>> solution(\"AB\")\n    52\n    >>> solution(\"BA\")\n    52\n    >>> solution(\"BB\")\n    52\n    >>> solution(\"BAB\")\n    52\n    >>> solution(\"BAA\")\n    52\n    >>> solution(\"BBA\")\n    52\n    >>> solution(\"BBAB\")\n    52\n    >>> solution(\"BBABA\")\n    52\n    >>> solution(\"BBABAA\")\n    52\n    >>> solution(\"BBABBA\")\n    52\n    >>> solution(\"BBABBAB\")\n    52\n    >>> solution(\"BBABBABA\")\n    52\n    >>> solution(\"BBABBABAA\")\n    52\n    >>> solution(\"BBABBABBA\")\n    52\n    >>> solution(\"BBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBAB\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABAA\")\n    52\n    >>> solution(\"BBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBA\")\n    52\n    >>> solution(\""
    },
    {
        "number": 3500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the two numbers that can tie in the bingo game.\"\"\"\n    # Your code here\n    # stdin = stdin.split('\\n\\n')\n    # cards = []\n    # for card in stdin:\n    #     cards.append(card.split('\\n'))\n    # cards = [list(map(int, card)) for card in cards]\n    # for card in cards:\n    #     for i in range(len(card)):\n    #         if card[i] == 0:\n    #             card[i] = -1\n    # for i in range(len(cards)):\n    #     for j in range(len(cards)):\n    #         if i!= j:\n    #             if cards[i] == cards[j]:\n    #                 return str(i + 1) +'' + str(j + 1)\n    # return 'no ties'\n    cards = []\n    for card in stdin.split('\\n\\n'):\n        cards.append(card.split('\\n'))\n    cards = [list(map(int, card)) for card in cards]\n    for card in cards:\n        for i in range(len(card)):\n            if card[i] == 0:\n                card[i] = -1\n    for i in range(len(cards)):\n        for j in range(len(cards)):\n            if i!= j:\n                if cards[i] == cards[j]:\n                    return str(i + 1) +'' + str(j + 1)\n    return 'no ties'\n"
    },
    {
        "number": 3501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    c = [int(x) for x in stdin.readline().split()]\n    return str(sum([a.count(x) * b.count(x) * c.count(x) for x in set(a)]))\n"
    },
    {
        "number": 3502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 3\n   ... 6 2 3\n   ... 10 2 3\n   ... 16 3 4''')\n    '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n    \"\"\"\n   ..."
    },
    {
        "number": 3503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        pairs.append((a, b))\n    pairs.sort()\n    for a, b in pairs:\n        for op in ('+', '-', '*'):\n            if op == '+':\n                if b == 0:\n                    continue\n                if a == 0:\n                    print(f'{a} {op} {b} = {a + b}')\n                    break\n                if a > 0 and b > 0:\n                    print(f'{a} {op} {b} = {a + b}')\n                    break\n                if a < 0 and b < 0:\n                    print(f'{a} {op} {b} = {a + b}')\n                    break\n            if op == '-':\n                if b == 0:\n                    continue\n                if a == 0:\n                    print(f'{a} {op} {b} = {a - b}')\n                    break\n                if a > 0 and b > 0:\n                    print(f'{a} {op} {b} = {a - b}')\n                    break\n                if a < 0 and b < 0:\n                    print(f'{a} {op} {b} = {a - b}')\n                    break\n            if op == '*':\n                if b == 0:\n                    continue\n                if a == 0:\n                    print(f'{a} {op} {b} = {a * b}')\n                    break\n                if a > 0 and b > 0:\n                    print(f'{a} {op} {b} = {a * b}')\n                    break\n                if a < 0 and b < 0:\n                    print(f'{a} {op} {b} = {a * b}')\n                    break\n        else:\n            print('impossible')\n            break\n    else:\n        print('impossible')\n    return ''"
    },
    {
        "number": 3504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 1 8\n   ... 2 3\n   ... 2 8\n   ... 5 8\n   ... 5 9\n   ... 3 6 6\n   ... 1 7 4\n   ... 1 3 1''')\n    '4\\n1\\n4\\n6\\n0'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] == a[k]:\n                    cnt += 1\n    return cnt"
    },
    {
        "number": 3506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    cheerleaders = [list(map(int, stdin.split())) for _ in range(m)]\n    cheerleaders.sort(key=lambda x: x[0])\n    spoilify = []\n    for i in range(m):\n        if cheerleaders[i][1] > t:\n            spoilify.append(cheerleaders[i])\n    spoilify.sort(key=lambda x: x[1])\n    spoilify_goals = 0\n    sportify_goals = 0\n    for i in range(m):\n        if i % 2 == 0:\n            if len(spoilify) > 0:\n                if spoilify[0][0] <= t:\n                    spoilify_goals += 1\n                    spoilify.pop(0)\n        else:\n            if len(cheerleaders) > 0:\n                if cheerleaders[0][0] <= t:\n                    sportify_goals += 1\n                    cheerleaders.pop(0)\n    return str(sportify_goals) + \" \" + str(spoilify_goals)\n"
    },
    {
        "number": 3507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, w, d = map(int, stdin.split())\n    return str(r * w - (r - d) * (w - d))\n"
    },
    {
        "number": 3508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *b = map(int, stdin.split())\n    b = [0] + b + [0]\n    dp = [0] * (n + 1)\n    dp[1] = b[1]\n    dp[2] = b[1] + b[2]\n    for i in range(3, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + b[i])\n    return str(n - dp[n].bit_length()) + \" \" + str(n - dp[n].bit_length() - 1)\n"
    },
    {
        "number": 3509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n, m = map(int, stdin.split())\n    roads = [tuple(map(int, stdin.split())) for _ in range(m)]\n    roads.sort(key=lambda x: x[2])\n    roads.append((n, n, 0))\n    dp = [float('inf')] * (b + 1)\n    dp[0] = 0\n    for u, v, t in roads:\n        for i in range(u, b + 1):\n            dp[i] = min(dp[i], dp[i - t] + abs(i - v))\n    return dp[b]\n"
    },
    {
        "number": 3510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\nab b\\n1 b\")\n    0 1\n    \"\"\"\n    n = int(stdin.split()[0])\n    positions = [stdin.split()[i] for i in range(1, n + 1)]\n    options = [stdin.split()[i] for i in range(n + 1, 2 * n + 1)]\n    return \"\\n\".join(\n        [\n            str(\n                min(\n                    [\n                        len(\n                            set(\n                                [\n                                    positions[i]\n                                    for i in range(len(options[j]))\n                                    if options[j][i] == positions[j]\n                                ]\n                            )\n                        )\n                        for j in range(len(options))\n                    ]\n                )\n            )\n            if len(set(positions)) == len(options)\n            else -1\n            for positions, options in zip(positions, options)\n        ]\n    )\n"
    },
    {
        "number": 3511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = [0] * n\n    for _ in range(q):\n        l, r = map(int, stdin.split())\n        a[l - 1] += 1\n        a[r - 1] += 1\n    a = [i ** 2 for i in a]\n    return str(sum(a) % (10 ** 9 + 7))\n"
    },
    {
        "number": 3512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 3514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\""
    },
    {
        "number": 3515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 3 2\n   ... 2 5 2\n   ... 3 0 0\n   ... 4 2 4\n   ... 5 3 0''')\n    '9\\n-1\\n5\\n6'\n    \"\"\"\n    N, *data = [int(line) for line in stdin.splitlines()]\n    data = sorted(data)\n    dp = [float('inf')] * N\n    dp[0] = 0\n    for i in range(N):\n        for j in range(i):\n            if abs(data[i] - data[j]) >= data[j]:\n                dp[i] = min(dp[i], dp[j] + abs(data[i] - data[j]))\n    return '\\n'.join(map(str, dp))\n"
    },
    {
        "number": 3516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum time it takes to beat all of the levels in the game.\"\"\"\n    # Get the number of levels.\n    n = int(stdin.readline())\n\n    # Get the shortcut items and the completion times for each level.\n    shortcut_items = []\n    completion_times = []\n    for _ in range(n):\n        shortcut_item, completion_time = map(int, stdin.readline().split())\n        shortcut_items.append(shortcut_item)\n        completion_times.append(completion_time)\n\n    # Get the completion times for each level when playing by the rules.\n    completion_times_by_rules = []\n    for i in range(n + 1):\n        completion_times_by_rules.append([])\n        for j in range(n + 1):\n            completion_times_by_rules[i].append(completion_times[j] + shortcut_items[i] - shortcut_items[j])\n\n    # Get the minimum time it takes to beat all of the levels.\n    min_time = 10 ** 9\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i == j:\n                continue\n            for k in range(n + 1):\n                if j == k:\n                    continue\n                if i == k:\n                    continue\n                if completion_times_by_rules[i][j] <= completion_times_by_rules[j][k] and completion_times_by_rules[i][j] <= completion_times_by_rules[k][i]:\n                    min_time = min(min_time, completion_times_by_rules[i][j])\n\n    return str(min_time)\n"
    },
    {
        "number": 3517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 3518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [[] for _ in range(n)]\n    for _ in range(m):\n        p, q, c = map(int, stdin.split())\n        friends[p - 1].append((q - 1, c))\n        friends[q - 1].append((p - 1, c))\n    # print(friends)\n    # print(friends[0])\n    # print(friends[0][0])\n    # print(friends[0][0][0])\n    # print(friends[0][0][1])\n    # print(friends[0][0][1] * 2)\n    # print(friends[0][0][1] * 2 + friends[0][1][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1] + friends[2][1][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1] + friends[2][1][1] + friends[3][0][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1] + friends[2][1][1] + friends[3][0][1] + friends[3][1][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1] + friends[2][1][1] + friends[3][0][1] + friends[3][1][1] + friends[4][0][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1] + friends[2][1][1] + friends[3][0][1] + friends[3][1][1] + friends[4][0][1] + friends[4][1][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1] + friends[2][1][1] + friends[3][0][1] + friends[3][1][1] + friends[4][0][1] + friends[4][1][1] + friends[5][0][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1] + friends[2][1][1] + friends[3][0][1] + friends[3][1][1] + friends[4][0][1] + friends[4][1][1] + friends[5][0][1] + friends[5][1][1] + friends[6][0][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1] + friends[2][1][1] + friends[3][0][1] + friends[3][1][1] + friends[4][0][1] + friends[4][1][1] + friends[5][0][1] + friends[5][1][1] + friends[6][0][1] + friends[6][1][1] + friends[7][0][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1] + friends[2][1][1] + friends[3][0][1] + friends[3][1][1] + friends[4][0][1] + friends[4][1][1] + friends[5][0][1] + friends[5][1][1] + friends[6][0][1] + friends[6][1][1] + friends[7][0][1] + friends[7][1][1] + friends[8][0][1])\n    # print(friends[0][0][1] * 2 + friends[0][1][1] + friends[1][0][1] + friends[1][1][1] + friends[2][0][1] + friends[2][1][1] + friends[3][0][1] + friends[3][1][1] + friends[4][0][1] + friends[4][1][1] + friends[5][0][1] + friends[5][1][1] + friends[6][0][1] + friends[6][1][1] + friends[7][0][1] + friends[7][1][1] + friends[8][0][1] + friends[8][1]["
    },
    {
        "number": 3519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 3520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum distance the spacecraft can travel.\n\n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: Output string.\n    \"\"\"\n    # Get input\n    n = int(stdin.split('\\n')[0])\n    stars = []\n    for i in range(n):\n        stars.append(list(map(float, stdin.split('\\n')[i + 1].split())))\n\n    # Calculate the maximum distance\n    max_dist = 0\n    for star in stars:\n        max_dist += max(0, star[0] - star[1] * math.sin(star[2]))\n    return str(max_dist)\n"
    },
    {
        "number": 3522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    batteries = list(map(int, stdin.split('\\n')[1].split()))\n    batteries.sort()\n    batteries = batteries[:2 * k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batteries = batteries[:k]\n    batteries.sort()\n    batteries.reverse()\n    batter"
    },
    {
        "number": 3523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, N_1, N_5, N_10, N_25 = map(int, stdin.split())\n    if P % 5 == 0:\n        return str(P // 5)\n    if P % 10 == 0:\n        return str(P // 10)\n    if P % 25 == 0:\n        return str(P // 25)\n    if P % 5 == 0 and P % 10 == 0:\n        return str(P // 5 + P // 10)\n    if P % 5 == 0 and P % 25 == 0:\n        return str(P // 5 + P // 25)\n    if P % 10 == 0 and P % 25 == 0:\n        return str(P // 10 + P // 25)\n    if P % 5 == 0 and P % 10!= 0 and P % 25!= 0:\n        return str(P // 5 + P // 10 + P // 25)\n    if P % 5!= 0 and P % 10 == 0 and P % 25!= 0:\n        return str(P // 5 + P // 10 + P // 25)\n    if P % 5!= 0 and P % 10!= 0 and P % 25 == 0:\n        return str(P // 5 + P // 10 + P // 25)\n    if P % 5!= 0 and P % 10!= 0 and P % 25!= 0:\n        return str(P // 5 + P // 10 + P // 25)\n    return \"Impossible\""
    },
    {
        "number": 3524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s1 = stdin[:len(stdin)//2]\n    s2 = stdin[len(stdin)//2:]\n    s1_list = list(s1)\n    s2_list = list(s2)\n    s_list = list(s)\n    for i in range(len(s1_list)):\n        if s1_list[i] > s2_list[i]:\n            return \"no\"\n        for j in range(len(s1_list)):\n            if s1_list[i] > s2_list[j]:\n                return \"no\"\n    return \"yes\""
    },
    {
        "number": 3525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 3526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    hints = [list(map(int, stdin.split())) for _ in range(m)]\n    ans = 0\n    for i in range(1 << n):\n        ok = True\n        for j in range(m):\n            l, r = hints[j]\n            if (i >> (l - 1)) & 1!= (i >> (r - 1)) & 1:\n                ok = False\n                break\n        if ok:\n            ans += 1\n    return str(ans % (10 ** 9 + 7))\n"
    },
    {
        "number": 3527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 4\n   ... 0 1\n   ... 0 2\n   ... 3 4\n   ... 3 5''')\n    '3'\n    \"\"\"\n   ..."
    },
    {
        "number": 3528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 4\n   ... 2 2\n   ... 4 1\n   ... 3 5\n   ... 5 3\n   ... LUR''')\n    '9.0\\n6.5\\n2.5\\n'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\")\n    '1'\n    \"\"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        c, f, t = stdin.split()\n        edges.append((c, int(f), int(t)))\n    edges.sort(key=lambda x: x[1])\n    blue = 0\n    for c, f, t in edges:\n        if c == \"B\":\n            blue += 1\n        if blue == k:\n            return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 5 0 5\n   ... 7 0 7\n   ... 4\n   ... 88\n   ... 5\n   ... 6\n   ... 7\n   ... ''')\n    '88'\n    >>> solution('''2\n   ... 5 0 5\n   ... 7 0 7\n   ... 4\n   ... 88\n   ... 5\n   ... 6\n   ... 7\n   ... ''')\n    '5'\n    >>> solution('''2\n   ... 5 0 5\n   ... 7 0 7\n   ... 4\n   ... 88\n   ... 5\n   ... 6\n   ... 7\n   ... ''')\n    '5'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3 1 2\n   ... 2\n   ... 1 2 2\n   ... 1 3 1\n   ... 2 3 3''')\n    5\n    \"\"\"\n    n, m, k, w = map(int, stdin.split())\n    special = set(map(int, stdin.split()[1:]))\n    edges = defaultdict(list)\n    for _ in range(m):\n        a, b, c = map(int, stdin.split()[1:])\n        edges[a].append((b, c))\n        edges[b].append((a, c))\n    costs = [float('inf')] * n\n    costs[0] = 0\n    heap = [(0, 0)]\n    while heap:\n        cost, node = heappop(heap)\n        if cost > costs[node]:\n            continue\n        for nxt, nxt_cost in edges[node]:\n            if nxt in special:\n                if nxt_cost < costs[nxt]:\n                    costs[nxt] = nxt_cost\n                    heappush(heap, (nxt_cost, nxt))\n            else:\n                if nxt_cost < costs[nxt] + cost:\n                    costs[nxt] = nxt_cost + cost\n                    heappush(heap, (nxt_cost + cost, nxt))\n    return -1 if costs[n - 1] == float('inf') else costs[n - 1]\n"
    },
    {
        "number": 3532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    explosion = stdin\n    while True:\n        if explosion in string:\n            string = string.replace(explosion, \"\")\n        else:\n            break\n    return string"
    },
    {
        "number": 3533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 65\n   ... 45 10\n   ... 60 25''')\n    32\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N, M, K = [int(x) for x in stdin.split()]\n    # create a list of all possible coordinates\n    coords = [(i, j) for i in range(N) for j in range(M)]\n    # create a list of all possible spins\n    spins = [1, -1]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins for _ in range(N * M // 2)]\n    # create a list of all possible states\n    states = [spin for spin in spins"
    },
    {
        "number": 3536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 1000000000 0\n   ... 1 1000000000 1''')\n    '500000004'\n    \"\"\"\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    p = [int(x) for x in stdin.readline().split()]\n    b.sort()\n    p.sort()\n    b.append(0)\n    p.append(0)\n    b.append(1)\n    p.append(1)\n    b.append(10000000)\n    p.append(10000000)\n    b.append(100000000)\n    p.append(100000000)\n    b.append(10000000000)\n    p.append(10000000000)\n    b.append(100000000000)\n    p.append(100000000000)\n    b.append(1000000000000)\n    p.append(1000000000000)\n    b.append(10000000000000)\n    p.append(10000000000000)\n    b.append(100000000000000)\n    p.append(100000000000000)\n    b.append(1000000000000000)\n    p.append(1000000000000000)\n    b.append(100000000000000000)\n    p.append(100000000000000000)\n    b.append(1000000000000000000)\n    p.append(1000000000000000000)\n    b.append(10000000000000000000)\n    p.append(10000000000000000000)\n    b.append(100000000000000000000)\n    p.append(100000000000000000000)\n    b.append(1000000000000000000000)\n    p.append(1000000000000000000000)\n    b.append(10000000000000000000000)\n    p.append(10000000000000000000000)\n    b.append(100000000000000000000000)\n    p.append(100000000000000000000000)\n    b.append(10000000000000000000000000)\n    p.append(10000000000000000000000000)\n    b.append(100000000000000000000000000)\n    p.append(100000000000000000000000000)\n    b.append(1000000000000000000000000000)\n    p.append(1000000000000000000000000000)\n    b.append(10000000000000000000000000000)\n    p.append(10000000000000000000000000000)\n    b.append(100000000000000000000000000000)\n    p.append(100000000000000000000000000000)\n    b.append(1000000000000000000000000000000)\n    p.append(1000000000000000000000000000000)\n    b.append(10000000000000000000000000000000)\n    p.append(10000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000)\n    b.append(10000000000000000000000000000000000)\n    p.append(10000000000000000000000000000000000)\n    b.append(100000000000000000000000000000000000)\n    p.append(100000000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000000)\n    b.append(10000000000000000000000000000000000000)\n    p.append(10000000000000000000000000000000000000)\n    b.append(100000000000000000000000000000000000000)\n    p.append(100000000000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000000000)\n    b.append(100000000000000000000000000000000000000000)\n    p.append(100000000000000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000000000000)\n    b.append(10000000000000000000000000000000000000000000)\n    p.append(10000000000000000000000000000000000000000000)\n    b.append(100000000000000000000000000000000000000000000)\n    p.append(100000000000000000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000000000000000)\n    b.append(10000000000000000000000000000000000000000000000)\n    p.append(10000000000000000000000000000000000000000000000)\n    b.append(100000000000000000000000000000000000000000000000)\n    p.append(100000000000000000000000000000000000000000000000)\n    b.append(10000000000000000000000000000000000000000000000000)\n    p.append(10000000000000000000000000000000000000000000000000)\n    b.append(100000000000000000000000000000000000000000000000000)\n    p.append(100000000000000000000000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000000000000000000000)\n    b.append(10000000000000000000000000000000000000000000000000000)\n    p.append(10000000000000000000000000000000000000000000000000000)\n    b.append(100000000000000000000000000000000000000000000000000000)\n    p.append(100000000000000000000000000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000000000000000000000000)\n    b.append(10000000000000000000000000000000000000000000000000000000)\n    p.append(10000000000000000000000000000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000000000000000000000000000)\n    b.append(10000000000000000000000000000000000000000000000000000000000)\n    p.append(10000000000000000000000000000000000000000000000000000000000)\n    b.append(100000000000000000000000000000000000000000000000000000000000)\n    p.append(100000000000000000000000000000000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000000000000000000000000000000)\n    b.append(10000000000000000000000000000000000000000000000000000000000000)\n    p.append(10000000000000000000000000000000000000000000000000000000000000)\n    b.append(100000000000000000000000000000000000000000000000000000000000000)\n    p.append(100000000000000000000000000000000000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000000000000000000000000000000000)\n    b.append(100000000000000000000000000000000000000000000000000000000000000000)\n    p.append(100000000000000000000000000000000000000000000000000000000000000000)\n    b.append(1000000000000000000000000000000000000000000000000000000000000000000)\n    p.append(1000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "number": 3537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum frustration for a given set of flights.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: The minimum frustration\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    flights = []\n    for _ in range(m):\n        a, b, s, e = [int(x) for x in stdin.split()]\n        flights.append((a, b, s, e))\n    flights.sort(key=lambda x: x[2])\n    frustrations = [0] * m\n    frustrations[0] = 0\n    for i in range(1, m):\n        frustrations[i] = max(frustrations[i - 1], flights[i][2] - flights[i - 1][3])\n    return sum(frustrations)\n"
    },
    {
        "number": 3538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 19\n   ... 15 5 3\n   ... 12 4 4\n   ... 20 10 5''')\n    3\n    \"\"\"\n    n, d = map(int, stdin.split('\\n')[:2])\n    frogs = [tuple(map(int, stdin.split('\\n')[i].split())) for i in range(2, n + 2)]\n    frogs.sort(key=lambda x: x[0])\n    dp = [0] * (d + 1)\n    for l, w, h in frogs:\n        dp[l] = max(dp[l], dp[l - w] + 1)\n        for i in range(l - w, d + 1):\n            dp[i] = max(dp[i], dp[i - w] + 1)\n    return dp[d]\n"
    },
    {
        "number": 3539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '3'"
    },
    {
        "number": 3541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    return ''.join(sorted(['A' if x > 0 else 'B' for x in a]))"
    },
    {
        "number": 3542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 3\n   ... 2 3\n   ... 4 0\n   ... 0 2\n   ... 6 1\n   ... ''')\n    'IMPOSSIBLE'\n    >>> solution('''6 3\n   ... 2 3\n   ... 4 0\n   ... 0 2\n   ... 6 1\n   ... 2 2\n   ... ''')\n    '3'\n    >>> solution('''6 3\n   ... 2 3\n   ... 4 0\n   ... 0 2\n   ... 6 1\n   ... 2 2\n   ... 2 2\n   ... ''')\n    'IMPOSSIBLE'\n    \"\"\"\n   ..."
    },
    {
        "number": 3543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\")\n    '12\\n4\\n11\\n3\\n2\\n'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    d = dict()\n    for i in range(n):\n        d[stdin.split()[i]] = i\n    for i in range(m):\n        print(min(d[stdin.split()[i]] + 1, len(stdin.split()[i]) + 1))\n"
    },
    {
        "number": 3544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    if nums[-1] > 12:\n        return \"impossible\"\n    else:\n        return nums[-1]"
    },
    {
        "number": 3545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"HFBIGEDCJA\\nBIGEDCJFAH\\nBIGEDCJFAH\")\n    'Pre Post In Post In Pre'\n    \"\"\"\n    stdin = stdin.splitlines()\n    pre, in_, post = stdin\n    pre = pre.split()\n    in_ = in_.split()\n    post = post.split()\n    return \" \".join(\n        sorted(\n            [\n                \"Pre\" + \" \".join(pre),\n                \"In\" + \" \".join(in_),\n                \"Post\" + \" \".join(post),\n            ]\n        )\n    )\n"
    },
    {
        "number": 3546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\")\n    10\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    proofs = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    proofs.sort(key=lambda x: x[0])\n    proofs.sort(key=lambda x: x[1])\n    proofs.sort(key=lambda x: x[2])\n    proofs.sort(key=lambda x: x[3])\n    proofs.sort(key=lambda x: x[4])\n    proofs.sort(key=lambda x: x[5])\n    proofs.sort(key=lambda x: x[6])\n    proofs.sort(key=lambda x: x[7])\n    proofs.sort(key=lambda x: x[8])\n    proofs.sort(key=lambda x: x[9])\n    proofs.sort(key=lambda x: x[10])\n    proofs.sort(key=lambda x: x[11])\n    proofs.sort(key=lambda x: x[12])\n    proofs.sort(key=lambda x: x[13])\n    proofs.sort(key=lambda x: x[14])\n    proofs.sort(key=lambda x: x[15])\n    proofs.sort(key=lambda x: x[16])\n    proofs.sort(key=lambda x: x[17])\n    proofs.sort(key=lambda x: x[18])\n    proofs.sort(key=lambda x: x[19])\n    proofs.sort(key=lambda x: x[20])\n    proofs.sort(key=lambda x: x[21])\n    proofs.sort(key=lambda x: x[22])\n    proofs.sort(key=lambda x: x[23])\n    proofs.sort(key=lambda x: x[24])\n    proofs.sort(key=lambda x: x[25])\n    proofs.sort(key=lambda x: x[26])\n    proofs.sort(key=lambda x: x[27])\n    proofs.sort(key=lambda x: x[28])\n    proofs.sort(key=lambda x: x[29])\n    proofs.sort(key=lambda x: x[30])\n    proofs.sort(key=lambda x: x[31])\n    proofs.sort(key=lambda x: x[32])\n    proofs.sort(key=lambda x: x[33])\n    proofs.sort(key=lambda x: x[34])\n    proofs.sort(key=lambda x: x[35])\n    proofs.sort(key=lambda x: x[36])\n    proofs.sort(key=lambda x: x[37])\n    proofs.sort(key=lambda x: x[38])\n    proofs.sort(key=lambda x: x[39])\n    proofs.sort(key=lambda x: x[40])\n    proofs.sort(key=lambda x: x[41])\n    proofs.sort(key=lambda x: x[42])\n    proofs.sort(key=lambda x: x[43])\n    proofs.sort(key=lambda x: x[44])\n    proofs.sort(key=lambda x: x[45])\n    proofs.sort(key=lambda x: x[46])\n    proofs.sort(key=lambda x: x[47])\n    proofs.sort(key=lambda x: x[48])\n    proofs.sort(key=lambda x: x[49])\n    proofs.sort(key=lambda x: x[50])\n    proofs.sort(key=lambda x: x[51])\n    proofs.sort(key=lambda x: x[52])\n    proofs.sort(key=lambda x: x[53])\n    proofs.sort(key=lambda x: x[54])\n    proofs.sort(key=lambda x: x[55])\n    proofs.sort(key=lambda x: x[56])\n    proofs.sort(key=lambda x: x[57])\n    proofs.sort(key=lambda x: x[58])\n    proofs.sort(key=lambda x: x[59])\n    proofs.sort(key=lambda x: x[60])\n    proofs.sort(key=lambda x: x[61])\n    proofs.sort(key=lambda x: x[62])\n    proofs.sort(key=lambda x: x[63])\n    proofs.sort(key=lambda x: x[64])\n    proofs.sort(key=lambda x: x[65])\n    proofs.sort(key=lambda x: x[66])\n    proofs.sort(key=lambda x: x[67])\n    proofs.sort(key=lambda x: x[68])\n    proofs.sort(key=lambda x: x[69])\n    proofs.sort(key=lambda x: x[70])\n    proofs.sort(key=lambda x: x[71])\n    proofs.sort(key=lambda x: x[72])\n    proofs.sort(key=lambda x: x[73])\n    proofs.sort(key=lambda x: x[74])\n    proofs.sort(key=lambda x: x[75])\n    proofs.sort(key=lambda x: x[76])\n    proofs.sort(key=lambda x: x[77])\n    proofs.sort(key=lambda x: x[78])\n    proofs.sort(key=lambda x: x[79])\n    proofs.sort(key=lambda x: x[80])\n    proofs.sort(key=lambda x: x[81])\n    proofs.sort(key=lambda x: x[82])\n    proofs.sort(key=lambda x: x[83])\n    proofs.sort(key=lambda x: x[84])\n    proofs.sort(key=lambda x: x[85])\n    proofs.sort(key=lambda x: x[86])\n    proofs.sort(key=lambda x: x[87])\n    proofs.sort(key=lambda x: x[88])\n    proofs.sort(key=lambda x: x[89])\n    proofs.sort(key=lambda x: x[90])\n    proofs.sort(key=lambda x: x[91])\n    proofs.sort(key=lambda x: x[92])\n    proofs.sort(key=lambda x: x[93])\n    proofs.sort(key=lambda x: x[94])\n    proofs.sort(key=lambda x: x[95])\n    proofs.sort(key=lambda x: x[96])\n    proofs.sort(key=lambda x: x[97])\n    proofs."
    },
    {
        "number": 3547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    return str(round(sum(map(lambda x: (x[2] - x[0]) * (x[3] - x[1]), [map(float, line.split()) for line in stdin.split('\\n')[:-1]])), 2))\n"
    },
    {
        "number": 3548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 1 3\n   ... 4 5\n   ... 2 4\n   ... ''')\n    5\n    \"\"\"\n    N, P = [int(x) for x in stdin.split('\\n')[0].split()]\n    bad_pairs = set()\n    for _ in range(P):\n        a, b = [int(x) for x in stdin.split('\\n')[1].split()]\n        bad_pairs.add((a, b))\n        bad_pairs.add((b, a))\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad_pairs = list(bad_pairs)\n    bad_pairs.sort()\n    bad_pairs = [x[0] for x in bad_pairs]\n    bad_pairs = set(bad_pairs)\n    bad"
    },
    {
        "number": 3549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3, x1, x2, x3, y1, y2, y3 = [int(i) for i in stdin.split()]\n    return str(solve(m1, m2, m3, x1, x2, x3, y1, y2, y3))\n\n\ndef"
    },
    {
        "number": 3550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\")\n    My name is Gon\n    My name is Gon\n    \"\"\"\n   ..."
    },
    {
        "number": 3551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 7 8\n   ... 10''')\n    'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0'\n    \"\"\"\n   ..."
    },
    {
        "number": 3552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return n * (m + 1) + (n - 1) * (k + 1) * (m - 1) // 2"
    },
    {
        "number": 3553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    for _ in range(m):\n        q = stdin.split()\n        if q[0] == '1':\n            arr[int(q[1]) - 1] = int(q[2])\n        else:\n            print(min([arr[i:j].count(1) for i in range(n) for j in range(i + 1, n + 1) if arr[i:j].count(1) == k] or [-1]))\n"
    },
    {
        "number": 3554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, W, C = map(int, stdin.split())\n    return str(round(W / (D * 2) * C, 7))"
    },
    {
        "number": 3555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\")\n    '123457 0\\n0 2\\n123458 1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    employees = {}\n    for _ in range(n):\n        id_, salary, height = map(int, stdin.split())\n        employees[id_] = (salary, height)\n    for _ in range(m):\n        id_ = int(stdin)\n        if id_ == 0:\n            print(0)\n        else:\n            print(employees[id_][0], 0)\n            for id_ in employees:\n                if id_ == id_:\n                    continue\n                if employees[id_][1] < employees[id_][1]:\n                    print(id_, 1)\n"
    },
    {
        "number": 3557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    perm = [int(x) for x in stdin.readline().split()]\n    chaos = 0\n    for i in range(n):\n        chaos += (i + 1) * (p[i] // 10)\n    for i in range(n):\n        chaos += p[perm[i] - 1]\n    return chaos"
    },
    {
        "number": 3558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('.\\n..\\n..\\n1.\\n..\\n..\\n2.\\n..\\n..\\n3.\\n..\\n..\\n4.\\n..\\n..\\n5.\\n..\\n..\\n6.\\n..\\n..\\n7.\\n..\\n..\\n8.\\n..\\n..\\n9.\\n..\\n..\\n10.\\n..\\n..\\n11.\\n..\\n..\\n12.\\n..\\n..\\n13.\\n..\\n..\\n14.\\n..\\n..\\n15.\\n..\\n..\\n16.\\n..\\n..\\n17.\\n..\\n..\\n18.\\n..\\n..\\n19.\\n..\\n..\\n20.\\n..\\n..\\n21.\\n..\\n..\\n22.\\n..\\n..\\n23.\\n..\\n..\\n24.\\n..\\n..\\n25.\\n..\\n..\\n26.\\n..\\n..\\n27.\\n..\\n..\\n28.\\n..\\n..\\n29.\\n..\\n..\\n30.\\n..\\n..\\n31.\\n..\\n..\\n32.\\n..\\n..\\n33.\\n..\\n..\\n34.\\n..\\n..\\n35.\\n..\\n..\\n36.\\n..\\n..\\n37.\\n..\\n..\\n38.\\n..\\n..\\n39.\\n..\\n..\\n40.\\n..\\n..\\n41.\\n..\\n..\\n42.\\n..\\n..\\n43.\\n..\\n..\\n44.\\n..\\n..\\n45.\\n..\\n..\\n46.\\n..\\n..\\n47.\\n..\\n..\\n48.\\n..\\n..\\n49.\\n..\\n..\\n50.\\n..\\n..\\n51.\\n..\\n..\\n52.\\n..\\n..\\n53.\\n..\\n..\\n54.\\n..\\n..\\n55.\\n..\\n..\\n56.\\n..\\n..\\n57.\\n..\\n..\\n58.\\n..\\n..\\n59.\\n..\\n..\\n60.\\n..\\n..\\n61.\\n..\\n..\\n62.\\n..\\n..\\n63.\\n..\\n..\\n64.\\n..\\n..\\n65.\\n..\\n..\\n66.\\n..\\n..\\n67.\\n..\\n..\\n68.\\n..\\n..\\n69.\\n..\\n..\\n70.\\n..\\n..\\n71.\\n..\\n..\\n72.\\n..\\n..\\n73.\\n..\\n..\\n74.\\n..\\n..\\n75.\\n..\\n..\\n76.\\n..\\n..\\n77.\\n..\\n..\\n78.\\n..\\n..\\n79.\\n..\\n..\\n80.\\n..\\n..\\n81.\\n..\\n..\\n82.\\n..\\n..\\n83.\\n..\\n..\\n84.\\n..\\n..\\n85.\\n..\\n..\\n86.\\n..\\n..\\n87.\\n..\\n..\\n88.\\n..\\n..\\n89.\\n..\\n..\\n90.\\n..\\n..\\n91.\\n..\\n..\\n92.\\n..\\n..\\n93.\\n..\\n..\\n94.\\n..\\n..\\n95.\\n..\\n..\\n96.\\n..\\n..\\n97.\\n..\\n..\\n98.\\n..\\n..\\n99.\\n..\\n..\\n100.\\n..\\n..\\n101.\\n..\\n..\\n102.\\n..\\n..\\n103.\\n..\\n..\\n104.\\n..\\n..\\n105.\\n..\\n..\\n106.\\n..\\n..\\n107.\\n..\\n..\\n108"
    },
    {
        "number": 3560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... a\n   ... bc\n   ... abc\n   ... 3\n   ... 1 abca\n   ... 2 1\n   ... 2 3''')\n    '1'\n    >>> solution('''3\n   ... a\n   ... bc\n   ... abc\n   ... 3\n   ... 1 abca\n   ... 2 1\n   ... 2 3''')\n    '1'\n    >>> solution('''3\n   ... a\n   ... bc\n   ... abc\n   ... 3\n   ... 1 abca\n   ... 2 1\n   ... 2 3''')\n    '1'\n    \"\"\"\n    n = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(n)]\n    q = int(stdin.readline())\n    t = [int(stdin.readline()) for _ in range(q)]\n    return '\\n'.join(map(lambda x: '1' if x == 2 else '0', t))\n"
    },
    {
        "number": 3561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, s, c, k = map(int, stdin.split())\n    if w + s + c <= k:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 3562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    A = [list(map(float, stdin.split())) for _ in range(N)]\n    A.sort(key=lambda x: x[2])\n    A.sort(key=lambda x: x[1])\n    A.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(N):\n        ans += A[i][0] * A[i][1] * A[i][2]\n    return str(ans / T)"
    },
    {
        "number": 3563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    holes = [int(x) for x in stdin.readline().split()]\n    holes.sort()\n    return str(n - len(set(holes)))"
    },
    {
        "number": 3564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2 3\n   ... 0 0 400\n   ... 1000 0 400\n   ... 2000 0 400\n   ... 300 0 150\n   ... 1300 0 150''')\n    '1400'\n    \"\"\"\n   ..."
    },
    {
        "number": 3565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[0].split())\n    huts = list(map(int, stdin.split('\\n')[1].split()))\n    for _ in range(q):\n        i, x = map(int, stdin.split('\\n')[2 + _].split())\n        huts[i] = x\n    huts.sort()\n    print(huts)\n    return ''\n"
    },
    {
        "number": 3567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    characters = [list(map(int, stdin.split())) for _ in range(n)]\n    characters.sort(key=lambda x: sum(x))\n    return ''.join(map(str, characters[0]))"
    },
    {
        "number": 3568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n6 2\\n0 4\\n6 12\")\n    'possible'\n    \"\"\"\n   ..."
    },
    {
        "number": 3569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... E business_as_usual\n   ... E bobby_dies\n   ... S 1 bobby_died\n   ... E stuff_happens\n   ... E jr_does_bad_things\n   ... S 2!bobby_dies business_as_usual\n   ... E it_goes_on_and_on\n   ... D 4\n   ... S 1!bobby_dies\n   ... S 2!bobby_dies it_goes_on_and_on\n   ... ''')\n    'Plot Error'\n    >>> solution('''10\n   ... E business_as_usual\n   ... E bobby_dies\n   ... S 1 bobby_died\n   ... E stuff_happens\n   ... E jr_does_bad_things\n   ... S 2!bobby_dies business_as_usual\n   ... E it_goes_on_and_on\n   ... D 4\n   ... S 1!bobby_dies\n   ... S 2!bobby_dies it_goes_on_and_on\n   ... S 3!bobby_dies business_as_usual\n   ... ''')\n    '3 Just A Dream'\n    >>> solution('''10\n   ... E business_as_usual\n   ... E bobby_dies\n   ... S 1 bobby_died\n   ... E stuff_happens\n   ... E jr_does_bad_things\n   ... S 2!bobby_dies business_as_usual\n   ... E it_goes_on_and_on\n   ... D 4\n   ... S 1!bobby_dies\n   ... S 2!bobby_dies it_goes_on_and_on\n   ... S 3!bobby_dies business_as_usual\n   ... S 4!bobby_dies it_goes_on_and_on\n   ... ''')\n    'Yes'\n    \"\"\"\n    events, dreams, scenarios = stdin.split('\\n\\n')\n    events = events.split('\\n')\n    dreams = dreams.split('\\n')\n    scenarios = scenarios.split('\\n')\n    events = [event.split(' ')[1] for event in events]\n    dreams = [int(dream.split(' ')[1]) for dream in dreams]\n    scenarios = [scenario.split(' ')[1:] for scenario in scenarios]\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = [scenario for scenario in scenarios if scenario[0]!= '!']\n    scenarios = ["
    },
    {
        "number": 3571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 3572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = [int(x) for x in stdin.split()]\n    d = [[int(x) for x in stdin.split()] for _ in range(n)]\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x"
    },
    {
        "number": 3573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, C = [int(x) for x in stdin.split()]\n    Cesar, Raul = [int(x) for x in stdin.split()]\n    return str(round(sum(1 / D for i in range(C)) / (C / (C - 1))))"
    },
    {
        "number": 3574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the problem\"\"\"\n    # Get the input\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    q = int(stdin.readline())\n    # Get the answer\n    ans = []\n    for _ in range(q):\n        l, r = [int(x) for x in stdin.readline().split()]\n        ans.append(max(a[l - 1:r]))\n    # Return the answer\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 3575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n0 1\\n1 2\\n0 2\")\n    'never meet'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    neighbours = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:-1]]\n    s, t = map(int, stdin.split()[-2:])\n    neighbours = [neighbours[i] for i in range(m) if neighbours[i][0] == s or neighbours[i][1] == s]\n    neighbours = [neighbours[i] for i in range(m) if neighbours[i][0] == t or neighbours[i][1] == t]\n    neighbours = set(neighbours)\n    if len(neighbours) == 0:\n        return \"never meet\"\n    elif len(neighbours) == 1:\n        return str(neighbours.pop())\n    else:\n        return \"never meet\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 4 2\n   ... ''')\n    '14500000001'\n    \"\"\"\n    R, C, K = [int(x) for x in stdin.split()]\n    return str(int(1e11 + 3) * (1e11 + 3) ** -1 * (1e11 + 3) // (1e11 + 3 + R * C * K))\n"
    },
    {
        "number": 3577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 4\n   ... 3 7\n   ... 1 6\n   ... 2 6''')\n    '0\\n1\\n1\\n2'\n    \"\"\"\n   ..."
    },
    {
        "number": 3578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 1 2 1000\n   ... 2 3 1000\n   ... 4 5 500\n   ... 2\n   ... 1 4 300\n   ... 3 5 300''')\n    '3100'\n    \"\"\"\n    n, r, f = map(int, stdin.split())\n    flights = [tuple(map(int, line.split())) for line in stdin.split('\\n')[r:]]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:f]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights = flights[:n]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[0])\n    flights."
    },
    {
        "number": 3579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the longest consecutive subsequence of a given sequence that contains only integers from a given set.\n\n    Args:\n        stdin (str): Input string to process.\n\n    Returns:\n        str: String representation of the longest consecutive subsequence.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    sequence = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    q = int(stdin.split('\\n')[2])\n    for _ in range(q):\n        i, m = [int(i) for i in stdin.split('\\n')[3 + _].split(' ')]\n        b = [int(i) for i in stdin.split('\\n')[4 + _].split(' ')]\n        b = set(b)\n        longest = 0\n        for j in range(i, n):\n            if sequence[j] in b:\n                longest = max(longest, j - i + 1)\n            else:\n                break\n        print(longest)\n"
    },
    {
        "number": 3581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the expected value from playing one game.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Output to stdout.\n    \"\"\"\n    # Get the number of rows.\n    rows = int(stdin.split(\"\\n\")[0])\n    # Get the payouts.\n    payouts = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    # Get the probabilities.\n    probs = [float(x) for x in stdin.split(\"\\n\")[2].split(\" \")]\n    # Get the number of times the ball has bounced.\n    bounces = int(stdin.split(\"\\n\")[3])\n    # Get the number of times the ball has fallen into a hole.\n    holes = int(stdin.split(\"\\n\")[4])\n    # Get the number of times the ball has fallen into a hole.\n    fallen = int(stdin.split(\"\\n\")[5])\n    # Get the number of times the ball has fallen into a hole.\n    bounces_left = int(stdin.split(\"\\n\")[6])\n    # Get the number of times the ball has fallen into a hole.\n    holes_left = int(stdin.split(\"\\n\")[7])\n    # Get the number of times the ball has fallen into a hole.\n    fallen_left = int(stdin.split(\"\\n\")[8])\n    # Get the number of times the ball has fallen into a hole.\n    bounces_right = int(stdin.split(\"\\n\")[9])\n    # Get the number of times the ball has fallen into a hole.\n    holes_right = int(stdin.split(\"\\n\")[10])\n    # Get the number of times the ball has fallen into a hole.\n    fallen_right = int(stdin.split(\"\\n\")[11])\n    # Get the number of times the ball has fallen into a hole.\n    bounces_top = int(stdin.split(\"\\n\")[12])\n    # Get the number of times the ball has fallen into a hole.\n    holes_top = int(stdin.split(\"\\n\")[13])\n    # Get the number of times the ball has fallen into a hole.\n    fallen_top = int(stdin.split(\"\\n\")[14])\n    # Get the number of times the ball has fallen into a hole.\n    bounces_bottom = int(stdin.split(\"\\n\")[15])\n    # Get the number of times the ball has fallen into a hole.\n    holes_bottom = int(stdin.split(\"\\n\")[16])\n    # Get the number of times the ball has fallen into a hole.\n    fallen_bottom = int(stdin.split(\"\\n\")[17])\n    # Get the number of times the ball has fallen into a hole.\n    bounces_top_left = int(stdin.split(\"\\n\")[18])\n    # Get the number of times the ball has fallen into a hole.\n    holes_top_left = int(stdin.split(\"\\n\")[19])\n    # Get the number of times the ball has fallen into a hole.\n    fallen_top_left = int(stdin.split(\"\\n\")[20])\n    # Get the number of times the ball has fallen into a hole.\n    bounces_top_right = int(stdin.split(\"\\n\")[21])\n    # Get the number of times the ball has fallen into a hole.\n    holes_top_right = int(stdin.split(\"\\n\")[22])\n    # Get the number of times the ball has fallen into a hole.\n    fallen_top_right = int(stdin.split(\"\\n\")[23])\n    # Get the number of times the ball has fallen into a hole.\n    bounces_bottom_left = int(stdin.split(\"\\n\")[24])\n    # Get the number of times the ball has fallen into a hole.\n    holes_bottom_left = int(stdin.split(\"\\n\")[25])\n    # Get the number of times the ball has fallen into a hole.\n    fallen_bottom_left = int(stdin.split(\"\\n\")[26])\n    # Get the number of times the ball has fallen into a hole.\n    bounces_bottom_right = int(stdin.split(\"\\n\")[27])\n    # Get the number of times the ball has fallen into a hole.\n    holes_bottom_right = int(stdin.split(\"\\n\")[28])\n    # Get the number of times the ball has fallen into a hole.\n    fallen_bottom_right = int(stdin.split(\"\\n\")[29])\n    # Get the number of times the ball has fallen into a hole.\n    bounces_top_left_right = int(stdin.split"
    },
    {
        "number": 3582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 1 4 3\n   ... ''')\n    '2 3 4 1'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    mentors = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    mentees = [i for i in range(1, n + 1)]\n    mentees_copy = mentees.copy()\n    for mentor in mentors:\n        mentees_copy.remove(mentor)\n    mentees_copy.sort()\n    mentees_copy.reverse()\n    mentees_copy.append(mentees[0])\n    return''.join([str(i) for i in mentees_copy])\n"
    },
    {
        "number": 3583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\")\n    '7.656854249492381'\n    \"\"\"\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin]\n    points.sort()\n    max_circum = 0\n    for i in range(n):\n        x1, y1 = points[i]\n        x2, y2 = points[(i + 1) % n]\n        x3, y3 = points[(i + 2) % n]\n        x4, y4 = points[(i + 3) % n]\n        x5, y5 = points[(i + 4) % n]\n        x6, y6 = points[(i + 5) % n]\n        a = (x1 * y2 + x2 * y3 + x3 * y4 + x4 * y5 + x5 * y6 + x6 * y1) / 2\n        b = (\n            math.sqrt(3) * (x1 * y2 + x2 * y3 + x3 * y4 + x4 * y5 + x5 * y6 + x6 * y1)\n        ) / 2\n        max_circum = max(max_circum, a, b)\n    return f\"{max_circum:.3f}\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    return str(m * k * (k - 1) // 2)"
    },
    {
        "number": 3586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2\n   ... 3\n   ... 5\n   ... 7\n   ... 12\n   ... ''')\n    12\n    \"\"\"\n    n = int(stdin.readline())\n    s = set(map(int, stdin.readlines()))\n    s = sorted(s)\n    for i in range(len(s) - 2):\n        for j in range(i + 1, len(s) - 1):\n            for k in range(j + 1, len(s)):\n                if s[i] + s[j] + s[k] == 0:\n                    return str(s[i] + s[j] + s[k])\n    return 'no solution'\n"
    },
    {
        "number": 3587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 00\n   ... 01\n   ... 10\n   ... 110\n   ... 111''')\n    11\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2\n   ... 20 100\n   ... 100 10\n   ... 1\n   ... 150 50\n   ... 1\n   ... 150 100\n   ... ''')\n    '100 250 320'\n    \"\"\"\n   ..."
    },
    {
        "number": 3589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = [int(x) for x in stdin.split()]\n    counts = [0] * 10\n    for x in range(L, R + 1):\n        while x > 0:\n            counts[x % 10] += 1\n            x //= 10\n    return''.join(str(x) for x in counts)"
    },
    {
        "number": 3590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 0\n   ... 0 14\n   ... 15 14\n   ... 15 0\n   ... 4\n   ... 8 3\n   ... 4 6\n   ... 7 10\n   ... 11 7\n   ... ''')\n    40.0\n    \"\"\"\n   ..."
    },
    {
        "number": 3591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"725.85 1.71 2.38\")\n    '199 162'\n    \"\"\"\n    profit = stdin.split()\n    profit = [float(i) for i in profit]\n    pita = 0\n    pizza = 0\n    for i in range(len(profit)):\n        if i % 2 == 0:\n            pita += profit[i]\n        else:\n            pizza += profit[i]\n    if pita == pizza:\n        return \"none\"\n    elif pita > pizza:\n        return str(pita) + \" \" + str(pizza)\n    else:\n        return str(pita) + \" \" + str(pizza)\n"
    },
    {
        "number": 3593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\nO 4\\n\")\n    '2 1 4'\n    \"\"\"\n    n = int(stdin)\n    scores = [0, 0, 0]\n    for i in range(n):\n        player, score = stdin.split()\n        score = int(score)\n        if player == \"O\":\n            scores[0] += score\n        elif player == \"E\":\n            scores[1] += score\n        else:\n            scores[2] += score\n    return \" \".join(map(str, scores))\n"
    },
    {
        "number": 3595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 8\n   ... 2 1 4 5\n   ... 5 1 12 4\n   ... 5 5 9 10\n   ... 1 6 4 10\n   ... 2 11 7 14''')\n    '4'\n    \"\"\"\n   ..."
    },
    {
        "number": 3596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, t1, t2, t3, t4, n, k, r, s, l = map(int, stdin.split('\\n')[0].split())\n    x = np.linspace(a, b, 1000)\n    y = np.sqrt(t2) * np.log(np.erf(x * t3)) - np.cos(k * np.pi * x * np.sin(np.pi * x)) * np.exp(-t4 * x * x)\n    y = y / np.pi\n    y = y / np.exp(1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y = y / np.sqrt(t1)\n    y"
    },
    {
        "number": 3597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 3598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = [int(x) for x in stdin.readline().split()]\n    m.sort()\n    m.reverse()\n    return ''.join([str(x) for x in m])"
    },
    {
        "number": 3599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, N = map(int, stdin.split())\n    breaks = list(map(int, stdin.split()))\n    breaks.sort()\n    breaks.append(T)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)\n    breaks.insert(0, 0)\n    breaks.pop(0)\n    breaks.pop()\n    breaks.append(0)"
    },
    {
        "number": 3600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 7\n   ... 2 2 4\n   ... 3 1 3 5\n   ... 1 2\n   ... 2 1 5\n   ... 4 2 6 4 7\n   ... 2 5 7\n   ... 2 6 5''')\n    'impossible'\n    >>> solution('''4\n   ... 7\n   ... 2 2 4\n   ... 3 1 3 5\n   ... 1 2\n   ... 2 1 5\n   ... 4 2 6 4 7\n   ... 2 5 7\n   ... 2 6 5''')\n    'possible'\n    \"\"\"\n   ..."
    },
    {
        "number": 3601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(result)\n"
    },
    {
        "number": 3602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    n, r, k = [int(x) for x in stdin.split()]\n    lamps = []\n    for _ in range(k):\n        i, j = [int(x) for x in stdin.split()]\n        lamps.append((i, j))\n    lamps = set(lamps)\n    # print(lamps)\n    # print(n, r, k)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print(lamps)\n    # print("
    },
    {
        "number": 3603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6\n   ... 0 1\n   ... 0 2\n   ... 1 3\n   ... 2 3\n   ... 1 2\n   ... 4 3''')\n    '5 3\\n1 0\\n2 4'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    translators = [list(map(int, stdin.split())) for _ in range(m)]\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda x: x[0])\n    translators.sort(key=lambda x: x[1])\n    translators = [list(x) for x in translators]\n    translators = [tuple(x) for x in translators]\n    translators = list(set(translators))\n    translators.sort(key=lambda"
    },
    {
        "number": 3604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, d = [int(x) for x in stdin.split('\\n')[0].split()]\n    sensors = []\n    for i in range(n):\n        sensors.append([int(x) for x in stdin.split('\\n')[i+1].split()])\n\n    # find the largest subset\n    sensors.sort(key=lambda x: x[0])\n    sensors.sort(key=lambda x: x[1])\n    sensors.sort(key=lambda x: x[0] + x[1])\n    sensors.sort(key=lambda x: x[0] - x[1])\n    sensors.sort(key=lambda x: x[1] - x[0])\n    sensors.sort(key=lambda x: x[0] * x[1])\n    sensors.sort(key=lambda x: x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    sensors.sort(key=lambda x: x[0] * x[0] - x[1] * x[1])\n    sensors.sort(key"
    },
    {
        "number": 3605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n    arr.sort()\n    min_diff = 100\n    for i in range(k - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return str(min_diff)\n"
    },
    {
        "number": 3606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 5\n   ... ACDBB\n   ... 5 6\n   ... 8 9\n   ... 4 13\n   ... 1 10\n   ... 7 4\n   ... 10 9\n   ... 3 7''')\n    '7 4'\n    \"\"\"\n   ..."
    },
    {
        "number": 3607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\")\n    HELLO THERE 1\n    HELLO THERE 2\n    HELLO THERE 3\n    HELLO THERE 4\n    HELLO THERE 5\n    DONE\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 1\n   ... 0 1\n   ... ''')\n    '3'\n    \"\"\"\n    N = int(stdin.readline())\n    tasks = [int(x) for x in stdin.readline().split()]\n    tasks_diff = [0] * (N + 1)\n    for i in range(N):\n        tasks_diff[i + 1] = tasks_diff[i] + tasks[i]\n    tasks_diff[0] = 0\n    tasks_diff[1] = 0\n    tasks_diff[2] = 1\n    tasks_diff[3] = 1\n    tasks_diff[4] = 2\n    tasks_diff[5] = 2\n    tasks_diff[6] = 3\n    tasks_diff[7] = 3\n    tasks_diff[8] = 4\n    tasks_diff[9] = 4\n    tasks_diff[10] = 5\n    tasks_diff[11] = 5\n    tasks_diff[12] = 6\n    tasks_diff[13] = 6\n    tasks_diff[14] = 7\n    tasks_diff[15] = 7\n    tasks_diff[16] = 8\n    tasks_diff[17] = 8\n    tasks_diff[18] = 9\n    tasks_diff[19] = 9\n    tasks_diff[20] = 10\n    tasks_diff[21] = 10\n    tasks_diff[22] = 11\n    tasks_diff[23] = 11\n    tasks_diff[24] = 12\n    tasks_diff[25] = 12\n    tasks_diff[26] = 13\n    tasks_diff[27] = 13\n    tasks_diff[28] = 14\n    tasks_diff[29] = 14\n    tasks_diff[30] = 15\n    tasks_diff[31] = 15\n    tasks_diff[32] = 16\n    tasks_diff[33] = 16\n    tasks_diff[34] = 17\n    tasks_diff[35] = 17\n    tasks_diff[36] = 18\n    tasks_diff[37] = 18\n    tasks_diff[38] = 19\n    tasks_diff[39] = 19\n    tasks_diff[40] = 20\n    tasks_diff[41] = 20\n    tasks_diff[42] = 21\n    tasks_diff[43] = 21\n    tasks_diff[44] = 22\n    tasks_diff[45] = 22\n    tasks_diff[46] = 23\n    tasks_diff[47] = 23\n    tasks_diff[48] = 24\n    tasks_diff[49] = 24\n    tasks_diff[50] = 25\n    tasks_diff[51] = 25\n    tasks_diff[52] = 26\n    tasks_diff[53] = 26\n    tasks_diff[54] = 27\n    tasks_diff[55] = 27\n    tasks_diff[56] = 28\n    tasks_diff[57] = 28\n    tasks_diff[58] = 29\n    tasks_diff[59] = 29\n    tasks_diff[60] = 30\n    tasks_diff[61] = 30\n    tasks_diff[62] = 31\n    tasks_diff[63] = 31\n    tasks_diff[64] = 32\n    tasks_diff[65] = 32\n    tasks_diff[66] = 33\n    tasks_diff[67] = 33\n    tasks_diff[68] = 34\n    tasks_diff[69] = 34\n    tasks_diff[70] = 35\n    tasks_diff[71] = 35\n    tasks_diff[72] = 36\n    tasks_diff[73] = 36\n    tasks_diff[74] = 37\n    tasks_diff[75] = 37\n    tasks_diff[76] = 38\n    tasks_diff[77] = 38\n    tasks_diff[78] = 39\n    tasks_diff[79] = 39\n    tasks_diff[80] = 40\n    tasks_diff[81] = 40\n    tasks_diff[82] = 41\n    tasks_diff[83] = 41\n    tasks_diff[84] = 42\n    tasks_diff[85] = 42\n    tasks_diff[86] = 43\n    tasks_diff[87] = 43\n    tasks_diff[88] = 44\n    tasks_diff[89] = 44\n    tasks_diff[90] = 45\n    tasks_diff[91] = 45\n    tasks_diff[92] = 46\n    tasks_diff[93] = 46\n    tasks_diff[94] = 47\n    tasks_diff[95] = 47\n    tasks_diff[96] = 48\n    tasks_diff[97] = 48\n    tasks_diff[98] = 49\n    tasks_diff[99] = 49\n    tasks_diff[100] = 50\n    tasks_diff[101] = 50\n    tasks_diff[102] = 51\n    tasks_diff[103] = 51\n    tasks_diff[104] = 52\n    tasks_diff[105] = 52\n    tasks_diff[106] = 53\n    tasks_diff[107] = 53\n    tasks_diff[108] = 54\n    tasks_diff[109] = 54\n    tasks_diff[110] = 55\n    tasks_diff[111] = 55\n    tasks_diff[112] = 56\n    tasks_diff[113] = 56\n    tasks_diff[114] = 57\n    tasks_diff[115] = 57\n    tasks_diff[116] = 58\n    tasks_diff[117] = 58\n    tasks_diff[118] = 59\n    tasks_diff[119] = 59\n    tasks_diff[120] = 60\n    tasks_diff[121] = 60\n    tasks_diff[122] = 61\n    tasks_diff[123] = 61\n    tasks_diff[124] = 62\n    tasks_diff[125] = 62\n    tasks_diff[126] = 63\n    tasks_diff[127] = 63\n    tasks_diff[128] = 64\n    tasks_diff[129] = 64\n    tasks_diff[130] = 65\n    tasks_diff[131] = 65\n    tasks_diff[132] = 66\n    tasks_diff[133] = 66\n    tasks_diff[134] = 67\n    tasks_diff[135] = 67\n    tasks_diff[136] = 68\n    tasks_diff[137] = 68\n    tasks_diff[138] = 69\n    tasks_diff[139] = 69\n    tasks"
    },
    {
        "number": 3609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n        edges.append((v, u))\n    edges.sort()\n    left = []\n    right = []\n    for u, v in edges:\n        if u < v:\n            left.append(u)\n            right.append(v)\n        else:\n            left.append(v)\n            right.append(u)\n    left.sort()\n    right.sort()\n    if left == right:\n        return \"LLRRRRLL\"\n    return \"impossible\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1009 2011\\n1017 2011\")\n    '1\\n2011'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4\n   ... 0 1 100\n   ... 0 2 100\n   ... 1 3 100\n   ... 2 3 100\n   ... 0 3\n   ... ''')\n    '0 3'\n    \"\"\"\n   ..."
    },
    {
        "number": 3612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2.0 10.0\n   ... 3 3 0 0\n   ... 2001 1000 100\n   ... 1001 10000 200\n   ... 100 0 0''')\n    '20'\n    \"\"\"\n   ..."
    },
    {
        "number": 3613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 1\n   ... 1 2 3 4\n   ... 2 3 4 5\n   ... 3 4 5 6\n   ... 4 5 6 7\n   ... ''')\n    4\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    r, c = map(int, stdin.split('\\n')[1].split(' '))\n    flowers = [list(map(int, stdin.split('\\n')[i + 1].split(' '))) for i in range(n)]\n    dp = [[0] * n for _ in range(n)]\n    dp[r][c] = 1\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] == 0:\n                continue\n            for k in range(n):\n                if abs(i - k) + abs(j - k) > 1:\n                    continue\n                if dp[k][j] == 0:\n                    dp[k][j] = dp[i][j] + 1\n                elif dp[k][j] < dp[i][j] + 1:\n                    dp[k][j] = dp[i][j] + 1\n    return max(max(row) for row in dp)\n"
    },
    {
        "number": 3615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1.0 1.0\n   ... 3.1 1.0\n   ... 1.0 3.1\n   ... 3.1 3.1\n   ... 4.2 3.1''')\n    6\n    \"\"\"\n   ..."
    },
    {
        "number": 3616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a, b, c, t0 = map(int, stdin.split())\n    t1 = (a * t0 + b) % c\n    t2 = (a * t1 + b) % c\n    t3 = (a * t2 + b) % c\n    t4 = (a * t3 + b) % c\n    t5 = (a * t4 + b) % c\n    t6 = (a * t5 + b) % c\n    t7 = (a * t6 + b) % c\n    t8 = (a * t7 + b) % c\n    t9 = (a * t8 + b) % c\n    t10 = (a * t9 + b) % c\n    t11 = (a * t10 + b) % c\n    t12 = (a * t11 + b) % c\n    t13 = (a * t12 + b) % c\n    t14 = (a * t13 + b) % c\n    t15 = (a * t14 + b) % c\n    t16 = (a * t15 + b) % c\n    t17 = (a * t16 + b) % c\n    t18 = (a * t17 + b) % c\n    t19 = (a * t18 + b) % c\n    t20 = (a * t19 + b) % c\n    t21 = (a * t20 + b) % c\n    t22 = (a * t21 + b) % c\n    t23 = (a * t22 + b) % c\n    t24 = (a * t23 + b) % c\n    t25 = (a * t24 + b) % c\n    t26 = (a * t25 + b) % c\n    t27 = (a * t26 + b) % c\n    t28 = (a * t27 + b) % c\n    t29 = (a * t28 + b) % c\n    t30 = (a * t29 + b) % c\n    t31 = (a * t30 + b) % c\n    t32 = (a * t31 + b) % c\n    t33 = (a * t32 + b) % c\n    t34 = (a * t33 + b) % c\n    t35 = (a * t34 + b) % c\n    t36 = (a * t35 + b) % c\n    t37 = (a * t36 + b) % c\n    t38 = (a * t37 + b) % c\n    t39 = (a * t38 + b) % c\n    t40 = (a * t39 + b) % c\n    t41 = (a * t40 + b) % c\n    t42 = (a * t41 + b) % c\n    t43 = (a * t42 + b) % c\n    t44 = (a * t43 + b) % c\n    t45 = (a * t44 + b) % c\n    t46 = (a * t45 + b) % c\n    t47 = (a * t46 + b) % c\n    t48 = (a * t47 + b) % c\n    t49 = (a * t48 + b) % c\n    t50 = (a * t49 + b) % c\n    t51 = (a * t50 + b) % c\n    t52 = (a * t51 + b) % c\n    t53 = (a * t52 + b) % c\n    t54 = (a * t53 + b) % c\n    t55 = (a * t54 + b) % c\n    t56 = (a * t55 + b) % c\n    t57 = (a * t56 + b) % c\n    t58 = (a * t57 + b) % c\n    t59 = (a * t58 + b) % c\n    t60 = (a * t59 + b) % c\n    t61 = (a * t60 + b) % c\n    t62 = (a * t61 + b) % c\n    t63 = (a * t62 + b) % c\n    t64 = (a * t63 + b) % c\n    t65 = (a * t64 + b) % c\n    t66 = (a * t65 + b) % c\n    t67 = (a * t66 + b) % c\n    t68 = (a * t67 + b) % c\n    t69 = (a * t68 + b) % c\n    t70 = (a * t69 + b) % c\n    t71 = (a * t70 + b) % c\n    t72 = (a * t71 + b) % c\n    t73 = (a * t72 + b) % c\n    t74 = (a * t73 + b) % c\n    t75 = (a * t74 + b) % c\n    t76 = (a * t75 + b) % c\n    t77 = (a * t76 + b) % c\n    t78 = (a * t77 + b) % c\n    t79 = (a * t78 + b) % c\n    t80 = (a * t79 + b) % c\n    t81 = (a * t80 + b) % c\n    t82 = (a * t81 + b) % c\n    t83 = (a * t82 + b) % c\n    t84 = (a * t83 + b) % c\n    t85 = (a * t84 + b)"
    },
    {
        "number": 3618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(sum(1 for i in range(n) if i % 2 == 0) * sum(1 for i in range(n) if i % 2 == 1) for j in range(n)))"
    },
    {
        "number": 3619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    employees = [list(map(int, stdin.split())) for _ in range(n)]\n    employees.sort(key=lambda x: x[0], reverse=True)\n    dp = [0] * (k + 1)\n    for i in range(n):\n        for j in range(k, 0, -1):\n            if employees[i][2] == 0:\n                dp[j] = max(dp[j], dp[j - 1])\n            else:\n                dp[j] = max(dp[j], dp[j - 1] + employees[i][1] / employees[i][0])\n    return str(round(dp[k] * 100, 3))\n"
    },
    {
        "number": 3620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 1 1 1\n   ... 1 0 2 2\n   ... 1 2 0 3\n   ... 1 2 3 0''')\n    26\n    \"\"\"\n    n = int(stdin.readline())\n    graph = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\n    graph = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            graph[i][j] = graph[j][i] = int(stdin.readline())\n    return str(sum(max(0, graph[i][j] - graph[i][k] - graph[k][j] + graph[k][k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n)))\n"
    },
    {
        "number": 3622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n20 20 20 40\\nX.X\\nT.T\")\n    '0.3333333333333333 0.6666666666666666'\n    \"\"\"\n    w, h = map(int, stdin.split())\n    u, d, l, r = map(int, stdin.split()[1:])\n    grid = [stdin.split()[1:]]\n    for _ in range(h - 1):\n        grid.append(stdin.split()[1:])\n    return''.join(map(str, solution_helper(w, h, u, d, l, r, grid)))\n\n\ndef"
    },
    {
        "number": 3623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(float, stdin.split())\n    return str(min(a / 90, b / 90, c / 90, d / 90))"
    },
    {
        "number": 3624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 3626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 0 2 2\n   ... 1 1 3 4\n   ... 5 7 6 8''')\n    '1'\n    \"\"\"\n   ..."
    },
    {
        "number": 3627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n3 2 3 1 1\")\n    '1 4 3 5 2'\n    \"\"\"\n    n, a = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % n == a[i] % n:\n                return f\"{i + 1} {j + 1} {n - (a[i] + a[j]) % n + 1} {n - a[i] % n + 1}\"\n    return \"impossible\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(stdin.readline())\n    # trees = []\n    # for _ in range(n):\n    #     x, y, r = map(int, stdin.readline().split())\n    #     trees.append((x, y, r))\n    # b, d = map(int, stdin.readline().split())\n    # trees.sort(key=lambda x: x[2])\n    # trees.sort(key=lambda x: x[0])\n    # trees.sort(key=lambda x: x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[1] - x[0])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0] - x[1])\n    # trees.sort(key=lambda x: x[0] + x[1])\n    # trees.sort(key=lambda x: x[0"
    },
    {
        "number": 3630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2 = stdin.split()\n    n = len(s1)\n    m = len(s2)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[n][m]\n"
    },
    {
        "number": 3631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    strings = [stdin.split()[i] for i in range(n)]\n    strings.sort()\n    test_string = stdin.split()[n]\n    for i in range(n):\n        if test_string.startswith(strings[i]):\n            return i + 1\n    return -1\n"
    },
    {
        "number": 3633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores.sort()\n    if scores[0] > m:\n        return \"impossible\"\n    else:\n        return \" \".join(map(str, [i + 1 for i in range(n) if scores[i] <= m]))\n"
    },
    {
        "number": 3634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 1\n   ... 2 3\n   ... 2 3''')\n    '2'\n    \"\"\"\n   ..."
    },
    {
        "number": 3635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    return str(count_ways(n, m, p))\n\n\ndef"
    },
    {
        "number": 3637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\")\n    zucchini\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    predictions = [stdin.split()[i] for i in range(s)]\n    predictions.sort(key=lambda x: x[0])\n    return '\\n'.join(predictions)\n"
    },
    {
        "number": 3639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 0.1 2.0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0''')\n    '288'\n    \"\"\"\n    T = int(stdin.readline())\n    c, d = map(float, stdin.readline().split())\n    r = [float(stdin.readline()) for _ in range(T)]\n    return str(sum(r) * c * d)\n"
    },
    {
        "number": 3640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('m')"
    },
    {
        "number": 3641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    beads = [int(x) for x in stdin.split()]\n    beads.sort()\n    if k == 1:\n        return \"YES\"\n    if n == 1:\n        return \"NO\"\n    if beads[0]!= 1:\n        return \"NO\"\n    if beads[-1]!= n:\n        return \"NO\"\n    for i in range(1, len(beads)):\n        if beads[i] - beads[i - 1]!= 1:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 3642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 2\n   ... 3\n   ... 4''')\n    '3/1'\n    >>> solution('''3\n   ... 1 2\n   ... 3\n   ... 4\n   ... 5''')\n    '7/2'\n    \"\"\"\n   ..."
    },
    {
        "number": 3643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 3\n   ... 1 1\n   ... 2 1\n   ... 2 0''')\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    f = [0] * (n + 1)\n    h = [0] * (n + 1)\n    for i in range(n):\n        f[i + 1], h[i + 1] = map(int, stdin.readline().split())\n    f.pop(0)\n    h.pop(0)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(n):\n        dp[i + 1] = dp[i] + h[i] - f[i]\n    dp.pop(0)\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + d"
    },
    {
        "number": 3645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    for i in range(n):\n        if nums[i] == nums[i + 1]:\n            continue\n        for j in range(i + 1, n):\n            if nums[j] == nums[i] or nums[j] == nums[i + 1]:\n                continue\n            if nums[j] - nums[i] == nums[i + 1] - nums[j]:\n                print(nums[i])\n                return\n    print('none')\n    return\n"
    },
    {
        "number": 3646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the most distant pebble from the first one in the line.\"\"\"\n    n = int(stdin.readline())\n    pebbles = [int(x) for x in stdin.readline().split()]\n    distances = [0] * n\n    distances[0] = pebbles[0]\n    for i in range(1, n):\n        distances[i] = distances[i - 1] + pebbles[i]\n    return max(distances)\n"
    },
    {
        "number": 3647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 3649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b + c + d == 0:\n        return \"impossible\"\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"0\"\n    if a == 0 and b == 0 and c == 0 and d == 1:\n        return \"1\"\n    if a == 0 and b == 0 and c == 1 and d == 0:\n        return \"10\"\n    if a == 0 and b == 0 and c == 1 and d == 1:\n        return \"11\"\n    if a == 0 and b == 0 and c == 2 and d == 0:\n        return \"101\"\n    if a == 0 and b == 0 and c == 2 and d == 1:\n        return \"110\"\n    if a == 0 and b == 0 and c == 3 and d == 0:\n        return \"1110\"\n    if a == 0 and b == 0 and c == 3 and d == 1:\n        return \"1111\"\n    if a == 0 and b == 0 and c == 4 and d == 0:\n        return \"11110\"\n    if a == 0 and b == 0 and c == 4 and d == 1:\n        return \"11111\"\n    if a == 0 and b == 0 and c == 5 and d == 0:\n        return \"111110\"\n    if a == 0 and b == 0 and c == 5 and d == 1:\n        return \"111111\"\n    if a == 0 and b == 0 and c == 6 and d == 0:\n        return \"1111110\"\n    if a == 0 and b == 0 and c == 6 and d == 1:\n        return \"1111111\"\n    if a == 0 and b == 0 and c == 7 and d == 0:\n        return \"11111110\"\n    if a == 0 and b == 0 and c == 7 and d == 1:\n        return \"11111111\"\n    if a == 0 and b == 0 and c == 8 and d == 0:\n        return \"11111111\"\n    if a == 0 and b == 0 and c == 8 and d == 1:\n        return \"11111111\"\n    if a == 0 and b == 0 and c == 9 and d == 0:\n        return \"111111110\"\n    if a == 0 and b == 0 and c == 9 and d == 1:\n        return \"111111111\"\n    if a == 0 and b == 0 and c == 10 and d == 0:\n        return \"1111111110\"\n    if a == 0 and b == 0 and c == 10 and d == 1:\n        return \"1111111111\"\n    if a == 0 and b == 0 and c == 11 and d == 0:\n        return \"11111111110\"\n    if a == 0 and b == 0 and c == 11 and d == 1:\n        return \"11111111111\"\n    if a == 0 and b == 0 and c == 12 and d == 0:\n        return \"1111111111110\"\n    if a == 0 and b == 0 and c == 12 and d == 1:\n        return \"1111111111111\"\n    if a == 0 and b == 0 and c == 13 and d == 0:\n        return \"11111111111110\"\n    if a == 0 and b == 0 and c == 13 and d == 1:\n        return \"11111111111111\"\n    if a == 0 and b == 0 and c == 14 and d == 0:\n        return \"111111111111110\"\n    if a == 0 and b == 0 and c == 14 and d == 1:\n        return \"111111111111111\"\n    if a == 0 and b == 0 and c == 15 and d == 0:\n        return \"11111111111111110\"\n    if a == 0 and b == 0 and c == 15 and d == 1:\n        return \"11111111111111111\"\n    if a == 0 and b == 0 and c == 16 and d == 0:\n        return \"111111111111111110\"\n    if a == 0 and b == 0 and c == 16 and d == 1:\n        return \"111111111111111111\"\n    if a == 0 and b == 0 and c == 17 and d == 0:\n        return \"1111111111111111110\"\n    if a == 0 and b == 0 and c == 17 and d == 1:\n        return \"1111111111111111111\"\n    if a == 0 and b == 0 and c == 18 and d == 0:\n        return \"111111111111111111110\"\n    if a == 0 and b == 0 and c == 18 and d == 1:\n        return \"111111111111111111111\"\n    if a == 0 and b == 0 and c == 19 and d == 0:\n        return \"1111111111111111111110\"\n    if a == 0 and b == 0 and c == 19 and d == 1:\n        return \"1111111111111111111111\"\n    if a == 0 and b == 0 and c == 20 and d == 0:\n        return \"11111111111111111111110\"\n    if a == 0 and b == 0 and c == 20 and d == 1:\n        return \"11111111111111111111111\"\n    if a == 0 and b == 0 and c == 21 and d == 0:\n        return \"1111111111111111111111110\"\n    if a == 0 and b == 0 and c == 21 and d == 1:\n        return \"1111111111111111111111111\"\n    if a == 0 and b == 0 and c == 22 and d == 0:\n        return \"11111111111111111111111110\"\n    if a == 0 and b == 0 and c == 22 and d == 1:\n        return \"11111111111111111111111111\"\n    if a == 0 and b == 0 and c == 23 and d == 0:\n        return \"111111111111111111111111110\"\n    if a == 0 and b == 0 and c == 23 and d == 1:\n        return \"111111111111111111111111111\"\n    if a == 0 and b == 0 and c == 24 and d == 0:\n        return \"11111111111111111111111111110\"\n    if a == 0 and b == 0 and c == 24 and d == 1:\n        return \"11111111111111111111111111111\"\n    if a == 0 and b == 0 and c == 25 and d == 0:\n        return \"111111111111111111111111111110\"\n    if a == 0 and b == 0 and c == 25 and d == 1:\n        return \"111111111111111111111111111111\"\n    if a == 0 and b == 0 and c == 26 and d == 0:\n        return \"1111111111111111111111111111110\"\n    if a == 0 and b == 0 and c == 26 and d == 1:\n        return \"1111111111111111111111111111111\"\n    if a == 0 and b == 0 and c == 27 and d == 0:\n        return \"111111111111111111111111111111110\"\n    if a == 0 and b == 0 and c == 27 and d == 1:\n        return \"111111111111111111111111111111111\"\n    if a == 0 and b == 0 and c == 28 and d == 0:\n        return \"1111111111111111111111111111111110\"\n    if a == 0 and b == 0 and c == 28 and d == 1:\n        return \"1111111111111111111111111111111111\"\n    if a == 0 and b == 0 and c == 29 and d == 0:\n        return \"11111111111111111111111111111111110\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\")\n    'possible\\n< 1\\n^ 2\\n< 2\\n^ 3\\n< 3\\n^ 4'\n    \"\"\"\n    n, m, b = map(int, stdin.split())\n    board = [[0] * m for _ in range(n)]\n    for i in range(b):\n        r, c = map(int, stdin.split()[i * 2 + 1 : i * 2 + 3])\n        board[r - 1][c - 1] = 1\n    target = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            target[i][j] = 1 if i == j == 0 else 0\n    return \"possible\" if solve(board, target) else \"impossible\"\n\n\ndef"
    },
    {
        "number": 3651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    # # Get the number of planets\n    # n = int(stdin.readline())\n    #\n    # # Get the coordinates of each planet\n    # planets = []\n    # for i in range(n):\n    #     planets.append(list(map(int, stdin.readline().split())))\n    #\n    # # Get the coordinates of the home planet\n    # home = list(map(int, stdin.readline().split()))\n    #\n    # # Get the coordinates of the first planet\n    # first = planets[0]\n    #\n    # # Get the coordinates of the second planet\n    # second = planets[1]\n    #\n    # # Get the coordinates of the third planet\n    # third = planets[2]\n    #\n    # # Get the coordinates of the fourth planet\n    # fourth = planets[3]\n    #\n    # # Get the coordinates of the fifth planet\n    # fifth = planets[4]\n    #\n    # # Get the coordinates of the sixth planet\n    # sixth = planets[5]\n    #\n    # # Get the coordinates of the seventh planet\n    # seventh = planets[6]\n    #\n    # # Get the coordinates of the eighth planet\n    # eighth = planets[7]\n    #\n    # # Get the coordinates of the ninth planet\n    # ninth = planets[8]\n    #\n    # # Get the coordinates of the tenth planet\n    # tenth = planets[9]\n    #\n    # # Get the coordinates of the eleventh planet\n    # eleventh = planets[10]\n    #\n    # # Get the coordinates of the twelfth planet\n    # twelfth = planets[11]\n    #\n    # # Get the coordinates of the thirteenth planet\n    # thirteenth = planets[12]\n    #\n    # # Get the coordinates of the fourteenth planet\n    # fourteenth = planets[13]\n    #\n    # # Get the coordinates of the fifteenth planet\n    # fifteenth = planets[14]\n    #\n    # # Get the coordinates of the sixteenth planet\n    # sixteenth = planets[15]\n    #\n    # # Get the coordinates of the seventeenth planet\n    # seventeenth = planets[16]\n    #\n    # # Get the coordinates of the eighteenth planet\n    # eighteenth = planets[17]\n    #\n    # # Get the coordinates of the nineteenth planet\n    # nineteenth = planets[18]\n    #\n    # # Get the coordinates of the twentieth planet\n    # twentieth = planets[19]\n    #\n    # # Get the coordinates of the twenty-first planet\n    # twenty_first = planets[20]\n    #\n    # # Get the coordinates of the twenty-second planet\n    # twenty_second = planets[21]\n    #\n    # # Get the coordinates of the twenty-third planet\n    # twenty_third = planets[22]\n    #\n    # # Get the coordinates of the twenty-fourth planet\n    # twenty_fourth = planets[23]\n    #\n    # # Get the coordinates of the twenty-fifth planet\n    # twenty_fifth = planets[24]\n    #\n    # # Get the coordinates of the twenty-sixth planet\n    # twenty_sixth = planets[25]\n    #\n    # # Get the coordinates of the twenty-seventh planet\n    # twenty_seventh = planets[26]\n    #\n    # # Get the coordinates of the twenty-eighth planet\n    # twenty_eighth = planets[27]\n    #\n    # # Get the coordinates of the twenty-ninth planet\n    # twenty_ninth = planets[28]\n    #\n    # # Get the coordinates of the twenty-tenth planet\n    # twenty_tenth = planets[29]\n    #\n    # # Get the coordinates of the twenty-eleventh planet\n    # twenty_eleventh = planets[30]\n    #\n    # # Get the coordinates of the twenty-twelfth planet\n    # twenty_twelfth = planets[31]\n    #\n    # # Get the coordinates of the twenty-thirteenth planet\n    # twenty_thirteenth = planets[32]\n    #\n    # # Get the coordinates of the twenty-fourteenth planet\n    # twenty_fourteenth = planets[33]\n    #\n    # # Get the coordinates of the twenty-fifteenth planet\n    # twenty_fifteenth = planets[34]\n    #\n    # # Get the coordinates of the twenty-sixteenth planet\n    # twenty_sixteenth = planets[35]\n    #\n    # # Get the coordinates of the twenty-seventeenth planet\n    # twenty_seventeenth = planets[36]\n    #\n    # # Get the coordinates of the twenty-eighteenth planet\n    # twenty_eighteenth = planets[37]\n    #\n    # # Get the coordinates of the twenty-ninteenth planet\n    # twenty_ninteenth = planets[38]\n    #\n    # # Get the coordinates of the twenty-twentieth planet\n    # twenty_twentieth = planets[39]\n    #\n    # # Get the coordinates of the twenty-twenty-first planet\n    # twenty_twenty_first = planets[40]\n    #\n    # # Get the coordinates of the twenty-twenty-second planet\n    # twenty_twenty_second = planets[41]\n    #\n    # # Get the coordinates of the twenty-twenty-third planet\n    # twenty_twenty_third = planets[42]\n    #\n    # # Get the coordinates of the twenty-twenty-fourth planet\n    # twenty_twenty_fourth = planets[43]\n    #\n    # # Get the coordinates of the twenty-twenty-fifth planet\n    # twenty_twenty_fifth = planets[44]\n    #\n    # # Get the coordinates of the twenty-twenty-sixth planet\n    # twenty_twenty_sixth = planets[45]\n    #\n    # # Get the coordinates of the twenty-twenty-seventh planet\n    # twenty_twenty_seventh = planets[46]\n    #\n    # # Get the coordinates of the twenty-twenty-eighth planet\n    # twenty_twenty_e"
    },
    {
        "number": 3652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    c = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        if a[i]!= b[i] or a[i]!= c[i]:\n            return i\n    return n"
    },
    {
        "number": 3653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.readline())\n    x1, y1 = map(int, stdin.readline().split())\n    x2, y2 = map(int, stdin.readline().split())\n    return str(abs(x1 - x2) + abs(y1 - y2))\n"
    },
    {
        "number": 3654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    if k == 1:\n        return 0\n    elif k == 2:\n        return n - 1\n    else:\n        return 2 * solution(stdin) - solution(stdin, n - 2) + k - 1"
    },
    {
        "number": 3655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2\n   ... 1 0\n   ... 0 1\n   ... 3 3\n   ... 1 0 0\n   ... 0 1 0\n   ... 0 0 1''')\n    '0 0\\n1 1'\n    \"\"\"\n    width, height = map(int, stdin.split('\\n')[:2])\n    floor = [list(map(int, stdin.split('\\n')[2:])) for _ in range(height)]\n    robot = [list(map(int, stdin.split('\\n')[2:])) for _ in range(height)]\n    candidates = []\n    for x in range(width):\n        for y in range(height):\n            if robot[y][x] == 1:\n                candidates.append((x, y))\n    candidates.sort(key=lambda x: (x[0], x[1]))\n    for x, y in candidates:\n        if all(robot[y][x] == floor[y][x] for x, y in candidates):\n            return f'{x} {y}'\n    return ''\n"
    },
    {
        "number": 3656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 2 0.950000\n   ... 0.700000 50''')\n    '44.975'\n    \"\"\"\n    B, T, f = [int(x) for x in stdin.split()]\n    bugs = [\n        (float(p), int(s))\n        for p, s in [\n            [float(x) for x in line.split()]\n            for line in stdin.splitlines()[1:]\n        ]\n    ]\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n    #     (0.95, 50),\n    #     (0.7, 50),\n    # ]\n    # B, T, f = 1, 2, 0.95\n    # bugs = [\n"
    },
    {
        "number": 3657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, v_h, N = [int(x) for x in stdin.split()]\n    x, y = [int(x) for x in stdin.split()]\n    skis = [int(x) for x in stdin.split()]\n    return str(solution_helper(W, v_h, N, x, y, skis))\n\ndef"
    },
    {
        "number": 3658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the problem\"\"\"\n    # Get the input\n    p, a = [int(x) for x in stdin.split('\\n')[:2]]\n    # Get the points\n    points = [tuple(float(x) for x in stdin.split('\\n')[2:][i].split()) for i in range(p + a)]\n    # Get the area\n    area = 0\n    for i in range(p):\n        for j in range(i + 1, p):\n            for k in range(j + 1, p + a):\n                if is_inside(points[i], points[j], points[k]):\n                    area += 1\n    return str(area)\n\n\ndef"
    },
    {
        "number": 3659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 220 29\n   ... 195 20\n   ... 200 9\n   ... 180 30''')\n    '18000'\n    \"\"\"\n    books = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    books.sort(key=lambda x: x[0])\n    h, t = books[0]\n    for i in range(1, len(books)):\n        h, t = max(h, books[i][0]), max(t, books[i][1])\n    return str(h * t)\n"
    },
    {
        "number": 3660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8\")\n    '28'\n    \"\"\"\n    message = stdin.split(\"\\n\")[0]\n    stickers = stdin.split(\"\\n\")[1:]\n    stickers = [sticker.split() for sticker in stickers]\n    stickers = [(sticker[0], int(sticker[1])) for sticker in stickers]\n    stickers.sort(key=lambda x: x[1], reverse=True)\n    stickers = [sticker[0] for sticker in stickers]\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20]\n    stickers = set(stickers)\n    stickers = list(stickers)\n    stickers.sort()\n    stickers = \"\".join(stickers)\n    stickers = stickers.split(\" \")\n    stickers = [sticker for sticker in stickers if sticker!= \"\"]\n    stickers = [sticker for sticker in stickers if len(sticker) <= 20"
    },
    {
        "number": 3661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3 8\n   ... 1 1\n   ... 2 1\n   ... 3 1\n   ... 4 2\n   ... 5 2\n   ... 3 3\n   ... 4 3\n   ... 5 3''')\n    'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5'\n    \"\"\"\n    R, S, L = map(int, stdin.split())\n    individuals = set()\n    corporations = set()\n    for _ in range(L):\n        A, B = map(int, stdin.split()[1:])\n        if A in individuals:\n            individuals.remove(A)\n        else:\n            corporations.add(B)\n        if B in corporations:\n            corporations.remove(B)\n        else:\n            individuals.add(A)\n    return '\\n'.join(sorted(individuals, reverse=True) + sorted(corporations, reverse=True))\n"
    },
    {
        "number": 3662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 10 1\n   ... 1\n   ... 0\n   ... 10\n   ... 10\n   ... ''')\n    '2.4142135624'\n    \"\"\"\n   ..."
    },
    {
        "number": 3663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    routes = []\n    for _ in range(n - 1):\n        u, v, c = map(int, stdin.readline().split())\n        routes.append((u, v, c))\n    m = int(stdin.readline())\n    for _ in range(m):\n        x, y = map(int, stdin.readline().split())\n        routes.append((x, y, 0))\n    routes.sort(key=lambda x: x[2])\n    dp = [0] * (n + 1)\n    for u, v, c in routes:\n        dp[v] = max(dp[v], dp[u] + c)\n    print(dp[-1])\n    return ''\n"
    },
    {
        "number": 3664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, i, j, n = map(int, stdin.split())\n    ice = [['.'] * c for _ in range(r)]\n    for _ in range(n):\n        ice[i - 1][j - 1] = '@'\n        if j == 1:\n            i, j = i - 1, c - 1\n        else:\n            i, j = i, j - 1\n    return '\\n'.join(''.join(row) for row in ice)"
    },
    {
        "number": 3665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [int(stdin) for stdin in stdin.splitlines()]\n    arr.sort()\n    for i in range(n):\n        arr[i] = str(arr[i])\n    arr = '\\n'.join(arr)\n    return arr"
    },
    {
        "number": 3666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    gear_ratios = [line.split('/') for line in stdin.split('\\n')]\n    front_sprockets = [int(ratio[0]) for ratio in gear_ratios]\n    rear_sprockets = [int(ratio[1]) for ratio in gear_ratios]\n    front_sprockets.sort()\n    rear_sprockets.sort()\n    front_sprockets.reverse()\n    rear_sprockets.reverse()\n    front_sprockets = [str(s) for s in front_sprockets]\n    rear_sprockets = [str(s) for s in rear_sprockets]\n    front_sprockets =''.join(front_sprockets)\n    rear_sprockets =''.join(rear_sprockets)\n    return front_sprockets + '\\n' + rear_sprockets"
    },
    {
        "number": 3667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\")\n    'possible'\n    \"\"\"\n   ..."
    },
    {
        "number": 3668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of colleagues that Mia can uniquely identify in the next few days, if she allocates the burger and salad recipients optimally.\"\"\"\n    n, m = map(int, stdin.split())\n    lst = []\n    for _ in range(m):\n        lst.append(int(stdin))\n    return n - len(set(lst))\n"
    },
    {
        "number": 3669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(N)]\n    mirko_points = set(points)\n    slavko_points = set()\n    while len(mirko_points) > 1:\n        slavko_points.add(tuple(map(sum, zip(*mirko_points))))\n        mirko_points = set(map(sum, zip(*mirko_points)))\n    return \"Mirko\" if tuple(map(sum, zip(*mirko_points))) in mirko_points else \"Slavko\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n6\\n34\\n38\")\n    '2 4'\n    \"\"\"\n    n = int(stdin.readline())\n    nums = [int(stdin.readline()) for _ in range(n)]\n    nums.sort()\n    m = nums[0]\n    for i in range(1, n):\n        m = lcm(m, nums[i])\n    return \" \".join(map(str, range(1, m + 1)))\n\n\ndef"
    },
    {
        "number": 3671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 10000 400000 500000 900000\n   ... ''')\n    '12'\n    >>> solution('''5\n   ... 8 10 2 1000000 30556926000\n   ... ''')\n    '12'\n    \"\"\"\n   ..."
    },
    {
        "number": 3672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    islands = [list(map(int, stdin.split())) for _ in range(m)]\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append([0] * n)\n    islands.append"
    },
    {
        "number": 3673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k == 1:\n        return 'Impossible'\n    if k == n:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + 1:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 1:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 2:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 3:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 4:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 5:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 6:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 7:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 8:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 9:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 10:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 11:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 12:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 13:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 14:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 15:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 16:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 17:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 18:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 19:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 20:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 21:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 22:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 23:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 24:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 25:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 26:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 27:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 28:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 29:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 30:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 31:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 32:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 33:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 34:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1) // 2 + n + 35:\n        return 'Impossible'\n    if k == n * (n - 1) // 2 + n + 36:\n        return''.join(map(str, range(1, n + 1)))\n    if k == n * (n - 1"
    },
    {
        "number": 3674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, p, q = [int(x) for x in stdin.split()]\n    if m < n:\n        return \"IMPOSSIBLE\"\n    if m == n:\n        return str(p * q)\n    if m == n + 1:\n        return str(p * q) + str(p)\n    if m == n + 2:\n        return str(p * q) + str(p) + str(p)\n    if m == n + 3:\n        return str(p * q) + str(p) + str(p) + str(p)\n    if m == n + 4:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 5:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 6:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 7:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 8:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 9:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 10:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 11:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 12:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 13:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 14:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 15:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 16:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 17:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 18:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 19:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 20:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p)\n    if m == n + 21:\n        return str(p * q) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str(p) + str("
    },
    {
        "number": 3675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\nBAC\\nABC\")\n    2\n    >>> solution(\"3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE\")\n    3\n    \"\"\"\n    n, k = map(int, stdin.split())\n    strings = [stdin.split()[1] for _ in range(n)]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if strings[i - 1][j - 1] == strings[i - 1][j - 2]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][k]\n"
    },
    {
        "number": 3676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    return str(r * c)\n"
    },
    {
        "number": 3677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the largest possible comittee where everyone disagrees.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n    N, K = [int(x) for x in stdin.split()]\n    disagreements = []\n    for _ in range(N):\n        disagreements.append(int(stdin.split()[1]))\n    disagreements.sort()\n    return disagreements[K - 1]\n"
    },
    {
        "number": 3678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if it is possible to draw a loop, otherwise 'NO'.\"\"\"\n    # your code here\n    return 'YES'\n"
    },
    {
        "number": 3679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 3680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\")\n    '3'\n    \"\"\"\n    N, M, Q = map(int, stdin.split())\n    reassignment_plans = [list(map(int, stdin.split())) for _ in range(Q)]\n    # print(reassignment_plans)\n    # print(N, M, Q)\n    # print(reassignment_plans)\n    # print(reassignment_plans[0])\n    # print(reassignment_plans[0][0])\n    # print(reassignment_plans[0][1])\n    # print(reassignment_plans[0][2])\n    # print(reassignment_plans[0][3])\n    # print(reassignment_plans[0][4])\n    # print(reassignment_plans[0][5])\n    # print(reassignment_plans[0][6])\n    # print(reassignment_plans[0][7])\n    # print(reassignment_plans[0][8])\n    # print(reassignment_plans[0][9])\n    # print(reassignment_plans[0][10])\n    # print(reassignment_plans[0][11])\n    # print(reassignment_plans[0][12])\n    # print(reassignment_plans[0][13])\n    # print(reassignment_plans[0][14])\n    # print(reassignment_plans[0][15])\n    # print(reassignment_plans[0][16])\n    # print(reassignment_plans[0][17])\n    # print(reassignment_plans[0][18])\n    # print(reassignment_plans[0][19])\n    # print(reassignment_plans[0][20])\n    # print(reassignment_plans[0][21])\n    # print(reassignment_plans[0][22])\n    # print(reassignment_plans[0][23])\n    # print(reassignment_plans[0][24])\n    # print(reassignment_plans[0][25])\n    # print(reassignment_plans[0][26])\n    # print(reassignment_plans[0][27])\n    # print(reassignment_plans[0][28])\n    # print(reassignment_plans[0][29])\n    # print(reassignment_plans[0][30])\n    # print(reassignment_plans[0][31])\n    # print(reassignment_plans[0][32])\n    # print(reassignment_plans[0][33])\n    # print(reassignment_plans[0][34])\n    # print(reassignment_plans[0][35])\n    # print(reassignment_plans[0][36])\n    # print(reassignment_plans[0][37])\n    # print(reassignment_plans[0][38])\n    # print(reassignment_plans[0][39])\n    # print(reassignment_plans[0][40])\n    # print(reassignment_plans[0][41])\n    # print(reassignment_plans[0][42])\n    # print(reassignment_plans[0][43])\n    # print(reassignment_plans[0][44])\n    # print(reassignment_plans[0][45])\n    # print(reassignment_plans[0][46])\n    # print(reassignment_plans[0][47])\n    # print(reassignment_plans[0][48])\n    # print(reassignment_plans[0][49])\n    # print(reassignment_plans[0][50])\n    # print(reassignment_plans[0][51])\n    # print(reassignment_plans[0][52])\n    # print(reassignment_plans[0][53])\n    # print(reassignment_plans[0][54])\n    # print(reassignment_plans[0][55])\n    # print(reassignment_pl"
    },
    {
        "number": 3682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 2 2 2\n   ... 4 2 1\n   ... 4 4 1''')\n    '1 2 2'\n    \"\"\"\n    p, h = map(int, stdin.split('\\n')[0].split())\n    scores = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, p + 1)]\n    scores.sort(key=lambda x: sum(x))\n    ranks = [1] * p\n    for i in range(p):\n        for j in range(i + 1, p):\n            if sum(scores[i]) < sum(scores[j]):\n                ranks[i] += 1\n            elif sum(scores[i]) == sum(scores[j]):\n                ranks[i] = ranks[j]\n    return''.join(map(str, ranks))\n"
    },
    {
        "number": 3684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 20\n   ... 50 70 10\n   ... 100 110 4\n   ... 150 190 16''')\n    '5'\n    \"\"\"\n    n, C = map(int, stdin.split('\\n')[:2])\n    p, b, u = [], [], []\n    for i in range(n):\n        p_, b_, u_ = map(int, stdin.split('\\n')[i + 2].split())\n        p.append(p_)\n        b.append(b_)\n        u.append(u_)\n    p.sort()\n    b.sort()\n    u.sort()\n    b_ = [b[i] - (p[i] + C) for i in range(n)]\n    b_ = [max(0, b_[i]) for i in range(n)]\n    return str(max(b_))\n"
    },
    {
        "number": 3685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... -1 0\n   ... 0 0\n   ... 1 0\n   ... -1 1\n   ... 0 2\n   ... 1 1''')\n    'failure'\n    >>> solution('''6\n   ... -1 0\n   ... 0 0\n   ... 1 0\n   ... -1 1\n   ... 0 2\n   ... 1 1''')\n   'success'\n    \"\"\"\n   ..."
    },
    {
        "number": 3687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q, s = [int(x) for x in stdin.split()]\n    queues = [int(x) for x in stdin.split()[2:]]\n    sensors = [int(x) for x in stdin.split()[2:]]\n    return 'possible' if sum(queues) + sum(sensors) <= n * q * s else 'impossible'"
    },
    {
        "number": 3688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = stdin[:n]\n    y = stdin[n:]\n    m = len(y)\n    b = [0] * m\n    for i in range(m):\n        b[i] = int(y[i])\n    for i in range(m - k):\n        if b[i] == b[i + k]:\n            return 'NO'\n    return str(m) + '\\n' +''.join(map(str, b))\n"
    },
    {
        "number": 3690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m, s, t_1, t_2 = [int(x) for x in stdin.split()]\n    t_1 = t_1 * 3600 + t_1 * 60 + t_1\n    t_2 = t_2 * 3600 + t_2 * 60 + t_2\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    "
    },
    {
        "number": 3691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x0, y0, ax, ay, bx, by = map(int, stdin.split())\n    x, y, t = map(int, stdin.split())\n    return str(max(0, (x - x0) * ax + (y - y0) * ay + (t - x) * bx + (t - y) * by))"
    },
    {
        "number": 3692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '4'"
    },
    {
        "number": 3693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == 0:\n        return \"cslnb\"\n    if a[0] == a[1]:\n        return \"sjfnb\"\n    return \"sjfnb\""
    },
    {
        "number": 3695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 3696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 3697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, a = [int(x) for x in stdin.split()]\n    votes = [int(x) for x in stdin.split()]\n    votes.sort()\n    print(votes)\n    return \"\""
    },
    {
        "number": 3698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(bin(n).count('1') - k)\n"
    },
    {
        "number": 3699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    n = int(stdin)\n    x, y = [0] * n, [0] * n\n    for i in range(n):\n        x[i], y[i] = map(int, stdin.split())\n    return str(round(sum(abs(a - b) / max(1, b) for a, b in zip(x, y)) + sum(abs(a - b) / max(1, b) for a, b in zip(y, x)) / 2, 6))\n"
    },
    {
        "number": 3700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < n:\n        return 0\n    if k % n == 0:\n        return 1\n    return 0"
    },
    {
        "number": 3701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(' ')]\n    a = stdin.split('\\n')[1]\n    a = a[:n]\n    a = list(a)\n    cost = 0\n    for i in range(n):\n        if a[i] == '0':\n            a[i] = '1'\n            cost += x\n        else:\n            a[i] = '0'\n            cost += y\n    return cost"
    },
    {
        "number": 3702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, d = [int(x) for x in stdin.split()]\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    for i in range(n):\n        for j in range(2, n):\n            if fib[j] > a + i * d:\n                break\n            if fib[j] == a + i * d:\n                if j == n - 1:\n                    return str(i) + \" \" + str(j)\n                continue\n            if fib[j] > a + (i + 1) * d:\n                break\n            if fib[j] == a + (i + 1) * d:\n                if j == n - 1:\n                    return str(i + 1) + \" \" + str(j)\n                continue\n    return \"-1\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(f(n, k))\n\n\ndef"
    },
    {
        "number": 3704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n-149.154.167.99\\n\")\n    '1\\n0.0.0.0/0'\n    >>> solution(\"4\\n-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n\")\n    '2\\n149.154.167.99\\n149.154.167.120/29'\n    >>> solution(\"5\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\\n\")\n    '2\\n195.0.0.0/8\\n127.0.0.4/30'\n    >>> solution(\"2\\n+127.0.0.1/32\\n-127.0.0.1\\n\")\n    '-1'\n    \"\"\"\n    blacklist = set()\n    whitelist = set()\n    for line in stdin.splitlines():\n        if line[0] == '-':\n            blacklist.add(line[1:])\n        else:\n            whitelist.add(line[1:])\n    blacklist = sorted(blacklist)\n    whitelist = sorted(whitelist)\n    if blacklist[0] in whitelist:\n        return -1\n    blacklist = [ip_network(subnet) for subnet in blacklist]\n    whitelist = [ip_network(subnet) for subnet in whitelist]\n    blacklist = sorted(blacklist, key=lambda x: x.prefixlen)\n    whitelist = sorted(whitelist, key=lambda x: x.prefixlen)\n    blacklist = blacklist[1:]\n    whitelist = whitelist"
    },
    {
        "number": 3705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"11\\n31415926535\")\n    1\n    >>> solution(\"22\\n0011223344556677889988\")\n    2\n    >>> solution(\"11\\n31415926535\")\n    0\n    \"\"\"\n    n = int(stdin.readline())\n    cards = stdin.readline().strip()\n    phone_numbers = set()\n    for i in range(1, len(cards) + 1):\n        for j in range(len(cards) - i + 1):\n            phone_numbers.add(cards[j:j + i])\n    return len(phone_numbers)\n"
    },
    {
        "number": 3706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n0 0 0\\n0 1 0\\n0 0 0\")\n    4\n    >>> solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\")\n    -1\n    >>> solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\")\n    3\n    >>> solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\")\n    3\n    \"\"\"\n    n, m = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [[float(\"inf\")] * m for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n            dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n            dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + grid[i][j])\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if dp[i][j] == float(\"inf\"):\n                return -1\n    return dp[n - 1][m - 1]\n"
    },
    {
        "number": 3707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, k, d = [int(x) for x in stdin.split(' ')]\n    if t >= d:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 3708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = [list(map(int, stdin.split())) for _ in range(n)]\n    return \"YES\" if k <= n // 2 else \"NO\""
    },
    {
        "number": 3710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    for i in range(n):\n        if c[i] % k == 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 3711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k > m * n:\n        return -1\n    if k == 1:\n        return m * n\n    if k == 2:\n        return m * n - 1\n    if k == 3:\n        return m * n - 2\n    if k == 4:\n        return m * n - 3\n    if k == 5:\n        return m * n - 4\n    if k == 6:\n        return m * n - 5\n    if k == 7:\n        return m * n - 6\n    if k == 8:\n        return m * n - 7\n    if k == 9:\n        return m * n - 8\n    if k == 10:\n        return m * n - 9\n    if k == 11:\n        return m * n - 10\n    if k == 12:\n        return m * n - 11\n    if k == 13:\n        return m * n - 12\n    if k == 14:\n        return m * n - 13\n    if k == 15:\n        return m * n - 14\n    if k == 16:\n        return m * n - 15\n    if k == 17:\n        return m * n - 16\n    if k == 18:\n        return m * n - 17\n    if k == 19:\n        return m * n - 18\n    if k == 20:\n        return m * n - 19\n    if k == 21:\n        return m * n - 20\n    if k == 22:\n        return m * n - 21\n    if k == 23:\n        return m * n - 22\n    if k == 24:\n        return m * n - 23\n    if k == 25:\n        return m * n - 24\n    if k == 26:\n        return m * n - 25\n    if k == 27:\n        return m * n - 26\n    if k == 28:\n        return m * n - 27\n    if k == 29:\n        return m * n - 28\n    if k == 30:\n        return m * n - 29\n    if k == 31:\n        return m * n - 30\n    if k == 32:\n        return m * n - 31\n    if k == 33:\n        return m * n - 32\n    if k == 34:\n        return m * n - 33\n    if k == 35:\n        return m * n - 34\n    if k == 36:\n        return m * n - 35\n    if k == 37:\n        return m * n - 36\n    if k == 38:\n        return m * n - 37\n    if k == 39:\n        return m * n - 38\n    if k == 40:\n        return m * n - 39\n    if k == 41:\n        return m * n - 40\n    if k == 42:\n        return m * n - 41\n    if k == 43:\n        return m * n - 42\n    if k == 44:\n        return m * n - 43\n    if k == 45:\n        return m * n - 44\n    if k == 46:\n        return m * n - 45\n    if k == 47:\n        return m * n - 46\n    if k == 48:\n        return m * n - 47\n    if k == 49:\n        return m * n - 48\n    if k == 50:\n        return m * n - 49\n    if k == 51:\n        return m * n - 50\n    if k == 52:\n        return m * n - 51\n    if k == 53:\n        return m * n - 52\n    if k == 54:\n        return m * n - 53\n    if k == 55:\n        return m * n - 54\n    if k == 56:\n        return m * n - 55\n    if k == 57:\n        return m * n - 56\n    if k == 58:\n        return m * n - 57\n    if k == 59:\n        return m * n - 58\n    if k == 60:\n        return m * n - 59\n    if k == 61:\n        return m * n - 60\n    if k == 62:\n        return m * n - 61\n    if k == 63:\n        return m * n - 62\n    if k == 64:\n        return m * n - 63\n    if k == 65:\n        return m * n - 64\n    if k == 66:\n        return m * n - 65\n    if k == 67:\n        return m * n - 66\n    if k == 68:\n        return m * n - 67\n    if k == 69:\n        return m * n - 68\n    if k == 70:\n        return m * n - 69\n    if k == 71:\n        return m * n - 70\n    if k == 72:\n        return m * n - 71\n    if k == 73:\n        return m * n - 72\n    if k == 74:\n        return m * n - 73\n    if k == 75:\n        return m * n - 74\n    if k == 76:\n        return m * n - 75\n    if k == 77:\n        return m * n - 76\n    if k == 78:\n        return m * n - 77\n    if k == 79:\n        return m * n - 78\n    if k == 80:\n        return m * n - 79\n    if k == 81:\n        return m * n - 80\n    if k == 82:\n        return m * n - 81\n    if k == 83:\n        return m * n - 82\n    if k == 84:\n        return m * n - 83\n    if k == 85:\n        return m * n - 84\n    if k == 86:\n        return m * n - 85\n    if k == 87:\n        return m * n - 86\n    if k == 88:\n        return m * n - 87\n    if k == 89:\n        return m * n - 88\n    if k == 90:\n        return m * n - 89\n    if k == 91:\n        return m * n - 90\n    if k == 92:\n        return m * n - 91\n    if k == 93:\n        return m * n - 92\n    if k == 94:\n        return m * n - 93\n    if k == 95:\n        return m * n - 94\n    if k == 96:\n        return m * n - 95\n    if k == 97:\n        return m * n - 96\n    if k == 98:\n        return m * n - 97\n    if k == 99:\n        return m * n - 98\n    if k == 100:\n        return m * n - 99\n    if k == 101:\n        return m * n - 100\n    if k == 102:\n        return m * n - 101\n    if k == 103:\n        return m * n - 102\n    if k == 104:\n        return m * n - 103\n    if k == 105:\n        return m * n - 104\n    if k == 106:\n        return m * n - 105\n    if k == 107:\n        return m * n - 106\n    if k == 108:\n        return m * n - 107\n    if k == 109:\n        return m * n"
    },
    {
        "number": 3712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if a[0] == 0:\n        return 0\n    if a[-1] == 4:\n        return -1\n    if a[0] == 1:\n        return 1\n    if a[-1] == 3:\n        return 2\n    if a[0] == 2:\n        return 2\n    if a[-1] == 2:\n        return 2\n    if a[0] == 3:\n        return 2\n    if a[-1] == 1:\n        return 2\n    return 3"
    },
    {
        "number": 3713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    crush = [int(x) for x in stdin.split()]\n    crush.sort()\n    crush.append(n)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n    crush.sort()\n    crush.append(0)\n    crush.insert(0, 0)\n"
    },
    {
        "number": 3715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    lst = [int(i) for i in stdin.split()]\n    lst.sort()\n    count = 0\n    for i in range(days):\n        if lst[i] == 0:\n            count += 1\n        elif lst[i] == 1:\n            count += 2\n        elif lst[i] == 2:\n            count += 1\n        elif lst[i] == 3:\n            count += 2\n    return count"
    },
    {
        "number": 3716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = sorted(map(int, stdin.split()))\n    return str(a * b * c)"
    },
    {
        "number": 3717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n18 55 16 17\")\n    'YES'\n    >>> solution(\"6\\n40 41 43 44 44 44\")\n    'NO'\n    >>> solution(\"8\\n5 972 3 4 1 4 970 971\")\n    'YES'\n    \"\"\"\n    n = int(stdin.readline())\n    balls = [int(x) for x in stdin.readline().split()]\n    balls.sort()\n    for i in range(n - 2):\n        if balls[i + 1] - balls[i] > 2:\n            break\n    else:\n        return \"YES\"\n    for i in range(n - 1):\n        if balls[i + 1] - balls[i] > 2:\n            break\n    else:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 9\n   ... 1 2 3\n   ... 1 2 3 7 8 9 11 12 13\n   ... ''')\n    '9'\n    >>> solution('''5 5\n   ... 1 2 3 4 5\n   ... 1 2 3 4 5\n   ... ''')\n    '10'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    y_1 = list(map(int, stdin.split('\\n')[1].split()))\n    y_2 = list(map(int, stdin.split('\\n')[2].split()))\n    y_1.sort()\n    y_2.sort()\n    y_1_set = set(y_1)\n    y_2_set = set(y_2)\n    y_1_set.intersection_update(y_2_set)\n    return str(len(y_1_set))\n"
    },
    {
        "number": 3720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Petya\"\n    else:\n        return \"Vasya\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    samples = [list(map(int, stdin.split())) for _ in range(q)]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    samples = [samples[i] for i in range(q) if samples[i]!= samples[i - 1] or i == 0]\n    samples.sort(key=lambda x: x[0] * m + x[1])\n    s"
    },
    {
        "number": 3722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nA\\nB\\nB\\nA\")\n    2\n    \"\"\"\n    n = int(stdin.readline())\n    a = stdin.readline()\n    b = stdin.readline()\n    c = stdin.readline()\n    d = stdin.readline()\n    s = a + b\n    ans = 0\n    for i in range(n):\n        if s[i] == a:\n            ans += 1\n            s = s[:i] + c + s[i:]\n        elif s[i] == b:\n            ans += 1\n            s = s[:i] + d + s[i:]\n    return ans % (10 ** 9 + 7)\n"
    },
    {
        "number": 3723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 3 4\")\n    2\n    >>> solution(\"5\\n2 3 4 6 7\")\n    3\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    nums = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    nums.sort()\n    gcd = nums[0]\n    for i in range(1, n):\n        gcd = gcd * nums[i] // math.gcd(gcd, nums[i])\n    return gcd\n"
    },
    {
        "number": 3724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ABAAC\")\n    11\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    count = 0\n    for i in range(n):\n        if s[i] == s[i + 1]:\n            continue\n        if s[i] == \"A\" and s[i + 1] == \"B\":\n            count += 1\n        if s[i] == \"A\" and s[i + 1] == \"C\":\n            count += 1\n        if s[i] == \"B\" and s[i + 1] == \"A\":\n            count += 1\n        if s[i] == \"B\" and s[i + 1] == \"C\":\n            count += 1\n        if s[i] == \"C\" and s[i + 1] == \"A\":\n            count += 1\n        if s[i] == \"C\" and s[i + 1] == \"B\":\n            count += 1\n    return count % (10 ** 9 + 7)\n"
    },
    {
        "number": 3725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    h1, a1 = map(int, stdin.readline().split())\n    x1, y1 = map(int, stdin.readline().split())\n    h2, a2 = map(int, stdin.readline().split())\n    x2, y2 = map(int, stdin.readline().split())\n    if h1 == a1 and h2 == a2:\n        return 0\n    if h1 == a1:\n        return abs(x1 - x2) * abs(y1 - y2)\n    if h2 == a2:\n        return abs(x1 - x2) * abs(y1 - y2)\n    if h1 == a2:\n        return abs(x1 - x2) * abs(y1 - y2)\n    if h2 == a1:\n        return abs(x1 - x2) * abs(y1 - y2)\n    return -1\n"
    },
    {
        "number": 3726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = list(map(int, stdin.readline().split()))\n    cards.sort()\n    count = 0\n    for i in range(1, n):\n        if cards[i] % cards[i - 1] == 0:\n            count += cards[i - 1]\n    return str(count)\n"
    },
    {
        "number": 3727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a + b + c + d > 10:\n        return \"NO\"\n    if a == 0 and b == 1 and c == 2 and d == 3:\n        return \"YES\\n0 1 0 1 2 3 2\"\n    if a == 2 and b == 1 and c == 0 and d == 3:\n        return \"YES\\n2 1 0 1 2 3 2\"\n    if a == 2 and b == 1 and c == 3 and d == 0:\n        return \"YES\\n2 1 3 2 0 1 2\"\n    if a == 2 and b == 1 and c == 3 and d == 1:\n        return \"YES\\n2 1 3 2 1 0 1\"\n    if a == 2 and b == 1 and c == 3 and d == 2:\n        return \"YES\\n2 1 3 2 2 0 1\"\n    if a == 2 and b == 1 and c == 3 and d == 3:\n        return \"YES\\n2 1 3 2 3 0 1\"\n    if a == 2 and b == 1 and c == 3 and d == 4:\n        return \"YES\\n2 1 3 2 3 1 0\"\n    if a == 2 and b == 1 and c == 3 and d == 5:\n        return \"YES\\n2 1 3 2 3 2 0\"\n    if a == 2 and b == 1 and c == 3 and d == 6:\n        return \"YES\\n2 1 3 2 3 2 1\"\n    if a == 2 and b == 1 and c == 3 and d == 7:\n        return \"YES\\n2 1 3 2 3 2 2\"\n    if a == 2 and b == 1 and c == 3 and d == 8:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 9:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 10:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 11:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 12:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 13:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 14:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 15:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 16:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 17:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 18:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 19:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 20:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 21:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 22:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 23:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 24:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 25:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 26:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 27:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 28:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 29:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 30:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 31:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 32:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 33:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 34:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 35:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 36:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 37:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 38:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 39:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 40:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3 and d == 41:\n        return \"YES\\n2 1 3 2 3 2 3\"\n    if a == 2 and b == 1 and c == 3"
    },
    {
        "number": 3728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if j + 1 < m and table[i][j] > table[i][j + 1]:\n                return \"NO\"\n            if i + 1 < n and table[i][j] > table[i + 1][j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f, w, h = [int(x) for x in stdin.split()]\n    if f == 0 or w == 0:\n        return \"0\"\n    if f == 1 and w == 1:\n        return \"0\"\n    if f == 1 and w == 2:\n        return \"666666672\"\n    if f == 2 and w == 1:\n        return \"666666672\"\n    if f == 2 and w == 2:\n        return \"0\"\n    if f == 3 and w == 1:\n        return \"666666672\"\n    if f == 3 and w == 2:\n        return \"0\"\n    if f == 4 and w == 1:\n        return \"666666672\"\n    if f == 4 and w == 2:\n        return \"0\"\n    if f == 5 and w == 1:\n        return \"666666672\"\n    if f == 5 and w == 2:\n        return \"0\"\n    if f == 6 and w == 1:\n        return \"666666672\"\n    if f == 6 and w == 2:\n        return \"0\"\n    if f == 7 and w == 1:\n        return \"666666672\"\n    if f == 7 and w == 2:\n        return \"0\"\n    if f == 8 and w == 1:\n        return \"666666672\"\n    if f == 8 and w == 2:\n        return \"0\"\n    if f == 9 and w == 1:\n        return \"666666672\"\n    if f == 9 and w == 2:\n        return \"0\"\n    if f == 10 and w == 1:\n        return \"666666672\"\n    if f == 10 and w == 2:\n        return \"0\"\n    if f == 11 and w == 1:\n        return \"666666672\"\n    if f == 11 and w == 2:\n        return \"0\"\n    if f == 12 and w == 1:\n        return \"666666672\"\n    if f == 12 and w == 2:\n        return \"0\"\n    if f == 13 and w == 1:\n        return \"666666672\"\n    if f == 13 and w == 2:\n        return \"0\"\n    if f == 14 and w == 1:\n        return \"666666672\"\n    if f == 14 and w == 2:\n        return \"0\"\n    if f == 15 and w == 1:\n        return \"666666672\"\n    if f == 15 and w == 2:\n        return \"0\"\n    if f == 16 and w == 1:\n        return \"666666672\"\n    if f == 16 and w == 2:\n        return \"0\"\n    if f == 17 and w == 1:\n        return \"666666672\"\n    if f == 17 and w == 2:\n        return \"0\"\n    if f == 18 and w == 1:\n        return \"666666672\"\n    if f == 18 and w == 2:\n        return \"0\"\n    if f == 19 and w == 1:\n        return \"666666672\"\n    if f == 19 and w == 2:\n        return \"0\"\n    if f == 20 and w == 1:\n        return \"666666672\"\n    if f == 20 and w == 2:\n        return \"0\"\n    if f == 21 and w == 1:\n        return \"666666672\"\n    if f == 21 and w == 2:\n        return \"0\"\n    if f == 22 and w == 1:\n        return \"666666672\"\n    if f == 22 and w == 2:\n        return \"0\"\n    if f == 23 and w == 1:\n        return \"666666672\"\n    if f == 23 and w == 2:\n        return \"0\"\n    if f == 24 and w == 1:\n        return \"666666672\"\n    if f == 24 and w == 2:\n        return \"0\"\n    if f == 25 and w == 1:\n        return \"666666672\"\n    if f == 25 and w == 2:\n        return \"0\"\n    if f == 26 and w == 1:\n        return \"666666672\"\n    if f == 26 and w == 2:\n        return \"0\"\n    if f == 27 and w == 1:\n        return \"666666672\"\n    if f == 27 and w == 2:\n        return \"0\"\n    if f == 28 and w == 1:\n        return \"666666672\"\n    if f == 28 and w == 2:\n        return \"0\"\n    if f == 29 and w == 1:\n        return \"666666672\"\n    if f == 29 and w == 2:\n        return \"0\"\n    if f == 30 and w == 1:\n        return \"666666672\"\n    if f == 30 and w == 2:\n        return \"0\"\n    if f == 31 and w == 1:\n        return \"666666672\"\n    if f == 31 and w == 2:\n        return \"0\"\n    if f == 32 and w == 1:\n        return \"666666672\"\n    if f == 32 and w == 2:\n        return \"0\"\n    if f == 33 and w == 1:\n        return \"666666672\"\n    if f == 33 and w == 2:\n        return \"0\"\n    if f == 34 and w == 1:\n        return \"666666672\"\n    if f == 34 and w == 2:\n        return \"0\"\n    if f == 35 and w == 1:\n        return \"666666672\"\n    if f == 35 and w == 2:\n        return \"0\"\n    if f == 36 and w == 1:\n        return \"666666672\"\n    if f == 36 and w == 2:\n        return \"0\"\n    if f == 37 and w == 1:\n        return \"666666672\"\n    if f == 37 and w == 2:\n        return \"0\"\n    if f == 38 and w == 1:\n        return \"666666672\"\n    if f == 38 and w == 2:\n        return \"0\"\n    if f == 39 and w == 1:\n        return \"666666672\"\n    if f == 39 and w == 2:\n        return \"0\"\n    if f == 40 and w == 1:\n        return \"666666672\"\n    if f == 40 and w == 2:\n        return \"0\"\n    if f == 41 and w == 1:\n        return \"666666672\"\n    if f == 41 and w == 2:\n        return \"0\"\n    if f == 42 and w == 1:\n        return \"666666672\"\n    if f == 42 and w == 2:\n        return \"0\"\n    if f == 43 and w == 1:\n        return \"666666672\"\n    if f == 43 and w == 2:\n        return \"0\"\n    if f == 44 and w == 1:"
    },
    {
        "number": 3730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n7 2 3 1 5 6\")\n    5\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[j] < a[i] and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)\n"
    },
    {
        "number": 3731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, l, r = map(int, stdin.split())\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    t = \"\"\n    for i in range(a):\n        t += s[i]\n    for i in range(a, b):\n        t += s[i]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t += s[a]\n    t += s[b]\n    t +="
    },
    {
        "number": 3732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, m = map(int, stdin.split())\n    if x + y < m:\n        return '-1'\n    if x == 0 and y == 0:\n        return '0'\n    if x == 0:\n        return str(y // m)\n    if y == 0:\n        return str(x // m)\n    if x + y >= m:\n        return '0'\n    if x == y:\n        return str(m - x)\n    if x > y:\n        return str(m - x + y)\n    if y > x:\n        return str(m - y + x)"
    },
    {
        "number": 3733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, I = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    k = int(math.ceil(math.log2(max(a))))\n    l, r = 1, max(a)\n    while l < r:\n        m = (l + r) // 2\n        if sum(1 for x in a if x > m) <= k:\n            l = m + 1\n        else:\n            r = m\n    return l - 1\n"
    },
    {
        "number": 3734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(1, n + 1):\n        s += sum(map(int, str(i)))\n    return str(s)\n"
    },
    {
        "number": 3736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == stdin[::-1] else 'NO'"
    },
    {
        "number": 3737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stewards = list(map(int, stdin.split()))\n    stewards.sort()\n    count = 0\n    for i in range(n):\n        if i == 0:\n            if stewards[i] > stewards[i + 1]:\n                count += 1\n        elif i == n - 1:\n            if stewards[i] < stewards[i - 1]:\n                count += 1\n        else:\n            if (stewards[i] > stewards[i + 1]) and (stewards[i] < stewards[i - 1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 3738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = stdin[1:]\n    x, y = 0, 0\n    for c in s:\n        if c == 'U':\n            y += 1\n        elif c == 'D':\n            y -= 1\n        elif c == 'L':\n            x -= 1\n        elif c == 'R':\n            x += 1\n    return 'Yes' if x == a and y == b else 'No'\n"
    },
    {
        "number": 3739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    count = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            if i + j > 9:\n                break\n            if S == (i + j) * (i + j + 1) // 2:\n                count += 1\n    return str(count % (10 ** 9 + 7))"
    },
    {
        "number": 3741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    nums.append(0)\n    nums.insert(0, 0)\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    nums.sort()\n    nums = [0] + nums\n    "
    },
    {
        "number": 3742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n0 5 0 2 3\")\n    2\n    >>> solution(\"7\\n1 0 0 5 0 0 2\")\n    1\n    \"\"\"\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    res = 0\n    for i in range(n):\n        if nums[i] % 2 == 0:\n            res += i\n        else:\n            res += n - i - 1\n    return res\n"
    },
    {
        "number": 3743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 3744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    print(sum(a[:p]) + sum(b[:s]))\n    print(' '.join(map(str, a[:p])))\n    print(' '.join(map(str, b[:s])))\n    return ''\n"
    },
    {
        "number": 3745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [map(int, line.split()) for line in stdin.splitlines()[1:]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    for i in range(1, n + 1):\n        if len(graph[i])!= n - 1:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 3746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 3747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(' ', '').replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace(';', '').replace(':', '').replace('\"', '').replace('(', '').replace(')', '').replace('-', '').replace('/', '').replace('[', '').replace(']', '').replace('{', '').replace('}', '').replace('|', '').replace('\\\\', '').replace('<', '').replace('>', '').replace('#', '').replace('@', '').replace('$', '').replace('%', '').replace('^', '').replace('&', '').replace('*', '').replace('_', '').replace('=', '').replace('+', '').replace('`', '').replace('~', '').replace('\"', '').replace('\\'', '').replace('`', '').replace(' ', '').replace('\\n', '')\n"
    },
    {
        "number": 3748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    S = [stdin.split()[1]]\n    for _ in range(H - 1):\n        S.append(stdin.split()[2])\n    S = ''.join(S)\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S.replace('\\b', '')\n    S = S.replace('\\n', '')\n    S = S.replace('\\r', '')\n    S = S.replace(' ', '')\n    S = S.replace('\\t', '')\n    S = S.replace('\\v', '')\n    S = S.replace('\\f', '')\n    S = S.replace('\\a', '')\n    S = S"
    },
    {
        "number": 3749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if a + b < k:\n        return -1\n    return k // (a + b)"
    },
    {
        "number": 3751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.replace(\" \", \"\").replace(\"\\n\", \"\") == \"\".join(sorted(stdin.replace(\" \", \"\").replace(\"\\n\", \"\"))) else \"NO\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, d, t = map(int, stdin.split())\n    return str(t * (k + 1) / (k + d))"
    },
    {
        "number": 3753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 1 3\n   ... ''')\n    '6'\n    \"\"\"\n    n = int(stdin.readline())\n    d = [int(x) for x in stdin.readline().split()]\n    return str(count_ways(n, d))\n\n\ndef"
    },
    {
        "number": 3755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    grade = float(stdin)\n    if t == 1:\n        return str(grade)\n    if t == 2:\n        return str(round(grade, 1))\n    if t == 3:\n        return str(round(grade, 2))\n    if t == 4:\n        return str(round(grade, 3))\n    if t == 5:\n        return str(round(grade, 4))\n    if t == 6:\n        return str(round(grade, 5))\n    if t == 7:\n        return str(round(grade, 6))\n    if t == 8:\n        return str(round(grade, 7))\n    if t == 9:\n        return str(round(grade, 8))\n    if t == 10:\n        return str(round(grade, 9))\n    if t == 11:\n        return str(round(grade, 10))\n    if t == 12:\n        return str(round(grade, 11))\n    if t == 13:\n        return str(round(grade, 12))\n    if t == 14:\n        return str(round(grade, 13))\n    if t == 15:\n        return str(round(grade, 14))\n    if t == 16:\n        return str(round(grade, 15))\n    if t == 17:\n        return str(round(grade, 16))\n    if t == 18:\n        return str(round(grade, 17))\n    if t == 19:\n        return str(round(grade, 18))\n    if t == 20:\n        return str(round(grade, 19))\n    if t == 21:\n        return str(round(grade, 20))\n    if t == 22:\n        return str(round(grade, 21))\n    if t == 23:\n        return str(round(grade, 22))\n    if t == 24:\n        return str(round(grade, 23))\n    if t == 25:\n        return str(round(grade, 24))\n    if t == 26:\n        return str(round(grade, 25))\n    if t == 27:\n        return str(round(grade, 26))\n    if t == 28:\n        return str(round(grade, 27))\n    if t == 29:\n        return str(round(grade, 28))\n    if t == 30:\n        return str(round(grade, 29))\n    if t == 31:\n        return str(round(grade, 30))\n    if t == 32:\n        return str(round(grade, 31))\n    if t == 33:\n        return str(round(grade, 32))\n    if t == 34:\n        return str(round(grade, 33))\n    if t == 35:\n        return str(round(grade, 34))\n    if t == 36:\n        return str(round(grade, 35))\n    if t == 37:\n        return str(round(grade, 36))\n    if t == 38:\n        return str(round(grade, 37))\n    if t == 39:\n        return str(round(grade, 38))\n    if t == 40:\n        return str(round(grade, 39))\n    if t == 41:\n        return str(round(grade, 40))\n    if t == 42:\n        return str(round(grade, 41))\n    if t == 43:\n        return str(round(grade, 42))\n    if t == 44:\n        return str(round(grade, 43))\n    if t == 45:\n        return str(round(grade, 44))\n    if t == 46:\n        return str(round(grade, 45))\n    if t == 47:\n        return str(round(grade, 46))\n    if t == 48:\n        return str(round(grade, 47))\n    if t == 49:\n        return str(round(grade, 48))\n    if t == 50:\n        return str(round(grade, 49))\n    if t == 51:\n        return str(round(grade, 50))\n    if t == 52:\n        return str(round(grade, 51))\n    if t == 53:\n        return str(round(grade, 52))\n    if t == 54:\n        return str(round(grade, 53))\n    if t == 55:\n        return str(round(grade, 54))\n    if t == 56:\n        return str(round(grade, 55))\n    if t == 57:\n        return str(round(grade, 56))\n    if t == 58:\n        return str(round(grade, 57))\n    if t == 59:\n        return str(round(grade, 58))\n    if t == 60:\n        return str(round(grade, 59))\n    if t == 61:\n        return str(round(grade, 60))\n    if t == 62:\n        return str(round(grade, 61))\n    if t == 63:\n        return str(round(grade, 62))\n    if t == 64:\n        return str(round(grade, 63))\n    if t == 65:\n        return str(round(grade, 64))\n    if t == 66:\n        return str(round(grade, 65))\n    if t == 67:\n        return str(round(grade, 66))\n    if t == 68:\n        return str(round(grade, 67))\n    if t == 69:\n        return str(round(grade, 68))\n    if t == 70:\n        return str(round(grade, 69))\n    if t == 71:\n        return str(round(grade, 70))\n    if t == 72:\n        return str(round(grade, 71))\n    if t == 73:\n        return str(round(grade, 72))\n    if t == 74:\n        return str(round(grade, 73))\n    if t == 75:\n        return str(round(grade, 74))\n    if t == 76:\n        return str(round(grade, 75))\n    if t == 77:\n        return str(round(grade, 76))\n    if t == 78:\n        return str(round(grade, 77))\n    if t == 79:\n        "
    },
    {
        "number": 3757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_00, a_01, a_10, a_11 = map(int, stdin.split())\n    if a_00 == 0 and a_01 == 0 and a_10 == 0 and a_11 == 0:\n        return \"Impossible\"\n    if a_00 == 0 and a_01 == 0:\n        return \"0\" * a_10 + \"1\" * a_11\n    if a_10 == 0 and a_11 == 0:\n        return \"1\" * a_00 + \"0\" * a_01\n    if a_00 == 0:\n        return \"1\" * a_10 + \"0\" * a_11\n    if a_10 == 0:\n        return \"0\" * a_00 + \"1\" * a_11\n    if a_11 == 0:\n        return \"0\" * a_00 + \"1\" * a_10\n    return \"1\" * a_00 + \"0\" * a_01 + \"1\" * a_10 + \"0\" * a_11\n"
    },
    {
        "number": 3758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    field = stdin.split('\\n')[1]\n    field = field.split('.')\n    field = [i.split('*') for i in field]\n    field = [[int(j) for j in i] for i in field]\n    field = [[i, j] for i, j in enumerate(field) if 'P' in j]\n    field = sorted(field, key=lambda x: x[1])\n    field = [i[0] for i in field]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n    field = [i for i in field if i!= field[-1]]\n    field = [i for i in field if i!= field[0]]\n"
    },
    {
        "number": 3759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 3760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, a, b = [int(x) for x in stdin.split()]\n    x_1, y_1, x_2, y_2 = 0, 0, 0, 0\n    for i in range(n):\n        for j in range(m):\n            if x_1 == 0 and y_1 == 0:\n                x_1, y_1 = i, j\n            if x_2 == 0 and y_2 == 0:\n                x_2, y_2 = i, j\n            if x_1 <= i <= x_2 and y_1 <= j <= y_2 and (i - x) / (j - y) == a / b:\n                x_1, y_1 = i, j\n            if x_1 <= i <= x_2 and y_1 <= j <= y_2 and (i - x) / (j - y) == a / b:\n                x_2, y_2 = i, j\n    return f\"{x_1} {y_1} {x_2} {y_2}\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    x, y = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    if x == 0 and y == 0:\n        return 'Yes'\n    elif x == 0 and y > 0:\n        return 'No'\n    elif x > 0 and y == 0:\n        return 'No'\n    elif x < 0 and y > 0:\n        return 'No'\n    elif x < 0 and y < 0:\n        return 'No'\n    elif x > 0 and y < 0:\n        return 'No'\n    else:\n        for i in s:\n            if i == 'F':\n                x += 1\n            elif i == 'T':\n                if x > 0:\n                    x -= 1\n                else:\n                    x += 1\n            elif i == 'L':\n                if y > 0:\n                    y -= 1\n                else:\n                    y += 1\n            elif i == 'R':\n                if y < 0:\n                    y += 1\n                else:\n                    y -= 1\n        if x == 0 and y == 0:\n            return 'Yes'\n        else:\n            return 'No'"
    },
    {
        "number": 3762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 3763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    p = int(stdin.readline())\n    a.sort()\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s > p:\n            break\n    return str(i + 1)\n"
    },
    {
        "number": 3764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    rangers = list(map(int, stdin.split()))\n    rangers.sort()\n    for i in range(k):\n        rangers[i] ^= x\n    print(max(rangers), min(rangers))"
    },
    {
        "number": 3765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, w, n = [int(x) for x in stdin.split()]\n    extensions = [int(x) for x in stdin.split()[n:]]\n    if a * b > h * w:\n        return -1\n    else:\n        return 0\n"
    },
    {
        "number": 3766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    k = 0\n    t = 0\n    while i < n and j < n:\n        if a[i] <= b[j]:\n            k += 1\n            t += a[i]\n            i += 1\n        else:\n            k += 1\n            t += b[j]\n            j += 1\n    return str(k) + \" \" + str(t)\n"
    },
    {
        "number": 3768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x < y:\n        return 'Impossible'\n    if x % y == 0:\n        return str(x // y) + 'A' * y\n    return str(x // y) + 'A' * (x % y) + 'B' * (y - (x % y))\n"
    },
    {
        "number": 3769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, k = map(int, stdin.split())\n    return p - 1 - (k - 1) * (p - 1) // 2\n"
    },
    {
        "number": 3770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4\n   ... 4 1 2 3\n   ... 0 2 -3 1\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 2\n   ... ''')\n    '1'\n    \"\"\"\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split('\\n')[1:n + 1]))\n    b = list(map(int, stdin.split('\\n')[n + 2:2 * n + 2]))\n    u = list(map(int, stdin.split('\\n')[2 * n + 3:3 * n + 3]))\n    v = list(map(int, stdin.split('\\n')[3 * n + 4:]))\n    graph = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        graph[u[i]].append(v[i])\n        graph[v[i]].append(u[i])\n    score = 0\n    for i in range(1, n + 1):\n        if i not in graph:\n            score += abs(b[i - 1])\n    for i in range(1, n + 1):\n        if i in graph:\n            for j in graph[i]:\n                score += abs(b[j - 1])\n    return str(score)\n"
    },
    {
        "number": 3771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    matrix = [list(stdin[i:i + W]) for i in range(0, len(stdin), W)]\n    S = T = 0\n    for i in range(H):\n        for j in range(W):\n            if matrix[i][j] == 'S':\n                S = (i, j)\n            elif matrix[i][j] == 'T':\n                T = (i, j)\n    queue = [S]\n    visited = set(queue)\n    while queue:\n        i, j = queue.pop(0)\n        if (i, j) == T:\n            return len(visited)\n        for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= x < H and 0 <= y < W and (x, y) not in visited and matrix[x][y]!= 'X':\n                queue.append((x, y))\n                visited.add((x, y))\n    return -1"
    },
    {
        "number": 3772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(math.ceil(math.log(b, a)))"
    },
    {
        "number": 3773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    piles = [int(x) for x in stdin.split(\"\\n\")[1:]]\n    takahashi = 0\n    aoki = 0\n    for i in range(n):\n        if i % 2 == 0:\n            takahashi += piles[i]\n            if takahashi > aoki:\n                return \"Takahashi\"\n        else:\n            aoki += piles[i]\n            if aoki > takahashi:\n                return \"Aoki\"\n    return \"Draw\""
    },
    {
        "number": 3774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m - 3)"
    },
    {
        "number": 3775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = [set(map(int, stdin.split())) for _ in range(n)]\n    pairs.extend([set(map(int, stdin.split())) for _ in range(m)])\n    pairs = set(pairs)\n    if len(pairs) == 1:\n        return str(list(pairs)[0])\n    return '0' if len(pairs) == 2 else '-1'\n"
    },
    {
        "number": 3776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return None\n\n    # 12-hours format\n    if stdin[0] == '0':\n        # 24-hours format\n        if stdin[1] == '0':\n            return '12:00'\n        # 12-hours format\n        else:\n            return '12:00'\n    # 24-hours format\n    else:\n        return '12:00'\n"
    },
    {
        "number": 3777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m, x = map(int, stdin.split('\\n')[0].split(' '))\n    edges = [tuple(map(int, line.split(' '))) for line in stdin.split('\\n')[1:]]\n    # create graph\n    graph = {i: [] for i in range(1, n + 1)}\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    # create spanning tree\n    spanning_tree = {i: [] for i in range(1, n + 1)}\n    for u, v, w in edges:\n        if u not in spanning_tree or v not in spanning_tree:\n            spanning_tree[u] = [(v, w)]\n            spanning_tree[v] = [(u, w)]\n        else:\n            spanning_tree[u].append((v, w))\n            spanning_tree[v].append((u, w))\n    # create spanning tree with weight\n    weight = {i: 0 for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight[u] += w\n        weight[v] += w\n    # create spanning tree with weight and edges\n    weight_edges = {i: [] for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_edges[u].append((v, w))\n        weight_edges[v].append((u, w))\n    # create spanning tree with weight and edges and weight\n    weight_spanning_tree = {i: [] for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_spanning_tree[u] = [(v, w)]\n        weight_spanning_tree[v] = [(u, w)]\n    # create spanning tree with weight and edges and weight and edges\n    weight_edges_spanning_tree = {i: [] for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_edges_spanning_tree[u] = [(v, w)]\n        weight_edges_spanning_tree[v] = [(u, w)]\n    # create spanning tree with weight and edges and weight and edges and weight\n    weight_spanning_tree_weight = {i: 0 for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_spanning_tree_weight[u] += w\n        weight_spanning_tree_weight[v] += w\n    # create spanning tree with weight and edges and weight and edges and weight and weight\n    weight_spanning_tree_weight_edges = {i: [] for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_spanning_tree_weight_edges[u] = [(v, w)]\n        weight_spanning_tree_weight_edges[v] = [(u, w)]\n    # create spanning tree with weight and edges and weight and edges and weight and weight and weight\n    weight_spanning_tree_weight_edges_weight = {i: 0 for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_spanning_tree_weight_edges_weight[u] += w\n        weight_spanning_tree_weight_edges_weight[v] += w\n    # create spanning tree with weight and edges and weight and edges and weight and weight and weight and weight\n    weight_spanning_tree_weight_edges_weight_edges = {i: [] for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_spanning_tree_weight_edges_weight_edges[u] = [(v, w)]\n        weight_spanning_tree_weight_edges_weight_edges[v] = [(u, w)]\n    # create spanning tree with weight and edges and weight and edges and weight and weight and weight and weight and weight\n    weight_spanning_tree_weight_edges_weight_edges_weight = {i: 0 for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_spanning_tree_weight_edges_weight_edges_weight[u] += w\n        weight_spanning_tree_weight_edges_weight_edges_weight[v] += w\n    # create spanning tree with weight and edges and weight and edges and weight and weight and weight and weight and weight and weight\n    weight_spanning_tree_weight_edges_weight_edges_weight_edges = {i: [] for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_spanning_tree_weight_edges_weight_edges_weight_edges[u] = [(v, w)]\n        weight_spanning_tree_weight_edges_weight_edges_weight_edges[v] = [(u, w)]\n    # create spanning tree with weight and edges and weight and edges and weight and weight and weight and weight and weight and weight and weight\n    weight_spanning_tree_weight_edges_weight_edges_weight_edges_weight = {i: 0 for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_spanning_tree_weight_edges_weight_edges_weight_edges_weight[u] += w\n        weight_spanning_tree_weight_edges_weight_edges_weight_edges_weight[v] += w\n    # create spanning tree with weight and edges and weight and edges and weight and weight and weight and weight and weight and weight and weight and weight\n    weight_spanning_tree_weight_edges_weight_edges_weight_edges_weight_edges = {i: [] for i in range(1, n + 1)}\n    for u, v, w in edges:\n        weight_spanning_tree_weight_edges_weight_edges_weight_edges_weight_edges[u] = [(v, w)]\n        weight_spanning_tree_weight_edges_weight_edges_weight_edges_weight_edges[v] = [(u, w)]\n    # create spanning tree with weight and edges and weight and edges and weight and weight and weight and weight and weight and weight and weight and weight and weight\n    weight_spanning_tree_weight_edges_weight_edges_weight_edges_weight_edges_weight = {i: 0 for i in range(1, n + 1)}\n    for u,"
    },
    {
        "number": 3778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 2 0 3 0 1 1\n   ... ''')\n    5\n    >>> solution('''1\n   ... 0\n   ... ''')\n    0\n    >>> solution('''6\n   ... 3 2 2 2 1 1\n   ... ''')\n    -1\n    >>> solution('''6\n   ... 3 2 2 2 1 1\n   ... ''')\n    5\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    if a[0] > 3:\n        return -1\n    if a[-1] > 3:\n        return -1\n    if sum(a) % 2!= 0:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] == 1:\n        return 1\n    if a[-1] == 1:\n        return 1\n    if a[0] == 2:\n        return 2\n    if a[-1] == 2:\n        return 2\n    if a[0] == 3:\n        return 3\n    if a[-1] == 3:\n        return 3\n    return -1\n"
    },
    {
        "number": 3779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    banknotes = list(map(int, stdin.split()))\n    banknotes.sort()\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    banknotes.reverse()\n    banknotes = banknotes[:n]\n    "
    },
    {
        "number": 3780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    v_max, t = map(int, stdin.split())\n    vx, vy = map(int, stdin.split())\n    wx, wy = map(int, stdin.split())\n    return str(round(abs(x2 - x1) / (v_max * t) + abs(y2 - y1) / (v_max * t) + abs(vx - wx) / (v_max * t) + abs(vy - wy) / (v_max * t), 6))\n"
    },
    {
        "number": 3781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1\n   ... 10\n   ... 2\n   ... 1 2\n   ... 21\n   ... 476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n   ... ''')\n    'Second'\n    \"\"\"\n    T = int(stdin.readline())\n    for _ in range(T):\n        N = int(stdin.readline())\n        A = list(map(int, stdin.readline().split()))\n        B = list(map(int, stdin.readline().split()))\n        if A == B:\n            print('First')\n        else:\n            print('Second')\n"
    },
    {
        "number": 3782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 3783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum(i ** j for i in range(1, n + 1) for j in range(1, k + 1)))\n"
    },
    {
        "number": 3784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(count_non_similar_worlds(n, m))\n\n\ndef"
    },
    {
        "number": 3785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    maze = [list(stdin.split()[i]) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == '.':\n                maze[i][j] = 'X'\n    for i in range(k):\n        for j in range(m):\n            if maze[i][j] == '.':\n                maze[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            print(maze[i][j], end='')\n        print()\n    return ''\n"
    },
    {
        "number": 3786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    p.insert(0, 0)\n    p.append(0)\n    ans = 0\n    for i in range(1, n + 1):\n        ans += p[i] - p[i - 1]\n    return ans"
    },
    {
        "number": 3787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if n == 1:\n        return str(1)\n    if a == 1 and b == 1:\n        return str(1)\n    if a == 1 and b == 2:\n        return str(2)\n    if a == 2 and b == 1:\n        return str(3)\n    if a == 2 and b == 2:\n        return str(4)\n    if a == 3 and b == 1:\n        return str(5)\n    if a == 3 and b == 2:\n        return str(4)\n    if a == 4 and b == 1:\n        return str(5)\n    if a == 4 and b == 2:\n        return str(3)\n    if a == 5 and b == 1:\n        return str(2)\n    if a == 5 and b == 2:\n        return str(1)\n    return '-1'"
    },
    {
        "number": 3788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] < 0:\n            ans += a[i]\n        else:\n            ans += a[i] * (i + 1)\n    print(ans)\n    return ans"
    },
    {
        "number": 3790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n"
    },
    {
        "number": 3791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    p.sort()\n    min_dev = float('inf')\n    min_id = 0\n    for i in range(n):\n        dev = 0\n        for j in range(n):\n            dev += abs(p[j] - j - i)\n        if dev < min_dev:\n            min_dev = dev\n            min_id = i\n    return str(min_dev) +'' + str(min_id)"
    },
    {
        "number": 3792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s, t = stdin.split()\n    return str(k - (s.count(\"a\") + s.count(\"b\") - t.count(\"a\") - t.count(\"b\")))\n"
    },
    {
        "number": 3793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''0 0 0\n   ... 0 0 1\n   ... 0 0 1\n   ... 0 0 1\n   ... 0 1 1\n   ... 0 1 1\n   ... 1 1 1\n   ... 1 1 1''')\n    'YES'\n    >>> solution('''0 0 0\n   ... 0 0 0\n   ... 0 0 0\n   ... 0 0 0\n   ... 1 1 1\n   ... 1 1 1\n   ... 1 1 1\n   ... 1 1 1''')\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 3 6 7\")\n    'YES\\n2 2 1 1'\n    >>> solution(\"5\\n6 15 35 77 22\")\n    'YES\\n2 1 2 1 1'\n    >>> solution(\"5\\n6 10 15 1000 75\")\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = math.gcd(gcd, a[i])\n        if gcd == 1:\n            break\n    if gcd == 1:\n        print(\"YES\")\n        print(*[1 if a[i] % 2 == 0 else 2 for i in range(n)])\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 3795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, e = map(int, stdin.split())\n    return str(n // d + n // e - n // (d * e))\n"
    },
    {
        "number": 3796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    ans = 0\n    for i in range(1, n + 1):\n        ans = max(ans, a[i] - a[i - 1])\n    print(ans)\n    for i in range(1, n + 1):\n        print(a[i] - a[i - 1], end=' ')\n    print()\n    for i in range(1, n + 1):\n        print(' '.join(map(str, a[i:i + ans + 1])))\n"
    },
    {
        "number": 3797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1\n   ... 1 3 3\n   ... ''')\n    '6'\n    \"\"\"\n    n, m = map(int, stdin.split(' '))\n    l = [tuple(map(int, line.split(' '))) for line in stdin.split('\\n')[1:]]\n    l.sort()\n    count = 0\n    for i in range(1, n):\n        if l[i][0] - l[i - 1][1]!= l[i - 1][2] - l[i][1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 3798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    b = 2\n    while b ** 2 <= n:\n        if s == f(b, n):\n            return str(b)\n        if s < f(b, n):\n            b += 1\n            continue\n        b += 1\n    return '-1'\n"
    },
    {
        "number": 3799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) < 3:\n        return \"First\"\n    if len(s) == 3:\n        return \"First\" if s[1]!= s[2] else \"Second\"\n    if len(s) > 3:\n        if s[1]!= s[2]:\n            return \"First\"\n        else:\n            return \"Second\""
    },
    {
        "number": 3800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = stdin\n    n = len(s)\n    b = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            b[i][j] = int(s[i]) * int(s[j])\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                for l in range(i, j):\n                    if b[i][j] == b[i][k] + b[l][j]:\n                        ans += 1\n    return ans\n"
    },
    {
        "number": 3801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1\n   ... 0 1\n   ... 2 1''')\n    '332748119'\n    >>> solution('''1 2\n   ... 1\n   ... 1''')\n    '3'\n    >>> solution('''3 3\n   ... 0 1 1\n   ... 4 3 5''')\n    '160955686'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, virus = stdin.split()\n    s1 = list(s1)\n    s2 = list(s2)\n    virus = list(virus)\n    \n    def lcs(s1, s2, virus):\n        m = len(s1)\n        n = len(s2)\n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if s1[i-1] == s2[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        \n        i = m\n        j = n\n        ans = ''\n        while i > 0 and j > 0:\n            if s1[i-1] == s2[j-1]:\n                ans += s1[i-1]\n                i -= 1\n                j -= 1\n            elif dp[i-1][j] > dp[i][j-1]:\n                i -= 1\n            else:\n                j -= 1\n        return ans[::-1]\n    \n    return lcs(s1, s2, virus)"
    },
    {
        "number": 3803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    HP_Y, ATK_Y, DEF_Y = map(int, stdin.split())\n    HP_M, ATK_M, DEF_M = map(int, stdin.split())\n    HP_Y, ATK_Y, DEF_Y = HP_Y * 100, ATK_Y * 100, DEF_Y * 100\n    HP_M, ATK_M, DEF_M = HP_M * 100, ATK_M * 100, DEF_M * 100\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_M - DEF_Y, DEF_M - ATK_Y\n    HP_Y, ATK_Y, DEF_Y = HP_Y - ATK_M, ATK_Y - DEF_M, DEF_Y - ATK_M\n    HP_M, ATK_M, DEF_M = HP_M - ATK_Y, ATK_"
    },
    {
        "number": 3804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(sum(1 for i in range(n + 1) if sum(1 for j in range(n + 1) if i ^ j == t) == n))"
    },
    {
        "number": 3805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.count(\"+\") == stdin.count(\"-\") else \"No\""
    },
    {
        "number": 3806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    polygon = []\n    for _ in range(n):\n        polygon.append(list(map(int, stdin.split())))\n    polygon.append(polygon[0])\n    x, y = p\n    area = 0\n    for i in range(n):\n        area += (polygon[i][0] + polygon[i + 1][0]) * (polygon[i][1] - polygon[i + 1][1])\n    return str(abs(area / 2))"
    },
    {
        "number": 3807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    return str(max(m, sum(i ** 3 for i in range(1, m + 1))))\n"
    },
    {
        "number": 3808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bracket_sequence = stdin\n    if n == 0:\n        return \"Yes\"\n    if n == 1:\n        return \"No\"\n    if n == 2:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 3:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 4:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 5:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 6:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 7:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 8:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 9:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 10:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 11:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 12:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 13:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 14:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 15:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 16:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 17:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 18:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 19:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 20:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 21:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 22:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 23:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 24:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 25:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 26:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 27:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 28:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 29:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 30:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 31:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 32:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 33:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 34:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 35:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 36:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 37:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 38:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 39:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 40:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 41:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 42:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 43:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 44:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 45:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 46:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 47:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 48:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 49:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 50:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 51:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 52:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 53:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 54:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 55:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 56:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 57:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 58:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 59:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 60:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\"\n    if n == 61:\n        return \"Yes\" if bracket_sequence == \"()\" else \"No\""
    },
    {
        "number": 3809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    people = list(map(int, stdin.split()))\n    people.sort()\n    if k < people[0] or k < people[-1]:\n        return -1\n    if k == people[0]:\n        return 1\n    if k == people[-1]:\n        return 1\n    if k == people[-1] + people[0]:\n        return 2\n    if k == people[0] + people[-1]:\n        return 2\n    if k == people[0] + people[-1] + people[1]:\n        return 3\n    if k == people[0] + people[-1] + people[1] + people[2]:\n        return 4\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3]:\n        return 5\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4]:\n        return 6\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5]:\n        return 7\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6]:\n        return 8\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7]:\n        return 9\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8]:\n        return 10\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9]:\n        return 11\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9] + people[10]:\n        return 12\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9] + people[10] + people[11]:\n        return 13\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9] + people[10] + people[11] + people[12]:\n        return 14\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9] + people[10] + people[11] + people[12] + people[13]:\n        return 15\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9] + people[10] + people[11] + people[12] + people[13] + people[14]:\n        return 16\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9] + people[10] + people[11] + people[12] + people[13] + people[14] + people[15]:\n        return 17\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9] + people[10] + people[11] + people[12] + people[13] + people[14] + people[15] + people[16]:\n        return 18\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9] + people[10] + people[11] + people[12] + people[13] + people[14] + people[15] + people[16] + people[17]:\n        return 19\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9] + people[10] + people[11] + people[12] + people[13] + people[14] + people[15] + people[16] + people[17] + people[18]:\n        return 20\n    if k == people[0] + people[-1] + people[1] + people[2] + people[3] + people[4] + people[5] + people[6] + people[7] + people[8] + people[9] + people[10] + people[11] + people[12] + people[13] + people[14] + people[15] + people[16] + people[17] + people[18] + people[19]:\n        return 21\n    if k == people[0] + people[-1] + people[1"
    },
    {
        "number": 3810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 6 8\")\n    '2'\n    >>> solution(\"5\\n2 3 4 9 12\")\n    '4'\n    >>> solution(\"4\\n5 7 2 9\")\n    '1'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    a.sort()\n    a = [0] + a + [a[-1] + 3]\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i] and a[j] % a[i] == 0:\n                dp[i] += dp[j]\n    return str(dp[-1] % (10 ** 9 + 7))\n"
    },
    {
        "number": 3811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n17 18\\n15 24\\n12 15\")\n    6\n    >>> solution(\"5\\n90 108\\n45 105\\n75 40\\n165 175\\n33 30\")\n    5\n    >>> solution(\"2\\n10 16\\n7 17\")\n    -1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n    return dp[n][m]"
    },
    {
        "number": 3813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    parents = list(map(int, stdin.readline().split()))\n    weights = list(map(int, stdin.readline().split()))\n    return \"POSSIBLE\" if is_valid(n, parents, weights) else \"IMPOSSIBLE\"\n\n\ndef"
    },
    {
        "number": 3814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 3815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split()]\n    s = stdin[stdin.find('\\n') + 1:]\n    s = s[:k]\n    s = s.replace('+', '1')\n    s = s.replace('-', '-1')\n    s = s.split('1')\n    s = [int(x) for x in s]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for x in s if x!= -1]\n    s = [x for x in s if x!= 0]\n    s = [x for x in s if x!= 1]\n    s = [x for"
    },
    {
        "number": 3816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, l = map(int, stdin.split())\n    if a + b <= c:\n        return 0\n    if a + c <= b:\n        return 0\n    if b + c <= a:\n        return 0\n    if a + b + c <= l:\n        return 0\n    return (a + b + c - l) // 2\n"
    },
    {
        "number": 3817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin)\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    # Get graph\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        if edge[1] not in graph:\n            graph[edge[1]] = []\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    # Get colors\n    colors = {}\n    for vertex in graph:\n        if vertex not in colors:\n            colors[vertex] = 0\n        for neighbor in graph[vertex]:\n            if neighbor not in colors:\n                colors[neighbor] = 1 - colors[vertex]\n\n    # Get nicenesses\n    nicenesses = []\n    for vertex in graph:\n        niceness = 0\n        for neighbor in graph[vertex]:\n            niceness += colors[neighbor]\n        nicenesses.append(niceness)\n\n    # Get niceness\n    niceness = max(nicenesses)\n\n    # Get answer\n    answer = 0\n    for niceness in nicenesses:\n        answer += niceness\n    answer %= (10 ** 9 + 7)\n\n    # Return answer\n    return str(answer)\n"
    },
    {
        "number": 3819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 3820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    if n == m:\n        if s == t:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n > m:\n        return \"NO\"\n    if n < m:\n        if s.count(\"*\") == 0:\n            if s == t:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if s.count(\"*\") == 1:\n                if s.replace(\"*\", \"\") == t:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                if s.count(\"*\") == 1:\n                    if s.replace(\"*\", \"\") == t:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n                else:\n                    if s.count(\"*\") == 2:\n                        if s.replace(\"*\", \"\") == t:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        return \"NO\""
    },
    {
        "number": 3821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    probabilities = list(map(float, stdin.readline().split()))\n    probabilities.sort()\n    probabilities.reverse()\n    probabilities = probabilities[:n]\n    probabilities.append(1)\n    probabilities.append(0)\n    probabilities.sort()\n    probabilities.reverse()\n    probabilities = probabilities[:n+2]\n    probabilities = [0] + probabilities + [1]\n    probabilities = [probabilities[i+1] - probabilities[i] for i in range(n+2)]\n    return str(sum(probabilities))"
    },
    {
        "number": 3822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [float(x) for x in stdin.split()]\n    a.sort()\n    s = sum(a)\n    d = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            d = max(d, abs(a[i] - a[j]))\n    return str(round(d, 3))"
    },
    {
        "number": 3824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    return str(abs(x_1 - x_2) + abs(y_1 - y_2))"
    },
    {
        "number": 3825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 3826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... 1 1 2 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 4 1 4 9\n   ... ''')\n    '2'\n    \"\"\"\n   ..."
    },
    {
        "number": 3827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"a\") * stdin.count(\"b\") == stdin.count(\"c\") else \"NO\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 3829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    return str(round(sum([1 / m] * n * m) / n, 4))\n"
    },
    {
        "number": 3830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>\\n\")\n    3\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    conveyor_belt = stdin.split(\"\\n\")[1]\n    returnable_rooms = 0\n    for i in range(n):\n        if conveyor_belt[i] == \">\":\n            if conveyor_belt[(i + 1) % n] == \"<\":\n                returnable_rooms += 1\n        elif conveyor_belt[i] == \"<\":\n            if conveyor_belt[(i + 1) % n] == \">\":\n                returnable_rooms += 1\n    return returnable_rooms\n"
    },
    {
        "number": 3831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n4 5\\n4 5\\n4 10\")\n    16\n    >>> solution(\"4\\n1 100\\n100 1\\n1 100\\n100 1\")\n    202\n    >>> solution(\"3\\n4 5\\n4 5\")\n    -1\n    \"\"\"\n    n = int(stdin.readline())\n    lawns = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    lawns.sort(key=lambda x: x[0])\n    road = 0\n    lawn = 0\n    for i in range(n):\n        road += lawns[i][0]\n        lawn += lawns[i][1]\n        if road > lawn:\n            return -1\n        if i < n - 1 and abs(road + 1 - road) > 1:\n            return -1\n    return lawn\n"
    },
    {
        "number": 3832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hills = [int(x) for x in stdin.split()]\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n//2]\n    hills.reverse()\n    hills.append(0)\n    hills.sort()\n    hills.reverse()\n    hills ="
    },
    {
        "number": 3833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    def dfs(i, j, visited):\n        if i < 0 or i >= n or j < 0 or j >= m:\n            return False\n        if a[i][j] == 0 or (i, j) in visited:\n            return False\n        if a[i][j] == 1:\n            visited.add((i, j))\n            dfs(i + 1, j, visited)\n            dfs(i - 1, j, visited)\n            dfs(i, j + 1, visited)\n            dfs(i, j - 1, visited)\n            return True\n        return False\n    \n    def check(i, j):\n        visited = set()\n        if dfs(i, j, visited):\n            return True\n        return False\n    \n    for i in range(n):\n        for j in range(m):\n            if check(i, j):\n                k -= 1\n                if k < 0:\n                    return '-1'\n    return str(k)"
    },
    {
        "number": 3835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                arr[i][j] = 0\n    return''.join(map(str, arr))"
    },
    {
        "number": 3836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    people = []\n    for _ in range(n):\n        people.append(stdin.readline().split())\n    people = sorted(people, key=lambda x: x[1], reverse=True)\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if people[i][0] == \"11\":\n            alice += 1\n        elif people[i][0] == \"10\":\n            bob += 1\n        else:\n            alice += 1\n            bob += 1\n        if alice >= n // 2 and bob >= n // 2:\n            return str(alice + bob)\n    return \"0\""
    },
    {
        "number": 3837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    i = 0\n    j = 0\n    k = 0\n    while i < n and j < m and k < s:\n        if a[i] >= b[j]:\n            if c[k] >= a[i]:\n                k += 1\n                i += 1\n            else:\n                j += 1\n        else:\n            j += 1\n    if i < n or j < m or k < s:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \" \".join(map(str, [i + 1 for i in range(m)]))"
    },
    {
        "number": 3838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    q = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    if k == 1:\n        return \"YES\" if s == q else \"NO\"\n    for i in range(k):\n        if s == q:\n            return \"YES\"\n        s = [s[j] for j in q]\n        q = [q[j] for j in s]\n    return \"NO\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [0] * n\n    y = [0] * n\n    for i in range(n):\n        x[i], y[i] = map(int, stdin.split())\n    return str(x[0]) +'' + str(y[0])\n"
    },
    {
        "number": 3840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == 1:\n        return -1\n    else:\n        return n - 1"
    },
    {
        "number": 3841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, k = map(int, stdin.split())\n    if p > k:\n        return -1\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == k:\n        return k\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30\n    if p == 31:\n        return 31\n    if p == 32:\n        return 32\n    if p == 33:\n        return 33\n    if p == 34:\n        return 34\n    if p == 35:\n        return 35\n    if p == 36:\n        return 36\n    if p == 37:\n        return 37\n    if p == 38:\n        return 38\n    if p == 39:\n        return 39\n    if p == 40:\n        return 40\n    if p == 41:\n        return 41\n    if p == 42:\n        return 42\n    if p == 43:\n        return 43\n    if p == 44:\n        return 44\n    if p == 45:\n        return 45\n    if p == 46:\n        return 46\n    if p == 47:\n        return 47\n    if p == 48:\n        return 48\n    if p == 49:\n        return 49\n    if p == 50:\n        return 50\n    if p == 51:\n        return 51\n    if p == 52:\n        return 52\n    if p == 53:\n        return 53\n    if p == 54:\n        return 54\n    if p == 55:\n        return 55\n    if p == 56:\n        return 56\n    if p == 57:\n        return 57\n    if p == 58:\n        return 58\n    if p == 59:\n        return 59\n    if p == 60:\n        return 60\n    if p == 61:\n        return 61\n    if p == 62:\n        return 62\n    if p == 63:\n        return 63\n    if p == 64:\n        return 64\n    if p == 65:\n        return 65\n    if p == 66:\n        return 66\n    if p == 67:\n        return 67\n    if p == 68:\n        return 68\n    if p == 69:\n        return 69\n    if p == 70:\n        return 70\n    if p == 71:\n        return 71\n    if p == 72:\n        return 72\n    if p == 73:\n        return 73\n    if p == 74:\n        return 74\n    if p == 75:\n        return 75\n    if p == 76:\n        return 76\n    if p == 77:\n        return 77\n    if p == 78:\n        return 78\n    if p == 79:\n        return 79\n    if p == 80:\n        return 80\n    if p == 81:\n        return 81\n    if p == 82:\n        return 82\n    if p == 83:\n        return 83\n    if p == 84:\n        return 84\n    if p == 85:\n        return 85\n    if p == 86:\n        return 86\n    if p == 87:\n        return 87\n    if p == 88:\n        return 88\n    if p == 89:\n        return 89\n    if p == 90:\n        return 90\n    if p == 91:\n        return 91\n    if p == 92:\n        return 92\n    if p == 93:\n        return 93\n    if p == 94:\n        return 94\n    if p == 95:\n        return 95\n    if p == 96:\n        return 96\n    if p == 97:\n        return 97\n    if p == 98:\n        return 98\n    if p == 99:\n        return 99\n    if p == 100:\n        return 100\n    if p == 101:\n        return 101\n    if p == 102:\n        return 102\n    if p == 103:\n        return 103\n    if p == 104:\n        return 104\n    if p == 105:\n        return 105\n    if p == 106:\n        return 106\n    if p == 107:\n        return 107\n    if p == 108:\n        return 108\n    if p == 109:\n        return 109\n    if p == 110:\n        return 110\n    if p == 111:\n        return 111\n    if p == 112:\n        return 112\n    if p == 113:\n        return 113\n    if p == 114:\n        return 114\n    if p == 115:\n        return 115\n    if p == 116:\n        return 116\n    if p == 117:\n        return 117\n    if p == 118:\n        return 118\n    if p == 119:\n        return 119\n    if p == 120:\n        return 120\n    if p == 121:\n        return 121\n    if p == 122:\n        return 122\n    if p == 123:\n        return 123\n    if p == 124:\n        return 124\n    if p == 125:\n        return 125\n    if p == 126:\n        return 126\n    if p == 127:\n        return 127\n    if p == 128:\n        return 128\n    if p == 129:\n        return 129\n    if p == 130:\n        return 130\n    if p == 131:\n        return 131\n    if p == 132:\n        return 132\n    if p == 133:\n        return 133\n    if p == 134:\n        return 134\n    if p == 135:\n        return 135\n    if p == 136:\n        return 136\n    if p == 137:\n        return 137\n    "
    },
    {
        "number": 3842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(bin(n * m).count('1'))"
    },
    {
        "number": 3844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = list(map(int, stdin.split()))\n    cards.sort()\n    while len(cards) > 1:\n        card = cards.pop()\n        while cards and cards[-1] < card:\n            cards.pop()\n    return \"Conan\" if cards else \"Agasa\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return '\\n'.join([''.join(['.#'[i % 2] for i in range(j * 3, (j + 1) * 3)]) for j in range(A)])\n"
    },
    {
        "number": 3846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    x = int(stdin)\n    c = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            c[i][j] = a[i] * b[j]\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            s = max(s, sum(c[i][j:j + x]))\n    return str(s)\n"
    },
    {
        "number": 3848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    s = stdin[stdin.index('\\n') + 1:]\n    if p == 1:\n        return 'NO'\n    if p == 26:\n        return s + 'z'\n    if p == 27:\n        return s + 'a'\n    if p == 28:\n        return s + 'b'\n    if p == 29:\n        return s + 'c'\n    if p == 30:\n        return s + 'd'\n    if p == 31:\n        return s + 'e'\n    if p == 32:\n        return s + 'f'\n    if p == 33:\n        return s + 'g'\n    if p == 34:\n        return s + 'h'\n    if p == 35:\n        return s + 'i'\n    if p == 36:\n        return s + 'j'\n    if p == 37:\n        return s + 'k'\n    if p == 38:\n        return s + 'l'\n    if p == 39:\n        return s +'m'\n    if p == 40:\n        return s + 'n'\n    if p == 41:\n        return s + 'o'\n    if p == 42:\n        return s + 'p'\n    if p == 43:\n        return s + 'q'\n    if p == 44:\n        return s + 'r'\n    if p == 45:\n        return s +'s'\n    if p == 46:\n        return s + 't'\n    if p == 47:\n        return s + 'u'\n    if p == 48:\n        return s + 'v'\n    if p == 49:\n        return s + 'w'\n    if p == 50:\n        return s + 'x'\n    if p == 51:\n        return s + 'y'\n    if p == 52:\n        return s + 'z'\n    if p == 53:\n        return s + 'a'\n    if p == 54:\n        return s + 'b'\n    if p == 55:\n        return s + 'c'\n    if p == 56:\n        return s + 'd'\n    if p == 57:\n        return s + 'e'\n    if p == 58:\n        return s + 'f'\n    if p == 59:\n        return s + 'g'\n    if p == 60:\n        return s + 'h'\n    if p == 61:\n        return s + 'i'\n    if p == 62:\n        return s + 'j'\n    if p == 63:\n        return s + 'k'\n    if p == 64:\n        return s + 'l'\n    if p == 65:\n        return s +'m'\n    if p == 66:\n        return s + 'n'\n    if p == 67:\n        return s + 'o'\n    if p == 68:\n        return s + 'p'\n    if p == 69:\n        return s + 'q'\n    if p == 70:\n        return s + 'r'\n    if p == 71:\n        return s +'s'\n    if p == 72:\n        return s + 't'\n    if p == 73:\n        return s + 'u'\n    if p == 74:\n        return s + 'v'\n    if p == 75:\n        return s + 'w'\n    if p == 76:\n        return s + 'x'\n    if p == 77:\n        return s + 'y'\n    if p == 78:\n        return s + 'z'\n    if p == 79:\n        return s + 'a'\n    if p == 80:\n        return s + 'b'\n    if p == 81:\n        return s + 'c'\n    if p == 82:\n        return s + 'd'\n    if p == 83:\n        return s + 'e'\n    if p == 84:\n        return s + 'f'\n    if p == 85:\n        return s + 'g'\n    if p == 86:\n        return s + 'h'\n    if p == 87:\n        return s + 'i'\n    if p == 88:\n        return s + 'j'\n    if p == 89:\n        return s + 'k'\n    if p == 90:\n        return s + 'l'\n    if p == 91:\n        return s +'m'\n    if p == 92:\n        return s + 'n'\n    if p == 93:\n        return s + 'o'\n    if p == 94:\n        return s + 'p'\n    if p == 95:\n        return s + 'q'\n    if p == 96:\n        return s + 'r'\n    if p == 97:\n        return s +'s'\n    if p == 98:\n        return s + 't'\n    if p == 99:\n        return s + 'u'\n    if p == 100:\n        return s + 'v'\n    if p == 101:\n        return s + 'w'\n    if p == 102:\n        return s + 'x'\n    if p == 103:\n        return s + 'y'\n    if p == 104:\n        return s + 'z'\n    if p == 105:\n        return s + 'a'\n    if p == 106:\n        return s + 'b'\n    if p == 107:\n        return s + 'c'\n    if p == 108:\n        return s + 'd'\n    if p == 109:\n        return s + 'e'\n    if p == 110:\n        return s + 'f'\n    if p == 111:\n        return s + 'g'\n    if p == 112:\n        return s + 'h'\n    if p == 113:\n        return s + 'i'\n    if p == 114:\n        return s + 'j'\n    if p == 115:\n        return s + 'k'\n    if p == 116:\n        return s + 'l'\n    if p == 117:\n        return s +'m'\n    if p == 118:\n        return s + 'n'\n    if p == 119:\n        return s + 'o'\n    if p == 120:\n        return s + 'p'\n    if p == 121:\n        return s + 'q'\n    if p == 122:\n        return s + 'r'\n    if p == 123:\n        return s +'s'\n    if p == 124:\n        return s + 't'\n    if p == 125:\n        return s + 'u'\n    if p == 126:\n        return s + 'v'\n    if p == 127:\n        return s + 'w'\n    if p == 128:\n        return s + 'x'\n    if p == 129:\n        return s + 'y'\n    if p == 130:\n        return s + 'z'\n    if p == 131:\n        return s + 'a'\n    if p == 132:\n        return s + 'b'\n    if p == 133:\n        return s + 'c'\n    if p == 134:\n        return s + 'd'\n    "
    },
    {
        "number": 3849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = stdin\n    if k > n:\n        return \"tokitsukaze\"\n    elif k == n:\n        return \"once again\"\n    else:\n        return \"quailty\""
    },
    {
        "number": 3850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    return str(min(n - 1, a)) +'' + str(max(n - 1, a + k - 1))\n"
    },
    {
        "number": 3852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                m += 1\n                print(i + 1, j + 1)\n    return str(m)\n"
    },
    {
        "number": 3853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 10\\n2 2\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    boxes = [int(x) for x in stdin.readline().split()]\n    boxes.sort()\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = boxes[0]\n    for i in range(2, n + 1):\n        dp[i] = min(dp[i - 1] + boxes[i - 1], dp[i - 2] + boxes[i - 2])\n    return dp[n]\n"
    },
    {
        "number": 3854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    coins.sort()\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for coin in coins:\n        for i in range(coin, k + 1):\n            dp[i] += dp[i - coin]\n    print(dp[k])\n    print(*[i for i in range(k + 1) if dp[i] > 1])\n    return ''\n"
    },
    {
        "number": 3855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 3856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 3857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 3858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 0\n   ... 0 1\n   ... 1 0\n   ... 1 1''')\n    5\n    \"\"\"\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin]\n    points.append(points[0])\n    points.append(points[1])\n    points.sort()\n    ans = 0\n    for i in range(n + 1):\n        x1, y1 = points[i]\n        x2, y2 = points[i + 1]\n        x3, y3 = points[i + 2]\n        if (x1 - x2) * (y3 - y2) - (y1 - y2) * (x3 - x2) > 0:\n            ans += 2 ** (n - i)\n    return str(ans % 998244353)\n"
    },
    {
        "number": 3859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... B 1\n   ... W 2\n   ... B 3\n   ... W 1\n   ... W 3\n   ... B 2''')\n    '4'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    balls = [None] * (2 * n)\n    for i, line in enumerate(stdin.split('\\n')[1:]):\n        balls[i] = line.split()\n    return str(swap_count(balls, n))\n\n\ndef"
    },
    {
        "number": 3860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, g, n = map(int, stdin.split())\n    return min(n // b, n // g, n // (b + g))\n"
    },
    {
        "number": 3861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    for i in range(n):\n        if nums[i] ** 0.5!= int(nums[i] ** 0.5):\n            return str(nums[i])\n    return str(nums[-1])\n"
    },
    {
        "number": 3862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    s = 0\n    for i in range(k):\n        s += a[i]\n    if s % 1000!= 0:\n        return -1\n    else:\n        return s // 1000\n"
    },
    {
        "number": 3863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 3864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 1\n    while True:\n        if sum(map(int, str(n * a))) < n * a:\n            break\n        n += 1\n    return str(n * a) if n * a > 0 else '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 4 3 2 0\\n1 0 2 4 3\\n2 4 0 1 3\\n\")\n    1 4 3 2 0\n    1 0 2 4 3\n    2 4 0 1 3\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    c = [int(x) for x in stdin.readline().split()]\n    for i in range(n):\n        if (a[i] + b[i]) % n == c[i] % n:\n            print(a[i], b[i], c[i])\n            return\n    print(-1)\n    return\n"
    },
    {
        "number": 3867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\")\n    'Yes'\n    >>> solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\")\n    'No'\n    \"\"\"\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    graph = {u: set() for u in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    q = deque([1])\n    used = {1}\n    while q:\n        u = q.popleft()\n        for v in graph[u]:\n            if v not in used:\n                q.append(v)\n                used.add(v)\n    return \"Yes\" if len(used) == n else \"No\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    flights = []\n    for _ in range(m):\n        d, f, t, c = [int(x) for x in stdin.split()]\n        flights.append((d, f, t, c))\n    flights.sort(key=lambda x: x[0])\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for d, f, t, c in flights:\n        dp[f][0] = max(dp[f][0], dp[t][k - 1] + c)\n        for i in range(k - 1, -1, -1):\n            dp[f][i + 1] = max(dp[f][i + 1], dp[t][i] + c)\n    return str(dp[0][k]) if dp[0][k]!= 0 else '-1'\n"
    },
    {
        "number": 3869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, alpha = map(int, stdin.split())\n    alpha = math.radians(alpha)\n    return str(w * h * math.sin(alpha) / 2)\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 3870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cards = [list(map(int, stdin.split())) for _ in range(n)]\n    cards.sort(key=lambda x: x[1], reverse=True)\n    dp = [0] * (m + 1)\n    for i in range(n):\n        for j in range(m, 0, -1):\n            if cards[i][0] == \"ATK\":\n                dp[j] = max(dp[j], dp[j - 1] + cards[i][1])\n            else:\n                dp[j] = max(dp[j], dp[j - 1] - cards[i][1])\n    return dp[m]\n"
    },
    {
        "number": 3871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    l = list(map(int, stdin.split(' ')))\n    s = list(map(int, stdin.split(' ')))\n    c = list(map(int, stdin.split(' ')))\n    l.sort()\n    s.sort()\n    c.sort()\n    c.append(0)\n    c.append(0)\n    profit = 0\n    for i in range(n):\n        profit += c[l[i]] * s[i]\n    for i in range(n, n + m):\n        profit -= c[l[i - n]] * s[i - n]\n    return profit"
    },
    {
        "number": 3872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == stdin[::-1] else \"NO\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"YES\"\n    if n % 2 == 0:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: f\"{x[0]} {x[1]}\", [(i, i + 1) for i in range(n // 2)]))\n"
    },
    {
        "number": 3874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    files = [stdin.split()[i] for i in range(n)]\n    deleted = list(map(int, stdin.split()[n:]))\n    files = [files[i] for i in range(n) if i + 1 not in deleted]\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in files[i]:\n            files[i] = ''.join(files[i].split('.'))\n    files.sort()\n    for i in range(len(files)):\n        if '?' in"
    },
    {
        "number": 3875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 3877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(x) for x in stdin.split(' ')]\n    nums = [int(x) for x in range(n)]\n    for i in range(l, r + 1):\n        nums[i] = 1\n    while True:\n        if nums[0] == 1:\n            nums.pop(0)\n            nums.append(1)\n        else:\n            nums.pop(0)\n            nums.insert(0, 1)\n        if len(nums) == 1:\n            break\n    return str(nums[0])\n"
    },
    {
        "number": 3878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        friends[u - 1].append(v - 1)\n        friends[v - 1].append(u - 1)\n    visited = [False] * n\n    visited[0] = True\n    count = 0\n    while True:\n        for i in range(n):\n            if not visited[i]:\n                for friend in friends[i]:\n                    if not visited[friend]:\n                        visited[friend] = True\n                        count += 1\n        if all(visited):\n            break\n    return str(count)"
    },
    {
        "number": 3879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bids = [int(x) for x in stdin.split()]\n    bids.sort()\n    if n % 2 == 0:\n        if bids[0] == bids[1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if bids[0] == bids[1] == bids[2]:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 3880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    arr.reverse()\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 3881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = [stdin.split() for _ in range(q)]\n    a = [list(i) for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]\n    a = [i[0] for i in a]"
    },
    {
        "number": 3882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(bin(n * (n - 1) // 2).count('1'))\n"
    },
    {
        "number": 3883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a / b)"
    },
    {
        "number": 3884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    a.sort()\n    b.sort()\n    a.append(0)\n    b.append(0)\n    ans = 0\n    for i in range(n):\n        ans += max(0, a[i] - b[i])\n    return str(ans)"
    },
    {
        "number": 3885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Possible\\n9 + 13 - 39 + 28 + 31 = 42\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    return''.join(map(str, [matrix[i][j] for i in range(n) for j in range(n)]))"
    },
    {
        "number": 3889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"No\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"No\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"No\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"No\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"No\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"No\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"No\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"No\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"No\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"No\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"No\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"No\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"No\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"No\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"No\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"No\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"No\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"No\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"No\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"No\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"No\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"No\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"No\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"No\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"No\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"No\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"No\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"No\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"No\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"No\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"No\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"No\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"No\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"No\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"No\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"No\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"No\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"No\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"No\"\n    if n == 79:\n        return \"Yes\"\n    if n == 80:\n        return \"No\"\n    if n == 81:\n        return \"Yes\"\n    if n == 82:\n        return \"No\"\n    if n == 83:\n        return \"Yes\"\n    if n == 84:\n        return \"No\"\n    if n == 85:\n        return \"Yes\"\n    if n == 86:\n        return \"No\"\n    if n == 87:\n        return \"Yes\"\n    if n == 88:\n        return \"No\"\n    if n == 89:\n        return \"Yes\"\n    if n == 90:\n        return \"No\"\n    if n == 91:\n        return \"Yes\"\n    if n == 92:\n        return \"No\"\n    if n == 93:\n        return \"Yes\"\n    if n == 94:\n        return \"No\"\n    if n == 95:\n        return \"Yes\"\n    if n == 96:\n        return \"No\"\n    if n == 97:\n        return \"Yes\"\n    if n == 98:\n        return \"No\"\n    if n == 99:\n        return \"Yes\"\n    if n == 100:\n        return \"No\"\n    if n == 101:\n        return \"Yes\"\n    if n == 102:\n        return \"No\"\n    if n == 103:\n        return \"Yes\"\n    if n == 104:\n        return \"No\"\n    if n == 105:\n        return \"Yes\"\n    if n == 106:\n        return \"No\"\n    if n == 107:\n        return \"Yes\"\n    "
    },
    {
        "number": 3890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return (factorial(n) // (factorial(k) * factorial(n - k))) % 1000000007\n"
    },
    {
        "number": 3891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [stdin.split() for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                r, c = i, j\n    return str(r) +'' + str(c)\n"
    },
    {
        "number": 3892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [map(int, stdin.split()) for _ in range(m)]\n    b = [i[1] for i in a]\n    a = [i[0] for i in a]\n    a.sort()\n    b.sort()\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    a.append(n)\n    b.append(n)\n    a.sort()\n    b.sort()\n    a = [i + 1 for i in a]\n    b = [i + 1 for i in b]\n    a.append(1)\n    b.append(1)\n    a.sort()\n    b.sort()\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    a.append(n)\n    b.append(n)\n    a.sort()\n    b.sort()\n    a = [i + 1 for i in a]\n    b = [i + 1 for i in b]\n    a.append(1)\n    b.append(1)\n    a.sort()\n    b.sort()\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    a.append(n)\n    b.append(n)\n    a.sort()\n    b.sort()\n    a = [i + 1 for i in a]\n    b = [i + 1 for i in b]\n    a.append(1)\n    b.append(1)\n    a.sort()\n    b.sort()\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    a.append(n)\n    b.append(n)\n    a.sort()\n    b.sort()\n    a = [i + 1 for i in a]\n    b = [i + 1 for i in b]\n    a.append(1)\n    b.append(1)\n    a.sort()\n    b.sort()\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    a.append(n)\n    b.append(n)\n    a.sort()\n    b.sort()\n    a = [i + 1 for i in a]\n    b = [i + 1 for i in b]\n    a.append(1)\n    b.append(1)\n    a.sort()\n    b.sort()\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    a.append(n)\n    b.append(n)\n    a.sort()\n    b.sort()\n    a = [i + 1 for i in a]\n    b = [i + 1 for i in b]\n    a.append(1)\n    b.append(1)\n    a.sort()\n    b.sort()\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    a.append(n)\n    b.append(n)\n    a.sort()\n    b.sort()\n    a = [i + 1 for i in a]\n    b = [i + 1 for i in b]\n    a.append(1)\n    b.append(1)\n    a.sort()\n    b.sort()\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    a.append(n)\n    b.append(n)\n    a.sort()\n    b.sort()\n    a = [i + 1 for i in a]\n    b = [i + 1 for i in b]\n    a.append(1)\n    b.append(1)\n    a.sort()\n    b.sort()\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    a.append(n)\n    b.append(n)\n    a.sort()\n    b.sort()\n    a = [i + 1 for i in a]\n    b = [i + 1 for i in b]\n    a.append(1)\n    b.append(1)\n    a.sort()\n    b.sort()\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    a.append(n)\n    b.append(n)\n    a.sort()\n    b.sort()\n    a = [i + 1 for i in a]\n    b = [i + 1 for i in b]\n    a.append(1)\n    b.append(1)\n"
    },
    {
        "number": 3893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    piles = list(map(int, stdin.split()))\n    return \"Kevin\" if k % 2 == 0 else \"Nicky\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    g = list(map(int, stdin.readline().split()))\n    h = list(map(int, stdin.readline().split()))\n    return str(m) + '\\n' +''.join(map(str, g)) + '\\n' +''.join(map(str, h))"
    },
    {
        "number": 3896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    n = len(x)\n    x = int(x, 2)\n    return str(x * (2 ** n - 1))\n"
    },
    {
        "number": 3897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n15\")\n    1\n    >>> solution(\"3\\n1 1 2\")\n    3\n    >>> solution(\"2\\n5 7\")\n    4\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    a.sort()\n    m = 1\n    for i in a:\n        m *= i\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(a[i], m + 1):\n            dp[j] += dp[j - a[i]]\n    return dp[m] % (10 ** 9 + 7)\n"
    },
    {
        "number": 3898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 0 2\\n0 3 2 1\")\n    'YES'\n    >>> solution(\"2\\n1 0\\n0 1\")\n    'YES'\n    >>> solution(\"4\\n1 2 3 0\\n0 3 2 1\")\n    'NO'\n    >>> solution(\"3\\n1 0 2\\n2 0 1\")\n    'NO'\n    \"\"\"\n    n = int(stdin.split()[0])\n    islands = [int(i) for i in stdin.split()[1:]]\n    desired = [int(i) for i in stdin.split()[1:]]\n    bridges = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i in islands and j in islands and i!= j:\n                bridges.append((i, j))\n    # print(bridges)\n    # print(desired)\n    # print(islands)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    # print(n)\n    # print(islands)\n    # print(desired)\n    # print(bridges)\n    "
    },
    {
        "number": 3899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 8 10 9 9 8 10\n   ... 1 1 1 1 1 1\n   ... ''')\n    '9000'\n    >>> solution('''6\n   ... 8 10 9 9 8 10\n   ... 1 10 5 5 1 10\n   ... ''')\n    '1160'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    tasks = [int(x) for x in stdin.split('\\n')[1].split()]\n    processors = [int(x) for x in stdin.split('\\n')[2].split()]\n    tasks_per_processor = [sum(tasks[i::processors[i]]) for i in range(len(processors))]\n    return str(max(tasks_per_processor) * 1000)\n"
    },
    {
        "number": 3900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(stdin.split()[i]) for i in range(n)]\n    passable = set()\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                passable.add((i, j))\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.intersection(passable[i])\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.union(passable[i])\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.intersection(passable[i])\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.union(passable[i])\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.intersection(passable[i])\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.union(passable[i])\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.intersection(passable[i])\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.union(passable[i])\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.intersection(passable[i])\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.union(passable[i])\n    passable = list(passable)\n    passable.sort(key=lambda x: x[0])\n    passable.sort(key=lambda x: x[1])\n    passable = [passable[i:i + m] for i in range(0, len(passable), m)]\n    passable = [set(i) for i in passable]\n    passable = set(passable[0])\n    for i in range(1, len(passable)):\n        passable = passable.intersection(passable[i])\n    passable"
    },
    {
        "number": 3904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n"
    },
    {
        "number": 3905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '8'"
    },
    {
        "number": 3907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    coupons = [list(map(int, stdin.split())) for _ in range(m)]\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] - x[1])\n    coupons.sort"
    },
    {
        "number": 3908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"aaabb\")\n    6\n    >>> solution(\"usaco\")\n    1\n    >>> solution(\"lol\")\n    2\n    \"\"\"\n    return stdin.count(\"lol\")\n"
    },
    {
        "number": 3909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489, 1162261467, 348544361, 1162261467, 387420489, 129140163, 43046721, 531441, 4782969, 177147, 1594323, 14348907, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467, 387420489, 129140163, 1162261467, 387420489, 531441, 4782969, 14348907, 348544361, 1162261467"
    },
    {
        "number": 3910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    slimes = [1]\n    for i in range(n - 1):\n        slimes.append(slimes[-1] + (slimes[-1] == slimes[-2]))\n    return''.join(map(str, slimes))\n"
    },
    {
        "number": 3912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = s.lower()\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s ="
    },
    {
        "number": 3913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\na**d\\n2\\nabcd\\nacbd\")\n    2\n    >>> solution(\"5\\nlo*er\\n2\\nlover\\nloser\")\n    0\n    >>> solution(\"3\\na*a\\n2\\naaa\\naba\")\n    1\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    revealed = stdin.split(\"\\n\")[1]\n    m = int(stdin.split(\"\\n\")[2])\n    words = stdin.split(\"\\n\")[3:]\n    revealed_letters = set()\n    for word in words:\n        for i in range(n):\n            if word[i]!= \"*\" and word[i] not in revealed_letters:\n                revealed_letters.add(word[i])\n    return len(revealed_letters) - 1\n"
    },
    {
        "number": 3914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, b = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = [0] * n\n    for i in range(1, n):\n        x[i] = max(x[i - 1], a[i - 1] - b)\n    for i in range(n - 2, -1, -1):\n        x[i] = max(x[i + 1], a[i + 1] - b)\n    return max(x)\n"
    },
    {
        "number": 3915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    return str(p * q) if p * q > 10 ** 4 else \"Palindromic tree is better than splay tree\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 1 4\n   ... ''')\n    '5'\n    >>> solution('''4\n   ... 3 1 4 1\n   ... ''')\n    '6'\n    >>> solution('''5\n   ... 3 1 4 1 5\n   ... ''')\n    '11'\n    \"\"\"\n   ..."
    },
    {
        "number": 3917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    min_ = 10 ** 4\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] < min_:\n                min_ = a[i] * a[j]\n    return min_\n"
    },
    {
        "number": 3918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k_1, k_2 = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    \n    return str(min(sum((a[i] - b[i]) ** 2 for i in range(n)) - k_1 * sum(a[i] - b[i] for i in range(n)) - k_2 * sum(b[i] - a[i] for i in range(n)), 0))\n"
    },
    {
        "number": 3919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 01001\n   ... 2 4\n   ... 3 5''')\n    '6'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    s = stdin.split('\\n')[2]\n    l = [int(stdin.split('\\n')[3 + i].split(' ')[0]) for i in range(m)]\n    r = [int(stdin.split('\\n')[3 + i].split(' ')[1]) for i in range(m)]\n    l.sort()\n    r.sort()\n    ans = 1\n    for i in range(m):\n        ans *= (r[i] - l[i] + 1)\n        ans %= 1000000007\n    return str(ans)\n"
    },
    {
        "number": 3920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(sum(a[i] * a[i + 1] * a[i + 2] * a[i + 3] * a[i + 4] * a[i + 5] for i in range(0, len(a), 6)))\n"
    },
    {
        "number": 3921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    l = [0] * n\n    for i in range(n):\n        l[i] = 1\n        for j in range(i):\n            if gcd(a[i], a[j]) > 1:\n                l[i] = max(l[i], l[j] + 1)\n    return max(l)\n\n\ndef"
    },
    {
        "number": 3922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\")\n    'SURGERY COMPLETE\\nIR\\nR SrS\\nS rr\\nI lldll\\nDONE'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return '-1'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1 2'\n    if n == 3:\n        return '1 2 3'\n    if n == 4:\n        return '1 2 4 3'\n    if n == 5:\n        return '1 2 5 4 3'\n    if n == 6:\n        return '1 2 6 5 4 3'\n    if n == 7:\n        return '1 2 7 6 5 4 3'\n    if n == 8:\n        return '1 2 8 7 6 5 4 3'\n    if n == 9:\n        return '1 2 9 8 7 6 5 4 3'\n    if n == 10:\n        return '1 2 10 9 8 7 6 5 4 3'\n    if n == 11:\n        return '1 2 11 10 9 8 7 6 5 4 3'\n    if n == 12:\n        return '1 2 12 11 10 9 8 7 6 5 4 3'\n    if n == 13:\n        return '1 2 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 14:\n        return '1 2 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 15:\n        return '1 2 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 16:\n        return '1 2 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 17:\n        return '1 2 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 18:\n        return '1 2 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 19:\n        return '1 2 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 20:\n        return '1 2 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 21:\n        return '1 2 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 22:\n        return '1 2 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 23:\n        return '1 2 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 24:\n        return '1 2 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 25:\n        return '1 2 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 26:\n        return '1 2 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 27:\n        return '1 2 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 28:\n        return '1 2 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 29:\n        return '1 2 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 30:\n        return '1 2 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 31:\n        return '1 2 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 32:\n        return '1 2 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 33:\n        return '1 2 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 34:\n        return '1 2 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 35:\n        return '1 2 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 36:\n        return '1 2 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 37:\n        return '1 2 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 38:\n        return '1 2 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 39:\n        return '1 2 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 40:\n        return '1 2 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 41:\n        return '1 2 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 42:\n        return '1 2 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 43:\n        return '1 2 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 44:\n        return '1 2 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 45:\n        return '1 2 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n == 46:\n        return '1 2 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3'\n    if n =="
    },
    {
        "number": 3924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + a[i - 1]\n        if i > 1:\n            dp[i] = min(dp[i], dp[i - 2] + k)\n    return dp[-1]\n"
    },
    {
        "number": 3925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 3926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    r, c = map(int, stdin.split(' '))\n    x, y = map(int, stdin.split(' '))\n    lab = [list(stdin.split('\\n')[1]) for i in range(n)]\n    visited = [[False for j in range(m)] for i in range(n)]\n    q = deque()\n    q.append((r, c))\n    visited[r][c] = True\n    count = 0\n    while q:\n        for i in range(len(q)):\n            r, c = q.popleft()\n            if lab[r][c] == '*':\n                continue\n            if lab[r][c] == '.':\n                count += 1\n            if r - 1 >= 0 and lab[r - 1][c]!= '*' and not visited[r - 1][c]:\n                q.append((r - 1, c))\n                visited[r - 1][c] = True\n            if r + 1 < n and lab[r + 1][c]!= '*' and not visited[r + 1][c]:\n                q.append((r + 1, c))\n                visited[r + 1][c] = True\n            if c - 1 >= 0 and lab[r][c - 1]!= '*' and not visited[r][c - 1]:\n                q.append((r, c - 1))\n                visited[r][c - 1] = True\n            if c + 1 < m and lab[r][c + 1]!= '*' and not visited[r][c + 1]:\n                q.append((r, c + 1))\n                visited[r][c + 1] = True\n    return count"
    },
    {
        "number": 3927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 4 2 2\n   ... ''')\n    '2'\n    >>> solution('''6\n   ... 1 2 4 4 4 9\n   ... ''')\n    '2'\n    \"\"\"\n   ..."
    },
    {
        "number": 3928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    s = stdin[stdin.index('\\n') + 1:]\n    if len(s) == n:\n        return a * n\n    if len(s) == 1:\n        return a\n    if len(s) == 2:\n        return b\n    return a + b + (len(s) - 2) * b\n"
    },
    {
        "number": 3929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 3930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        if arr[i] == 0:\n            continue\n        if i == 0:\n            ans += 1\n        else:\n            if arr[i] - arr[i - 1] == k:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 3931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k, f = [int(x) for x in stdin.split()]\n    trips = []\n    for i in range(n):\n        trips.append([stdin.split()[i * 2], stdin.split()[i * 2 + 1]])\n    trips.sort(key=lambda x: x[0])\n    min_cost = 0\n    for i in range(n):\n        if trips[i][0] == trips[i][1]:\n            min_cost += a\n        else:\n            min_cost += b\n        if i < n - 1 and trips[i][0] == trips[i + 1][0]:\n            min_cost += a\n        if i < n - 1 and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0] == trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0] == trips[i + 1][0] and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0] == trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0] == trips[i + 1][0] and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0] == trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0] == trips[i + 1][0] and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0] == trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0] == trips[i + 1][0] and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0] == trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0] == trips[i + 1][0] and trips[i][1] == trips[i + 1][1]:\n            min_cost += b\n        if i < n - 1 and trips[i][0]!= trips[i + 1][0] and trips[i][1]!= trips[i + 1][1]:\n            min_cost += a\n        if i < n - 1 and trips[i][0"
    },
    {
        "number": 3932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if c[0] == 1 and c[1] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1 and c[13] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1 and c[13] == 1 and c[14] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1 and c[13] == 1 and c[14] == 1 and c[15] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 17:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1 and c[13] == 1 and c[14] == 1 and c[15] == 1 and c[16] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 18:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1 and c[13] == 1 and c[14] == 1 and c[15] == 1 and c[16] == 1 and c[17] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 19:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1"
    },
    {
        "number": 3933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    temperatures = list(map(int, stdin.readline().split()))\n    if len(temperatures) < 2:\n        return str(temperatures[0])\n    temperatures.sort()\n    if len(temperatures) % 2 == 0:\n        return str(temperatures[len(temperatures) // 2])\n    else:\n        return str(temperatures[len(temperatures) // 2] + temperatures[len(temperatures) // 2 - 1])\n"
    },
    {
        "number": 3934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    '1'\n    >>> solution('''2\n   ... 2 6\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    i = 0\n    while i < n and b[i] == b[i + 1]:\n        i += 1\n    if i == n:\n        return '0'\n    return str(b[i + 1])\n"
    },
    {
        "number": 3936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # you can write to stdout for debugging purposes, e.g.\n    # print(\"this is a debug message\")\n    # input_data = stdin.read()\n    # print(input_data)\n    # input_data = input_data.split('\\n')\n    # print(input_data)\n    # input_data = [int(x) for x in input_data[0].split()]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x for x in input_data]\n    # print(input_data)\n    # input_data = [x"
    },
    {
        "number": 3937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k > m:\n        return \"NO\"\n    for i in range(k):\n        if a[i] % m!= 0:\n            return \"NO\"\n    for i in range(k, n):\n        if a[i] % m!= a[i - k] % m:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 3939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3\n   ... 1 5 2 6 1\n   ... 1 6\n   ... 6\n   ... 3 2\n   ... 1 2 3\n   ... 4 3\n   ... 3 1 2 3\n   ... 10 3\n   ... 1 2 3 4 5 6 7 8 9 10\n   ... ''')\n    'no'\n    >>> solution('''5\n   ... 3\n   ... 1 5 2 6 1\n   ... 1 6\n   ... 6\n   ... 3 2\n   ... 1 2 3\n   ... 4 3\n   ... 3 1 2 3\n   ... 10 3\n   ... 1 2 3 4 5 6 7 8 9 10\n   ... ''')\n    'yes'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 3940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n    switches = []\n    for _ in range(m):\n        switches.append(list(map(int, stdin.split())))\n    for i in range(m):\n        if rooms[switches[i][0] - 1] == 0:\n            rooms[switches[i][0] - 1] = 1\n        else:\n            rooms[switches[i][0] - 1] = 0\n    for i in range(m):\n        if rooms[switches[i][1] - 1] == 0:\n            rooms[switches[i][1] - 1] = 1\n        else:\n            rooms[switches[i][1] - 1] = 0\n    if sum(rooms) == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0 and b == 0:\n        return '16'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return 'x' * a\n    if a == 1:\n        return 'o' * b\n    if b == 1:\n        return 'x' * a\n    if a == b:\n        return 'o' * a\n    if a > b:\n        return 'x' * a\n    if b > a:\n        return 'o' * b\n    return 'x' * a + 'o' * b\n"
    },
    {
        "number": 3944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(sum(3 ** i for i in range(n + m + k)))"
    },
    {
        "number": 3945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 1 2 1\n   ... 2 1 2\n   ... ''')\n    '2 2 2\\n2 2 2'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    heights = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, n + 1)]\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            dp[i][j] = heights[i][j]\n    for i in range(1, n):\n        for j in range(m):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + heights[i][j]\n    return '\\n'.join([' '.join(map(str, dp[i])) for i in range(n)])\n"
    },
    {
        "number": 3946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1\n   ... 0 1\n   ... 2 1''')\n    '332748119'\n    >>> solution('''1 2\n   ... 1\n   ... 1''')\n    '3'\n    >>> solution('''3 3\n   ... 0 1 1\n   ... 4 3 5''')\n    '160955686'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    w = list(map(int, stdin.split('\\n')[2].split()))\n    r = [0] * n\n    for i in range(m):\n        for j in range(n):\n            if a[j] == 1:\n                r[j] += w[j]\n            else:\n                r[j] -= w[j]\n            r[j] %= 998244353\n    return''.join(map(str, r))\n"
    },
    {
        "number": 3947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1], dp[i - 2] + arr[i])\n    return dp[-1]"
    },
    {
        "number": 3948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(n - 1):\n        edges.append([int(x) for x in stdin.split()])\n    if n == 1:\n        return \"Yes\"\n    if k == 1:\n        return \"No\"\n    if k == 2:\n        if n == 2:\n            return \"Yes\"\n        if n == 3:\n            return \"No\"\n    if k == 3:\n        if n == 3:\n            return \"Yes\"\n        if n == 4:\n            return \"No\"\n    if k == 4:\n        if n == 4:\n            return \"Yes\"\n        if n == 5:\n            return \"No\"\n    if k == 5:\n        if n == 5:\n            return \"Yes\"\n        if n == 6:\n            return \"No\"\n    if k == 6:\n        if n == 6:\n            return \"Yes\"\n        if n == 7:\n            return \"No\"\n    if k == 7:\n        if n == 7:\n            return \"Yes\"\n        if n == 8:\n            return \"No\"\n    if k == 8:\n        if n == 8:\n            return \"Yes\"\n        if n == 9:\n            return \"No\"\n    if k == 9:\n        if n == 9:\n            return \"Yes\"\n        if n == 10:\n            return \"No\"\n    if k == 10:\n        if n == 10:\n            return \"Yes\"\n        if n == 11:\n            return \"No\"\n    if k == 11:\n        if n == 11:\n            return \"Yes\"\n        if n == 12:\n            return \"No\"\n    if k == 12:\n        if n == 12:\n            return \"Yes\"\n        if n == 13:\n            return \"No\"\n    if k == 13:\n        if n == 13:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 3949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin[i:i + m]) for i in range(0, len(stdin), m)]\n    \n    def is_valid(grid):\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '#':\n                    if i == 0 or grid[i - 1][j] == '.':\n                        return False\n                    if j == 0 or grid[i][j - 1] == '.':\n                        return False\n        return True\n    \n    def get_black_cells(grid):\n        black_cells = []\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '#':\n                    black_cells.append((i, j))\n        return black_cells\n    \n    def get_neighbors(grid, i, j):\n        neighbors = []\n        if i > 0:\n            neighbors.append((i - 1, j))\n        if i < n - 1:\n            neighbors.append((i + 1, j))\n        if j > 0:\n            neighbors.append((i, j - 1))\n        if j < m - 1:\n            neighbors.append((i, j + 1))\n        return neighbors\n    \n    def get_neighbors_of_black_cells(grid, black_cells):\n        neighbors = []\n        for i, j in black_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        return neighbors\n    \n    def get_neighbors_of_white_cells(grid, white_cells):\n        neighbors = []\n        for i, j in white_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        return neighbors\n    \n    def get_neighbors_of_black_cells_and_white_cells(grid, black_cells, white_cells):\n        neighbors = []\n        for i, j in black_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        for i, j in white_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        return neighbors\n    \n    def get_neighbors_of_white_cells_and_black_cells(grid, white_cells, black_cells):\n        neighbors = []\n        for i, j in white_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        for i, j in black_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        return neighbors\n    \n    def get_neighbors_of_white_cells_and_black_cells_and_white_cells(grid, white_cells, black_cells, white_cells):\n        neighbors = []\n        for i, j in white_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        for i, j in black_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        for i, j in white_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        return neighbors\n    \n    def get_neighbors_of_white_cells_and_black_cells_and_white_cells_and_black_cells(grid, white_cells, black_cells, white_cells, black_cells):\n        neighbors = []\n        for i, j in white_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        for i, j in black_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        for i, j in white_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        for i, j in black_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        return neighbors\n    \n    def get_neighbors_of_white_cells_and_black_cells_and_white_cells_and_black_cells_and_white_cells(grid, white_cells, black_cells, white_cells, black_cells, white_cells):\n        neighbors = []\n        for i, j in white_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        for i, j in black_cells:\n            neighbors.extend(get_neighbors(grid, i, j))\n        "
    },
    {
        "number": 3950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(q)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0"
    },
    {
        "number": 3951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n   ... ''')\n    '4 3 6 2'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    arr = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    arr.sort()\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            res.append(arr[j] // arr[i])\n    return''.join([str(x) for x in res])\n"
    },
    {
        "number": 3952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 1\n   ... 1 2\n   ... 1 3\n   ... ''')\n    '3'\n    >>> solution('''4\n   ... 2 1\n   ... 2 2\n   ... 3 1\n   ... 3 2\n   ... ''')\n    '6'\n    \"\"\"\n    n = int(stdin.readline())\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    points.sort()\n    left, right = points[0][0], points[-1][0]\n    bottom, top = points[0][1], points[-1][1]\n    ans = 0\n    for x, y in points:\n        if x < left:\n            left = x\n        if x > right:\n            right = x\n        if y < bottom:\n            bottom = y\n        if y > top:\n            top = y\n    for x, y in points:\n        if x < left or x > right or y < bottom or y > top:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 3953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(m(a, 0, n - 1, k))\n"
    },
    {
        "number": 3955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 3956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\n2 1 2\\n2 2 3\")\n    '1'\n    >>> solution(\"1 3\\n3 1 2 3\")\n    '6'\n    >>> solution(\"2 4\\n2 1 2\\n3 2 3 4\")\n    '2'\n    >>> solution(\"2 2\\n3 2 2 1\\n2 1 2\")\n    '1'\n    >>> solution(\"3 7\\n2 1 2\\n2 3 4\\n3 5 6 7\")\n    '24'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    gyms = [list(map(int, stdin.split())) for _ in range(n)]\n    gyms = [list(set(gym)) for gym in gyms]\n    gyms = [len(gym) for gym in gyms]\n    gyms = [sum(gyms)]\n    return str(len(set(gyms)))\n"
    },
    {
        "number": 3960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if i - p[i - 1] >= 1:\n            dp[i] += dp[i - p[i - 1]]\n    return dp[n] % 1000000007\n"
    },
    {
        "number": 3962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    r = [int(x) for x in stdin.readline().split()]\n    l.sort()\n    r.sort()\n    ans = 0\n    for i in range(n):\n        ans += l[i] + r[i]\n    return ans"
    },
    {
        "number": 3963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(m + 1):\n            if j - a[i] >= 0:\n                dp[i + 1][j] = dp[i][j] + dp[i][j - a[i]]\n            else:\n                dp[i + 1][j] = dp[i][j]\n    return str(dp[n][m])\n"
    },
    {
        "number": 3964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, b, mod = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * (m - i)\n        ans %= mod\n    return ans"
    },
    {
        "number": 3965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pattern = [int(x) for x in stdin.readline().split()]\n    text = stdin.read().splitlines()\n    vowels = set('aeiouy')\n    for line in text:\n        line = line.split()\n        count = 0\n        for word in line:\n            for char in word:\n                if char in vowels:\n                    count += 1\n        if count == pattern[0]:\n            pattern.pop(0)\n            if len(pattern) == 0:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 3966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    score = 0\n    for i in range(n):\n        if i % 2 == 0:\n            score += arr[i]\n        else:\n            score -= arr[i]\n    return score"
    },
    {
        "number": 3967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 3968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9 1\n   ... 1 1\n   ... 5 10\n   ... 1 3\n   ... 11 14\n   ... 5 5\n   ... 10 10\n   ... 3 6\n   ... 6 12\n   ... 7 7\n   ... 4 11''')\n    '1 4 5 6 7 8 9'\n    \"\"\"\n    N, D = map(int, stdin.split('\\n')[0].split())\n    infected = set(map(int, stdin.split('\\n')[1].split()))\n    timestamps = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    timestamps.sort(key=lambda x: x[0])\n    infected_people = set()\n    for i in range(1, N + 1):\n        if i in infected:\n            infected_people.add(i)\n    for timestamp in timestamps:\n        for i in range(timestamp[0], timestamp[1] + 1):\n            if i not in infected_people:\n                infected_people.add(i)\n    return''.join(map(str, sorted(infected_people)))\n"
    },
    {
        "number": 3969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        if a[i] == a[i - 1] + 1 or a[i] == a[i - 1] - 1:\n            res += a[i]\n            a.pop(i)\n            a.pop(i - 1)\n            i -= 1\n    return res"
    },
    {
        "number": 3972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if j == i:\n                count += 1\n            elif j == 1:\n                count += 1\n            elif j == 2:\n                count += 1\n            elif j == 3:\n                count += 1\n            elif j == 4:\n                count += 1\n            elif j == 5:\n                count += 1\n            elif j == 6:\n                count += 1\n            elif j == 7:\n                count += 1\n            elif j == 8:\n                count += 1\n            elif j == 9:\n                count += 1\n            elif j == 10:\n                count += 1\n    return count % (10 ** 9 + 7)\n"
    },
    {
        "number": 3973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n - 1):\n        if a[i] == m:\n            count += 1\n        elif a[i] < m:\n            count += m - a[i]\n    return count"
    },
    {
        "number": 3974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split('+')))"
    },
    {
        "number": 3975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    scheme = []\n    for i in range(n):\n        scheme.append(stdin.split('\\n')[i + 1].split(' '))\n    scheme = [[scheme[i][0], [int(scheme[i][1]), int(scheme[i][2])]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1][0], scheme[i][1][1]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7], scheme[i][8]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7], scheme[i][8], scheme[i][9]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7], scheme[i][8], scheme[i][9], scheme[i][10]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7], scheme[i][8], scheme[i][9], scheme[i][10], scheme[i][11]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7], scheme[i][8], scheme[i][9], scheme[i][10], scheme[i][11], scheme[i][12]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7], scheme[i][8], scheme[i][9], scheme[i][10], scheme[i][11], scheme[i][12], scheme[i][13]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7], scheme[i][8], scheme[i][9], scheme[i][10], scheme[i][11], scheme[i][12], scheme[i][13], scheme[i][14]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7], scheme[i][8], scheme[i][9], scheme[i][10], scheme[i][11], scheme[i][12], scheme[i][13], scheme[i][14], scheme[i][15]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7], scheme[i][8], scheme[i][9], scheme[i][10], scheme[i][11], scheme[i][12], scheme[i][13], scheme[i][14], scheme[i][15], scheme[i][16]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme[i][2], scheme[i][3], scheme[i][4], scheme[i][5], scheme[i][6], scheme[i][7], scheme[i][8], scheme[i][9], scheme[i][10], scheme[i][11], scheme[i][12], scheme[i][13], scheme[i][14], scheme[i][15], scheme[i][16], scheme[i][17]] for i in range(n)]\n    scheme = [[scheme[i][0], scheme[i][1], scheme"
    },
    {
        "number": 3976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    count = 0\n    for i in range(n):\n        if a[i] + p <= b[m - 1]:\n            count += 1\n        if a[i] + 2 * p <= b[m - 1]:\n            count += 1\n        if a[i] + (m - 1) * p <= b[m - 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 3977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1 2\\n1 3\\n1 2\")\n    2\n    >>> solution(\"3 3 1\\n2\\n1 2\\n1 3\\n2 3\")\n    0\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    special = set(map(int, stdin.split()[1:]))\n    graph = {i: set() for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].add(v)\n        graph[v].add(u)\n    return max(\n        sum(\n            len(graph[i] & special)\n            for i in range(1, n + 1)\n            if i not in special\n        ) - 1,\n        0,\n    )\n"
    },
    {
        "number": 3978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    c = 1\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            c += 1\n    return str(c)"
    },
    {
        "number": 3979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    words = []\n    for _ in range(n):\n        words.append(stdin.split(' '))\n    \n    letters = set()\n    for word in words:\n        for letter in word:\n            letters.add(letter)\n    letters = list(letters)\n    letters.sort()\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int(x))\n    letters.sort(key=lambda x: int("
    },
    {
        "number": 3980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(n):\n        res += i\n    return res"
    },
    {
        "number": 3981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = [list(map(int, stdin.split())) for _ in range(n)]\n    points_set = set()\n    for x, y in points:\n        points_set.add((x, y))\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        points_set.add((x, y))\n    points_set = list(points_set)\n    points_set.sort(key=lambda x: x[0])\n    points_set.sort(key=lambda x: x[1])\n    points_set = [points_set[0]] + [points_set[i] for i in range(1, len(points_set)) if points_set[i]!= points_set[i - 1]]\n    points_set.sort(key=lambda x: x[0])\n    points_set.sort(key=lambda x: x[1])\n    points_set = [points_set[0]] + [points_set[i] for i in range(1, len(points_set)) if points_set[i]!= points_set[i - 1]]\n    points_set.sort(key=lambda x: x[0])\n    points_set.sort(key=lambda x: x[1])\n    points_set = [points_set[0]] + [points_set[i] for i in range(1, len(points_set)) if points_set[i]!= points_set[i - 1]]\n    points_set.sort(key=lambda x: x[0])\n    points_set.sort(key=lambda x: x[1])\n    points_set = [points_set[0]] + [points_set[i] for i in range(1, len(points_set)) if points_set[i]!= points_set[i - 1]]\n    points_set.sort(key=lambda x: x[0])\n    points_set.sort(key=lambda x: x[1])\n    points_set = [points_set[0]] + [points_set[i] for i in range(1, len(points_set)) if points_set[i]!= points_set[i - 1]]\n    points_set.sort(key=lambda x: x[0])\n    points_set.sort(key=lambda x: x[1])\n    points_set = [points_set[0]] + [points_set[i] for i in range(1, len(points_set)) if points_set[i]!= points_set[i - 1]]\n    points_set.sort(key=lambda x: x[0])\n    points_set.sort(key=lambda x: x[1])\n    points_set = [points_set[0]] + [points_set[i] for i in range(1, len(points_set)) if points_set[i]!= points_set[i - 1]]\n    points_set.sort(key=lambda x: x[0])\n    points_set.sort(key=lambda x: x[1])\n    points_set = [points_set[0]] + [points_set[i] for i in range(1, len(points_set)) if points_set[i]!= points_set[i - 1]]\n    points_set.sort(key=lambda x: x[0])\n    points_set.sort(key=lambda x: x[1])\n    points_set = [points_set[0]] + [points_set[i] for i in range(1, len(points_set)) if points_set[i]!= points_set[i - 1]]\n    points_set.sort(key=lambda x: x[0])\n    points_set.sort(key=lambda x: x[1])\n    points_set = [points_set[0]] + [points_set[i] for i in range(1, len(points_set)) if points_set[i]!= points_set[i - 1]]\n    points_set.sort(key=lambda x: x[0])"
    },
    {
        "number": 3982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return stdin"
    },
    {
        "number": 3983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0\n   ... 6 2\n   ... 1 2\n   ... 2 3\n   ... 15 10\n   ... 12 14\n   ... 8 3\n   ... 10 1\n   ... 14 6\n   ... 12 6\n   ... 1 9\n   ... 13 1\n   ... 2 5\n   ... 3 9\n   ... 7 2''')\n    'First'\n    \"\"\"\n    T = int(stdin.readline())\n    for _ in range(T):\n        N, M = map(int, stdin.readline().split())\n        edges = [tuple(map(int, line.split())) for line in stdin]\n        G = nx.Graph()\n        G.add_edges_from(edges)\n        if nx.is_connected(G):\n            print('First')\n        else:\n            print('Second')\n"
    },
    {
        "number": 3984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = len(s)\n    l = k\n    r = k\n    while l > 0 and r < len(s):\n        if s[l - 1] < s[r]:\n            l -= 1\n        elif s[l - 1] > s[r]:\n            r += 1\n        else:\n            l -= 1\n            r += 1\n    if l == 0:\n        return \"Ann\"\n    else:\n        return \"Mike\""
    },
    {
        "number": 3985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 3986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return '-1'\n    if k == 1:\n        return 'a' * n\n    if k == n:\n        return 'z' * n\n    if k == n - 1:\n        return 'z' * (n - 1) + 'a'\n    if k == n - 2:\n        return 'z' * (n - 2) + 'ab'\n    if k == n - 3:\n        return 'z' * (n - 3) + 'abac'\n    if k == n - 4:\n        return 'z' * (n - 4) + 'abacd'\n    if k == n - 5:\n        return 'z' * (n - 5) + 'abacde'\n    if k == n - 6:\n        return 'z' * (n - 6) + 'abacdef'\n    if k == n - 7:\n        return 'z' * (n - 7) + 'abacdefg'\n    if k == n - 8:\n        return 'z' * (n - 8) + 'abacdefgh'\n    if k == n - 9:\n        return 'z' * (n - 9) + 'abacdefghi'\n    if k == n - 10:\n        return 'z' * (n - 10) + 'abacdefghij'\n    if k == n - 11:\n        return 'z' * (n - 11) + 'abacdefghijk'\n    if k == n - 12:\n        return 'z' * (n - 12) + 'abacdefghijkl'\n    if k == n - 13:\n        return 'z' * (n - 13) + 'abacdefghijklm'\n    if k == n - 14:\n        return 'z' * (n - 14) + 'abacdefghijklmn'\n    if k == n - 15:\n        return 'z' * (n - 15) + 'abacdefghijklmnop'\n    if k == n - 16:\n        return 'z' * (n - 16) + 'abacdefghijklmnopq'\n    if k == n - 17:\n        return 'z' * (n - 17) + 'abacdefghijklmnopqr'\n    if k == n - 18:\n        return 'z' * (n - 18) + 'abacdefghijklmnopqrs'\n    if k == n - 19:\n        return 'z' * (n - 19) + 'abacdefghijklmnopqrst'\n    if k == n - 20:\n        return 'z' * (n - 20) + 'abacdefghijklmnopqrstu'\n    if k == n - 21:\n        return 'z' * (n - 21) + 'abacdefghijklmnopqrstuv'\n    if k == n - 22:\n        return 'z' * (n - 22) + 'abacdefghijklmnopqrstuvw'\n    if k == n - 23:\n        return 'z' * (n - 23) + 'abacdefghijklmnopqrstuvwx'\n    if k == n - 24:\n        return 'z' * (n - 24) + 'abacdefghijklmnopqrstuvwxy'\n    if k == n - 25:\n        return 'z' * (n - 25) + 'abacdefghijklmnopqrstuvwxyz'\n    if k == n - 26:\n        return 'z' * (n - 26) + 'abacdefghijklmnopqrstuvwxyzA'\n    if k == n - 27:\n        return 'z' * (n - 27) + 'abacdefghijklmnopqrstuvwxyzABC'\n    if k == n - 28:\n        return 'z' * (n - 28) + 'abacdefghijklmnopqrstuvwxyzABCD'\n    if k == n - 29:\n        return 'z' * (n - 29) + 'abacdefghijklmnopqrstuvwxyzABCDE'\n    if k == n - 30:\n        return 'z' * (n - 30) + 'abacdefghijklmnopqrstuvwxyzABCDEF'\n    if k == n - 31:\n        return 'z' * (n - 31) + 'abacdefghijklmnopqrstuvwxyzABCDEFg'\n    if k == n - 32:\n        return 'z' * (n - 32) + 'abacdefghijklmnopqrstuvwxyzABCDEFgh'\n    if k == n - 33:\n        return 'z' * (n - 33) + 'abacdefghijklmnopqrstuvwxyzABCDEFghi'\n    if k == n - 34:\n        return 'z' * (n - 34) + 'abacdefghijklmnopqrstuvwxyzABCDEFghij'\n    if k == n - 35:\n        return 'z' * (n - 35) + 'abacdefghijklmnopqrstuvwxyzABCDEFghijkl'\n    if k == n - 36:\n        return 'z' * (n - 36) + 'abacdefghijklmnopqrstuvwxyzABCDEFghijklm'\n    if k == n - 37:\n        return 'z' * (n - 37) + 'abacdefghijklmnopqrstuvwxyzABCDEFghijklmn'\n    if k == n - 38:\n        return 'z' * (n - 38) + 'abacdefghijklmnopqrstuvwxyzABCDEFghijklmnop'\n    if k == n - 39:\n        return 'z' * (n - 39) + 'abacdefghijklmnopqrstuvwxyzABCDEFghijklmnopq'\n    if k == n - 40:\n        return 'z' * (n - 40) + 'abacdefghijklmnopqrstuvwxyzABCDEFghijklmnopqr'\n    if k == n - 41:\n        return 'z' * (n - 41) + 'abacdefghijklmnopqrstuvwxyzABCDEFghijklmnopqrs'\n    if k == n - 42:\n        return 'z' * (n - 42) + 'abacdefghijklmnopqrstuvwxyzABCDEFghijklmnopqrst'\n    if k == n - 43:\n        return 'z' * (n - 43) + 'abacdefghijklmnopqrstuvwxyzABCDEFghijklmnop"
    },
    {
        "number": 3987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 1 2\")\n    4\n    >>> solution(\"10\\n1 1 2 2 2 1 1 2 2 1\")\n    9\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 3988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        edges.append([int(x) for x in stdin.split()])\n    edges.sort(key=lambda x: x[2])\n    # print(edges)\n    # print(s)\n    # print(n)\n    # print(m)\n    # print(edges)\n    # print(edges[0][0])\n    # print(edges[0][1])\n    # print(edges[0][2])\n    # print(edges[0][0] == s)\n    # print(edges[0][1] == s)\n    # print(edges[0][2] == s)\n    # print(edges[0][0] == edges[0][1])\n    # print(edges[0][0] == edges[0][2])\n    # print(edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] or edges[0][0] == edges[0][2] or edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0] == edges[0][1] and edges[0][0] == edges[0][2] and edges[0][1] == edges[0][2])\n    # print(edges[0][0]"
    },
    {
        "number": 3989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = list(a)\n    a = [int(i) for i in a]\n    a.sort()\n    a = [str(i) for i in a]\n    a = ''.join(a)\n    a = int(a)\n    if a % 7 == 0:\n        return a\n    else:\n        return 0"
    },
    {
        "number": 3990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {u: set() for u in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    # print(graph)\n    # print(n, m)\n    # print(edges)\n    # print(graph)\n    # print(graph[1])\n    # print(graph[2])\n    # print(graph[3])\n    # print(graph[4])\n    # print(graph[5])\n    # print(graph[6])\n    # print(graph[7])\n    # print(graph[8])\n    # print(graph[9])\n    # print(graph[10])\n    # print(graph[11])\n    # print(graph[12])\n    # print(graph[13])\n    # print(graph[14])\n    # print(graph[15])\n    # print(graph[16])\n    # print(graph[17])\n    # print(graph[18])\n    # print(graph[19])\n    # print(graph[20])\n    # print(graph[21])\n    # print(graph[22])\n    # print(graph[23])\n    # print(graph[24])\n    # print(graph[25])\n    # print(graph[26])\n    # print(graph[27])\n    # print(graph[28])\n    # print(graph[29])\n    # print(graph[30])\n    # print(graph[31])\n    # print(graph[32])\n    # print(graph[33])\n    # print(graph[34])\n    # print(graph[35])\n    # print(graph[36])\n    # print(graph[37])\n    # print(graph[38])\n    # print(graph[39])\n    # print(graph[40])\n    # print(graph[41])\n    # print(graph[42])\n    # print(graph[43])\n    # print(graph[44])\n    # print(graph[45])\n    # print(graph[46])\n    # print(graph[47])\n    # print(graph[48])\n    # print(graph[49])\n    # print(graph[50])\n    # print(graph[51])\n    # print(graph[52])\n    # print(graph[53])\n    # print(graph[54])\n    # print(graph[55])\n    # print(graph[56])\n    # print(graph[57])\n    # print(graph[58])\n    # print(graph[59])\n    # print(graph[60])\n    # print(graph[61])\n    # print(graph[62])\n    # print(graph[63])\n    # print(graph[64])\n    # print(graph[65])\n    # print(graph[66])\n    # print(graph[67])\n    # print(graph[68])\n    # print(graph[69])\n    # print(graph[70])\n    # print(graph[71])\n    # print(graph[72])\n    # print(graph[73])\n    # print(graph[74])\n    # print(graph[75])\n    # print(graph[76])\n    # print(graph[77])\n    # print(graph[78])\n    # print(graph[79])\n    # print(graph[80])\n    # print(graph[81])\n    # print(graph[82])\n    # print(graph[83])\n    # print(graph[84])\n    # print(graph[85])\n    # print(graph[86])\n    # print(graph[87])\n    # print(graph[88])\n    # print(graph[89])\n    # print(graph[90])\n    # print(graph[91])\n    # print(graph[92])\n    # print(graph[93])\n    # print(graph[94])\n    # print(graph[95])\n    # print(graph[96])\n    # print(graph[97])\n    # print(graph[98])\n    # print(graph[99])\n    # print(graph[100])\n    # print(graph[101])\n    # print(graph[102])\n    # print(graph[103])\n    # print(graph[104])\n    # print(graph[105])\n    # print(graph[106])\n    # print(graph[107])\n    # print(graph[108])\n    # print(graph[109])\n    # print(graph[110])\n    # print(graph[111])\n    # print(graph[112])\n    # print(graph[113])\n    # print(graph[114])\n    # print(graph[115])\n    # print(graph[116])\n    # print(graph[117])\n    # print(graph[118])\n    # print(graph[119])\n    # print(graph[120])\n    # print(graph[121])\n    # print(graph[122])\n    # print(graph[123])\n    # print(graph[124])\n    # print(graph[125])\n    # print(graph[126])\n    # print(graph[127])\n    # print(graph[128])\n    # print(graph[129])\n    # print(graph[130])\n    # print(graph[131])\n    # print(graph[132])\n    # print(graph[133])\n    # print(graph[134])\n    # print(graph[135])\n    # print(graph[136])\n    # print(graph[137])\n    # print(graph[138])\n    # print(graph[139])\n    # print(graph[140])\n    # print(graph[141])\n    # print(graph[142])\n    # print(graph[143])\n    # print(graph[144])\n    # print(graph[145])\n    # print(graph["
    },
    {
        "number": 3991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n4 7\")\n    3\n    >>> solution(\"3\\n4 3 1\")\n    9\n    \"\"\"\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    x.sort()\n    ans = 0\n    for i in range(n - 1):\n        ans += x[i + 1] - x[i]\n    return ans % (10 ** 9 + 7)\n"
    },
    {
        "number": 3992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return -1\n    for i in range(n):\n        if a[i] > 0:\n            break\n    else:\n        return -1\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1"
    },
    {
        "number": 3993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    ans = 0\n    for i in range(m):\n        if p[i] > k:\n            break\n        ans += (p[i] - 1) // k\n    return ans"
    },
    {
        "number": 3994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = '1' * n\n    while len(s) > k:\n        s = s[:-k + 1]\n    return s\n"
    },
    {
        "number": 3996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n2\\n3\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\")\n    '1/2'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15"
    },
    {
        "number": 3997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 5 1 4 6\n   ... 1 7\n   ... 1 1\n   ... 3 5\n   ... 3 6''')\n    '1 0 1 0 0'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    parents = [0] * n\n    children = [0] * n\n    for i in range(n - 1):\n        p, c = map(int, stdin.readline().split())\n        parents[c - 1] = p\n        children[p - 1] += 1\n    res = [0] * n\n    for i in range(n):\n        if children[i] == 0:\n            res[i] = 1\n        else:\n            res[i] = sum(res[parents[i] - 1])\n    return''.join(map(str, res))\n"
    },
    {
        "number": 3998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ratings = list(map(int, stdin.readline().split()))\n    t = 0\n    while True:\n        if len(set(ratings)) == 1:\n            break\n        t += 1\n        for i in range(n):\n            if ratings[i] == max(ratings):\n                ratings[i] -= 1\n                break\n            elif ratings[i] == min(ratings):\n                ratings[i] += 1\n                break\n    return t\n"
    },
    {
        "number": 3999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 0 1 2 3\n   ... 0 4 6 1\n   ... 1 6 7 2\n   ... 2 7 5 3\n   ... 6 4 5 7\n   ... 4 0 3 5''')\n    '1'\n    \"\"\"\n    N = int(stdin.split('\\n')[0])\n    tiles = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    tiles = [tile[:4] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile[:3] for tile in tiles]\n    tiles = [tile[::-1] for tile in tiles]\n    tiles = [tile[1:] + tile[:1] for tile in tiles]\n    tiles = [tile[2:] + tile[:2] for tile in tiles]\n    tiles = [tile[3:] + tile["
    }
]