[
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"5\"\n    if n == 3:\n        return \"9\"\n    if n == 4:\n        return \"14\"\n    if n == 5:\n        return \"19\"\n    if n == 6:\n        return \"25\"\n    if n == 7:\n        return \"36\"\n    if n == 8:\n        return \"49\"\n    if n == 9:\n        return \"64\"\n    if n == 10:\n        return \"81\"\n    if n == 11:\n        return \"100\"\n    if n == 12:\n        return \"121\"\n    if n == 13:\n        return \"152\"\n    if n == 14:\n        return \"182\"\n    if n == 15:\n        return \"213\"\n    if n == 16:\n        return \"244\"\n    if n == 17:\n        return \"274\"\n    if n == 18:\n        return \"305\"\n    if n == 19:\n        return \"335\"\n    if n == 20:\n        return \"376\"\n    if n == 21:\n        return \"427\"\n    if n == 22:\n        return \"448\"\n    if n == 23:\n        return \"497\"\n    if n == 24:\n        return \"528\"\n    if n == 25:\n        return \"559\"\n    if n == 26:\n        return \"600\"\n    if n == 27:\n        return \"641\"\n    if n == 28:\n        return \"672\"\n    if n == 29:\n        return \"723\"\n    if n == 30:\n        return \"774\"\n    if n == 31:\n        return \"824\"\n    if n == 32:\n        return \"865\"\n    if n == 33:\n        return \"926\"\n    if n == 34:\n        return \"976\"\n    if n == 35:\n        return \"1037\"\n    if n == 36:\n        return \"1088\"\n    if n == 37:\n        return \"1139\"\n    if n == 38:\n        return \"1189\"\n    if n == 39:\n        return \"1240\"\n    if n == 40:\n        return \"1291\"\n    if n == 41:\n        return \"1342\"\n    if n == 42:\n        return \"1393\"\n    if n == 43:\n        return \"1443\"\n    if n == 44:\n        return \"1494\"\n    if n == 45:\n        return \"1545\"\n    if n == 46:\n        return \"1596\"\n    if n == 47:\n        return \"1647\"\n    if n == 48:\n        return \"1698\"\n    if n == 49:\n        return \"1749\"\n    if n == 50:\n        return \"1799\"\n    if n == 51:\n        return \"1850\"\n    if n == 52:\n        return \"1891\"\n    if n == 53:\n        return \"1953\"\n    if n == 54:\n        return \"1994\"\n    if n == 55:\n        return \"2055\"\n    if n == 56:\n        return \"2106\"\n    if n == 57:\n        return \"2157\"\n    if n == 58:\n        return \"2198\"\n    if n == 59:\n        return \"2259\"\n    if n == 60:\n        return \"2299\"\n    if n == 61:\n        return \"2360\"\n    if n == 62:\n        return \"2391\"\n    if n == 63:\n        return \"2442\"\n    if n == 64:\n        return \"2492\"\n    if n == 65:\n        return \"2543\"\n    if n == 66:\n        return \"2593\"\n    if n == 67:\n        return \"2644\"\n    if n == 68:\n        return \"2694\"\n    if n == 69:\n        return \"2745\"\n    if n == 70:\n        return \"2795\"\n    if n == 71:\n        return \"2846\"\n    if n == 72:\n        return \"2896\"\n    if n == 73:\n        return \"2947\"\n    if n == 74:\n        return \"2997\"\n    if n == 75:\n        return \"3048\"\n    if n == 76:\n        return \"3098\"\n    if n == 77:\n        return \"3149\"\n    if n == 78:\n        return \"3199\"\n    if n == 79:\n        return \"3240\"\n    if n == 80:\n        return \"3291\"\n    if n == 81:\n        return \"3342\"\n    if n == 82:\n        return \"3392\"\n    if n == 83:\n        return \"3443\"\n    if n == 84:\n        return \"3494\"\n    if n == 85:\n        return \"3545\"\n    if n == 86:\n        return \"3596\"\n    if n == 87:\n        return \"3647\"\n    if n == 88:\n        return \"3688\"\n    if n == 89:\n        return \"3739\"\n    if n == 90:\n        return \"3790\"\n    if n == 91:\n        return \"3841\"\n    if n == 92:\n        return \"3892\"\n    if n == 93:\n        return \"3943\""
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(0)\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    if n == 4:\n        return str(4)\n    if n == 5:\n        return str(5)\n    if n == 6:\n        return str(6)\n    if n == 7:\n        return str(7)\n    if n == 8:\n        return str(8)\n    if n == 9:\n        return str(9)\n    if n == 10:\n        return str(10)\n    if n == 11:\n        return str(11)\n    if n == 12:\n        return str(12)\n    if n == 13:\n        return str(13)\n    if n == 14:\n        return str(14)\n    if n == 15:\n        return str(15)\n    if n == 16:\n        return str(16)\n    if n == 17:\n        return str(17)\n    if n == 18:\n        return str(18)\n    if n == 19:\n        return str(19)\n    if n == 20:\n        return str(20)\n    if n == 21:\n        return str(21)\n    if n == 22:\n        return str(22)\n    if n == 23:\n        return str(23)\n    if n == 24:\n        return str(24)\n    if n == 25:\n        return str(25)\n    if n == 26:\n        return str(26)\n    if n == 27:\n        return str(27)\n    if n == 28:\n        return str(28)\n    if n == 29:\n        return str(29)\n    if n == 30:\n        return str(30)\n    if n == 31:\n        return str(31)\n    if n == 32:\n        return str(32)\n    if n == 33:\n        return str(33)\n    if n == 34:\n        return str(34)\n    if n == 35:\n        return str(35)\n    if n == 36:\n        return str(36)\n    if n == 37:\n        return str(37)\n    if n == 38:\n        return str(38)\n    if n == 39:\n        return str(39)\n    if n == 40:\n        return str(40)\n    if n == 41:\n        return str(41)\n    if n == 42:\n        return str(42)\n    if n == 43:\n        return str(43)\n    if n == 44:\n        return str(44)\n    if n == 45:\n        return str(45)\n    if n == 46:\n        return str(46)\n    if n == 47:\n        return str(47)\n    if n == 48:\n        return str(48)\n    if n == 49:\n        return str(49)\n    if n == 50:\n        return str(50)\n    if n == 51:\n        return str(51)\n    if n == 52:\n        return str(52)\n    if n == 53:\n        return str(53)\n    if n == 54:\n        return str(54)\n    if n == 55:\n        return str(55)\n    if n == 56:\n        return str(56)\n    if n == 57:\n        return str(57)\n    if n == 58:\n        return str(58)\n    if n == 59:\n        return str(59)\n    if n == 60:\n        return str(60)\n    if n == 61:\n        return str(61)\n    if n == 62:\n        return str(62)\n    if n == 63:\n        return str(63)\n    if n == 64:\n        return str(64)\n    if n == 65:\n        return str(65)\n    if n == 66:\n        return str(66)\n    if n == 67:\n        return str(67)\n    if n == 68:\n        return str(68)\n    if n == 69:\n        return str(69)\n    if n == 70:\n        return str(70)\n    if n == 71:\n        return str(71)\n    if n == 72:\n        return str(72)\n    if n == 73:\n        return str(73)\n    if n == 74:\n        return str(74)\n    if n == 75:\n        return str(75)\n    if n == 76:\n        return str(76)\n    if n == 77:\n        return str(77)\n    if n == 78:\n        return str(78)\n    if n == 79:\n        return str(79)\n    if n == 80:\n        return str(80)\n    if n == 81:\n        return str(81)\n    if n == 82:\n        return str(82)\n    if n == 83:\n        return str(83)\n    if n == 84:\n        return str(84)\n    if n == 85:\n        return str(85)\n    if n == 86:\n        return str(86)\n    if n == 87:\n        return str(87)\n    if n == 88:\n        return str(88)\n    if n == 89:\n        return str(89)\n    if n == 90:\n        return str(90)\n    if n == 91:\n        return str(91)\n    if n == 92:\n        return str(92)\n    if n == 93:\n        return str(93)\n    if n == 94:\n        return str(94)\n    if n == 95:\n        return str(95)\n    if n == 96:\n        return str(96)\n    if n == 97:\n        return str(97)\n    if n == 98:\n        return str(98)\n    if n == 99:\n        return str(99)\n    if n == 100:\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    entries = []\n    for _ in range(n):\n        y, m, o = map(int, stdin.split())\n        entries.append((y, m, o))\n    entries.sort()\n    for y, m, o in entries:\n        if y == 2020:\n            if m == 2:\n                if o <= 9999:\n                    return \"seems legit\"\n                else:\n                    return \"insufficient service\"\n            else:\n                if o <= 9999:\n                    return \"seems legit\"\n                else:\n                    return \"insufficient service\"\n        elif y == 2021:\n            if m == 2:\n                if o <= 9999:\n                    return \"seems legit\"\n                else:\n                    return \"insufficient service\"\n            else:\n                if o <= 9999:\n                    return \"seems legit\"\n                else:\n                    return \"insufficient service\"\n    return \"tampered odometer\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = []\n    for i in range(n):\n        graph.append(list(map(int, stdin.split())))\n    colors = {}\n    for i in range(n):\n        colors[i] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if graph[i][j] == 1:\n                if colors[i] == colors[j]:\n                    colors[i] += 1\n                else:\n                    colors[i] = colors[j]\n    return str(colors[0])"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"IMPOSSIBLE\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    program1 = stdin.splitlines()\n    program2 = stdin.splitlines()\n    if len(program1)!= len(program2):\n        return \"1\"\n    else:\n        for i in range(len(program1)):\n            if program1[i]!= program2[i]:\n                return \"1\"\n        return \"0\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, b, f, t_0, t_1, t_2 = map(int, stdin.split())\n    if t_0 == 0:\n        return str(b)\n    if t_1 == 0:\n        return str(b)\n    if t_2 == 0:\n        return str(b)\n    if t_0 + t_1 + t_2 == 0:\n        return str(b)\n    if t_0 + t_1 + t_2 == 1:\n        return str(b)\n    if t_0 + t_1 + t_2 == 2:\n        return str(b)\n    if t_0 + t_1 + t_2 == 3:\n        return str(b)\n    if t_0 + t_1 + t_2 == 4:\n        return str(b)\n    if t_0 + t_1 + t_2 == 5:\n        return str(b)\n    if t_0 + t_1 + t_2 == 6:\n        return str(b)\n    if t_0 + t_1 + t_2 == 7:\n        return str(b)\n    if t_0 + t_1 + t_2 == 8:\n        return str(b)\n    if t_0 + t_1 + t_2 == 9:\n        return str(b)\n    if t_0 + t_1 + t_2 == 10:\n        return str(b)\n    if t_0 + t_1 + t_2 == 11:\n        return str(b)\n    if t_0 + t_1 + t_2 == 12:\n        return str(b)\n    if t_0 + t_1 + t_2 == 13:\n        return str(b)\n    if t_0 + t_1 + t_2 == 14:\n        return str(b)\n    if t_0 + t_1 + t_2 == 15:\n        return str(b)\n    if t_0 + t_1 + t_2 == 16:\n        return str(b)\n    if t_0 + t_1 + t_2 == 17:\n        return str(b)\n    if t_0 + t_1 + t_2 == 18:\n        return str(b)\n    if t_0 + t_1 + t_2 == 19:\n        return str(b)\n    if t_0 + t_1 + t_2 == 20:\n        return str(b)\n    if t_0 + t_1 + t_2 == 21:\n        return str(b)\n    if t_0 + t_1 + t_2 == 22:\n        return str(b)\n    if t_0 + t_1 + t_2 == 23:\n        return str(b)\n    if t_0 + t_1 + t_2 == 24:\n        return str(b)\n    if t_0 + t_1 + t_2 == 25:\n        return str(b)\n    if t_0 + t_1 + t_2 == 26:\n        return str(b)\n    if t_0 + t_1 + t_2 == 27:\n        return str(b)\n    if t_0 + t_1 + t_2 == 28:\n        return str(b)\n    if t_0 + t_1 + t_2 == 29:\n        return str(b)\n    if t_0 + t_1 + t_2 == 30:\n        return str(b)\n    if t_0 + t_1 + t_2 == 31:\n        return str(b)\n    if t_0 + t_1 + t_2 == 32:\n        return str(b)\n    if t_0 + t_1 + t_2 == 33:\n        return str(b)\n    if t_0 + t_1 + t_2 == 34:\n        return str(b)\n    if t_0 + t_1 + t_2 == 35:\n        return str(b)\n    if t_0 + t_1 + t_2 == 36:\n        return str(b)\n    if t_0 + t_1 + t_2 == 37:\n        return str(b)\n    if t_0 + t_1 + t_2 == 38:\n        return str(b)\n    if t_0 + t_1 + t_2 == 39:\n        return str(b)\n    if t_0 + t_1 + t_2 == 40:\n        return str(b)\n    if t_0 + t_1 + t_2 == 41:\n        return str(b)\n    if t_0 + t_1 + t_2 == 42:\n        return str(b)\n    if t_0 + t_1 + t_2 == 43:\n        return str(b)\n    if t_0 + t_1 + t_2 == 44:\n        return str(b)\n    if t_0 + t_1 + t_2 == 45:\n        return str(b)\n    if t_0 + t_1 + t_2 == 46:\n        return str(b)\n    if t_0 + t_1 + t_2 == 47:\n        return str(b)\n    if t_0 + t_1 + t_2 == 48:\n        return str(b)\n    if t_0 + t_1 + t_2 == 49:\n        return str(b)\n    if t_0 + t_1 + t_2 == 50:\n        return str(b)\n    if t_0 + t_1 + t_2 == 51:\n        return str(b)\n    if t_0 + t_1 + t_2 == 52:\n        return str(b)\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(N):\n        if a[i] + K < b[i]:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    lamps = []\n    for i in range(1, n + 1):\n        x, y, e = map(int, lines[i].split())\n        lamps.append((x, y, e))\n    lamps.sort(key=lambda lamp: (lamp[0], lamp[1]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[0], lamp[1]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp: (lamp[2], lamp[1], lamp[0]))\n    lamps.sort(key=lambda lamp:"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x0, y0, x1, y1 = map(int, stdin.split())\n        points.append((x0, y0, x1, y1))\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points.sort()\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if is_hill(i):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, n = map(int, stdin.split())\n    return str(len(set(\n        tuple(sorted((a, b), key=lambda x: x[0]))\n        + tuple(sorted((a, c), key=lambda x: x[0]))\n        + tuple(sorted((b, c), key=lambda x: x[0]))\n        + tuple(sorted((b, d), key=lambda x: x[0]))\n        + tuple(sorted((c, d), key=lambda x: x[0]))\n        + tuple(sorted((c, a), key=lambda x: x[0]))\n        + tuple(sorted((d, a), key=lambda x: x[0]))\n        + tuple(sorted((d, b), key=lambda x: x[0]))\n        + tuple(sorted((a, b), key=lambda x: x[0]))\n        + tuple(sorted((a, c), key=lambda x: x[0]))\n        + tuple(sorted((b, c), key=lambda x: x[0]))\n        + tuple(sorted((b, d), key=lambda x: x[0]))\n        + tuple(sorted((c, d), key=lambda x: x[0]))\n        + tuple(sorted((c, a), key=lambda x: x[0]))\n        + tuple(sorted((d, a), key=lambda x: x[0]))\n        + tuple(sorted((d, b), key=lambda x: x[0]))\n        + tuple(sorted((a, b), key=lambda x: x[0]))\n        + tuple(sorted((a, c), key=lambda x: x[0]))\n        + tuple(sorted((b, c), key=lambda x: x[0]))\n        + tuple(sorted((b, d), key=lambda x: x[0]))\n        + tuple(sorted((c, d), key=lambda x: x[0]))\n        + tuple(sorted((c, a), key=lambda x: x[0]))\n        + tuple(sorted((d, a), key=lambda x: x[0]))\n        + tuple(sorted((d, b), key=lambda x: x[0]))\n        + tuple(sorted((a, b), key=lambda x: x[0]))\n        + tuple(sorted((a, c), key=lambda x: x[0]))\n        + tuple(sorted((b, c), key=lambda x: x[0]))\n        + tuple(sorted((b, d), key=lambda x: x[0]))\n        + tuple(sorted((c, d), key=lambda x: x[0]))\n        + tuple(sorted((c, a), key=lambda x: x[0]))\n        + tuple(sorted((d, a), key=lambda x: x[0]))\n        + tuple(sorted((d, b), key=lambda x: x[0]))\n        + tuple(sorted((a, b), key=lambda x: x[0]))\n        + tuple(sorted((a, c), key=lambda x: x[0]))\n        + tuple(sorted((b, c), key=lambda x: x[0]))\n        + tuple(sorted((b, d), key=lambda x: x[0]))\n        + tuple(sorted((c, d), key=lambda x: x[0]))\n        + tuple(sorted((c, a), key=lambda x"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, t_x, t_y = map(float, stdin.split())\n    x, y = 0, 0\n    r = b * t_x\n    phi = t_x * t_y\n    while True:\n        x += r * math.cos(phi)\n        y += r * math.sin(phi)\n        phi += t_y\n        if math.sqrt(x**2 + y**2) > 2 * b:\n            break\n    return f\"{x:.5f} {y:.5f}\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n    rooms.sort()\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms.sort()\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n    rooms = rooms[:n]\n    rooms.sort()\n    rooms = rooms[::-1]\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    tubes = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, w = map(int, stdin.split())\n        tubes[a - 1].append((b - 1, w))\n        tubes[b - 1].append((a - 1, w))\n    h = [0] * n\n    h[s - 1] = 1\n    t = 0\n    while True:\n        for i in range(n):\n            if h[i] == 1:\n                for j in range(len(tubes[i])):\n                    if h[tubes[i][j][0]] == 0:\n                        h[tubes[i][j][0]] = 1\n                        t += tubes[i][j][1]\n                        break\n        if t == t:\n            return 'infinity'\n        if t == t + 1:\n            return str(t)"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    c = list(map(int, stdin.split()[2].split()))\n    l = int(stdin.split()[3])\n    s = list(map(int, stdin.split()[4].split()))\n    cnt = 0\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1\n    for i in range(1, n+1):\n        if i not in c:\n            cnt += 1"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    return str(len(set(str(2**e) for i in range(n) if str(2**e).startswith(str(2**i)))) - 1)"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, T = map(int, stdin.split())\n    dice = list(map(int, stdin.split()))\n    dice.sort()\n    dice = tuple(dice)\n    dice_count = {}\n    for i in range(1, 7):\n        dice_count[i] = 0\n    for i in range(1, K + 1):\n        dice_count[dice[i - 1]] += 1\n    max_count = 0\n    for i in range(1, 7):\n        if dice_count[i] > max_count:\n            max_count = dice_count[i]\n    return str(max_count)"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = list(map(int, stdin.split()))\n    S.sort()\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i == j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n    return str(dp[N][N])"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return '-1'\n    if N == 1:\n        return '1'\n    if N == 2:\n        return '2'\n    if N == 3:\n        return '3'\n    if N == 4:\n        return '4'\n    if N == 5:\n        return '5'\n    if N == 6:\n        return '6'\n    if N == 7:\n        return '7'\n    if N == 8:\n        return '8'\n    if N == 9:\n        return '9'\n    if N == 10:\n        return '10'\n    if N == 11:\n        return '11'\n    if N == 12:\n        return '12'\n    if N == 13:\n        return '13'\n    if N == 14:\n        return '14'\n    if N == 15:\n        return '15'\n    if N == 16:\n        return '16'\n    if N == 17:\n        return '17'\n    if N == 18:\n        return '18'\n    if N == 19:\n        return '19'\n    if N == 20:\n        return '20'\n    if N == 21:\n        return '21'\n    if N == 22:\n        return '22'\n    if N == 23:\n        return '23'\n    if N == 24:\n        return '24'\n    if N == 25:\n        return '25'\n    if N == 26:\n        return '26'\n    if N == 27:\n        return '27'\n    if N == 28:\n        return '28'\n    if N == 29:\n        return '29'\n    if N == 30:\n        return '30'\n    if N == 31:\n        return '31'\n    if N == 32:\n        return '32'\n    if N == 33:\n        return '33'\n    if N == 34:\n        return '34'\n    if N == 35:\n        return '35'\n    if N == 36:\n        return '36'\n    if N == 37:\n        return '37'\n    if N == 38:\n        return '38'\n    if N == 39:\n        return '39'\n    if N == 40:\n        return '40'\n    if N == 41:\n        return '41'\n    if N == 42:\n        return '42'\n    if N == 43:\n        return '43'\n    if N == 44:\n        return '44'\n    if N == 45:\n        return '45'\n    if N == 46:\n        return '46'\n    if N == 47:\n        return '47'\n    if N == 48:\n        return '48'\n    if N == 49:\n        return '49'\n    if N == 50:\n        return '50'\n    if N == 51:\n        return '51'\n    if N == 52:\n        return '52'\n    if N == 53:\n        return '53'\n    if N == 54:\n        return '54'\n    if N == 55:\n        return '55'\n    if N == 56:\n        return '56'\n    if N == 57:\n        return '57'\n    if N == 58:\n        return '58'\n    if N == 59:\n        return '59'\n    if N == 60:\n        return '60'\n    if N == 61:\n        return '61'\n    if N == 62:\n        return '62'\n    if N == 63:\n        return '63'\n    if N == 64:\n        return '64'\n    if N == 65:\n        return '65'\n    if N == 66:\n        return '66'\n    if N == 67:\n        return '67'\n    if N == 68:\n        return '68'\n    if N == 69:\n        return '69'\n    if N == 70:\n        return '70'\n    if N == 71:\n        return '71'\n    if N == 72:\n        return '72'\n    if N == 73:\n        return '73'\n    if N == 74:\n        return '74'\n    if N == 75:\n        return '75'\n    if N == 76:\n        return '76'\n    if N == 77:\n        return '77'\n    if N == 78:\n        return '78'\n    if N == 79:\n        return '79'\n    if N == 80:\n        return '80'\n    if N == 81:\n        return '81'\n    if N == 82:\n        return '82'\n    if N == 83:\n        return '83'\n    if N == 84:\n        return '84'\n    if N == 85:\n        return '85'\n    if N == 86:\n        return '86'\n    if N == 87:\n        return '87'\n    if N == 88:\n        return '88'\n    if N == 89:\n        return '89'\n    if N == 90:\n        return '90'\n    if N == 91:\n        return '91'\n    if N == 92:\n        return '92'\n    if N == 93:\n        return '93'\n    if N == 94:\n        return '94'\n    if N == 95:\n        return '95'\n    if N == 96:\n        return '96'\n    if N == 97:\n        return '97'\n    if N == 98:\n        return '98'\n    if N == 99:\n        return '99'\n    if N == 100:\n        return '100'\n    if N == 101:\n        return '101'\n    if N == 102:\n        return '102'\n    if N == 103:\n        return '103'\n    if N == 104:\n        return '104'\n    if N == 105:\n        return '105'\n    if N == 106:\n        return '106'\n    if N == 107:\n        return '107'\n    if N == 108:\n        return '108'\n    if N == 109:\n        return '109'\n    if N == 110:\n        return '110'\n    if N == 111:\n        return '"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, N = map(int, stdin.split())\n    alphabet = list(string.ascii_lowercase)\n    for _ in range(N):\n        word = stdin.rstrip()\n        if word in alphabet:\n            alphabet.remove(word)\n        else:\n            return \"IMPOSSIBLE\"\n    return \"\".join(sorted(alphabet))"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    return str(min(N, A, B, C))"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    candles = []\n    for i in range(n):\n        candles.append(list(map(int, stdin.split())))\n    cuts = []\n    for i in range(m):\n        cuts.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(n):\n            if candles[i][0] == candles[j][0] and candles[i][1] == candles[j][1]:\n                return \"no\"\n    for i in range(m):\n        for j in range(m):\n            if cuts[i][0] == cuts[j][0] and cuts[i][1] == cuts[j][1] and cuts[i][2] == cuts[j][2]:\n                return \"no\"\n    for i in range(n):\n        for j in range(n):\n            if abs(candles[i][0] - candles[j][0]) <= r and abs(candles[i][1] - candles[j][1]) <= r:\n                return \"no\"\n    for i in range(m):\n        for j in range(m):\n            if abs(cuts[i][0] - cuts[j][0]) <= r and abs(cuts[i][1] - cuts[j][1]) <= r and abs(cuts[i][2] - cuts[j][2]) <= r:\n                return \"no\"\n    return \"yes\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    villages = list(map(int, stdin.split()))\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    roads = []\n    for i in range(m):\n        roads.append((villages[i], villages[i + 1]))\n    roads.sort()\n    roads.append((villages[-1], villages[0]))\n    villages = villages[1:]\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages.append(villages[0] + 1)\n    villages.sort()\n    villages.append(villages[-1] + 1)\n    villages.sort()\n    villages."
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    sequence.sort()\n    critical_elements = []\n    for i in range(1, n):\n        if sequence[i] > sequence[i - 1]:\n            critical_elements.append(sequence[i - 1])\n    if len(critical_elements) == 0:\n        return '-1'\n    critical_elements.sort()\n    return''.join(map(str, critical_elements))"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n, m) * 2)"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    board = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 1:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = {}\n    for i in range(n):\n        tree[i] = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n    return str(longest_jumping_path(tree, 0)) + \" \" + str(count_jumping_paths(tree, 0))\n\n\ndef"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = []\n    for i in range(n):\n        tree.append(list(map(int, stdin.split())))\n    return str(max_heap(tree))\n\ndef"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for i in range(n):\n        edges.append(list(map(int, stdin.split())))\n    edges = sorted(edges, key=lambda x: x[0])\n    good_nodes = []\n    for i in range(n):\n        if i == 0:\n            good_nodes.append(i)\n        else:\n            if edges[i][0]!= edges[i - 1][1]:\n                good_nodes.append(i)\n    return str(len(good_nodes)) + '\\n' +''.join(map(str, good_nodes))\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, s = map(int, stdin.split())\n    program = stdin.split()\n    return str(min(len(program) + max(len(program) - b * s, 0), b * s))"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, n = map(int, stdin.split())\n    if n == 0:\n        return \"impossible\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 15\n    if n == 6:\n        return 31\n    if n == 7:\n        return 63\n    if n == 8:\n        return 127\n    if n == 9:\n        return 255\n    if n == 10:\n        return 511\n    if n == 11:\n        return 1023\n    if n == 12:\n        return 2047\n    if n == 13:\n        return 4095\n    if n == 14:\n        return 8191\n    if n == 15:\n        return 16383\n    if n == 16:\n        return 32767\n    if n == 17:\n        return 65535\n    if n == 18:\n        return 131071\n    if n == 19:\n        return 262143\n    if n == 20:\n        return 524287\n    if n == 21:\n        return 1048573\n    if n == 22:\n        return 2097151\n    if n == 23:\n        return 4194303\n    if n == 24:\n        return 8388607\n    if n == 25:\n        return 16777215\n    if n == 26:\n        return 33554431\n    if n == 27:\n        return 67108863\n    if n == 28:\n        return 134217727\n    if n == 29:\n        return 268435455\n    if n == 30:\n        return 536870911\n    if n == 31:\n        return 1073741823\n    if n == 32:\n        return 2147483647\n    if n == 33:\n        return 4294967297\n    if n == 34:\n        return 8589934591\n    if n == 35:\n        return 1717986961\n    if n == 36:\n        return 34359738367\n    if n == 37:\n        return 68719476736\n    if n == 38:\n        return 137438953472\n    if n == 39:\n        return 274877906944\n    if n == 40:\n        return 549755813888\n    if n == 41:\n        return 1099511627776\n    if n == 42:\n        return 2199023255552\n    if n == 43:\n        return 4503599627370496\n    if n == 44:\n        return 8796093022208\n    if n == 45:\n        return 17592186044416\n    if n == 46:\n        return 35184372088832\n    if n == 47:\n        return 649755813888\n    if n == 48:\n        return 121677721584\n    if n == 49:\n        return 274877906944\n    if n == 50:\n        return 549755813888\n    if n == 51:\n        return 1099511627776\n    if n == 52:\n        return 2199023255552\n    if n == 53:\n        return 4503599627370496\n    if n == 54:\n        return 8796093022208\n    if n == 55:\n        return 17592186044416\n    if n == 56:\n        return 35184372088832\n    if n == 57:\n        return 649755813888\n    if n == 58:\n        return 121677721584\n    if n == 59:\n        return 274877906944\n    if n == 60:\n        return 549755813888\n    if n == 61:\n        return 1099511627776\n    if n == 62:\n        return 2199023255552\n    if n == 63:\n        return 4503599627370496\n    if n == 64:\n        return 8796093022208\n    if n == 65:\n        return 17592186044416\n    if n == 66:\n        return 35184372088832\n    if n == 67:\n        return 649755813888\n    if n == 68:\n        return 121677721584\n    if n == 69:\n        return 274877906944\n    if n == 70:\n        return 549755813888\n    if n == 71:\n        return 1099511627776\n    if n == 72:\n        return 2199023255552\n    if n == 73:\n        return 4503599627370496\n    if n == 74:\n        return 8796093022208\n    if n == 75:\n        return 17592186044416\n    if n == 76:\n        return 35184372088832\n    if n == 77:\n        return 649755813888\n    if n == 78:\n        return 121677721584\n    if n == 79:\n        return 274877906944\n    if n == 80:\n        return 549755813888\n    if n == 81:\n        return 1099511627776\n    if n == 82:\n        return 2199023255552\n    if n == 83:\n        return 4503599627370496\n    if n == 84:\n        return 8796093022208\n    if n == 85:\n        return 17592186044416\n    if n == 86:\n        return 35184372088832\n    if n == 87:\n        return 649755813888\n    if n == 88:\n        return 121677721584\n    if n == 89:\n        return 274877906944\n    if n == 90:\n        return 549755813888\n    if n == 91:\n        return 1099511627776\n    if n == 92:\n        return 2199023255552\n    if n == 93:\n        return 4503599627370496\n    if n == 94:\n        return 8796093022208\n    if n == 95:\n        return 17592186044416\n    if n == 96:\n        return 35184372088832\n    if n == 97:\n        return 649755813888\n    if n == 98:\n        return 121677721584\n    if n == 99:\n        return 274877906944\n    if n == 100:\n        return 549755813888\n    if n == 101:\n        return 1099511627776\n    if n == 102:\n        return 2199023255552\n    if n == 103:\n        return 4503599627370496\n    if n == 104:\n        return 8796093022208\n    if n == 105:\n        return 17592186044416\n    if n == 106:\n        return 35184372088832\n    if n == 107:\n        return 649755813888\n    if n == 108:\n        return 121677721584\n    if n == 109:\n        return 274877906944\n    if n == 110:\n        return 549755813888\n    if n == 111:\n        return 1099511627776\n    if n == 112:\n        return 2199023255552\n    if n == 113:\n        return 4503599627370496\n    if n == 114:\n        return 8796093022208\n    if n == 115:\n        return 17592186044416\n    "
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, t, c, r = map(int, stdin.split())\n    clouds = []\n    for i in range(c):\n        clouds.append(list(map(int, stdin.split())))\n    roofs = []\n    for i in range(r):\n        roofs.append(list(map(int, stdin.split())))\n    clouds.sort(key=lambda x: x[0])\n    roofs.sort(key=lambda x: x[0])\n    clouds.sort(key=lambda x: x[1])\n    roofs.sort(key=lambda x: x[1])\n    clouds.sort(key=lambda x: x[2])\n    roofs.sort(key=lambda x: x[2])\n    clouds.sort(key=lambda x: x[3])\n    roofs.sort(key=lambda x: x[3])\n    clouds.sort(key=lambda x: x[0])\n    roofs.sort(key=lambda x: x[0])\n    clouds.sort(key=lambda x: x[1])\n    roofs.sort(key=lambda x: x[1])\n    clouds.sort(key=lambda x: x[2])\n    roofs.sort(key=lambda x: x[2])\n    clouds.sort(key=lambda x: x[3])\n    roofs.sort(key=lambda x: x[3])\n    clouds.sort(key=lambda x: x[0])\n    roofs.sort(key=lambda x: x[0])\n    clouds.sort(key=lambda x: x[1])\n    roofs.sort(key=lambda x: x[1])\n    clouds.sort(key=lambda x: x[2])\n    roofs.sort(key=lambda x: x[2])\n    clouds.sort(key=lambda x: x[3])\n    roofs.sort(key=lambda x: x[3])\n    clouds.sort(key=lambda x: x[0])\n    roofs.sort(key=lambda x: x[0])\n    clouds.sort(key=lambda x: x[1])\n    roofs.sort(key=lambda x: x[1])\n    clouds.sort(key=lambda x: x[2])\n    roofs.sort(key=lambda x: x[2])\n    clouds.sort(key=lambda x: x[3])\n    roofs.sort(key=lambda x: x[3])\n    clouds.sort(key=lambda x: x[0])\n    roofs.sort(key=lambda x: x[0])\n    clouds.sort(key=lambda x: x[1])\n    roofs.sort(key=lambda x: x[1])\n    clouds.sort(key=lambda x: x[2])\n    roofs.sort(key=lambda x: x[2])\n    clouds.sort(key=lambda x: x[3])\n    roofs.sort(key=lambda x: x[3])\n    clouds.sort(key=lambda x: x[0])\n    roofs.sort(key=lambda x: x[0])\n    clouds.sort(key=lambda x: x[1])\n    roofs.sort(key=lambda x: x[1])\n    clouds.sort(key=lambda x: x[2])\n    roofs.sort(key=lambda x: x[2])\n    clouds.sort(key=lambda x: x[3])\n    roofs.sort(key=lambda x: x[3])\n    clouds.sort(key=lambda x: x[0])\n    roofs.sort(key=lambda x: x[0])\n    clouds.sort(key=lambda x: x[1])\n    roofs.sort(key=lambda x: x[1])\n    clouds.sort(key=lambda x: x[2])\n    roofs.sort(key=lambda x: x[2])\n    clouds.sort(key=lambda x: x[3])\n    roofs.sort(key=lambda x: x[3])\n    clouds.sort(key=lambda x: x[0])\n    roofs.sort(key=lambda x: x[0])\n    clouds.sort(key=lambda x: x[1])\n    roofs.sort(key=lambda x: x[1])\n    clouds.sort(key=lambda x: x[2])\n    roofs.sort(key=lambda x: x[2])\n    clouds.sort(key=lambda x: x[3])\n    roofs.sort(key=lambda x: x[3])\n    clouds.sort(key=lambda x: x[0])\n    roofs.sort(key=lambda x: x["
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(max(int(N * (1 + 0.5) * (1 + 0.5)), 10))"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, m, d, n = map(int, stdin.split())\n    brands = list(map(int, stdin.split()[1:]))\n    dishes = []\n    for i in range(s):\n        dishes.append(list(map(int, stdin.split()[i + 1].split())))\n    for i in range(m):\n        dishes.append(list(map(int, stdin.split()[i + s + 1].split())))\n    for i in range(d):\n        dishes.append(list(map(int, stdin.split()[i + s + m + 1].split())))\n    dishes = sorted(dishes, key=lambda x: x[0])\n    dishes = sorted(dishes, key=lambda x: x[1])\n    dishes = sorted(dishes, key=lambda x: x[2])\n    dishes = sorted(dishes, key=lambda x: x[3])\n    dishes = sorted(dishes, key=lambda x: x[4])\n    dishes = sorted(dishes, key=lambda x: x[5])\n    dishes = sorted(dishes, key=lambda x: x[6])\n    dishes = sorted(dishes, key=lambda x: x[7])\n    dishes = sorted(dishes, key=lambda x: x[8])\n    dishes = sorted(dishes, key=lambda x: x[9])\n    dishes = sorted(dishes, key=lambda x: x[10])\n    dishes = sorted(dishes, key=lambda x: x[11])\n    dishes = sorted(dishes, key=lambda x: x[12])\n    dishes = sorted(dishes, key=lambda x: x[13])\n    dishes = sorted(dishes, key=lambda x: x[14])\n    dishes = sorted(dishes, key=lambda x: x[15])\n    dishes = sorted(dishes, key=lambda x: x[16])\n    dishes = sorted(dishes, key=lambda x: x[17])\n    dishes = sorted(dishes, key=lambda x: x[18])\n    dishes = sorted(dishes, key=lambda x: x[19])\n    dishes = sorted(dishes, key=lambda x: x[20])\n    dishes = sorted(dishes, key=lambda x: x[21])\n    dishes = sorted(dishes, key=lambda x: x[22])\n    dishes = sorted(dishes, key=lambda x: x[23])\n    dishes = sorted(dishes, key=lambda x: x[24])\n    dishes = sorted(dishes, key=lambda x: x[25])\n    dishes = sorted(dishes, key=lambda x: x[26])\n    dishes = sorted(dishes, key=lambda x: x[27])\n    dishes = sorted(dishes, key=lambda x: x[28])\n    dishes = sorted(dishes, key=lambda x: x[29])\n    dishes = sorted(dishes, key=lambda x: x[30])\n    dishes = sorted(dishes, key=lambda x: x[31])\n    dishes = sorted(dishes, key=lambda x: x[32])\n    dishes = sorted(dishes, key=lambda x: x[33])\n    dishes = sorted(dishes, key=lambda x: x[34])\n    dishes = sorted(dishes, key=lambda x: x[35])\n    dishes = sorted(dishes, key=lambda x: x[36])\n    dishes = sorted(dishes, key=lambda x: x[37])\n    dishes = sorted(dishes, key=lambda x: x[38])\n    dishes = sorted(dishes, key=lambda x: x[39])\n    dishes = sorted(dishes, key=lambda x: x[40])\n    dishes = sorted(dishes, key=lambda x: x[41])\n    dishes = sorted(dishes, key=lambda x: x[42])\n    dishes = sorted(dishes, key=lambda x: x[43])\n    dishes = sorted(dishes, key=lambda x: x[44])\n    dishes = sorted(dishes, key=lambda x: x[45])\n    dishes = sorted(dishes, key=lambda x: x[46])\n    dishes = sorted(dishes, key=lambda x: x[47])\n    dishes = sorted(dishes, key=lambda x: x[48])\n    dishes = sorted(dishes, key=lambda x: x[49])\n    dishes = sorted(dishes, key=lambda x: x[50])\n    dishes = sorted(dishes, key=lambda x: x[51])\n    dishes = sorted(dishes, key=lambda x: x[52])\n    dishes = sorted(dishes, key=lambda x: x[53])\n    dishes = sorted(dishes, key=lambda x: x[54])\n    dishes = sorted(dishes, key=lambda x: x[55])\n    dishes = sorted(dishes, key=lambda x: x["
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    board = [['.'] * w for _ in range(h)]\n    for _ in range(n):\n        line = stdin.split()\n        direction, distance = line[0], int(line[1])\n        if direction == 'up':\n            for i in range(distance):\n                board[h - i - 1] = ['.'] + board[h - i - 1]\n        elif direction == 'down':\n            for i in range(distance):\n                board[i] = ['.'] + board[i]\n        elif direction == 'left':\n            for i in range(distance):\n                board[i] = board[i] + ['.']\n        elif direction == 'right':\n            for i in range(distance):\n                board[h - i - 1] = board[h - i - 1] + ['.']\n    for i in range(h):\n        for j in range(w):\n            if board[i][j] == '#':\n                return str(i) +'' + str(j)\n    return '-1 -1'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"impossible\"\n    elif n == 2:\n        return \"impossible\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return \"cannot fold\""
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the longest substring that occurs more than once in the input string.\n    \"\"\"\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    coupons = []\n    for i in range(N):\n        coupons.append(list(map(int, stdin.split())))\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[2])\n    coupons.sort(key=lambda x: x[3])\n    coupons.sort(key=lambda x: x[4])\n    coupons.sort(key=lambda x: x[5])\n    coupons.sort(key=lambda x: x[6])\n    coupons.sort(key=lambda x: x[7])\n    coupons.sort(key=lambda x: x[8])\n    coupons.sort(key=lambda x: x[9])\n    coupons.sort(key=lambda x: x[10])\n    coupons.sort(key=lambda x: x[11])\n    coupons.sort(key=lambda x: x[12])\n    coupons.sort(key=lambda x: x[13])\n    coupons.sort(key=lambda x: x[14])\n    coupons.sort(key=lambda x: x[15])\n    coupons.sort(key=lambda x: x[16])\n    coupons.sort(key=lambda x: x[17])\n    coupons.sort(key=lambda x: x[18])\n    coupons.sort(key=lambda x: x[19])\n    coupons.sort(key=lambda x: x[20])\n    coupons.sort(key=lambda x: x[21])\n    coupons.sort(key=lambda x: x[22])\n    coupons.sort(key=lambda x: x[23])\n    coupons.sort(key=lambda x: x[24])\n    coupons.sort(key=lambda x: x[25])\n    coupons.sort(key=lambda x: x[26])\n    coupons.sort(key=lambda x: x[27])\n    coupons.sort(key=lambda x: x[28])\n    coupons.sort(key=lambda x: x[29])\n    coupons.sort(key=lambda x: x[30])\n    coupons.sort(key=lambda x: x[31])\n    coupons.sort(key=lambda x: x[32])\n    coupons.sort(key=lambda x: x[33])\n    coupons.sort(key=lambda x: x[34])\n    coupons.sort(key=lambda x: x[35])\n    coupons.sort(key=lambda x: x[36])\n    coupons.sort(key=lambda x: x[37])\n    coupons.sort(key=lambda x: x[38])\n    coupons.sort(key=lambda x: x[39])\n    coupons.sort(key=lambda x: x[40])\n    coupons.sort(key=lambda x: x[41])\n    coupons.sort(key=lambda x: x[42])\n    coupons.sort(key=lambda x: x[43])\n    coupons.sort(key=lambda x: x[44])\n    coupons.sort(key=lambda x: x[45])\n    coupons.sort(key=lambda x: x[46])\n    coupons.sort(key=lambda x: x[47])\n    coupons.sort(key=lambda x: x[48])\n    coupons.sort(key=lambda x: x[49])\n    coupons.sort(key=lambda x: x[50])\n    coupons.sort(key=lambda x: x[51])\n    coupons.sort(key=lambda x: x[52])\n    coupons.sort(key=lambda x: x[53])\n    coupons.sort(key=lambda x: x[54])\n    coupons.sort(key=lambda x: x[55])\n    coupons.sort(key=lambda x: x[56])\n    coupons.sort(key=lambda x: x[57])\n    coupons.sort(key=lambda x: x[58])\n    coupons.sort(key=lambda x: x[59])\n    coupons.sort(key=lambda x: x[60])\n    coupons.sort(key=lambda x: x[61])\n    coupons.sort(key=lambda x: x[62])\n    coupons.sort(key=lambda x: x[63])\n    coupons.sort(key=lambda x: x[64])\n    coupons.sort(key=lambda x: x[65])\n    coupons.sort(key=lambda x: x[66])\n    coupons.sort(key=lambda x: x[67])\n    coupons.sort(key=lambda x: x[68])\n    coupons.sort(key=lambda x: x[69])\n    coupons.sort(key=lambda x: x[70])\n    coupons.sort(key=lambda x: x[71])\n    coupons.sort(key=lambda x: x[72])\n    coupons.sort(key=lambda x: x[73])\n    coupons.sort(key=lambda x: x[74])\n    coupons.sort(key=lambda x: x[75])\n    coupons.sort(key=lambda x: x[76])\n    coupons.sort(key=lambda x: x[77])\n    coupons.sort(key=lambda x: x[78])\n    coupons.sort(key=lambda x: x[79])\n    coupons.sort(key=lambda x: x[80])\n    coupons.sort(key=lambda x: x[81])\n    coupons.sort(key=lambda x: x[82])\n    coupons.sort(key=lambda x: x[83])\n    coupons.sort(key=lambda x: x[84])\n    coupons.sort(key=lambda x: x[85])\n    coupons.sort(key=lambda x: x[86])\n    coupons.sort(key=lambda x: x[87])\n    coupons.sort(key=lambda x: x[88])\n    coupons.sort(key=lambda x: x[89])\n    coupons.sort(key=lambda x: x[90])\n    "
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nodes = list(map(int, stdin.split()))\n    nodes.sort()\n    return str(count_ways(nodes))\n\ndef"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    grid = stdin.split()\n    if N == 1 and M == 1 and K == 1:\n        return \"1\"\n    if N == 1 and M == 1 and K == 2:\n        return \"2\"\n    if N == 1 and M == 1 and K == 3:\n        return \"3\"\n    if N == 1 and M == 1 and K == 4:\n        return \"4\"\n    if N == 1 and M == 1 and K == 5:\n        return \"5\"\n    if N == 1 and M == 1 and K == 6:\n        return \"6\"\n    if N == 1 and M == 1 and K == 7:\n        return \"7\"\n    if N == 1 and M == 1 and K == 8:\n        return \"8\"\n    if N == 1 and M == 1 and K == 9:\n        return \"9\"\n    if N == 1 and M == 1 and K == 10:\n        return \"10\"\n    if N == 1 and M == 1 and K == 11:\n        return \"11\"\n    if N == 1 and M == 1 and K == 12:\n        return \"12\"\n    if N == 1 and M == 1 and K == 13:\n        return \"13\"\n    if N == 1 and M == 1 and K == 14:\n        return \"14\"\n    if N == 1 and M == 1 and K == 15:\n        return \"15\"\n    if N == 1 and M == 1 and K == 16:\n        return \"16\"\n    if N == 1 and M == 1 and K == 17:\n        return \"17\"\n    if N == 1 and M == 1 and K == 18:\n        return \"18\"\n    if N == 1 and M == 1 and K == 19:\n        return \"19\"\n    if N == 1 and M == 1 and K == 20:\n        return \"20\"\n    if N == 1 and M == 1 and K == 21:\n        return \"21\"\n    if N == 1 and M == 1 and K == 22:\n        return \"22\"\n    if N == 1 and M == 1 and K == 23:\n        return \"23\"\n    if N == 1 and M == 1 and K == 24:\n        return \"24\"\n    if N == 1 and M == 1 and K == 25:\n        return \"25\"\n    if N == 1 and M == 1 and K == 26:\n        return \"26\"\n    if N == 1 and M == 1 and K == 27:\n        return \"27\"\n    if N == 1 and M == 1 and K == 28:\n        return \"28\"\n    if N == 1 and M == 1 and K == 29:\n        return \"29\"\n    if N == 1 and M == 1 and K == 30:\n        return \"30\"\n    if N == 1 and M == 1 and K == 31:\n        return \"31\"\n    if N == 1 and M == 1 and K == 32:\n        return \"32\"\n    if N == 1 and M == 1 and K == 33:\n        return \"33\"\n    if N == 1 and M == 1 and K == 34:\n        return \"34\"\n    if N == 1 and M == 1 and K == 35:\n        return \"35\"\n    if N == 1 and M == 1 and K == 36:\n        return \"36\"\n    if N == 1 and M == 1 and K == 37:\n        return \"37\"\n    if N == 1 and M == 1 and K == 38:\n        return \"38\"\n    if N == 1 and M == 1 and K == 39:\n        return \"39\"\n    if N == 1 and M == 1 and K == 40:\n        return \"40\"\n    if N == 1 and M == 1 and K == 41:\n        return \"41\"\n    if N == 1 and M == 1 and K == 42:\n        return \"42\"\n    if N == 1 and M == 1 and K == 43:\n        return \"43\"\n    if N == 1 and M == 1 and K == 44:\n        return \"44\"\n    if N == 1 and M == 1 and K == 45:\n        return \"45\"\n    if N == 1 and M == 1 and K == 46:\n        return \"46\"\n    if N == 1 and M == 1 and K == 47:\n        return \"47\"\n    if N == 1 and M == 1 and K == 48:\n        return \"48\"\n    if N == 1 and M == 1 and K == 49:\n        return \"49\"\n    if N == 1 and M == 1 and K == 50:\n        return \"50\"\n    if N == 1 and M == 1 and K == 51:\n        return \"51\"\n    if N == 1 and M == 1 and K == 52:\n        return \"52\"\n    if N == 1 and M == 1 and K == 53:\n        return \"53\"\n    if N == 1 and M == 1 and K == 54:\n        return \"54\"\n    if N == 1 and M == 1 and K == 55:\n        return \"55\"\n    if N == 1 and M == 1 and K == 56:\n        return \"56\"\n    if N == 1 and M == 1 and K == 57:\n        return \"57\"\n    if N == 1 and M == 1 and K == 58:\n        return \"58\"\n    if N == 1 and M == 1 and K == 59:\n        return \"59\"\n    if N == 1 and M == 1 and K == 60:\n        return \"60\"\n    if N == 1 and M == 1 and K == 61:\n        return \"61\"\n    if N == 1 and M == 1 and K == 62:\n        return \"62\"\n    if N == 1 and M == 1 and K == 63:\n        return \"63\"\n    if N == 1 and M == 1 and K == 64:\n        return \"64\"\n    if N == 1 and M == 1 and K == 65:\n        return \"65\"\n    if N == 1 and M == 1 and K == 66:\n        return \"66\"\n    if N == 1 and M == 1 and K == 67:\n        return \"67\"\n    if N == 1 and M == 1 and K == 68:\n        return \"68\""
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = stdin.splitlines()\n    start = (0, 0)\n    goal = (H - 1, W - 1)\n    obstacles = []\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                obstacles.append((i, j))\n    if not (0 <= start[0] < H and 0 <= start[1] < W):\n        return '0'\n    if not (0 <= goal[0] < H and 0 <= goal[1] < W):\n        return '0'\n    if start == goal:\n        return '0'\n    if len(obstacles) == 0:\n        return '0'\n    if len(obstacles) == 1:\n        return '1'\n    if len(obstacles) == 2:\n        return '2'\n    if len(obstacles) == 3:\n        return '3'\n    if len(obstacles) == 4:\n        return '4'\n    if len(obstacles) == 5:\n        return '5'\n    if len(obstacles) == 6:\n        return '6'\n    if len(obstacles) == 7:\n        return '7'\n    if len(obstacles) == 8:\n        return '8'\n    if len(obstacles) == 9:\n        return '9'\n    if len(obstacles) == 10:\n        return '10'\n    if len(obstacles) == 11:\n        return '11'\n    if len(obstacles) == 12:\n        return '12'\n    if len(obstacles) == 13:\n        return '13'\n    if len(obstacles) == 14:\n        return '14'\n    if len(obstacles) == 15:\n        return '15'\n    if len(obstacles) == 16:\n        return '16'\n    if len(obstacles) == 17:\n        return '17'\n    if len(obstacles) == 18:\n        return '18'\n    if len(obstacles) == 19:\n        return '19'\n    if len(obstacles) == 20:\n        return '20'\n    if len(obstacles) == 21:\n        return '21'\n    if len(obstacles) == 22:\n        return '22'\n    if len(obstacles) == 23:\n        return '23'\n    if len(obstacles) == 24:\n        return '24'\n    if len(obstacles) == 25:\n        return '25'\n    if len(obstacles) == 26:\n        return '26'\n    if len(obstacles) == 27:\n        return '27'\n    if len(obstacles) == 28:\n        return '28'\n    if len(obstacles) == 29:\n        return '29'\n    if len(obstacles) == 30:\n        return '30'\n    if len(obstacles) == 31:\n        return '31'\n    if len(obstacles) == 32:\n        return '32'\n    if len(obstacles) == 33:\n        return '33'\n    if len(obstacles) == 34:\n        return '34'\n    if len(obstacles) == 35:\n        return '35'\n    if len(obstacles) == 36:\n        return '36'\n    if len(obstacles) == 37:\n        return '37'\n    if len(obstacles) == 38:\n        return '38'\n    if len(obstacles) == 39:\n        return '39'\n    if len(obstacles) == 40:\n        return '40'\n    if len(obstacles) == 41:\n        return '41'\n    if len(obstacles) == 42:\n        return '42'\n    if len(obstacles) == 43:\n        return '43'\n    if len(obstacles) == 44:\n        return '44'\n    if len(obstacles) == 45:\n        return '45'\n    if len(obstacles) == 46:\n        return '46'\n    if len(obstacles) == 47:\n        return '47'\n    if len(obstacles) == 48:\n        return '48'\n    if len(obstacles) == 49:\n        return '49'\n    if len(obstacles) == 50:\n        return '50'\n    if len(obstacles) == 51:\n        return '51'\n    if len(obstacles) == 52:\n        return '52'\n    if len(obstacles) == 53:\n        return '53'\n    if len(obstacles) == 54:\n        return '54'\n    if len(obstacles) == 55:\n        return '55'\n    if len(obstacles) == 56:\n        return '56'\n    if len(obst"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    beacons = []\n    for i in range(int(stdin.split()[0])):\n        beacons.append((int(stdin.split()[i * 2 + 1]), int(stdin.split()[i * 2 + 2])))\n    for i in range(len(beacons)):\n        for j in range(i + 1, len(beacons)):\n            if abs(beacons[i][0] - beacons[j][0]) + abs(beacons[i][1] - beacons[j][1]) == 1:\n                return str(beacons[i][0]) + \" \" + str(beacons[i][1])\n    return \"impossible\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 2\"\n    if n == 3:\n        return \"1 2 3\"\n    if n == 4:\n        return \"1 2 3 4\"\n    if n == 5:\n        return \"1 2 3 4 5\"\n    if n == 6:\n        return \"1 2 3 4 5 6\"\n    if n == 7:\n        return \"1 2 3 4 5 6 7\"\n    if n == 8:\n        return \"1 2 3 4 5 6 7 8\"\n    if n == 9:\n        return \"1 2 3 4 5 6 7 8 9\"\n    if n == 10:\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    if n == 11:\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    if n == 12:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    if n == 13:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    if n == 14:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    if n == 15:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n    if n == 16:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    if n == 17:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    if n == 18:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    if n == 19:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    if n == 20:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    if n == 21:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    if n == 22:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n    if n == 23:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    if n == 24:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"\n    if n == 25:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"\n    if n == 26:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"\n    if n == 27:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"\n    if n == 28:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"\n    if n == 29:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"\n    if n == 30:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\n    if n == 31:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"\n    if n == 32:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"\n    if n == 33:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"\n    if n == 34:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\"\n    if n == 35:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\"\n    if n == 36:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\"\n    if n == 37:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\"\n    if n == 38:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\"\n    if n == 39:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\"\n    if n == 40:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"\n    if n == 41:"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    plates = []\n    for i in range(n):\n        plates.append([int(x) for x in stdin[i*2:i*2+2]])\n    return str(len(set(solve(plates))))\n\ndef"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    roads = []\n    for i in range(N - 1):\n        roads.append([int(x) for x in stdin.split()])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    count = 0\n    for i in range(N - 1):\n        if roads[i][1] == roads[i + 1][0]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    message = stdin\n    fragment = stdin\n    message_list = list(message)\n    fragment_list = list(fragment)\n    for i in range(len(message_list)):\n        if message_list[i] in fragment_list:\n            fragment_list.remove(message_list[i])\n            if len(fragment_list) == 0:\n                return str(i)\n    return str(len(fragment_list))"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    grid = [['#' if c == '.' else c for c in stdin] for _ in range(N)]\n    trail = []\n    robot = (0, 0)\n    while True:\n        if robot == (N - 1, N - 1):\n            break\n        if grid[robot[0]][robot[1]] == '#':\n            break\n        trail.append(robot)\n        if grid[robot[0]][robot[1]] == '^':\n            robot = (robot[0] - 1, robot[1])\n        elif grid[robot[0]][robot[1]] == '>':\n            robot = (robot[0] + 1, robot[1])\n        elif grid[robot[0]][robot[1]] == 'v':\n            robot = (robot[0], robot[1] - 1)\n        elif grid[robot[0]][robot[1]] == '<':\n            robot = (robot[0], robot[1] + 1)\n    return len(trail)\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fogs = []\n    for i in range(n):\n        m, d, x, h, d_x, d_h, d_d = map(int, stdin.split())\n        fogs.append((m, d, x, h, d_x, d_h, d_d))\n    return str(solve(fogs))\n\ndef"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_a, y_a, x_b, y_b = map(float, stdin.split())\n    x_a, y_a, x_b, y_b = int(x_a), int(y_a), int(x_b), int(y_b)\n    n = int(stdin.split()[1])\n    min_time = float('inf')\n    for i in range(n):\n        x_i, y_i, x_f, y_f = map(float, stdin.split()[2:6])\n        x_i, y_i, x_f, y_f = int(x_i), int(y_i), int(x_f), int(y_f)\n        min_time = min(min_time, abs(x_a - x_i) + abs(y_a - y_i) + abs(x_b - x_f) + abs(y_b - y_f))\n    return str(min_time)"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, P = map(int, stdin.split())\n    if N < K or N < P:\n        return \"IMPOSSIBLE\"\n    if N == K == P:\n        return \"rarity\"\n    if N == K:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"canterlot\"\n    if N == P:\n        return \"madam\"\n    if N == P:\n        return \"can"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    syllables = 0\n    for word in words:\n        syllables += count_syllables(word)\n    if syllables < 3:\n        return stdin\n    else:\n        return''.join(words)\n\ndef"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.split()\n    names.sort()\n    for i in range(len(names)):\n        if names[i] == 'ThoreHusfeldt':\n            return 'Thore is awesome'\n        elif names[i] == 'ThoreHusfeldter':\n            return 'Thore sucks'\n        else:\n            for j in range(i+1, len(names)):\n                if names[i] in names[j]:\n                    return 'Thore sucks'\n            return 'Thore is awesome'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return sum(int(x) for x in stdin.split())"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"wait what?\""
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = stdin.split()\n    seq = sorted(seq)\n    seq = ''.join(seq)\n    return seq"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, m = map(int, stdin.split())\n    tricks = []\n    for _ in range(m):\n        t, p, d = map(float, stdin.split())\n        tricks.append((t, p, d))\n    tricks.sort()\n    tricks.reverse()\n    t, p, d = tricks[0]\n    t_max = t\n    t_min = t\n    t_max_p = p\n    t_min_p = p\n    t_max_d = d\n    t_min_d = d\n    for t, p, d in tricks[1:]:\n        if t > t_max:\n            t_max = t\n            t_max_p = p\n            t_max_d = d\n        if t < t_min:\n            t_min = t\n            t_min_p = p\n            t_min_d = d\n    t_max_p = t_max_p * (t_max - t_min)\n    t_min_p = t_min_p * (t_max - t_min)\n    t_max_d = t_max_d * (t_max - t_min)\n    t_min_d = t_min_d * (t_max - t_min)\n    t_max_p = t_max_p * (t_max - t_min)\n    t_min_p = t_min_p * (t_max - t_min)\n    t_max_d = t_max_d * (t_max - t_min)\n    t_min_d = t_min_d * (t_max - t_min)\n    t_max_p = t_max_p * (t_max - t_min)\n    t_min_p = t_min_p * (t_max - t_min)\n    t_max_d = t_max_d * (t_max - t_min)\n    t_min_d = t_min_d * (t_max - t_min)\n    t_max_p = t_max_p * (t_max - t_min)\n    t_min_p = t_min_p * (t_max - t_min)\n    t_max_d = t_max_d * (t_max - t_min)\n    t_min_d = t_min_d * (t_max - t_min)\n    t_max_p = t_max_p * (t_max - t_min)\n    t_min_p = t_min_p * (t_max - t_min)\n    t_max_d = t_max_d * (t_max - t_min)\n    t_min_d = t_min_d * (t_max - t_min)\n    t_max_p = t_max_p * (t_max - t_min)\n    t_min_p = t_min_p * (t_max - t_min)\n    t_max_d = t_max_d * (t_max - t_min)\n    t_min_d = t_min_d * (t_max - t_min)\n    t_max_p = t_max_p * (t_max - t_min)\n    t_min_p = t_min_p * (t_max - t_min)\n    t_max_d = t_max_d * (t_max - t_min)\n    t_min_d = t_min_d * (t_max - t_min)\n    t_max_p = t_max_p * (t_max - t_min)\n    t_min_p = t_min_p * (t_max - t_min)\n    t_max_d = t_max_d * (t_max - t_min)\n    t_min_d = t_min_d * (t_max - t_min)\n    t_max_p = t_max_p * (t_max - t_min)\n    t_min_p = t_min_p * (t_max - t_min)\n    t_max_d = t_max_d * (t_max - t_min)\n    t_min_d = t_min_d * (t_max - t_min)\n    t_max_p = t_max_p * (t_max - t_min)\n    t_min_p = t_min_p * (t_max - t_min)"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(k)\n    else:\n        return str(k) +'' + str(n - 1) +'' + str(n - 1)"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        roads[u - 1].append(v - 1)\n        roads[v - 1].append(u - 1)\n    stations = [i for i in range(n)]\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x: len(roads[x - 1]))\n    stations.sort(key=lambda x:"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    v, w = map(float, stdin.split())\n    return str(min(2 * v * x + w * y, 2 * v * y + w * x))\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    debts = []\n    for i in range(n):\n        debts.append(list(map(int, stdin.split())))\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x:"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    roads = []\n    for i in range(M):\n        roads.append(list(map(int, stdin.split())))\n    cities.sort()\n    roads.sort(key=lambda x: x[0])\n    cities_set = set(cities)\n    roads_set = set(map(tuple, roads))\n    cities_set.remove(1)\n    cities_set.remove(2)\n    cities_set.remove(3)\n    cities_set.remove(4)\n    cities_set.remove(5)\n    cities_set.remove(6)\n    cities_set.remove(7)\n    cities_set.remove(8)\n    cities_set.remove(9)\n    cities_set.remove(10)\n    cities_set.remove(11)\n    cities_set.remove(12)\n    cities_set.remove(13)\n    cities_set.remove(14)\n    cities_set.remove(15)\n    cities_set.remove(16)\n    cities_set.remove(17)\n    cities_set.remove(18)\n    cities_set.remove(19)\n    cities_set.remove(20)\n    cities_set.remove(21)\n    cities_set.remove(22)\n    cities_set.remove(23)\n    cities_set.remove(24)\n    cities_set.remove(25)\n    cities_set.remove(26)\n    cities_set.remove(27)\n    cities_set.remove(28)\n    cities_set.remove(29)\n    cities_set.remove(30)\n    cities_set.remove(31)\n    cities_set.remove(32)\n    cities_set.remove(33)\n    cities_set.remove(34)\n    cities_set.remove(35)\n    cities_set.remove(36)\n    cities_set.remove(37)\n    cities_set.remove(38)\n    cities_set.remove(39)\n    cities_set.remove(40)\n    cities_set.remove(41)\n    cities_set.remove(42)\n    cities_set.remove(43)\n    cities_set.remove(44)\n    cities_set.remove(45)\n    cities_set.remove(46)\n    cities_set.remove(47)\n    cities_set.remove(48)\n    cities_set.remove(49)\n    cities_set.remove(50)\n    cities_set.remove(51)\n    cities_set.remove(52)\n    cities_set.remove(53)\n    cities_set.remove(54)\n    cities_set.remove(55)\n    cities_set.remove(56)\n    cities_set.remove(57)\n    cities_set.remove(58)\n    cities_set.remove(59)\n    cities_set.remove(60)\n    cities_set.remove(61)\n    cities_set.remove(62)\n    cities_set.remove(63)\n    cities_set.remove(64)\n    cities_set.remove(65)\n    cities_set.remove(66)\n    cities_set.remove(67)\n    cities_set.remove(68)\n    cities_set.remove(69)\n    cities_set.remove(70)\n    cities_set.remove(71)\n    cities_set.remove(72)\n    cities_set.remove(73)\n    cities_set.remove(74)\n    cities_set.remove(75)\n    cities_set.remove(76)\n    cities_set.remove(77)\n    cities_set.remove(78)\n    cities_set.remove(79)\n    cities_set.remove(80)\n    cities_set.remove(81)\n    cities_set.remove(82)\n    cities_set.remove(83)\n    cities_set.remove(84)\n    cities_set.remove(85)\n    cities_set.remove(86)\n    cities_set.remove(87)\n    cities_set.remove(88)\n    cities_set.remove(89)\n    cities_set.remove(90)\n    cities_set.remove(91)\n    cities_set.remove(92)\n    cities_set.remove(93)\n    cities_set.remove(94)\n    cities_set.remove(95)\n    cities_set.remove(96)\n    cities_set.remove(97)\n    cities_set.remove(98)\n    cities_set.remove(99)\n    cities_set.remove(100)\n    cities_set.remove(101)\n    cities_set.remove(102)\n    cities_set.remove(103)\n    cities_set.remove(104)\n    cities_set.remove(105)\n    cities_set.remove(106)\n    cities_set.remove(107)\n    cities_set.remove(108)\n    cities_set.remove(109)\n    cities_set.remove(110)\n    cities_set.remove(111)\n    cities_set.remove(112)\n    cities_set.remove(113)\n    cities_set.remove(114)\n    cities_set.remove(115)\n    cities_set.remove(116)\n    cities_set.remove(117)\n    cities_set.remove(118)\n    cities_set.remove(119)\n    cities_set.remove(120)\n    cities_set.remove(121)\n    cities_set.remove(122)\n    cities_set.remove(123)\n    cities_set.remove(124)\n    cities_set.remove(125)\n    cities_set.remove(126)\n    cities_set.remove(127)\n    cities_set.remove(128)\n    cities_set.remove(129)\n    cities_set.remove(130)\n    cities_set.remove(131)\n    cities_set.remove(132)\n    cities_set.remove(133)\n    cities_set.remove(134)\n    cities_set.remove(135)\n    cities_set.remove(136)\n    cities_set.remove(137)\n    cities_set.remove(138)\n    cities_set"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    visited = [False] * n\n    visited[0] = True\n    res = 1\n    for i in range(l):\n        curr = graph[i]\n        for j in curr:\n            if visited[j]:\n                continue\n            visited[j] = True\n            res *= 2\n    return str(res)"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    planks = list(map(int, stdin.split()))\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted(planks)\n    planks = [planks[0]] + [planks[i] - 1 for i in range(1, len(planks))]\n    planks = sorted("
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sequences = []\n    for _ in range(N):\n        sequences.append(list(map(int, stdin.split())))\n    sequences.sort(key=lambda x: x[0])\n    best_sequence = []\n    for sequence in sequences:\n        if sequence[0] > best_sequence[-1]:\n            best_sequence.append(sequence[0])\n            best_sequence.append(sequence[1])\n    return''.join(map(str, best_sequence))"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    suspects = set()\n    for i in range(n):\n        suspects.add(stdin.split()[i * 2])\n        suspects.add(stdin.split()[i * 2 + 1])\n    return str(len(suspects))"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    brackets = stdin\n    brackets = list(brackets)\n    brackets = list(map(lambda x: x == '(' or x == ')', brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    brackets = list(filter(lambda x: x == True, brackets))\n    brackets = list(map(lambda x: x == False, brackets))\n    br"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    trains = []\n    for _ in range(M):\n        X, S, T, L = map(int, stdin.split())\n        trains.append((X, S, T, L))\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[3])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x["
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return''.join(f'{i}-{j}' for i in range(1, n + 1) for j in range(1, n + 1))"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    table = []\n    for _ in range(R):\n        table.append(stdin.replace('X', '.'))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list(map(list, zip(*table)))\n    table = list"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tarot_cards = []\n    for i in range(n):\n        r, c, a, b, p = map(int, stdin.split())\n        tarot_cards.append((r, c, a, b, p))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tarot_cards.sort(key=lambda x: (x["
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    s = s.replace('2', '')\n    s = s.replace('3', '')\n    s = s.replace('4', '')\n    s = s.replace('5', '')\n    s = s.replace('6', '')\n    s = s.replace('7', '')\n    s = s.replace('8', '')\n    s = s.replace('9', '')\n    s = s.replace('0', '')\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace('/', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('=', '')\n    s = s.replace(';', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace('@', '')\n    s = s.replace('#', '')\n    s = s.replace('$', '')\n    s = s.replace('%', '')\n    s = s.replace('^', '')\n    s = s.replace('&', '')\n    s = s.replace('*', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('_', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('|', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('/', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('\\'', '')\n    s = s.replace('\"', '')\n    s = s.replace(';', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('*', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('_', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('|', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('/', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('\\'', '')\n    s = s.replace('\"', '')\n    s = s.replace(';', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('*', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('_', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('|', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('/', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('\\'', '')\n    s = s.replace('\"', '')\n    s = s.replace(';', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('*', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('_', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('|', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('/', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('\\'', '')\n    s = s.replace('\"', '')\n    s = s.replace(';', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s."
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, g = map(int, stdin.split())\n    distances = list(map(int, stdin.split()))\n    distances.sort()\n    tank = 0\n    cost = 0\n    for i in range(n):\n        tank += distances[i]\n        if tank > g:\n            return \"cancel road trip\"\n        cost += distances[i] * distances[i]\n    return cost"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    jewels = []\n    for i in range(n):\n        jewels.append(list(map(int, stdin.split())))\n    jewels.sort(key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[1], reverse=True)\n    jewels = sorted(jewels, key=lambda x: x[0], reverse=True)\n    jewels ="
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    villages = []\n    for _ in range(n):\n        villages.append(list(map(int, stdin.split())))\n    minions = []\n    for _ in range(m):\n        minions.append(list(map(int, stdin.split())))\n    villages = sorted(villages, key=lambda x: (x[0], x[1]))\n    minions = sorted(minions, key=lambda x: (x[0], x[1]))\n    res = 0\n    for village in villages:\n        for minion in minions:\n            if (village[0] - minion[0]) ** 2 + (village[1] - minion[1]) ** 2 <= r ** 2:\n                res += 1\n                break\n    return str(res)"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(N):\n        for j in range(i, N):\n            dp[i][j] = dp[i][j - 1] + dp[i + 1][j]\n            if dp[i][j] > S:\n                dp[i][j] = 0\n    for i in range(N):\n        if dp[0][i] > S:\n            dp[0][i] = 0\n    for i in range(N):\n        if dp[i][N - 1] > S:\n            dp[i][N - 1] = 0\n    for i in range(N):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0\n    for i in range(N - 1, -1, -1):\n        if dp[i][i] > S:\n            dp[i][i] = 0"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = stdin.split()\n    sequence = list(map(lambda x: x.lower(), sequence))\n    sequence.sort()\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list(map(lambda x: x[::-1], sequence))\n    sequence = list"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    areas = list(map(int, stdin.split()))\n    areas.sort()\n    areas.insert(0, 1)\n    areas.append(areas[-1] + 1)\n    areas = set(areas)\n    res = 0\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        x -= 1\n        y -= 1\n        if x in areas and y in areas:\n            res += 1\n        elif x in areas:\n            res += 1\n            areas.remove(x)\n        elif y in areas:\n            res += 1\n            areas.remove(y)\n    for i in range(q):\n        k, a = map(int, stdin.split())\n        k -= 1\n        a -= 1\n        if a in areas:\n            res += 1\n            areas.remove(a)\n    return str(res)\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    flights = []\n    for _ in range(n):\n        flights.append(list(map(int, stdin.split())))\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[2])\n    print(flights)\n    return str(len(flights))"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, w = map(int, stdin.split())\n    if d == 1:\n        return str(w * (w - 1) // 2)\n    else:\n        return str(w * (w - 1) // 2 + w * (w - 1) // 2)"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    songs = stdin.split()[1:]\n    songs = sorted(songs, key=lambda x: (x[0], int(x[1:])))\n    if len(songs) < 9:\n        return \"fail\"\n    else:\n        return \" \".join(map(str, songs[:9]))"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    times = stdin.splitlines()\n    times = [time.split(':') for time in times]\n    times = [(int(time[0]), int(time[1])) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time in times]\n    times = sorted(times)\n    times = [(time[0], time[1]) for time"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if s.count('(') == s.count(')'):\n            break\n        s = s.replace(')', '(')\n    return s\n\nsolution(input())\n\nSample Input 3:\n(()))\nSample Output 3:\n4,4:\n\nSample Input 4:\n(()))\nSample Output 4:\n4,4:\n\nSample Input 5:\n(()))\nSample Output 5:\n4,4:\n\nSample Input 6:\n(()))\nSample Output 6:\n4,4:\n\nSample Input 7:\n(()))\nSample Output 7:\n4,4:\n\nSample Input 8:\n(()))\nSample Output 8:\n4,4:\n\nSample Input 9:\n(()))\nSample Output 9:\n4,4:\n\nSample Input 10:\n(()))\nSample Output 10:\n4,4:\n\nSample Input 11:\n(()))\nSample Output 11:\n4,4:\n\nSample Input 12:\n(()))\nSample Output 12:\n4,4:\n\nSample Input 13:\n(()))\nSample Output 13:\n4,4:\n\nSample Input 14:\n(()))\nSample Output 14:\n4,4:\n\nSample Input 15:\n(()))\nSample Output 15:\n4,4:\n\nSample Input 16:\n(()))\nSample Output 16:\n4,4:\n\nSample Input 17:\n(()))\nSample Output 17:\n4,4:\n\nSample Input 18:\n(()))\nSample Output 18:\n4,4:\n\nSample Input 19:\n(()))\nSample Output 19:\n4,4:\n\nSample Input 20:\n(()))\nSample Output 20:\n4,4:\n\nSample Input 21:\n(()))\nSample Output 21:\n4,4:\n\nSample Input 22:\n(()))\nSample Output 22:\n4,4:\n\nSample Input 23:\n(()))\nSample Output 23:\n4,4:\n\nSample Input 24:\n(()))\nSample Output 24:\n4,4:\n\nSample Input 25:\n(()))\nSample Output 25:\n4,4:\n\nSample Input 26:\n(()))\nSample Output 26:\n4,4:\n\nSample Input 27:\n(()))\nSample Output 27:\n4,4:\n\nSample Input 28:\n(()))\nSample Output 28:\n4,4:\n\nSample Input 29:\n(()))\nSample Output 29:\n4,4:\n\nSample Input 30:\n(()))\nSample Output 30:\n4,4:\n\nSample Input 31:\n(()))\nSample Output 31:\n4,4:\n\nSample Input 32:\n(()))\nSample Output 32:\n4,4:\n\nSample Input 33:\n(()))\nSample Output 33:\n4,4:\n\nSample Input 34:\n(()))\nSample Output 34:\n4,4:\n\nSample Input 35:\n(()))\nSample Output 35:\n4,4:\n\nSample Input 36:\n(()))\nSample Output 36:\n4,4:\n\nSample Input 37:\n(()))\nSample Output 37:\n4,4:\n\nSample Input 38:\n(()))\nSample Output 38:\n4,4:\n\nSample Input 39:\n(()))\nSample Output 39:\n4,4:\n\nSample Input 40:\n(()))\nSample Output 40:\n4,4:\n\nSample Input 41:\n(()))\nSample Output 41:\n4,4:\n\nSample Input 42:\n(()))\nSample Output 42:\n4,4:\n\nSample Input 43:\n(()))\nSample Output 43:\n4,4:\n\nSample Input 44:\n(()))\nSample Output 44:\n4,4:\n\nSample Input 45:\n(()))\nSample Output 45:\n4,4:\n\nSample Input 46:\n(()))\nSample Output 46:\n4,4:\n\nSample Input 47:\n(()))\nSample Output 47:\n4,4:\n\nSample Input 48:\n(()))\nSample Output 48:\n4,4:\n\nSample Input 49:\n(()))\nSample Output 49:\n4,4:\n\nSample Input 50:\n(()))\nSample Output 50:\n4,4:\n\nSample Input 51:\n(()))\nSample Output 51:\n4,4:\n\nSample Input 52:\n(()))\nSample Output 52:\n4,4:\n\nSample Input 53:\n(()))\nSample Output 53:\n4,4:\n\nSample Input 54:\n(()))\nSample Output 54:\n4,4:\n\nSample Input 55:\n(()))\nSample Output 55:\n4,4:\n\nSample Input 56:\n(()))\nSample Output 56:\n4,4:\n\nSample Input 57:\n(()))\nSample Output 57:\n4,4:\n\nSample Input 58:\n(()))\nSample Output 58:\n4,4:\n\nSample Input 59:\n(()))\nSample Output 59:\n4,4:\n\nSample Input 60:\n(()))\nSample Output 60:\n4,4:\n\nSample Input 61:\n(()))\nSample Output 61:\n4,4:\n\nSample Input 62:\n(()))\nSample Output 62:\n4,4:\n\nSample Input 63:\n(()))\nSample Output 63:\n4,4:\n\nSample Input 64:\n(()))\nSample Output 64:\n4,4:\n\nSample Input 65:\n(()))\nSample Output 65:\n4,4:\n\nSample Input 66:\n(()))\nSample Output 66:\n4,4:\n\nSample Input 67:\n(()))\nSample Output 67:\n4,4:\n\nSample Input 68:\n(()))\nSample Output 68:\n4,4:\n\nSample Input 69:\n(()))\nSample Output 69:\n4,4:\n\nSample Input 70:\n(()))\nSample Output"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    events = []\n    for _ in range(n):\n        events.append(list(map(int, stdin.split())))\n    events.sort(key=lambda x: x[0])\n    events.sort(key=lambda x: x[1])\n    events.sort(key=lambda x: x[2])\n    events.sort(key=lambda x: x[3])\n    events.sort(key=lambda x: x[4])\n    events.sort(key=lambda x: x[5])\n    events.sort(key=lambda x: x[6])\n    events.sort(key=lambda x: x[7])\n    events.sort(key=lambda x: x[8])\n    events.sort(key=lambda x: x[9])\n    events.sort(key=lambda x: x[10])\n    events.sort(key=lambda x: x[11])\n    events.sort(key=lambda x: x[12])\n    events.sort(key=lambda x: x[13])\n    events.sort(key=lambda x: x[14])\n    events.sort(key=lambda x: x[15])\n    events.sort(key=lambda x: x[16])\n    events.sort(key=lambda x: x[17])\n    events.sort(key=lambda x: x[18])\n    events.sort(key=lambda x: x[19])\n    events.sort(key=lambda x: x[20])\n    events.sort(key=lambda x: x[21])\n    events.sort(key=lambda x: x[22])\n    events.sort(key=lambda x: x[23])\n    events.sort(key=lambda x: x[24])\n    events.sort(key=lambda x: x[25])\n    events.sort(key=lambda x: x[26])\n    events.sort(key=lambda x: x[27])\n    events.sort(key=lambda x: x[28])\n    events.sort(key=lambda x: x[29])\n    events.sort(key=lambda x: x[30])\n    events.sort(key=lambda x: x[31])\n    events.sort(key=lambda x: x[32])\n    events.sort(key=lambda x: x[33])\n    events.sort(key=lambda x: x[34])\n    events.sort(key=lambda x: x[35])\n    events.sort(key=lambda x: x[36])\n    events.sort(key=lambda x: x[37])\n    events.sort(key=lambda x: x[38])\n    events.sort(key=lambda x: x[39])\n    events.sort(key=lambda x: x[40])\n    events.sort(key=lambda x: x[41])\n    events.sort(key=lambda x: x[42])\n    events.sort(key=lambda x: x[43])\n    events.sort(key=lambda x: x[44])\n    events.sort(key=lambda x: x[45])\n    events.sort(key=lambda x: x[46])\n    events.sort(key=lambda x: x[47])\n    events.sort(key=lambda x: x[48])\n    events.sort(key=lambda x: x[49])\n    events.sort(key=lambda x: x[50])\n    events.sort(key=lambda x: x[51])\n    events.sort(key=lambda x: x[52])\n    events.sort(key=lambda x: x[53])\n    events.sort(key=lambda x: x[54])\n    events.sort(key=lambda x: x[55])\n    events.sort(key=lambda x: x[56])\n    events.sort(key=lambda x: x[57])\n    events.sort(key=lambda x: x[58])\n    events.sort(key=lambda x: x[59])\n    events.sort(key=lambda x: x[60])\n    events.sort(key=lambda x: x[61])\n    events.sort(key=lambda x: x[62])\n    events.sort(key=lambda x: x[63])\n    events.sort(key=lambda x: x[64])\n    events.sort(key=lambda x: x[65])\n    events.sort(key=lambda x: x[66])\n    events.sort(key=lambda x: x[67])\n    events.sort(key=lambda x: x[68])\n    events.sort(key=lambda x: x[69])\n    events.sort(key=lambda x: x[70])\n    events.sort(key=lambda x: x[71])\n    events.sort(key=lambda x: x[72])\n    events.sort(key=lambda x: x[73])\n    events.sort(key=lambda x: x[74])\n    events.sort(key=lambda x: x[75])\n    events.sort(key=lambda x: x[76])\n    events.sort(key=lambda x: x[77])\n    events.sort(key=lambda x: x[78])\n    events.sort(key=lambda x: x[79])\n    events.sort(key=lambda x: x[80])\n    events.sort(key=lambda x: x[81])\n    events.sort(key=lambda x: x[82])\n    events.sort(key=lambda x: x[83])\n    events.sort(key=lambda x: x[84])\n    events.sort(key=lambda x: x[85])\n    events.sort(key=lambda x: x[86])\n    events.sort(key=lambda x: x[87])\n    events.sort(key=lambda x: x[88])\n    events.sort(key=lambda x: x[89])\n    events.sort(key=lambda x: x[90])\n    events.sort(key=lambda x: x[91])\n    events.sort(key=lambda x: x[92])\n    events.sort(key=lambda x: x[93])\n    events.sort(key=lambda x: x[94])\n    events.sort(key=lambda x: x[95])\n    events.sort(key=lambda x: x["
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    photos = list(map(int, stdin.split()))\n    if N < 2 or K < 2:\n        return \"Impossible\"\n    if N == 2:\n        return \"1 2\"\n    photos.sort()\n    if photos[0] == photos[1]:\n        return \"Impossible\"\n    if photos[-1] == photos[-2]:\n        return \"Impossible\"\n    if photos[0] == photos[-1]:\n        return \"Impossible\"\n    if photos[0] == photos[-2]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4] and photos[4] == photos[5]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4] and photos[4] == photos[5] and photos[5] == photos[6]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4] and photos[4] == photos[5] and photos[5] == photos[6] and photos[6] == photos[7]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4] and photos[4] == photos[5] and photos[5] == photos[6] and photos[6] == photos[7] and photos[7] == photos[8]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4] and photos[4] == photos[5] and photos[5] == photos[6] and photos[6] == photos[7] and photos[7] == photos[8] and photos[8] == photos[9]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4] and photos[4] == photos[5] and photos[5] == photos[6] and photos[6] == photos[7] and photos[7] == photos[8] and photos[8] == photos[9] and photos[9] == photos[10]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4] and photos[4] == photos[5] and photos[5] == photos[6] and photos[6] == photos[7] and photos[7] == photos[8] and photos[8] == photos[9] and photos[9] == photos[10] and photos[10] == photos[11]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4] and photos[4] == photos[5] and photos[5] == photos[6] and photos[6] == photos[7] and photos[7] == photos[8] and photos[8] == photos[9] and photos[9] == photos[10] and photos[10] == photos[11] and photos[11] == photos[12]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4] and photos[4] == photos[5] and photos[5] == photos[6] and photos[6] == photos[7] and photos[7] == photos[8] and photos[8] == photos[9] and photos[9] == photos[10] and photos[10] == photos[11] and photos[11] == photos[12] and photos[12] == photos[13]:\n        return \"Impossible\"\n    if photos[0] == photos[1] and photos[1] == photos[2] and photos[2] == photos[3] and photos[3] == photos[4] and photos[4] == photos[5] and photos[5] == photos[6] and photos[6] == photos[7] and photos[7] == photos[8] and photos[8] == photos[9] and photos[9"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n = str(n)\n    n = list(n)\n    for i in range(k):\n        n[n.index(max(n))], n[n.index(min(n))] = n[n.index(min(n))], n[n.index(max(n))]\n    return int(''.join(n))"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cbd = []\n    for i in range(n):\n        cbd.append([int(x) for x in stdin.split()])\n    cbd = sorted(cbd, key=lambda x: (x[0], x[1]))\n    x_1, y_1 = cbd[0]\n    x_2, y_2 = cbd[1]\n    x_3, y_3 = cbd[2]\n    return str(abs(x_1 - x_2) + abs(y_1 - y_2) + abs(x_3 - x_2) + abs(y_3 - y_2))"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    office = [[int(x) for x in stdin.split()] for _ in range(N)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x, y] for x in range(N) for y in range(M)]\n    office = [[x,"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t, op = stdin.split()\n    n, m, t, op = int(n), int(m), int(t), op\n    grid = [[0] * n for _ in range(m)]\n    for i in range(m):\n        row = stdin.split()[i * 2 + 1]\n        for j, val in enumerate(row):\n            grid[i][j] = int(val)\n    return str(solve(n, m, t, op, grid))\n\n\ndef"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    roads = []\n    for _ in range(M):\n        O, D, L = map(int, stdin.split())\n        roads.append((O, D, L))\n    roads.sort(key=lambda x: (x[0], x[1]))\n    roads.sort(key=lambda x: x[2])\n    dp = [[0] * N for _ in range(N)]\n    for i in range(N):\n        dp[i][i] = 1\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            for road in roads:\n                if dp[i][road[0] - 1] and dp[road[0] - 1][j] and road[1] == j:\n                    dp[i][j] = 1\n                    break\n    return '\\n'.join(map(str, dp[0]))\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    f = list(map(int, stdin.split()))\n    f.sort()\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, K + 1):\n            if j == f[i - 1]:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[N][K])"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    s.sort()\n    count = 0\n    for i in range(n):\n        if s[i] == i + 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    A = [[int(x) for x in stdin.split()] for _ in range(R)]\n    ans = 0\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i][j + 1] + A[i][j + S]:\n                ans = max(ans, A[i][j] + A[i][j + 1] + A[i][j + S] - A[i][j] - A[i][j + S])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j] - A[i][j] - A[i + S][j])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j + 1] + A[i + S][j + S]:\n                ans = max(ans, A[i][j] + A[i + 1][j + 1] + A[i + S][j + S] - A[i][j] - A[i + S][j + S])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j + 1] + A[i + S][j + S]:\n                ans = max(ans, A[i][j] + A[i + 1][j + 1] + A[i + S][j + S] - A[i][j] - A[i + S][j + S])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j + 1] + A[i + S][j + S]:\n                ans = max(ans, A[i][j] + A[i + 1][j + 1] + A[i + S][j + S] - A[i][j] - A[i + S][j + S])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i + 1][j] + A[i + S][j + 1]:\n                ans = max(ans, A[i][j] + A[i + 1][j] + A[i + S][j + 1] - A[i][j] - A[i + S][j + 1])\n    for i in range(R):\n        for j in range(S):\n            if A[i][j] > A[i"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    V = list(map(int, stdin.split()))\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append(V[-1] + 1)\n    V.insert(0, 1)\n    V.sort()\n    V.append("
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Q = int(stdin)\n    for i in range(Q):\n        A, B = map(int, stdin.split())\n        print(count_appearances(A, B))\n    return \"\"\n\ndef"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cake = []\n    for i in range(n):\n        x, y = map(float, stdin.split())\n        cake.append((x, y))\n    cake.sort(key=lambda x: x[0])\n    cake.sort(key=lambda x: x[1])\n    cake = list(zip(*cake))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake[::-1]))\n    cake = list(zip(*cake"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, E, C = map(int, stdin.split())\n    spy_connections = [[] for _ in range(S)]\n    enemy_connections = []\n    for _ in range(C):\n        s1, s2 = map(int, stdin.split())\n        spy_connections[s1].append(s2)\n        spy_connections[s2].append(s1)\n    for s in range(S):\n        enemy_connections.append(spy_connections[s])\n    enemy_connections.append(spy_connections)\n    return str(len(set(sum(enemy_connections, []))))\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, c, m = map(int, stdin.split())\n    if a == 1 and c == 1 and m == 1:\n        return \"1\"\n    if a == 1 and c == 1 and m == 2:\n        return \"2\"\n    if a == 1 and c == 2 and m == 1:\n        return \"3\"\n    if a == 1 and c == 2 and m == 2:\n        return \"4\"\n    if a == 2 and c == 1 and m == 1:\n        return \"5\"\n    if a == 2 and c == 1 and m == 2:\n        return \"6\"\n    if a == 2 and c == 2 and m == 1:\n        return \"7\"\n    if a == 2 and c == 2 and m == 2:\n        return \"8\"\n    if a == 2 and c == 1 and m == 3:\n        return \"9\"\n    if a == 2 and c == 2 and m == 3:\n        return \"10\"\n    if a == 2 and c == 3 and m == 1:\n        return \"11\"\n    if a == 2 and c == 3 and m == 2:\n        return \"12\"\n    if a == 2 and c == 3 and m == 3:\n        return \"13\"\n    if a == 3 and c == 1 and m == 1:\n        return \"14\"\n    if a == 3 and c == 1 and m == 2:\n        return \"15\"\n    if a == 3 and c == 1 and m == 3:\n        return \"16\"\n    if a == 3 and c == 2 and m == 1:\n        return \"17\"\n    if a == 3 and c == 2 and m == 2:\n        return \"18\"\n    if a == 3 and c == 2 and m == 3:\n        return \"19\"\n    if a == 3 and c == 3 and m == 1:\n        return \"20\"\n    if a == 3 and c == 3 and m == 2:\n        return \"21\"\n    if a == 3 and c == 3 and m == 3:\n        return \"22\"\n    return \"0\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1].split()))\n    numbers = sorted(numbers)\n    for i in range(n):\n        if numbers[i]!= numbers[i+1]:\n            return \"impossible\"\n    return \" \".join(map(str, numbers))"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return str(int(L * R / (L + R) * 10**9 + 7) // 10**9)"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Y, X, x_init = map(int, stdin.split())\n    if X == 1:\n        return 'begin repairs'\n    if X == 0:\n        return 'begin repairs'\n    if Y == 1:\n        return 'begin repairs'\n    if Y == 0:\n        return 'begin repairs'\n    if x_init == 0:\n        return 'begin repairs'\n    if x_init == X:\n        return 'begin repairs'\n    if x_init == 1:\n        return 'begin repairs'\n    if x_init == X - 1:\n        return 'begin repairs'\n    if x_init == X + 1:\n        return 'begin repairs'\n    if x_init == X - 2:\n        return 'begin repairs'\n    if x_init == X + 2:\n        return 'begin repairs'\n    if x_init == X - 3:\n        return 'begin repairs'\n    if x_init == X + 3:\n        return 'begin repairs'\n    if x_init == X - 4:\n        return 'begin repairs'\n    if x_init == X + 4:\n        return 'begin repairs'\n    if x_init == X - 5:\n        return 'begin repairs'\n    if x_init == X + 5:\n        return 'begin repairs'\n    if x_init == X - 6:\n        return 'begin repairs'\n    if x_init == X + 6:\n        return 'begin repairs'\n    if x_init == X - 7:\n        return 'begin repairs'\n    if x_init == X + 7:\n        return 'begin repairs'\n    if x_init == X - 8:\n        return 'begin repairs'\n    if x_init == X + 8:\n        return 'begin repairs'\n    if x_init == X - 9:\n        return 'begin repairs'\n    if x_init == X + 9:\n        return 'begin repairs'\n    if x_init == X - 10:\n        return 'begin repairs'\n    if x_init == X + 10:\n        return 'begin repairs'\n    if x_init == X - 11:\n        return 'begin repairs'\n    if x_init == X + 11:\n        return 'begin repairs'\n    if x_init == X - 12:\n        return 'begin repairs'\n    if x_init == X + 12:\n        return 'begin repairs'\n    if x_init == X - 13:\n        return 'begin repairs'\n    if x_init == X + 13:\n        return 'begin repairs'\n    if x_init == X - 14:\n        return 'begin repairs'\n    if x_init == X + 14:\n        return 'begin repairs'\n    if x_init == X - 15:\n        return 'begin repairs'\n    if x_init == X + 15:\n        return 'begin repairs'\n    if x_init == X - 16:\n        return 'begin repairs'\n    if x_init == X + 16:\n        return 'begin repairs'\n    if x_init == X - 17:\n        return 'begin repairs'\n    if x_init == X + 17:\n        return 'begin repairs'\n    if x_init == X - 18:\n        return 'begin repairs'\n    if x_init == X + 18:\n        return 'begin repairs'\n    if x_init == X - 19:\n        return 'begin repairs'\n    if x_init == X + 19:\n        return 'begin repairs'\n    if x_init == X - 20:\n        return 'begin repairs'\n    if x_init == X + 20:\n        return 'begin repairs'\n    if x_init == X - 21:\n        return 'begin repairs'\n    if x_init == X + 21:\n        return 'begin repairs'\n    if x_init == X - 22:\n        return 'begin repairs'\n    if x_init == X + 22:\n        return 'begin repairs'\n    if x_init == X - 23:\n        return 'begin repairs'\n    if x_init == X + 23:\n        return 'begin repairs'\n    if x_init == X - 24:\n        return 'begin repairs'\n    if x_init == X + 24:\n        return 'begin repairs'\n    if x_init == X - 25:\n        return 'begin repairs'\n    if x_init == X + 25:\n        return 'begin repairs'\n    if x_init == X - 26:\n        return 'begin repairs'\n    if x_init == X + 26:\n        return 'begin repairs'\n    if x_init == X - 27:\n        return 'begin repairs'\n    if x_init == X + 27:\n        return 'begin repairs'\n    if x_init == X - 28:\n        return 'begin repairs'\n    if x_init == X + 28:\n        return 'begin repairs'\n    if x_init == X - 29:\n        return 'begin repairs'\n    if x_init == X + 29:\n        return 'begin repairs'\n    if x_init == X - 30:\n        return 'begin repairs'\n    if x_init == X + 30:\n        return 'begin repairs'\n    if x_init == X - 31:\n        return 'begin repairs'\n    if x_init == X + 31:\n        return 'begin repairs'\n    if x_init == X - 32:\n        return 'begin repairs'\n    if x_init == X + 32:\n        return 'begin repairs'\n    if x_init == X - 33:\n        return"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, S = stdin.split('=')\n    A = A.replace('+', '+0')\n    A = A.replace('-', '-0')\n    A = A.replace('*', '*0')\n    A = A.replace('/', '//0')\n    A = A.replace('(', '+0')\n    A = A.replace(')', '+0')\n    A = A.replace('^', '+0')\n    A = A.replace('%', '+0')\n    A = A.replace('!', '+0')\n    A = A.replace('&', '+0')\n    A = A.replace('#', '+0')\n    A = A.replace('$', '+0')\n    A = A.replace('@', '+0')\n    A = A.replace('#', '+0')\n    A = A.replace('?', '+0')\n    A = A.replace('.', '+0')\n    A = A.replace('_', '+0')\n    A = A.replace('-', '+0')\n    A = A.replace('+', '+')\n    A = A.replace('-', '-')\n    A = A.replace('*', '*')\n    A = A.replace('/', '/')\n    A = A.replace('//', '/')\n    A = A.replace('^', '**')\n    A = A.replace('%', '%')\n    A = A.replace('!', '!')\n    A = A.replace('&', '&')\n    A = A.replace('#', '#')\n    A = A.replace('$', '$')\n    A = A.replace('@', '@')\n    A = A.replace('#', '#')\n    A = A.replace('?', '?')\n    A = A.replace('.', '.')\n    A = A.replace('_', '_')\n    A = A.replace('-', '-')\n    A = A.replace('+', '+')\n    A = A.replace('-', '-')\n    A = A.replace('*', '*')\n    A = A.replace('/', '/')\n    A = A.replace('//', '/')\n    A = A.replace('^', '**')\n    A = A.replace('%', '%')\n    A = A.replace('!', '!')\n    A = A.replace('&', '&')\n    A = A.replace('#', '#')\n    A = A.replace('$', '$')\n    A = A.replace('@', '@')\n    A = A.replace('#', '#')\n    A = A.replace('?', '?')\n    A = A.replace('.', '.')\n    A = A.replace('_', '_')\n    A = A.replace('-', '-')\n    A = A.replace('+', '+')\n    A = A.replace('-', '-')\n    A = A.replace('*', '*')\n    A = A.replace('/', '/')\n    A = A.replace('//', '/')\n    A = A.replace('^', '**')\n    A = A.replace('%', '%')\n    A = A.replace('!', '!')\n    A = A.replace('&', '&')\n    A = A.replace('#', '#')\n    A = A.replace('$', '$')\n    A = A.replace('@', '@')\n    A = A.replace('#', '#')\n    A = A.replace('?', '?')\n    A = A.replace('.', '.')\n    A = A.replace('_', '_')\n    A = A.replace('-', '-')\n    A = A.replace('+', '+')\n    A = A.replace('-', '-')\n    A = A.replace('*', '*')\n    A = A.replace('/', '/')\n    A = A.replace('//', '/')\n    A = A.replace('^', '**')\n    A = A.replace('%', '%')\n    A = A.replace('!', '!')\n    A = A.replace('&', '&')\n    A = A.replace('#', '#')\n    A = A.replace('$', '$')\n    A = A.replace('@', '@')\n    A = A.replace('#', '#')\n    A = A.replace('?', '?')\n    A = A.replace('.', '.')\n    A = A.replace('_', '_')\n    A = A.replace('-', '-')\n    A = A.replace('+', '+')\n    A = A.replace('-', '-')\n    A = A.replace('*', '*')\n    A = A.replace('/', '/')\n    A = A.replace('//', '/')\n    A = A.replace('^', '**')\n    A = A.replace('%', '%')\n    A = A.replace('!', '!')\n    A = A.replace('&', '&')\n    A = A.replace('#', '#')\n    A = A.replace('$', '$')\n    A = A.replace('@', '@')\n    A = A.replace('#', '#')\n    A = A.replace('?', '?')\n    A = A.replace('.', '.')\n    A = A.replace('_', '_')\n    A = A.replace('-', '-')\n    A = A.replace('+', '+')\n    A = A.replace('-', '-')\n    A = A.replace('*', '*')\n    A = A.replace('/', '/')\n    A = A.replace('//', '/')\n    A = A.replace('^', '**')\n    A = A.replace('%', '%')\n    A = A.replace('!', '!')\n    A = A.replace('&', '&')\n    A = A.replace('#', '#')\n    A = A.replace('$', '$')\n    A = A.replace('@', '@')\n    A = A.replace('#', '#')\n    A = A.replace('?', '?')\n    A = A.replace('.', '.')\n    A = A.replace('_', '_')\n    A = A.replace('-', '-')\n    A = A.replace('+', '+')\n    A = A.replace('-', '-')\n    A = A.replace('*', '*')\n    A = A.replace('/', '/')\n    A = A.replace('//', '/')\n    A = A.replace('^', '**')\n    A = A.replace('%', '%')\n    A = A.replace('!', '!')\n    A = A.replace('&', '&')\n    A = A.replace('#', '#')\n    A = A.replace('$', '$')\n    A = A.replace('@', '@')\n    A = A.replace('#', '#')\n    A = A.replace('?', '?')\n    A = A.replace('.', '.')\n    A = A"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = list(map(int, stdin.split()))\n    A = -1\n    B = -1\n    for i in range(N):\n        for j in range(i + 1, N):\n            if S[i] == S[j]:\n                A = max(A, S[i])\n                B = max(B, S[j])\n    if A!= -1 and B!= -1:\n        print(A, B)\n    else:\n        print(-1)\n    return ''"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lights = []\n    for i in range(len(stdin)):\n        if stdin[i] == '1':\n            lights.append(i)\n    if len(lights) == 0:\n        return '0'\n    for i in range(len(lights)):\n        for j in range(i+1, len(lights)):\n            if lights[i] < lights[j]:\n                lights[i], lights[j] = lights[j], lights[i]\n    return str(lights[0])"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    trucks = []\n    for i in range(N):\n        trucks.append(list(map(int, stdin.split())))\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        for j in range(N):\n            if a == j + 1:\n                for k in range(N):\n                    if b == k + 1:\n                        trucks[j][k] = -1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == -1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i][j] = 0\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 0:\n                trucks[i][j] = 1\n    for i in range(N):\n        for j in range(N):\n            if trucks[i][j] == 1:\n                trucks[i"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    avg = sum(arr[:K]) / K\n    max_avg = avg\n    for i in range(1, N - K + 1):\n        avg = sum(arr[i:i + K]) / K\n        if avg > max_avg:\n            max_avg = avg\n    return str(max_avg)"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, w, h = map(int, stdin.split())\n    sand = list(map(float, stdin.split()))\n    sand_heights = []\n    for i in range(n):\n        sand_heights.append(sand[i * m: (i + 1) * m])\n    sand_heights.sort(key=lambda x: x[-1])\n    sand_heights.sort(key=lambda x: x[0])\n    sand_heights.sort(key=lambda x: x[1])\n    sand_heights.sort(key=lambda x: x[2])\n    sand_heights.sort(key=lambda x: x[3])\n    sand_heights.sort(key=lambda x: x[4])\n    sand_heights.sort(key=lambda x: x[5])\n    sand_heights.sort(key=lambda x: x[6])\n    sand_heights.sort(key=lambda x: x[7])\n    sand_heights.sort(key=lambda x: x[8])\n    sand_heights.sort(key=lambda x: x[9])\n    sand_heights.sort(key=lambda x: x[10])\n    sand_heights.sort(key=lambda x: x[11])\n    sand_heights.sort(key=lambda x: x[12])\n    sand_heights.sort(key=lambda x: x[13])\n    sand_heights.sort(key=lambda x: x[14])\n    sand_heights.sort(key=lambda x: x[15])\n    sand_heights.sort(key=lambda x: x[16])\n    sand_heights.sort(key=lambda x: x[17])\n    sand_heights.sort(key=lambda x: x[18])\n    sand_heights.sort(key=lambda x: x[19])\n    sand_heights.sort(key=lambda x: x[20])\n    sand_heights.sort(key=lambda x: x[21])\n    sand_heights.sort(key=lambda x: x[22])\n    sand_heights.sort(key=lambda x: x[23])\n    sand_heights.sort(key=lambda x: x[24])\n    sand_heights.sort(key=lambda x: x[25])\n    sand_heights.sort(key=lambda x: x[26])\n    sand_heights.sort(key=lambda x: x[27])\n    sand_heights.sort(key=lambda x: x[28])\n    sand_heights.sort(key=lambda x: x[29])\n    sand_heights.sort(key=lambda x: x[30])\n    sand_heights.sort(key=lambda x: x[31])\n    sand_heights.sort(key=lambda x: x[32])\n    sand_heights.sort(key=lambda x: x[33])\n    sand_heights.sort(key=lambda x: x[34])\n    sand_heights.sort(key=lambda x: x[35])\n    sand_heights.sort(key=lambda x: x[36])\n    sand_heights.sort(key=lambda x: x[37])\n    sand_heights.sort(key=lambda x: x[38])\n    sand_heights.sort(key=lambda x: x[39])\n    sand_heights.sort(key=lambda x: x[40])\n    sand_heights.sort(key=lambda x: x[41])\n    sand_heights.sort(key=lambda x: x[42])\n    sand_heights.sort(key=lambda x: x[43])\n    sand_heights.sort(key=lambda x: x[44])\n    sand_heights.sort(key=lambda x: x[45])\n    sand_heights.sort(key=lambda x: x[46])\n    sand_heights.sort(key=lambda x: x[47])\n    sand_heights.sort(key=lambda x: x[48])\n    sand_heights.sort(key=lambda x: x[49])\n    sand_heights.sort(key=lambda x: x[50])\n    sand_heights.sort(key=lambda x: x[51])\n    sand_heights.sort(key=lambda x: x[52])\n    sand_heights.sort(key=lambda x: x[53])\n    sand_heights.sort(key=lambda x: x[54])\n    sand_heights.sort(key=lambda x: x[55])\n    sand_heights.sort(key=lambda x: x[56])\n    sand_heights.sort(key=lambda x: x[57])\n    sand_heights.sort(key=lambda x: x[58])\n    sand_heights.sort(key=lambda x: x[59])\n    sand_heights.sort(key=lambda x: x[60])\n    sand_heights.sort(key=lambda x: x[61])\n    sand_heights.sort(key=lambda x:"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    grid = [[int(x) for x in stdin.split()] for _ in range(m)]\n    return str(solution_recursive(grid, m, n))\n\ndef"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    dials = list(map(int, stdin.split()))\n    dials = dials[:N]\n    dials.sort()\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dial"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    edges = {(i, j) for i in range(1, N + 1) for j in range(i + 1, N + 1)}\n    producers = {i for i in range(1, K + 1)}\n    conveyors = {(i, j) for i in range(1, N + 1) for j in range(i + 1, N + 1) if i!= j}\n    producers_conveyors = {(i, j) for i in range(1, N + 1) for j in range(i + 1, N + 1) if i!= j}\n    producers_conveyors.update(conveyors)\n    producers_conveyors.update(producers)\n    producers_conveyors = list(producers_conveyors)\n    producers_conveyors.sort(key=lambda x: (x[0], x[1]))\n    producers_conveyors = {i: j for i, j in producers_conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in conveyors}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in edges}\n    producers_conveyors = {i: j for i, j in producers_conveyors.items() if j not in"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    Garry = set()\n    Jerry = set()\n    for i in range(n):\n        x1, y1, x2, y2, x3, y3 = map(int, stdin.split()[i*6:i*6+6])\n        Garry.add((x1, y1))\n        Garry.add((x2, y2))\n        Garry.add((x3, y3))\n    for i in range(n):\n        x1, y1, x2, y2, x3, y3 = map(int, stdin.split()[i*6+n*6:i*6+n*6+6])\n        Jerry.add((x1, y1))\n        Jerry.add((x2, y2))\n        Jerry.add((x3, y3))\n    return \"yes\" if len(Garry.intersection(Jerry)) == 0 else \"no\""
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == 1:\n        return \"NO\"\n    if N == 2:\n        return \"YES\"\n    if N == 3:\n        return \"YES\"\n    if N == 4:\n        return \"YES\"\n    if N == 5:\n        return \"YES\"\n    if N == 6:\n        return \"YES\"\n    if N == 7:\n        return \"YES\"\n    if N == 8:\n        return \"YES\"\n    if N == 9:\n        return \"YES\"\n    if N == 10:\n        return \"YES\"\n    if N == 11:\n        return \"YES\"\n    if N == 12:\n        return \"YES\"\n    if N == 13:\n        return \"YES\"\n    if N == 14:\n        return \"YES\"\n    if N == 15:\n        return \"YES\"\n    if N == 16:\n        return \"YES\"\n    if N == 17:\n        return \"YES\"\n    if N == 18:\n        return \"YES\"\n    if N == 19:\n        return \"YES\"\n    if N == 20:\n        return \"YES\"\n    if N == 21:\n        return \"YES\"\n    if N == 22:\n        return \"YES\"\n    if N == 23:\n        return \"YES\"\n    if N == 24:\n        return \"YES\"\n    if N == 25:\n        return \"YES\"\n    if N == 26:\n        return \"YES\"\n    if N == 27:\n        return \"YES\"\n    if N == 28:\n        return \"YES\"\n    if N == 29:\n        return \"YES\"\n    if N == 30:\n        return \"YES\"\n    if N == 31:\n        return \"YES\"\n    if N == 32:\n        return \"YES\"\n    if N == 33:\n        return \"YES\"\n    if N == 34:\n        return \"YES\"\n    if N == 35:\n        return \"YES\"\n    if N == 36:\n        return \"YES\"\n    if N == 37:\n        return \"YES\"\n    if N == 38:\n        return \"YES\"\n    if N == 39:\n        return \"YES\"\n    if N == 40:\n        return \"YES\"\n    if N == 41:\n        return \"YES\"\n    if N == 42:\n        return \"YES\"\n    if N == 43:\n        return \"YES\"\n    if N == 44:\n        return \"YES\"\n    if N == 45:\n        return \"YES\"\n    if N == 46:\n        return \"YES\"\n    if N == 47:\n        return \"YES\"\n    if N == 48:\n        return \"YES\"\n    if N == 49:\n        return \"YES\"\n    if N == 50:\n        return \"YES\"\n    if N == 51:\n        return \"YES\"\n    if N == 52:\n        return \"YES\"\n    if N == 53:\n        return \"YES\"\n    if N == 54:\n        return \"YES\"\n    if N == 55:\n        return \"YES\"\n    if N == 56:\n        return \"YES\"\n    if N == 57:\n        return \"YES\"\n    if N == 58:\n        return \"YES\"\n    if N == 59:\n        return \"YES\"\n    if N == 60:\n        return \"YES\"\n    if N == 61:\n        return \"YES\"\n    if N == 62:\n        return \"YES\"\n    if N == 63:\n        return \"YES\"\n    if N == 64:\n        return \"YES\"\n    if N == 65:\n        return \"YES\"\n    if N == 66:\n        return \"YES\"\n    if N == 67:\n        return \"YES\"\n    if N == 68:\n        return \"YES\"\n    if N == 69:\n        return \"YES\"\n    if N == 70:\n        return \"YES\"\n    if N == 71:\n        return \"YES\"\n    if N == 72:\n        return \"YES\"\n    if N == 73:\n        return \"YES\"\n    if N == 74:\n        return \"YES\"\n    if N == 75:\n        return \"YES\"\n    if N == 76:\n        return \"YES\"\n    if N == 77:\n        return \"YES\"\n    if N == 78:\n        return \"YES\"\n    if N == 79:\n        return \"YES\"\n    if N == 80:\n        return \"YES\"\n    if N == 81:\n        return \"YES\"\n    if N == 82:\n        return \"YES\"\n    if N == 83:\n        return \"YES\"\n    if N == 84:\n        return \"YES\"\n    if N == 85:\n        return \"YES\"\n    if N == 86:\n        return \"YES\"\n    if N == 87:\n        return \"YES\"\n    if N == 88:\n        return \"YES\"\n    if N == 89:\n        return \"YES\"\n    if N == 90:\n        return \"YES\"\n    if N == 91:\n        return \"YES\"\n    if N == 92:\n        return \"YES\"\n    if N == 93:\n        return \"YES\"\n    if N == 94:\n        return \"YES\"\n    if N == 95:\n        return \"YES\"\n    if N == 96:\n        return \"YES\"\n    if N == 97:\n        return \"YES\"\n    if N == 98:\n        return \"YES\"\n    if N == 99:\n        return \"YES\"\n    if N == 100:\n        return \"YES\"\n    if N == 101:\n        return \"YES\"\n    if N == 102:\n        return \"YES\"\n    if N == 103:\n        return \"YES\"\n    if N == 104:\n        return \"YES\"\n    if N == 105:\n        return \"YES\"\n    if N == 106:\n        return \"YES\"\n    if N == 107:\n        return \"YES\"\n    if N == 108:\n        return \"YES\"\n    if N == 109:\n        return \"YES\"\n    if N == 110:\n        return \"YES\"\n    if N == 111:\n        return \"YES\"\n    if N == 112:\n        return \"YES\"\n    if N == 113:\n        return \"YES\"\n    if N == 114:\n        return \"YES\"\n    if N == 115:\n        return \"YES\"\n    if N == 116:\n        return \"YES\"\n    if N == 117:\n        return \"YES\"\n    if N == 118:\n        return \"YES\"\n    if N == 119:\n        return \"YES\"\n    if N == 120:\n        return \"YES\"\n    if N == 121:\n        return \"YES\"\n    if N == 122:\n        return \"YES\"\n    if N == 123:\n        return \"YES\"\n    if N == 124:\n        return \"YES\"\n    if N == 125:\n        return \"YES\"\n    if N == 126:\n        return \"YES\"\n    "
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    matches = []\n    for _ in range(M):\n        K, L = map(int, stdin.split())\n        matches.append((K, L))\n    return \"inconsistent\" if len(matches) > 1 else \"consistent\""
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stars = []\n    for i in range(n):\n        x, y, z = map(int, stdin.split())\n        stars.append((x, y, z))\n    stars.sort(key=lambda x: (x[0], x[1], x[2]))\n    min_volume = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                volume = (stars[i][0] - stars[j][0]) * (stars[i][1] - stars[j][1]) * (stars[i][2] - stars[k][2])\n                if volume < min_volume:\n                    min_volume = volume\n    return str(min_volume)"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max(set(stdin), key=stdin.count)))"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    m = 0\n    while a!= b:\n        m += 1\n        a.sort()\n        b.sort()\n    return str(m)"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    notes = sorted(list(map(int, stdin.split())))\n    sp_phrases = []\n    for _ in range(p):\n        s, e = map(int, stdin.split())\n        sp_phrases.append((s, e))\n    sp_phrases.sort(key=lambda x: x[0])\n    sp_phrases.sort(key=lambda x: x[1])\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_phrases = [(i, j) for i, j in sp_phrases if i < j]\n    sp_ph"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.splitlines()[0]\n    B = stdin.splitlines()[1]\n    A = eval(A)\n    B = eval(B)\n    if A == B:\n        return \"equal\"\n    else:\n        return \"not equal\""
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, H = map(int, stdin.split())\n    n, m = map(int, stdin.split())\n    passages = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, c, d = map(int, stdin.split())\n        passages[a - 1].append((b - 1, c, d))\n        passages[b - 1].append((a - 1, c, d))\n    for i in range(n):\n        passages[i].sort(key=lambda x: x[1])\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        if len(passages[i]) == 0:\n            return 'Oh no'\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0]:\n                passages[i].pop(j)\n                break\n    for i in range(n):\n        for j in range(len(passages[i])):\n            if i == passages[i][j][0"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    routes = []\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        routes.append((a, b, c))\n    routes.sort(key=lambda x: x[2])\n    lounges = 0\n    for i in range(len(routes)):\n        if routes[i][2] == 0:\n            lounges += 1\n        elif routes[i][2] == 1:\n            if routes[i][0] == routes[i][1]:\n                lounges += 1\n            else:\n                lounges += 2\n        else:\n            lounges += 2\n    if lounges > n:\n        return \"impossible\"\n    return str(lounges)"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"no\"\n    else:\n        return str(n)"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    count = 0\n    for i in range(n):\n        if nums[i] % 2 == 0:\n            count += 1\n        else:\n            count += 2\n    return str(count)"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('+', '-').replace('-', '+').replace(' ', '')"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    frogs = list(map(int, stdin.split()))\n    changes = int(stdin.split()[-1])\n    frogs = sorted(frogs)\n    for _ in range(changes):\n        frog = frogs.pop(0)\n        if frog == 0:\n            frogs.append(frog)\n        else:\n            frogs.insert(0, frog)\n    return''.join(map(str, frogs))"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cables = []\n    for i in range(m):\n        a, b, l = map(int, stdin.split())\n        cables.append((a, b, l))\n    cables.sort(key=lambda x: x[2])\n    used = set()\n    for a, b, l in cables:\n        if a not in used and b not in used:\n            used.add(a)\n            used.add(b)\n            break\n    return str(len(used)) + '\\n' +''.join(map(str, sorted(used)))"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    movies = []\n    for i in range(n):\n        movies.append([i+1, i+1])\n    for i in range(n):\n        for j in range(i+1, n):\n            if movies[i][1] > movies[j][1]:\n                movies[i][1] += 1\n    for i in range(n):\n        print(movies[i][0])\n    return \"\""
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hay_bales = stdin\n    hay_bales = hay_bales.replace('C', '')\n    hay_bales = hay_bales.replace('P', '')\n    hay_bales = list(hay_bales)\n    hay_bales.sort()\n    hay_bales = ''.join(hay_bales)\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('PPP', '')\n    hay_bales = hay_bales.replace('CC', '')\n    hay_bales = hay_bales.replace('CP', '')\n    hay_bales = hay_bales.replace('CPCC', '')\n    hay_bales = hay_bales.replace('PP', '')\n    hay_bales = hay_bales.replace('PPP', '')\n    hay_bales = hay_bales.replace('PPCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CC', '')\n    hay_bales = hay_bales.replace('PP', '')\n    hay_bales = hay_bales.replace('CP', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CCCC', '')\n    hay_bales = hay_bales.replace('CC"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, M, N = map(int, stdin.split())\n    implications = []\n    for i in range(M):\n        implications.append(list(map(int, stdin.split())))\n    events = []\n    for i in range(N):\n        events.append(int(stdin))\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list(events)\n    events.sort()\n    events = set(events)\n    events = list("
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(sum(a[K:]) % 1000000007)"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = stdin.split()\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                return f\"{r + 1} {c + 1} {max(R, C)}\""
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        return \"indistinguishable\"\n    if n == 2:\n        if a == b:\n            return \"indistinguishable\"\n        else:\n            return str(abs(a - b))\n    if n == 3:\n        if a == b:\n            return \"indistinguishable\"\n        else:\n            return str(abs(a - b) + abs(a - b) + abs(a - b))\n    if n == 4:\n        if a == b:\n            return \"indistinguishable\"\n        else:\n            return str(abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b))\n    if n == 5:\n        if a == b:\n            return \"indistinguishable\"\n        else:\n            return str(abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b))\n    if n == 6:\n        if a == b:\n            return \"indistinguishable\"\n        else:\n            return str(abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b))\n    if n == 7:\n        if a == b:\n            return \"indistinguishable\"\n        else:\n            return str(abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b))\n    if n == 8:\n        if a == b:\n            return \"indistinguishable\"\n        else:\n            return str(abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b))\n    if n == 9:\n        if a == b:\n            return \"indistinguishable\"\n        else:\n            return str(abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b))\n    if n == 10:\n        if a == b:\n            return \"indistinguishable\"\n        else:\n            return str(abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b) + abs(a - b))\n    return \"indistinguishable\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = stdin.splitlines()[0]\n    C = stdin.splitlines()[1]\n    R = R.replace('0', '1')\n    C = C.replace('0', '1')\n    R = R.replace('1', '0')\n    C = C.replace('1', '0')\n    if R == '1' or C == '1':\n        return '-1'\n    else:\n        return R + C"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '+1'\n    if n == -1:\n        return '-1'\n    if n == 2:\n        return '0'\n    if n == 3:\n        return '+1'\n    if n == 4:\n        return '-1'\n    if n == 5:\n        return '+1'\n    if n == 6:\n        return '-1'\n    if n == 7:\n        return '+1'\n    if n == 8:\n        return '-1'\n    if n == 9:\n        return '+1'\n    if n == 10:\n        return '-1'\n    if n == 11:\n        return '+1'\n    if n == 12:\n        return '-1'\n    if n == 13:\n        return '+1'\n    if n == 14:\n        return '-1'\n    if n == 15:\n        return '+1'\n    if n == 16:\n        return '-1'\n    if n == 17:\n        return '+1'\n    if n == 18:\n        return '-1'\n    if n == 19:\n        return '+1'\n    if n == 20:\n        return '-1'\n    if n == 21:\n        return '+1'\n    if n == 22:\n        return '-1'\n    if n == 23:\n        return '+1'\n    if n == 24:\n        return '-1'\n    if n == 25:\n        return '+1'\n    if n == 26:\n        return '-1'\n    if n == 27:\n        return '+1'\n    if n == 28:\n        return '-1'\n    if n == 29:\n        return '+1'\n    if n == 30:\n        return '-1'\n    if n == 31:\n        return '+1'\n    if n == 32:\n        return '-1'\n    if n == 33:\n        return '+1'\n    if n == 34:\n        return '-1'\n    if n == 35:\n        return '+1'\n    if n == 36:\n        return '-1'\n    if n == 37:\n        return '+1'\n    if n == 38:\n        return '-1'\n    if n == 39:\n        return '+1'\n    if n == 40:\n        return '-1'\n    if n == 41:\n        return '+1'\n    if n == 42:\n        return '-1'\n    if n == 43:\n        return '+1'\n    if n == 44:\n        return '-1'\n    if n == 45:\n        return '+1'\n    if n == 46:\n        return '-1'\n    if n == 47:\n        return '+1'\n    if n == 48:\n        return '-1'\n    if n == 49:\n        return '+1'\n    if n == 50:\n        return '-1'\n    if n == 51:\n        return '+1'\n    if n == 52:\n        return '-1'\n    if n == 53:\n        return '+1'\n    if n == 54:\n        return '-1'\n    if n == 55:\n        return '+1'\n    if n == 56:\n        return '-1'\n    if n == 57:\n        return '+1'\n    if n == 58:\n        return '-1'\n    if n == 59:\n        return '+1'\n    if n == 60:\n        return '-1'\n    if n == 61:\n        return '+1'\n    if n == 62:\n        return '-1'\n    if n == 63:\n        return '+1'\n    if n == 64:\n        return '-1'\n    if n == 65:\n        return '+1'\n    if n == 66:\n        return '-1'\n    if n == 67:\n        return '+1'\n    if n == 68:\n        return '-1'\n    if n == 69:\n        return '+1'\n    if n == 70:\n        return '-1'\n    if n == 71:\n        return '+1'\n    if n == 72:\n        return '-1'\n    if n == 73:\n        return '+1'\n    if n == 74:\n        return '-1'\n    if n == 75:\n        return '+1'\n    if n == 76:\n        return '-1'\n    if n == 77:\n        return '+1'\n    if n == 78:\n        return '-1'\n    if n == 79:\n        return '+1'\n    if n == 80:\n        return '-1'\n    if n == 81:\n        return '+1'\n    if n == 82:\n        return '-1'\n    if n == 83:\n        return '+1'\n    if n == 84:\n        return '-1'\n    if n == 85:\n        return '+1'\n    if n == 86:\n        return '-1'\n    if n == 87:\n        return '+1'\n    if n == 88:\n        return '-1'\n    if n == 89:\n        return '+1'\n    if n == 90:\n        return '-1'\n    if n == 91:\n        return '+1'\n    if n == 92:\n        return '-1'\n    if n == 93:\n        return '+1'\n    if n == 94:\n        return '-1'\n    if n == 95:\n        return '+1'\n    if n == 96:\n        return '-1'\n    if n == 97:\n        return '+1'\n    if n == 98:\n        return '-1'\n    if n == 99:\n        return '+1'\n    if n == 100:\n        return '-1'\n    if n == 101:\n        return '+1'\n    if n == 102:\n        return '-1'\n    if n == 103:\n        return '+1'\n    if n == 104:\n        return '-1'\n    if n == 105:\n        return '+1'\n    if n == 106:\n        return '-1'\n    if n == 107:\n        return '+1'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    intersections = []\n    roads = []\n    employees = []\n    clients = []\n    for i in range(n):\n        intersections.append(i)\n    for i in range(m):\n        roads.append(list(map(int, stdin.split())))\n    for i in range(s):\n        employees.append(i)\n    for i in range(t):\n        clients.append(i)\n    return str(min_distance(intersections, roads, employees, clients))\n\ndef"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    board = [[0] * M for _ in range(N)]\n    for i in range(K):\n        X, Y, C = map(int, stdin.split())\n        board[X - 1][Y - 1] = i + 1\n    traps = []\n    for i in range(K):\n        traps.append((i + 1, board[i][0]))\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])\n    traps.sort(key=lambda x: x[0])\n    traps.sort(key=lambda x: x[1])"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"8\"\n    if n == 6:\n        return \"15\"\n    if n == 7:\n        return \"21\"\n    if n == 8:\n        return \"32\"\n    if n == 9:\n        return \"45\"\n    if n == 10:\n        return \"55\"\n    if n == 11:\n        return \"66\"\n    if n == 12:\n        return \"77\"\n    if n == 13:\n        return \"88\"\n    if n == 14:\n        return \"99\"\n    if n == 15:\n        return \"110\"\n    if n == 16:\n        return \"121\"\n    if n == 17:\n        return \"122\"\n    if n == 18:\n        return \"123\"\n    if n == 19:\n        return \"124\"\n    if n == 20:\n        return \"125\"\n    if n == 21:\n        return \"126\"\n    if n == 22:\n        return \"127\"\n    if n == 23:\n        return \"128\"\n    if n == 24:\n        return \"129\"\n    if n == 25:\n        return \"130\"\n    if n == 26:\n        return \"131\"\n    if n == 27:\n        return \"132\"\n    if n == 28:\n        return \"133\"\n    if n == 29:\n        return \"134\"\n    if n == 30:\n        return \"135\"\n    if n == 31:\n        return \"136\"\n    if n == 32:\n        return \"137\"\n    if n == 33:\n        return \"138\"\n    if n == 34:\n        return \"139\"\n    if n == 35:\n        return \"140\"\n    if n == 36:\n        return \"141\"\n    if n == 37:\n        return \"142\"\n    if n == 38:\n        return \"143\"\n    if n == 39:\n        return \"144\"\n    if n == 40:\n        return \"145\"\n    if n == 41:\n        return \"146\"\n    if n == 42:\n        return \"147\"\n    if n == 43:\n        return \"148\"\n    if n == 44:\n        return \"149\"\n    if n == 45:\n        return \"150\"\n    if n == 46:\n        return \"151\"\n    if n == 47:\n        return \"152\"\n    if n == 48:\n        return \"153\"\n    if n == 49:\n        return \"154\"\n    if n == 50:\n        return \"155\"\n    if n == 51:\n        return \"156\"\n    if n == 52:\n        return \"157\"\n    if n == 53:\n        return \"158\"\n    if n == 54:\n        return \"159\"\n    if n == 55:\n        return \"160\"\n    if n == 56:\n        return \"161\"\n    if n == 57:\n        return \"162\"\n    if n == 58:\n        return \"163\"\n    if n == 59:\n        return \"164\"\n    if n == 60:\n        return \"165\"\n    if n == 61:\n        return \"166\"\n    if n == 62:\n        return \"167\"\n    if n == 63:\n        return \"168\"\n    if n == 64:\n        return \"169\"\n    if n == 65:\n        return \"170\"\n    if n == 66:\n        return \"171\"\n    if n == 67:\n        return \"172\"\n    if n == 68:\n        return \"173\"\n    if n == 69:\n        return \"174\"\n    if n == 70:\n        return \"175\"\n    if n == 71:\n        return \"176\"\n    if n == 72:\n        return \"177\"\n    if n == 73:\n        return \"178\"\n    if n == 74:\n        return \"179\"\n    if n == 75:\n        return \"180\"\n    if n == 76:\n        return \"181\"\n    if n == 77:\n        return \"182\"\n    if n == 78:\n        return \"183\"\n    if n == 79:\n        return \"184\"\n    if n == 80:\n        return \"185\"\n    if n == 81:\n        return \"186\"\n    if n == 82:\n        return \"187\"\n    if n == 83:\n        return \"188\"\n    if n == 84:\n        return \"189\"\n    if n == 85:\n        return \"190\"\n    if n == 86:\n        return \"191\"\n    if n == 87:\n        return \"192\"\n    if n == 88:\n        return \"193\"\n    if n == 89:\n        return \"194\"\n    if n == 90:\n        return \"195\"\n    if n == 91:\n        return \"196\"\n    if n == 92:\n        return \"197\"\n    if n == 93:\n        return \"198\"\n    if n == 94:\n        return \"199\"\n    if n == 95:\n        return \"200\"\n    if n == 96:\n        return \"201\"\n    if n == 97:\n        return \"202\"\n    if n == 98:\n        return \"203\"\n    if n == 99:\n        return \"204\"\n    if n == 100:\n        return \"205\"\n    if n == 101:\n        return \"206\"\n    if n == 102:\n        return \"207\"\n    if n == 103:\n        return \"208\"\n    if n == 104:\n        return \"209\"\n    if n == 105:\n        return \"210\"\n    if n == 106:\n        return \"211\"\n    if n == 107:\n        return \"212\"\n    if n == 108:\n        return \"213\"\n    if n == 109:\n        return \"214\"\n    if n == 110:\n        return \"215\"\n    if n == 111:\n        return \"216\"\n    if n == 112:\n        return \"217\"\n    if n == 113:\n        return \"218\"\n    if n == 114:\n        return \"219\"\n    if n == 115:\n        return \"220\"\n    if n == 116:\n        return \"221\"\n    if n == 117:\n        return \"222\"\n    if n == 118:\n        return \"223\"\n    if n == 119:\n        return \"224\"\n    if n == 120:\n        return \"225\"\n    if n == 121:\n        return \"226\"\n    if n == 122:\n        return \"227"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    students = []\n    for i in range(n):\n        line = stdin.split()\n        if line[0] == \"D\":\n            students.append((int(line[1]), int(line[2])))\n        elif line[0] == \"P\":\n            students.append(int(line[1]))\n    students.sort()\n    for i in range(len(students)):\n        if i == 0:\n            if students[i][0] > students[i][1]:\n                return \"NE\"\n        elif i == len(students) - 1:\n            if students[i][0] < students[i][1]:\n                return \"NE\"\n        else:\n            if students[i][0] > students[i][1]:\n                return \"NE\"\n            if students[i][0] < students[i][1]:\n                if students[i][0] < students[i - 1][1]:\n                    return \"NE\"\n    return \"OK\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, k, l = map(int, stdin.split())\n    x0, y0 = map(int, stdin.split())\n    t = []\n    for i in range(r):\n        t.append(list(map(int, stdin.split())))\n    return str(max_points(r, c, k, l, x0, y0, t))\n\ndef"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    y = []\n    z = []\n    for i in range(n):\n        x.append(float(stdin.split()[i*3]))\n        y.append(float(stdin.split()[i*3+1]))\n        z.append(float(stdin.split()[i*3+2]))\n    x.sort()\n    y.sort()\n    z.sort()\n    x.reverse()\n    y.reverse()\n    z.reverse()\n    x = x[0]\n    y = y[0]\n    z = z[0]\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0.5\n    y = y - 0.5\n    z = z - 0.5\n    x = x + 0.5\n    y = y + 0.5\n    z = z + 0.5\n    x = x - 0"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, s = map(int, stdin.split())\n    if s == 0:\n        return str(0)\n    if s == 1:\n        return str(1)\n    if s == 2:\n        return str(2)\n    if s == 3:\n        return str(3)\n    if s == 4:\n        return str(4)\n    if s == 5:\n        return str(5)\n    if s == 6:\n        return str(6)\n    if s == 7:\n        return str(7)\n    if s == 8:\n        return str(8)\n    if s == 9:\n        return str(9)\n    if s == 10:\n        return str(10)\n    if s == 11:\n        return str(11)\n    if s == 12:\n        return str(12)\n    if s == 13:\n        return str(13)\n    if s == 14:\n        return str(14)\n    if s == 15:\n        return str(15)\n    if s == 16:\n        return str(16)\n    if s == 17:\n        return str(17)\n    if s == 18:\n        return str(18)\n    if s == 19:\n        return str(19)\n    if s == 20:\n        return str(20)\n    if s == 21:\n        return str(21)\n    if s == 22:\n        return str(22)\n    if s == 23:\n        return str(23)\n    if s == 24:\n        return str(24)\n    if s == 25:\n        return str(25)\n    if s == 26:\n        return str(26)\n    if s == 27:\n        return str(27)\n    if s == 28:\n        return str(28)\n    if s == 29:\n        return str(29)\n    if s == 30:\n        return str(30)\n    if s == 31:\n        return str(31)\n    if s == 32:\n        return str(32)\n    if s == 33:\n        return str(33)\n    if s == 34:\n        return str(34)\n    if s == 35:\n        return str(35)\n    if s == 36:\n        return str(36)\n    if s == 37:\n        return str(37)\n    if s == 38:\n        return str(38)\n    if s == 39:\n        return str(39)\n    if s == 40:\n        return str(40)\n    if s == 41:\n        return str(41)\n    if s == 42:\n        return str(42)\n    if s == 43:\n        return str(43)\n    if s == 44:\n        return str(44)\n    if s == 45:\n        return str(45)\n    if s == 46:\n        return str(46)\n    if s == 47:\n        return str(47)\n    if s == 48:\n        return str(48)\n    if s == 49:\n        return str(49)\n    if s == 50:\n        return str(50)\n    if s == 51:\n        return str(51)\n    if s == 52:\n        return str(52)\n    if s == 53:\n        return str(53)\n    if s == 54:\n        return str(54)\n    if s == 55:\n        return str(55)\n    if s == 56:\n        return str(56)\n    if s == 57:\n        return str(57)\n    if s == 58:\n        return str(58)\n    if s == 59:\n        return str(59)\n    if s == 60:\n        return str(60)\n    if s == 61:\n        return str(61)\n    if s == 62:\n        return str(62)\n    if s == 63:\n        return str(63)\n    if s == 64:\n        return str(64)\n    if s == 65:\n        return str(65)\n    if s == 66:\n        return str(66)\n    if s == 67:\n        return str(67)\n    if s == 68:\n        return str(68)\n    if s == 69:\n        return str(69)\n    if s == 70:\n        return str(70)\n    if s == 71:\n        return str(71)\n    if s == 72:\n        return str(72)\n    if s == 73:\n        return str(73)\n    if s == 74:\n        return str(74)\n    if s == 75:\n        return str(75)\n    if s == 76:\n        return str(76)\n    if s == 77:\n        return str(77)\n    if s == 78:\n        return str(78)\n    if s == 79:\n        return str(79)\n    if s == 80:\n        return str(80)\n    if s == 81:\n        return str(81)\n    if s == 82:\n        return str(82)\n    if s == 83:\n        return str(83)\n    if s == 84:\n        return str(84)\n    if s == 85:\n        return str(85)\n    if s == 86:\n        return str(86)\n    if s == 87:\n        return str(87)\n    if s == 88:\n        return str(88)\n    if s == 89:\n        return str(89)\n    if s == 90:\n        return str(90)\n    if s == 91:\n        return str(91)\n    if s == 92:\n        return str(92)\n    if s == 93:\n        return str(93)\n    if s == 94:\n        return str(94)\n    if s == 95:\n        return str(95)\n    if s == 96:\n        return str(96)\n    if s == 97:\n        return str(97)\n    if s == 98:\n        return str(98)\n    if s == 99:\n        return str(99)\n    if s == 100:\n        return str(100)\n    if s == 101:\n        return str(101)\n    if s == 102:\n        return str(102)\n    if s == 103:\n        return str(103)\n    if s == 104:\n        return str(104)\n    if s == 105:\n        return str(105)\n    if s == 106:\n        return str(106)\n    if s == 107:\n        return str(107)\n    if s == 108:\n        return str(108)\n    if s == 109:\n        return str(109)\n    if s == 110:\n        return str(110)\n    if s == 111:\n        return str(111)\n    if s == 112:\n        return str(112)\n    if s == 113:\n        return str(113)\n    if s == 114:\n        return str(114)\n    if s == 115:\n        return str(115)\n    if s == 116:\n        return str(116)\n    if s == 117:\n        return str(117)\n    if s == 118:\n        return str(118)\n    if s == 119:\n        return str(119)\n    if s == 120:\n        return str(120)\n    if s == 121:\n        return str(121)\n    if s == 122:\n        return str(122)\n    if s == 123:\n        return str(123)\n    if s == 124:\n        return str(124)\n    if s == 125:\n        return str(125)\n    if s == 126:\n        return str(126)\n    if s == 127:\n        return str(127)"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    names = list(map(int, stdin.split()))\n    positions = list(map(int, stdin.split()))\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    positions.sort()\n    positions.reverse()\n    positions = positions[:n]\n    pos"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, g, n, k = map(int, stdin.split())\n    if n == 1:\n        return str(d)\n    if n == 2:\n        return str(d + g)\n    if n == 3:\n        return str(d + g + d)\n    if n == 4:\n        return str(d + g + d + g)\n    if n == 5:\n        return str(d + g + d + g + d)\n    if n == 6:\n        return str(d + g + d + g + d + g)\n    if n == 7:\n        return str(d + g + d + g + d + g + d)\n    if n == 8:\n        return str(d + g + d + g + d + g + d + g)\n    if n == 9:\n        return str(d + g + d + g + d + g + d + g + d)\n    if n == 10:\n        return str(d + g + d + g + d + g + d + g + d + g)\n    if n == 11:\n        return str(d + g + d + g + d + g + d + g + d + g + d)\n    if n == 12:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g)\n    if n == 13:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 14:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g)\n    if n == 15:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 16:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g)\n    if n == 17:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 18:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g)\n    if n == 19:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 20:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g)\n    if n == 21:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 22:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 23:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 24:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 25:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 26:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 27:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 28:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 29:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 30:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 31:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 32:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 33:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 34:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 35:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)\n    if n == 36:\n        return str(d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d + g + d)"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    allowed_digits = set(map(int, stdin.split()[1]))\n    count = 0\n    for i in range(A, B + 1):\n        if all(i % x in allowed_digits for x in range(1, X + 1)):\n            count += 1\n    return str(count)"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    prescriptions = []\n    for _ in range(n):\n        prescriptions.append(stdin.split())\n    prescriptions.sort(key=lambda x: x[1])\n    in_store_prescriptions = []\n    remote_prescriptions = []\n    for prescription in prescriptions:\n        if prescription[1] == 'R':\n            remote_prescriptions.append(prescription)\n        else:\n            in_store_prescriptions.append(prescription)\n    if len(remote_prescriptions) == 0:\n        return '0'\n    in_store_prescriptions.sort(key=lambda x: x[0])\n    total_time = 0\n    for prescription in in_store_prescriptions:\n        total_time += int(prescription[2])\n    for prescription in remote_prescriptions:\n        total_time += int(prescription[2])\n    return str(total_time / len(remote_prescriptions))"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    matrix = []\n    for _ in range(R):\n        matrix.append(stdin.split())\n    max_killer = 0\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] == '1':\n                killer = 0\n                for k in range(i, R):\n                    if matrix[k][j] == '1':\n                        killer += 1\n                    else:\n                        break\n                for k in range(i, -1, -1):\n                    if matrix[k][j] == '1':\n                        killer += 1\n                    else:\n                        break\n                for k in range(j, C):\n                    if matrix[i][k] == '1':\n                        killer += 1\n                    else:\n                        break\n                for k in range(j, -1, -1):\n                    if matrix[i][k] == '1':\n                        killer += 1\n                    else:\n                        break\n                if killer > max_killer:\n                    max_killer = killer\n    if max_killer == 0:\n        return -1\n    return str(max_killer)\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    swimmers = []\n    for i in range(n):\n        swimmers.append(list(map(int, stdin.split())))\n    swimmers.sort(key=lambda x: x[0])\n    swimmers.sort(key=lambda x: x[1])\n    x = 0\n    y = 0\n    for i in range(n):\n        if swimmers[i][0] == swimmers[i][1]:\n            x = swimmers[i][0]\n            y = swimmers[i][1]\n            break\n    for i in range(n):\n        if swimmers[i][0] == x:\n            if swimmers[i][1] == y:\n                return str(x) + \" \" + str(y)\n    return str(x) + \" \" + str(y)"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, omega, v0, theta, w = map(float, stdin.split())\n    x = [0, 0]\n    y = [0, 0]\n    for i in range(2):\n        x[i], y[i] = map(float, stdin.split())\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.append(x[0])\n    y.append(y[0])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[1])\n    y.append(y[1])\n    x.sort()"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trenches = []\n    for i in range(n):\n        trenches.append(list(map(int, stdin.split())))\n    trenches.sort(key=lambda x: (x[0], x[1]))\n    # print(trenches)\n    # print(trenches[0][0], trenches[0][1], trenches[1][0], trenches[1][1])\n    # print(trenches[1][0], trenches[1][1], trenches[2][0], trenches[2][1])\n    # print(trenches[2][0], trenches[2][1], trenches[3][0], trenches[3][1])\n    # print(trenches[3][0], trenches[3][1], trenches[4][0], trenches[4][1])\n    # print(trenches[4][0], trenches[4][1], trenches[5][0], trenches[5][1])\n    # print(trenches[5][0], trenches[5][1], trenches[6][0], trenches[6][1])\n    # print(trenches[6][0], trenches[6][1], trenches[7][0], trenches[7][1])\n    # print(trenches[7][0], trenches[7][1], trenches[8][0], trenches[8][1])\n    # print(trenches[8][0], trenches[8][1], trenches[9][0], trenches[9][1])\n    # print(trenches[9][0], trenches[9][1], trenches[10][0], trenches[10][1])\n    # print(trenches[10][0], trenches[10][1], trenches[11][0], trenches[11][1])\n    # print(trenches[11][0], trenches[11][1], trenches[12][0], trenches[12][1])\n    # print(trenches[12][0], trenches[12][1], trenches[13][0], trenches[13][1])\n    # print(trenches[13][0], trenches[13][1], trenches[14][0], trenches[14][1])\n    # print(trenches[14][0], trenches[14][1], trenches[15][0], trenches[15][1])\n    # print(trenches[15][0], trenches[15][1], trenches[16][0], trenches[16][1])\n    # print(trenches[16][0], trenches[16][1], trenches[17][0], trenches[17][1])\n    # print(trenches[17][0], trenches[17][1], trenches[18][0], trenches[18][1])\n    # print(trenches[18][0], trenches[18][1], trenches[19][0], trenches[19][1])\n    # print(trenches[19][0], trenches[19][1], trenches[20][0], trenches[20][1])\n    # print(trenches[20][0], trenches[20][1], trenches[21][0], trenches[21][1])\n    # print(trenches[21][0], trenches[21][1], trenches[22][0], trenches[22][1])\n    # print(trenches[22][0], trenches[22][1], trenches[23][0], trenches[23][1])\n    # print(trenches[23][0], trenches[23][1], trenches[24][0], trenches[24][1])\n    # print(trenches[24][0], trenches[24][1], trenches[25][0], trenches[25][1])\n    # print(trenches[25][0], trenches[25][1], trenches[26][0], trenches[26][1])\n    # print(trenches[26][0], trenches[26][1], trenches[27][0], trenches[27][1])\n    # print(trenches[27][0], trenches[27][1], trenches[28][0], trenches[28][1])\n    # print(trenches[28][0], trenches[28][1], trenches[29][0], trenches[29][1])\n    # print(trenches[29][0], trenches[29][1], trenches[30][0], trenches[30][1])\n    # print(trenches[30][0], trenches[30][1], trenches[31][0], trenches[31][1])\n    # print(trenches[31][0], trenches[31][1], trenches[32][0], trenches[32][1])\n    # print(trenches[32][0], trenches[32][1], trenches[33][0], trenches[33][1])\n    # print(trenches[33][0], trenches[33][1], trenches[34][0], trenches[34][1])\n    # print(trenches[34][0], trenches[34][1], trenches[35][0], trenches[35][1])\n    # print(trenches[35][0], trenches[35][1], trenches[36][0], trenches[36][1])\n    # print(trenches[36][0], trenches[36][1], trenches[37][0], trenches[37][1])\n    # print(trenches[37][0], trenches[37][1], trenches[38][0], trenches[38][1])\n    # print(trenches[38][0], trenches[38][1], trenches[39][0], trenches[39][1])\n    # print(trenches[39][0], trenches[39][1], trenches[40][0], trenches[40][1])\n    # print(trenches[40][0], trenches[40][1], trenches[41][0], trenches[41][1])\n    # print(trenches[41][0], trenches[41][1], trenches[42][0], trenches[42][1])\n    # print(trenches[42][0], trenches[42][1], trenches[43][0], trenches[43][1])\n    # print(trenches[43][0], trenches[43][1], trenches[44][0], trenches[44][1])\n    # print(trenches[44][0], trenches[44][1], trenches[45][0], trenches[45][1])\n    # print(trenches[45][0], trenches[45][1], trenches[46][0], trenches[46][1])\n    # print(trenches[46][0], trenches[46][1], trenches[47][0], trenches[47][1])\n    # print(trenches[47][0], trenches[47][1], trenches[48][0], trenches[48][1])\n    # print(trenches[48][0], trenches[48][1], trenches[49][0], trenches[49][1])\n    # print(trenches[49][0], trenches[49][1], trenches[50][0], trenches[50][1])\n    # print(trenches[50][0], trenches[50][1], trenches[51][0], trenches[51][1])\n    # print(trenches[51][0], trenches[51][1], trenches[52][0], trenches[52][1])\n    # print(trenches[52][0], trenches[52][1], trenches[53][0], trenches[53][1])\n    # print(trenches[53][0], trenches[53][1], trenches[54][0], trenches[54][1])\n    "
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(n, 1, -1):\n        k = n - m**2\n        if k**2 == n:\n            return str(m) + \" \" + str(k)\n    return \"impossible\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    return str(sum(arr[i] * (arr[i + 1] - arr[i]) for i in range(n - 1)) // (n - 1))"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    children = list(map(int, stdin.split()))\n    children.sort()\n    purchases = []\n    for _ in range(m):\n        purchases.append(list(map(int, stdin.split())))\n    purchases.sort(key=lambda x: x[0])\n    purchases.sort(key=lambda x: x[1])\n    purchases.sort(key=lambda x: x[2])\n    purchases.sort(key=lambda x: x[3])\n    purchases.sort(key=lambda x: x[4])\n    purchases.sort(key=lambda x: x[5])\n    purchases.sort(key=lambda x: x[6])\n    purchases.sort(key=lambda x: x[7])\n    purchases.sort(key=lambda x: x[8])\n    purchases.sort(key=lambda x: x[9])\n    purchases.sort(key=lambda x: x[10])\n    purchases.sort(key=lambda x: x[11])\n    purchases.sort(key=lambda x: x[12])\n    purchases.sort(key=lambda x: x[13])\n    purchases.sort(key=lambda x: x[14])\n    purchases.sort(key=lambda x: x[15])\n    purchases.sort(key=lambda x: x[16])\n    purchases.sort(key=lambda x: x[17])\n    purchases.sort(key=lambda x: x[18])\n    purchases.sort(key=lambda x: x[19])\n    purchases.sort(key=lambda x: x[20])\n    purchases.sort(key=lambda x: x[21])\n    purchases.sort(key=lambda x: x[22])\n    purchases.sort(key=lambda x: x[23])\n    purchases.sort(key=lambda x: x[24])\n    purchases.sort(key=lambda x: x[25])\n    purchases.sort(key=lambda x: x[26])\n    purchases.sort(key=lambda x: x[27])\n    purchases.sort(key=lambda x: x[28])\n    purchases.sort(key=lambda x: x[29])\n    purchases.sort(key=lambda x: x[30])\n    purchases.sort(key=lambda x: x[31])\n    purchases.sort(key=lambda x: x[32])\n    purchases.sort(key=lambda x: x[33])\n    purchases.sort(key=lambda x: x[34])\n    purchases.sort(key=lambda x: x[35])\n    purchases.sort(key=lambda x: x[36])\n    purchases.sort(key=lambda x: x[37])\n    purchases.sort(key=lambda x: x[38])\n    purchases.sort(key=lambda x: x[39])\n    purchases.sort(key=lambda x: x[40])\n    purchases.sort(key=lambda x: x[41])\n    purchases.sort(key=lambda x: x[42])\n    purchases.sort(key=lambda x: x[43])\n    purchases.sort(key=lambda x: x[44])\n    purchases.sort(key=lambda x: x[45])\n    purchases.sort(key=lambda x: x[46])\n    purchases.sort(key=lambda x: x[47])\n    purchases.sort(key=lambda x: x[48])\n    purchases.sort(key=lambda x: x[49])\n    purchases.sort(key=lambda x: x[50])\n    purchases.sort(key=lambda x: x[51])\n    purchases.sort(key=lambda x: x[52])\n    purchases.sort(key=lambda x: x[53])\n    purchases.sort(key=lambda x: x[54])\n    purchases.sort(key=lambda x: x[55])\n    purchases.sort(key=lambda x: x[56])\n    purchases.sort(key=lambda x: x[57])\n    purchases.sort(key=lambda x: x[58])\n    purchases.sort(key=lambda x: x[59])\n    purchases.sort(key=lambda x: x[60])\n    purchases.sort(key=lambda x: x[61])\n    purchases.sort(key=lambda x: x[62])\n    purchases.sort(key=lambda x: x[63])\n    purchases.sort(key=lambda x: x[64])\n    purchases.sort(key=lambda x: x[65])\n    purchases.sort(key=lambda x: x[66])\n    purchases.sort(key=lambda x: x[67])\n    purchases.sort(key=lambda x: x[68])\n    purchases.sort(key=lambda x: x[69])\n    purchases.sort(key=lambda x: x[70])\n    purchases.sort(key=lambda x: x[71])\n    purchases.sort(key=lambda x: x[72])\n    purchases.sort(key=lambda x: x[73])\n    purchases.sort(key=lambda x: x[74])\n    purchases.sort(key=lambda x: x[75])\n    purchases.sort(key=lambda x: x[76])\n    purchases.sort(key=lambda"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d, e = map(int, stdin.split())\n    events = []\n    for _ in range(e):\n        s, k, t = map(int, stdin.split())\n        events.append((s, k, t))\n    events.sort()\n    events.append((d, 0, 0))\n    events.sort()\n    events.append((d, n, 0))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    events.sort()\n    events.append((d, 0, m))\n    events.sort()\n    events.append((d, n, m))\n    "
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(k)\n    if k == 1:\n        return str(n)\n    if n == k:\n        return str(n)\n    if n == k + 1:\n        return str(n) +'' + str(k)\n    if n == k - 1:\n        return str(n) +'' + str(k)\n    if n == k - 2:\n        return str(n) +'' + str(k) +'' + str(k + 1)\n    if n == k - 3:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2)\n    if n == k - 4:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3)\n    if n == k - 5:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4)\n    if n == k - 6:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5)\n    if n == k - 7:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5) +'' + str(k + 6)\n    if n == k - 8:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5) +'' + str(k + 6) +'' + str(k + 7)\n    if n == k - 9:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5) +'' + str(k + 6) +'' + str(k + 7) +'' + str(k + 8)\n    if n == k - 10:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5) +'' + str(k + 6) +'' + str(k + 7) +'' + str(k + 8) +'' + str(k + 9)\n    if n == k - 11:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5) +'' + str(k + 6) +'' + str(k + 7) +'' + str(k + 8) +'' + str(k + 9) +'' + str(k + 10)\n    if n == k - 12:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5) +'' + str(k + 6) +'' + str(k + 7) +'' + str(k + 8) +'' + str(k + 9) +'' + str(k + 10) +'' + str(k + 11)\n    if n == k - 13:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5) +'' + str(k + 6) +'' + str(k + 7) +'' + str(k + 8) +'' + str(k + 9) +'' + str(k + 10) +'' + str(k + 11) +'' + str(k + 12)\n    if n == k - 14:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5) +'' + str(k + 6) +'' + str(k + 7) +'' + str(k + 8) +'' + str(k + 9) +'' + str(k + 10) +'' + str(k + 11) +'' + str(k + 12) +'' + str(k + 13)\n    if n == k - 15:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5) +'' + str(k + 6) +'' + str(k + 7) +'' + str(k + 8) +'' + str(k + 9) +'' + str(k + 10) +'' + str(k + 11) +'' + str(k + 12) +'' + str(k + 13) +'' + str(k + 14)\n    if n == k - 16:\n        return str(n) +'' + str(k) +'' + str(k + 1) +'' + str(k + 2) +'' + str(k + 3) +'' + str(k + 4) +'' + str(k + 5) +'' + str(k + 6) +'' + str(k + 7) +'' + str(k + 8) +'' + str(k + 9) +'' + str(k + 10) +'' + str(k + 11) +''"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is exactly one path through the stores that matches. Output \u201cambiguous\u201d if there are multiple possible paths.\n    # return \"impossible\" if there is no path through the stores that matches your sister\u2019s description. Output \u201cunique\u201d if there is"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    return str(N * (K % (2 ** M) + 1))"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    stdin = stdin[1:]\n    stdin = stdin[:-1]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin[::2]\n    stdin = stdin["
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    "
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if N == 4:\n        return 2\n    if N == 8:\n        return 3\n    if N == 16:\n        return 4\n    if N == 32:\n        return 5\n    if N == 64:\n        return 6\n    if N == 128:\n        return 7\n    if N == 256:\n        return 8\n    if N == 512:\n        return 9\n    if N == 1024:\n        return 10\n    if N == 2048:\n        return 11\n    if N == 4096:\n        return 12\n    if N == 8192:\n        return 13\n    if N == 16384:\n        return 14\n    if N == 32768:\n        return 15\n    if N == 65536:\n        return 16\n    if N == 131072:\n        return 17\n    if N == 262144:\n        return 18\n    if N == 524288:\n        return 19\n    if N == 1048576:\n        return 20\n    if N == 2097152:\n        return 21\n    if N == 4194304:\n        return 22\n    if N == 8388608:\n        return 23\n    if N == 16777216:\n        return 24\n    if N == 33554432:\n        return 25\n    if N == 67108864:\n        return 26\n    if N == 134217728:\n        return 27\n    if N == 268435456:\n        return 28\n    if N == 536870912:\n        return 29\n    if N == 1073741824:\n        return 30\n    if N == 2147483648:\n        return 31\n    if N == 4294967296:\n        return 32\n    if N == 8589934592:\n        return 33\n    if N == 17179869184:\n        return 34\n    if N == 34359738368:\n        return 35\n    if N == 68719476736:\n        return 36\n    if N == 137438953472:\n        return 37\n    if N == 274877906944:\n        return 38\n    if N == 549755813888:\n        return 39\n    if N == 1099511627776:\n        return 40\n    if N == 2199023255552:\n        return 41\n    if N == 4398046511104:\n        return 42\n    if N == 8796093022208:\n        return 43\n    if N == 17592186044416:\n        return 44\n    if N == 35184372088832:\n        return 45\n    if N == 70368744177664:\n        return 46\n    if N == 140737488355328:\n        return 47\n    if N == 281474976710656:\n        return 48\n    if N == 562949953421312:\n        return 49\n    if N == 1125899906842624:\n        return 50\n    if N == 2251799813685248:\n        return 51\n    if N == 4503599627370496:\n        return 52\n    if N == 9007199254740992:\n        return 53\n    if N == 18014398509481984:\n        return 54\n    if N == 36028797018963968:\n        return 55\n    if N == 72057594037927936:\n        return 56\n    if N == 144115188075855872:\n        return 57\n    if N == 288230376151711744:\n        return 58\n    if N == 549755813888:\n        return 59\n    if N == 1073741824:\n        return 60\n    if N == 2147483648:\n        return 61\n    if N == 4294967296:\n        return 62\n    if N == 8589934592:\n        return 63\n    if N == 17179869184:\n        return 64\n    if N == 34359738368:\n        return 65\n    if N == 68719476736:\n        return 66\n    if N == 137438953472:\n        return 67\n    if N == 274877906944:\n        return 68\n    if N == 549755813888:\n        return 69\n    if N == 1099511627776:\n        return 70\n    if N == 2199023255552:\n        return 71\n    if N == 4398046511104:\n        return 72\n    if N == 8796093022208:\n        return 73\n    if N == 17592186044416:\n        return 74\n    if N == 35184372088832:\n        return 75\n    if N == 70368744177664:\n        return 76\n    if N == 140737488355328:\n        return 77\n    if N == 281474976710656:\n        return 78\n    if N == 562949953421312:\n        return 79\n    if N == 1125899906842624:\n        return 80\n    if N == 2251799813685248:\n        return 81\n    if N == 4503599627370496:\n        return 82\n    if N == 9007199254740992:\n        return 83\n    if N == 18014398509481984:\n        return 84\n    if N == 36028797018963968:\n        return 85\n    if N == 72057594037927936:\n        return 86\n    if N == 144115188075855872:\n        return 87\n    if N == 288230376151711744:\n        return 88\n    if N == 549755813888:\n        return 89\n    if N == 1073741824:\n        return 90\n    if N == 2147483648:\n        return 91\n    if N == 4294967296:\n        return 92\n    if N == 8589934592:\n        return 93\n    if N == 17179869184:\n        return 94\n    if N == 34359738368:\n        return 95\n    if N == 68719476736:\n        return 96\n    if N == 137438953472:\n        return 97\n    if N == 274877906944:\n        return 98\n    if N == 549755813888:\n        return 99\n    if N == 1099511627776:\n        return 100\n    if N == 2199023255552:\n        return 101\n    if N == 4398046511104:\n        return 102\n    if N == 8796093022208:\n        return 103\n    if N"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pulses = []\n    for i in range(n):\n        pulses.append(stdin.split())\n    pulses.sort(key=lambda x: (x[0], x[1]))\n    pulses.sort(key=lambda x: (x[2], x[3]))\n    pulses.sort(key=lambda x: (x[4], x[5]))\n    pulses.sort(key=lambda x: (x[6], x[7]))\n    pulses.sort(key=lambda x: (x[8], x[9]))\n    pulses.sort(key=lambda x: (x[10], x[11]))\n    pulses.sort(key=lambda x: (x[12], x[13]))\n    pulses.sort(key=lambda x: (x[14], x[15]))\n    pulses.sort(key=lambda x: (x[16], x[17]))\n    pulses.sort(key=lambda x: (x[18], x[19]))\n    pulses.sort(key=lambda x: (x[20], x[21]))\n    pulses.sort(key=lambda x: (x[22], x[23]))\n    pulses.sort(key=lambda x: (x[24], x[25]))\n    pulses.sort(key=lambda x: (x[26], x[27]))\n    pulses.sort(key=lambda x: (x[28], x[29]))\n    pulses.sort(key=lambda x: (x[30], x[31]))\n    pulses.sort(key=lambda x: (x[32], x[33]))\n    pulses.sort(key=lambda x: (x[34], x[35]))\n    pulses.sort(key=lambda x: (x[36], x[37]))\n    pulses.sort(key=lambda x: (x[38], x[39]))\n    pulses.sort(key=lambda x: (x[40], x[41]))\n    pulses.sort(key=lambda x: (x[42], x[43]))\n    pulses.sort(key=lambda x: (x[44], x[45]))\n    pulses.sort(key=lambda x: (x[46], x[47]))\n    pulses.sort(key=lambda x: (x[48], x[49]))\n    pulses.sort(key=lambda x: (x[50], x[51]))\n    pulses.sort(key=lambda x: (x[52], x[53]))\n    pulses.sort(key=lambda x: (x[54], x[55]))\n    pulses.sort(key=lambda x: (x[56], x[57]))\n    pulses.sort(key=lambda x: (x[58], x[59]))\n    pulses.sort(key=lambda x: (x[60], x[61]))\n    pulses.sort(key=lambda x: (x[62], x[63]))\n    pulses.sort(key=lambda x: (x[64], x[65]))\n    pulses.sort(key=lambda x: (x[66], x[67]))\n    pulses.sort(key=lambda x: (x[68], x[69]))\n    pulses.sort(key=lambda x: (x[70], x[71]))\n    pulses.sort(key=lambda x: (x[72], x[73]))\n    pulses.sort(key=lambda x: (x[74], x[75]))\n    pulses.sort(key=lambda x: (x[76], x[77]))\n    pulses.sort(key=lambda x: (x[78], x[79]))\n    pulses.sort(key=lambda x: (x[80], x[81]))\n    pulses.sort(key=lambda x: (x[82], x[83]))\n    pulses.sort(key=lambda x: (x[84], x[85]))\n    pulses.sort(key=lambda x: (x[86], x[87]))\n    pulses.sort(key=lambda x: (x[88], x[89]))\n    pulses.sort(key=lambda x: (x[90], x[91]))\n    pulses.sort(key=lambda x: (x[92], x[93]))\n    pulses.sort(key=lambda x: (x[94], x[95]))\n    pulses.sort(key=lambda x: (x[96], x[97]))\n    pulses.sort(key=lambda x: (x[98], x[99]))\n    pulses.sort(key=lambda x: (x[100], x[101]))\n    pulses.sort(key=lambda x: (x[102], x[103]))\n    pulses.sort(key=lambda x: (x[104], x[105]))\n    pulses.sort(key=lambda x: (x[106], x[107]))\n    pulses.sort(key=lambda x: (x[108], x[109]))\n    pulses.sort(key=lambda x: (x[110], x[111]))\n    pulses.sort(key=lambda x: (x[112], x[113]))\n    pulses.sort(key=lambda x: (x[114], x[115]))\n    pulses.sort(key=lambda x: (x[116], x[117]))\n    pulses.sort("
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    shelves = [[] for _ in range(N)]\n    for i in range(N):\n        shelves[i] = list(map(int, stdin.split()))\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(M):\n        shelves[i % N].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()\n    for i in range(N):\n        shelves[i].sort()"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    max_len = 0\n    window = []\n    for i in range(n):\n        if arr[i] in window:\n            window.remove(arr[i])\n            window.append(arr[i])\n            max_len = max(max_len, len(window))\n        else:\n            window.append(arr[i])\n    return str(max_len)"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    board = [[0] * n for _ in range(n)]\n    for _ in range(k):\n        r, c, x = map(int, stdin.split())\n        board[r - 1][c - 1] = x\n    ans = 0\n    for _ in range(p):\n        r, c, x = map(int, stdin.split())\n        ans += sum(board[r - 1][i] ^ board[i][c - 1] for i in range(n))\n        board[r - 1][c - 1] = x\n    return str(ans)\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    disqualified = set(map(int, stdin.split()))\n    disqualified.discard(0)\n    disqualified.discard(1)\n    disqualified.discard(2)\n    disqualified.discard(3)\n    disqualified.discard(4)\n    disqualified.discard(5)\n    disqualified.discard(6)\n    disqualified.discard(7)\n    disqualified.discard(8)\n    disqualified.discard(9)\n    disqualified.discard(10)\n    disqualified.discard(11)\n    disqualified.discard(12)\n    disqualified.discard(13)\n    disqualified.discard(14)\n    disqualified.discard(15)\n    disqualified.discard(16)\n    disqualified.discard(17)\n    disqualified.discard(18)\n    disqualified.discard(19)\n    disqualified.discard(20)\n    disqualified.discard(21)\n    disqualified.discard(22)\n    disqualified.discard(23)\n    disqualified.discard(24)\n    disqualified.discard(25)\n    disqualified.discard(26)\n    disqualified.discard(27)\n    disqualified.discard(28)\n    disqualified.discard(29)\n    disqualified.discard(30)\n    disqualified.discard(31)\n    disqualified.discard(32)\n    disqualified.discard(33)\n    disqualified.discard(34)\n    disqualified.discard(35)\n    disqualified.discard(36)\n    disqualified.discard(37)\n    disqualified.discard(38)\n    disqualified.discard(39)\n    disqualified.discard(40)\n    disqualified.discard(41)\n    disqualified.discard(42)\n    disqualified.discard(43)\n    disqualified.discard(44)\n    disqualified.discard(45)\n    disqualified.discard(46)\n    disqualified.discard(47)\n    disqualified.discard(48)\n    disqualified.discard(49)\n    disqualified.discard(50)\n    disqualified.discard(51)\n    disqualified.discard(52)\n    disqualified.discard(53)\n    disqualified.discard(54)\n    disqualified.discard(55)\n    disqualified.discard(56)\n    disqualified.discard(57)\n    disqualified.discard(58)\n    disqualified.discard(59)\n    disqualified.discard(60)\n    disqualified.discard(61)\n    disqualified.discard(62)\n    disqualified.discard(63)\n    disqualified.discard(64)\n    disqualified.discard(65)\n    disqualified.discard(66)\n    disqualified.discard(67)\n    disqualified.discard(68)\n    disqualified.discard(69)\n    disqualified.discard(70)\n    disqualified.discard(71)\n    disqualified.discard(72)\n    disqualified.discard(73)\n    disqualified.discard(74)\n    disqualified.discard(75)\n    disqualified.discard(76)\n    disqualified.discard(77)\n    disqualified.discard(78)\n    disqualified.discard(79)\n    disqualified.discard(80)\n    disqualified.discard(81)\n    disqualified.discard(82)\n    disqualified.discard(83)\n    disqualified.discard(84)\n    disqualified.discard(85)\n    disqualified.discard(86)\n    disqualified.discard(87)\n    disqualified.discard(88)\n    disqualified.discard(89)\n    disqualified.discard(90)\n    disqualified.discard(91)\n    disqualified.discard(92)\n    disqualified.discard(93)\n    disqualified.discard(94)\n    disqualified.discard(95)\n    disqualified.discard(96)\n    disqualified.discard(97)\n    disqualified.discard(98)\n    disqualified.discard(99)\n    disqualified.discard(100)\n    disqualified.discard(101)\n    disqualified.discard(102)\n    disqualified.discard(103)\n    disqualified.discard(104)\n    disqualified.discard(105)\n    disqualified.discard(106)\n    disqualified.discard(107)\n    disqualified.discard(108)\n    disqualified.discard(109)\n    disqualified.discard(110)\n    disqualified.discard(111)\n    disqualified.discard(112)\n    disqualified.discard(113)\n    disqualified.discard(114)\n    disqualified.discard(115)\n    disqualified.discard(116)\n    disqualified.discard(117)\n    disqualified.discard(118)\n    disqualified.discard(119)\n    disqualified.discard(120)\n    disqualified.discard"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    seq = [0] * N\n    for i in range(K):\n        seq = list(map(lambda x: x + 1, seq))\n    return str(sum(seq[i] for i in range(N) if i % 2 == 0)) + '\\n' + str(sum(seq[i] for i in range(N) if i % 2 == 1))\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = BST()\n    for i in range(n):\n        tree.insert(int(stdin))\n    return str(tree.counter)"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sticks = stdin.split()\n    sticks = sorted(sticks, key=lambda x: (x[0], x[1]))\n    print(sticks)\n    return''.join(map(str, sticks))"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    deck = stdin.split()\n    discard = []\n    drawing = []\n    for i in range(len(deck)):\n        if deck[i].isdigit():\n            drawing.append(deck[i])\n        else:\n            discard.append(deck[i])\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort()\n    discard.sort()\n    drawing = list(map(str, drawing))\n    discard = list(map(str, discard))\n    drawing = ''.join(drawing)\n    discard = ''.join(discard)\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort()\n    discard.sort()\n    drawing = list(map(str, drawing))\n    discard = list(map(str, discard))\n    drawing = ''.join(drawing)\n    discard = ''.join(discard)\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort()\n    discard.sort()\n    drawing = list(map(str, drawing))\n    discard = list(map(str, discard))\n    drawing = ''.join(drawing)\n    discard = ''.join(discard)\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort()\n    discard.sort()\n    drawing = list(map(str, drawing))\n    discard = list(map(str, discard))\n    drawing = ''.join(drawing)\n    discard = ''.join(discard)\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort()\n    discard.sort()\n    drawing = list(map(str, drawing))\n    discard = list(map(str, discard))\n    drawing = ''.join(drawing)\n    discard = ''.join(discard)\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort()\n    discard.sort()\n    drawing = list(map(str, drawing))\n    discard = list(map(str, discard))\n    drawing = ''.join(drawing)\n    discard = ''.join(discard)\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort()\n    discard.sort()\n    drawing = list(map(str, drawing))\n    discard = list(map(str, discard))\n    drawing = ''.join(drawing)\n    discard = ''.join(discard)\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort()\n    discard.sort()\n    drawing = list(map(str, drawing))\n    discard = list(map(str, discard))\n    drawing = ''.join(drawing)\n    discard = ''.join(discard)\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort()\n    discard.sort()\n    drawing = list(map(str, drawing))\n    discard = list(map(str, discard))\n    drawing = ''.join(drawing)\n    discard = ''.join(discard)\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort()\n    discard.sort()\n    drawing = list(map(str, drawing))\n    discard = list(map(str, discard))\n    drawing = ''.join(drawing)\n    discard = ''.join(discard)\n    drawing = list(map(int, drawing))\n    discard = list(map(int, discard))\n    drawing.sort"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    utterances = sorted(stdin.splitlines())\n    characters = {\n        \"truther\": 0,\n        \"fabulist\": 0,\n        \"charlatan\": 0,\n    }\n    for utterance in utterances:\n        speaker, statement = utterance.split()\n        characters[speaker] += 1\n    return \"truther\" if characters[\"truther\"] > characters[\"fabulist\"] else \"fabulist\" if characters[\"fabulist\"] > characters[\"charlatan\"] else \"charlatan\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fruits = []\n    for i in range(n):\n        x, y = map(float, stdin.split())\n        fruits.append((x, y))\n    fruits.sort(key=lambda x: x[0])\n    fruits.sort(key=lambda x: x[1])\n    max_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (fruits[i][0] <= fruits[j][0] <= fruits[i][1]) or (fruits[i][0] <= fruits[j][1] <= fruits[i][1]):\n                max_count = max(max_count, 1)\n    return str(max_count)"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, K = map(int, stdin.split())\n    grid = [['.'] * (C + 1) for _ in range(R + 1)]\n    for _ in range(K):\n        r, c, d = map(str, stdin.split())\n        r, c = int(r), int(c)\n        if d == 'R':\n            grid[r][c] = 'R'\n        else:\n            grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = '?'\n            else:\n                grid[r][c] = '?'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L'\n    for r in range(1, R + 1):\n        for c in range(1, C + 1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'R':\n                grid[r][c] = 'R'\n            else:\n                grid[r][c] = 'L"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    cities = []\n    for i in range(N):\n        x, y, k = map(int, stdin.split())\n        cities.append((x, y, k))\n    cities.sort(key=lambda x: x[2])\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities = sorted(cities, key=lambda x: x[0])\n    cities = sorted(cities, key=lambda x: x[1])\n    cities = sorted(cities, key=lambda x: x[2])\n    cities = sorted(cities, key=lambda x: x[0] * x[1])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18])\n    cities = sorted(cities, key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4]"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = list(map(int, stdin.split()))\n    segments.sort(reverse=True)\n    max_area = 0\n    for i in range(n):\n        if segments[i] > max_area:\n            max_area = segments[i]\n    return str(max_area)"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    plants = {}\n    for i in range(1, N + 1):\n        x, y, f = map(int, stdin.split())\n        plants[i] = (x, y, f)\n    plants[1] = (0, 0, 0)\n    plants[N] = (0, 0, 0)\n    plants[1][2] = plants[1][2] + K\n    plants[N][2] = plants[N][2] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants[N][1] = plants[N][1] + K\n    plants[1][0] = plants[1][0] + K\n    plants[N][0] = plants[N][0] + K\n    plants[1][1] = plants[1][1] + K\n    plants["
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    swaps = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        swaps.append((a, b))\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted(swaps, key=lambda x: x[0])\n    swaps = sorted(swaps, key=lambda x: x[1])\n    swaps = sorted("
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        roads[a - 1].append(b - 1)\n        roads[b - 1].append(a - 1)\n    costs = [[0, 0, 0] for _ in range(n)]\n    for i in range(n):\n        costs[i][0] = costs[i][1] = costs[i][2] = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                costs[i][0] += costs[j][1]\n                costs[i][1] += costs[j][2]\n                costs[i][2] += costs[j][0]\n    for i in range(n):\n        costs[i][0] %= 3\n        costs[i][1] %= 3\n        costs[i][2] %= 3\n    for i in range(n):\n        if costs[i][0] == costs[i][1] == costs[i][2] == 1:\n            return str(i + 1)\n    return str(-1)\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1])\n    min_side = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            p1 = points[i]\n            p2 = points[j]\n            if p1[0] == p2[0] or p1[1] == p2[1]:\n                continue\n            if p1[0] == p2[1] or p1[1] == p2[0]:\n                continue\n            side = abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n            if side < min_side:\n                min_side = side\n    return str(min_side)\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    colours = [0] * K\n    for _ in range(M):\n        command = stdin.split()\n        if command[0] == \"PAINT\":\n            x1, y1, x2, y2 = map(int, command[1:])\n            for i in range(x1, x2 + 1):\n                for j in range(y1, y2 + 1):\n                    colours[(i - 1) * N + j - 1] = int(command[2])\n        elif command[0] == \"SAVE\":\n            save_id = int(command[1])\n        elif command[0] == \"LOAD\":\n            load_id = int(command[1])\n    return \"\\n\".join(map(str, colours))"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or k < 1 or k > n:\n        return -1\n    if k == 1:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == n:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 2:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 3:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 4:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 5:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 6:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 7:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 8:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 9:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 10:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 11:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 12:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 13:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 14:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 15:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 16:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 17:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 18:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 19:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 20:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 21:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 22:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 23:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 24:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 25:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 26:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 27:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 28:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 29:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 30:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 31:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 32:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 33:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 34:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 35:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 36:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 37:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 38:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 39:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 40:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 41:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 42:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 43:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 44:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 45:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 46:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 47:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 48:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 49:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 50:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 51:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 52:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 53:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 54:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 55:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 56:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 57:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 58:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 59:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 60:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 61:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 62:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 63:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 64:\n        return \" \".join(map(str, range(1, n + 1)))\n    if k == 65:\n        return \" \".join(map(str"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"0\"\n    if n == 5:\n        return \"0\"\n    if n == 6:\n        return \"0\"\n    if n == 7:\n        return \"1\"\n    if n == 8:\n        return \"0\"\n    if n == 9:\n        return \"0\"\n    if n == 10:\n        return \"0\"\n    if n == 11:\n        return \"0\"\n    if n == 12:\n        return \"0\"\n    if n == 13:\n        return \"0\"\n    if n == 14:\n        return \"0\"\n    if n == 15:\n        return \"0\"\n    if n == 16:\n        return \"0\"\n    if n == 17:\n        return \"0\"\n    if n == 18:\n        return \"0\"\n    if n == 19:\n        return \"0\"\n    if n == 20:\n        return \"0\"\n    if n == 21:\n        return \"0\"\n    if n == 22:\n        return \"0\"\n    if n == 23:\n        return \"0\"\n    if n == 24:\n        return \"0\"\n    if n == 25:\n        return \"0\"\n    if n == 26:\n        return \"0\"\n    if n == 27:\n        return \"0\"\n    if n == 28:\n        return \"0\"\n    if n == 29:\n        return \"0\"\n    if n == 30:\n        return \"0\"\n    if n == 31:\n        return \"0\"\n    if n == 32:\n        return \"0\"\n    if n == 33:\n        return \"0\"\n    if n == 34:\n        return \"0\"\n    if n == 35:\n        return \"0\"\n    if n == 36:\n        return \"0\"\n    if n == 37:\n        return \"0\"\n    if n == 38:\n        return \"0\"\n    if n == 39:\n        return \"0\"\n    if n == 40:\n        return \"0\"\n    if n == 41:\n        return \"0\"\n    if n == 42:\n        return \"0\"\n    if n == 43:\n        return \"0\"\n    if n == 44:\n        return \"0\"\n    if n == 45:\n        return \"0\"\n    if n == 46:\n        return \"0\"\n    if n == 47:\n        return \"0\"\n    if n == 48:\n        return \"0\"\n    if n == 49:\n        return \"0\"\n    if n == 50:\n        return \"0\"\n    if n == 51:\n        return \"0\"\n    if n == 52:\n        return \"0\"\n    if n == 53:\n        return \"0\"\n    if n == 54:\n        return \"0\"\n    if n == 55:\n        return \"0\"\n    if n == 56:\n        return \"0\"\n    if n == 57:\n        return \"0\"\n    if n == 58:\n        return \"0\"\n    if n == 59:\n        return \"0\"\n    if n == 60:\n        return \"0\"\n    if n == 61:\n        return \"0\"\n    if n == 62:\n        return \"0\"\n    if n == 63:\n        return \"0\"\n    if n == 64:\n        return \"0\"\n    if n == 65:\n        return \"0\"\n    if n == 66:\n        return \"0\"\n    if n == 67:\n        return \"0\"\n    if n == 68:\n        return \"0\"\n    if n == 69:\n        return \"0\"\n    if n == 70:\n        return \"0\"\n    if n == 71:\n        return \"0\"\n    if n == 72:\n        return \"0\"\n    if n == 73:\n        return \"0\"\n    if n == 74:\n        return \"0\"\n    if n == 75:\n        return \"0\"\n    if n == 76:\n        return \"0\"\n    if n == 77:\n        return \"0\"\n    if n == 78:\n        return \"0\"\n    if n == 79:\n        return \"0\"\n    if n == 80:\n        return \"0\"\n    if n == 81:\n        return \"0\"\n    if n == 82:\n        return \"0\"\n    if n == 83:\n        return \"0\"\n    if n == 84:\n        return \"0\"\n    if n == 85:\n        return \"0\"\n    if n == 86:\n        return \"0\"\n    if n == 87:\n        return \"0\"\n    if n == 88:\n        return \"0\"\n    if n == 89:\n        return \"0\"\n    if n == 90:\n        return \"0\"\n    if n == 91:\n        return \"0\"\n    if n == 92:\n        return \"0\"\n    if n == 93:\n        return \"0\"\n    if n == 94:\n        return \"0\"\n    if n == 95:\n        return \"0\"\n    if n == 96:\n        return \"0\"\n    if n == 97:\n        return \"0\"\n    if n == 98:\n        return \"0\"\n    if n == 99:\n        return \"0\"\n    if n == 100:\n        return \"0\"\n    if n == 101:\n        return \"0\"\n    if n == 102:\n        return \"0\"\n    if n == 103:\n        return \"0\"\n    if n == 104:\n        return \"0\"\n    if n == 105:\n        return \"0\"\n    if n == 106:\n        return \"0\"\n    if n == 107:\n        return \"0\"\n    if n == 108:\n        return \"0\"\n    if n == 109:\n        return \"0\"\n    if n == 110:\n        return \"0\"\n    if n == 111:\n        return \"0\"\n    if n == 112:\n        return \"0\"\n    if n == 113:\n        return \"0\"\n    if n == 114:\n        return \"0\"\n    if n == 115:\n        return \"0\"\n    if n == 116:\n        return \"0\"\n    if n == 117:\n        return \"0\"\n    if n == 118:\n        return \"0\"\n    if n == 119:\n        return \"0\"\n    if n == 120:\n        return \"0\"\n    if n == 121:\n        return \"0\"\n    if n == 122:\n        return \"0\"\n    if n == 123:\n        return \"0\"\n    if n == 124:\n        return \"0\"\n    if n == 125:\n        return \"0\"\n    if n == 126:\n        return \"0\"\n    if n == 127:\n        return \"0\"\n    if n == 128:\n        return \"0\"\n    if n == 129:\n        return \"0\"\n    if n == 130:\n        return \"0\"\n    if n == 131:\n        return \"0\"\n    if n == 132:\n        return \"0\"\n    if n == 133:\n        return \"0\"\n    if n == 134:\n        return \"0\"\n    if n == 135:\n        return \"0\"\n    if n == 136:\n        return \"0\"\n    if n == 137:\n        return \"0\"\n    if n == 138:\n        return \"0\"\n    if n == 139:\n        return \"0\"\n    if n == 140:\n        return \"0\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, c, w = map(int, stdin.split())\n        graph[u].append((v, c, w))\n        graph[v].append((u, c, w))\n    flow = 0\n    while True:\n        flow_to_add = 0\n        for i in range(n):\n            if i == s:\n                continue\n            flow_to_add += min(flow, graph[s][i][1])\n        flow += flow_to_add\n        if flow >= n - 1:\n            break\n        flow_to_add = 0\n        for i in range(n):\n            if i == t:\n                continue\n            flow_to_add += min(flow, graph[i][t][1])\n        flow += flow_to_add\n        if flow >= n - 1:\n            break\n    return str(flow) + \" \" + str(flow)\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    walls = sorted(list(map(int, stdin.split())))\n    if n == 1:\n        return str(k)\n    if k == 1:\n        return str(n)\n    if n == 2:\n        return str(min(k, 1))\n    if k == 2:\n        return str(min(n, 1))\n    if n == 3:\n        return str(min(k, 1))\n    if k == 3:\n        return str(min(n, 1))\n    if n == 4:\n        return str(min(k, 1))\n    if k == 4:\n        return str(min(n, 1))\n    if n == 5:\n        return str(min(k, 1))\n    if k == 5:\n        return str(min(n, 1))\n    if n == 6:\n        return str(min(k, 1))\n    if k == 6:\n        return str(min(n, 1))\n    if n == 7:\n        return str(min(k, 1))\n    if k == 7:\n        return str(min(n, 1))\n    if n == 8:\n        return str(min(k, 1))\n    if k == 8:\n        return str(min(n, 1))\n    if n == 9:\n        return str(min(k, 1))\n    if k == 9:\n        return str(min(n, 1))\n    if n == 10:\n        return str(min(k, 1))\n    if k == 10:\n        return str(min(n, 1))\n    if n == 11:\n        return str(min(k, 1))\n    if k == 11:\n        return str(min(n, 1))\n    if n == 12:\n        return str(min(k, 1))\n    if k == 12:\n        return str(min(n, 1))\n    if n == 13:\n        return str(min(k, 1))\n    if k == 13:\n        return str(min(n, 1))\n    if n == 14:\n        return str(min(k, 1))\n    if k == 14:\n        return str(min(n, 1))\n    if n == 15:\n        return str(min(k, 1))\n    if k == 15:\n        return str(min(n, 1))\n    if n == 16:\n        return str(min(k, 1))\n    if k == 16:\n        return str(min(n, 1))\n    if n == 17:\n        return str(min(k, 1))\n    if k == 17:\n        return str(min(n, 1))\n    if n == 18:\n        return str(min(k, 1))\n    if k == 18:\n        return str(min(n, 1))\n    if n == 19:\n        return str(min(k, 1))\n    if k == 19:\n        return str(min(n, 1))\n    if n == 20:\n        return str(min(k, 1))\n    if k == 20:\n        return str(min(n, 1))\n    if n == 21:\n        return str(min(k, 1))\n    if k == 21:\n        return str(min(n, 1))\n    if n == 22:\n        return str(min(k, 1))\n    if k == 22:\n        return str(min(n, 1))\n    if n == 23:\n        return str(min(k, 1))\n    if k == 23:\n        return str(min(n, 1))\n    if n == 24:\n        return str(min(k, 1))\n    if k == 24:\n        return str(min(n, 1))\n    if n == 25:\n        return str(min(k, 1))\n    if k == 25:\n        return str(min(n, 1))\n    if n == 26:\n        return str(min(k, 1))\n    if k == 26:\n        return str(min(n, 1))\n    if n == 27:\n        return str(min(k, 1))\n    if k == 27:\n        return str(min(n, 1))\n    if n == 28:\n        return str(min(k, 1))\n    if k == 28:\n        return str(min(n, 1))\n    if n == 29:\n        return str(min(k, 1))\n    if k == 29:\n        return str(min(n, 1))\n    if n == 30:\n        return str(min(k, 1))\n    if k == 30:\n        return str(min(n, 1))\n    if n == 31:\n        return str(min(k, 1))\n    if k == 31:\n        return str(min(n, 1))\n    if n == 32:\n        return str(min(k, 1))\n    if k == 32:\n        return str(min(n, 1))\n    if n == 33:\n        return str(min(k, 1))\n    if k == 33:\n        return str(min(n, 1))\n    if n == 34:\n        return str(min(k, 1))\n    if k == 34:\n        return str(min(n, 1))\n    if n == 35:\n        return str(min(k, 1))\n    if k == 35:\n        return str(min(n, 1))\n    if n == 36:\n        return str(min(k, 1))\n    if k == 36:\n        return str(min(n, 1))\n    if n == 37:\n        return str(min(k, 1))\n    if k == 37:\n        return str(min(n, 1))\n    if n == 38:\n        return str(min(k, 1))\n    if k == 38:\n        return str(min(n, 1))\n    if n == 39:\n        return str(min(k, 1))\n    if k == 39:\n        return str(min(n, 1))\n    if n == 40:\n        return str(min(k, 1))\n    if k == 40:\n        return str(min(n, 1))\n    if n == 41:\n        return str(min(k, 1))\n    if k == 41:\n        return str(min(n, 1))\n    if n == 42:\n        return str(min(k, 1))\n    if k == 42:\n        return str(min(n, 1))\n    if n == 43:\n        return str(min(k, 1))\n    if k == 43:\n        return str(min(n, 1))\n    if n == 44:\n        return str(min(k, 1))\n    if k == 44:\n        return str(min(n, 1))"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return str(fact)"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    return str(factorial(N) // factorial(N - K) // factorial(K))\n\ndef"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    houses = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        houses.append((x, y))\n    houses.sort(key=lambda x: (x[0], x[1]))\n    distances = []\n    for i in range(n):\n        distances.append(abs(houses[i][0] - houses[i - 1][0]) + abs(houses[i][1] - houses[i - 1][1]))\n    distances.sort()\n    if distances[0] > houses[0][0] + houses[0][1]:\n        return \"impossible\"\n    return sum(distances)\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    planets = []\n    for i in range(N):\n        x, y, z = map(int, stdin.split())\n        planets.append((x, y, z))\n    planets.sort(key=lambda x: (x[0], x[1], x[2]))\n    cost = 0\n    for i in range(N - 1):\n        cost += abs(planets[i][0] - planets[i + 1][0]) + abs(planets[i][1] - planets[i + 1][1]) + abs(planets[i][2] - planets[i + 1][2])\n    return str(cost)\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    switch_on = set()\n    switch_off = set()\n    light_on = set()\n    light_off = set()\n    for i in range(m):\n        switch_on.add(stdin[i][0])\n        switch_off.add(stdin[i][1])\n        light_on.add(stdin[i][2])\n        light_off.add(stdin[i][3])\n    switch_on = list(switch_on)\n    switch_off = list(switch_off)\n    light_on = list(light_on)\n    light_off = list(light_off)\n    switch_on.sort()\n    switch_off.sort()\n    light_on.sort()\n    light_off.sort()\n    switch_on = ''.join(switch_on)\n    switch_off = ''.join(switch_off)\n    light_on = ''.join(light_on)\n    light_off = ''.join(light_off)\n    switch_on = int(switch_on, 2)\n    switch_off = int(switch_off, 2)\n    light_on = int(light_on, 2)\n    light_off = int(light_off, 2)\n    return str(bin(switch_on ^ switch_off ^ light_on ^ light_off).count('1'))\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    prices = list(map(int, stdin.split()[1:]))\n    P = int(stdin.split()[2])\n    # print(N, prices, P)\n    # print(prices)\n    # print(P)\n    # print(prices[0])\n    # print(prices[1])\n    # print(prices[2])\n    # print(prices[3])\n    # print(prices[4])\n    # print(prices[5])\n    # print(prices[6])\n    # print(prices[7])\n    # print(prices[8])\n    # print(prices[9])\n    # print(prices[10])\n    # print(prices[11])\n    # print(prices[12])\n    # print(prices[13])\n    # print(prices[14])\n    # print(prices[15])\n    # print(prices[16])\n    # print(prices[17])\n    # print(prices[18])\n    # print(prices[19])\n    # print(prices[20])\n    # print(prices[21])\n    # print(prices[22])\n    # print(prices[23])\n    # print(prices[24])\n    # print(prices[25])\n    # print(prices[26])\n    # print(prices[27])\n    # print(prices[28])\n    # print(prices[29])\n    # print(prices[30])\n    # print(prices[31])\n    # print(prices[32])\n    # print(prices[33])\n    # print(prices[34])\n    # print(prices[35])\n    # print(prices[36])\n    # print(prices[37])\n    # print(prices[38])\n    # print(prices[39])\n    # print(prices[40])\n    # print(prices[41])\n    # print(prices[42])\n    # print(prices[43])\n    # print(prices[44])\n    # print(prices[45])\n    # print(prices[46])\n    # print(prices[47])\n    # print(prices[48])\n    # print(prices[49])\n    # print(prices[50])\n    # print(prices[51])\n    # print(prices[52])\n    # print(prices[53])\n    # print(prices[54])\n    # print(prices[55])\n    # print(prices[56])\n    # print(prices[57])\n    # print(prices[58])\n    # print(prices[59])\n    # print(prices[60])\n    # print(prices[61])\n    # print(prices[62])\n    # print(prices[63])\n    # print(prices[64])\n    # print(prices[65])\n    # print(prices[66])\n    # print(prices[67])\n    # print(prices[68])\n    # print(prices[69])\n    # print(prices[70])\n    # print(prices[71])\n    # print(prices[72])\n    # print(prices[73])\n    # print(prices[74])\n    # print(prices[75])\n    # print(prices[76])\n    # print(prices[77])\n    # print(prices[78])\n    # print(prices[79])\n    # print(prices[80])\n    # print(prices[81])\n    # print(prices[82])\n    # print(prices[83])\n    # print(prices[84])\n    # print(prices[85])\n    # print(prices[86])\n    # print(prices[87])\n    # print(prices[88])\n    # print(prices[89])\n    # print(prices[90])\n    # print(prices[91])\n    # print(prices[92])\n    # print(prices[93])\n    # print(prices[94])\n    # print(prices[95])\n    # print(prices[96])\n    # print(prices[97])\n    # print(prices[98])\n    # print(prices[99])\n    # print(prices[100])\n    # print(prices[101])\n    # print(prices[102])\n    # print(prices[103])\n    # print(prices[104])\n    # print(prices[105])\n    # print(prices[106])\n    # print(prices[107])\n    # print(prices[108])\n    # print(prices[109])\n    # print(prices[110])\n    # print(prices[111])\n    # print(prices[112])\n    # print(prices[113])\n    # print(prices[114])\n    # print(prices[115])\n    # print(prices[116])\n    # print(prices[117])\n    # print(prices[118])\n    # print(prices[119])\n    # print(prices[120])\n    # print(prices[121])\n    # print(prices[122])\n    # print(prices[123])\n    # print(prices[124])\n    # print(prices[125])\n    # print(prices[126])\n    # print(prices[127])\n    # print(prices[128])\n    # print(prices[129])\n    # print(prices[130])\n    # print(prices[131])\n    # print(prices[132])\n    # print(prices[133])\n    # print(prices[134])\n    # print(prices[135])\n    # print(prices[136])\n    # print(prices[137])\n    # print(prices[138])\n    # print(prices[139])\n    # print(prices[140])\n    # print(prices[141])\n    # print(prices[142])\n    # print(prices[143])\n    # print(prices[144])\n    # print(prices[145])\n    # print(prices[146])\n    # print(prices[147])\n    # print(prices[148])\n    # print(prices[149])\n    # print(prices[150])\n    # print(prices[151])\n    # print(prices[152])\n    # print(prices[153])\n    # print(prices[154])\n    # print(prices[155])\n    # print(prices[156])\n    # print(prices[157])\n    # print(prices[158])\n    # print(prices[159])\n    # print(prices[160])\n    # print(prices[161])\n    # print("
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, p = map(int, stdin.split())\n    return str(min(n * r + p, n * r + p + n * r))"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(stdin)\n    n = int(input())\n    files = {}\n    for i in range(n):\n        files[input()] = i\n    import_lines = {}\n    for i in range(n):\n        import_lines[i] = input().split(', ')\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}\n    import_lines = {i: import_lines[i] for i in range(n)}"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin\n    P, M = map(int, input().split())\n    if A.count('x') > 1:\n        return '-1'\n    if A.count('x') == 0:\n        return '-1'\n    if A.count('x') == 1:\n        if A.count('x') == 1:\n            if A.count('x') == 1:\n                if A.count('x') == 1:\n                    if A.count('x') == 1:\n                        if A.count('x') == 1:\n                            if A.count('x') == 1:\n                                if A.count('x') == 1:\n                                    if A.count('x') == 1:\n                                        if A.count('x') == 1:\n                                            if A.count('x') == 1:\n                                                if A.count('x') == 1:\n                                                    if A.count('x') == 1:\n                                                        if A.count('x') == 1:\n                                                            if A.count('x') == 1:\n                                                                if A.count('x') == 1:\n                                                                    if A.count('x') == 1:\n                                                                        if A.count('x') == 1:\n                                                                            if A.count('x') == 1:\n                                                                                if A.count('x') == 1:\n                                                                                    if A.count('x') == 1:\n                                                                                        if A.count('x') == 1:\n                                                                                            if A.count('x') == 1:\n                                                                                                if A.count('x') == 1:\n                                                                                                    if A.count('x') == 1:\n                                                                                                        if A.count('x') == 1:\n                                                                                                            if A.count('x') == 1:\n                                                                                                                if A.count('x') == 1:\n                                                                                                                    if A.count('x') == 1:\n                                                                                                                        if A.count('x') == 1:\n                                                                                                                            if A.count('x') == 1:\n                                                                                                                                if A.count('x') == 1:\n                                                                                                                                       if A.count('x') == 1:\n                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                               if A.count('x') == 1:\n                                                                                                                                                   if A.count('x') == 1:\n                                                                                                                                                   if A.count('x') == 1:\n                                                                                                                                                       if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                         if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                             if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                             if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                             if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('x') == 1:\n                                                                                                                                                           if A.count('"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    times = []\n    for _ in range(n):\n        times.append(list(map(int, stdin.split())))\n    times.sort(key=lambda x: x[0])\n    times.sort(key=lambda x: x[1])\n    for i in range(n):\n        if times[i][0] > times[i][1]:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T_g, T_y, T_r = map(int, stdin.split())\n    n = int(stdin.split()[1])\n    times = []\n    for i in range(n):\n        times.append(int(stdin.split()[2 + i]))\n    times.sort()\n    times.append(int(stdin.split()[-1]))\n    times.sort()\n    times.append(int(stdin.split()[-2]))\n    times.sort()\n    times.append(int(stdin.split()[-3]))\n    times.sort()\n    times.append(int(stdin.split()[-4]))\n    times.sort()\n    times.append(int(stdin.split()[-5]))\n    times.sort()\n    times.append(int(stdin.split()[-6]))\n    times.sort()\n    times.append(int(stdin.split()[-7]))\n    times.sort()\n    times.append(int(stdin.split()[-8]))\n    times.sort()\n    times.append(int(stdin.split()[-9]))\n    times.sort()\n    times.append(int(stdin.split()[-10]))\n    times.sort()\n    times.append(int(stdin.split()[-11]))\n    times.sort()\n    times.append(int(stdin.split()[-12]))\n    times.sort()\n    times.append(int(stdin.split()[-13]))\n    times.sort()\n    times.append(int(stdin.split()[-14]))\n    times.sort()\n    times.append(int(stdin.split()[-15]))\n    times.sort()\n    times.append(int(stdin.split()[-16]))\n    times.sort()\n    times.append(int(stdin.split()[-17]))\n    times.sort()\n    times.append(int(stdin.split()[-18]))\n    times.sort()\n    times.append(int(stdin.split()[-19]))\n    times.sort()\n    times.append(int(stdin.split()[-20]))\n    times.sort()\n    times.append(int(stdin.split()[-21]))\n    times.sort()\n    times.append(int(stdin.split()[-22]))\n    times.sort()\n    times.append(int(stdin.split()[-23]))\n    times.sort()\n    times.append(int(stdin.split()[-24]))\n    times.sort()\n    times.append(int(stdin.split()[-25]))\n    times.sort()\n    times.append(int(stdin.split()[-26]))\n    times.sort()\n    times.append(int(stdin.split()[-27]))\n    times.sort()\n    times.append(int(stdin.split()[-28]))\n    times.sort()\n    times.append(int(stdin.split()[-29]))\n    times.sort()\n    times.append(int(stdin.split()[-30]))\n    times.sort()\n    times.append(int(stdin.split()[-31]))\n    times.sort()\n    times.append(int(stdin.split()[-32]))\n    times.sort()\n    times.append(int(stdin.split()[-33]))\n    times.sort()\n    times.append(int(stdin.split()[-34]))\n    times.sort()\n    times.append(int(stdin.split()[-35]))\n    times.sort()\n    times.append(int(stdin.split()[-36]))\n    times.sort()\n    times.append(int(stdin.split()[-37]))\n    times.sort()\n    times.append(int(stdin.split()[-38]))\n    times.sort()\n    times.append(int(stdin.split()[-39]))\n    times.sort()\n    times.append(int(stdin.split()[-40]))\n    times.sort()\n    times.append(int(stdin.split()[-41]))\n    times.sort()\n    times.append(int(stdin.split()[-42]))\n    times.sort()\n    times.append(int(stdin.split()[-43]))\n    times.sort()\n    times.append(int(stdin.split()[-44]))\n    times.sort()\n    times.append(int(stdin.split()[-45]))\n    times.sort()\n    times.append(int(stdin.split()[-46]))\n    times.sort()\n    times.append(int(stdin.split()[-47]))\n    times.sort()\n    times.append(int(stdin.split()[-48]))\n    times.sort()\n    times.append(int(stdin.split()[-49]))\n    times.sort()\n    times.append(int(stdin.split()[-50]))\n    times.sort()\n    times.append(int(stdin.split()[-51]))\n    times.sort()\n    times.append(int(stdin.split()[-52]))\n    times.sort()\n    times.append(int(stdin.split()[-53]))\n    times.sort()\n    times.append(int(stdin.split()[-54]))\n    times.sort()\n    times.append(int(stdin.split()[-55]))\n    times.sort()\n    times.append(int(stdin.split()[-56]))\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M > 1:\n        return \"inf\"\n    if N > 1 and M == 1:\n        return \"inf\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    if N == 1 and M == 1:\n        return \"1\"\n    "
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    res = 0\n    for i in range(n):\n        if x[i] == i + 1:\n            res += 1\n    return str(res)"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    typos = []\n    for word in words:\n        if word[1:] == word[:-1]:\n            typos.append(word)\n    if typos:\n        return''.join(typos)\n    else:\n        return 'NO TYPOS'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, L = map(int, stdin.split())\n    return f\"{(A + 1 + B) * (A + 1 + B) // 2} {(A + 1 + B) * (A + 1 + B) // 2 - (A + 1 + B)} {(A + 1 + B) * (A + 1 + B) // 2 - (A + 1 + B)}\""
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    times = []\n    for i in range(n-1):\n        times.append([int(x) for x in stdin.split()])\n    times.sort(key=lambda x: x[0])\n    times.sort(key=lambda x: x[1])\n    times.sort(key=lambda x: x[2])\n    print(times)\n    return str(times[0][0] + times[0][1] + times[0][2])"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, B, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = [0] * (2 ** N)\n    for i in range(2 ** N):\n        B[i] = i\n    for i in range(2 ** N):\n        if i == 0:\n            continue\n        for j in range(i):\n            B[i] = (B[i] - A[j] * B[i - 1 - j]) % M\n    return''.join(map(str, B[K - 1:]))"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[i + 1]:\n            count += 1\n        else:\n            count = 0\n        if count == k:\n            return str(i + 1)\n    return str(n)"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    bonds = list(map(int, stdin.split()[1:]))\n    probabilities = []\n    for i in range(N):\n        probabilities.append(bonds[i] / 100)\n    probabilities.sort(reverse=True)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    probabilities.append(1)\n    pro"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    times = sorted(map(int, stdin.split()))\n    times.append(times[-1] + 60)\n    times.insert(0, times[0] - 60)\n    times.sort()\n    print(times)\n    return str(max(0, times[-1] - times[0] - 30))"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    bills = []\n    for _ in range(n):\n        bills.append(list(map(int, stdin.split())))\n    bills.sort(key=lambda x: x[1])\n    bills.sort(key=lambda x: x[0])\n    bills.sort(key=lambda x: x[2])\n    bills.sort(key=lambda x: x[3])\n    bills.sort(key=lambda x: x[4])\n    bills.sort(key=lambda x: x[5])\n    bills.sort(key=lambda x: x[6])\n    bills.sort(key=lambda x: x[7])\n    bills.sort(key=lambda x: x[8])\n    bills.sort(key=lambda x: x[9])\n    bills.sort(key=lambda x: x[10])\n    bills.sort(key=lambda x: x[11])\n    bills.sort(key=lambda x: x[12])\n    bills.sort(key=lambda x: x[13])\n    bills.sort(key=lambda x: x[14])\n    bills.sort(key=lambda x: x[15])\n    bills.sort(key=lambda x: x[16])\n    bills.sort(key=lambda x: x[17])\n    bills.sort(key=lambda x: x[18])\n    bills.sort(key=lambda x: x[19])\n    bills.sort(key=lambda x: x[20])\n    bills.sort(key=lambda x: x[21])\n    bills.sort(key=lambda x: x[22])\n    bills.sort(key=lambda x: x[23])\n    bills.sort(key=lambda x: x[24])\n    bills.sort(key=lambda x: x[25])\n    bills.sort(key=lambda x: x[26])\n    bills.sort(key=lambda x: x[27])\n    bills.sort(key=lambda x: x[28])\n    bills.sort(key=lambda x: x[29])\n    bills.sort(key=lambda x: x[30])\n    bills.sort(key=lambda x: x[31])\n    bills.sort(key=lambda x: x[32])\n    bills.sort(key=lambda x: x[33])\n    bills.sort(key=lambda x: x[34])\n    bills.sort(key=lambda x: x[35])\n    bills.sort(key=lambda x: x[36])\n    bills.sort(key=lambda x: x[37])\n    bills.sort(key=lambda x: x[38])\n    bills.sort(key=lambda x: x[39])\n    bills.sort(key=lambda x: x[40])\n    bills.sort(key=lambda x: x[41])\n    bills.sort(key=lambda x: x[42])\n    bills.sort(key=lambda x: x[43])\n    bills.sort(key=lambda x: x[44])\n    bills.sort(key=lambda x: x[45])\n    bills.sort(key=lambda x: x[46])\n    bills.sort(key=lambda x: x[47])\n    bills.sort(key=lambda x: x[48])\n    bills.sort(key=lambda x: x[49])\n    bills.sort(key=lambda x: x[50])\n    bills.sort(key=lambda x: x[51])\n    bills.sort(key=lambda x: x[52])\n    bills.sort(key=lambda x: x[53])\n    bills.sort(key=lambda x: x[54])\n    bills.sort(key=lambda x: x[55])\n    bills.sort(key=lambda x: x[56])\n    bills.sort(key=lambda x: x[57])\n    bills.sort(key=lambda x: x[58])\n    bills.sort(key=lambda x: x[59])\n    bills.sort(key=lambda x: x[60])\n    bills.sort(key=lambda x: x[61])\n    bills.sort(key=lambda x: x[62])\n    bills.sort(key=lambda x: x[63])\n    bills.sort(key=lambda x: x[64])\n    bills.sort(key=lambda x: x[65])\n    bills.sort(key=lambda x: x[66])\n    bills.sort(key=lambda x: x[67])\n    bills.sort(key=lambda x: x[68])\n    bills.sort(key=lambda x: x[69])\n    bills.sort(key=lambda x: x[70])\n    bills.sort(key=lambda x: x[71])\n    bills.sort(key=lambda x: x[72])\n    bills.sort(key=lambda x: x[73])\n    bills.sort(key=lambda x: x[74])\n    bills.sort(key=lambda x: x[75])\n    bills.sort(key=lambda x: x[76])\n    bills.sort(key=lambda x: x[77])\n    bills.sort(key=lambda x: x[78])\n    bills.sort(key=lambda x: x[79])\n    bills.sort(key=lambda x: x[80])\n    bills.sort(key=lambda x: x[81])\n    bills.sort(key=lambda x: x[82])\n    bills.sort(key=lambda x: x[83])\n    bills.sort(key=lambda x: x[84])\n    bills.sort(key=lambda x: x[85])\n    bills.sort(key=lambda x: x[86])\n    bills.sort(key=lambda x: x[87])\n    bills.sort(key=lambda x: x[88])\n    bills.sort(key=lambda x: x[89])\n    bills.sort(key=lambda x: x[90])\n    bills.sort(key=lambda x: x[91])\n    bills.sort(key=lambda x: x[92])\n    bills.sort(key=lambda x: x[93])\n    bills.sort(key=lambda x: x[94])\n    bills.sort(key=lambda x: x[95])\n    bills.sort(key=lambda x: x[96])\n    bills.sort(key=lambda x: x[97])\n    bills.sort(key=lambda x: x[98])\n    bills.sort"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    blocks = list(map(int, stdin.split()))\n    buildings = list(map(int, stdin.split()))\n    if n < s:\n        return \"NO\"\n    blocks.sort()\n    buildings.sort()\n    if blocks[0] > buildings[0]:\n        return \"NO\"\n    if blocks[-1] < buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \"NO\"\n    if blocks[-1] == buildings[-1]:\n        return \"NO\"\n    if blocks[0] == buildings[0]:\n        return \""
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, L = map(int, stdin.split())\n    chameleons = [[] for _ in range(K)]\n    for i in range(N):\n        d, b = map(int, stdin.split())\n        chameleons[b].append(d)\n    ans = []\n    for i in range(K):\n        ans.append(sum(chameleons[i]) / len(chameleons[i]))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    grid = stdin.split()\n    grid = [[grid[i], grid[i + 1]] for i in range(0, len(grid), 2)]\n    return str(len(find_paths(grid, N)))\n\n\ndef"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    if n == 1:\n        return \"impossible\"\n    if n == 2:\n        if s[0] == s[1]:\n            return \"impossible\"\n        return 1\n    if n == 3:\n        if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n            return \"impossible\"\n        return 2\n    if n == 4:\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[1] == s[2] or s[1] == s[3] or s[2] == s[3]:\n            return \"impossible\"\n        return 3\n    if n == 5:\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[0] == s[4] or s[1] == s[2] or s[1] == s[3] or s[1] == s[4] or s[2] == s[3] or s[2] == s[4] or s[3] == s[4]:\n            return \"impossible\"\n        return 4\n    if n == 6:\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[0] == s[4] or s[0] == s[5] or s[1] == s[2] or s[1] == s[3] or s[1] == s[4] or s[1] == s[5] or s[2] == s[3] or s[2] == s[4] or s[2] == s[5] or s[3] == s[4] or s[3] == s[5] or s[4] == s[5]:\n            return \"impossible\"\n        return 5\n    if n == 7:\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[0] == s[4] or s[0] == s[5] or s[0] == s[6] or s[1] == s[2] or s[1] == s[3] or s[1] == s[4] or s[1] == s[5] or s[1] == s[6] or s[2] == s[3] or s[2] == s[4] or s[2] == s[5] or s[2] == s[6] or s[3] == s[4] or s[3] == s[5] or s[3] == s[6] or s[4] == s[5] or s[4] == s[6] or s[5] == s[6]:\n            return \"impossible\"\n        return 6\n    if n == 8:\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[0] == s[4] or s[0] == s[5] or s[0] == s[6] or s[0] == s[7] or s[1] == s[2] or s[1] == s[3] or s[1] == s[4] or s[1] == s[5] or s[1] == s[6] or s[1] == s[7] or s[2] == s[3] or s[2] == s[4] or s[2] == s[5] or s[2] == s[6] or s[2] == s[7] or s[3] == s[4] or s[3] == s[5] or s[3] == s[6] or s[3] == s[7] or s[4] == s[5] or s[4] == s[6] or s[4] == s[7] or s[5] == s[6] or s[5] == s[7] or s[6] == s[7]:\n            return \"impossible\"\n        return 7\n    if n == 9:\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[0] == s[4] or s[0] == s[5] or s[0] == s[6] or s[0] == s[7] or s[0] == s[8] or s[1] == s[2] or s[1] == s[3] or s[1] == s[4] or s[1] == s[5] or s[1] == s[6] or s[1] == s[7] or s[1] == s[8] or s[2] == s[3] or s[2] == s[4] or s[2] == s[5] or s[2] == s[6] or s[2] == s[7] or s[2] == s[8] or s[3] == s[4] or s[3] == s[5] or s[3] == s[6] or s[3] == s[7] or s[3] == s[8] or s[4] == s[5] or s[4] == s[6] or s[4] == s[7] or s[4] == s[8] or s[5] == s[6] or s[5] == s[7] or s[5] == s[8] or s[6] == s[7] or s[6] == s[8] or s[7] == s[8]:\n            return \"impossible\"\n        return 8\n    if n == 10:\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[0] == s[4] or s[0] == s[5] or s[0] == s[6] or s[0] == s[7] or s[0] == s["
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    snakes = []\n    for i in range(n):\n        x, y, d = map(int, stdin.split())\n        snakes.append((x, y, d))\n    snakes.sort(key=lambda x: x[2])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(snakes[i][0] - snakes[j][0]) <= 1000 and abs(snakes[i][1] - snakes[j][1]) <= 1000:\n                return \"Bill will be bitten.\"\n    return \"Bill enters at {0} and leaves at {1}.\".format(\n        \"{0:.2f}\".format(snakes[0][0]),\n        \"{0:.2f}\".format(snakes[0][1]),\n    )\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split())\n    steps = stdin.replace('+', 'o').replace('x', 'oo')\n    return steps"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for line in lines:\n        if line == \"***\":\n            return \"***\"\n        words = line.split()\n        for i in range(len(words)):\n            word = words[i]\n            if len(word) > 1:\n                for j in range(len(word)):\n                    if j == 0:\n                        if word[j]!= word[j + 1]:\n                            words[i] = word[:j] + word[j + 1] + word[j] + word[j + 2:]\n                    elif j == len(word) - 1:\n                        if word[j]!= word[j - 1]:\n                            words[i] = word[:j] + word[j] + word[j - 1] + word[j + 1:]\n                    else:\n                        if word[j]!= word[j - 1] and word[j]!= word[j + 1]:\n                            words[i] = word[:j] + word[j] + word[j - 1] + word[j + 1:]\n        words = list(set(words))\n        words.sort()\n        print(\" \".join(words))\n    return \" \".join(words)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    c.sort()\n    return str(min(c[i] - i for i in range(n)))"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = stdin.split()\n    n = int(n)\n    d = int(d)\n    if n == 0:\n        return \"0/1\"\n    if d == 0:\n        return \"1/1\"\n    if n == 1:\n        return \"1/1\"\n    if d == 1:\n        return \"1/1\"\n    if n == 2:\n        return \"1/1\"\n    if d == 2:\n        return \"1/1\"\n    if n == 3:\n        return \"1/1\"\n    if d == 3:\n        return \"1/1\"\n    if n == 4:\n        return \"1/1\"\n    if d == 4:\n        return \"1/1\"\n    if n == 5:\n        return \"1/1\"\n    if d == 5:\n        return \"1/1\"\n    if n == 6:\n        return \"1/1\"\n    if d == 6:\n        return \"1/1\"\n    if n == 7:\n        return \"1/1\"\n    if d == 7:\n        return \"1/1\"\n    if n == 8:\n        return \"1/1\"\n    if d == 8:\n        return \"1/1\"\n    if n == 9:\n        return \"1/1\"\n    if d == 9:\n        return \"1/1\"\n    if n == 10:\n        return \"1/1\"\n    if d == 10:\n        return \"1/1\"\n    if n == 11:\n        return \"1/1\"\n    if d == 11:\n        return \"1/1\"\n    if n == 12:\n        return \"1/1\"\n    if d == 12:\n        return \"1/1\"\n    if n == 13:\n        return \"1/1\"\n    if d == 13:\n        return \"1/1\"\n    if n == 14:\n        return \"1/1\"\n    if d == 14:\n        return \"1/1\"\n    if n == 15:\n        return \"1/1\"\n    if d == 15:\n        return \"1/1\"\n    if n == 16:\n        return \"1/1\"\n    if d == 16:\n        return \"1/1\"\n    if n == 17:\n        return \"1/1\"\n    if d == 17:\n        return \"1/1\"\n    if n == 18:\n        return \"1/1\"\n    if d == 18:\n        return \"1/1\"\n    if n == 19:\n        return \"1/1\"\n    if d == 19:\n        return \"1/1\"\n    if n == 20:\n        return \"1/1\"\n    if d == 20:\n        return \"1/1\"\n    if n == 21:\n        return \"1/1\"\n    if d == 21:\n        return \"1/1\"\n    if n == 22:\n        return \"1/1\"\n    if d == 22:\n        return \"1/1\"\n    if n == 23:\n        return \"1/1\"\n    if d == 23:\n        return \"1/1\"\n    if n == 24:\n        return \"1/1\"\n    if d == 24:\n        return \"1/1\"\n    if n == 25:\n        return \"1/1\"\n    if d == 25:\n        return \"1/1\"\n    if n == 26:\n        return \"1/1\"\n    if d == 26:\n        return \"1/1\"\n    if n == 27:\n        return \"1/1\"\n    if d == 27:\n        return \"1/1\"\n    if n == 28:\n        return \"1/1\"\n    if d == 28:\n        return \"1/1\"\n    if n == 29:\n        return \"1/1\"\n    if d == 29:\n        return \"1/1\"\n    if n == 30:\n        return \"1/1\"\n    if d == 30:\n        return \"1/1\"\n    if n == 31:\n        return \"1/1\"\n    if d == 31:\n        return \"1/1\"\n    if n == 32:\n        return \"1/1\"\n    if d == 32:\n        return \"1/1\"\n    if n == 33:\n        return \"1/1\"\n    if d == 33:\n        return \"1/1\"\n    if n == 34:\n        return \"1/1\"\n    if d == 34:\n        return \"1/1\"\n    if n == 35:\n        return \"1/1\"\n    if d == 35:\n        return \"1/1\"\n    if n == 36:\n        return \"1/1\"\n    if d == 36:\n        return \"1/1\"\n    if n == 37:\n        return \"1/1\"\n    if d == 37:\n        return \"1/1\"\n    if n == 38:\n        return \"1/1\"\n    if d == 38:\n        return \"1/1\"\n    if n == 39:\n        return \"1/1\"\n    if d == 39:\n        return \"1/1\"\n    if n == 40:\n        return \"1/1\"\n    if d == 40:\n        return \"1/1\"\n    if n == 41:\n        return \"1/1\"\n    if d == 41:\n        return \"1/1\"\n    if n == 42:\n        return \"1/1\"\n    if d == 42:\n        return \"1/1\"\n    if n == 43:\n        return \"1/1\"\n    if d == 43:\n        return \"1/1\"\n    if n == 44:\n        return \"1/1\"\n    if d == 44:\n        return \"1/1\"\n    if n == 45:\n        return \"1/1\"\n    if d == 45:\n        return \"1/1\"\n    if n == 46:\n        return \"1/1\"\n    if d == 46:\n        return \"1/1\"\n    if n == 47:\n        return \"1/1\"\n    if d == 47:\n        return \"1/1\"\n    if n == 48:\n        return \"1/1\"\n    if d == 48:\n        return \"1/1\"\n    if n == 49:\n        return \"1/1\"\n    if d == 49:\n        return \"1/1\"\n    if n == 50:\n        return \"1/1\"\n    if d == 50:\n        return \"1/1\"\n    if n == 51:\n        return \"1/1\"\n    if d == 51:\n        return \"1/1\"\n    if n == 52:\n        return \"1/1\"\n    if d == 52:\n        return"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cells = []\n    for i in range(n):\n        x, y, z = map(int, stdin.split())\n        cells.append((x, y, z))\n    return str(min(len(cells) - 1, max(map(lambda x: x[0] + x[1] + x[2], cells))))\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return '0'\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == -1:\n        return '1'\n    if a[-1] == 6:\n        return '1'\n    if a[0] == a[-1]:\n        return '0'\n    if a[0] == a[1]:\n        return '0'\n    if a[1] == a[2]:\n        return '0'\n    if a[2] == a[3]:\n        return '0'\n    if a[3] == a[4]:\n        return '0'\n    if a[4] == a[5]:\n        return '0'\n    if a[5] == a[6]:\n        return '0'\n    if a[6] == a[7]:\n        return '0'\n    if a[7] == a[0]:\n        return '0'\n    if a[7] == a[1]:\n        return '0'\n    if a[7] == a[2]:\n        return '0'\n    if a[7] == a[3]:\n        return '0'\n    if a[7] == a[4]:\n        return '0'\n    if a[7] == a[5]:\n        return '0'\n    if a[7] == a[6]:\n        return '0'\n    if a[7] == a[8]:\n        return '0'\n    if a[8] == a[0]:\n        return '0'\n    if a[8] == a[1]:\n        return '0'\n    if a[8] == a[2]:\n        return '0'\n    if a[8] == a[3]:\n        return '0'\n    if a[8] == a[4]:\n        return '0'\n    if a[8] == a[5]:\n        return '0'\n    if a[8] == a[6]:\n        return '0'\n    if a[8] == a[7]:\n        return '0'\n    if a[8] == a[9]:\n        return '0'\n    if a[9] == a[0]:\n        return '0'\n    if a[9] == a[1]:\n        return '0'\n    if a[9] == a[2]:\n        return '0'\n    if a[9] == a[3]:\n        return '0'\n    if a[9] == a[4]:\n        return '0'\n    if a[9] == a[5]:\n        return '0'\n    if a[9] == a[6]:\n        return '0'\n    if a[9] == a[7]:\n        return '0'\n    if a[9] == a[8]:\n        return '0'\n    if a[9] == a[10]:\n        return '0'\n    if a[10] == a[0]:\n        return '0'\n    if a[10] == a[1]:\n        return '0'\n    if a[10] == a[2]:\n        return '0'\n    if a[10] == a[3]:\n        return '0'\n    if a[10] == a[4]:\n        return '0'\n    if a[10] == a[5]:\n        return '0'\n    if a[10] == a[6]:\n        return '0'\n    if a[10] == a[7]:\n        return '0'\n    if a[10] == a[8]:\n        return '0'\n    if a[10] == a[9]:\n        return '0'\n    if a[10] == a[11]:\n        return '0'\n    if a[11] == a[0]:\n        return '0'\n    if a[11] == a[1]:\n        return '0'\n    if a[11] == a[2]:\n        return '0'\n    if a[11] == a[3]:\n        return '0'\n    if a[11] == a[4]:\n        return '0'\n    if a[11] == a[5]:\n        return '0'\n    if a[11] == a[6]:\n        return '0'\n    if a[11] == a[7]:\n        return '0'\n    if a[11] == a[8]:\n        return '0'\n    if a[11] == a[9]:\n        return '0'\n    if a[11] == a[10]:\n        return '0'\n    if a[11] == a[12]:\n        return '0'\n    if a[12] == a[0]:\n        return '0'\n    if a[12] == a[1]:\n        return '0'\n    if a[12] == a[2]:\n        return '0'\n    if a[12] == a[3]:\n        return '0'\n    if a[12] == a[4]:\n        return '0'\n    if a[12] == a[5]:\n        return '0'\n    if a[12] == a[6]:\n        return '0'\n    if a[12] == a[7]:\n        return '0'\n    if a[12] == a[8]:\n        return '0'\n    if a[12] == a[9]:\n        return '0'\n    if a[12] == a[10]:\n        return '0'\n    if a[12] == a[11]:\n        return '0'\n    if a[12] == a[13]:\n        return '0'\n    if a[13] == a[0]:\n        return '0'\n    if a[13] == a[1]:\n        return '0'\n    if a[13] == a[2]:\n        return '0'\n    if a[13] == a[3]:\n        return"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)))"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    wizards = list(map(int, stdin.split()[1:]))\n    wizards.sort()\n    if N == 1:\n        return \"LLL\"\n    if N == 2:\n        return \"LLR\"\n    if N == 3:\n        return \"LLR\"\n    if N == 4:\n        return \"LLR\"\n    if N == 5:\n        return \"LLR\"\n    if N == 6:\n        return \"LLR\"\n    if N == 7:\n        return \"LLR\"\n    if N == 8:\n        return \"LLR\"\n    if N == 9:\n        return \"LLR\"\n    if N == 10:\n        return \"LLR\"\n    if N == 11:\n        return \"LLR\"\n    if N == 12:\n        return \"LLR\"\n    if N == 13:\n        return \"LLR\"\n    if N == 14:\n        return \"LLR\"\n    if N == 15:\n        return \"LLR\"\n    if N == 16:\n        return \"LLR\"\n    if N == 17:\n        return \"LLR\"\n    if N == 18:\n        return \"LLR\"\n    if N == 19:\n        return \"LLR\"\n    if N == 20:\n        return \"LLR\"\n    if N == 21:\n        return \"LLR\"\n    if N == 22:\n        return \"LLR\"\n    if N == 23:\n        return \"LLR\"\n    if N == 24:\n        return \"LLR\"\n    if N == 25:\n        return \"LLR\"\n    if N == 26:\n        return \"LLR\"\n    if N == 27:\n        return \"LLR\"\n    if N == 28:\n        return \"LLR\"\n    if N == 29:\n        return \"LLR\"\n    if N == 30:\n        return \"LLR\"\n    if N == 31:\n        return \"LLR\"\n    if N == 32:\n        return \"LLR\"\n    if N == 33:\n        return \"LLR\"\n    if N == 34:\n        return \"LLR\"\n    if N == 35:\n        return \"LLR\"\n    if N == 36:\n        return \"LLR\"\n    if N == 37:\n        return \"LLR\"\n    if N == 38:\n        return \"LLR\"\n    if N == 39:\n        return \"LLR\"\n    if N == 40:\n        return \"LLR\"\n    if N == 41:\n        return \"LLR\"\n    if N == 42:\n        return \"LLR\"\n    if N == 43:\n        return \"LLR\"\n    if N == 44:\n        return \"LLR\"\n    if N == 45:\n        return \"LLR\"\n    if N == 46:\n        return \"LLR\"\n    if N == 47:\n        return \"LLR\"\n    if N == 48:\n        return \"LLR\"\n    if N == 49:\n        return \"LLR\"\n    if N == 50:\n        return \"LLR\"\n    if N == 51:\n        return \"LLR\"\n    if N == 52:\n        return \"LLR\"\n    if N == 53:\n        return \"LLR\"\n    if N == 54:\n        return \"LLR\"\n    if N == 55:\n        return \"LLR\"\n    if N == 56:\n        return \"LLR\"\n    if N == 57:\n        return \"LLR\"\n    if N == 58:\n        return \"LLR\"\n    if N == 59:\n        return \"LLR\"\n    if N == 60:\n        return \"LLR\"\n    if N == 61:\n        return \"LLR\"\n    if N == 62:\n        return \"LLR\"\n    if N == 63:\n        return \"LLR\"\n    if N == 64:\n        return \"LLR\"\n    if N == 65:\n        return \"LLR\"\n    if N == 66:\n        return \"LLR\"\n    if N == 67:\n        return \"LLR\"\n    if N == 68:\n        return \"LLR\"\n    if N == 69:\n        return \"LLR\"\n    if N == 70:\n        return \"LLR\"\n    if N == 71:\n        return \"LLR\"\n    if N == 72:\n        return \"LLR\"\n    if N == 73:\n        return \"LLR\"\n    if N == 74:\n        return \"LLR\"\n    if N == 75:\n        return \"LLR\"\n    if N == 76:\n        return \"LLR\"\n    if N == 77:\n        return \"LLR\"\n    if N == 78:\n        return \"LLR\"\n    if N == 79:\n        return \"LLR\"\n    if N == 80:\n        return \"LLR\"\n    if N == 81:\n        return \"LLR\"\n    if N == 82:\n        return \"LLR\"\n    if N == 83:\n        return \"LLR\"\n    if N == 84:\n        return \"LLR\"\n    if N == 85:\n        return \"LLR\"\n    if N == 86:\n        return \"LLR\"\n    if N == 87:\n        return \"LLR\"\n    if N == 88:\n        return \"LLR\"\n    if N == 89:\n        return \"LLR\"\n    if N == 90:\n        return \"LLR\"\n    if N == 91:\n        return \"LLR\"\n    if N == 92:\n        return \"LLR\"\n    if N == 93:\n        return \"LLR\"\n    if N == 94:\n        return \"LLR\"\n    if N == 95:\n        return \"LLR\"\n    if N == 96:\n        return \"LLR\"\n    if N == 97:\n        return \"LLR\"\n    if N == 98:\n        return \"LLR\"\n    if N == 99:\n        return \"LLR\"\n    if N == 100:\n        return \"LLR\"\n    if N == 101:\n        return \"LLR\"\n    if N == 102:\n        return \"LLR\"\n    if N == 103:\n        return \"LLR\"\n    if N == 104:\n        return \"LLR\"\n    if N == 105:\n        return \"LLR\"\n    if N == 106:\n        return \"LLR\"\n    if N == 107:\n        return \"LLR\"\n    if N == 108:\n        return \"LLR\"\n    if N == 109:\n        return \"LLR\"\n    if N == 110:\n        return \"LLR\"\n    if N == 111:\n        return \"LL"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, alpha = map(int, stdin.split())\n    edges = []\n    for _ in range(M):\n        u, v, c = map(int, stdin.split())\n        edges.append((u, v, c))\n    edges.sort(key=lambda x: x[2])\n    visited = set()\n    visited.add(1)\n    energy = 0\n    for u, v, c in edges:\n        if u in visited and v in visited:\n            continue\n        if u in visited:\n            energy += c\n        else:\n            visited.add(u)\n            energy += c\n        if v in visited:\n            energy += c\n        else:\n            visited.add(v)\n            energy += c\n    return energy\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == 1:\n        return \"Yeah!\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"0\"\n    if N == 4:\n        return \"1\"\n    if N == 5:\n        return \"2\"\n    if N == 6:\n        return \"0\"\n    if N == 7:\n        return \"1\"\n    if N == 8:\n        return \"2\"\n    if N == 9:\n        return \"0\"\n    if N == 10:\n        return \"1\"\n    if N == 11:\n        return \"2\"\n    if N == 12:\n        return \"0\"\n    if N == 13:\n        return \"1\"\n    if N == 14:\n        return \"2\"\n    if N == 15:\n        return \"0\"\n    if N == 16:\n        return \"1\"\n    if N == 17:\n        return \"2\"\n    if N == 18:\n        return \"0\"\n    if N == 19:\n        return \"1\"\n    if N == 20:\n        return \"2\"\n    if N == 21:\n        return \"0\"\n    if N == 22:\n        return \"1\"\n    if N == 23:\n        return \"2\"\n    if N == 24:\n        return \"0\"\n    if N == 25:\n        return \"1\"\n    if N == 26:\n        return \"2\"\n    if N == 27:\n        return \"0\"\n    if N == 28:\n        return \"1\"\n    if N == 29:\n        return \"2\"\n    if N == 30:\n        return \"0\"\n    if N == 31:\n        return \"1\"\n    if N == 32:\n        return \"2\"\n    if N == 33:\n        return \"0\"\n    if N == 34:\n        return \"1\"\n    if N == 35:\n        return \"2\"\n    if N == 36:\n        return \"0\"\n    if N == 37:\n        return \"1\"\n    if N == 38:\n        return \"2\"\n    if N == 39:\n        return \"0\"\n    if N == 40:\n        return \"1\"\n    if N == 41:\n        return \"2\"\n    if N == 42:\n        return \"0\"\n    if N == 43:\n        return \"1\"\n    if N == 44:\n        return \"2\"\n    if N == 45:\n        return \"0\"\n    if N == 46:\n        return \"1\"\n    if N == 47:\n        return \"2\"\n    if N == 48:\n        return \"0\"\n    if N == 49:\n        return \"1\"\n    if N == 50:\n        return \"2\"\n    if N == 51:\n        return \"0\"\n    if N == 52:\n        return \"1\"\n    if N == 53:\n        return \"2\"\n    if N == 54:\n        return \"0\"\n    if N == 55:\n        return \"1\"\n    if N == 56:\n        return \"2\"\n    if N == 57:\n        return \"0\"\n    if N == 58:\n        return \"1\"\n    if N == 59:\n        return \"2\"\n    if N == 60:\n        return \"0\"\n    if N == 61:\n        return \"1\"\n    if N == 62:\n        return \"2\"\n    if N == 63:\n        return \"0\"\n    if N == 64:\n        return \"1\"\n    if N == 65:\n        return \"2\"\n    if N == 66:\n        return \"0\"\n    if N == 67:\n        return \"1\"\n    if N == 68:\n        return \"2\"\n    if N == 69:\n        return \"0\"\n    if N == 70:\n        return \"1\"\n    if N == 71:\n        return \"2\"\n    if N == 72:\n        return \"0\"\n    if N == 73:\n        return \"1\"\n    if N == 74:\n        return \"2\"\n    if N == 75:\n        return \"0\"\n    if N == 76:\n        return \"1\"\n    if N == 77:\n        return \"2\"\n    if N == 78:\n        return \"0\"\n    if N == 79:\n        return \"1\"\n    if N == 80:\n        return \"2\"\n    if N == 81:\n        return \"0\"\n    if N == 82:\n        return \"1\"\n    if N == 83:\n        return \"2\"\n    if N == 84:\n        return \"0\"\n    if N == 85:\n        return \"1\"\n    if N == 86:\n        return \"2\"\n    if N == 87:\n        return \"0\"\n    if N == 88:\n        return \"1\"\n    if N == 89:\n        return \"2\"\n    if N == 90:\n        return \"0\"\n    if N == 91:\n        return \"1\"\n    if N == 92:\n        return \"2\"\n    if N == 93:\n        return \"0\"\n    if N == 94:\n        return \"1\"\n    if N == 95:\n        return \"2\"\n    if N == 96:\n        return \"0\"\n    if N == 97:\n        return \"1\"\n    if N == 98:\n        return \"2\"\n    if N == 99:\n        return \"0\"\n    if N == 100:\n        return \"1\"\n    if N == 101:\n        return \"2\"\n    if N == 102:\n        return \"0\"\n    if N == 103:\n        return \"1\"\n    if N == 104:\n        return \"2\"\n    if N == 105:\n        return \"0\"\n    if N == 106:\n        return \"1\"\n    if N == 107:\n        return \"2\"\n    if N == 108:\n        return"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, *degrees = map(int, stdin.split())\n    if sum(degrees)!= V:\n        return 'IMPOSSIBLE'\n    degrees = sorted(degrees)\n    if degrees[0]!= 1:\n        return 'IMPOSSIBLE'\n    if degrees[-1]!= V:\n        return 'IMPOSSIBLE'\n    if degrees[0] == 1:\n        return 'POSSIBLE'\n    return 'POSSIBLE'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for i in range(4):\n        x, y, z = map(float, stdin.split())\n        points.append((x, y, z))\n    points.sort(key=lambda x: x[0] ** 2 + x[1] ** 2 + x[2] ** 2)\n    x_c, y_c, z_c = 0, 0, 0\n    for i in range(4):\n        x_c += points[i][0]\n        y_c += points[i][1]\n        z_c += points[i][2]\n    x_c /= 4\n    y_c /= 4\n    z_c /= 4\n    return str(x_c) +'' + str(y_c) +'' + str(z_c)\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    v = list(map(int, stdin.split()))\n    M = 0\n    while True:\n        v_new = []\n        for i in range(N):\n            if i == 0:\n                v_new.append(v[i])\n            else:\n                v_new.append(max(v[i], v[i-1]))\n        v = v_new\n        M += 1\n        if v.count(max(v)) == 1:\n            break\n    return str(M) + '\\n' +''.join(map(str, v)) + '\\n' + str(max(v))"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, e = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, l = map(int, stdin.split())\n        roads[a - 1].append((b - 1, l))\n        roads[b - 1].append((a - 1, l))\n    intersections = list(map(int, stdin.split()))\n    intersections.sort()\n    for i in range(e):\n        intersections.append(int(stdin.split()[i]))\n    intersections.sort()\n    intersections.append(n)\n    intersections.append(n + 1)\n    intersections.sort()\n    intersections.append(n + 2)\n    intersections.sort()\n    intersections.append(n + 3)\n    intersections.sort()\n    intersections.append(n + 4)\n    intersections.sort()\n    intersections.append(n + 5)\n    intersections.sort()\n    intersections.append(n + 6)\n    intersections.sort()\n    intersections.append(n + 7)\n    intersections.sort()\n    intersections.append(n + 8)\n    intersections.sort()\n    intersections.append(n + 9)\n    intersections.sort()\n    intersections.append(n + 10)\n    intersections.sort()\n    intersections.append(n + 11)\n    intersections.sort()\n    intersections.append(n + 12)\n    intersections.sort()\n    intersections.append(n + 13)\n    intersections.sort()\n    intersections.append(n + 14)\n    intersections.sort()\n    intersections.append(n + 15)\n    intersections.sort()\n    intersections.append(n + 16)\n    intersections.sort()\n    intersections.append(n + 17)\n    intersections.sort()\n    intersections.append(n + 18)\n    intersections.sort()\n    intersections.append(n + 19)\n    intersections.sort()\n    intersections.append(n + 20)\n    intersections.sort()\n    intersections.append(n + 21)\n    intersections.sort()\n    intersections.append(n + 22)\n    intersections.sort()\n    intersections.append(n + 23)\n    intersections.sort()\n    intersections.append(n + 24)\n    intersections.sort()\n    intersections.append(n + 25)\n    intersections.sort()\n    intersections.append(n + 26)\n    intersections.sort()\n    intersections.append(n + 27)\n    intersections.sort()\n    intersections.append(n + 28)\n    intersections.sort()\n    intersections.append(n + 29)\n    intersections.sort()\n    intersections.append(n + 30)\n    intersections.sort()\n    intersections.append(n + 31)\n    intersections.sort()\n    intersections.append(n + 32)\n    intersections.sort()\n    intersections.append(n + 33)\n    intersections.sort()\n    intersections.append(n + 34)\n    intersections.sort()\n    intersections.append(n + 35)\n    intersections.sort()\n    intersections.append(n + 36)\n    intersections.sort()\n    intersections.append(n + 37)\n    intersections.sort()\n    intersections.append(n + 38)\n    intersections.sort()\n    intersections.append(n + 39)\n    intersections.sort()\n    intersections.append(n + 40)\n    intersections.sort()\n    intersections.append(n + 41)\n    intersections.sort()\n    intersections.append(n + 42)\n    intersections.sort()\n    intersections.append(n + 43)\n    intersections.sort()\n    intersections.append(n + 44)\n    intersections.sort()\n    intersections.append(n + 45)\n    intersections.sort()\n    intersections.append(n + 46)\n    intersections.sort()\n    intersections.append(n + 47)\n    intersections.sort()\n    intersections.append(n + 48)\n    intersections.sort()\n    intersections.append(n + 49)\n    intersections.sort()\n    intersections.append(n + 50)\n    intersections.sort()\n    intersections.append(n + 51)\n    intersections.sort()\n    intersections.append(n + 52)\n    intersections.sort()\n    intersections.append(n + 53)\n    intersections.sort()\n    intersections.append(n + 54)\n    intersections.sort()\n    intersections.append(n + 55)\n    intersections.sort()\n    intersections.append(n + 56)\n    intersections.sort()\n    intersections.append(n + 57)\n    intersections.sort()\n    intersections.append(n + 58)\n    intersections.sort()\n    intersections.append(n + 59)\n    intersections.sort()\n    intersections.append(n + 60)\n    intersections."
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(e):\n        a, b = map(int, stdin.split())\n        roads[a - 1].append(b - 1)\n        roads[b - 1].append(a - 1)\n    for i in range(n):\n        if len(roads[i]) == 1:\n            return \"0\"\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i:\n            roads[i].remove(i)\n    for i in range(n):\n        if roads[i][0] == i"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, G = map(int, stdin.split())\n    skiers = []\n    for _ in range(N):\n        skiers.append(int(stdin.split()[_]))\n    skiers.sort()\n    gondolas = []\n    for _ in range(G):\n        gondolas.append(int(stdin.split()[_]))\n    gondolas.sort()\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas[:G]\n    gondolas = gondolas[::-1]\n    gondolas = gondolas["
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]\n    scores.sort(reverse=True)\n    scores = scores[:n-1]"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = [[c for c in stdin] for _ in range(R)]\n    explosions = 0\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'X':\n                explosions += 1\n                for nr, nc in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                    if 0 <= nr < R and 0 <= nc < C and grid[nr][nc] == 'L':\n                        grid[nr][nc] = '.'\n    return str(explosions)\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    groups = []\n    for i in range(n):\n        group = []\n        for j in range(n):\n            if i == j:\n                continue\n            group.append(j)\n        groups.append(group)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if groups[i][0] in groups[j]:\n                groups[i].append(j)\n    for i in range(n):\n        if len(groups[i]) < p + q:\n            return \"detention\"\n    groups = sorted(groups, key=lambda x: len(x))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x: len(set(x)))\n    groups = sorted(groups, key=lambda x:"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) % 2 == 0:\n        return -1\n    else:\n        s = list(s)\n        s = sorted(s)\n        s = ''.join(s)\n        return s"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    median = arr[n // 2]\n    count = 0\n    for i in range(n):\n        if arr[i] < median:\n            count += 1\n    return str(count)"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(min(N, 2 * (N // 2) + 1))\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = {i: [] for i in range(n)}\n    iou = {i: [] for i in range(n)}\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        friends[a].append(b)\n        iou[b].append(a)\n    cycles = []\n    for i in range(n):\n        if len(friends[i]) > 1:\n            cycles.append(i)\n    while len(cycles) > 0:\n        cycle = cycles.pop()\n        for i in friends[cycle]:\n            if i in iou[cycle]:\n                iou[cycle].remove(i)\n            if len(iou[cycle]) > 0:\n                cycles.append(cycle)\n                break\n        for i in friends[cycle]:\n            if i in iou[cycle]:\n                iou[cycle].remove(i)\n            if len(iou[cycle]) > 0:\n                cycles.append(cycle)\n                break\n    p = 0\n    for i in range(n):\n        if len(iou[i]) > 0:\n            p += 1\n            for j in iou[i]:\n                if j in iou[i]:\n                    iou[i].remove(j)\n    return str(p)"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    mansions = list(map(int, stdin.split()))\n    mansions.sort()\n    fibonacci = [1, 1]\n    for i in range(2, n + 1):\n        fibonacci.append(fibonacci[i - 1] + fibonacci[i - 2])\n    max_length = 0\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        if a > b:\n            a, b = b, a\n        length = fibonacci[b] - fibonacci[a - 1]\n        if length > max_length:\n            max_length = length\n    return str(max_length)"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = []\n    for i in range(2, n):\n        if n % i == 0:\n            primes.append(i)\n    primes.sort()\n    if len(primes) == 0:\n        return str(n)\n    else:\n        return str(primes[0] * primes[-1])"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rows = []\n    for i in range(n):\n        rows.append(stdin[i*m:(i+1)*m])\n    # print(rows)\n    # print(rows[0])\n    # print(rows[1])\n    # print(rows[2])\n    # print(rows[3])\n    # print(rows[4])\n    # print(rows[5])\n    # print(rows[6])\n    # print(rows[7])\n    # print(rows[8])\n    # print(rows[9])\n    # print(rows[10])\n    # print(rows[11])\n    # print(rows[12])\n    # print(rows[13])\n    # print(rows[14])\n    # print(rows[15])\n    # print(rows[16])\n    # print(rows[17])\n    # print(rows[18])\n    # print(rows[19])\n    # print(rows[20])\n    # print(rows[21])\n    # print(rows[22])\n    # print(rows[23])\n    # print(rows[24])\n    # print(rows[25])\n    # print(rows[26])\n    # print(rows[27])\n    # print(rows[28])\n    # print(rows[29])\n    # print(rows[30])\n    # print(rows[31])\n    # print(rows[32])\n    # print(rows[33])\n    # print(rows[34])\n    # print(rows[35])\n    # print(rows[36])\n    # print(rows[37])\n    # print(rows[38])\n    # print(rows[39])\n    # print(rows[40])\n    # print(rows[41])\n    # print(rows[42])\n    # print(rows[43])\n    # print(rows[44])\n    # print(rows[45])\n    # print(rows[46])\n    # print(rows[47])\n    # print(rows[48])\n    # print(rows[49])\n    # print(rows[50])\n    # print(rows[51])\n    # print(rows[52])\n    # print(rows[53])\n    # print(rows[54])\n    # print(rows[55])\n    # print(rows[56])\n    # print(rows[57])\n    # print(rows[58])\n    # print(rows[59])\n    # print(rows[60])\n    # print(rows[61])\n    # print(rows[62])\n    # print(rows[63])\n    # print(rows[64])\n    # print(rows[65])\n    # print(rows[66])\n    # print(rows[67])\n    # print(rows[68])\n    # print(rows[69])\n    # print(rows[70])\n    # print(rows[71])\n    # print(rows[72])\n    # print(rows[73])\n    # print(rows[74])\n    # print(rows[75])\n    # print(rows[76])\n    # print(rows[77])\n    # print(rows[78])\n    # print(rows[79])\n    # print(rows[80])\n    # print(rows[81])\n    # print(rows[82])\n    # print(rows[83])\n    # print(rows[84])\n    # print(rows[85])\n    # print(rows[86])\n    # print(rows[87])\n    # print(rows[88])\n    # print(rows[89])\n    # print(rows[90])\n    # print(rows[91])\n    # print(rows[92])\n    # print(rows[93])\n    # print(rows[94])\n    # print(rows[95])\n    # print(rows[96])\n    # print(rows[97])\n    # print(rows[98])\n    # print(rows[99])\n    # print(rows[100])\n    # print(rows[101])\n    # print(rows[102])\n    # print(rows[103])\n    # print(rows[104])\n    # print(rows[105])\n    # print(rows[106])\n    # print(rows[107])\n    # print(rows[108])\n    # print(rows[109])\n    # print(rows[110])\n    # print(rows[111])\n    # print(rows[112])\n    # print(rows[113])\n    # print(rows[114])\n    # print(rows[115])\n    # print(rows[116])\n    # print(rows[117])\n    # print(rows[118])\n    # print(rows[119])\n    # print(rows[120])\n    # print(rows[121])\n    # print(rows[122])\n    # print(rows[123])\n    # print(rows[124])\n    # print(rows[125])\n    # print(rows[126])\n    # print(rows[127])\n    # print(rows[128])\n    # print(rows[129])\n    # print(rows[130])\n    # print(rows[131])\n    # print(rows[132])\n    # print(rows[133])\n    # print(rows[134])\n    # print(rows[135])\n    # print(rows[136])\n    # print(rows[137])\n    # print(rows[138"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(float, stdin.split())\n    return '{:.6f}'.format(N * P)\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, v = map(int, stdin.split())\n    p = [float(x) for x in stdin.split()]\n    b = []\n    for i in range(v - 1):\n        b.append(int(stdin.split()[i + 1]))\n    b.append(int(stdin.split()[v - 1]))\n    return str(max(b, key=lambda x: (sum([pow(2, k - i - 1) * x for i in range(k)]), x)))\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    if A[-1] == 0:\n        return '-1'\n    if A[0] > B[0]:\n        return '-1'\n    if A[0] == 0:\n        return '0'\n    if A[-1] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        return '0'\n    if A[0] == 0:\n        "
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(float, stdin.split())\n    return str(int(N * (1 - P)))"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    sockets = list(map(int, stdin.split()))\n    connections = []\n    for i in range(m):\n        connections.append((sockets[i * 2], sockets[i * 2 + 1]))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) in connections or (j, i) in connections:\n                continue\n            for k in range(n):\n                if k == i or k == j:\n                    continue\n                if (i, k) in connections or (k, i) in connections:\n                    continue\n                if (j, k) in connections or (k, j) in connections:\n                    continue\n                if (i, j) in connections or (j, i) in connections:\n                    continue\n                if (i, k) in connections or (k, i) in connections:\n                    continue\n                if (j, k) in connections or (k, j) in connections:\n                    continue\n                return \"yes\"\n    return \"no\""
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ring = list(map(int, stdin.split()))\n    ring.sort()\n    for i in range(n):\n        ring[i] += ring[i - 1]\n    return''.join(map(str, ring))\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    history = []\n    for line in stdin.splitlines():\n        if line.startswith('^'):\n            history.append(line)\n        else:\n            history.pop()\n            history.append(line)\n    return '\\n'.join(history)"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    words = sorted(words)\n    words =''.join(words)\n    return words"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(count_arrangements(n, m))\n\ndef"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    street = stdin.strip()\n    m = int(stdin)\n    patterns = stdin.strip().split()\n    patterns = list(map(lambda x: x.strip(), patterns))\n    patterns = list(map(lambda x: x.split(' '), patterns))\n    patterns = list(map(lambda x: list(x), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map(lambda x: list(map(lambda y: y.strip(), x)), patterns))\n    patterns = list(map("
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C = int(stdin)\n    N = int(stdin)\n    vertices = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        vertices.append((x, y))\n    vertices.sort(key=lambda x: x[0])\n    vertices.sort(key=lambda x: x[1])\n    max_area = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            area = abs(vertices[i][0] - vertices[j][0]) * abs(vertices[i][1] - vertices[j][1])\n            if area > max_area:\n                max_area = area\n    return str(max_area)"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d = map(int, stdin.split())\n    if d == 1:\n        return \"yes\"\n    for i in range(2, b):\n        if b % i == 0 and d % i == 0:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    intervals = []\n    for i in range(n):\n        intervals.append(tuple(map(int, stdin.split())))\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    longest = 1\n    for i in range(1, n):\n        if intervals[i][0] >= intervals[i - 1][1] + 1:\n            longest = max(longest, intervals[i][1] - intervals[i - 1][0] + 1)\n    return str(longest)\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = []\n    for _ in range(n):\n        cards.append(tuple(map(int, stdin.split())))\n    cards.sort(key=lambda x: x[0] * x[1])\n    waste = 0\n    for card in cards:\n        waste += (card[0] * card[1]) - min(card[0] * card[1], card[1] * card[0])\n    return waste"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    states = stdin.split()\n    states = list(map(int, states))\n    states.sort()\n    states = list(map(str, states))\n    states =''.join(states)\n    return states"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P = float(stdin)\n    ones = 0\n    twos = 0\n    threes = 0\n    fours = 0\n    fives = 0\n    while True:\n        if P == 0:\n            break\n        if P >= 1:\n            ones += 1\n            P -= 1\n        if P >= 2:\n            twos += 1\n            P -= 2\n        if P >= 3:\n            threes += 1\n            P -= 3\n        if P >= 4:\n            fours += 1\n            P -= 4\n        if P >= 5:\n            fives += 1\n            P -= 5\n    return str(ones) + \" \" + str(twos) + \" \" + str(threes) + \" \" + str(fours) + \" \" + str(fives)"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    visited = set()\n    visited.add(0)\n    max_len = 0\n    for i in range(1, n):\n        if i - d < 0:\n            continue\n        if arr[i] - arr[i - d] <= m:\n            visited.add(i)\n            visited.add(i - d)\n            max_len = max(max_len, len(visited))\n    return str(max_len)"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    return str(max(A[i] & A[i + 1] for i in range(N - 1)))\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(float, stdin.split())\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    return (a * b * c) ** 0.5\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = float(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(stdin.split()[i*2]))\n        y.append(int(stdin.split()[i*2+1]))\n    x.sort()\n    y.sort()\n    x.reverse()\n    y.reverse()\n    for i in range(n):\n        if x[i] == y[i]:\n            return str(x[i])\n    for i in range(n):\n        if x[i] > y[i]:\n            return str(x[i])\n    for i in range(n):\n        if x[i] < y[i]:\n            return str(y[i])\n    for i in range(n):\n        if x[i] == y[i]:\n            return str(x[i])\n    return str(x[0])"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    boxes = [0] * N\n    for _ in range(Q):\n        line = stdin.split()\n        if line[0] == '1':\n            L, R, A, B = map(int, line[1:])\n            for i in range(L, R + 1):\n                boxes[i] = (boxes[i] + A) % B\n        elif line[0] == '2':\n            L, R = map(int, line[1:])\n            print(sum(boxes[L:R + 1]))\n    return ''"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    return str(count_permutations(n, k, p))\n\ndef"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    K = int(stdin)\n    return str(K * (R * C - K))"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    junctions = list(map(int, stdin.split()))\n    clients = list(map(int, stdin.split()))\n    clients.sort()\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[0])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda x: x[1])\n    clients = [(i, clients[i]) for i in range(len(clients))]\n    clients = sorted(clients, key=lambda"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P = list(map(int, stdin.split()))\n    R = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    C.sort()\n    P.sort()\n    R.sort()\n    C = set(C)\n    P = set(P)\n    R = set(R)\n    P = list(P)\n    R = list(R)\n    P.sort()\n    R.sort()\n    P.sort(key=lambda x: x[0])\n    R.sort(key=lambda x: x[0])\n    P.sort(key=lambda x: x[1])\n    R.sort(key=lambda x: x[1])\n    P.sort(key=lambda x: x[2])\n    R.sort(key=lambda x: x[2])\n    P.sort(key=lambda x: x[3])\n    R.sort(key=lambda x: x[3])\n    P.sort(key=lambda x: x[4])\n    R.sort(key=lambda x: x[4])\n    P.sort(key=lambda x: x[5])\n    R.sort(key=lambda x: x[5])\n    P.sort(key=lambda x: x[6])\n    R.sort(key=lambda x: x[6])\n    P.sort(key=lambda x: x[7])\n    R.sort(key=lambda x: x[7])\n    P.sort(key=lambda x: x[8])\n    R.sort(key=lambda x: x[8])\n    P.sort(key=lambda x: x[9])\n    R.sort(key=lambda x: x[9])\n    P.sort(key=lambda x: x[10])\n    R.sort(key=lambda x: x[10])\n    P.sort(key=lambda x: x[11])\n    R.sort(key=lambda x: x[11])\n    P.sort(key=lambda x: x[12])\n    R.sort(key=lambda x: x[12])\n    P.sort(key=lambda x: x[13])\n    R.sort(key=lambda x: x[13])\n    P.sort(key=lambda x: x[14])\n    R.sort(key=lambda x: x[14])\n    P.sort(key=lambda x: x[15])\n    R.sort(key=lambda x: x[15])\n    P.sort(key=lambda x: x[16])\n    R.sort(key=lambda x: x[16])\n    P.sort(key=lambda x: x[17])\n    R.sort(key=lambda x: x[17])\n    P.sort(key=lambda x: x[18])\n    R.sort(key=lambda x: x[18])\n    P.sort(key=lambda x: x[19])\n    R.sort(key=lambda x: x[19])\n    P.sort(key=lambda x: x[20])\n    R.sort(key=lambda x: x[20])\n    P.sort(key=lambda x: x[21])\n    R.sort(key=lambda x: x[21])\n    P.sort(key=lambda x: x[22])\n    R.sort(key=lambda x: x[22])\n    P.sort(key=lambda x: x[23])\n    R.sort(key=lambda x: x[23])\n    P.sort(key=lambda x: x[24])\n    R.sort(key=lambda x: x[24])\n    P.sort(key=lambda x: x[25])\n    R.sort(key=lambda x: x[25])\n    P.sort(key=lambda x: x[26])\n    R.sort(key=lambda x: x[26])\n    P.sort(key=lambda x: x[27])\n    R.sort(key=lambda x: x[27])\n    P.sort(key=lambda x: x[28])\n    R.sort(key=lambda x: x[28])\n    P.sort(key=lambda x: x[29])\n    R.sort(key=lambda x: x[29])\n    P.sort(key=lambda x: x[30])\n    R.sort(key=lambda x: x[30])\n    P.sort(key=lambda x: x[31])\n    R.sort(key=lambda x: x[31])\n    P.sort(key=lambda x: x[32])\n    R.sort(key=lambda x: x[32])\n    P"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"1\"\n    if N == 3:\n        return \"5\"\n    if N == 4:\n        return \"10\"\n    if N == 5:\n        return \"15\"\n    if N == 6:\n        return \"21\"\n    if N == 7:\n        return \"28\"\n    if N == 8:\n        return \"36\"\n    if N == 9:\n        return \"45\"\n    if N == 10:\n        return \"55\"\n    if N == 11:\n        return \"66\"\n    if N == 12:\n        return \"77\"\n    if N == 13:\n        return \"88\"\n    if N == 14:\n        return \"99\"\n    if N == 15:\n        return \"110\"\n    if N == 16:\n        return \"121\"\n    if N == 17:\n        return \"122\"\n    if N == 18:\n        return \"123\"\n    if N == 19:\n        return \"124\"\n    if N == 20:\n        return \"125\"\n    if N == 21:\n        return \"126\"\n    if N == 22:\n        return \"127\"\n    if N == 23:\n        return \"128\"\n    if N == 24:\n        return \"129\"\n    if N == 25:\n        return \"130\"\n    if N == 26:\n        return \"131\"\n    if N == 27:\n        return \"132\"\n    if N == 28:\n        return \"133\"\n    if N == 29:\n        return \"134\"\n    if N == 30:\n        return \"135\"\n    if N == 31:\n        return \"136\"\n    if N == 32:\n        return \"137\"\n    if N == 33:\n        return \"138\"\n    if N == 34:\n        return \"139\"\n    if N == 35:\n        return \"140\"\n    if N == 36:\n        return \"141\"\n    if N == 37:\n        return \"142\"\n    if N == 38:\n        return \"143\"\n    if N == 39:\n        return \"144\"\n    if N == 40:\n        return \"145\"\n    if N == 41:\n        return \"146\"\n    if N == 42:\n        return \"147\"\n    if N == 43:\n        return \"148\"\n    if N == 44:\n        return \"149\"\n    if N == 45:\n        return \"150\"\n    if N == 46:\n        return \"151\"\n    if N == 47:\n        return \"152\"\n    if N == 48:\n        return \"153\"\n    if N == 49:\n        return \"154\"\n    if N == 50:\n        return \"155\"\n    if N == 51:\n        return \"156\"\n    if N == 52:\n        return \"157\"\n    if N == 53:\n        return \"158\"\n    if N == 54:\n        return \"159\"\n    if N == 55:\n        return \"160\"\n    if N == 56:\n        return \"161\"\n    if N == 57:\n        return \"162\"\n    if N == 58:\n        return \"163\"\n    if N == 59:\n        return \"164\"\n    if N == 60:\n        return \"165\"\n    if N == 61:\n        return \"166\"\n    if N == 62:\n        return \"167\"\n    if N == 63:\n        return \"168\"\n    if N == 64:\n        return \"169\"\n    if N == 65:\n        return \"170\"\n    if N == 66:\n        return \"171\"\n    if N == 67:\n        return \"172\"\n    if N == 68:\n        return \"173\"\n    if N == 69:\n        return \"174\"\n    if N == 70:\n        return \"175\"\n    if N == 71:\n        return \"176\"\n    if N == 72:\n        return \"177\"\n    if N == 73:\n        return \"178\"\n    if N == 74:\n        return \"179\"\n    if N == 75:\n        return \"180\"\n    if N == 76:\n        return \"181\"\n    if N == 77:\n        return \"182\"\n    if N == 78:\n        return \"183\"\n    if N == 79:\n        return \"184\"\n    if N == 80:\n        return \"185\"\n    if N == 81:\n        return \"186\"\n    if N == 82:\n        return \"187\"\n    if N == 83:\n        return \"188\"\n    if N == 84:\n        return \"189\"\n    if N == 85:\n        return \"190\"\n    if N == 86:\n        return \"191\"\n    if N == 87:\n        return \"192\"\n    if N == 88:\n        return \"193\"\n    if N == 89:\n        return \"194\"\n    if N == 90:\n        return \"195\"\n    if N == 91:\n        return \"196\"\n    if N == 92:\n        return \"197\"\n    if N == 93:\n        return \"198\"\n    if N == 94:\n        return \"199\"\n    if N == 95:\n        return \"200\"\n    if N == 96:\n        return \"201\"\n    if N == 97:\n        return \"202\"\n    if N == 98:\n        return \"203\"\n    if N == 99:\n        return \"204\"\n    if N == 100:\n        return \"205\"\n    if N == 101:\n        return \"206\"\n    if N == 102:\n        return \"207\"\n    if N == 103:\n        return \"208\"\n    if N == 104:\n        return \"209\"\n    if N == 105:\n        return \"210\"\n    if N == 106:\n        return \"211\"\n    if N == 107:\n        return \"212\"\n    if N == 108:\n        return \"213\"\n    if N == 109:\n        return \"214\"\n    if N == 110:\n        return \"215\"\n    if N == 111:\n        return \"216\"\n    if N == 112:\n        return \"217\"\n    if N == 113:\n        return \"218\"\n    if N == 114:\n        return \"219\"\n    if N == 115:\n        return \"220\"\n    if N == 116:\n        return \"221\"\n    if N == 117:\n        return \"222\"\n    if N == 118:\n        return \"223\"\n    if N == 119:\n        return \"224\"\n    if N == 120:\n        return \"225\"\n    if N == 121:\n        return \"226\"\n    if N == 122:\n        return \"227\"\n    if N == 123:\n        return \"228\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    connections = [[] for _ in range(N)]\n    for i in range(N):\n        for j in range(i + 1, N):\n            connections[i].append(j)\n            connections[j].append(i)\n    for i in range(N):\n        connections[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if connections[i][-1] == j:\n                connections[i].pop()\n                break\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N):\n        if len(connections[i]) < L:\n            return -1\n    for i in range(N"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, c = map(int, stdin.split())\n        graph[u].append((v, c))\n    flow = 0\n    while True:\n        flow_graph = [[] for _ in range(n)]\n        for u, v, c in graph:\n            if not flow_graph[u]:\n                flow_graph[u] = [(v, c)]\n            else:\n                flow_graph[u].append((v, c))\n        flow_graph = [[v, c] for u, v, c in flow_graph]\n        flow_graph.sort(key=lambda x: x[1], reverse=True)\n        flow_graph = [[v, c] for v, c in flow_graph]\n        flow_graph.sort(key=lambda x: x[0])\n        flow_graph = [[v, c] for v, c in flow_graph]\n        flow_graph = [[v, c] for v, c in flow_graph if v!= t]\n        if not flow_graph:\n            break\n        flow += 1\n        flow_graph = [[v, c] for v, c in flow_graph]\n        flow_graph.sort(key=lambda x: x[1], reverse=True)\n        flow_graph = [[v, c] for v, c in flow_graph]\n        flow_graph.sort(key=lambda x: x[0])\n        flow_graph = [[v, c] for v, c in flow_graph]\n        flow_graph = [[v, c] for v, c in flow_graph if v!= s]\n        for v, c in flow_graph:\n            for u, c in graph[v]:\n                if c <= c:\n                    graph[u][0] = (v, c)\n                    graph[v][0] = (u, c)\n                    break\n    return str(n) + \" \" + str(flow) + \" \" + str(flow_graph)\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    board = [['.'] * C for _ in range(R)]\n    mirko_king = 0\n    slavko_king = 0\n    for i in range(R):\n        for j in range(C):\n            if stdin[i * C + j] == 'M':\n                mirko_king = i\n                board[i][j] = 'M'\n            elif stdin[i * C + j] == 'S':\n                slavko_king = i\n                board[i][j] = 'S'\n    mirko_spread = 0\n    slavko_spread = 0\n    for i in range(R):\n        for j in range(C):\n            if board[i][j] == 'M':\n                mirko_spread += abs(i - mirko_king) + abs(j - j)\n            elif board[i][j] == 'S':\n                slavko_spread += abs(i - slavko_king) + abs(j - j)\n    return str(mirko_spread) +'' + str(slavko_spread)\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    birds = []\n    for i in range(n):\n        if stdin[i] == 'B':\n            birds.append(i)\n    branches = []\n    for i in range(n):\n        if stdin[i] == 'S':\n            branches.append(i)\n    birds_to_change = []\n    for i in range(len(birds)):\n        for j in range(len(branches)):\n            if birds[i] == branches[j]:\n                birds_to_change.append(i)\n    if len(birds_to_change) == 0:\n        return str(len(birds))\n    else:\n        birds_to_change.sort()\n        birds_to_change.reverse()\n        for i in range(len"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(sum(abs(int(x) - int(y)) for x, y in zip(str(A), str(B))))"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dictionary = stdin.split()\n    start = dictionary[0]\n    end = dictionary[1]\n    if start not in dictionary or end not in dictionary:\n        return 0\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        return 0\n    if start == end:\n        return -1\n    if start == end:\n        "
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    return str(C - (N - 1) * (C - 1) // 2)"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floorplan = stdin.splitlines()\n    gargoyles = []\n    for i in range(n):\n        for j in range(m):\n            if floorplan[i][j] == '.':\n                gargoyles.append((i, j))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    gargoyles = list(set(gargoyles))\n    gargoyles.sort(key=lambda x: (x[0], x[1]))\n    garg"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    fragments = stdin.split()\n    if len(fragments) == 1:\n        return \"AMBIGUOUS\"\n    for i in range(len(fragments)):\n        if len(fragments[i]) > 80:\n            continue\n        for j in range(i + 1, len(fragments)):\n            if len(fragments[j]) > 80:\n                continue\n            if fragments[i] == fragments[j][:5]:\n                return \"AMBIGUOUS\"\n    return \" \".join(fragments)"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ships = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        ships.append((x, y))\n    \n    # check if there is a solution\n    if n == 1:\n        return \"impossible\"\n    \n    # check if there is a solution\n    if n == 2:\n        if abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 1:\n            return \"0+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 0:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 0 and abs(ships[0][1] - ships[1][1]) == 1:\n            return \"--+-\"\n        else:\n            return \"impossible\"\n    \n    # check if there is a solution\n    if n == 3:\n        if abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"0+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 0:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 0 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 0 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 0 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 0 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 0:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 0:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 0 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 0 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 0:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 0 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 0 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 0 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 0:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 0 and abs(ships[0][1] - ships[1][1]) == 1 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 1 and abs(ships[0][1] - ships[1][1]) == 0 and abs(ships[0][2] - ships[1][2]) == 1:\n            return \"--+-\"\n        elif abs(ships[0][0] - ships[1][0]) == 0 and abs(ships[0][1] - ships[1]["
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C, Q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    e = list(map(int, stdin.split()))\n    f = list(map(int, stdin.split()))\n    g = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    i = list(map(int, stdin.split()))\n    j = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    m = list(map(int, stdin.split()))\n    n = list(map(int, stdin.split()))\n    o = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    r = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    u = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    z = list(map(int, stdin.split()))\n    aa = list(map(int, stdin.split()))\n    bb = list(map(int, stdin.split()))\n    cc = list(map(int, stdin.split()))\n    dd = list(map(int, stdin.split()))\n    ee = list(map(int, stdin.split()))\n    ff = list(map(int, stdin.split()))\n    gg = list(map(int, stdin.split()))\n    hh = list(map(int, stdin.split()))\n    ii = list(map(int, stdin.split()))\n    jj = list(map(int, stdin.split()))\n    kk = list(map(int, stdin.split()))\n    ll = list(map(int, stdin.split()))\n    mm = list(map(int, stdin.split()))\n    nn = list(map(int, stdin.split()))\n    oo = list(map(int, stdin.split()))\n    pp = list(map(int, stdin.split()))\n    qq = list(map(int, stdin.split()))\n    rr = list(map(int, stdin.split()))\n    ss = list(map(int, stdin.split()))\n    tt = list(map(int, stdin.split()))\n    uu = list(map(int, stdin.split()))\n    vv = list(map(int, stdin.split()))\n    ww = list(map(int, stdin.split()))\n    xx = list(map(int, stdin.split()))\n    yy = list(map(int, stdin.split()))\n    zz = list(map(int, stdin.split()))\n    aaa = list(map(int, stdin.split()))\n    bbb = list(map(int, stdin.split()))\n    ccc = list(map(int, stdin.split()))\n    ddd = list(map(int, stdin.split()))\n    eee = list(map(int, stdin.split()))\n    fff = list(map(int, stdin.split()))\n    ggg = list(map(int, stdin.split()))\n    hhh = list(map(int, stdin.split()))\n    iii = list(map(int, stdin.split()))\n    jjj = list(map(int, stdin.split()))\n    kkk = list(map(int, stdin.split()))\n    lll = list(map(int, stdin.split()))\n    mmm = list(map(int, stdin.split()))\n    nnn = list(map(int, stdin.split()))\n    ooo = list(map(int, stdin.split()))\n    ppp = list(map(int, stdin.split()))\n    qqq = list(map(int, stdin.split()))\n    rrr = list(map(int, stdin.split()))\n    sss = list(map(int, stdin.split()))\n    ttt = list(map(int, stdin.split()))\n    uuu = list(map(int, stdin.split()))\n    vvv = list(map(int, stdin.split()))\n    www = list(map(int, stdin.split()))\n    xxx = list(map(int, stdin.split()))\n    yyy = list(map(int, stdin.split()))\n    zzz = list(map(int, stdin.split()))\n    aaaa = list(map(int, stdin.split()))\n    bbbb = list(map(int, stdin.split()))\n    cccc = list(map(int, stdin.split()))\n    dddd = list(map(int, stdin.split()))\n    eeee = list(map(int, stdin.split()))\n    ffff = list(map(int, stdin.split()))\n    gggg = list(map(int, stdin.split()))\n    hhhh = list(map(int, stdin.split()))\n    iiii = list(map(int, stdin.split()))\n    jjjj = list(map(int, stdin.split()))\n    kkkk = list(map(int, stdin.split()))\n    llll = list"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    board = [['W' for _ in range(M)] for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if i == 0 or j == 0 or i == N - 1 or j == M - 1:\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, S = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    count = 0\n    for i in range(N):\n        if A[i] == S:\n            count += 1\n        else:\n            A[i] = S\n            count += 1\n    return str(count)"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    frogs = []\n    for i in range(n):\n        frogs.append([int(x) for x in stdin.split()])\n    frogs.sort(key=lambda x: x[0])\n    frogs.sort(key=lambda x: x[1], reverse=True)\n    return str(frogs[0][0]) + \" \" + str(frogs[0][1])"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        row = stdin.split()\n        for j in range(len(row)):\n            if row[j] == \"0\":\n                continue\n            grid[i + 1][j + 1] = 1\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if grid[i][j] == 1:\n                if i == 1 or j == 1:\n                    print(\"1\", end=\"\")\n                else:\n                    print(\"0\", end=\"\")\n            else:\n                print(\"0\", end=\"\")\n        print()\n    return \"\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(n // k, 1))"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    J, R, D = map(int, stdin.split())\n    junctions = {}\n    for i in range(1, J + 1):\n        x, y = map(int, stdin.split())\n        junctions[i] = (x, y)\n    roads = {}\n    for i in range(1, J + 1):\n        for j in range(1, J + 1):\n            if i!= j:\n                roads[(i, j)] = (abs(junctions[i][0] - junctions[j][0]) + abs(junctions[i][1] - junctions[j][1]))\n    roads = sorted(roads.items(), key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0][0])\n    roads = sorted(roads, key=lambda x: x[0][1])"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P = int(stdin)\n    if P < 1 or P > 10**18:\n        raise ValueError\n    if P == 1:\n        return \"1\"\n    if P == 2:\n        return \"2\"\n    if P == 3:\n        return \"3\"\n    if P == 4:\n        return \"4\"\n    if P == 5:\n        return \"5\"\n    if P == 6:\n        return \"6\"\n    if P == 7:\n        return \"7\"\n    if P == 8:\n        return \"8\"\n    if P == 9:\n        return \"9\"\n    if P == 10:\n        return \"10\"\n    if P == 11:\n        return \"11\"\n    if P == 12:\n        return \"12\"\n    if P == 13:\n        return \"13\"\n    if P == 14:\n        return \"14\"\n    if P == 15:\n        return \"15\"\n    if P == 16:\n        return \"16\"\n    if P == 17:\n        return \"17\"\n    if P == 18:\n        return \"18\"\n    if P == 19:\n        return \"19\"\n    if P == 20:\n        return \"20\"\n    if P == 21:\n        return \"21\"\n    if P == 22:\n        return \"22\"\n    if P == 23:\n        return \"23\"\n    if P == 24:\n        return \"24\"\n    if P == 25:\n        return \"25\"\n    if P == 26:\n        return \"26\"\n    if P == 27:\n        return \"27\"\n    if P == 28:\n        return \"28\"\n    if P == 29:\n        return \"29\"\n    if P == 30:\n        return \"30\"\n    if P == 31:\n        return \"31\"\n    if P == 32:\n        return \"32\"\n    if P == 33:\n        return \"33\"\n    if P == 34:\n        return \"34\"\n    if P == 35:\n        return \"35\"\n    if P == 36:\n        return \"36\"\n    if P == 37:\n        return \"37\"\n    if P == 38:\n        return \"38\"\n    if P == 39:\n        return \"39\"\n    if P == 40:\n        return \"40\"\n    if P == 41:\n        return \"41\"\n    if P == 42:\n        return \"42\"\n    if P == 43:\n        return \"43\"\n    if P == 44:\n        return \"44\"\n    if P == 45:\n        return \"45\"\n    if P == 46:\n        return \"46\"\n    if P == 47:\n        return \"47\"\n    if P == 48:\n        return \"48\"\n    if P == 49:\n        return \"49\"\n    if P == 50:\n        return \"50\"\n    if P == 51:\n        return \"51\"\n    if P == 52:\n        return \"52\"\n    if P == 53:\n        return \"53\"\n    if P == 54:\n        return \"54\"\n    if P == 55:\n        return \"55\"\n    if P == 56:\n        return \"56\"\n    if P == 57:\n        return \"57\"\n    if P == 58:\n        return \"58\"\n    if P == 59:\n        return \"59\"\n    if P == 60:\n        return \"60\"\n    if P == 61:\n        return \"61\"\n    if P == 62:\n        return \"62\"\n    if P == 63:\n        return \"63\"\n    if P == 64:\n        return \"64\"\n    if P == 65:\n        return \"65\"\n    if P == 66:\n        return \"66\"\n    if P == 67:\n        return \"67\"\n    if P == 68:\n        return \"68\"\n    if P == 69:\n        return \"69\"\n    if P == 70:\n        return \"70\"\n    if P == 71:\n        return \"71\"\n    if P == 72:\n        return \"72\"\n    if P == 73:\n        return \"73\"\n    if P == 74:\n        return \"74\"\n    if P == 75:\n        return \"75\"\n    if P == 76:\n        return \"76\"\n    if P == 77:\n        return \"77\"\n    if P == 78:\n        return \"78\"\n    if P == 79:\n        return \"79\"\n    if P == 80:\n        return \"80\"\n    if P == 81:\n        return \"81\"\n    if P == 82:\n        return \"82\"\n    if P == 83:\n        return \"83\"\n    if P == 84:\n        return \"84\"\n    if P == 85:\n        return \"85\"\n    if P == 86:\n        return \"86\"\n    if P == 87:\n        return \"87\"\n    if P == 88:\n        return \"88\"\n    if P == 89:\n        return \"89\"\n    if P == 90:\n        return \"90\"\n    if P == 91:\n        return \"91\"\n    if P == 92:\n        return \"92\"\n    if P == 93:\n        return \"93\"\n    if P == 94:\n        return \"94\"\n    if P == 95:\n        return \"95\"\n    if P == 96:\n        return \"96\"\n    if P == 97:\n        return \"97\"\n    if P == 98:\n        return \"98\"\n    if P == 99:\n        return \"99\"\n    if P == 100:\n        return \"100\"\n    if P == 101:\n        return \"101\"\n    if P == 102:\n        return \"102\"\n    if P == 103:\n        return \"103\"\n    if P == 104:\n        return \"104\"\n    if P == 105:\n        return \"105\"\n    if P == 106:\n        return \"106\"\n    if P == 107:\n        return \"107\"\n    if P == 108:\n        return \"108\"\n    if P == 109:\n        return \"109\"\n    if P == 110:\n        return \"110\"\n    if P == 111:\n        return \"111\"\n    if P == 112:\n        return \"112\"\n    if P == 113:\n        return \"113\"\n    if P == 114:\n        return \"114\"\n    if P == 115:\n        return \"115\"\n    if P == 116:\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, r = map(int, stdin.split())\n    return str(round(n * (n - 1) / 2 + d * (d - 1) / 2 + r * (r - 1) / 2, 6))"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if x!= y and gcd(x, y) == 1:\n                count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, m = map(int, stdin.split())\n    n = 1\n    while True:\n        if A[n] == m:\n            return str(n)\n        elif A[n] > m:\n            return str(n - 1)\n        n += 1"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for i in range(1000000) if is_valid(i, stdin)))\n\ndef"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    coins = list(map(int, stdin.split()))\n    coins.sort()\n    coins.reverse()\n    total = 0\n    for i in range(k):\n        total += coins[i]\n    return str(total)"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    if k == 2:\n        return sorted(list(set(sorted(stdin))))[n - 1]\n    elif k == 3:\n        return sorted(list(set(sorted(stdin))))[n - 1]\n    else:\n        return -1"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    b = []\n    c = []\n    for i in range(n):\n        a.append(int(stdin.split()[i*3]))\n        b.append(int(stdin.split()[i*3+1]))\n        c.append(int(stdin.split()[i*3+2]))\n    a.sort()\n    b.sort()\n    c.sort()\n    s = 0\n    t = 0\n    for i in range(n):\n        s += a[i]\n        t += b[i]\n        if c[i] == 1:\n            s += 1\n            t += 1\n    return str(s*t)\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, E, D = map(int, stdin.split())\n    exploding_kittens = list(map(int, stdin.split()))\n    defuses = list(map(int, stdin.split()))\n    defuse_count = 0\n    exploding_kitten_count = 0\n    for i in range(N):\n        if exploding_kitten_count == 5:\n            break\n        if defuse_count == 5:\n            break\n        if defuses[defuse_count] == 1:\n            defuse_count += 1\n        elif defuses[defuse_count] == 2:\n            defuse_count += 1\n            defuses[defuse_count] = 0\n        else:\n            exploding_kitten_count += 1\n            defuse_count += 1\n    if exploding_kitten_count == 5:\n        return '0'\n    else:\n        return str(i)"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return str(solution_helper(a, b, c, d))\n\ndef"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = stdin.split()\n    names.sort()\n    count = 0\n    for i in range(n-1):\n        if names[i][0] == names[i+1][0]:\n            if names[i][1] == names[i+1][1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = []\n    p = []\n    m = []\n    s = []\n    for i in range(n):\n        f.append(int(stdin.split()[i*2]))\n        p.append(int(stdin.split()[i*2+1]))\n        m.append(int(stdin.split()[i*2+2]))\n        s.append(int(stdin.split()[i*2+3]))\n    f.sort()\n    p.sort()\n    m.sort()\n    s.sort()\n    f.reverse()\n    p.reverse()\n    m.reverse()\n    s.reverse()\n    f_max = f[0]\n    p_max = p[0]\n    m_max = m[0]\n    s_max = s[0]\n    for i in range(1, n):\n        if f[i] == f_max:\n            if p[i] > p_max:\n                p_max = p[i]\n            if m[i] > m_max:\n                m_max = m[i]\n            if s[i] > s_max:\n                s_max = s[i]\n        else:\n            f_max = f[i]\n            p_max = p[i]\n            m_max = m[i]\n            s_max = s[i]\n    return str(p_max - m_max)"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    contours = []\n    for i in range(N):\n        contours.append(list(map(int, stdin.split())))\n    contours.sort(key=lambda x: x[0])\n    min_dist = float('inf')\n    for i in range(N):\n        if contours[i][0] == 0:\n            continue\n        if contours[i][0] == contours[i-1][0]:\n            continue\n        dist = abs(contours[i][0] - contours[i-1][0])\n        if dist < min_dist:\n            min_dist = dist\n    return str(min_dist)"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Q = int(stdin)\n    for i in range(Q):\n        K, L, M = map(int, stdin.split())\n        if is_prime(K) and is_prime(L) and is_prime(M):\n            if is_happy(K, L, M):\n                return str(K)\n    return \"-1\"\n\n\ndef"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(N * (N - 1) // 2)"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    puzzle = stdin.strip()\n    if not puzzle:\n        return 'impossible'\n    if len(puzzle) > 100:\n        return 'impossible'\n    if puzzle.count('+')!= puzzle.count('='):\n        return 'impossible'\n    if puzzle.count('+') > 1:\n        return 'impossible'\n    if puzzle.count('+') == 1:\n        puzzle = puzzle.replace('+', '', 1)\n    if puzzle.count('=') > 1:\n        return 'impossible'\n    if puzzle.count('=') == 1:\n        puzzle = puzzle.replace('=', '', 1)\n    if puzzle.count(' ') > 1:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    if puzzle.count(' ') == 0:\n        return 'impossible'\n    if puzzle.count(' ') == 1:\n        puzzle = puzzle.replace(' ', '', 1)\n    "
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    checkerboard = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for row in checkerboard:\n        if row[0] == 0:\n            return -1\n    for col in zip(*checkerboard):\n        if col[0] == 0:\n            return -1\n    for row in checkerboard:\n        if row[-1] == 0:\n            return -1\n    for col in zip(*checkerboard):\n        if col[-1] == 0:\n            return -1\n    for row in checkerboard:\n        if row[0] % 2!= 0:\n            return -1\n    for col in zip(*checkerboard):\n        if col[0] % 2!= 0:\n            return -1\n    for row in checkerboard:\n        if row[-1] % 2!= 0:\n            return -1\n    for col in zip(*checkerboard):\n        if col[-1] % 2!= 0:\n            return -1\n    return sum(row) + sum(col)"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    t = []\n    v = []\n    for i in range(N):\n        t.append(int(stdin.split()[i]))\n        v.append(int(stdin.split()[i+1]))\n    t.sort()\n    v.sort()\n    t.reverse()\n    v.reverse()\n    L = 0\n    for i in range(N):\n        L += t[i] + v[i]\n    return str(L)"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, x, y, *a = list(map(int, stdin.split()))\n    a = sorted(a, key=lambda x: x[0])\n    a = sorted(a, key=lambda x: x[1])\n    a = sorted(a, key=lambda x: x[2])\n    a = sorted(a, key=lambda x: x[3])\n    a = sorted(a, key=lambda x: x[4])\n    a = sorted(a, key=lambda x: x[5])\n    a = sorted(a, key=lambda x: x[6])\n    a = sorted(a, key=lambda x: x[7])\n    a = sorted(a, key=lambda x: x[8])\n    a = sorted(a, key=lambda x: x[9])\n    a = sorted(a, key=lambda x: x[10])\n    a = sorted(a, key=lambda x: x[11])\n    a = sorted(a, key=lambda x: x[12])\n    a = sorted(a, key=lambda x: x[13])\n    a = sorted(a, key=lambda x: x[14])\n    a = sorted(a, key=lambda x: x[15])\n    a = sorted(a, key=lambda x: x[16])\n    a = sorted(a, key=lambda x: x[17])\n    a = sorted(a, key=lambda x: x[18])\n    a = sorted(a, key=lambda x: x[19])\n    a = sorted(a, key=lambda x: x[20])\n    a = sorted(a, key=lambda x: x[21])\n    a = sorted(a, key=lambda x: x[22])\n    a = sorted(a, key=lambda x: x[23])\n    a = sorted(a, key=lambda x: x[24])\n    a = sorted(a, key=lambda x: x[25])\n    a = sorted(a, key=lambda x: x[26])\n    a = sorted(a, key=lambda x: x[27])\n    a = sorted(a, key=lambda x: x[28])\n    a = sorted(a, key=lambda x: x[29])\n    a = sorted(a, key=lambda x: x[30])\n    a = sorted(a, key=lambda x: x[31])\n    a = sorted(a, key=lambda x: x[32])\n    a = sorted(a, key=lambda x: x[33])\n    a = sorted(a, key=lambda x: x[34])\n    a = sorted(a, key=lambda x: x[35])\n    a = sorted(a, key=lambda x: x[36])\n    a = sorted(a, key=lambda x: x[37])\n    a = sorted(a, key=lambda x: x[38])\n    a = sorted(a, key=lambda x: x[39])\n    a = sorted(a, key=lambda x: x[40])\n    a = sorted(a, key=lambda x: x[41])\n    a = sorted(a, key=lambda x: x[42])\n    a = sorted(a, key=lambda x: x[43])\n    a = sorted(a, key=lambda x: x[44])\n    a = sorted(a, key=lambda x: x[45])\n    a = sorted(a, key=lambda x: x[46])\n    a = sorted(a, key=lambda x: x[47])\n    a = sorted(a, key=lambda x: x[48])\n    a = sorted(a, key=lambda x: x[49])\n    a = sorted(a, key=lambda x: x[50])\n    a = sorted(a, key=lambda x: x[51])\n    a = sorted(a, key=lambda x: x[52])\n    a = sorted(a, key=lambda x: x[53])\n    a = sorted(a, key=lambda x: x[54])\n    a = sorted(a, key=lambda x: x[55])\n    a = sorted(a, key=lambda x: x[56])\n    a = sorted(a, key=lambda x: x[57])\n    a = sorted(a, key=lambda x: x[58])\n    a = sorted(a, key=lambda x: x[59])\n    a = sorted(a, key=lambda x: x[60])\n    a = sorted(a, key=lambda x: x[61])\n    a = sorted(a, key=lambda x: x[62])\n    a = sorted(a, key=lambda x: x[63])\n    a = sorted(a, key=lambda x: x[64])\n    a = sorted(a, key=lambda x: x[65])\n    a = sorted(a, key=lambda x: x[66])\n    a = sorted(a, key=lambda x: x[67])\n    a = sorted(a, key=lambda x: x[68])\n    a = sorted(a, key=lambda x: x"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    palette = set(map(int, stdin.split()))\n    if len(palette) == 0:\n        return \"impossible\"\n    if len(palette) == 1:\n        return \"\".join(map(str, palette))\n    for i in range(2**n):\n        if i in palette:\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n, 2*n))))):\n            continue\n        if any(map(lambda x: x[0]!= x[1] and x[0] in palette and x[1] in palette, zip(map(lambda x: bin(i)[2:], range(n)), map(lambda x: bin(i)[2:], range(n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    steps = 0\n    while a!= 0 or b!= 0:\n        if a > b:\n            a -= b\n            steps += 1\n        else:\n            b -= a\n            steps += 1\n    return str(steps)"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    P = list(map(int, stdin.split()))\n    V = list(map(int, stdin.split()))\n    V.sort()\n    P.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A.sort()\n    P.sort()\n    V.sort()\n    A"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.strip()\n    ans = 0\n    for i in range(Q):\n        L, R = map(int, stdin.split())\n        ans += len(S[L-1:R]) - len(S[L-1:R-1:-1])\n    return str(ans)"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    calls = []\n    for _ in range(N):\n        calls.append(list(map(int, stdin.split())))\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])\n    calls.sort(key=lambda x: x[1])\n    calls.sort(key=lambda x: x[0])"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    points = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n    x4, y4 = points[3]\n    x5, y5 = points[4]\n    x6, y6 = points[5]\n    x7, y7 = points[6]\n    x8, y8 = points[7]\n    x9, y9 = points[8]\n    x10, y10 = points[9]\n    x11, y11 = points[10]\n    x12, y12 = points[11]\n    x13, y13 = points[12]\n    x14, y14 = points[13]\n    x15, y15 = points[14]\n    x16, y16 = points[15]\n    x17, y17 = points[16]\n    x18, y18 = points[17]\n    x19, y19 = points[18]\n    x20, y20 = points[19]\n    x21, y21 = points[20]\n    x22, y22 = points[21]\n    x23, y23 = points[22]\n    x24, y24 = points[23]\n    x25, y25 = points[24]\n    x26, y26 = points[25]\n    x27, y27 = points[26]\n    x28, y28 = points[27]\n    x29, y29 = points[28]\n    x30, y30 = points[29]\n    x31, y31 = points[30]\n    x32, y32 = points[31]\n    x33, y33 = points[32]\n    x34, y34 = points[33]\n    x35, y35 = points[34]\n    x36, y36 = points[35]\n    x37, y37 = points[36]\n    x38, y38 = points[37]\n    x39, y39 = points[38]\n    x40, y40 = points[39]\n    x41, y41 = points[40]\n    x42, y42 = points[41]\n    x43, y43 = points[42]\n    x44, y44 = points[43]\n    x45, y45 = points[44]\n    x46, y46 = points[45]\n    x47, y47 = points[46]\n    x48, y48 = points[47]\n    x49, y49 = points[48]\n    x50, y50 = points[49]\n    x51, y51 = points[50]\n    x52, y52 = points[51]\n    x53, y53 = points[52]\n    x54, y54 = points[53]\n    x55, y55 = points[54]\n    x56, y56 = points[55]\n    x57, y57 = points[56]\n    x58, y58 = points[57]\n    x59, y59 = points[58]\n    x60, y60 = points[59]\n    x61, y61 = points[60]\n    x62, y62 = points[61]\n    x63, y63 = points[62]\n    x64, y64 = points[63]\n    x65, y65 = points[64]\n    x66, y66 = points[65]\n    x67, y67 = points[66]\n    x68, y68 = points[67]\n    x69, y69 = points[68]\n    x70, y70 = points[69]\n    x71, y71 = points[70]\n    x72, y72 = points[71]\n    x73, y73 = points[72]\n    x74, y74 = points[73]\n    x75, y75 = points[74]\n    x76, y76 = points[75]\n    x77, y77 = points[76]\n    x78, y78 = points[77]\n    x79, y79 = points[78]\n    x80, y80 = points[79]\n    x81, y81 = points[80]\n    x82, y82 = points[81]\n    x83, y83 = points[82]\n    x84, y84 = points[83]\n    x85, y85 = points[84]\n    x86, y86 = points[85]\n    x87, y87 = points[86]\n    x88, y88 = points[87]\n    x89, y89 = points[88]\n    x90, y90 = points[89]\n    x91, y91 = points[90]\n    x92, y92 = points[91]\n    x93, y93 = points[92]\n    x94, y94 = points[93]\n    x95, y95 = points[94]\n    x96, y96 = points[95]\n    x97, y97 = points[96]\n    x98, y98 = points[97]\n    x99, y99 = points[98]\n    x100, y100 = points[99]\n    x101, y101 = points[100]\n    x102, y102 = points[101]\n    x103, y103 = points[102]\n    x104, y104 = points[103]\n    x105, y105 = points[104]\n    x106, y106 = points[105]\n    x107, y107 = points[106]\n    x108, y108 = points[107]\n    x109, y109 = points[108]\n    x110, y110 = points[109]\n    x111, y111 = points[110]\n    x112, y112 = points[111]\n    x113, y113 = points[112]\n    x114, y114 = points[113]\n    x115, y115 = points[114]\n    x116, y"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vertices = []\n    for i in range(n):\n        x, y = map(float, stdin.split())\n        vertices.append((x, y))\n    vertices.sort(key=lambda x: x[0])\n    area = 0\n    for i in range(n):\n        j = i + 1\n        while j < n and vertices[i][0] > 0:\n            if vertices[i][0] * vertices[j][0] < 0:\n                area += vertices[i][0] * vertices[j][1]\n                break\n            j += 1\n    return str(area)\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, C = map(int, stdin.split())\n    sectors = list(range(1, N + 1))\n    colors = set()\n    for i in range(1, N + 1):\n        colors.add(sectors[i - 1])\n    for i in range(1, N + 1):\n        colors.add(sectors[i - 1] + 1)\n    colors.add(sectors[-1] + 1)\n    colors = list(colors)\n    colors.sort()\n    colors = colors[::-1]\n    colors = colors[:C]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    colors = colors[:K]\n    colors = colors[::-1]\n    colors = colors[:N]\n    colors = colors[::-1]\n    col"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, g, t = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    return str(sum(c[i] * (n - i) for i in range(n)) / t)"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(pow(n, pow(m, n - 1, m), m))"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, E, S_X, S_Y, C = map(int, stdin.split())\n    X, Y = S_X, S_Y\n    Cans = []\n    for _ in range(C):\n        X, Y, CT = map(int, stdin.split())\n        Cans.append((X, Y, CT))\n    Cans.sort(key=lambda x: x[2])\n    ans = 0\n    for can in Cans:\n        if X == S_X and Y == S_Y:\n            ans += 1\n        X += can[0]\n        Y += can[1]\n        if X == S_X and Y == S_Y:\n            ans += 1\n        if X < 0 or X >= N or Y < 0 or Y >= N:\n            break\n    return str(ans)\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, w, h = map(int, stdin.split())\n    gems = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        gems.append((x, y))\n    gems.sort(key=lambda x: x[0])\n    # print(gems)\n    # print(gems[0][0])\n    # print(gems[0][1])\n    # print(gems[-1][0])\n    # print(gems[-1][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    # print(gems[-1][1] - gems[0][1])\n    # print(gems[-1][0] - gems[0][0])\n    "
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return stdout.strip()"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(find_longest_subsequence(stdin)))\n\ndef"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t, p = map(int, stdin.split())\n    return str
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return str(dp[0][n - 1])"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    nodes = [int(i) for i in stdin.split()]\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.append(N)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    nodes.sort()\n    nodes.append(N)\n    nodes.insert(0, 0)\n    n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_x, n_y, n_z = map(int, stdin.split())\n    planets = []\n    for _ in range(n_x):\n        planets.append([int(x) for x in stdin.split()])\n    planets.sort(key=lambda x: (x[0], x[1], x[2]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], x[3]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], x[4]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], x[5]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], x[6]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], -x[6], x[7]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], -x[6], -x[7], x[8]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], -x[6], -x[7], -x[8], x[9]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], -x[6], -x[7], -x[8], -x[9], x[10]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], -x[6], -x[7], -x[8], -x[9], -x[10], x[11]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], -x[6], -x[7], -x[8], -x[9], -x[10], -x[11], x[12]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], -x[6], -x[7], -x[8], -x[9], -x[10], -x[11], -x[12], x[13]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], -x[6], -x[7], -x[8], -x[9], -x[10], -x[11], -x[12], -x[13], x[14]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], -x[6], -x[7], -x[8], -x[9], -x[10], -x[11], -x[12], -x[13], -x[14], x[15]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2], -x[3], -x[4], -x[5], -x[6], -x[7], -x[8], -x[9], -x[10], -x[11], -x[12], -x[13], -x[14], -x[15], x[16]))\n    planets.sort(key=lambda x: (x[0], -x[1], -x[2],"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, w = map(int, stdin.split())\n        roads[a - 1].append((b - 1, w))\n        roads[b - 1].append((a - 1, w))\n    q = int(stdin)\n    days = [0] * n\n    for i in range(q):\n        s, t = map(int, stdin.split())\n        days[s - 1] += 1\n        days[t - 1] += 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for road in roads[i]:\n                if road[0] == j:\n                    days[i] += min(days[road[1]], days[j])\n    return''.join(map(str, days))\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    frogs = list(map(int, stdin.split()))\n    frogs.sort()\n    result = []\n    while frogs:\n        frog = frogs.pop()\n        result.append(frog)\n        frogs.remove(frog)\n        frogs.sort()\n    return''.join(map(str, result))"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    antiques = []\n    for i in range(n):\n        antiques.append([int(i), int(stdin.split()[i * 2 + 1]), int(stdin.split()[i * 2 + 2]), int(stdin.split()[i * 2 + 3])])\n    antiques.sort(key=lambda x: (x[1], x[2]))\n    antiques.sort(key=lambda x: (x[3], x[0]))\n    antiques.sort(key=lambda x: (x[0], x[1]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17]))\n    antiques.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18]))\n    antiques.sort(key=lambda x: (x[0], x["
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        N = int(stdin.split()[i])\n        A = int(stdin.split()[i+1])\n        B = int(stdin.split()[i+2])\n        C = int(stdin.split()[i+3])\n        print(f\"Case #{i+1}: {max_people(N, A, B, C)}\")\n    return \"\"\n\ndef"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for line in lines:\n        if line == '0 0':\n            return '0 0'\n        else:\n            line = line.split()\n            sign = line[0]\n            n = int(line[1])\n            elements = line[2:]\n            elements = list(map(lambda x: x.split(' ')[0], elements))\n            counts = list(map(lambda x: int(x.split(' ')[1]), elements))\n            elements = list(map(lambda x: x.split(' ')[0], elements))\n            counts = list(map(lambda x: int(x.split(' ')[1]), counts))\n            elements = list(set(elements))\n            counts = list(set(counts))\n            counts.sort()\n            elements.sort()\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x - 1, elements))\n            counts = list(map(lambda x: x - 1, counts))\n            elements = list(map(lambda x: x -"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    D, L = map(int, stdin.split())\n    vertices = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        vertices.append((x, y))\n    vertices.sort(key=lambda x: x[1])\n    vertices.sort(key=lambda x: x[0])\n    # print(vertices)\n    # print(vertices[0][1])\n    # print(vertices[-1][1])\n    # print(vertices[0][0])\n    # print(vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices[-1][0])\n    # print(vertices[0][1] - vertices[-1][1])\n    # print(vertices[0][0] - vertices["
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    grid = [[int(x) for x in stdin.split()] for _ in range(r)]\n    return str(count_monotonic(grid, r, c))\n\ndef"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = stdin.replace('.','').replace('#','')\n    grid = '\\n'.join([''.join(row) for row in grid.split('\\n')])\n    return grid\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    table = [[int(x) for x in stdin.split()] for _ in range(N)]\n    return str(min(sum(min(table[i][j], table[i][j + 1]) for j in range(N - 1)) for i in range(N - 1)))"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    circle = stdin\n    for _ in range(K):\n        new_circle = rotate(circle)\n        circle = new_circle\n    return str(len(set(circle)))\n\ndef"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    a.sort()\n    c.sort()\n    ans = 0\n    for i in range(L):\n        ans += a[i] * c[i]\n    return str(ans)"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, A, B, P = map(int, stdin.split())\n    return str(min(L - A, L - B, L - P))"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    streams = []\n    for i in range(n):\n        streams.append(list(map(int, stdin.split())))\n    streams.sort(key=lambda x: x[0])\n    stack = []\n    max_priority = 0\n    for i in range(n):\n        if len(stack) == 0:\n            stack.append(streams[i][2])\n            max_priority = max(max_priority, streams[i][2])\n        else:\n            if streams[i][2] > stack[-1]:\n                stack.append(streams[i][2])\n                max_priority = max(max_priority, streams[i][2])\n            else:\n                while len(stack) > 0 and streams[i][2] <= stack[-1]:\n                    stack.pop()\n                if len(stack) == 0:\n                    stack.append(streams[i][2])\n                    max_priority = max(max_priority, streams[i][2])\n                else:\n                    stack.append(streams[i][2])\n                    max_priority = max(max_priority, streams[i][2])\n    return str(max_priority)"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(float, stdin.split())\n    return str(round(min(abs(x - i) + abs(y - j) for i, j in ((1, 0), (0, 1), (-1, 0), (0, -1))), 6))"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    distances = []\n    for i in range(n-1):\n        distances.append(int(stdin.split()[i+1]))\n    distances.sort()\n    if len(distances) == 0:\n        return \"impossible\"\n    return str(sum(distances[i] + distances[i+1] for i in range(len(distances)-1))/len(distances))"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n):\n        for b in range(a, n):\n            c = n - a - b\n            if a**2 + b**2 == c**2:\n                count += 1\n    return str(count)"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '3'"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stacks = []\n    for i in range(n):\n        line = stdin.split()\n        if line[0] == 'a':\n            stacks.append(i)\n        elif line[0] == 'b':\n            stacks.pop()\n        elif line[0] == 'c':\n            stacks.append(i)\n            stacks.append(i)\n    return str(len(set(stacks)))"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    partners = []\n    for i in range(n):\n        g, p, g_a, p_a = map(int, stdin.split())\n        partners.append((g, p, g_a, p_a))\n    partners.sort(key=lambda x: (x[0], x[1], x[2], x[3]))\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x["
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    roads = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        roads[a - 1].append(b - 1)\n        roads[b - 1].append(a - 1)\n    return sum(len(set(road)) % 2 == 0 for road in roads) % 1000000009\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    flights = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        flights.append((a, b))\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    cancellations = 0\n    new_flights = []\n    for i in range(n - 1):\n        if flights[i][0] == flights[i + 1][0]:\n            cancellations += 1\n        else:\n            new_flights.append((flights[i][0], flights[i + 1][0]))\n    new_flights.append((flights[n - 1][0], flights[0][1]))\n    return str(cancellations) + '\\n' + str(new_flights[0][0]) + '\\n' + str(new_flights[0][1])"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    prices = []\n    days = []\n    for i in range(m):\n        p, d = map(int, stdin.split())\n        prices.append(p)\n        days.append(d)\n    prices.sort()\n    days.sort()\n    dp = [[0] * (days[-1] + 1) for _ in range(m + 1)]\n    for i in range(m):\n        for j in range(days[i], days[i + 1]):\n            dp[i + 1][j] = max(dp[i][j], dp[i][j - days[i]] + prices[i])\n    return str(max(dp[-1]))\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    onions = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        onions.append((x, y))\n    fence = []\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        fence.append((a, b))\n    onions = sorted(onions, key=lambda x: x[0])\n    fence = sorted(fence, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    fence = sorted(fence, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    fence = sorted(fence, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[1])\n    fence = sorted(fence, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted("
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    wire = stdin.split()\n    wire_len = int(wire[0])\n    wire_points = wire[1:]\n    wire_points = [int(i) for i in wire_points]\n    wire_points.sort()\n    if wire_points[0] == wire_points[-1]:\n        return \"GHOST\"\n    else:\n        return \"SAFE\""
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    x = list(map(float, stdin.split()))\n    x.sort()\n    v = 0\n    for i in range(N):\n        if x[i] - x[i - 1] > L:\n            v = max(v, x[i] - x[i - 1])\n    return str(v)"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(stdin.split()[i*2]))\n        y.append(int(stdin.split()[i*2+1]))\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, n = map(int, stdin.split())\n    cars = []\n    for i in range(n):\n        cars.append(list(stdin.split()))\n    cars.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(n):\n        if cars[i][0] == 'W':\n            if cars[i][1] > t:\n                ans += 1\n            else:\n                break\n    return str(ans)"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gold_stores = []\n    for i in range(n):\n        gold_stores.append(list(map(int, stdin.split())))\n    gold_stores.sort(key=lambda x: x[1])\n    gold_stores.sort(key=lambda x: x[0])\n    max_gold_stores = 0\n    for i in range(n):\n        if gold_stores[i][0] > gold_stores[i][1]:\n            max_gold_stores += 1\n    return str(max_gold_stores)"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    A, B, C = map(int, stdin.split())\n    if A + B + C!= R * C:\n        return \"impossible\"\n    if A == 0 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 0 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 0 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 0 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 1 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 1 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 1 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 1 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 2 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 2 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 2 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 2 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 3 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 3 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 3 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 3 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 4 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 4 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 4 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 4 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 5 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 5 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 5 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 5 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 6 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 6 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 6 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 6 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 7 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 7 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 7 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 7 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 8 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 8 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 8 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 8 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 9 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 9 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 9 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 9 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 10 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 10 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 10 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 10 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 11 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 11 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 11 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 11 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 12 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 12 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 12 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 12 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 13 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 13 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 13 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 13 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 14 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 14 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 14 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 14 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 15 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 15 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 15 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 15 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 16 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 16 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 16 and B == 1 and C == 0:\n        return \"impossible\"\n    if A == 16 and B == 1 and C == 1:\n        return \"impossible\"\n    if A == 17 and B == 0 and C == 0:\n        return \"impossible\"\n    if A == 17 and B == 0 and C == 1:\n        return \"impossible\"\n    if A == 17 and B == 1 and C == 0:\n        return \"impossible\""
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dictionary = set()\n    for word in stdin.split():\n        dictionary.add(word)\n    message = stdin.split()\n    for word in message:\n        if word in dictionary:\n            dictionary.remove(word)\n    return''.join(dictionary)"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max(stdin.split(), key=lambda x: len(x))))"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dice = list(map(int, stdin.split()))\n    dice.sort()\n    score = 0\n    for i in range(n):\n        if i == 0:\n            score += dice[i]\n        elif i == 1:\n            score += dice[i] + dice[i - 1]\n        elif i == 2:\n            score += dice[i] + dice[i - 1] + dice[i - 2]\n        elif i == 3:\n            score += dice[i] + dice[i - 1] + dice[i - 2] + dice[i - 3]\n        elif i == 4:\n            score += dice[i] + dice[i - 1] + dice[i - 2] + dice[i - 3] + dice[i - 4]\n        elif i == 5:\n            score += dice[i] + dice[i - 1] + dice[i - 2] + dice[i - 3] + dice[i - 4] + dice[i - 5]\n        elif i == 6:\n            score += dice[i] + dice[i - 1] + dice[i - 2] + dice[i - 3] + dice[i - 4] + dice[i - 5] + dice[i - 6]\n    return str(score)\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    tree = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n    for _ in range(q):\n        k, x = map(int, stdin.split())\n        if k == 0:\n            print(len(tree[x - 1]))\n        else:\n            tree[x - 1] = k\n    return stdin"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, R, L = map(int, stdin.split())\n    logs = []\n    for _ in range(L):\n        logs.append(list(map(int, stdin.split())))\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    logs.sort(key=lambda x: x[1])\n    logs.sort(key=lambda x: x[0])\n    "
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, r, n, z = map(int, stdin.split())\n    return str(max(n // (s * r), z))"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    points = sorted(list(map(int, stdin.split())))\n    if n == 1:\n        return str(points[0])\n    if n == 2:\n        return str(points[0]) +'' + str(points[1])\n    if n == 3:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2])\n    if n == 4:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3])\n    if n == 5:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3]) +'' + str(points[4])\n    if n == 6:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3]) +'' + str(points[4]) +'' + str(points[5])\n    if n == 7:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3]) +'' + str(points[4]) +'' + str(points[5]) +'' + str(points[6])\n    if n == 8:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3]) +'' + str(points[4]) +'' + str(points[5]) +'' + str(points[6]) +'' + str(points[7])\n    if n == 9:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3]) +'' + str(points[4]) +'' + str(points[5]) +'' + str(points[6]) +'' + str(points[7]) +'' + str(points[8])\n    if n == 10:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3]) +'' + str(points[4]) +'' + str(points[5]) +'' + str(points[6]) +'' + str(points[7]) +'' + str(points[8]) +'' + str(points[9])\n    if n == 11:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3]) +'' + str(points[4]) +'' + str(points[5]) +'' + str(points[6]) +'' + str(points[7]) +'' + str(points[8]) +'' + str(points[9]) +'' + str(points[10])\n    if n == 12:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3]) +'' + str(points[4]) +'' + str(points[5]) +'' + str(points[6]) +'' + str(points[7]) +'' + str(points[8]) +'' + str(points[9]) +'' + str(points[10]) +'' + str(points[11])\n    if n == 13:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3]) +'' + str(points[4]) +'' + str(points[5]) +'' + str(points[6]) +'' + str(points[7]) +'' + str(points[8]) +'' + str(points[9]) +'' + str(points[10]) +'' + str(points[11]) +'' + str(points[12])\n    if n == 14:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2]) +'' + str(points[3]) +'' + str(points[4]) +'' + str(points[5]) +'' + str(points[6]) +'' + str(points[7]) +'' + str(points[8]) +'' + str(points[9]) +'' + str(points[10]) +'' + str(points[11]) +'' + str(points[12]) +'' + str(points[13])\n    if n == 15:\n        return str(points[0]) +'' + str(points[1]) +'' + str(points[2"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rooms = list(map(int, stdin.split()))\n    rooms.sort()\n    rooms = tuple(rooms)\n    # print(rooms)\n    # print(rooms[0], rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] - rooms[-1])\n    # print(rooms[0] -"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = []\n    for i in range(n):\n        x, h = map(int, stdin.split())\n        ans.append(h * 180 / x)\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '\\n'.join(['ST'+ str(n) if i == 0 else 'DI' for i in range(40)])"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R, C = map(int, stdin.split())\n    if N == 1:\n        return str(R * C)\n    else:\n        return str(R * C - (N - 1) * (R - 1) * (C - 1))"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rules = stdin.splitlines()\n    rules = [rule.split('->') for rule in rules]\n    rules = {rule[0]: rule[1] for rule in rules}\n    start = rules.pop('S')\n    start = start.split(' ')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]\n    start = start.split('a')\n    start = start[0]\n    start = start.split('b')\n    start = start[0]"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = []\n    for i in range(n):\n        d.append(list(map(int, stdin.split())))\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[1])\n    d.sort(key=lambda x: x[2])\n    d.sort(key=lambda x: x[3])\n    d.sort(key=lambda x: x[4])\n    d.sort(key=lambda x: x[5])\n    d.sort(key=lambda x: x[6])\n    d.sort(key=lambda x: x[7])\n    d.sort(key=lambda x: x[8])\n    d.sort(key=lambda x: x[9])\n    d.sort(key=lambda x: x[10])\n    d.sort(key=lambda x: x[11])\n    d.sort(key=lambda x: x[12])\n    d.sort(key=lambda x: x[13])\n    d.sort(key=lambda x: x[14])\n    d.sort(key=lambda x: x[15])\n    d.sort(key=lambda x: x[16])\n    d.sort(key=lambda x: x[17])\n    d.sort(key=lambda x: x[18])\n    d.sort(key=lambda x: x[19])\n    d.sort(key=lambda x: x[20])\n    d.sort(key=lambda x: x[21])\n    d.sort(key=lambda x: x[22])\n    d.sort(key=lambda x: x[23])\n    d.sort(key=lambda x: x[24])\n    d.sort(key=lambda x: x[25])\n    d.sort(key=lambda x: x[26])\n    d.sort(key=lambda x: x[27])\n    d.sort(key=lambda x: x[28])\n    d.sort(key=lambda x: x[29])\n    d.sort(key=lambda x: x[30])\n    d.sort(key=lambda x: x[31])\n    d.sort(key=lambda x: x[32])\n    d.sort(key=lambda x: x[33])\n    d.sort(key=lambda x: x[34])\n    d.sort(key=lambda x: x[35])\n    d.sort(key=lambda x: x[36])\n    d.sort(key=lambda x: x[37])\n    d.sort(key=lambda x: x[38])\n    d.sort(key=lambda x: x[39])\n    d.sort(key=lambda x: x[40])\n    d.sort(key=lambda x: x[41])\n    d.sort(key=lambda x: x[42])\n    d.sort(key=lambda x: x[43])\n    d.sort(key=lambda x: x[44])\n    d.sort(key=lambda x: x[45])\n    d.sort(key=lambda x: x[46])\n    d.sort(key=lambda x: x[47])\n    d.sort(key=lambda x: x[48])\n    d.sort(key=lambda x: x[49])\n    d.sort(key=lambda x: x[50])\n    d.sort(key=lambda x: x[51])\n    d.sort(key=lambda x: x[52])\n    d.sort(key=lambda x: x[53])\n    d.sort(key=lambda x: x[54])\n    d.sort(key=lambda x: x[55])\n    d.sort(key=lambda x: x[56])\n    d.sort(key=lambda x: x[57])\n    d.sort(key=lambda x: x[58])\n    d.sort(key=lambda x: x[59])\n    d.sort(key=lambda x: x[60])\n    d.sort(key=lambda x: x[61])\n    d.sort(key=lambda x: x[62])\n    d.sort(key=lambda x: x[63])\n    d.sort(key=lambda x: x[64])\n    d.sort(key=lambda x: x[65])\n    d.sort(key=lambda x: x[66])\n    d.sort(key=lambda x: x[67])\n    d.sort(key=lambda x: x[68])\n    d.sort(key=lambda x: x[69])\n    d.sort(key=lambda x: x[70])\n    d.sort(key=lambda x: x[71])\n    d.sort(key=lambda x: x[72])\n    d.sort(key=lambda x: x[73])\n    d.sort(key=lambda x: x[74])\n    d.sort(key=lambda x: x[75])\n    d.sort(key=lambda x: x[76])\n    d.sort(key=lambda x: x[77])\n    d.sort(key=lambda x: x[78])\n    d.sort(key=lambda x: x[79])\n    d.sort(key=lambda x: x[80])\n    d.sort(key=lambda x: x[81])\n    d.sort(key=lambda x: x[82])\n    d.sort(key=lambda x: x[83])\n    d.sort(key=lambda x: x[84])\n    d.sort(key=lambda x: x[85])\n    d.sort(key=lambda x: x[86])\n    d.sort(key=lambda x: x[87])\n    d.sort(key=lambda x: x[88])\n    d.sort(key=lambda x: x[89])\n    d.sort(key=lambda x: x[90])\n    d.sort(key=lambda x: x[91])\n    d.sort(key=lambda x: x[92])\n    d.sort(key=lambda x: x[93])\n    d.sort(key=lambda x: x[94])\n    d.sort(key=lambda x: x[95])\n    d.sort(key=lambda x: x[96])\n    d.sort(key=lambda x: x[97])\n    d.sort(key=lambda x: x[98])\n    d.sort(key=lambda x: x"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, F = map(int, stdin.split())\n    L, W = map(int, stdin.split())\n    tiles = stdin.split()\n    if A <= F:\n        return \"NO WAY\"\n    if A > F:\n        return \"GO FOR IT\"\n    if L <= W:\n        return \"NO CHANCE\"\n    if L > W:\n        return \"SUCCESS\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n        return \"NO CHANCE\"\n    if tiles[0] == \"W\":\n        return \"SUCCESS\"\n    if tiles[0] == \"B\":\n        return \"NO WAY\"\n    if tiles[0] == \"S\":\n        return \"GO FOR IT\"\n    if tiles[0] == \"G\":\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    courses = list(map(int, stdin.split()))\n    courses.sort()\n    total = 0\n    for i in range(n):\n        total += courses[i]\n    if total < m:\n        return str(m - total)\n    else:\n        return str(total)"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    sets = {i: i for i in range(N)}\n    for _ in range(Q):\n        op, a, b = stdin.split()\n        if op == \"=\":\n            sets[a] = b\n        elif op == \"?\":\n            if sets[a] == sets[b]:\n                print(\"yes\")\n            else:\n                print(\"no\")\n    return \"\""
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    seq.sort()\n    primes = []\n    for i in range(1, n):\n        if seq[i] % seq[i - 1] == 0:\n            primes.append(seq[i - 1])\n    if len(primes) < k:\n        return 0\n    primes.sort()\n    return primes[-1]"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return str(sum(map(f, range(L, R+1))))"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, n = map(int, stdin.split())\n    words = stdin.split('\\n')\n    words = words[:n]\n    words = [w.split() for w in words]\n    words = [[w[-1], w[:-1]] for w in words]\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key=lambda x: x[0])\n    words = sorted(words, key=lambda x: x[1])\n    words = sorted(words, key="
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    enclosures = {}\n    for i in range(n):\n        enclosures[i] = stdin.split()[i]\n    return \"IMPOSSIBLE\" if not all(enclosures[i] == i for i in range(n)) else \"POSSIBLE\""
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin)\n    digits = stdin.split()\n    triples = []\n    for i in range(p):\n        for j in range(i + 1, p):\n            for k in range(j + 1, p):\n                if digits[i] == digits[j] and digits[j] == digits[k]:\n                    triples.append((i, j, k))\n    if len(triples) == 0:\n        return \"random sequence\"\n    triples.sort(key=lambda x: (x[0], x[1], x[2]))\n    return \"triple correlation \" + str(triples[0][0]) + str(triples[0][1]) + str(triples[0][2])"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, k = map(int, stdin.split())\n    h = []\n    for i in range(N):\n        h.append(int(stdin.split()[i]))\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()\n    h.append(0)\n    h.append(0)\n    h.sort()\n    h.reverse()"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    pairs = []\n    for _ in range(c):\n        a, b, y = map(int, stdin.split())\n        pairs.append((a, b, y))\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[2])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key="
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, s, t = map(int, stdin.split())\n    flights = []\n    for i in range(N):\n        if stdin[i] == 'N':\n            flights.append(i)\n        elif stdin[i] == 'C':\n            flights.append(i)\n    if len(flights) == 0:\n        return 'impossible'\n    flights.sort()\n    flights.append(s)\n    flights.append(t)\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n    flights.sort()\n    flights = list(set(flights))\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... (\n   ... )\n   ... )\n    10\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution('''\n   ... )\n    0\n    >>> solution"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    g = []\n    for i in range(n):\n        g.append(stdin.split()[i])\n    g = list(map(int, g))\n    e = int(stdin.split()[n])\n    d = {}\n    for i in range(e):\n        a, b = stdin.split()[i * 2 + 1].split()\n        d[int(a)] = int(b)\n        d[int(b)] = int(a)\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    g = list(map(lambda x: x * d[x], g))\n    "
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, E = map(int, stdin.split())\n    graph = [[] for _ in range(V)]\n    for _ in range(E):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    visited.add(1)\n    count = 0\n    for i in range(V):\n        if i not in visited:\n            count += 1\n            visited.add(i)\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                for nei in graph[node]:\n                    if nei not in visited:\n                        visited.add(nei)\n                        stack.append(nei)\n    return str(count % (10**9 + 7))\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f = int(stdin)\n    for i in range(f):\n        s, c, name, n, t, p = stdin.split()\n        s = int(s)\n        c = int(c)\n        n = int(n)\n        t = int(t)\n        p = p.lower()\n        if p == \"caterpillar\":\n            s = 3\n        elif p == \"pupa\":\n            s = 3\n        elif p == \"butterfly\":\n            s = 4\n        elif p == \"dove\":\n            s = 4\n        elif p == \"mouse\":\n            s = 5\n        elif p == \"electromouse\":\n            s = 6\n        elif p == \"rat\":\n            s = 7\n        elif p == \"aaabaaajss\":\n            s = 8\n        elif p == \"pigeon\":\n            s = 9\n        elif p == \"butterfly\":\n            s = 10\n        elif p == \"dove\":\n            s = 10\n        elif p == \"mouse\":\n            s = 11\n        elif p == \"electromouse\":\n            s = 12\n        elif p == \"rat\":\n            s = 13\n        elif p == \"aaabaaajss\":\n            s = 14\n        elif p == \"pigeon\":\n            s = 15\n        elif p == \"butterfly\":\n            s = 16\n        elif p == \"dove\":\n            s = 17\n        elif p == \"mouse\":\n            s = 18\n        elif p == \"electromouse\":\n            s = 19\n        elif p == \"rat\":\n            s = 20\n        elif p == \"aaabaaajss\":\n            s = 21\n        elif p == \"pigeon\":\n            s = 22\n        elif p == \"butterfly\":\n            s = 23\n        elif p == \"dove\":\n            s = 24\n        elif p == \"mouse\":\n            s = 25\n        elif p == \"electromouse\":\n            s = 26\n        elif p == \"rat\":\n            s = 27\n        elif p == \"aaabaaajss\":\n            s = 28\n        elif p == \"pigeon\":\n            s = 29\n        elif p == \"butterfly\":\n            s = 30\n        elif p == \"dove\":\n            s = 31\n        elif p == \"mouse\":\n            s = 32\n        elif p == \"electromouse\":\n            s = 33\n        elif p == \"rat\":\n            s = 34\n        elif p == \"aaabaaajss\":\n            s = 35\n        elif p == \"pigeon\":\n            s = 36\n        elif p == \"butterfly\":\n            s = 37\n        elif p == \"dove\":\n            s = 38\n        elif p == \"mouse\":\n            s = 39\n        elif p == \"electromouse\":\n            s = 40\n        elif p == \"rat\":\n            s = 41\n        elif p == \"aaabaaajss\":\n            s = 42\n        elif p == \"pigeon\":\n            s = 43\n        elif p == \"butterfly\":\n            s = 44\n        elif p == \"dove\":\n            s = 45\n        elif p == \"mouse\":\n            s = 46\n        elif p == \"electromouse\":\n            s = 47\n        elif p == \"rat\":\n            s = 48\n        elif p == \"aaabaaajss\":\n            s = 49\n        elif p == \"pigeon\":\n            s"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strategic_points = []\n    for i in range(n):\n        strategic_points.append(list(map(int, stdin.split()[i + 1].split(' '))))\n    t = int(stdin.split()[n + 1])\n    safe_dry_plan = []\n    for i in range(t):\n        safe_dry_plan.append(int(stdin.split()[i + n + 2]))\n    safe_wet_plan = []\n    for i in range(t):\n        safe_wet_plan.append(int(stdin.split()[i + n + 3]))\n    return str(solution_part1(strategic_points, safe_dry_plan, safe_wet_plan))\n\ndef"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = int(stdin)\n    tickets = []\n    for i in range(m):\n        tickets.append(stdin.split())\n    tickets = sorted(tickets, key=lambda x: (x[0], x[1]))\n    tickets = sorted(tickets, key=lambda x: (x[2], x[3]))\n    tickets = sorted(tickets, key=lambda x: (x[4], x[5]))\n    tickets = sorted(tickets, key=lambda x: (x[6], x[7]))\n    tickets = sorted(tickets, key=lambda x: (x[8], x[9]))\n    tickets = sorted(tickets, key=lambda x: (x[10], x[11]))\n    tickets = sorted(tickets, key=lambda x: (x[12], x[13]))\n    tickets = sorted(tickets, key=lambda x: (x[14], x[15]))\n    tickets = sorted(tickets, key=lambda x: (x[16], x[17]))\n    tickets = sorted(tickets, key=lambda x: (x[18], x[19]))\n    tickets = sorted(tickets, key=lambda x: (x[20], x[21]))\n    tickets = sorted(tickets, key=lambda x: (x[22], x[23]))\n    tickets = sorted(tickets, key=lambda x: (x[24], x[25]))\n    tickets = sorted(tickets, key=lambda x: (x[26], x[27]))\n    tickets = sorted(tickets, key=lambda x: (x[28], x[29]))\n    tickets = sorted(tickets, key=lambda x: (x[30], x[31]))\n    tickets = sorted(tickets, key=lambda x: (x[32], x[33]))\n    tickets = sorted(tickets, key=lambda x: (x[34], x[35]))\n    tickets = sorted(tickets, key=lambda x: (x[36], x[37]))\n    tickets = sorted(tickets, key=lambda x: (x[38], x[39]))\n    tickets = sorted(tickets, key=lambda x: (x[40], x[41]))\n    tickets = sorted(tickets, key=lambda x: (x[42], x[43]))\n    tickets = sorted(tickets, key=lambda x: (x[44], x[45]))\n    tickets = sorted(tickets, key=lambda x: (x[46], x[47]))\n    tickets = sorted(tickets, key=lambda x: (x[48], x[49]))\n    tickets = sorted(tickets, key=lambda x: (x[50], x[51]))\n    tickets = sorted(tickets, key=lambda x: (x[52], x[53]))\n    tickets = sorted(tickets, key=lambda x: (x[54], x[55]))\n    tickets = sorted(tickets, key=lambda x: (x[56], x[57]))\n    tickets = sorted(tickets, key=lambda x: (x[58], x[59]))\n    tickets = sorted(tickets, key=lambda x: (x[60], x[61]))\n    tickets = sorted(tickets, key=lambda x: (x[62], x[63]))\n    tickets = sorted(tickets, key=lambda x: (x[64], x[65]))\n    tickets = sorted(tickets, key=lambda x: (x[66], x[67]))\n    tickets = sorted(tickets, key=lambda x: (x[68], x[69]))\n    tickets = sorted(tickets, key=lambda x: (x[70], x[71]))\n    tickets = sorted(tickets, key=lambda x: (x[72], x[73]))\n    tickets = sorted(tickets, key=lambda x: (x[74], x[75]))\n    tickets = sorted(tickets, key=lambda x: (x[76], x[77]))\n    tickets = sorted(tickets, key=lambda x: (x[78], x[79]))\n    tickets = sorted(tickets, key=lambda x: (x[80], x[81]))\n    tickets = sorted(tickets, key=lambda x: (x[82], x[83]))\n    tickets = sorted(tickets, key=lambda x: (x[84], x[85]))\n    tickets = sorted(tickets, key=lambda x: (x[86], x[87]))\n    tickets = sorted(tickets, key=lambda x: (x[88], x[89]))\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        graph[x].append(y)\n        graph[y].append(x)\n    visited = set()\n    stack = []\n    for i in range(n):\n        if i not in visited:\n            visited.add(i)\n            stack.append(i)\n            while stack:\n                node = stack.pop()\n                for nei in graph[node]:\n                    if nei not in visited:\n                        visited.add(nei)\n                        stack.append(nei)\n    return len(visited)"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"0 0\"\n    if N == 2:\n        return \"40000000 0\"\n    if N == 3:\n        return \"0 40000000\"\n    if N == 4:\n        return \"40000000 40000000\"\n    if N == 5:\n        return \"0 40000000 40000000\"\n    if N == 6:\n        return \"40000000 40000000 40000000\"\n    if N == 7:\n        return \"0 40000000 40000000 40000000\"\n    if N == 8:\n        return \"40000000 40000000 40000000 40000000\"\n    if N == 9:\n        return \"0 40000000 40000000 40000000 40000000\"\n    if N == 10:\n        return \"40000000 40000000 40000000 40000000 40000000\"\n    if N == 11:\n        return \"0 40000000 40000000 40000000 40000000 40000000\"\n    if N == 12:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 13:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 14:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 15:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 16:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 17:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 18:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 19:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 20:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 21:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 22:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 23:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 24:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 25:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 26:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 27:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 28:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 29:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 30:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 31:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 32:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 33:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 34:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 35:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 36:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 37:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 38:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 39:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 40:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 41:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 42:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 43:\n        return \"0 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 44:\n        return \"40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000 40000000\"\n    if N == 45:\n        "
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    nums = list(map(int, nums))\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] == 24:\n            return str(i)\n    return \"impossible\""
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    tastiness = list(map(int, stdin.split()))\n    tastiness.sort(reverse=True)\n    cost = 0\n    for i in range(k):\n        cost += a\n        if cost > n:\n            break\n        cost += b\n        if cost > n:\n            break\n        cost += tastiness[i]\n    return str(cost)"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n)\n    else:\n        return str(n + 1)"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"0\"\n    if n == 5:\n        return \"0\"\n    if n == 6:\n        return \"1\"\n    if n == 7:\n        return \"0\"\n    if n == 8:\n        return \"1\"\n    if n == 9:\n        return \"0\"\n    if n == 10:\n        return \"1\"\n    if n == 11:\n        return \"0\"\n    if n == 12:\n        return \"1\"\n    if n == 13:\n        return \"0\"\n    if n == 14:\n        return \"1\"\n    if n == 15:\n        return \"0\"\n    if n == 16:\n        return \"1\"\n    if n == 17:\n        return \"0\"\n    if n == 18:\n        return \"1\"\n    if n == 19:\n        return \"0\"\n    if n == 20:\n        return \"1\"\n    if n == 21:\n        return \"0\"\n    if n == 22:\n        return \"1\"\n    if n == 23:\n        return \"0\"\n    if n == 24:\n        return \"1\"\n    if n == 25:\n        return \"0\"\n    if n == 26:\n        return \"1\"\n    if n == 27:\n        return \"0\"\n    if n == 28:\n        return \"1\"\n    if n == 29:\n        return \"0\"\n    if n == 30:\n        return \"1\"\n    if n == 31:\n        return \"0\"\n    if n == 32:\n        return \"1\"\n    if n == 33:\n        return \"0\"\n    if n == 34:\n        return \"1\"\n    if n == 35:\n        return \"0\"\n    if n == 36:\n        return \"1\"\n    if n == 37:\n        return \"0\"\n    if n == 38:\n        return \"1\"\n    if n == 39:\n        return \"0\"\n    if n == 40:\n        return \"1\"\n    if n == 41:\n        return \"0\"\n    if n == 42:\n        return \"1\"\n    if n == 43:\n        return \"0\"\n    if n == 44:\n        return \"1\"\n    if n == 45:\n        return \"0\"\n    if n == 46:\n        return \"1\"\n    if n == 47:\n        return \"0\"\n    if n == 48:\n        return \"1\"\n    if n == 49:\n        return \"0\"\n    if n == 50:\n        return \"1\"\n    if n == 51:\n        return \"0\"\n    if n == 52:\n        return \"1\"\n    if n == 53:\n        return \"0\"\n    if n == 54:\n        return \"1\"\n    if n == 55:\n        return \"0\"\n    if n == 56:\n        return \"1\"\n    if n == 57:\n        return \"0\"\n    if n == 58:\n        return \"1\"\n    if n == 59:\n        return \"0\"\n    if n == 60:\n        return \"1\"\n    if n == 61:\n        return \"0\"\n    if n == 62:\n        return \"1\"\n    if n == 63:\n        return \"0\"\n    if n == 64:\n        return \"1\"\n    if n == 65:\n        return \"0\"\n    if n == 66:\n        return \"1\"\n    if n == 67:\n        return \"0\"\n    if n == 68:\n        return \"1\"\n    if n == 69:\n        return \"0\"\n    if n == 70:\n        return \"1\"\n    if n == 71:\n        return \"0\"\n    if n == 72:\n        return \"1\"\n    if n == 73:\n        return \"0\"\n    if n == 74:\n        return \"1\"\n    if n == 75:\n        return \"0\"\n    if n == 76:\n        return \"1\"\n    if n == 77:\n        return \"0\"\n    if n == 78:\n        return \"1\"\n    if n == 79:\n        return \"0\"\n    if n == 80:\n        return \"1\"\n    if n == 81:\n        return \"0\"\n    if n == 82:\n        return \"1\"\n    if n == 83:\n        return \"0\"\n    if n == 84:\n        return \"1\"\n    if n == 85:\n        return \"0\"\n    if n == 86:\n        return \"1\"\n    if n == 87:\n        return \"0\"\n    if n == 88:\n        return \"1\"\n    if n == 89:\n        return \"0\"\n    if n == 90:\n        return \"1\"\n    if n == 91:\n        return \"0\"\n    if n == 92:\n        return \"1\"\n    if n == 93:\n        return \"0\"\n    if n == 94:\n        return \"1\"\n    if n == 95:\n        return \"0\"\n    if n == 96:\n        return \"1\"\n    if n == 97:\n        return \"0\"\n    if n == 98:\n        return \"1\"\n    if n == 99:\n        return \"0\"\n    if n == 100:\n        return \"1\"\n    if n == 101:\n        return \"0\"\n    if n == 102:\n        return \"1\"\n    if n == 103:\n        return \"0\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == 1 and M == 1:\n        return \"1 1\"\n    if N == 1 and M == 2:\n        return \"1 2\"\n    if N == 2 and M == 2:\n        return \"1 1\"\n    if N == 2 and M == 3:\n        return \"1 2\"\n    if N == 3 and M == 3:\n        return \"1 1\"\n    if N == 3 and M == 4:\n        return \"1 2\"\n    if N == 4 and M == 4:\n        return \"1 1\"\n    if N == 4 and M == 5:\n        return \"1 2\"\n    if N == 5 and M == 5:\n        return \"1 1\"\n    if N == 5 and M == 6:\n        return \"1 2\"\n    if N == 6 and M == 6:\n        return \"1 1\"\n    if N == 6 and M == 7:\n        return \"1 2\"\n    if N == 7 and M == 7:\n        return \"1 1\"\n    if N == 7 and M == 8:\n        return \"1 2\"\n    if N == 8 and M == 8:\n        return \"1 1\"\n    if N == 8 and M == 9:\n        return \"1 2\"\n    if N == 9 and M == 9:\n        return \"1 1\"\n    if N == 9 and M == 10:\n        return \"1 2\"\n    if N == 10 and M == 10:\n        return \"1 1\"\n    if N == 10 and M == 11:\n        return \"1 2\"\n    if N == 11 and M == 11:\n        return \"1 1\"\n    if N == 11 and M == 12:\n        return \"1 2\"\n    if N == 12 and M == 12:\n        return \"1 1\"\n    if N == 12 and M == 13:\n        return \"1 2\"\n    if N == 13 and M == 13:\n        return \"1 1\"\n    if N == 13 and M == 14:\n        return \"1 2\"\n    if N == 14 and M == 14:\n        return \"1 1\"\n    if N == 14 and M == 15:\n        return \"1 2\"\n    if N == 15 and M == 15:\n        return \"1 1\"\n    if N == 15 and M == 16:\n        return \"1 2\"\n    if N == 16 and M == 16:\n        return \"1 1\"\n    if N == 16 and M == 17:\n        return \"1 2\"\n    if N == 17 and M == 17:\n        return \"1 1\"\n    if N == 17 and M == 18:\n        return \"1 2\"\n    if N == 18 and M == 18:\n        return \"1 1\"\n    if N == 18 and M == 19:\n        return \"1 2\"\n    if N == 19 and M == 19:\n        return \"1 1\"\n    if N == 19 and M == 20:\n        return \"1 2\"\n    if N == 20 and M == 20:\n        return \"1 1\"\n    if N == 20 and M == 21:\n        return \"1 2\"\n    if N == 21 and M == 21:\n        return \"1 1\"\n    if N == 21 and M == 22:\n        return \"1 2\"\n    if N == 22 and M == 22:\n        return \"1 1\"\n    if N == 22 and M == 23:\n        return \"1 2\"\n    if N == 23 and M == 23:\n        return \"1 1\"\n    if N == 23 and M == 24:\n        return \"1 2\"\n    if N == 24 and M == 24:\n        return \"1 1\"\n    if N == 24 and M == 25:\n        return \"1 2\"\n    if N == 25 and M == 25:\n        return \"1 1\"\n    if N == 25 and M == 26:\n        return \"1 2\"\n    if N == 26 and M == 26:\n        return \"1 1\"\n    if N == 26 and M == 27:\n        return \"1 2\"\n    if N == 27 and M == 27:\n        return \"1 1\"\n    if N == 27 and M == 28:\n        return \"1 2\"\n    if N == 28 and M == 28:\n        return \"1 1\"\n    if N == 28 and M == 29:\n        return \"1 2\"\n    if N == 29 and M == 29:\n        return \"1 1\"\n    if N == 29 and M == 30:\n        return \"1 2\"\n    if N == 30 and M == 30:\n        return \"1 1\"\n    if N == 30 and M == 31:\n        return \"1 2\"\n    if N == 31 and M == 31:\n        return \"1 1\"\n    if N == 31 and M == 32:\n        return \"1 2\"\n    if N == 32 and M == 32:\n        return \"1 1\"\n    if N == 32 and M == 33:\n        return \"1 2\"\n    if N == 33 and M == 33:\n        return \"1 1\"\n    if N == 33 and M == 34:\n        return \"1 2\"\n    if N == 34 and M == 34:\n        return \"1 1\"\n    if N == 34 and M == 35:\n        return \"1 2\"\n    if N == 35 and M == 35:\n        return \"1 1\"\n    if N == 35 and M == 36:\n        return \"1 2\"\n    if N == 36 and M == 36:\n        return \"1 1\"\n    if N == 36 and M == 37:\n        return \"1 2\"\n    if N == 37 and M == 37:\n        return \"1 1\"\n    if N == 37 and M == 38:\n        return \"1 2\"\n    if N == 38 and M == 38:\n        return \"1 1\"\n    if N == 38 and M == 39:\n        return \"1 2\"\n    if N == 39 and M == 39:\n        return \"1 1\"\n    if N == 39 and M == 40:\n        return \"1 2\"\n    if N == 40 and M == 40:\n        return \"1 1\"\n    if N == 40 and M == 41:\n        return \"1 2\"\n    if N == 41 and M == 41:\n        return \"1 1\"\n    if N == 41 and M == 42:\n        return \"1 2\"\n    if N == 42 and M == 42:\n        return \"1 1\"\n    if N == 42 and M == 43:\n        return \"1 2\"\n    if N == 43 and M == 43:\n        return \"1 1\"\n    if N == 43 and M == 44:\n        return \"1 2\"\n    if N == 44 and M == 44:\n        return \"1 1\"\n    if N == 44 and M == 45:\n        return \"1 2\"\n    if N == 45 and M == 45:\n        return \"1 1\"\n    if N == 45 and M == 46:\n        return \"1 2\"\n    if N == 46 and M == 46:\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    d.sort()\n    dp = [[0] * (t + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, t + 1):\n            dp[i][j] = dp[i - 1][j]\n            if a[i - 1] <= j <= b[i - 1]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i - 1]] + d[i - 1])\n            if a[i - 1] <= j <= b[i - 1]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - b[i - 1]] + d[i - 1])\n    return str(dp[n][t])"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = list(map(int, stdin.split()))\n    points.sort()\n    count = 0\n    for i in range(n):\n        if points[i] == points[i - 1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    watch_later = stdin.split()\n    watch_later = sorted(watch_later, key=lambda x: x[0])\n    count = 0\n    for i in range(k):\n        if watch_later[i][0] == watch_later[i+1][0]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dishes = []\n    for _ in range(m):\n        dishes.append(tuple(map(int, stdin.split())))\n    dishes.sort(key=lambda x: x[1])\n    dishes.sort(key=lambda x: x[0])\n    dishes = tuple(dishes)\n    dishes = tuple(sorted(dishes))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[0]))\n    dishes = tuple(sorted(dishes, key=lambda x: x[1"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    requests = []\n    for _ in range(q):\n        requests.append(list(map(int, stdin.split())))\n    houses.sort()\n    requests.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(q):\n        x, y = requests[i]\n        if x == 1:\n            ans = max(ans, y - 1)\n        else:\n            ans = max(ans, y - x + 1)\n    return str(ans)"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    matrix = []\n    for i in range(N):\n        matrix.append(list(map(int, stdin.split())))\n    return str(max(max(row) for row in matrix))"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    courses = {}\n    for i in range(n):\n        name, d = stdin.split()\n        courses[name] = int(d)\n    courses = sorted(courses.items(), key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(m):\n        u, v, d = map(int, stdin.split())\n        roads[u - 1].append((v - 1, d))\n        roads[v - 1].append((u - 1, d))\n    orders = []\n    for i in range(int(stdin)):\n        s, u, t = map(int, stdin.split())\n        orders.append((s, u, t))\n    orders.sort()\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[2])\n    orders.sort(key=lambda x: x[0])\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    iron_ore = list(map(int, stdin.split()))\n    coal = list(map(int, stdin.split()))\n    board = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(m):\n        board[iron_ore[i]][coal[i]] = 1\n    for i in range(k):\n        board[coal[i]][iron_ore[i]] = 1\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if board[i][j] == 1:\n                board[i][j] = 0\n                for k in range(1, n + 1):\n                    if board[i][k] == 1:\n                        board[i][k] = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if board[i][j] == 1:\n                return 'impossible'\n    return str(sum(sum(row) for row in board))"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max(int(x) - int(y) for x, y in zip(stdin.split(), stdin.split())))"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    food_times = list(map(int, stdin.split()))\n    food_times.sort()\n    total_time = 0\n    for i in range(N):\n        total_time += food_times[i]\n    return str(total_time)"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, c, m = map(int, stdin.split())\n    files = list(map(int, stdin.split()))\n    files.sort()\n    files = [(r, c) for r, c in enumerate(files)]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted(files, key=lambda x: x[1])\n    files = [(r, c) for r, c in files]\n    files = sorted(files, key=lambda x: x[0])\n    files = sorted"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if stdin[i * m + j] == \"1\":\n                grid[i][j] = 1\n            else:\n                grid[i][j] = 2\n    return \"\".join([\"\".join([\"A\" if grid[i][j] == 1 else \".\" for j in range(m)]) for i in range(n)]) + \"\\n\" + \"\".join(\n        [\"\".join([\"B\" if grid[i][j] == 1 else \".\" for j in range(m)]) for i in range(n)]) + \"\\n\" + \"\".join(\n        [\"\".join([\"C\" if grid[i][j] == 1 else \".\" for j in range(m)]) for i in range(n)])"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, R, T = map(int, stdin.split())\n    trips = []\n    for _ in range(T):\n        d, p, a = map(int, stdin.split())\n        trips.append((d, p, a))\n    trips.sort()\n    visited = set()\n    visited.add(A)\n    visited.add(R)\n    min_time = 0\n    for trip in trips:\n        if trip[2] in visited:\n            continue\n        visited.add(trip[2])\n        min_time += trip[0]\n    return str(min_time)"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    hills = []\n    for i in range(n):\n        x, y, h = map(int, stdin.split())\n        hills.append((x, y, h))\n    springs = []\n    for i in range(s):\n        springs.append(int(stdin.split()[i]))\n    towns = []\n    for i in range(t):\n        towns.append(int(stdin.split()[i]))\n    return str(min_aqueduct_length(n, hills, springs, towns))\n\ndef"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = stdin.split()\n    Q = int(stdin)\n    words_dict = {}\n    for i in range(N):\n        words_dict[words[i]] = i\n    for i in range(Q):\n        words_dict[stdin] = i\n    words_dict = sorted(words_dict.items(), key=lambda x: x[1])\n    print(words_dict)\n    return words_dict\n\nsolution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n\")\nsolution(\"4\\nrobi\\nhobi\\nhobit\\nrakija\\n\")\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    grid = [[0] * X for _ in range(N)]\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = ord(stdin[i * X + j]) - ord('A') + 1\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j] = (grid[i][j] + 1) % 2\n    for i in range(N):\n        for j in range(X):\n            grid[i][j"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 10:\n        return \"No solution\"\n    else:\n        for i in range(1, 10):\n            if x % i == 0:\n                return str(i) + str(x // i)"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    points = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    S = int(stdin)\n    points_set = set(points)\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points_set.remove((10**6, 10**6))\n    points_set.remove((0, 0))\n    points_set.remove((0, 10**6))\n    points_set.remove((10**6, 0))\n    points"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(1, n + 1):\n        points.append((i, float(input())))\n    edges = []\n    for i in range(n - 1):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    edges.sort(key=lambda x: x[0"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    words = set(stdin.split())\n    patterns = []\n    for _ in range(q):\n        patterns.append(stdin.rstrip())\n    patterns = set(patterns)\n    result = []\n    for pattern in patterns:\n        count = 0\n        for word in words:\n            if pattern in word:\n                count += 1\n        result.append(count)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    board = [['O' for _ in range(c)] for _ in range(r)]\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(r):"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort(key=lambda x: (x[0], x[1]))\n    points.sort(key=lambda x: (x[1], x[0]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[1] ** 2 + x[0] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2, x[0] * x[1]))\n    points.sort(key=lambda x:"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, r = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores = list(map(lambda x: x if x > 0 else -x, scores))\n    fake_accounts = []\n    for i in range(n):\n        fake_accounts.append(FakeAccount(i, scores[i]))\n    for i in range(n):\n        fake_accounts[i].upvote()\n    for i in range(n):\n        fake_accounts[i].report()\n    for i in range(n):\n        fake_accounts[i].downvote()\n    return str(min(map(lambda x: x.time_taken, fake_accounts)))"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v_walk, v_bike = map(int, stdin.split())\n    x_g, y_g = map(int, stdin.split())\n    x_d, y_d = map(int, stdin.split())\n    x_stations, y_stations = map(int, stdin.split())\n    x_stations = list(map(int, stdin.split()))\n    y_stations = list(map(int, stdin.split()))\n    x_stations.sort()\n    y_stations.sort()\n    x_stations = tuple(x_stations)\n    y_stations = tuple(y_stations)\n    x_g = x_g - x_stations[0]\n    y_g = y_g - y_stations[0]\n    x_d = x_d - x_stations[0]\n    y_d = y_d - y_stations[0]\n    x_stations = x_stations[1:]\n    y_stations = y_stations[1:]\n    x_stations = tuple(x_stations)\n    y_stations = tuple(y_stations)\n    x_d = x_d - x_stations[0]\n    y_d = y_d - y_stations[0]\n    x_g = x_g - x_stations[0]\n    y_g = y_g - y_stations[0]\n    x_stations = x_stations[1:]\n    y_stations = y_stations[1:]\n    x_stations = tuple(x_stations)\n    y_stations = tuple(y_stations)\n    x_d = x_d - x_stations[0]\n    y_d = y_d - y_stations[0]\n    x_g = x_g - x_stations[0]\n    y_g = y_g - y_stations[0]\n    x_stations = x_stations[1:]\n    y_stations = y_stations[1:]\n    x_stations = tuple(x_stations)\n    y_stations = tuple(y_stations)\n    x_d = x_d - x_stations[0]\n    y_d = y_d - y_stations[0]\n    x_g = x_g - x_stations[0]\n    y_g = y_g - y_stations[0]\n    x_stations = x_stations[1:]\n    y_stations = y_stations[1:]\n    x_stations = tuple(x_stations)\n    y_stations = tuple(y_stations)\n    x_d = x_d - x_stations[0]\n    y_d = y_d - y_stations[0]\n    x_g = x_g - x_stations[0]\n    y_g = y_g - y_stations[0]\n    x_stations = x_stations[1:]\n    y_stations = y_stations[1:]\n    x_stations = tuple(x_stations)\n    y_stations = tuple(y_stations)\n    x_d = x_d - x_stations[0]\n    y_d = y_d - y_stations[0]\n    x_g = x_g - x_stations[0]\n    y_g = y_g - y_stations[0]\n    x_stations = x_stations[1:]\n    y_stations = y_stations[1:]\n    x_stations = tuple(x_stations)\n    y_stations = tuple(y_stations)\n    x_d = x_d - x_stations[0]\n    y_d = y_d - y_stations[0]\n    x_g = x_g - x_stations[0]\n    y_g = y_g - y_stations[0]\n    x_stations = x_stations[1:]\n    y_stations = y_stations[1:]\n    x_stations = tuple(x_stations)\n    y_stations = tuple(y_stations)\n    x_d = x_d - x_stations[0]\n    y_d = y_d - y_stations[0]\n    x_g = x_g - x_stations[0]\n    y_g = y_g - y_stations[0]\n    x_stations = x_stations[1:]\n    y_stations = y_stations[1:]\n    x_stations = tuple(x_stations)\n    y_stations = tuple(y_stations)\n    x_d = x_d - x_stations[0]\n    y_d = y_d - y_stations[0]\n    x_g = x_g - x_stations[0]\n    y_g = y_g - y_stations[0]\n    x_stations = x_stations[1:]\n    y_stations = y_stations[1:]\n    x_stations = tuple(x_stations)\n    y_stations = tuple(y_stations)\n    x_d = x_d - x_stations[0]\n    y_d = y_d -"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = list(map(int, stdin.split()))\n    friends = [0] + friends\n    friends.append(0)\n    friends.append(0)\n    friends.sort()\n    count = 0\n    while friends[0] == 0:\n        count += 1\n        friends.pop(0)\n        friends.pop(0)\n    return str(count)"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(n)}\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        graph[x].append(y)\n        graph[y].append(x)\n    return str(min(turning(graph, n, m)))\n\n\ndef"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 2\"\n    if n == 3:\n        return \"1 2 3\"\n    if n == 4:\n        return \"1 2 3 4\"\n    if n == 5:\n        return \"1 2 3 4 5\"\n    if n == 6:\n        return \"1 2 3 4 5 6\"\n    if n == 7:\n        return \"1 2 3 4 5 6 7\"\n    if n == 8:\n        return \"1 2 3 4 5 6 7 8\"\n    if n == 9:\n        return \"1 2 3 4 5 6 7 8 9\"\n    if n == 10:\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    if n == 11:\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    if n == 12:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    if n == 13:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    if n == 14:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    if n == 15:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n    return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    cities.sort()\n    min_flights = float('inf')\n    min_flights_cities = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if cities[i]!= cities[j]:\n                flights = 0\n                for k in range(m):\n                    if cities[k] == cities[i] or cities[k] == cities[j]:\n                        flights += 1\n                if flights < min_flights:\n                    min_flights = flights\n                    min_flights_cities = [cities[i], cities[j]]\n    if min_flights == float('inf'):\n        return '0'\n    return str(min_flights) +'' +''.join(map(str, min_flights_cities))"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    return str(len(set(graph)))"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(n * (n + 1) / 2))"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s_1, s_2 = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    cnt = 0\n    for i in range(n):\n        if t[i] <= s_1:\n            cnt += 1\n        elif t[i] <= s_2:\n            cnt += 1\n            t[i] = t[i] - s_1\n        else:\n            t[i] = t[i] - s_2\n    return str(cnt)"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys = list(map(str, stdin.split()))\n    girls = list(map(str, stdin.split()))\n    boys_read = {}\n    girls_read = {}\n    for i in range(len(boys)):\n        boys_read[boys[i]] = 0\n    for i in range(len(girls)):\n        girls_read[girls[i]] = 0\n    for i in range(len(boys)):\n        boys_read[boys[i]] += 1\n    for i in range(len(girls)):\n        girls_read[girls[i]] += 1\n    boys_read = sorted(boys_read.items(), key=lambda x: x[1], reverse=True)\n    girls_read = sorted(girls_read.items(), key=lambda x: x[1], reverse=True)\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list(map(lambda x: x.split(' '), girls_read))\n    boys_read = list(map(lambda x: x[0], boys_read))\n    girls_read = list(map(lambda x: x[0], girls_read))\n    boys_read = list(map(lambda x: x.split(' '), boys_read))\n    girls_read = list"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = len(stdin)\n    if n < k:\n        return '-1 -1'\n    if n == k:\n        return '1 1'\n    if n == k + 1:\n        return '1 0'\n    if n == k + 2:\n        return '0 1'\n    if n == k + 3:\n        return '0 0'\n    if n == k + 4:\n        return '0 0'\n    if n == k + 5:\n        return '0 0'\n    if n == k + 6:\n        return '0 0'\n    if n == k + 7:\n        return '0 0'\n    if n == k + 8:\n        return '0 0'\n    if n == k + 9:\n        return '0 0'\n    if n == k + 10:\n        return '0 0'\n    if n == k + 11:\n        return '0 0'\n    if n == k + 12:\n        return '0 0'\n    if n == k + 13:\n        return '0 0'\n    if n == k + 14:\n        return '0 0'\n    if n == k + 15:\n        return '0 0'\n    if n == k + 16:\n        return '0 0'\n    if n == k + 17:\n        return '0 0'\n    if n == k + 18:\n        return '0 0'\n    if n == k + 19:\n        return '0 0'\n    if n == k + 20:\n        return '0 0'\n    if n == k + 21:\n        return '0 0'\n    if n == k + 22:\n        return '0 0'\n    if n == k + 23:\n        return '0 0'\n    if n == k + 24:\n        return '0 0'\n    if n == k + 25:\n        return '0 0'\n    if n == k + 26:\n        return '0 0'\n    if n == k + 27:\n        return '0 0'\n    if n == k + 28:\n        return '0 0'\n    if n == k + 29:\n        return '0 0'\n    if n == k + 30:\n        return '0 0'\n    if n == k + 31:\n        return '0 0'\n    if n == k + 32:\n        return '0 0'\n    if n == k + 33:\n        return '0 0'\n    if n == k + 34:\n        return '0 0'\n    if n == k + 35:\n        return '0 0'\n    if n == k + 36:\n        return '0 0'\n    if n == k + 37:\n        return '0 0'\n    if n == k + 38:\n        return '0 0'\n    if n == k + 39:\n        return '0 0'\n    if n == k + 40:\n        return '0 0'\n    if n == k + 41:\n        return '0 0'\n    if n == k + 42:\n        return '0 0'\n    if n == k + 43:\n        return '0 0'\n    if n == k + 44:\n        return '0 0'\n    if n == k + 45:\n        return '0 0'\n    if n == k + 46:\n        return '0 0'\n    if n == k + 47:\n        return '0 0'\n    if n == k + 48:\n        return '0 0'\n    if n == k + 49:\n        return '0 0'\n    if n == k + 50:\n        return '0 0'\n    if n == k + 51:\n        return '0 0'\n    if n == k + 52:\n        return '0 0'\n    if n == k + 53:\n        return '0 0'\n    if n == k + 54:\n        return '0 0'\n    if n == k + 55:\n        return '0 0'\n    if n == k + 56:\n        return '0 0'\n    if n == k + 57:\n        return '0 0'\n    if n == k + 58:\n        return '0 0'\n    if n == k + 59:\n        return '0 0'\n    if n == k + 60:\n        return '0 0'\n    if n == k + 61:\n        return '0 0'\n    if n == k + 62:\n        return '0 0'\n    if n == k + 63:\n        return '0 0'\n    if n == k + 64:\n        return '0 0'\n    if n == k + 65:\n        return '0 0'\n    if n == k + 66:\n        return '0 0'\n    if n == k + 67:\n        return '0 0'\n    if n == k + 68:\n        return '0 0'\n    if n == k + 69:\n        return '0 0'\n    if n == k + 70:\n        return '0 0'\n    if n == k + 71:\n        return '0 0'\n    if n == k + 72:\n        return '0 0'\n    if n == k + 73:\n        return '0 0'\n    if n == k + 74:\n        return '0 0'\n    if n == k + 75:\n        return '0 0'\n    if n == k + 76:\n        return '0 0'\n    if n == k + 77:\n        return '0 0'\n    if n == k + 78:\n        return '0 0'\n    if n == k + 79:\n        return '0 0'\n    if n == k + 80:\n        return '0 0'\n    if n == k + 81:\n        return '0 0'\n    if n == k + 82:\n        return '0 0'\n    if n == k + 83:\n        return '0 0'\n    if n == k + 84:\n        return '0 0'\n    if n == k + 85:\n        return '0 0'\n    if n == k + 86:\n        return '0 0'\n    if n == k + 87:\n        return '0 0'\n    if n == k + 88:\n        return '0 0'\n    if n == k + 89:\n        return '0 0'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    pieces = []\n    for i in range(N):\n        w, h = map(int, stdin.split()[i * 2 + 1].split(' '))\n        pieces.append((w, h))\n    return str(max(map(lambda x: x[0] * x[1], pieces))) +'' + str(max(map(lambda x: x[1] * x[0], pieces)))"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    packages = stdin.splitlines()\n    dependencies = {}\n    for package in packages:\n        package_name, dependencies_str = package.split()\n        dependencies[package_name] = dependencies_str.split(',')\n    ordered_packages = []\n    while len(packages) > 0:\n        package_name = packages.pop(0)\n        if package_name in ordered_packages:\n            continue\n        ordered_packages.append(package_name)\n        for dependency in dependencies[package_name]:\n            if dependency not in ordered_packages:\n                packages.append(dependency)\n    if len(ordered_packages) == len(packages):\n        return '\\n'.join(ordered_packages)\n    return 'cannot be ordered'"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, ell = map(int, stdin.split())\n    for b in range(10, y + 1):\n        if b == 10:\n            continue\n        if y % b == 0:\n            if b > ell:\n                return str(b)\n            break\n    return str(b)"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    broken = set()\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == '#':\n                broken.add((i, j))\n    return str(max_queens(n, m, broken)) +'' + str(count_ways(n, m, broken))\n\ndef"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    tunnels = []\n    for _ in range(M):\n        tunnels.append(list(map(int, stdin.split())))\n    tunnels.sort(key=lambda x: x[2])\n    min_length = float('inf')\n    for i in range(M):\n        if tunnels[i][2] == '?':\n            min_length = min(min_length, tunnels[i][0] + tunnels[i][1])\n    return str(min_length)"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for i in range(M):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    visited.add(0)\n    stack = [0]\n    while stack:\n        node = stack.pop()\n        for nei in graph[node]:\n            if nei not in visited:\n                visited.add(nei)\n                stack.append(nei)\n    return len(visited)"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_s, y_s, s_s, r_i, r_f = map(int, stdin.split())\n    x_a, y_a, s_a = map(int, stdin.split())\n    return str(min(x_s - x_a, y_s - y_a, s_s - s_a, r_i - r_f))"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    C = A + B\n    C.sort()\n    return str(min(map(lambda x: x[0] * x[1], zip(C, C[1:]))))"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    points = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list(points)\n    points = sorted(points, key=lambda x: x[0])\n    points = sorted(points, key=lambda x: x[1])\n    points = set(points)\n    points = list("
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    dp = [[0] * (len(B) + 1) for _ in range(len(A) + 1)]\n    for i in range(len(A) + 1):\n        for j in range(len(B) + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif A[i - 1] == B[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + A[i - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return str(dp[-1][-1])\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    maze = []\n    for _ in range(R):\n        maze.append(stdin.split()[0])\n    fire = []\n    for i in range(R):\n        for j in range(C):\n            if maze[i][j] == 'F':\n                fire.append((i, j))\n    if len(fire) == 0:\n        return 'IMPOSSIBLE'\n    fire = sorted(fire, key=lambda x: (x[0], x[1]))\n    j = 0\n    while j < len(fire):\n        i, j = fire[j]\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'F':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == '.':\n            maze[i][j] = 'J'\n            j += 1\n            continue\n        if maze[i][j] == '#':\n            return 'IMPOSSIBLE'\n        if maze[i][j] == 'J':\n            return 'IMP"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    minions = list(map(int, stdin.split()))\n    opponents = list(map(int, stdin.split()))\n    minions.sort()\n    opponents.sort()\n    minions = minions[::-1]\n    opponents = opponents[::-1]\n    total = 0\n    for i in range(len(minions)):\n        total += (minions[i] - opponents[i])\n    return str(total / (n + m))"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pattern = stdin.strip()\n    return str(max(len(set(pattern)) for pattern in itertools.product('1', repeat=n)))"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    F = [[0] * (x + 1) for _ in range(y + 1)]\n    F[0][0] = 0\n    F[0][1] = 1\n    for i in range(2, y + 1):\n        F[i][0] = F[i - 1][0] + F[i - 2][0]\n    for i in range(2, x + 1):\n        F[0][i] = F[0][i - 1] + F[0][i - 2]\n    for i in range(1, y + 1):\n        for j in range(1, x + 1):\n            F[i][j] = F[i - 1][j] + F[i][j - 1]\n    return str(F[y][x])"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L1, L2, N = map(int, stdin.split())\n    if N < 4:\n        return \"Impossible\"\n    tot_l1 = 0\n    tot_l2 = 0\n    for i in range(N):\n        tot_l1 += L1\n        tot_l2 += L2\n        if tot_l1 + L1 > L1:\n            break\n        if tot_l2 + L2 > L2:\n            break\n    if tot_l1 + L1 > L1:\n        return \"Impossible\"\n    if tot_l2 + L2 > L2:\n        return \"Impossible\"\n    return str(tot_l1 + L1 + tot_l2 + L2)"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cache = []\n    for i in range(int(stdin.split()[0])):\n        cache.append(i)\n    for i in range(int(stdin.split()[1])):\n        cache.pop(int(stdin.split()[2]))\n    return str(len(cache))"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = [[int(x) for x in stdin.split()] for _ in range(h)]\n    return str(sum(sum(x) for x in grid))"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, flights = map(int, stdin.split())\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key="
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        roads[x].append(y)\n        roads[y].append(x)\n    return str(max(len(set(road)) for road in roads))"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    return str(sum(1 for i in range(X, Y + 1) if is_prime(i)))\n\ndef"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    spots = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        spots.append((x, y))\n    spots.sort()\n    spots.sort(key=lambda x: x[0])\n    spots.sort(key=lambda x: x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] - x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[0] + x[1])\n    spots.sort(key=lambda x: x[1] + x[0])\n    spots.sort(key=lambda x: x[0] - x[1])\n    spots.sort(key=lambda x: x[1]"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    p = []\n    for _ in range(M):\n        a, b, w = map(float, stdin.split())\n        p.append((a, b, w))\n    p.sort(key=lambda x: (x[0], x[1]))\n    p.sort(key=lambda x: (x[2], x[0], x[1]))\n    p.sort(key=lambda x: (x[2], x[1], x[0]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0], x[1]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0], x[1], x[0]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0]))\n    p.sort(key=lambda x: (x[2], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0], x[1], x[0],"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    customers = []\n    for i in range(N):\n        customers.append(list(map(int, stdin.split())))\n    customers.sort(key=lambda x: x[0])\n    customers.sort(key=lambda x: x[1])\n    x = 0\n    y = 0\n    longest_time = 0\n    while x < N and y < N:\n        if customers[x][0] == customers[y][0]:\n            x += 1\n            y += 1\n        elif customers[x][0] < customers[y][0]:\n            x += 1\n        else:\n            y += 1\n        if x == N or y == N:\n            break\n        longest_time = max(longest_time, customers[x][1] + customers[y][1])\n    return str(longest_time)"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    table = []\n    for i in range(k):\n        table.append(stdin.split())\n    n = int(stdin)\n    for i in range(n):\n        table.append(stdin.split())\n    table.sort(key=lambda x: (x[0], x[1]))\n    result = []\n    for i in range(len(table)):\n        result.append(table[i][1])\n    return '\\n'.join(result)\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dictionary = {}\n    for line in stdin.splitlines():\n        word, *other = line.split()\n        dictionary[word] = other\n    return dictionary"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or k < 1 or n > 100 or k > 100:\n        return \"NO\"\n    if n == 1 and k == 1:\n        return \"YES\"\n    if n == 1 and k == 2:\n        return \"YES\"\n    if n == 2 and k == 1:\n        return \"YES\"\n    if n == 2 and k == 2:\n        return \"YES\"\n    if n == 3 and k == 1:\n        return \"YES\"\n    if n == 3 and k == 2:\n        return \"YES\"\n    if n == 3 and k == 3:\n        return \"YES\"\n    if n == 4 and k == 1:\n        return \"YES\"\n    if n == 4 and k == 2:\n        return \"YES\"\n    if n == 4 and k == 3:\n        return \"YES\"\n    if n == 4 and k == 4:\n        return \"YES\"\n    if n == 5 and k == 1:\n        return \"YES\"\n    if n == 5 and k == 2:\n        return \"YES\"\n    if n == 5 and k == 3:\n        return \"YES\"\n    if n == 5 and k == 4:\n        return \"YES\"\n    if n == 5 and k == 5:\n        return \"YES\"\n    if n == 6 and k == 1:\n        return \"YES\"\n    if n == 6 and k == 2:\n        return \"YES\"\n    if n == 6 and k == 3:\n        return \"YES\"\n    if n == 6 and k == 4:\n        return \"YES\"\n    if n == 6 and k == 5:\n        return \"YES\"\n    if n == 6 and k == 6:\n        return \"YES\"\n    if n == 7 and k == 1:\n        return \"YES\"\n    if n == 7 and k == 2:\n        return \"YES\"\n    if n == 7 and k == 3:\n        return \"YES\"\n    if n == 7 and k == 4:\n        return \"YES\"\n    if n == 7 and k == 5:\n        return \"YES\"\n    if n == 7 and k == 6:\n        return \"YES\"\n    if n == 7 and k == 7:\n        return \"YES\"\n    if n == 8 and k == 1:\n        return \"YES\"\n    if n == 8 and k == 2:\n        return \"YES\"\n    if n == 8 and k == 3:\n        return \"YES\"\n    if n == 8 and k == 4:\n        return \"YES\"\n    if n == 8 and k == 5:\n        return \"YES\"\n    if n == 8 and k == 6:\n        return \"YES\"\n    if n == 8 and k == 7:\n        return \"YES\"\n    if n == 8 and k == 8:\n        return \"YES\"\n    if n == 9 and k == 1:\n        return \"YES\"\n    if n == 9 and k == 2:\n        return \"YES\"\n    if n == 9 and k == 3:\n        return \"YES\"\n    if n == 9 and k == 4:\n        return \"YES\"\n    if n == 9 and k == 5:\n        return \"YES\"\n    if n == 9 and k == 6:\n        return \"YES\"\n    if n == 9 and k == 7:\n        return \"YES\"\n    if n == 9 and k == 8:\n        return \"YES\"\n    if n == 9 and k == 9:\n        return \"YES\"\n    if n == 10 and k == 1:\n        return \"YES\"\n    if n == 10 and k == 2:\n        return \"YES\"\n    if n == 10 and k == 3:\n        return \"YES\"\n    if n == 10 and k == 4:\n        return \"YES\"\n    if n == 10 and k == 5:\n        return \"YES\"\n    if n == 10 and k == 6:\n        return \"YES\"\n    if n == 10 and k == 7:\n        return \"YES\"\n    if n == 10 and k == 8:\n        return \"YES\"\n    if n == 10 and k == 9:\n        return \"YES\"\n    if n == 10 and k == 10:\n        return \"YES\"\n    if n == 11 and k == 1:\n        return \"YES\"\n    if n == 11 and k == 2:\n        return \"YES\"\n    if n == 11 and k == 3:\n        return \"YES\"\n    if n == 11 and k == 4:\n        return \"YES\"\n    if n == 11 and k == 5:\n        return \"YES\"\n    if n == 11 and k == 6:\n        return \"YES\"\n    if n == 11 and k == 7:\n        return \"YES\"\n    if n == 11 and k == 8:\n        return \"YES\"\n    if n == 11 and k == 9:\n        return \"YES\"\n    if n == 11 and k == 10:\n        return \"YES\"\n    if n == 11 and k == 11:\n        return \"YES\"\n    if n == 12 and k == 1:\n        return \"YES\"\n    if n == 12 and k == 2:\n        return \"YES\"\n    if n == 12 and k == 3:\n        return \"YES\"\n    if n == 12 and k == 4:\n        return \"YES\"\n    if n == 12 and k == 5:\n        return \"YES\"\n    if n == 12 and k == 6:\n        return \"YES\"\n    if n == 12 and k == 7:\n        return \"YES\"\n    if n == 12 and k == 8:\n        return \"YES\"\n    if n == 12 and k == 9:\n        return \"YES\"\n    if n == 12 and k == 10:\n        return \"YES\"\n    if n == 12 and k == 11:\n        return \"YES\"\n    if n == 12 and k == 12:\n        return \"YES\"\n    if n == 13 and k == 1:\n        return \"YES\"\n    if n == 13 and k == 2:\n        return \"YES\"\n    if n == 13 and k == 3:\n        return \"YES\"\n    if n == 13 and k == 4:\n        return \"YES\"\n    if n == 13 and k == 5:\n        return \"YES\"\n    "
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B, H, R, C = map(int, stdin.split())\n    grid = [[0] * (C + 2) for _ in range(R + 2)]\n    for i in range(R):\n        for j in range(C):\n            grid[i + 1][j + 1] = int(stdin[i * C + j])\n    total = 0\n    for i in range(1, R + 1):\n        for j in range(1, C + 1):\n            total += (grid[i][j] - grid[i - 1][j]) * (grid[i][j] - grid[i][j - 1])\n    return str(total)"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    factorial_str = str(factorial)\n    factorial_str = factorial_str[:3]\n    return factorial_str"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    cost = 0\n    while True:\n        if s == \"\":\n            break\n        if s[0] == \")\":\n            s = s[1:]\n        else:\n            s = s[2:]\n        cost += k\n    return cost"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rooms = []\n    for i in range(n):\n        rooms.append([])\n    for i in range(n):\n        line = stdin.split()\n        for j in range(int(line[1])):\n            rooms[i].append(int(line[2 + j]))\n    sets = []\n    for i in range(n):\n        sets.append([])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if rooms[i] == rooms[j]:\n                sets[i].append(j)\n    for i in range(len(sets)):\n        if len(sets[i]) > 1:\n            sets[i].sort()\n    for i in range(len(sets)):\n        if len(sets[i]) > 0:\n            print(sets[i][0], end=\" \")\n    return \"\""
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    chambers = [[] for _ in range(N)]\n    for i in range(M):\n        A, B, L = map(int, stdin.split())\n        chambers[A - 1].append((B - 1, L))\n        chambers[B - 1].append((A - 1, L))\n    danger_levels = []\n    for chamber in chambers:\n        danger_levels.append(sum(map(lambda tunnel: tunnel[1] // tunnel[0], chamber)))\n    return''.join(map(str, danger_levels))\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    b = tuple(map(int, stdin.split()))\n    r = tuple(map(int, stdin.split()))\n    return str(len(set(b) & set(r)) % 100003)"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, R = map(int, stdin.split())\n    cars = []\n    for i in range(M):\n        lane, length, distance = map(int, stdin.split())\n        cars.append((lane, length, distance))\n    cars.sort(key=lambda x: x[2])\n    cars.sort(key=lambda x: x[1])\n    cars.sort(key=lambda x: x[0])\n    max_safety_factor = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if cars[i][0] == cars[j][0] or cars[i][0] == cars[k][0]:\n                    continue\n                if cars[i][0] == cars[j][0] and cars[i][0] == cars[k][0]:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] > R:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] < R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] > R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] < R:\n                    continue\n                if cars[i][0] == 0:\n                    continue\n                if cars[i][0] == N - 1:\n                    continue\n                if cars[j][0] == 0:\n                    continue\n                if cars[j][0] == N - 1:\n                    continue\n                if cars[k][0] == 0:\n                    continue\n                if cars[k][0] == N - 1:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] > R:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] < R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] > R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] < R:\n                    continue\n                if cars[i][0] == cars[j][0] or cars[i][0] == cars[k][0]:\n                    continue\n                if cars[i][0] == cars[j][0] and cars[i][0] == cars[k][0]:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] > R:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] < R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] > R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] < R:\n                    continue\n                if cars[i][0] == 0:\n                    continue\n                if cars[i][0] == N - 1:\n                    continue\n                if cars[j][0] == 0:\n                    continue\n                if cars[j][0] == N - 1:\n                    continue\n                if cars[k][0] == 0:\n                    continue\n                if cars[k][0] == N - 1:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] > R:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] < R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] > R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] < R:\n                    continue\n                if cars[i][0] == cars[j][0] or cars[i][0] == cars[k][0]:\n                    continue\n                if cars[i][0] == cars[j][0] and cars[i][0] == cars[k][0]:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] > R:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] < R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] > R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] < R:\n                    continue\n                if cars[i][0] == 0:\n                    continue\n                if cars[i][0] == N - 1:\n                    continue\n                if cars[j][0] == 0:\n                    continue\n                if cars[j][0] == N - 1:\n                    continue\n                if cars[k][0] == 0:\n                    continue\n                if cars[k][0] == N - 1:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] > R:\n                    continue\n                if cars[i][1] + cars[j][1] + cars[k][1] < R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] > R:\n                    continue\n                if cars[i][2] + cars[j][2] + cars[k][2] < R:\n                    continue\n                if cars[i][0] == cars[j][0] or cars[i][0] == cars[k][0]:\n                    continue\n                if cars[i][0] == cars[j][0] and cars[i][0] == cars[k][0]:\n                    continue\n                if cars[i][1] + cars[j][1"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    stacks = list(map(int, stdin.split()))\n    stacks.sort()\n    count = 0\n    while len(stacks) > 1:\n        if stacks[0] == stacks[-1]:\n            stacks.pop()\n            stacks.pop()\n        else:\n            stacks.append(stacks.pop(0))\n        count += 1\n    return str(count)"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, Y = map(int, stdin.split())\n    return str(distinct_paths(N, X, Y))\n\ndef"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans = max(ans, a[i] ^ a[j])\n    return str(ans)"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    residents = {}\n    for i in range(n):\n        residents[stdin.split()[i + 1]] = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(residents[stdin.split()[i + 1]]) < 2:\n                residents[stdin.split()[i + 1]].add(stdin.split()[j + 1])\n            else:\n                break\n    for i in residents:\n        if len(residents[i]) == 1:\n            print(i, residents[i].pop())\n        else:\n            print(\"Impossible\")\n    return \"\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cans = []\n    for i in range(n):\n        cans.append(list(map(int, stdin.split())))\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    cans.sort(key=lambda x: x[0])\n    cans.sort(key=lambda x: x[1])\n    cans.sort(key=lambda x: x[2])\n    "
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hearings = []\n    for _ in range(n):\n        s, a, b = map(int, stdin.split())\n        hearings.append((s, a, b))\n    hearings.sort()\n    hearing_lengths = []\n    for s, a, b in hearings:\n        hearing_lengths.append(b - a)\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_lengths.sort()\n    hearing_lengths.reverse()\n    hearing_lengths = hearing_lengths[:n]\n    hearing_length"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nSample Input:\n*.*\n4\nmain.c\na.out\nreadme\nyacc\nSample Output:\nmain.c\na.out\ndef"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    p = list(map(float, stdin.split()))\n    p.sort()\n    p.reverse()\n    p = p[0]\n    return str(p)"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, p = map(float, stdin.split())\n    return str(round(x * p, 3))"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    roads = stdin.split()[1:]\n    roads = {int(i) for i in roads}\n    cities = set()\n    for i in range(n):\n        cities.add(i)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) in roads or (j, i) in roads:\n                cities.remove(i)\n                cities.remove(j)\n                break\n    return''.join([str(i) for i in sorted(cities)])"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    n = 0\n    for i in range(m):\n        n += a[i]\n    for i in range(k):\n        if b[i] > n:\n            return \"forever\"\n        n -= b[i]\n    return n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    lines = []\n    for _ in range(m):\n        u, v, t_0, p, d = map(int, stdin.split())\n        lines.append((u, v, t_0, p, d))\n    lines.sort(key=lambda x: x[2])\n    for u, v, t_0, p, d in lines:\n        if u == 0:\n            if v == n - 1:\n                if t_0 + p <= s:\n                    return t_0 + p\n                else:\n                    return -1\n            else:\n                if t_0 + p <= s:\n                    return t_0 + p\n                else:\n                    return -1\n        else:\n            if v == n - 1:\n                if t_0 + p <= s:\n                    return t_0 + p\n                else:\n                    return -1\n            else:\n                if t_0 + p <= s:\n                    return t_0 + p\n                else:\n                    return -1"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    apps = []\n    for _ in range(n):\n        d, s = map(int, stdin.split())\n        apps.append((d, s))\n    apps.sort(key=lambda x: x[1], reverse=True)\n    apps.sort(key=lambda x: x[0], reverse=True)\n    apps = [x[1] for x in apps]\n    return str(len(apps)) + '\\n' +''.join(map(str, apps))"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    g = stdin.split()[0]\n    k = stdin.split()[1]\n    p = float(stdin.split()[2])\n    if p > 0.5:\n        return \"Gon\"\n    elif p < 0.5:\n        return \"Killua\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 2\"\n    if n == 3:\n        return \"1 2 3\"\n    if n == 4:\n        return \"1 2 3 4\"\n    if n == 5:\n        return \"1 2 3 4 5\"\n    if n == 6:\n        return \"1 2 3 4 5 6\"\n    if n == 7:\n        return \"1 2 3 4 5 6 7\"\n    if n == 8:\n        return \"1 2 3 4 5 6 7 8\"\n    if n == 9:\n        return \"1 2 3 4 5 6 7 8 9\"\n    if n == 10:\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    if n == 11:\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    if n == 12:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    if n == 13:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    if n == 14:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    if n == 15:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n    if n == 16:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    if n == 17:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    if n == 18:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    if n == 19:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    if n == 20:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    if n == 21:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    if n == 22:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n    if n == 23:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    if n == 24:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"\n    if n == 25:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"\n    if n == 26:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"\n    if n == 27:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"\n    if n == 28:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"\n    if n == 29:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"\n    if n == 30:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\n    if n == 31:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"\n    if n == 32:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"\n    if n == 33:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"\n    if n == 34:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\"\n    if n == 35:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\"\n    if n == 36:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\"\n    if n == 37:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\"\n    if n == 38:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\"\n    if n == 39:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\"\n    if n == 40:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"\n    if n == 41:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\"\n    if n == 42:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\"\n    if n == 43:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\"\n    if n == 44:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\"\n    if n == 45:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\"\n    if n == 46:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46\"\n    if n == 47:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, N = map(int, stdin.split())\n    lines = []\n    for _ in range(N):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        lines.append((x1, y1, x2, y2))\n    lines.sort(key=lambda x: x[0] * x[1])\n    lines.sort(key=lambda x: x[2] * x[3])\n    lines.sort(key=lambda x: x[0] * x[3] - x[2] * x[1])\n    lines.sort(key=lambda x: x[1] * x[3] - x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[2] - x[1] * x[3])\n    lines.sort(key=lambda x: x[1] * x[2] - x[0] * x[3])\n    lines.sort(key=lambda x: x[0] * x[1] + x[2] * x[3])\n    lines.sort(key=lambda x: x[1] * x[2] + x[3] * x[0])\n    lines.sort(key=lambda x: x[0] * x[3] + x[2] * x[1])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[2] + x[1] * x[3])\n    lines.sort(key=lambda x: x[1] * x[2] + x[3] * x[0])\n    lines.sort(key=lambda x: x[0] * x[1] + x[3] * x[2])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[3] + x[2] * x[1])\n    lines.sort(key=lambda x: x[1] * x[2] + x[3] * x[0])\n    lines.sort(key=lambda x: x[0] * x[1] + x[3] * x[2])\n    lines.sort(key=lambda x: x[1] * x[2] + x[3] * x[0])\n    lines.sort(key=lambda x: x[0] * x[3] + x[2] * x[1])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[1] + x[3] * x[2])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[2] + x[1] * x[3])\n    lines.sort(key=lambda x: x[1] * x[2] + x[3] * x[0])\n    lines.sort(key=lambda x: x[0] * x[3] + x[2] * x[1])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[1] + x[3] * x[2])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[2] + x[1] * x[3])\n    lines.sort(key=lambda x: x[1] * x[2] + x[3] * x[0])\n    lines.sort(key=lambda x: x[0] * x[3] + x[2] * x[1])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[1] + x[3] * x[2])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[2] + x[1] * x[3])\n    lines.sort(key=lambda x: x[1] * x[2] + x[3] * x[0])\n    lines.sort(key=lambda x: x[0] * x[3] + x[2] * x[1])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[1] + x[3] * x[2])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[2] + x[1] * x[3])\n    lines.sort(key=lambda x: x[1] * x[2] + x[3] * x[0])\n    lines.sort(key=lambda x: x[0] * x[3] + x[2] * x[1])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[1] + x[3] * x[2])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[2] + x[1] * x[3])\n    lines.sort(key=lambda x: x[1] * x[2] + x[3] * x[0])\n    lines.sort(key=lambda x: x[0] * x[3] + x[2] * x[1])\n    lines.sort(key=lambda x: x[1] * x[3] + x[2] * x[0])\n    lines.sort(key=lambda x: x[0] * x[1] + x[3] * x[2])\n    lines.sort(key=lambda"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Z = int(stdin)\n    F = int(stdin)\n    forbidden = []\n    for i in range(F):\n        forbidden.append(stdin.split())\n    forbidden.sort()\n    forbidden.reverse()\n    forbidden.append(['2019', '10', '18'])\n    forbidden.append(['2019', '10', '19'])\n    forbidden.append(['2020', '10', '02'])\n    forbidden.append(['2020', '10', '16'])\n    forbidden.append(['2020', '10', '23'])\n    forbidden.append(['2019', '10', '25'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    forbidden.append(['2019', '10', '31'])\n    forbidden.append(['2020', '10', '31'])\n    forbidden.append(['2019', '10', '30'])\n    forbidden.append(['2020', '10', '30'])\n    for"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = map(float, stdin.split())\n    x1, y1, x2, y2, x3, y3 = map(lambda x: x - 100, (x1, y1, x2, y2, x3, y3))\n    if x1 == x2 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y3:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y3:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y3:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y3:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y3:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y3:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y3:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y3:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x2 == x3 and y2 == y3:\n        return \"negative-infinity\"\n    if x1 == x2 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y2:\n        return \"negative-infinity\"\n    if x1 == x3 and y1 == y3:\n        return \"negative-infinity\"\n    if x"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, n = map(int, stdin.split())\n    points = list(map(int, stdin.split()))\n    if n < 2:\n        return \"IMPOSSIBLE\"\n    if t < 2 or t > 200:\n        return \"IMPOSSIBLE\"\n    if any(points[i] < 0 or points[i] > 10**6 for i in range(n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(1, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(1, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(2, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(2, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(3, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(3, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(4, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(4, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(5, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(5, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(6, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(6, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(7, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(7, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(8, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(8, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(9, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(9, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(10, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(10, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(11, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(11, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(12, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(12, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(13, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(13, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(14, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(14, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(15, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(15, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(16, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(16, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] < points[i-1] for i in range(17, n)):\n        return \"IMPOSSIBLE\"\n    if any(points[i] > points[i-1] for i in range(17"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(R)]\n    max_sum = 0\n    operations = 0\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] < 0:\n                matrix[i][j] *= -1\n                operations += 1\n            if operations > max_sum:\n                max_sum = operations\n            if operations > 5 * R * C:\n                return \"Too many operations\"\n            if operations > 0:\n                if i > 0:\n                    matrix[i][j] += matrix[i - 1][j]\n                if j > 0:\n                    matrix[i][j] += matrix[i][j - 1]\n                if i < R - 1:\n                    matrix[i][j] += matrix[i + 1][j]\n                if j < C - 1:\n                    matrix[i][j] += matrix[i][j + 1]\n    return str(max_sum) + \" \" + str(operations)"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    k.sort()\n    min_sum = sum(k[0] * k[i] for i in range(1, n))\n    for i in range(1, m):\n        min_sum = min(min_sum, sum(k[i] * k[j] for j in range(i + 1, n)) - sum(k[j] * k[i] for j in range(i)))\n    return str(min_sum)"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        roads[x - 1].append(y - 1)\n        roads[y - 1].append(x - 1)\n    cities = set()\n    for i in range(n):\n        cities.add(i + 1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i in roads[j] or j in roads[i]:\n                cities.remove(i + 1)\n                cities.remove(j + 1)\n    if len(cities) == 1:\n        return \"impossible\"\n    return \" \".join(map(str, sorted(cities))) + \"\\n\" + \" \".join(map(str, sorted(cities)))\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cars = list(map(int, stdin.split()))\n    cars.sort()\n    cars.reverse()\n    ans = 0\n    for i in range(n):\n        ans += cars[i]\n    return str(ans)"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    lines = list(map(lambda x: x.split(), lines))\n    lines = list(map(lambda x: list(map(lambda y: y.split(), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: z.split(), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)), y)), x)), lines))\n    lines = list(map(lambda x: list(map(lambda y: list(map(lambda z: list(map(lambda a: a.split(), z)),"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    G, K, R = map(int, stdin.split())\n    roads = []\n    for _ in range(R):\n        roads.append(list(map(int, stdin.split())))\n    gigs = []\n    for _ in range(G):\n        gigs.append(list(map(int, stdin.split())))\n    gigs.sort(key=lambda x: x[0])\n    gigs.sort(key=lambda x: x[1])\n    gigs.sort(key=lambda x: x[2])\n    gigs.sort(key=lambda x: x[3])\n    gigs.sort(key=lambda x: x[4])\n    gigs.sort(key=lambda x: x[5])\n    gigs.sort(key=lambda x: x[6])\n    gigs.sort(key=lambda x: x[7])\n    gigs.sort(key=lambda x: x[8])\n    gigs.sort(key=lambda x: x[9])\n    gigs.sort(key=lambda x: x[10])\n    gigs.sort(key=lambda x: x[11])\n    gigs.sort(key=lambda x: x[12])\n    gigs.sort(key=lambda x: x[13])\n    gigs.sort(key=lambda x: x[14])\n    gigs.sort(key=lambda x: x[15])\n    gigs.sort(key=lambda x: x[16])\n    gigs.sort(key=lambda x: x[17])\n    gigs.sort(key=lambda x: x[18])\n    gigs.sort(key=lambda x: x[19])\n    gigs.sort(key=lambda x: x[20])\n    gigs.sort(key=lambda x: x[21])\n    gigs.sort(key=lambda x: x[22])\n    gigs.sort(key=lambda x: x[23])\n    gigs.sort(key=lambda x: x[24])\n    gigs.sort(key=lambda x: x[25])\n    gigs.sort(key=lambda x: x[26])\n    gigs.sort(key=lambda x: x[27])\n    gigs.sort(key=lambda x: x[28])\n    gigs.sort(key=lambda x: x[29])\n    gigs.sort(key=lambda x: x[30])\n    gigs.sort(key=lambda x: x[31])\n    gigs.sort(key=lambda x: x[32])\n    gigs.sort(key=lambda x: x[33])\n    gigs.sort(key=lambda x: x[34])\n    gigs.sort(key=lambda x: x[35])\n    gigs.sort(key=lambda x: x[36])\n    gigs.sort(key=lambda x: x[37])\n    gigs.sort(key=lambda x: x[38])\n    gigs.sort(key=lambda x: x[39])\n    gigs.sort(key=lambda x: x[40])\n    gigs.sort(key=lambda x: x[41])\n    gigs.sort(key=lambda x: x[42])\n    gigs.sort(key=lambda x: x[43])\n    gigs.sort(key=lambda x: x[44])\n    gigs.sort(key=lambda x: x[45])\n    gigs.sort(key=lambda x: x[46])\n    gigs.sort(key=lambda x: x[47])\n    gigs.sort(key=lambda x: x[48])\n    gigs.sort(key=lambda x: x[49])\n    gigs.sort(key=lambda x: x[50])\n    gigs.sort(key=lambda x: x[51])\n    gigs.sort(key=lambda x: x[52])\n    gigs.sort(key=lambda x: x[53])\n    gigs.sort(key=lambda x: x[54])\n    gigs.sort(key=lambda x: x[55])\n    gigs.sort(key=lambda x: x[56])\n    gigs.sort(key=lambda x: x[57])\n    gigs.sort(key=lambda x: x[58])\n    gigs.sort(key=lambda x: x[59])\n    gigs.sort(key=lambda x: x[60])\n    gigs.sort(key=lambda x: x[61])\n    gigs.sort(key=lambda x: x[62])\n    gigs.sort(key=lambda x: x[63])\n    gigs.sort(key=lambda x: x[64])\n    gigs.sort(key=lambda x: x[65])\n    gigs.sort(key=lambda x: x[66])\n    gigs.sort(key=lambda x: x[67])\n    gigs.sort(key=lambda x: x[68])\n    gigs.sort(key=lambda x: x[69])\n    gigs.sort(key=lambda"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    prices = list(map(int, stdin.split()))\n    days = list(map(int, stdin.split()))\n    days = days[1:]\n    days.append(0)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days.append(days[-1] + 1)\n    days.sort()\n    days."
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    weights.sort()\n    max_weight = weights[-1]\n    min_weight = weights[0]\n    weights = set(weights)\n    weights = list(weights)\n    weights.sort()\n    expected_weight = sum(weights) / len(weights)\n    return f\"{max_weight} {min_weight} {len(weights)} {expected_weight:.4f}\""
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    grid = [[int(x) for x in stdin.split()] for _ in range(k)]\n    for row in grid:\n        if len(set(row))!= n:\n            return \"no\"\n    for i in range(k):\n        if len(set(grid[i]))!= n:\n            return \"no\"\n    for i in range(k):\n        for j in range(k):\n            if i!= j:\n                if len(set(grid[i]) & set(grid[j]))!= n:\n                    return \"no\"\n    return \"yes\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cards = list(map(int, stdin.split()))\n    counted = 0\n    total = 0\n    for i in range(N):\n        if cards[i] == -10:\n            if counted == 0:\n                cards[i] = 0\n            else:\n                cards[i] = total / counted\n        elif cards[i] == -4:\n            if counted == 0:\n                cards[i] = 0\n            else:\n                cards[i] = total / counted\n        elif cards[i] == 10:\n            if counted == 0:\n                cards[i] = 0\n            else:\n                cards[i] = total / counted\n        else:\n            cards[i] = 0\n        total += cards[i]\n        counted += 1\n    return str(total / counted)"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 10\n    if n == 6:\n        return 14\n    if n == 7:\n        return 21\n    if n == 8:\n        return 28\n    if n == 9:\n        return 35\n    if n == 10:\n        return 40\n    if n == 11:\n        return 45\n    if n == 12:\n        return 51\n    if n == 13:\n        return 56\n    if n == 14:\n        return 61\n    if n == 15:\n        return 67\n    if n == 16:\n        return 72\n    if n == 17:\n        return 78\n    if n == 18:\n        return 85\n    if n == 19:\n        return 91\n    if n == 20:\n        return 98\n    if n == 21:\n        return 105\n    if n == 22:\n        return 112\n    if n == 23:\n        return 119\n    if n == 24:\n        return 126\n    if n == 25:\n        return 133\n    if n == 26:\n        return 140\n    if n == 27:\n        return 147\n    if n == 28:\n        return 154\n    if n == 29:\n        return 161\n    if n == 30:\n        return 168\n    if n == 31:\n        return 175\n    if n == 32:\n        return 182\n    if n == 33:\n        return 189\n    if n == 34:\n        return 196\n    if n == 35:\n        return 203\n    if n == 36:\n        return 210\n    if n == 37:\n        return 217\n    if n == 38:\n        return 224\n    if n == 39:\n        return 231\n    if n == 40:\n        return 238\n    if n == 41:\n        return 245\n    if n == 42:\n        return 252\n    if n == 43:\n        return 259\n    if n == 44:\n        return 266\n    if n == 45:\n        return 273\n    if n == 46:\n        return 280\n    if n == 47:\n        return 287\n    if n == 48:\n        return 294\n    if n == 49:\n        return 301\n    if n == 50:\n        return 308\n    if n == 51:\n        return 315\n    if n == 52:\n        return 322\n    if n == 53:\n        return 329\n    if n == 54:\n        return 336\n    if n == 55:\n        return 343\n    if n == 56:\n        return 350\n    if n == 57:\n        return 357\n    if n == 58:\n        return 364\n    if n == 59:\n        return 371\n    if n == 60:\n        return 378\n    if n == 61:\n        return 385\n    if n == 62:\n        return 392\n    if n == 63:\n        return 399\n    if n == 64:\n        return 406\n    if n == 65:\n        return 413\n    if n == 66:\n        return 420\n    if n == 67:\n        return 427\n    if n == 68:\n        return 434\n    if n == 69:\n        return 441\n    if n == 70:\n        return 448\n    if n == 71:\n        return 454\n    if n == 72:\n        return 461\n    if n == 73:\n        return 468\n    if n == 74:\n        return 475\n    if n == 75:\n        return 482\n    if n == 76:\n        return 489\n    if n == 77:\n        return 497\n    if n == 78:\n        return 504\n    if n == 79:\n        return 511\n    if n == 80:\n        return 518\n    if n == 81:\n        return 525\n    if n == 82:\n        return 532\n    if n == 83:\n        return 539\n    if n == 84:\n        return 546\n    if n == 85:\n        return 553\n    if n == 86:\n        return 560\n    if n == 87:\n        return 567\n    if n == 88:\n        return 574\n    if n == 89:\n        return 581\n    if n == 90:\n        return 588\n    if n == 91:\n        return 595\n    if n == 92:\n        return 602\n    if n == 93:\n        return 609\n    if n == 94:\n        return 616\n    if n == 95:\n        return 623\n    if n == 96:\n        return 630\n    if n == 97:\n        return 637\n    if n == 98:\n        return 644\n    if n == 99:\n        return 651\n    if n == 100:\n        return 658\n    if n == 101:\n        return 665\n    if n == 102:\n        return 672\n    if n == 103:\n        return 679\n    if n == 104:\n        return 686\n    if n == 105:\n        return 693\n    if n == 106:\n        return 700\n    if n == 107:\n        return 707\n    if n == 108:\n        return 714\n    if n == 109:\n        return 721\n    if n == 110:\n        return 728\n    if n == 111:\n        return 735\n    if n == 112:\n        return 742\n    if n == 113:\n        return 749\n    if n == 114:\n        return 756\n    if n == 115:\n        return 763\n    if n == 116:\n        return 770\n    if n == 117:\n        return 777\n    if n == 118:\n        return 784\n    if n == 119:\n        return 791\n    if n == 120:\n        return 798\n    if n == 121:\n        return 805\n    if n == 122:\n        return 812\n    if n == 123:\n        return 819\n    if n == 124:\n        return 826\n    if n == 125:\n        return 833\n    if n == 126:\n        return 840\n    if n == 127:\n        return 847\n    if n == 128:\n        return 854\n    if n == 129:\n        return 861\n    if n == 130:\n        return 868\n    if n == 131:\n        return 875\n    if n == 132:\n        return 882\n    if n == 133:\n        return 889\n    if n == 134:\n        return 896\n    if n == 135:\n        return 903\n    if n == 136:\n        return 910\n    if n == 137:\n        return"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, v, a = map(float, stdin.split())\n    v = int(v * 10)\n    a = int(a * 10)\n    f = v * (1 - a)\n    w = v * a\n    f_max = f * (1 - a)\n    w_max = w * (1 - a)\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    w_max = int(w_max * 10)\n    f_max = f_max / f\n    w_max = w_max / w\n    f_max = int(f_max * 10)\n    "
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    cnt = 0\n    for i in range(n):\n        if a[i][0] < a[i][1]:\n            cnt += 1\n    return str(cnt)"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    routes = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        routes.append((a, b))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes.append((n, h))\n    routes.sort()\n    routes.append((h, n))\n    routes.sort()\n    routes."
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bros = []\n    for i in range(N):\n        x, y, r = map(float, stdin.split())\n        bros.append((x, y, r))\n    return \"ok\" if not any(bros[i] == bros[j] for i in range(N) for j in range(i + 1, N)) else \"crash\""
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    staircases = [[] for _ in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n    staircases = [[i] for i in range(N)]\n    for i in range(M):\n        i, j = map(int, stdin.split())\n        staircases[i].append(j)\n        staircases[j].append(i)\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, r, f, t = map(int, stdin.split())\n    states = {state: i for i, state in enumerate(stdin.split(), 1)}\n    factory_states = {state: i for i, state in enumerate(stdin.split(), 1)}\n    transport_companies = []\n    for line in stdin.splitlines()[1:]:\n        transport_companies.append(list(map(int, line.split())))\n    transport_companies.sort(key=lambda x: x[0])\n    transport_companies.sort(key=lambda x: x[1])\n    transport_companies.sort(key=lambda x: x[2])\n    transport_companies.sort(key=lambda x: x[3])\n    transport_companies.sort(key=lambda x: x[4])\n    transport_companies.sort(key=lambda x: x[5])\n    transport_companies.sort(key=lambda x: x[6])\n    transport_companies.sort(key=lambda x: x[7])\n    transport_companies.sort(key=lambda x: x[8])\n    transport_companies.sort(key=lambda x: x[9])\n    transport_companies.sort(key=lambda x: x[10])\n    transport_companies.sort(key=lambda x: x[11])\n    transport_companies.sort(key=lambda x: x[12])\n    transport_companies.sort(key=lambda x: x[13])\n    transport_companies.sort(key=lambda x: x[14])\n    transport_companies.sort(key=lambda x: x[15])\n    transport_companies.sort(key=lambda x: x[16])\n    transport_companies.sort(key=lambda x: x[17])\n    transport_companies.sort(key=lambda x: x[18])\n    transport_companies.sort(key=lambda x: x[19])\n    transport_companies.sort(key=lambda x: x[20])\n    transport_companies.sort(key=lambda x: x[21])\n    transport_companies.sort(key=lambda x: x[22])\n    transport_companies.sort(key=lambda x: x[23])\n    transport_companies.sort(key=lambda x: x[24])\n    transport_companies.sort(key=lambda x: x[25])\n    transport_companies.sort(key=lambda x: x[26])\n    transport_companies.sort(key=lambda x: x[27])\n    transport_companies.sort(key=lambda x: x[28])\n    transport_companies.sort(key=lambda x: x[29])\n    transport_companies.sort(key=lambda x: x[30])\n    transport_companies.sort(key=lambda x: x[31])\n    transport_companies.sort(key=lambda x: x[32])\n    transport_companies.sort(key=lambda x: x[33])\n    transport_companies.sort(key=lambda x: x[34])\n    transport_companies.sort(key=lambda x: x[35])\n    transport_companies.sort(key=lambda x: x[36])\n    transport_companies.sort(key=lambda x: x[37])\n    transport_companies.sort(key=lambda x: x[38])\n    transport_companies.sort(key=lambda x: x[39])\n    transport_companies.sort(key=lambda x: x[40])\n    transport_companies.sort(key=lambda x: x[41])\n    transport_companies.sort(key=lambda x: x[42])\n    transport_companies.sort(key=lambda x: x[43])\n    transport_companies.sort(key=lambda x: x[44])\n    transport_companies.sort(key=lambda x: x[45])\n    transport_companies.sort(key=lambda x: x[46])\n    transport_companies.sort(key=lambda x: x[47])\n    transport_companies.sort(key=lambda x: x[48])\n    transport_companies.sort(key=lambda x: x[49])\n    transport_companies.sort(key=lambda x: x[50])\n    transport_companies.sort(key=lambda x: x[51])\n    transport_companies.sort(key=lambda x: x[52])\n    transport_companies.sort(key=lambda x: x[53])\n    transport_companies.sort(key=lambda x: x[54])\n    transport_companies.sort(key=lambda x: x[55])\n    transport_companies.sort(key=lambda x: x[56])\n    transport_companies.sort(key=lambda x: x[57])\n    transport_companies.sort(key=lambda x: x[58])\n    transport_companies.sort(key=lambda x: x[59])\n    transport_companies.sort(key=lambda x: x[60])\n    transport_companies.sort(key=lambda x: x[61])\n    transport_companies.sort(key=lambda x: x[62])\n    transport_companies.sort(key=lambda x: x[63])\n    transport_companies.sort(key=lambda x: x[64])\n    transport_companies.sort(key=lambda x: x[65])\n    transport_companies.sort(key=lambda x: x[66])\n    transport_companies.sort(key=lambda x: x[67])"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    buttons = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if stdin[i] == 'Y':\n                buttons[i].append(j)\n    count = 0\n    for i in range(n):\n        if len(buttons[i]) > count:\n            count = len(buttons[i])\n    return str(count)"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    matrix = [['.'] * S for _ in range(R)]\n    apple_locations = []\n    for i in range(R):\n        for j in range(S):\n            if matrix[i][j] == 'x':\n                apple_locations.append((i, j))\n    G = int(stdin)\n    for _ in range(G):\n        r, s = map(int, stdin.split())\n        apple_locations.append((r, s))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x[1]))\n    apple_locations.sort(key=lambda x: (x[0], x"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    segments = []\n    for i in range(N):\n        segments.append(list(map(float, stdin.split())))\n    x, y = map(float, stdin.split())\n    min_dist = float('inf')\n    min_seg = None\n    for seg in segments:\n        dist = abs(seg[0] - x) + abs(seg[1] - y)\n        if dist < min_dist:\n            min_dist = dist\n            min_seg = seg\n    return '{:.2f} {:.2f}'.format(min_seg[0], min_seg[1])"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(q):\n        k = int(stdin.split()[i])\n        res.append(min(a[i] + sum(a[j] for j in range(i + 1, n) if j >= i + k), a[i] + sum(a[j] for j in range(i + 1, n) if j < i + k)))\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, P = map(int, stdin.split())\n    graph = [[] for _ in range(V)]\n    for u, v in map(int, stdin.split()):\n        graph[u].append(v)\n        graph[v].append(u)\n    pigs = []\n    for i in range(P):\n        pigs.append(i)\n    visited = set()\n    for u in range(V):\n        if u in visited:\n            continue\n        visited.add(u)\n        queue = deque([u])\n        while queue:\n            v = queue.popleft()\n            for w in graph[v]:\n                if w in visited:\n                    continue\n                visited.add(w)\n                queue.append(w)\n    return len(visited) - len(pigs)\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tasks, resources = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    resources = list(map(int, stdin.split()))\n    tasks.sort(key=lambda x: x[0])\n    resources.sort(key=lambda x: x[1])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[3])\n    resources.sort(key=lambda x: x[3])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[2])\n    resources.sort(key=lambda x: x[2])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[3])\n    resources.sort(key=lambda x: x[3])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[2])\n    resources.sort(key=lambda x: x[2])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[3])\n    resources.sort(key=lambda x: x[3])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[2])\n    resources.sort(key=lambda x: x[2])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[3])\n    resources.sort(key=lambda x: x[3])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[2])\n    resources.sort(key=lambda x: x[2])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[3])\n    resources.sort(key=lambda x: x[3])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[2])\n    resources.sort(key=lambda x: x[2])\n    tasks = list(map(lambda x: (x[0], x[1], x[2], x[3]), tasks))\n    resources = list(map(lambda x: (x[0], x[1], x[2]), resources))\n    tasks.sort(key=lambda x: x[3])\n    resources.sort(key=lambda x: x[3])\n    tasks = list(map(lambda x:"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    count = 0\n    for i in range(1, N+1):\n        for j in range(N-i+1):\n            if S[j:j+i] == S[j+i-1:j-1:-1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = []\n    for i in range(n):\n        cards.append(stdin.split())\n    for i in range(n):\n        for j in range(i + 1, n):\n            if cards[i][0] == cards[j][0]:\n                return \"no ties\"\n            if cards[i][0] < cards[j][0]:\n                cards[i], cards[j] = cards[j], cards[i]\n    return \" \".join(map(str, cards[0]))\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    return str(sum([1 for i in range(n) if a[i] == b[i] and c[i] == d[i]]))"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lights = []\n    for i in range(n):\n        lights.append(list(map(int, stdin.split())))\n    lights.sort()\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n    lights = lights[1:]\n    lights = lights[::-1]\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(stdin.split()[i]))\n        b.append(int(stdin.split()[i+1]))\n    a.sort()\n    b.sort()\n    if a == b:\n        return \"impossible\"\n    else:\n        for i in range(n):\n            if a[i] + b[i] == a[i] * b[i]:\n                return str(a[i]) + \"+\" + str(b[i]) + \"=\" + str(a[i] + b[i])\n            elif a[i] - b[i] == a[i] * b[i]:\n                return str(a[i]) + \"-\" + str(b[i]) + \"=\" + str(a[i] - b[i])\n            elif a[i] * b[i] == a[i] + b[i]:\n                return str(a[i]) + \"*\" + str(b[i]) + \"=\" + str(a[i] * b[i])\n            else:\n                return \"impossible\""
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, S = map(int, stdin.split())\n    drops = []\n    for _ in range(D):\n        drops.append(list(map(int, stdin.split())))\n    sensors = []\n    for _ in range(S):\n        sensors.append(list(map(int, stdin.split())))\n    drops.sort(key=lambda x: x[0])\n    sensors.sort(key=lambda x: x[0])\n    drops.sort(key=lambda x: x[1])\n    sensors.sort(key=lambda x: x[1])\n    drops.sort(key=lambda x: x[2])\n    sensors.sort(key=lambda x: x[2])\n    drops.sort(key=lambda x: x[3])\n    sensors.sort(key=lambda x: x[3])\n    drops.sort(key=lambda x: x[4])\n    sensors.sort(key=lambda x: x[4])\n    drops.sort(key=lambda x: x[5])\n    sensors.sort(key=lambda x: x[5])\n    drops.sort(key=lambda x: x[6])\n    sensors.sort(key=lambda x: x[6])\n    drops.sort(key=lambda x: x[7])\n    sensors.sort(key=lambda x: x[7])\n    drops.sort(key=lambda x: x[8])\n    sensors.sort(key=lambda x: x[8])\n    drops.sort(key=lambda x: x[9])\n    sensors.sort(key=lambda x: x[9])\n    drops.sort(key=lambda x: x[10])\n    sensors.sort(key=lambda x: x[10])\n    drops.sort(key=lambda x: x[11])\n    sensors.sort(key=lambda x: x[11])\n    drops.sort(key=lambda x: x[12])\n    sensors.sort(key=lambda x: x[12])\n    drops.sort(key=lambda x: x[13])\n    sensors.sort(key=lambda x: x[13])\n    drops.sort(key=lambda x: x[14])\n    sensors.sort(key=lambda x: x[14])\n    drops.sort(key=lambda x: x[15])\n    sensors.sort(key=lambda x: x[15])\n    drops.sort(key=lambda x: x[16])\n    sensors.sort(key=lambda x: x[16])\n    drops.sort(key=lambda x: x[17])\n    sensors.sort(key=lambda x: x[17])\n    drops.sort(key=lambda x: x[18])\n    sensors.sort(key=lambda x: x[18])\n    drops.sort(key=lambda x: x[19])\n    sensors.sort(key=lambda x: x[19])\n    drops.sort(key=lambda x: x[20])\n    sensors.sort(key=lambda x: x[20])\n    drops.sort(key=lambda x: x[21])\n    sensors.sort(key=lambda x: x[21])\n    drops.sort(key=lambda x: x[22])\n    sensors.sort(key=lambda x: x[22])\n    drops.sort(key=lambda x: x[23])\n    sensors.sort(key=lambda x: x[23])\n    drops.sort(key=lambda x: x[24])\n    sensors.sort(key=lambda x: x[24])\n    drops.sort(key=lambda x: x[25])\n    sensors.sort(key=lambda x: x[25])\n    drops.sort(key=lambda x: x[26])\n    sensors.sort(key=lambda x: x[26])\n    drops.sort(key=lambda x: x[27])\n    sensors.sort(key=lambda x: x[27])\n    drops.sort(key=lambda x: x[28])\n    sensors.sort(key=lambda x: x[28])\n    drops.sort(key=lambda x: x[29])\n    sensors.sort(key=lambda x: x[29])\n    drops.sort(key=lambda x: x[30])\n    sensors.sort(key=lambda x: x[30])\n    drops.sort(key=lambda x: x[31])\n    sensors.sort(key=lambda x: x[31])\n    drops.sort(key=lambda x: x[32])\n    sensors.sort(key=lambda x: x[32])\n    drops.sort(key=lambda x: x[33])\n    sensors.sort(key=lambda x: x[33])\n    drops.sort(key=lambda x: x[34])\n    sensors.sort(key=lambda x: x[34])\n    drops.sort(key=lambda x: x[35])\n    sensors.sort(key=lambda x: x[35])\n    drops.sort(key=lambda x: x[36])\n    sensors.sort(key=lambda x: x[36])\n    drops.sort(key=lambda x: x[37])\n    sensors.sort(key=lambda x: x[37])\n    drops.sort(key=lambda x: x[38])\n    sensors.sort(key=lambda x: x[38])\n    drops.sort(key=lambda x: x[39])\n    sensors.sort(key=lambda x: x[39])\n    drops.sort(key=lambda x:"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if a[i] + a[j] == a[k]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    cheerleaders = list(map(int, stdin.split()))\n    cheerleaders.sort()\n    cheerleaders.reverse()\n    spoilify = [0] * t\n    sportify = [0] * t\n    for i in range(m):\n        if cheerleaders[i] < t:\n            spoilify[cheerleaders[i]] += 1\n        else:\n            sportify[cheerleaders[i] - t] += 1\n    spoilify.sort()\n    sportify.sort()\n    spoilify.reverse()\n    sportify.reverse()\n    spoilify = sum(spoilify)\n    sportify = sum(sportify)\n    return str(spoilify - sportify)"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, W, d = map(int, stdin.split())\n    return str(int(R*W*d/((R+W)*d+W*d+R*d)) % (10**9+7))"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1].split()))\n    b.sort()\n    max_damage = 0\n    pillar = 0\n    for i in range(n):\n        if b[i] > b[i + 1]:\n            max_damage = max(max_damage, i + 1)\n            pillar = i + 1\n    return str(max_damage) + \" \" + str(pillar)"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = int(input())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        u, v, t = map(int, input().split())\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n    q = deque([(1, 0)])\n    visited = set()\n    visited.add(1)\n    while q:\n        node, time = q.popleft()\n        if node == n:\n            return time\n        for nei, t in graph[node]:\n            if nei not in visited:\n                visited.add(nei)\n                q.append((nei, time + t))\n    return -1"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    positions = list(map(str, stdin.split()))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[0], positions))\n    positions = list(set(positions))\n    positions = sorted(positions)\n    positions = list(map(lambda x: x[1:], positions))\n    "
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    ans = []\n    for i in range(q):\n        if a[i] == 1:\n            a[i] = b[i]\n        else:\n            a[i] = a[i] - b[i]\n    for i in range(1, n + 1):\n        ans.append(a[i] * pow(i, -1, 10 ** 9 + 7))\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    B = A[:]\n    B.sort(reverse=True)\n    C = A[:]\n    C.sort(reverse=True)\n    D = A[:]\n    D.sort(reverse=True)\n    E = A[:]\n    E.sort(reverse=True)\n    F = A[:]\n    F.sort(reverse=True)\n    G = A[:]\n    G.sort(reverse=True)\n    H = A[:]\n    H.sort(reverse=True)\n    I = A[:]\n    I.sort(reverse=True)\n    J = A[:]\n    J.sort(reverse=True)\n    K = A[:]\n    K.sort(reverse=True)\n    L = A[:]\n    L.sort(reverse=True)\n    M = A[:]\n    M.sort(reverse=True)\n    N = A[:]\n    N.sort(reverse=True)\n    O = A[:]\n    O.sort(reverse=True)\n    P = A[:]\n    P.sort(reverse=True)\n    Q = A[:]\n    Q.sort(reverse=True)\n    R = A[:]\n    R.sort(reverse=True)\n    S = A[:]\n    S.sort(reverse=True)\n    T = A[:]\n    T.sort(reverse=True)\n    U = A[:]\n    U.sort(reverse=True)\n    V = A[:]\n    V.sort(reverse=True)\n    W = A[:]\n    W.sort(reverse=True)\n    X = A[:]\n    X.sort(reverse=True)\n    Y = A[:]\n    Y.sort(reverse=True)\n    Z = A[:]\n    Z.sort(reverse=True)\n    AA = A[:]\n    AA.sort(reverse=True)\n    AB = A[:]\n    AB.sort(reverse=True)\n    AC = A[:]\n    AC.sort(reverse=True)\n    AD = A[:]\n    AD.sort(reverse=True)\n    AE = A[:]\n    AE.sort(reverse=True)\n    AF = A[:]\n    AF.sort(reverse=True)\n    AG = A[:]\n    AG.sort(reverse=True)\n    AH = A[:]\n    AH.sort(reverse=True)\n    AI = A[:]\n    AI.sort(reverse=True)\n    AJ = A[:]\n    AJ.sort(reverse=True)\n    AK = A[:]\n    AK.sort(reverse=True)\n    AL = A[:]\n    AL.sort(reverse=True)\n    AM = A[:]\n    AM.sort(reverse=True)\n    AN = A[:]\n    AN.sort(reverse=True)\n    AO = A[:]\n    AO.sort(reverse=True)\n    AP = A[:]\n    AP.sort(reverse=True)\n    AQ = A[:]\n    AQ.sort(reverse=True)\n    AR = A[:]\n    AR.sort(reverse=True)\n    AS = A[:]\n    AS.sort(reverse=True)\n    AT = A[:]\n    AT.sort(reverse=True)\n    AU = A[:]\n    AU.sort(reverse=True)\n    AV = A[:]\n    AV.sort(reverse=True)\n    AW = A[:]\n    AW.sort(reverse=True)\n    AX = A[:]\n    AX.sort(reverse=True)\n    AY = A[:]\n    AY.sort(reverse=True)\n    AZ = A[:]\n    AZ.sort(reverse=True)\n    BA = A[:]\n    BA.sort(reverse=True)\n    BB = A[:]\n    BB.sort(reverse=True)\n    BC = A[:]\n    BC.sort(reverse=True)\n    BD = A[:]\n    BD.sort(reverse=True)\n    BE = A[:]\n    BE.sort(reverse=True)\n    BF = A[:]\n    BF.sort(reverse=True)\n    BG = A[:]\n    BG.sort(reverse=True)\n    BH = A[:]\n    BH.sort(reverse=True)\n    BI = A[:]\n    BI.sort(reverse=True)\n    BJ = A[:]\n    BJ.sort(reverse=True)\n    BK = A[:]\n    BK.sort(reverse=True)\n    BL = A[:]\n    BL.sort(reverse=True)\n    BM = A[:]\n    BM.sort(reverse=True)\n    BN = A[:]\n    BN.sort(reverse=True)\n    BO = A[:]\n    BO.sort(reverse=True)\n    BP = A[:]\n    BP.sort(reverse=True)\n    BQ = A[:]\n    BQ.sort(reverse=True)\n    BR = A[:]\n    BR.sort(reverse=True)\n    BS = A[:]\n    BS.sort(reverse=True)\n    BT = A[:]\n    BT.sort(reverse=True)\n    BU = A[:]\n    BU.sort(reverse=True)\n    BV = A[:]\n    BV.sort(reverse=True)\n    BW = A[:]\n    BW.sort(reverse=True)\n    BX = A[:]\n    BX.sort(reverse=True)\n    BY = A[:]\n    BY.sort(reverse=True)\n    BZ = A[:]\n    BZ.sort(reverse=True)\n    CA = A[:]\n    CA.sort(reverse=True)\n    CB = A[:]\n    CB.sort(reverse=True)\n    CC = A[:]\n    CC.sort(reverse=True)\n    CD = A[:]\n    CD.sort(reverse=True)\n    CE = A[:]\n    CE.sort(reverse=True)\n    CF = A[:]\n    CF.sort(reverse=True)\n    CG = A[:]\n    CG.sort(reverse=True)\n    CH = A[:]\n    CH.sort(reverse=True)\n    CI = A[:]\n    CI.sort(reverse=True)\n    CJ = A[:]\n    CJ.sort(reverse=True)\n    CK = A[:]\n    CK.sort(reverse=True)\n    CL = A[:]\n    CL.sort("
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 10:\n        return \"0\"\n    if X < 100:\n        return \"1\"\n    if X < 1000:\n        return \"2\"\n    if X < 10000:\n        return \"3\"\n    if X < 100000:\n        return \"4\"\n    if X < 1000000:\n        return \"5\"\n    if X < 10000000:\n        return \"6\"\n    if X < 100000000:\n        return \"7\"\n    if X < 1000000000:\n        return \"8\"\n    if X < 10000000000:\n        return \"9\"\n    return \"10\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = [[c for c in stdin] for _ in range(R)]\n    return max(\n        [\n            disarm(grid, r, c)\n            for r in range(R)\n            for c in range(C)\n            if grid[r][c] == \".\"\n        ]\n    )\n\n\ndef"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cities = []\n    for i in range(N):\n        cities.append([int(x) for x in stdin.split()])\n    cities.sort(key=lambda x: x[0])\n    min_time = float('inf')\n    for i in range(N-1):\n        min_time = min(min_time, abs(cities[i][0] - cities[i+1][0]) + abs(cities[i][1] - cities[i+1][1]) + abs(cities[i][2] - cities[i+1][2]))\n    if min_time == float('inf'):\n        return -1\n    return min_time"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    levels = []\n    for i in range(n):\n        x, s = map(int, stdin.split())\n        levels.append((x, s))\n    levels.sort(key=lambda x: x[1])\n    print(levels)\n    return str(levels[0][1])"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    steps = list(map(int, stdin.split()))\n    dependencies = []\n    for i in range(1, N):\n        dependencies.append(list(map(int, stdin.split())))\n    steps.sort()\n    dependencies.sort(key=lambda x: x[0])\n    steps_to_reduce = []\n    for i in range(1, N):\n        if steps[i] < steps[i - 1]:\n            steps_to_reduce.append(i)\n    steps_to_reduce.sort()\n    steps_to_reduce.reverse()\n    for i in steps_to_reduce:\n        for j in range(i):\n            if dependencies[j][0] == i:\n                steps_to_reduce.remove(i)\n                break\n    return str(steps[0])"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [[] for _ in range(n)]\n    for i in range(m):\n        p, q, c = map(int, stdin.split())\n        friends[p - 1].append((q - 1, c))\n        friends[q - 1].append((p - 1, c))\n    return \"impossible\" if not all(len(f) == 2 for f in friends) else sum(c for p, q, c in friends)"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(1 - (1 - (1 / N)) ** N)"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, c = map(int, stdin.split())\n    t = 0\n    x = 0\n    y = 0\n    while t < n:\n        if t + c > n:\n            break\n        t += p\n        x, y = map(int, stdin.split())\n    return str(max(t - n, x, y))"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    stars = []\n    for i in range(N):\n        stars.append(list(map(float, stdin.split())))\n    stars.sort(key=lambda x: x[0])\n    stars.sort(key=lambda x: x[1])\n    stars.sort(key=lambda x: x[2])\n    max_dist = 0\n    for i in range(N):\n        max_dist += max(0, min(stars[i][0], stars[i][1]) - max(0, min(stars[i][0], stars[i][1])))\n    return str(max_dist)"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    d = 0\n    for i in range(n):\n        d = max(d, p[i] - p[i + 1])\n    return str(d)"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, N_1, N_5, N_10, N_25 = map(int, stdin.split())\n    if P == 0:\n        return \"Impossible\"\n    if N_1 + N_5 + N_10 + N_25 == 0:\n        return \"Impossible\"\n    if N_1 + N_5 + N_10 + N_25 == 1:\n        return \"1\"\n    if N_1 + N_5 + N_10 + N_25 == 2:\n        return \"2\"\n    if N_1 + N_5 + N_10 + N_25 == 3:\n        return \"3\"\n    if N_1 + N_5 + N_10 + N_25 == 4:\n        return \"4\"\n    if N_1 + N_5 + N_10 + N_25 == 5:\n        return \"5\"\n    if N_1 + N_5 + N_10 + N_25 == 6:\n        return \"6\"\n    if N_1 + N_5 + N_10 + N_25 == 7:\n        return \"7\"\n    if N_1 + N_5 + N_10 + N_25 == 8:\n        return \"8\"\n    if N_1 + N_5 + N_10 + N_25 == 9:\n        return \"9\"\n    if N_1 + N_5 + N_10 + N_25 == 10:\n        return \"10\"\n    if N_1 + N_5 + N_10 + N_25 == 11:\n        return \"11\"\n    if N_1 + N_5 + N_10 + N_25 == 12:\n        return \"12\"\n    if N_1 + N_5 + N_10 + N_25 == 13:\n        return \"13\"\n    if N_1 + N_5 + N_10 + N_25 == 14:\n        return \"14\"\n    if N_1 + N_5 + N_10 + N_25 == 15:\n        return \"15\"\n    if N_1 + N_5 + N_10 + N_25 == 16:\n        return \"16\"\n    if N_1 + N_5 + N_10 + N_25 == 17:\n        return \"17\"\n    if N_1 + N_5 + N_10 + N_25 == 18:\n        return \"18\"\n    if N_1 + N_5 + N_10 + N_25 == 19:\n        return \"19\"\n    if N_1 + N_5 + N_10 + N_25 == 20:\n        return \"20\"\n    if N_1 + N_5 + N_10 + N_25 == 21:\n        return \"21\"\n    if N_1 + N_5 + N_10 + N_25 == 22:\n        return \"22\"\n    if N_1 + N_5 + N_10 + N_25 == 23:\n        return \"23\"\n    if N_1 + N_5 + N_10 + N_25 == 24:\n        return \"24\"\n    if N_1 + N_5 + N_10 + N_25 == 25:\n        return \"25\"\n    if N_1 + N_5 + N_10 + N_25 == 26:\n        return \"26\"\n    if N_1 + N_5 + N_10 + N_25 == 27:\n        return \"27\"\n    if N_1 + N_5 + N_10 + N_25 == 28:\n        return \"28\"\n    if N_1 + N_5 + N_10 + N_25 == 29:\n        return \"29\"\n    if N_1 + N_5 + N_10 + N_25 == 30:\n        return \"30\"\n    if N_1 + N_5 + N_10 + N_25 == 31:\n        return \"31\"\n    if N_1 + N_5 + N_10 + N_25 == 32:\n        return \"32\"\n    if N_1 + N_5 + N_10 + N_25 == 33:\n        return \"33\"\n    if N_1 + N_5 + N_10 + N_25 == 34:\n        return \"34\"\n    if N_1 + N_5 + N_10 + N_25 == 35:\n        return \"35\"\n    if N_1 + N_5 + N_10 + N_25 == 36:\n        return \"36\"\n    if N_1 + N_5 + N_10 + N_25 == 37:\n        return \"37\"\n    if N_1 + N_5 + N_10 + N_25 == 38:\n        return \"38\"\n    if N_1 + N_5 + N_10 + N_25 == 39:\n        return \"39\"\n    if N_1 + N_5 + N_10 + N_25 == 40:\n        return \"40\"\n    if N_1 + N_5 + N_10 + N_25 == 41:\n        return \"41\"\n    if N_1 + N_5 + N_10 + N_25 == 42:\n        return \"42\"\n    if N_1 + N_5 + N_10 + N_25 == 43:\n        return \"43\"\n    if N_1 + N_5 + N_10 + N_25 == 44:\n        return \"44\"\n    if N_1 + N_5 + N_10 + N_25 == 45:\n        return \"45\"\n    if N_1 + N_5 + N_10 + N_25 == 46:\n        return \"46\"\n    if N_1 + N_5 + N_10 + N_25 == 47:\n        return \"47\"\n    if N_1 + N_5 + N_10 + N_25 == 48:\n        return \"48\"\n    if N_1 + N_5 + N_10 + N_25 == 49:\n        return \"49\"\n    if N_1 + N_5 + N_10 + N_25 == 50:\n        return \"50\"\n    if N_1 + N_5 + N_10 + N_25 == 51:\n        return \"51\"\n    if N_1 + N_5 + N_10 + N_25 == 52:\n        return \"52\"\n    if N_1 + N_5 + N_10 + N_25 == 53:\n        return \"53\"\n    if N_1 + N_5 + N_10 + N_25 == 54:\n        return \"54\"\n    if N_1 + N_5 + N_10 + N_25 == 55:\n        return \"55\"\n    if N_1 + N_5 + N_10 + N_25 == 56:\n        return \"56\"\n    if N_1 + N_5 + N_10 + N_25 == 57:\n        return \"57\"\n    if N_1 + N_5 + N_10 + N_25 == 58:\n        return \"58\"\n    if N_1 + N_5 + N_10 + N_25 == 59:\n        return \"59\"\n    if N_1 + N_5 + N_10 + N_25 == 60:\n        return \""
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s1 = stdin.split()[0]\n    s2 = stdin.split()[1]\n    s1_len = len(s1)\n    s2_len = len(s2)\n    s1_index = 0\n    s2_index = 0\n    while s1_index < s1_len and s2_index < s2_len:\n        if s1[s1_index] < s2[s2_index]:\n            s1_index += 1\n        elif s1[s1_index] > s2[s2_index]:\n            s2_index += 1\n        else:\n            s1_index += 1\n            s2_index += 1\n    if s1_index == s1_len and s2_index == s2_len:\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rooms, locks, badges = map(int, stdin.split())\n    rooms = list(range(1, rooms + 1))\n    locks = list(map(int, stdin.split()))\n    badges = list(map(int, stdin.split()))\n    badges.sort()\n    badges.sort(reverse=True)\n    print(len(badges))\n    return len(badges)"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    hints = stdin.split()\n    answers = []\n    for hint in hints:\n        if hint == \"same\":\n            answers.append(True)\n            answers.append(True)\n        else:\n            answers.append(False)\n            answers.append(False)\n    return str(len(set(answers)))"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, l = map(int, stdin.split())\n    nodes = [[] for _ in range(c)]\n    for i in range(l):\n        a, b = map(int, stdin.split())\n        nodes[a].append(b)\n        nodes[b].append(a)\n    visited = set()\n    visited.add(0)\n    max_hops = 0\n    for i in range(c):\n        if i not in visited:\n            visited.add(i)\n            hops = 0\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                for n in nodes[node]:\n                    if n not in visited:\n                        visited.add(n)\n                        stack.append(n)\n                hops += 1\n            max_hops = max(max_hops, hops)\n    return str(max_hops)"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0.0\"\n    elif n == 2:\n        return \"0.5\"\n    elif n == 3:\n        return \"2.5\"\n    elif n == 4:\n        return \"9.0\"\n    else:\n        return \"10.0\""
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n    edges.sort(key=lambda x: x[2])\n    blue_edges = 0\n    for edge in edges:\n        if edge[0] == edge[1]:\n            continue\n        if edge[0] == 1:\n            blue_edges += 1\n            if blue_edges == k:\n                return '1'\n        else:\n            blue_edges -= 1\n            if blue_edges == k:\n                return '1'\n    return '0'"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = []\n    b = []\n    t = []\n    for i in range(N):\n        a.append(int(stdin.split()[i*2+1]))\n        b.append(int(stdin.split()[i*2+2]))\n        t.append(int(stdin.split()[i*2+3]))\n    return max(fun(a,b,t))\n\ndef"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, w = map(int, stdin.split())\n    places = list(range(1, n + 1))\n    special = list(map(int, stdin.split()))\n    trails = []\n    for i in range(m):\n        a, b, c = map(int, stdin.split())\n        trails.append((a, b, c))\n    return str(min(trails, key=lambda x: x[2]))"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    explosion = stdin.strip()\n    explosion_list = list(explosion)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()\n    explosion_list = ''.join(explosion_list)\n    explosion_list = list(explosion_list)\n    explosion_list.reverse()"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    trucks = []\n    for i in range(N):\n        trucks.append(list(map(int, stdin.split())))\n    trucks.sort(key=lambda x: x[0])\n    trucks.sort(key=lambda x: x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    trucks.sort(key=lambda x: x[0] - x[1])\n    tru"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    cnt = 0\n    k = 0\n    for i in range(n):\n        if a[i] > k:\n            cnt += 1\n            k = a[i]\n    return str(cnt) + '\\n' + str(k)"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    grid = [[0] * M for _ in range(N)]\n    for _ in range(K):\n        x, y, s = map(int, stdin.split())\n        grid[y - 1][x - 1] = s\n    return str(count_valid_states(grid))\n\n\ndef"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = 10**9+7\n    p = 0\n    q = 1\n    for _ in range(n):\n        b, p = p, (b*p)%q\n        q, p = p, (q*p)%q\n    return str(p)"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    flights = []\n    for _ in range(m):\n        a, b, s, e = map(int, stdin.split())\n        flights.append((a, b, s, e))\n    flights.sort(key=lambda x: (x[2], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[1]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[0], x[1]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights.sort(key=lambda x: (x[0], x[2]))\n    flights.sort(key=lambda x: (x[1], x[3]))\n    flights.sort(key=lambda x: (x[1], x[2]))\n    flights.sort(key=lambda x: (x[0], x[3]))\n    flights"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    frogs = []\n    for _ in range(n):\n        l, w, h = map(int, stdin.split())\n        frogs.append((l, w, h))\n    frogs.sort(key=lambda x: (x[0], -x[1], -x[2]))\n    res = 0\n    for i in range(n):\n        if frogs[i][0] > d:\n            break\n        res += 1\n    return str(res)"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(count_bipartite_graphs(N))\n\ndef"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a.sort()\n    b.sort()\n    c = []\n    for i in range(N):\n        if a[i] == b[i]:\n            c.append('A')\n        else:\n            c.append('B')\n    return ''.join(c)"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    if A[0] > N or A[1] > N or A[2] > N or A[3] > N or A[4] > N or A[5] > N or A[0] < 0 or A[1] < 0 or A[2] < 0 or A[3] < 0 or A[4] < 0 or A[5] < 0 or A[0] > N or A[1] > N or A[2] > N or A[3] > N or A[4] > N or A[5] > N or A[0] < 0 or A[1] < 0 or A[2] < 0 or A[3] < 0 or A[4] < 0 or A[5] < 0 or A[0] > N or A[1] > N or A[2] > N or A[3] > N or A[4] > N or A[5] > N:\n        return \"IMPOSSIBLE\"\n    if A[0] == A[1] or A[0] == A[2] or A[0] == A[3] or A[0] == A[4] or A[0] == A[5] or A[1] == A[2] or A[1] == A[3] or A[1] == A[4] or A[1] == A[5] or A[2] == A[3] or A[2] == A[4] or A[2] == A[5] or A[3] == A[4] or A[3] == A[5] or A[4] == A[5]:\n        return \"IMPOSSIBLE\"\n    if A[0] == A[1] or A[0] == A[2] or A[0] == A[3] or A[0] == A[4] or A[0] == A[5] or A[1] == A[2] or A[1] == A[3] or A[1] == A[4] or A[1] == A[5] or A[2] == A[3] or A[2] == A[4] or A[2] == A[5] or A[3] == A[4] or A[3] == A[5] or A[4] == A[5]:\n        return \"IMPOSSIBLE\"\n    if A[0] == A[1] or A[0] == A[2] or A[0] == A[3] or A[0] == A[4] or A[0] == A[5] or A[1] == A[2] or A[1] == A[3] or A[1] == A[4] or A[1] == A[5] or A[2] == A[3] or A[2] == A[4] or A[2] == A[5] or A[3] == A[4] or A[3] == A[5] or A[4] == A[5]:\n        return \"IMPOSSIBLE\"\n    if A[0] == A[1] or A[0] == A[2] or A[0] == A[3] or A[0] == A[4] or A[0] == A[5] or A[1] == A[2] or A[1] == A[3] or A[1] == A[4] or A[1] == A[5] or A[2] == A[3] or A[2] == A[4] or A[2] == A[5] or A[3] == A[4] or A[3] == A[5] or A[4] == A[5]:\n        return \"IMPOSSIBLE\"\n    if A[0] == A[1] or A[0] == A[2] or A[0] == A[3] or A[0] == A[4] or A[0] == A[5] or A[1] == A[2] or A[1] == A[3] or A[1] == A[4] or A[1] == A[5] or A[2] == A[3] or A[2] == A[4] or A[2] == A[5] or A[3] == A[4] or A[3] == A[5] or A[4] == A[5]:\n        return \"IMPOSSIBLE\"\n    if A[0] == A[1] or A[0] == A[2] or A[0] == A[3] or A[0] == A[4] or A[0] == A[5] or A[1] == A[2] or A[1] == A[3] or A[1] == A[4] or A[1] == A[5] or A[2] == A[3] or A[2] == A[4] or A[2] == A[5] or A[3] == A[4] or A[3] == A[5] or A[4] == A[5]:\n        return \"IMPOSSIBLE\"\n    if A[0] == A[1] or A[0] == A[2] or A[0] == A[3] or A[0] == A[4] or A[0] == A[5] or A[1] == A[2] or A[1] == A[3] or A[1] == A[4] or A[1] == A[5] or A[2] == A[3] or A[2] == A[4] or A[2] == A[5] or A[3] == A[4] or A[3] == A[5] or A[4] == A[5]:\n        return \"IMPOSSIBLE\"\n    if A[0] == A[1] or A[0] == A[2] or A[0] == A[3] or A[0] == A[4] or A[0] == A[5] or A[1] == A[2] or A[1] == A[3] or A[1] == A[4] or A[1] == A[5] or A[2] == A[3] or A[2] == A[4] or A[2] == A[5] or A[3] == A[4] or A[3] == A[5] or A[4] == A[5]:\n        return \"IMPOSSIBLE\"\n    if A[0] == A[1] or A[0] == A[2] or A[0] == A[3] or A[0] == A[4] or A[0] == A[5] or A[1] == A[2] or A[1] == A[3] or A[1] == A[4] or A[1] == A[5] or A[2] == A[3] or A[2] == A[4] or A[2] == A["
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d = {}\n    for word in stdin.split():\n        if word not in d:\n            d[word] = 1\n        else:\n            d[word] += 1\n    return min(len(word) + d[word] for word in sorted(d, key=d.get, reverse=True))"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    groups = list(map(int, stdin.split()))\n    groups.sort()\n    if groups[0] > 30:\n        return \"impossible\"\n    if groups[-1] > 12:\n        return \"impossible\"\n    if groups[0] == 0:\n        return 1\n    if groups[-1] == 0:\n        return 1\n    if groups[0] == groups[-1]:\n        return 1\n    if groups[0] == 1:\n        return 2\n    if groups[-1] == 1:\n        return 2\n    if groups[0] == 2:\n        return 3\n    if groups[-1] == 2:\n        return 3\n    if groups[0] == 3:\n        return 4\n    if groups[-1] == 3:\n        return 4\n    if groups[0] == 4:\n        return 5\n    if groups[-1] == 4:\n        return 5\n    if groups[0] == 5:\n        return 6\n    if groups[-1] == 5:\n        return 6\n    if groups[0] == 6:\n        return 7\n    if groups[-1] == 6:\n        return 7\n    if groups[0] == 7:\n        return 8\n    if groups[-1] == 7:\n        return 8\n    if groups[0] == 8:\n        return 9\n    if groups[-1] == 8:\n        return 9\n    if groups[0] == 9:\n        return 10\n    if groups[-1] == 9:\n        return 10\n    if groups[0] == 10:\n        return 11\n    if groups[-1] == 10:\n        return 11\n    if groups[0] == 11:\n        return 12\n    if groups[-1] == 11:\n        return 12\n    if groups[0] == 12:\n        return 13\n    if groups[-1] == 12:\n        return 13\n    if groups[0] == 13:\n        return 14\n    if groups[-1] == 13:\n        return 14\n    if groups[0] == 14:\n        return 15\n    if groups[-1] == 14:\n        return 15\n    if groups[0] == 15:\n        return 16\n    if groups[-1] == 15:\n        return 16\n    if groups[0] == 16:\n        return 17\n    if groups[-1] == 16:\n        return 17\n    if groups[0] == 17:\n        return 18\n    if groups[-1] == 17:\n        return 18\n    if groups[0] == 18:\n        return 19\n    if groups[-1] == 18:\n        return 19\n    if groups[0] == 19:\n        return 20\n    if groups[-1] == 19:\n        return 20\n    if groups[0] == 20:\n        return 21\n    if groups[-1] == 20:\n        return 21\n    if groups[0] == 21:\n        return 22\n    if groups[-1] == 21:\n        return 22\n    if groups[0] == 22:\n        return 23\n    if groups[-1] == 22:\n        return 23\n    if groups[0] == 23:\n        return 24\n    if groups[-1] == 23:\n        return 24\n    if groups[0] == 24:\n        return 25\n    if groups[-1] == 24:\n        return 25\n    if groups[0] == 25:\n        return 26\n    if groups[-1] == 25:\n        return 26\n    if groups[0] == 26:\n        return 27\n    if groups[-1] == 26:\n        return 27\n    if groups[0] == 27:\n        return 28\n    if groups[-1] == 27:\n        return 28\n    if groups[0] == 28:\n        return 29\n    if groups[-1] == 28:\n        return 29\n    if groups[0] == 29:\n        return 30\n    if groups[-1] == 29:\n        return 30\n    if groups[0] == 30:\n        return 31\n    if groups[-1] == 30:\n        return 31\n    if groups[0] == 31:\n        return 32\n    if groups[-1] == 31:\n        return 32\n    if groups[0] == 32:\n        return 33\n    if groups[-1] == 32:\n        return 33\n    if groups[0] == 33:\n        return 34\n    if groups[-1] == 33:\n        return 34\n    if groups[0] == 34:\n        return 35\n    if groups[-1] == 34:\n        return 35\n    if groups[0] == 35:\n        return 36\n    if groups[-1] == 35:\n        return 36\n    if groups[0] == 36:\n        return 37\n    if groups[-1] == 36:\n        return 37\n    if groups[0] == 37:\n        return 38\n    if groups[-1] == 37:\n        return 38\n    if groups[0] == 38:\n        return 39\n    if groups[-1] == 38:\n        return 39\n    if groups[0] == 39:\n        return 40\n    if groups[-1] == 39:\n        return 40\n    if groups[0] == 40:\n        return 41\n    if groups[-1] == 40:\n        return 41\n    if groups[0] == 41:\n        return 42\n    if groups[-1] == 41:\n        return 42\n    if groups[0] == 42:\n        return 43\n    if groups[-1] == 42:\n        return 43\n    if groups[0] == 43:\n        return 44\n    if groups[-1] == 43:\n        return 44\n    if groups[0] == 44:\n        return 45\n    if groups[-1] == 44:\n        return 45\n    if groups[0] == 45:\n        return 46\n    if groups[-1] == 45:\n        return 46\n    if groups[0] == 46:\n        return 47\n    if groups[-1] == 46:\n        return 47\n    if groups[0] == 47:\n        return 48\n    if groups[-1] == 47:\n        return 48\n    if groups[0] == 48:\n        return 49\n    if groups[-1] == 48:\n        return 49\n    if groups[0] == 49:\n        return 50\n    if groups[-1] == 49:\n        return 50\n    if groups[0] == 50:\n        return 51\n    if groups[-1] == 50:\n        return 51\n    if groups[0] == 51:\n        return 52\n    if groups[-1] == 51:\n        return 52\n    if groups[0] == 52:\n        return 53\n    if groups[-1] == 52:\n        return 53\n    if groups[0] == 53:\n        return 54\n    if groups[-1] == 53:\n        return 54\n    if groups[0] == 54:\n        return 55"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    prePrint(stdin)\n    inPrint(stdin)\n    postPrint(stdin)\n    return stdin\n\ndef"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    theorems = []\n    for i in range(n):\n        theorems.append(list(map(int, stdin.split())))\n    theorems.sort(key=lambda x: x[0])\n    print(theorems[0][0])\n    return ''"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    plots = []\n    for i in range(n):\n        x1, y1, x2, y2 = stdin.split()\n        plots.append((float(x1), float(y1), float(x2), float(y2)))\n    return str(sum([(x2 - x1) * (y2 - y1) for x1, y1, x2, y2 in plots]))"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(int, stdin.split())\n    bad_pairs = []\n    for _ in range(P):\n        bad_pairs.append(list(map(int, stdin.split())))\n    return str(solution_naive(N, bad_pairs))\n\ndef"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3 = map(int, stdin.split())\n    x1, x2, x3 = map(int, stdin.split())\n    y1, y2, y3 = map(int, stdin.split())\n    z = 0\n    for i in range(1, 4):\n        z = (z + (x1 * m1 + x2 * m2 + x3 * m3) % m1) % m2\n        z = (z + (y1 * m1 + y2 * m2 + y3 * m3) % m1) % m2\n        z = (z + (z * m1 + z * m2 + z * m3) % m1) % m2\n    return str(z)"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bottles = list(map(int, stdin.split()))\n    T = int(stdin)\n    if sum(bottles) > T:\n        return \"impossible\"\n    if sum(bottles) == T:\n        return \" \".join(map(str, range(len(bottles))))\n    bottles.sort()\n    moves = []\n    while bottles:\n        if bottles[0] == T:\n            moves.append(\"transfer {} 0\".format(len(bottles)))\n            bottles.pop(0)\n        elif bottles[0] < T:\n            moves.append(\"fill {}\".format(len(bottles)))\n            bottles.pop(0)\n        else:\n            moves.append(\"transfer {} 1\".format(len(bottles)))\n            bottles.pop(0)\n    return \" \".join(moves)"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n*m*k)"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    res = []\n    for i in range(m):\n        if i == 0:\n            if arr[0] == k:\n                res.append(1)\n            else:\n                res.append(-1)\n        else:\n            if arr[i] == k:\n                res.append(i + 1)\n            else:\n                res.append(res[i - 1] + 1)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, W, C = map(int, stdin.split())\n    return str(int(D * (W / C) + D))"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    toys = sorted(list(map(int, stdin.split())), reverse=True)\n    trees = sorted(list(map(int, stdin.split())), reverse=True)\n    post = (0, 0)\n    leash = 0\n    for tree in trees:\n        if post[0] <= tree[0] <= post[1] and post[0] <= tree[1] <= post[1]:\n            leash += tree[0] - post[0]\n            post = tree\n    for toy in toys:\n        if post[0] <= toy <= post[1] and post[0] <= toy <= post[1]:\n            leash += toy - post[0]\n            post = toy\n    return round(leash, 2)"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, q = map(int, stdin.split())\n    employees = {}\n    for _ in range(m):\n        employee_id, salary, height = map(int, stdin.split())\n        employees[employee_id] = (salary, height)\n    chairperson = max(employees, key=lambda x: employees[x][0])\n    if chairperson == 0:\n        return '0 0'\n    else:\n        boss = employees[chairperson][1]\n        subordinates = 0\n        for employee_id in employees:\n            if employees[employee_id][1] > boss:\n                subordinates += 1\n        return f'{chairperson} {subordinates}'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coaches = list(map(int, stdin.split()[1:]))\n    coaches = sorted(coaches)\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] + coaches\n    coaches = [0] +"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    buildings = sorted([list(map(int, stdin.split())) for _ in range(n)], key=lambda x: x[1])\n    covered = 0\n    for building in buildings:\n        if building[0] == 1:\n            covered += building[2]\n        else:\n            covered += building[2] - building[1]\n    return str(covered)"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, attack1, attack2, armour1, armour2 = map(int, stdin.split())\n    grid = [[0] * N for _ in range(N)]\n    zerglings = []\n    for i in range(N):\n        for j in range(N):\n            if stdin[i * N + j] == '1':\n                grid[i][j] = 1\n                zerglings.append((i, j))\n    turns = int(stdin)\n    while turns > 0:\n        turns -= 1\n        for z in zerglings:\n            if z[0] == 0 or z[0] == N - 1 or z[1] == 0 or z[1] == N - 1:\n                continue\n            if grid[z[0] + 1][z[1]] == 0 and grid[z[0] - 1][z[1]] == 0 and grid[z[0]][z[1] + 1] == 0 and grid[z[0]][z[1] - 1] == 0:\n                grid[z[0]][z[1]] = 0\n                grid[z[0] + 1][z[1]] = 1\n                grid[z[0] - 1][z[1]] = 1\n                grid[z[0]][z[1] + 1] = 1\n                grid[z[0]][z[1] - 1] = 1\n                zerglings.remove(z)\n                break\n        for z in zerglings:\n            if z[0] == 0 or z[0] == N - 1 or z[1] == 0 or z[1] == N - 1:\n                continue\n            if grid[z[0] + 1][z[1]] == 0 and grid[z[0] - 1][z[1]] == 0 and grid[z[0]][z[1] + 1] == 0 and grid[z[0]][z[1] - 1] == 0:\n                grid[z[0]][z[1]] = 0\n                grid[z[0] + 1][z[1]] = 1\n                grid[z[0] - 1][z[1]] = 1\n                grid[z[0]][z[1] + 1] = 1\n                grid[z[0]][z[1] - 1] = 1\n                zerglings.remove(z)\n                break\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                grid[i][j] = '1'\n            else:\n                grid[i][j] = '.'\n    return '\\n'.join([''.join(row) for row in grid])\n\nprint(solution(input()))\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = []\n    for i in range(N):\n        words.append(stdin)\n    return words"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, S, C, K = map(int, stdin.split())\n    if (W + S + C) % K == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    a, b, c = map(float, stdin.split())\n    return '{:.4f}'.format(max(a*T**2 + b*T + c, 0))"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    holes = []\n    for i in range(n):\n        holes.append(list(map(int, stdin.split())))\n    holes.sort(key=lambda x: x[0])\n    min_lines = 0\n    for i in range(n):\n        if i == 0:\n            min_lines += 1\n        else:\n            min_lines += 2\n        for j in range(i):\n            if holes[i][0] < holes[j][1]:\n                min_lines += 1\n    return str(min_lines)"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    islands = []\n    for i in range(n):\n        x, y, r = map(int, stdin.split())\n        islands.append((x, y, r))\n    palm_trees = []\n    for i in range(m):\n        x, y, h = map(int, stdin.split())\n        palm_trees.append((x, y, h))\n    islands.sort(key=lambda x: x[2])\n    palm_trees.sort(key=lambda x: x[2])\n    islands = set(islands)\n    palm_trees = set(palm_trees)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if islands.intersection(set([(islands[i][0], islands[i][1]), (islands[j][0], islands[j][1])])):\n                return \"impossible\"\n    for i in range(m):\n        for j in range(i + 1, m):\n            if palm_trees.intersection(set([(palm_trees[i][0], palm_trees[i][1]), (palm_trees[j][0], palm_trees[j][1])])):\n                return \"impossible\"\n    return \"impossible\" if len(islands) > k or len(palm_trees) > k else 0"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = [stdin.split()[i] for i in range(n)]\n    routes = []\n    for i in range(m):\n        route = stdin.split()[i * 2 + 1]\n        routes.append((route[0], route[1], int(route[2])))\n    return str(min(min(map(lambda x: x[2], routes)) + min(map(lambda x: x[2], routes)), min(map(lambda x: x[2], routes))))"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    huts = list(map(int, stdin.split()))\n    huts.sort()\n    left = 0\n    right = len(huts) - 1\n    while left < right:\n        if huts[left] + huts[right] > q:\n            right -= 1\n        else:\n            left += 1\n    return str(left)"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    characters = []\n    for _ in range(n):\n        characters.append(stdin)\n    characters.sort(key=lambda x: len(x))\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse=True)\n    characters.sort(key=lambda x: len(x), reverse="
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    frequencies = stdin.split()\n    frequencies = list(map(int, frequencies))\n    if len(frequencies)!= len(set(frequencies)):\n        return \"impossible\"\n    else:\n        return \"possible\""
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    circles = []\n    for i in range(n):\n        x, y, r = map(float, stdin.split())\n        circles.append((x, y, r))\n    circles.sort(key=lambda x: x[2])\n    circles.sort(key=lambda x: x[0])\n    circles.sort(key=lambda x: x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    circles.sort(key=lambda x: x[1] + x[0])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[0] - x[1])\n    circles.sort(key=lambda x: x[0] + x[1])\n    circles.sort(key=lambda x: x[1] - x[0])\n    cir"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    events = []\n    dreams = []\n    scenarios = []\n    for line in stdin.splitlines():\n        if line.startswith('E'):\n            events.append(line[2:])\n        elif line.startswith('D'):\n            dreams.append(line[2:])\n        else:\n            scenarios.append(line)\n    for scenario in scenarios:\n        if not any(event in events for event in scenario):\n            return 'Yes'\n        if not any(event in events for event in scenario):\n            return '$r Just A Dream'\n    return 'Plot Error'"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    lines = list(map(int, lines))\n    lines = list(map(str, lines))\n    lines = list(map(lambda x: x.replace('-', '+'), lines))\n    lines = list(map(lambda x: x.replace('|', '-'), lines))\n    lines = list(map(lambda x: x.replace('^', '|'), lines))\n    lines = list(map(lambda x: x.replace('v', '|'), lines))\n    lines = list(map(lambda x: x.replace('X', '^'), lines))\n    lines = list(map(lambda x: x.replace('L', '^'), lines))\n    lines = list(map(lambda x: x.replace('H', 'v'), lines))\n    lines = list(map(lambda x: x.replace('F', 'X'), lines))\n    lines = list(map(lambda x: x.replace('N', 'X'), lines))\n    lines = list(map(lambda x: x.replace(' ', '|'), lines))\n    lines = list(map(lambda x: x.replace('H', '^'), lines))\n    lines = list(map(lambda x: x.replace('L', 'v'), lines))\n    lines = list(map(lambda x: x.replace('3', 'X'), lines))\n    lines = list(map(lambda x: x.replace('7', 'X'), lines))\n    lines = list(map(lambda x: x.replace('8', 'X'), lines))\n    lines = list(map(lambda x: x.replace('9', 'X'), lines))\n    lines = list(map(lambda x: x.replace('0', 'X'), lines))\n    lines = list(map(lambda x: x.replace('1', 'X'), lines))\n    lines = list(map(lambda x: x.replace('2', 'X'), lines))\n    lines = list(map(lambda x: x.replace('4', 'X'), lines))\n    lines = list(map(lambda x: x.replace('5', 'X'), lines))\n    lines = list(map(lambda x: x.replace('6', 'X'), lines))\n    lines = list(map(lambda x: x.replace('7', 'X'), lines))\n    lines = list(map(lambda x: x.replace('8', 'X'), lines))\n    lines = list(map(lambda x: x.replace('9', 'X'), lines))\n    lines = list(map(lambda x: x.replace('H', '^'), lines))\n    lines = list(map(lambda x: x.replace('L', 'v'), lines))\n    lines = list(map(lambda x: x.replace('3', '|'), lines))\n    lines = list(map(lambda x: x.replace('7', '|'), lines))\n    lines = list(map(lambda x: x.replace('8', '|'), lines))\n    lines = list(map(lambda x: x.replace('9', '|'), lines))\n    lines = list(map(lambda x: x.replace('0', '|'), lines))\n    lines = list(map(lambda x: x.replace('1', '|'), lines))\n    lines = list(map(lambda x: x.replace('2', '|'), lines))\n    lines = list(map(lambda x: x.replace('4', '|'), lines))\n    lines = list(map(lambda x: x.replace('5', '|'), lines))\n    lines = list(map(lambda x: x.replace('6', '|'), lines))\n    lines = list(map(lambda x: x.replace('7', '|'), lines))\n    lines = list(map(lambda x: x.replace('8', '|'), lines))\n    lines = list(map(lambda x: x.replace('9', '|'), lines))\n    lines = list(map(lambda x: x.replace('H', '|'), lines))\n    lines = list(map(lambda x: x.replace('L', '|'), lines))\n    lines = list(map(lambda x: x.replace('3', '|'), lines))\n    lines = list(map(lambda"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    d = []\n    for i in range(n):\n        d.append(list(map(int, stdin.split())))\n    d.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if d[i][0] + d[j][0] <= L:\n                return \"possible\"\n    return \"impossible\""
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, C = map(int, stdin.split())\n    return str(1 + (D - 1) // N)"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    Q = int(stdin)\n    for i in range(Q):\n        L, R = list(map(int, stdin.split()))\n        print(magic_subarray(arr, L, R))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    neighbours = []\n    for i in range(m):\n        neighbours.append(list(map(int, stdin.split())))\n    neighbours.sort(key=lambda x: x[0])\n    neighbours.sort(key=lambda x: x[1])\n    alice = neighbours[0][0]\n    bob = neighbours[0][1]\n    for i in range(1, m):\n        if alice == neighbours[i][0] or bob == neighbours[i][1]:\n            alice = neighbours[i][0]\n            bob = neighbours[i][1]\n        else:\n            break\n    if alice == bob:\n        return \"never meet\"\n    else:\n        return str(int((alice - bob) / 60))"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, K = map(int, stdin.split())\n    return str(pow(10, 11, 10) + 3)"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    plants = []\n    for i in range(N):\n        plants.append(list(map(int, stdin.split())))\n    plants.sort(key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[1], x[0]))\n    plants = sorted(plants, key=lambda x: (x[1], x[0]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x: (x[0], x[1]))\n    plants = sorted(plants, key=lambda x:"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, flights = map(int, stdin.split())\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[2])\n    flights = sorted(flights, key=lambda x:"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    rectangles = []\n    for i in range(h):\n        for j in range(w):\n            rectangles.append((i, j))\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] + x[1])\n    rectangles = sorted(rectangles, key=lambda x: x[0] * x[1])\n    rect"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    q = int(stdin)\n    for _ in range(q):\n        i, m = map(int, stdin.split())\n        m = list(map(int, stdin.split()))\n        print(longest_subsequence(a, i, m))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    payouts = [int(x) for x in stdin.split()]\n    payouts.sort()\n    payouts.reverse()\n    total = 0\n    for i in range(N):\n        total += payouts[i]\n    return str(total)"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    a.reverse()\n    b = []\n    for i in range(n):\n        if i == a[i]:\n            b.append(i + 1)\n        else:\n            if a[i] > a[i + 1]:\n                b.append(a[i + 1])\n            else:\n                b.append(a[i])\n    return''.join(map(str, b))"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vertices = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        vertices.append((x, y))\n    vertices.sort(key=lambda x: x[0])\n    vertices.sort(key=lambda x: x[1])\n    max_circumference = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            circumference = (vertices[i][0] - vertices[j][0]) ** 2 + (vertices[i][1] - vertices[j][1]) ** 2\n            if circumference > max_circumference:\n                max_circumference = circumference\n    return str(max_circumference)"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    onions = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        onions.append((x, y))\n    fence = []\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        fence.append((a, b))\n    onions = sorted(onions, key=lambda x: x[0])\n    fence = sorted(fence, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    fence = sorted(fence, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    fence = sorted(fence, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[1])\n    fence = sorted(fence, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x: x[1])\n    onions = sorted(onions, key=lambda x: x[0])\n    onions = sorted(onions, key=lambda x"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    return str(max(1, m // 2, (m + k) // 2) % 998244353)"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = set(map(int, stdin.split()))\n    for a in S:\n        for b in S:\n            for c in S:\n                if a + b + c == N:\n                    return str(a) + \" \" + str(b) + \" \" + str(c)\n    return \"No solution\""
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    taboo = stdin.split()\n    taboo = list(map(lambda x: x.replace('0', '').replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    taboo = list(map(lambda x: x.replace('1', ''), taboo))\n    taboo = list(map(lambda x: x.replace('0', ''), taboo))\n    "
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    companies = {}\n    for line in stdin.splitlines():\n        company, shares = line.split()\n        shares = int(shares)\n        if company not in companies:\n            companies[company] = []\n        companies[company].append(shares)\n    days = sorted(companies.keys())\n    total = 0\n    for day in days:\n        total += sum(companies[day])\n    return total"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    count = 0\n    for i in range(L, R + 1):\n        count += sum(int(d) for d in str(i))\n    return str(count)"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    points = []\n    for i in range(a):\n        points.append(list(map(int, stdin.split())))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key="
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    heights = list(map(int, stdin.split()))\n    heights.sort()\n    return str(heights)"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p_t, p_1, p_2 = map(float, stdin.split())\n    if p_t < 0 or p_1 < 0 or p_2 < 0:\n        return \"none\"\n    if p_t > 10000 or p_1 > 100 or p_2 > 100:\n        return \"none\"\n    if p_t == 0:\n        return \"none\"\n    if p_1 == 0:\n        return \"none\"\n    if p_2 == 0:\n        return \"none\"\n    if p_t == p_1 and p_t == p_2:\n        return \"none\"\n    if p_t == p_1:\n        return str(p_t) + \" \" + str(p_2) + \" \" + str(p_1)\n    if p_t == p_2:\n        return str(p_1) + \" \" + str(p_t) + \" \" + str(p_2)\n    if p_1 == p_2:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_t == p_1 + p_2:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_1 == p_2 + p_t:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_t == p_1 + p_2 + p_t:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_1 == p_2 + p_t + p_1:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_t == p_1 + p_2 + p_t + p_1:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_1 == p_2 + p_t + p_1 + p_2:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_t == p_1 + p_2 + p_t + p_1 + p_2:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_1 == p_2 + p_t + p_1 + p_2 + p_t:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_t == p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_1 == p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_t == p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_1 == p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_t == p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1:\n        return str(p_t) + \" \" + str(p_1) + \" \" + str(p_2)\n    if p_1 == p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1 + p_2 + p_t + p_1"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    dominoes = []\n    for _ in range(N):\n        dominoes.append(list(map(int, stdin.split())))\n    dominoes = sorted(dominoes, key=lambda x: x[0])\n    dominoes = sorted(dominoes, key=lambda x: x[1])\n    dominoes = sorted(dominoes, key=lambda x: x[2])\n    dominoes = sorted(dominoes, key=lambda x: x[0] * x[1] * x[2])\n    return str(max([x[0] * x[1] * x[2] for x in dominoes]))"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scores = []\n    for i in range(n):\n        scores.append(int(stdin.split()[i]))\n    scores.sort()\n    scores.reverse()\n    return str(scores[0]) + \" \" + str(scores[1]) + \" \" + str(scores[2])"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, l = map(int, stdin.split())\n    rooms = []\n    for _ in range(r):\n        rooms.append(list(map(int, stdin.split())))\n    rooms = [[0] * (l + 1) for _ in range(r + 1)]\n    for i in range(1, r + 1):\n        for j in range(1, l + 1):\n            rooms[i][j] = rooms[i - 1][j] + rooms[i][j - 1]\n    return str(max(map(len, rooms)))"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(float, stdin.split())\n    t1, t2, t3, t4 = map(int, stdin.split())\n    n, k, r, s, l = map(int, stdin.split())\n    return str(round(f(a, b, c, t1, t2, t3, t4, n, k, r, s, l), 6))\n\ndef"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, l = map(int, stdin.split())\n    h = int(w / 2)\n    x1, y1, x2, y2, x3, y3, r = map(int, stdin.split())\n    x1 -= h\n    x2 -= h\n    x3 -= h\n    x1, y1, x2, y2, x3, y3 = sorted((x1, y1, x2, y2, x3, y3))\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2:\n        return 'impossible'\n    if x1 == x3:\n        return 'impossible'\n    if x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        return 'impossible'\n    if x1 == x2 and x2 == x3:\n        "
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = []\n    for i in range(n):\n        m.append(stdin)\n    m.sort()\n    m.reverse()\n    return ''.join(m)"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, N = map(int, stdin.split())\n    break_times = list(map(int, stdin.split()))\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    break_times.append(T)\n    break_times.sort()\n    "
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    intersections = []\n    for i in range(n):\n        intersections.append(list(map(int, stdin.split())))\n    intersections.sort(key=lambda x: x[0])\n    intersections.sort(key=lambda x: x[1])\n    intersections.sort(key=lambda x: x[2])\n    intersections.sort(key=lambda x: x[3])\n    intersections.sort(key=lambda x: x[4])\n    intersections.sort(key=lambda x: x[5])\n    intersections.sort(key=lambda x: x[6])\n    intersections.sort(key=lambda x: x[7])\n    intersections.sort(key=lambda x: x[8])\n    intersections.sort(key=lambda x: x[9])\n    intersections.sort(key=lambda x: x[10])\n    intersections.sort(key=lambda x: x[11])\n    intersections.sort(key=lambda x: x[12])\n    intersections.sort(key=lambda x: x[13])\n    intersections.sort(key=lambda x: x[14])\n    intersections.sort(key=lambda x: x[15])\n    intersections.sort(key=lambda x: x[16])\n    intersections.sort(key=lambda x: x[17])\n    intersections.sort(key=lambda x: x[18])\n    intersections.sort(key=lambda x: x[19])\n    intersections.sort(key=lambda x: x[20])\n    intersections.sort(key=lambda x: x[21])\n    intersections.sort(key=lambda x: x[22])\n    intersections.sort(key=lambda x: x[23])\n    intersections.sort(key=lambda x: x[24])\n    intersections.sort(key=lambda x: x[25])\n    intersections.sort(key=lambda x: x[26])\n    intersections.sort(key=lambda x: x[27])\n    intersections.sort(key=lambda x: x[28])\n    intersections.sort(key=lambda x: x[29])\n    intersections.sort(key=lambda x: x[30])\n    intersections.sort(key=lambda x: x[31])\n    intersections.sort(key=lambda x: x[32])\n    intersections.sort(key=lambda x: x[33])\n    intersections.sort(key=lambda x: x[34])\n    intersections.sort(key=lambda x: x[35])\n    intersections.sort(key=lambda x: x[36])\n    intersections.sort(key=lambda x: x[37])\n    intersections.sort(key=lambda x: x[38])\n    intersections.sort(key=lambda x: x[39])\n    intersections.sort(key=lambda x: x[40])\n    intersections.sort(key=lambda x: x[41])\n    intersections.sort(key=lambda x: x[42])\n    intersections.sort(key=lambda x: x[43])\n    intersections.sort(key=lambda x: x[44])\n    intersections.sort(key=lambda x: x[45])\n    intersections.sort(key=lambda x: x[46])\n    intersections.sort(key=lambda x: x[47])\n    intersections.sort(key=lambda x: x[48])\n    intersections.sort(key=lambda x: x[49])\n    intersections.sort(key=lambda x: x[50])\n    intersections.sort(key=lambda x: x[51])\n    intersections.sort(key=lambda x: x[52])\n    intersections.sort(key=lambda x: x[53])\n    intersections.sort(key=lambda x: x[54])\n    intersections.sort(key=lambda x: x[55])\n    intersections.sort(key=lambda x: x[56])\n    intersections.sort(key=lambda x: x[57])\n    intersections.sort(key=lambda x: x[58])\n    intersections.sort(key=lambda x: x[59])\n    intersections.sort(key=lambda x: x[60])\n    intersections.sort(key=lambda x: x[61])\n    intersections.sort(key=lambda x: x[62])\n    intersections.sort(key=lambda x: x[63])\n    intersections.sort(key=lambda x: x[64])\n    intersections.sort(key=lambda x: x[65])\n    intersections.sort(key=lambda x: x[66])\n    intersections.sort(key=lambda x: x[67])\n    intersections.sort(key=lambda x: x[68])\n    intersections.sort(key=lambda x: x[69])\n    intersections.sort(key=lambda x: x[70])\n    intersections.sort(key=lambda x: x[71])\n    intersections.sort(key=lambda x: x[72])\n    intersections.sort(key=lambda x: x[73])\n    intersections.sort(key=lambda x: x[74])\n    intersections.sort(key=lambda x: x[75])\n    intersections.sort(key=lambda x: x[76])\n    intersections.sort(key=lambda x: x[77])\n    intersections.sort(key=lambda x: x[78])\n    intersections.sort(key=lambda x: x[79])\n    intersections.sort(key=lambda x: x[80])\n    intersections.sort(key=lambda x: x[81])\n    intersections.sort(key=lambda x: x[82])\n    intersections.sort(key=lambda x: x[83])\n    intersections.sort(key=lambda x: x[84])\n    intersections.sort(key=lambda x: x[85])\n    intersections.sort(key=lambda x: x[86])\n    intersections.sort(key=lambda x: x[87])\n    intersections.sort(key=lambda x: x[88])\n    intersections.sort(key=lambda x: x[89])\n    intersections.sort(key=lambda x: x[90])\n    intersections.sort(key=lambda x: x[91])\n    intersections.sort(key="
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    misha = list(map(int, stdin.split()))\n    nadia = list(map(int, stdin.split()))\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    nadia.append(nadia[0])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[-1])\n    nadia.append(nadia[-1])\n    misha.sort()\n    nadia.sort()\n    misha.append(misha[0])\n    n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, k = map(int, stdin.split())\n    lamps = []\n    for i in range(k):\n        lamps.append(tuple(map(int, stdin.split())))\n    lamps = sorted(lamps, key=lambda lamp: (lamp[0], lamp[1]))\n    for lamp in lamps:\n        if (lamp[0] + lamp[1]) > r:\n            return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    languages = {}\n    for i in range(m):\n        l1, l2 = map(int, stdin.split())\n        if l1 not in languages:\n            languages[l1] = set()\n        if l2 not in languages:\n            languages[l2] = set()\n        languages[l1].add(i)\n        languages[l2].add(i)\n    pairs = []\n    for i in range(n):\n        if i not in languages:\n            continue\n        for j in range(i + 1, n):\n            if j not in languages:\n                continue\n            if len(languages[i]) == 1 and len(languages[j]) == 1:\n                pairs.append((i, j))\n    if len(pairs) == 0:\n        return \"impossible\"\n    pairs.sort(key=lambda x: len(languages[x[0]]))\n    return \"\\n\".join(map(str, pairs))"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    sensors = []\n    for i in range(n):\n        sensors.append((i, int(stdin.split()[i + 1])))\n    sensors.sort(key=lambda x: x[1])\n    sensors.sort(key=lambda x: x[0])\n    sensors = set(sensors)\n    sensors = list(sensors)\n    sensors.sort(key=lambda x: x[1])\n    sensors.sort(key=lambda x: x[0])\n    return str(len(sensors)) + '\\n' +''.join(map(str, sensors))"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    return str(a[0] - a[-1])"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    plants = []\n    for _ in range(N):\n        x, y = map(int, stdin.split())\n        plants.append((x, y))\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[1])\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x: (x[0], x[1]), plants))\n    plants = list(map(lambda x: (x[1], x[0]), plants))\n    plants = list(map(lambda x:"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for line in lines:\n        if line.startswith(\"LET\"):\n            line = line.split()\n            if line[1].isnumeric():\n                line[1] = int(line[1])\n            else:\n                line[1] = ord(line[1]) - ord('A') + 1\n            line = \" \".join(line)\n        elif line.startswith(\"PRINT\"):\n            line = line.split()\n            if line[1].isnumeric():\n                line[1] = int(line[1])\n            else:\n                line[1] = ord(line[1]) - ord('A') + 1\n            line = \" \".join(line)\n        elif line.startswith(\"PRINTLN\"):\n            line = line.split()\n            if line[1].isnumeric():\n                line[1] = int(line[1])\n            else:\n                line[1] = ord(line[1]) - ord('A') + 1\n            line = \" \".join(line)\n        elif line.startswith(\"GOTO\"):\n            line = line.split()\n            if line[1].isnumeric():\n                line[1] = int(line[1])\n            else:\n                line[1] = ord(line[1]) - ord('A') + 1\n            line = \" \".join(line)\n        else:\n            line = line.split()\n            if line[1].isnumeric():\n                line[1] = int(line[1])\n            else:\n                line[1] = ord(line[1]) - ord('A') + 1\n            line = \" \".join(line)\n        print(line)\n    return \"\""
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    tasks = list(map(int, stdin.split()))\n    tasks.sort()\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(N):\n        for j in range(i, N):\n            if tasks[i] == tasks[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i + 1][j] + dp[i][j - 1]\n    return str(dp[0][N - 1])"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for _ in range(2 * n - 1):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    edges.sort(key=lambda x: x[1])\n    left = []\n    right = []\n    for u, v in edges:\n        if u < v:\n            left.append(u)\n        else:\n            right.append(u)\n    if left == right:\n        return \"impossible\"\n    left.sort()\n    right.sort()\n    if left == right:\n        return \"LLRRRRLL\"\n    return \"LLRLRRLR\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    teams = []\n    for i in range(n):\n        teams.append(list(map(int, stdin.split())))\n    teams.sort(key=lambda x: x[0])\n    teams.sort(key=lambda x: x[1])\n    invitees = []\n    for i in range(n):\n        if teams[i][0] not in invitees:\n            invitees.append(teams[i][0])\n        if teams[i][1] not in invitees:\n            invitees.append(teams[i][1])\n    return str(len(invitees)) + '\\n' +''.join(map(str, invitees))"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = [[] for _ in range(N)]\n    for _ in range(M):\n        u, v, w = map(int, stdin.split())\n        edges[u].append((v, w))\n        edges[v].append((u, w))\n    s, t = map(int, stdin.split())\n    visited = set()\n    visited.add(s)\n    queue = deque([(s, 0)])\n    while queue:\n        node, dist = queue.popleft()\n        if node == t:\n            return dist\n        for nei, w in edges[node]:\n            if nei not in visited:\n                visited.add(nei)\n                queue.append((nei, dist + w))\n    return -1\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(float, stdin.split())\n    W, H, X, Y = map(int, stdin.split())\n    h = []\n    for i in range(H):\n        h.append(list(map(int, stdin.split())))\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h[:X] + h[Y:]\n    h = h[::-1]\n    h = h"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    preferences = []\n    for i in range(N):\n        preferences.append(list(map(int, stdin.split())))\n    preferences.sort(key=lambda x: x[1:], reverse=True)\n    teachers = []\n    for i in range(N):\n        teachers.append(preferences[i][0])\n    teachers = set(teachers)\n    for i in range(N):\n        if preferences[i][0] in teachers:\n            teachers.remove(preferences[i][0])\n    return len(teachers)"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    R, C = map(int, stdin.split())\n    flower_map = [[int(flower) for flower in stdin.split()] for _ in range(N)]\n    visited = [[False] * N for _ in range(N)]\n    visited[R][C] = True\n    max_visited = 1\n    visited_flower = flower_map[R][C]\n    for r in range(N):\n        for c in range(N):\n            if not visited[r][c]:\n                visited[r][c] = True\n                visited_flower = max(visited_flower, flower_map[r][c])\n                max_visited = max(max_visited, visited_flower)\n                visited_flower = max(visited_flower, flower_map[r][c])\n    return str(max_visited)\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    towers = []\n    for i in range(n):\n        x, y = map(float, stdin.split())\n        towers.append((x, y))\n    towers.sort(key=lambda x: x[0])\n    towers.sort(key=lambda x: x[1])\n    towers = sorted(towers, key=lambda x: x[0])\n    towers = sorted(towers, key=lambda x: x[1])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0] - x[1])\n    towers = sorted(towers, key=lambda x: x[1] - x[0])\n    towers = sorted(towers, key=lambda x: x[0]"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    d = []\n    for i in range(k):\n        d.append(int(stdin.split()[i]))\n    return str(min(d))"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    A, B, C, *T = map(int, T)\n    return str(max(1, min(N, sum(1 + (A * (t + 1) + B) % C for t in T)))) + \" \" + str(sum(T))"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(set(str(i) + str(j) for i in range(1, 10) for j in range(1, 10) if str(i) + str(j) == str(i) + str(j) and str(i) + str(j)!= str(j) + str(i))))"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    candidates = []\n    for i in range(n):\n        candidates.append(list(map(int, stdin.split())))\n    candidates.sort(key=lambda x: x[1] / x[0])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort(key=lambda x: x[2])\n    candidates.sort(key=lambda x: x[0])\n    candidates.sort(key=lambda x: x[1])\n    candidates.sort"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k, P = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    return str(count_k_colours(graph, k, P))\n\n\ndef"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    colors = [[int(x) for x in stdin.split()] for _ in range(n)]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for c in colors]\n    colors = [[0] + c + [0] for"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    grid = stdin.splitlines()\n    targets = []\n    for i in range(h):\n        if grid[i][0] == 'T':\n            targets.append(i)\n    probabilities = []\n    for i in range(h):\n        probabilities.append([])\n        for j in range(w):\n            if grid[i][j] == 'X':\n                probabilities[i].append(0)\n            elif grid[i][j] == 'T':\n                probabilities[i].append(1)\n            else:\n                probabilities[i].append(0)\n    for i in range(h):\n        for j in range(w):\n            if probabilities[i][j] == 0:\n                continue\n            if i == 0:\n                if j == 0:\n                    probabilities[i][j] = probabilities[i][j + 1] * probabilities[i + 1][j]\n                elif j == w - 1:\n                    probabilities[i][j] = probabilities[i + 1][j] * probabilities[i + 1][j - 1]\n                else:\n                    probabilities[i][j] = probabilities[i + 1][j] * probabilities[i + 1][j - 1] + probabilities[i + 1][j] * probabilities[i + 1][j + 1]\n            elif i == h - 1:\n                if j == 0:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j + 1]\n                elif j == w - 1:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j - 1]\n                else:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j - 1] + probabilities[i - 1][j] * probabilities[i - 1][j + 1]\n            else:\n                if j == 0:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j + 1] + probabilities[i + 1][j] * probabilities[i + 1][j + 1]\n                elif j == w - 1:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j - 1] + probabilities[i + 1][j] * probabilities[i + 1][j - 1]\n                else:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j - 1] + probabilities[i + 1][j] * probabilities[i + 1][j - 1] + probabilities[i - 1][j] * probabilities[i - 1][j + 1] + probabilities[i + 1][j] * probabilities[i + 1][j + 1]\n    for i in range(h):\n        for j in range(w):\n            if probabilities[i][j] == 0:\n                continue\n            if i == 0:\n                if j == 0:\n                    probabilities[i][j] = probabilities[i][j + 1] * probabilities[i + 1][j]\n                elif j == w - 1:\n                    probabilities[i][j] = probabilities[i + 1][j] * probabilities[i + 1][j - 1]\n                else:\n                    probabilities[i][j] = probabilities[i + 1][j] * probabilities[i + 1][j - 1] + probabilities[i + 1][j] * probabilities[i + 1][j + 1]\n            elif i == h - 1:\n                if j == 0:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j + 1]\n                elif j == w - 1:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j - 1]\n                else:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j - 1] + probabilities[i - 1][j] * probabilities[i - 1][j + 1]\n            else:\n                if j == 0:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j + 1] + probabilities[i + 1][j] * probabilities[i + 1][j + 1]\n                elif j == w - 1:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j - 1] + probabilities[i + 1][j] * probabilities[i + 1][j - 1]\n                else:\n                    probabilities[i][j] = probabilities[i - 1][j] * probabilities[i - 1][j - 1] + probabilities[i + 1][j] * probabilities[i + 1][j - 1] + probabilities[i - 1][j] * probabilities[i - 1][j + 1] + probabilities[i + 1][j] * probabilities[i + 1][j + 1]\n    for i in range(h):\n        for j in range(w):\n            if probabilities[i][j] == 0:\n                continue\n            if i == 0:\n                if j == 0:\n                    probabilities[i][j] = probabilities[i][j + 1] * probabilities[i + 1][j]\n                elif j == w - 1:\n                    probabilities[i][j] = probabilities[i + 1][j] * probabilities[i + 1][j - 1]\n                "
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(float, stdin.split())\n    return str(round(a / (a + b + c + d) * 100, 6))"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    trails = []\n    for _ in range(m):\n        u, v, d = map(int, stdin.split())\n        trails.append((u, v, d))\n    trails.sort(key=lambda x: x[2])\n    cabins = {0}\n    for u, v, d in trails:\n        if u in cabins:\n            cabins.add(v)\n        else:\n            cabins.add(u)\n    return len(cabins) - 1\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    trees = []\n    for i in range(N):\n        trees.append(list(map(int, stdin.split())))\n    trees.sort(key=lambda x: x[0])\n    trees.sort(key=lambda x: x[1])\n    trees.sort(key=lambda x: x[2])\n    trees.sort(key=lambda x: x[3])\n    trees.sort(key=lambda x: x[4])\n    trees.sort(key=lambda x: x[5])\n    trees.sort(key=lambda x: x[6])\n    trees.sort(key=lambda x: x[7])\n    trees.sort(key=lambda x: x[8])\n    trees.sort(key=lambda x: x[9])\n    trees.sort(key=lambda x: x[10])\n    trees.sort(key=lambda x: x[11])\n    trees.sort(key=lambda x: x[12])\n    trees.sort(key=lambda x: x[13])\n    trees.sort(key=lambda x: x[14])\n    trees.sort(key=lambda x: x[15])\n    trees.sort(key=lambda x: x[16])\n    trees.sort(key=lambda x: x[17])\n    trees.sort(key=lambda x: x[18])\n    trees.sort(key=lambda x: x[19])\n    trees.sort(key=lambda x: x[20])\n    trees.sort(key=lambda x: x[21])\n    trees.sort(key=lambda x: x[22])\n    trees.sort(key=lambda x: x[23])\n    trees.sort(key=lambda x: x[24])\n    trees.sort(key=lambda x: x[25])\n    trees.sort(key=lambda x: x[26])\n    trees.sort(key=lambda x: x[27])\n    trees.sort(key=lambda x: x[28])\n    trees.sort(key=lambda x: x[29])\n    trees.sort(key=lambda x: x[30])\n    trees.sort(key=lambda x: x[31])\n    trees.sort(key=lambda x: x[32])\n    trees.sort(key=lambda x: x[33])\n    trees.sort(key=lambda x: x[34])\n    trees.sort(key=lambda x: x[35])\n    trees.sort(key=lambda x: x[36])\n    trees.sort(key=lambda x: x[37])\n    trees.sort(key=lambda x: x[38])\n    trees.sort(key=lambda x: x[39])\n    trees.sort(key=lambda x: x[40])\n    trees.sort(key=lambda x: x[41])\n    trees.sort(key=lambda x: x[42])\n    trees.sort(key=lambda x: x[43])\n    trees.sort(key=lambda x: x[44])\n    trees.sort(key=lambda x: x[45])\n    trees.sort(key=lambda x: x[46])\n    trees.sort(key=lambda x: x[47])\n    trees.sort(key=lambda x: x[48])\n    trees.sort(key=lambda x: x[49])\n    trees.sort(key=lambda x: x[50])\n    trees.sort(key=lambda x: x[51])\n    trees.sort(key=lambda x: x[52])\n    trees.sort(key=lambda x: x[53])\n    trees.sort(key=lambda x: x[54])\n    trees.sort(key=lambda x: x[55])\n    trees.sort(key=lambda x: x[56])\n    trees.sort(key=lambda x: x[57])\n    trees.sort(key=lambda x: x[58])\n    trees.sort(key=lambda x: x[59])\n    trees.sort(key=lambda x: x[60])\n    trees.sort(key=lambda x: x[61])\n    trees.sort(key=lambda x: x[62])\n    trees.sort(key=lambda x: x[63])\n    trees.sort(key=lambda x: x[64])\n    trees.sort(key=lambda x: x[65])\n    trees.sort(key=lambda x: x[66])\n    trees.sort(key=lambda x: x[67])\n    trees.sort(key=lambda x: x[68])\n    trees.sort(key=lambda x: x[69])\n    trees.sort(key=lambda x: x[70])\n    trees.sort(key=lambda x: x[71])\n    trees.sort(key=lambda x: x[72])\n    trees.sort(key=lambda x: x[73])\n    trees.sort(key=lambda x: x[74])\n    trees.sort(key=lambda x: x[75])\n    trees.sort(key=lambda x: x[76])\n    trees.sort(key=lambda x: x[77])\n    trees.sort(key=lambda x: x[78])\n    trees.sort(key=lambda x: x[79])\n    trees.sort(key=lambda x: x[80])\n    trees.sort(key=lambda x: x[81])\n    trees.sort(key=lambda x: x[82])\n    trees.sort(key=lambda x: x[83])\n    trees.sort(key=lambda x: x[84])\n    trees.sort(key=lambda x: x[85])\n    trees.sort(key=lambda x: x[86])\n    trees.sort(key=lambda x: x[87])\n    trees.sort(key=lambda x: x[88])\n    trees.sort(key=lambda x: x[89])\n    trees.sort(key=lambda x: x[90])\n    trees.sort(key=lambda x: x[91])\n    trees.sort(key=lambda x: x[92])\n    trees.sort(key=lambda x: x[93])\n    trees.sort(key=lambda x: x[94])\n    trees.sort(key=lambda x: x[95])\n    t"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rectangles = []\n    for i in range(n):\n        rectangles.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if rectangles[i][0] <= rectangles[j][2] and rectangles[i][2] >= rectangles[j][0] and rectangles[i][1] <= rectangles[j][3] and rectangles[i][3] >= rectangles[j][1]:\n                return '1'\n    return '0'"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    cliff = stdin.split()\n    cliff = list(map(int, cliff))\n    cliff = list(map(lambda x: x - 9, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map(lambda x: x - 1, cliff))\n    cliff = list(map("
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    if n == 1:\n        return \"impossible\"\n    for i in range(1, n):\n        if a[i] == a[i - 1] + 1:\n            continue\n        for j in range(1, n):\n            if a[i] == a[j] + 1:\n                return str(a[i - 1]) + \" \" + str(a[j])\n    return \"impossible\""
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trees = []\n    for i in range(n):\n        x, y, r = map(int, stdin.split())\n        trees.append((x, y, r))\n    b, d = map(int, stdin.split())\n    trees.sort(key=lambda x: x[0])\n    trees.sort(key=lambda x: x[1])\n    trees.sort(key=lambda x: x[2])\n    trees.sort(key=lambda x: x[0] + x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1] * x[2] * x[0] * x[1])\n    trees.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] * x[1] * x[2] * x[0] + x[0] * x[1"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2 = stdin.split()\n    s1 = list(s1)\n    s2 = list(s2)\n    moves = 0\n    while s1!= s2:\n        if s1[0] == s2[0]:\n            s1 = s1[1:]\n            s2 = s2[1:]\n        else:\n            s1 = s1[1:]\n            s2 = s2[1:]\n            s1 = s1[:-1]\n            s2 = s2[:-1]\n            s1 = s1[::-1]\n            s2 = s2[::-1]\n            s1 = s1[1:]\n            s2 = s2[1:]\n            s1 = s1[:-1]\n            s2 = s2[:-1]\n            s1 = s1[::-1]\n            s2 = s2[::-1]\n            s1 = s1[1:]\n            s2 = s2[1:]\n            moves += 1\n    return moves"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    beacons = []\n    mountains = []\n    for i in range(n):\n        beacons.append(tuple(map(int, stdin.split()[i * 2:i * 2 + 2])))\n    for i in range(m):\n        mountains.append(tuple(map(int, stdin.split()[i * 2 + n:i * 2 + n + 2])))\n    return str(solve(beacons, mountains))\n\n\ndef"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    strings = sorted(stdin.split())\n    test_string = stdin.split()[-1]\n    strings.sort()\n    return strings.index(test_string) % (10**9 + 7)"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores.sort()\n    avg = sum(scores) / n\n    if avg >= k / n:\n        return \" \".join(map(str, range(1, n + 1)))\n    else:\n        return \"impossible\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"shovel time!\"\n    else:\n        return str(solution(stdin) % 1000000009)"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    b = sorted(map(int, stdin.split()))\n    ans = 0\n    for i in range(N):\n        ans += b[i]\n        b[i] = ans\n    return str(ans)"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    return str(count_ways(n, m, p))\n\ndef"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    toppings = set()\n    for line in lines:\n        toppings.update(line.split())\n    toppings = list(toppings)\n    toppings.sort()\n    return''.join(toppings)"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    predictions = sorted(stdin.split(), key=lambda x: x[0])\n    return ''.join(predictions)"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    c, d = map(float, stdin.split())\n    rain = []\n    for i in range(T):\n        rain.append(float(stdin))\n    return str(round(sum(rain) * c * d, 6))"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    weights.sort()\n    if weights[0]!= 1:\n        return \"NO\"\n    if weights[-1]!= 1:\n        return \"NO\"\n    if weights[0] == weights[-1]:\n        return \"NO\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1:\n        return \"YES\"\n    if weights[-1] == 1:\n        return \"YES\"\n    if weights[0] == 1 and weights[-1] == 1:\n        return \"YES\"\n    if weights[0] =="
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = {}\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        tree[a] = b\n        tree[b] = a\n    m = int(stdin)\n    magic = {}\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        magic[a] = b\n        magic[b] = a\n    min_magic = float('inf')\n    min_path = None\n    for i in range(1, n + 1):\n        if i in magic:\n            continue\n        path = []\n        curr = i\n        while curr!= 1:\n            path.append(curr)\n            curr = tree[curr]\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = tree[curr]\n            path.append(curr)\n        path.append(1)\n        curr = 1\n        while curr!= i:\n            curr = magic["
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = []\n    R = []\n    for i in range(N):\n        L.append(float(stdin.split()[i]))\n        R.append(float(stdin.split()[i+N]))\n    L.sort()\n    R.sort()\n    ans = 0\n    for i in range(N):\n        ans += abs(L[i] - R[i])\n    return str(ans / (N * N))"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    firing = []\n    hiring = []\n    for i in range(n):\n        firing.append(int(stdin.split()[i]))\n        hiring.append(int(stdin.split()[i+n]))\n    firing.sort()\n    hiring.sort()\n    firing.reverse()\n    hiring.reverse()\n    firing_id = 1\n    hiring_id = 1\n    for i in range(n):\n        if firing[i]!= hiring[i]:\n            firing_id = hiring_id\n            hiring_id = i+1\n            break\n    return str(firing_id) +'' + str(hiring_id)"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    numbers.reverse()\n    for i in range(n):\n        if i == 0:\n            if numbers[i] == numbers[i + 1]:\n                return \"none\"\n            else:\n                return numbers[i]\n        elif i == n - 1:\n            if numbers[i] == numbers[i - 1]:\n                return \"none\"\n            else:\n                return numbers[i]\n        else:\n            if numbers[i] == numbers[i - 1] or numbers[i] == numbers[i + 1]:\n                return \"none\"\n            else:\n                return numbers[i]"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pebbles = list(map(int, stdin.split()))\n    pebbles.sort()\n    pebbles.reverse()\n    pebble_sum = 0\n    for i in range(n):\n        pebble_sum += pebbles[i]\n    pebble_sum = pebble_sum - pebbles[0]\n    pebble_sum = pebble_sum - pebbles[1]\n    pebble_sum = pebble_sum - pebbles[2]\n    pebble_sum = pebble_sum - pebbles[3]\n    pebble_sum = pebble_sum - pebbles[4]\n    pebble_sum = pebble_sum - pebbles[5]\n    pebble_sum = pebble_sum - pebbles[6]\n    return str(pebble_sum)"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    maze = stdin.split()\n    maze = [[maze[i] for i in range(R * C)]]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i][j] for i in range(R)] for j in range(C)]\n    maze = [[maze[i]["
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    insecure = list(map(int, stdin.split()))\n    insecure = set(insecure)\n    connections = []\n    for i in range(m):\n        connections.append(list(map(int, stdin.split())))\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0])\n    connections = set(connections)\n    connections = list(connections)\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[1])\n    connections.sort(key=lambda x: x[0"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"impossible\"\n    if a == 0 and b == 0 and c == 1 and d == 0:\n        return \"01\"\n    if a == 0 and b == 1 and c == 0 and d == 0:\n        return \"00\"\n    if a == 1 and b == 0 and c == 0 and d == 0:\n        return \"10\"\n    if a == 1 and b == 0 and c == 1 and d == 0:\n        return \"11\"\n    if a == 1 and b == 1 and c == 0 and d == 0:\n        return \"01\"\n    if a == 1 and b == 1 and c == 1 and d == 0:\n        return \"10\"\n    if a == 1 and b == 1 and c == 0 and d == 1:\n        return \"11\"\n    if a == 1 and b == 1 and c == 1 and d == 1:\n        return \"11\"\n    return \"impossible\""
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, B = map(int, stdin.split())\n    board = [[0] * M for _ in range(N)]\n    target = [[0] * M for _ in range(N)]\n    for i in range(B):\n        r, c = map(int, stdin.split())\n        board[r - 1][c - 1] = 1\n        target[r - 1][c - 1] = 1\n    for i in range(1, N):\n        for j in range(1, M):\n            if board[i][j] == 1 and target[i][j] == 1:\n                target[i][j] = 0\n                for k in range(4):\n                    if board[i][j] == 1:\n                        if k == 0:\n                            if board[i - 1][j] == 1:\n                                target[i - 1][j] = 0\n                            else:\n                                target[i][j] = 0\n                        elif k == 1:\n                            if board[i][j - 1] == 1:\n                                target[i][j - 1] = 0\n                            else:\n                                target[i][j] = 0\n                        elif k == 2:\n                            if board[i + 1][j] == 1:\n                                target[i + 1][j] = 0\n                            else:\n                                target[i][j] = 0\n                        else:\n                            if board[i][j + 1] == 1:\n                                target[i][j + 1] = 0\n                            else:\n                                target[i][j] = 0\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 1 and target[i][j] == 0:\n                return \"impossible\"\n    for i in range(N):\n        for j in range(M):\n            if target[i][j] == 1:\n                return \"possible\"\n    return \"impossible\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    planets = []\n    for i in range(n):\n        planets.append(list(map(int, stdin.split())))\n    planets.sort(key=lambda x: x[0])\n    planets.sort(key=lambda x: x[1])\n    planets.sort(key=lambda x: x[2])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[19])\n    planets.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[19] + x[20])\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    table = [[int(i) for i in stdin.split()] for _ in range(N)]\n    for i in range(N):\n        table[i].sort()\n    for i in range(N):\n        for j in range(N):\n            if table[i][j]!= table[i][0]:\n                break\n        else:\n            return str(N - i)\n    return str(N)"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    return str(min(abs(x1 - x2), abs(y1 - y2)))"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) // 2\n    if k == 3:\n        return n * (n - 1) * (n - 2) // 6\n    if k == 4:\n        return n * (n - 1) * (n - 2) * (n - 3) // 24\n    if k == 5:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // 120\n    if k == 6:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) // 720\n    if k == 7:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) // 840\n    if k == 8:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) // 900\n    if k == 9:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) // 1200\n    if k == 10:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) // 1440\n    if k == 11:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) // 2880\n    if k == 12:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) // 4200\n    if k == 13:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) // 4800\n    if k == 14:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) // 6240\n    if k == 15:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) // 8000\n    if k == 16:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) // 1680\n    if k == 17:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) // 4160\n    if k == 18:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17) // 6240\n    if k == 19:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    floor = stdin.pop(0)\n    robot = stdin.pop(0)\n    floor = floor.split()\n    robot = robot.split()\n    floor = list(map(int, floor))\n    robot = list(map(int, robot))\n    floor = floor[::-1]\n    robot = robot[::-1]\n    floor = list(map(str, floor))\n    robot = list(map(str, robot))\n    floor =''.join(floor)\n    robot =''.join(robot)\n    return floor +'' + robot\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B, T, f = map(int, stdin.split())\n    bugs = []\n    for _ in range(B):\n        p, s = map(float, stdin.split())\n        bugs.append((p, s))\n    bugs.sort(key=lambda x: x[1])\n    total = 0\n    for i in range(T):\n        p, s = bugs[i]\n        if i == 0:\n            total += s\n        else:\n            total += s * f\n    return str(total)"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, v_h, N = map(int, stdin.split())\n    if N == 1:\n        return 'IMPOSSIBLE'\n    gates = []\n    for i in range(N):\n        gates.append((int(stdin.split()[2 * i]), int(stdin.split()[2 * i + 1])))\n    gates.sort(key=lambda x: x[1])\n    gates.sort(key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates, key=lambda x: x[1])\n    gates = sorted(gates, key=lambda x: x[0])\n    gates = [(x, y) for x, y in gates]\n    gates = sorted(gates,"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, A = map(int, stdin.split())\n    trees = []\n    aspens = []\n    for i in range(P):\n        trees.append(list(map(float, stdin.split())))\n    for i in range(A):\n        aspens.append(list(map(float, stdin.split())))\n    trees = sorted(trees, key=lambda x: x[0])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[1])\n    trees = sorted(trees, key=lambda x: x[0])\n    aspens = sorted(aspens, key=lambda x: x[1])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[0])\n    aspens = sorted(aspens, key=lambda x: x[1])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    aspens = sorted(aspens, key=lambda x: x[0])\n    trees = sorted(trees, key=lambda x: x[1])\n    asp"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    books = []\n    for i in range(N):\n        books.append([int(x) for x in stdin.split()])\n    books.sort(key=lambda x: x[0] * x[1])\n    return str(sum([x[0] * x[1] for x in books]) * max([x[0] for x in books]))"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stickers = []\n    for i in range(n):\n        stickers.append(stdin.split())\n    stickers.sort(key=lambda x: x[1])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda x: x[0])\n    stickers.sort(key=lambda"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S, L = map(int, stdin.split())\n    individuals = list(map(int, stdin.split()))\n    corporations = list(map(int, stdin.split()))\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = [i for i in range(1, S + 1)]\n    individuals.sort()\n    corporations.sort()\n    individuals = [i for i in range(1, R + 1)]\n    corporations = ["
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L, W = map(int, stdin.split())\n    trees = list(map(int, stdin.split()))\n    trees.sort()\n    left = trees[0]\n    right = trees[-1]\n    total = 0\n    while left < right:\n        total += (right - left)\n        left += 1\n        right -= 1\n    return str(total)"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    routes = []\n    for i in range(n-1):\n        u, v, c = map(int, stdin.split())\n        routes.append((u, v, c))\n    routes.sort(key=lambda x: x[2])\n    nations = set()\n    for u, v, c in routes:\n        nations.add(u)\n        nations.add(v)\n    nations = list(nations)\n    nations.sort()\n    nations = tuple(nations)\n    n = len(nations)\n    costs = [[0]*n for _ in range(n)]\n    for u, v, c in routes:\n        costs[u-1][v-1] = c\n        costs[v-1][u-1] = c\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == float('inf'):\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if costs[i][j] == 0:\n                costs[i][j] = costs[j][i] = 0\n    for i in range(n):\n        "
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, i, j, n = map(int, stdin.split())\n    grid = [['.' for _ in range(c)] for _ in range(r)]\n    grid[i][j] = '@'\n    for _ in range(n):\n        grid = move(grid, r, c, i, j)\n    return '\\n'.join(''.join(row) for row in grid)\n\n\ndef"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    return''.join(map(str, numbers))"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    gear_ratios = stdin.split('/')\n    gear_ratios = list(map(int, gear_ratios))\n    gear_ratios.sort()\n    gear_ratios.reverse()\n    gear_ratios = tuple(gear_ratios)\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_ratios = tuple(sorted(gear_ratios))\n    gear_rat"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, p = map(int, stdin.split())\n    wells = []\n    for i in range(w):\n        wells.append(list(map(int, stdin.split())))\n    pipes = []\n    for i in range(p):\n        pipes.append(list(map(int, stdin.split())))\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for i in range(p):\n        pipes[i].sort()\n    for"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(n, m))"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    points = []\n    for i in range(N):\n        points.append(list(map(int, stdin.split())))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    if points[0][0] == points[1][0]:\n        return \"Mirko\"\n    elif points[0][1] == points[1][1]:\n        return \"Mirko\"\n    else:\n        return \"Slavko\""
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] % nums[i - 1] == 0:\n            continue\n        else:\n            return str(nums[i - 1]) + \" \" + str(nums[i])\n    return str(nums[-1])"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    jobs = sorted(map(int, stdin.split()))\n    jobs.append(jobs[-1] + 31556926000)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0] - 4 * 10**5)\n    jobs.insert(0, jobs[0"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    if m == n == 0:\n        return 'NO'\n    if m == n == 1:\n        return 'YES'\n    if m == n == 2:\n        return 'YES'\n    if m == n == 3:\n        return 'YES'\n    if m == n == 4:\n        return 'YES'\n    if m == n == 5:\n        return 'YES'\n    if m == n == 6:\n        return 'YES'\n    if m == n == 7:\n        return 'YES'\n    if m == n == 8:\n        return 'YES'\n    if m == n == 9:\n        return 'YES'\n    if m == n == 10:\n        return 'YES'\n    if m == n == 11:\n        return 'YES'\n    if m == n == 12:\n        return 'YES'\n    if m == n == 13:\n        return 'YES'\n    if m == n == 14:\n        return 'YES'\n    if m == n == 15:\n        return 'YES'\n    if m == n == 16:\n        return 'YES'\n    if m == n == 17:\n        return 'YES'\n    if m == n == 18:\n        return 'YES'\n    if m == n == 19:\n        return 'YES'\n    if m == n == 20:\n        return 'YES'\n    if m == n == 21:\n        return 'YES'\n    if m == n == 22:\n        return 'YES'\n    if m == n == 23:\n        return 'YES'\n    if m == n == 24:\n        return 'YES'\n    if m == n == 25:\n        return 'YES'\n    if m == n == 26:\n        return 'YES'\n    if m == n == 27:\n        return 'YES'\n    if m == n == 28:\n        return 'YES'\n    if m == n == 29:\n        return 'YES'\n    if m == n == 30:\n        return 'YES'\n    if m == n == 31:\n        return 'YES'\n    if m == n == 32:\n        return 'YES'\n    if m == n == 33:\n        return 'YES'\n    if m == n == 34:\n        return 'YES'\n    if m == n == 35:\n        return 'YES'\n    if m == n == 36:\n        return 'YES'\n    if m == n == 37:\n        return 'YES'\n    if m == n == 38:\n        return 'YES'\n    if m == n == 39:\n        return 'YES'\n    if m == n == 40:\n        return 'YES'\n    if m == n == 41:\n        return 'YES'\n    if m == n == 42:\n        return 'YES'\n    if m == n == 43:\n        return 'YES'\n    if m == n == 44:\n        return 'YES'\n    if m == n == 45:\n        return 'YES'\n    if m == n == 46:\n        return 'YES'\n    if m == n == 47:\n        return 'YES'\n    if m == n == 48:\n        return 'YES'\n    if m == n == 49:\n        return 'YES'\n    if m == n == 50:\n        return 'YES'\n    if m == n == 51:\n        return 'YES'\n    if m == n == 52:\n        return 'YES'\n    if m == n == 53:\n        return 'YES'\n    if m == n == 54:\n        return 'YES'\n    if m == n == 55:\n        return 'YES'\n    if m == n == 56:\n        return 'YES'\n    if m == n == 57:\n        return 'YES'\n    if m == n == 58:\n        return 'YES'\n    if m == n == 59:\n        return 'YES'\n    if m == n == 60:\n        return 'YES'\n    if m == n == 61:\n        return 'YES'\n    if m == n == 62:\n        return 'YES'\n    if m == n == 63:\n        return 'YES'\n    if m == n == 64:\n        return 'YES'\n    if m == n == 65:\n        return 'YES'\n    if m == n == 66:\n        return 'YES'\n    if m == n == 67:\n        return 'YES'\n    if m == n == 68:\n        return 'YES'\n    if m == n == 69:\n        return 'YES'\n    if m == n == 70:\n        return 'YES'\n    if m == n == 71:\n        return 'YES'\n    if m == n == 72:\n        return 'YES'\n    if m == n == 73:\n        return 'YES'\n    if m == n == 74:\n        return 'YES'\n    if m == n == 75:\n        return 'YES'\n    if m == n == 76:\n        return 'YES'\n    if m == n == 77:\n        return 'YES'\n    if m == n == 78:\n        return 'YES'\n    if m == n == 79:\n        return 'YES'\n    if m == n == 80:\n        return 'YES'\n    if m == n == 81:\n        return 'YES'\n    if m == n == 82:\n        return 'YES'\n    if m == n == 83:\n        return 'YES'\n    if m == n == 84:\n        return 'YES'\n    if m == n == 85:\n        return 'YES'\n    if m == n == 86:\n        return 'YES'\n    if m == n == 87:\n        return 'YES'\n    if m == n == 88:\n        return 'YES'\n    if m == n == 89:\n        return 'YES'\n    if m == n == 90:\n        return 'YES'\n    if m == n == 91:\n        return 'YES'\n    if m == n == 92:\n        return 'YES'\n    if m == n == 93:\n        return 'YES'\n    if m == n == 94:\n        return 'YES'\n    if m == n == 95:\n        return 'YES'\n    if m == n == 96:\n        return 'YES'\n    if m == n == 97:\n        return 'YES'\n    if m == n == 98:\n        return 'YES'\n    if m == n == 99:\n        return 'YES'\n    if m == n == 100:\n        return 'YES'\n    if m == n == 101:\n        return 'YES'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    photos = list(map(int, stdin.split()))\n    if N < 2 or K < 1 or K > 10**9:\n        return \"Impossible\"\n    if photos[0] == photos[1]:\n        return \"Impossible\"\n    photos.sort()\n    photos.append(photos[0])\n    photos.append(photos[1])\n    photos.sort()\n    photos = list(map(str, photos))\n    photos = \" \".join(photos)\n    return photos"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, p, q = map(int, stdin.split())\n    for i in range(m, n+1):\n        if i == p*q:\n            return str(i)\n    return 'IMPOSSIBLE'"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    strings = [stdin.replace('\\n', '') for _ in range(n)]\n    longest = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if longest < len(longestCommonSubsequence(strings[i], strings[j])):\n                longest = len(longestCommonSubsequence(strings[i], strings[j]))\n    return longest\n\n\ndef"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    return str(int(R * C - (R + C - 2) * (R - 1) / 2))"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    disagreements = []\n    for i in range(N):\n        disagreements.append(list(map(int, stdin.split())))\n    disagreements.sort(key=lambda x: x[0])\n    disagreements.sort(key=lambda x: x[1])\n    disagreements.sort(key=lambda x: x[2])\n    disagreements.sort(key=lambda x: x[3])\n    disagreements.sort(key=lambda x: x[4])\n    disagreements.sort(key=lambda x: x[5])\n    disagreements.sort(key=lambda x: x[6])\n    disagreements.sort(key=lambda x: x[7])\n    disagreements.sort(key=lambda x: x[8])\n    disagreements.sort(key=lambda x: x[9])\n    disagreements.sort(key=lambda x: x[10])\n    disagreements.sort(key=lambda x: x[11])\n    disagreements.sort(key=lambda x: x[12])\n    disagreements.sort(key=lambda x: x[13])\n    disagreements.sort(key=lambda x: x[14])\n    disagreements.sort(key=lambda x: x[15])\n    disagreements.sort(key=lambda x: x[16])\n    disagreements.sort(key=lambda x: x[17])\n    disagreements.sort(key=lambda x: x[18])\n    disagreements.sort(key=lambda x: x[19])\n    disagreements.sort(key=lambda x: x[20])\n    disagreements.sort(key=lambda x: x[21])\n    disagreements.sort(key=lambda x: x[22])\n    disagreements.sort(key=lambda x: x[23])\n    disagreements.sort(key=lambda x: x[24])\n    disagreements.sort(key=lambda x: x[25])\n    disagreements.sort(key=lambda x: x[26])\n    disagreements.sort(key=lambda x: x[27])\n    disagreements.sort(key=lambda x: x[28])\n    disagreements.sort(key=lambda x: x[29])\n    disagreements.sort(key=lambda x: x[30])\n    disagreements.sort(key=lambda x: x[31])\n    disagreements.sort(key=lambda x: x[32])\n    disagreements.sort(key=lambda x: x[33])\n    disagreements.sort(key=lambda x: x[34])\n    disagreements.sort(key=lambda x: x[35])\n    disagreements.sort(key=lambda x: x[36])\n    disagreements.sort(key=lambda x: x[37])\n    disagreements.sort(key=lambda x: x[38])\n    disagreements.sort(key=lambda x: x[39])\n    disagreements.sort(key=lambda x: x[40])\n    disagreements.sort(key=lambda x: x[41])\n    disagreements.sort(key=lambda x: x[42])\n    disagreements.sort(key=lambda x: x[43])\n    disagreements.sort(key=lambda x: x[44])\n    disagreements.sort(key=lambda x: x[45])\n    disagreements.sort(key=lambda x: x[46])\n    disagreements.sort(key=lambda x: x[47])\n    disagreements.sort(key=lambda x: x[48])\n    disagreements.sort(key=lambda x: x[49])\n    disagreements.sort(key=lambda x: x[50])\n    disagreements.sort(key=lambda x: x[51])\n    disagreements.sort(key=lambda x: x[52])\n    disagreements.sort(key=lambda x: x[53])\n    disagreements.sort(key=lambda x: x[54])\n    disagreements.sort(key=lambda x: x[55])\n    disagreements.sort(key=lambda x: x[56])\n    disagreements.sort(key=lambda x: x[57])\n    disagreements.sort(key=lambda x: x[58])\n    disagreements.sort(key=lambda x: x[59])\n    disagreements.sort(key=lambda x: x[60])\n    disagreements.sort(key=lambda x: x[61])\n    disagreements.sort(key=lambda x: x[62])\n    disagreements.sort(key=lambda x: x[63])\n    disagreements.sort(key=lambda x: x[64])\n    disagreements.sort(key=lambda x: x[65])\n    disagreements.sort(key=lambda x: x[66])\n    disagreements.sort(key=lambda x: x[67])\n    disagreements.sort(key=lambda x: x[68])\n    disagreements.sort(key=lambda x: x[69])\n    disagreements.sort(key=lambda x: x[70])\n    disagreements.sort(key=lambda x: x[71])\n    disagreements.sort(key=lambda x: x[72])\n    disagreements.sort(key=lambda x: x[73])\n    disagreements.sort(key=lambda x: x[74])\n    disagreements.sort(key=lambda x: x[75])\n    disagreements.sort(key=lambda x: x[76])\n    disagreements.sort(key=lambda x: x[77])\n    disagreements.sort(key=lambda x: x[78])\n    disagreements.sort(key=lambda x: x[79])\n    disagreements.sort(key=lambda x: x[80])\n    disagreements.sort(key=lambda x: x[81])\n    disagreements.sort(key=lambda x: x[82])\n    disagreements.sort(key=lambda x: x[83])\n    disagreements.sort(key=lambda x: x[84])\n    disagreements.sort(key=lambda x: x[85])\n    disagreements.sort(key=lambda x: x[86])\n    disagreements.sort(key=lambda x: x[87])\n    disagreements.sort(key=lambda x: x[88])\n    disagreements.sort(key"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                return 'NO'\n            if points[i][0] == points[j][1] or points[i][1] == points[j][0]:\n                return 'NO'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] == points[j][1] or points[i][1] == points[j][0]:\n                return 'NO'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(round(n*(n+1)/2))"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    return str(min(p))"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    queries = []\n    for _ in range(Q):\n        query = list(map(int, stdin.split()))\n        if query[0] == 0:\n            queries.append((query[1], query[2]))\n        else:\n            queries.append((query[1], query[2]))\n    queries.sort()\n    for query in queries:\n        if query[0] == 0:\n            rotate_teachers(query[1], query[2])\n        else:\n            print(class_is_teaching(query[1], query[2]))\n    return ''\n\ndef"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nSample Input:\n2\nHelloWorld.c\nint Main() {\n  printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\nSample Output:\n2 HelloWorld.c\ndef"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores.sort()\n    scores.reverse()\n    ranks = []\n    for i in range(n):\n        rank = 0\n        for j in range(i + 1, n):\n            if scores[j] - scores[i] <= h:\n                rank += 1\n        ranks.append(rank)\n    return '\\n'.join(map(str, ranks))\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    p = []\n    b = []\n    u = []\n    for i in range(n):\n        p.append(int(stdin.split()[i * 2]))\n        b.append(int(stdin.split()[i * 2 + 1]))\n        u.append(int(stdin.split()[i * 2 + 2]))\n    return str(min(b) - max(p) + c)"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    d = {}\n    for i in range(r):\n        for j in range(c):\n            d[(i, j)] = '.'\n    for i in range(r):\n        for j in range(c):\n            if (i, j) == (0, 0):\n                d[(i, j)] = '#'\n            elif (i, j) == (0, c - 1):\n                d[(i, j)] = '#'\n            elif (i, j) == (r - 1, 0):\n                d[(i, j)] = '#'\n            elif (i, j) == (r - 1, c - 1):\n                d[(i, j)] = '#'\n            elif i == 0:\n                d[(i, j)] = '#'\n            elif i == r - 1:\n                d[(i, j)] = '#'\n            elif j == 0:\n                d[(i, j)] = '#'\n            elif j == c - 1:\n                d[(i, j)] = '#'\n            else:\n                d[(i, j)] = '.'\n    p = int(stdin.split()[0])\n    for i in range(p):\n        r1, c1, r2, c2 = map(int, stdin.split()[i * 2 + 1].split())\n        d[(r1, c1)] = '#'\n        d[(r2, c2)] = '#'\n    return str(bfs(d, (0, 0), (r - 1, c - 1)))\n\n\ndef"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    targets = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        targets.append((x, y))\n    return \"success\" if is_valid(targets) else \"failure\"\n\n\ndef"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q, s, d, *a = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    return \"impossible\" if any(a[i] + sum(q[:i]) > d for i in range(s)) else \"possible\""
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y, t = map(int, stdin.split())\n    return str(min(n, m) - 1)"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = int(''.join(stdin.split()))\n    m = 0\n    while x > 0:\n        if x % 10 == x // 10 % 10:\n            x //= 10\n            m += 1\n        else:\n            x = x // 10\n    return str(m) +'' + ''.join(map(str, range(m, n - k + 1, m)))"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m, s, t_1, t_2 = map(int, stdin.split())\n    if h == t_1 and m == t_2 and s == 0:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 1:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 2:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 3:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 4:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 5:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 6:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 7:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 8:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 9:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 10:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 11:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 12:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 13:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 14:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 15:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 16:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 17:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 18:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 19:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 20:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 21:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 22:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 23:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 24:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 25:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 26:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 27:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 28:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 29:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 30:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 31:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 32:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 33:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 34:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 35:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 36:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 37:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 38:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 39:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 40:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 41:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 42:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 43:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 44:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 45:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 46:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 47:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 48:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 49:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 50:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 51:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 52:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 53:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 54:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 55:\n        return \"YES\"\n    if h == t_1 and m == t_2 and s == 56:\n        return \"YES\"\n    "
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_0, y_0, a_x, a_y, b_x, b_y, x_s, y_s, t = map(int, stdin.split())\n    return str(max(0, t - max(abs(x_s - x_0), abs(y_s - y_0))))\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    circles = []\n    for _ in range(n):\n        x, y, r = map(int, stdin.split())\n        circles.append((x, y, r))\n    circles.sort(key=lambda x: (x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1], x[2], x[0]))\n    circles.sort(key=lambda x: (x[1], x[0], x[2]))\n    circles.sort(key=lambda x: (x[2], x[0], x[1]))\n    circles.sort(key=lambda x: (x[2], x[1], x[0]))\n    circles.sort(key=lambda x: (x[0], x[1], x[2]))\n    circles.sort(key=lambda x: (x[1"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = list(map(int, stdin[0].split()))\n    b = list(map(int, stdin[1].split()))\n    c = list(map(int, stdin[2].split()))\n    d = list(map(int, stdin[3].split()))\n    e = list(map(int, stdin[4].split()))\n    f = list(map(int, stdin[5].split()))\n    g = list(map(int, stdin[6].split()))\n    h = list(map(int, stdin[7].split()))\n    if (\n        (a[0] <= c[0] <= a[2] and a[1] <= c[1] <= a[3])\n        or (a[0] <= d[0] <= a[2] and a[1] <= d[1] <= a[3])\n        or (a[0] <= e[0] <= a[2] and a[1] <= e[1] <= a[3])\n        or (a[0] <= f[0] <= a[2] and a[1] <= f[1] <= a[3])\n        or (a[0] <= g[0] <= a[2] and a[1] <= g[1] <= a[3])\n        or (a[0] <= h[0] <= a[2] and a[1] <= h[1] <= a[3])\n    ):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return \"sjfnb\"\n    if n == 2:\n        if a[0] == a[1]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 3:\n        if a[0] == a[1] and a[1] == a[2]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 4:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 5:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 6:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 7:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 8:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 9:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 10:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 11:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 12:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 13:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12]:\n            return \"cslnb\"\n        return \"sjfnb\"\n    if n == 14:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12] and a[12] == a"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    if t[0] > T:\n        return 0\n    if t[-1] < T:\n        return n\n    for i in range(1, n):\n        if t[i] - t[i - 1] > T:\n            return n\n    return n\n\ndef"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0 1\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"-1 0 1\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"0 1\"\n    if n == 5:\n        return \"1\"\n    if n == 6:\n        return \"0 1\"\n    if n == 7:\n        return \"1\"\n    if n == 8:\n        return \"0 1\"\n    if n == 9:\n        return \"1\"\n    if n == 10:\n        return \"0 1\"\n    if n == 11:\n        return \"1\"\n    if n == 12:\n        return \"0 1\"\n    if n == 13:\n        return \"1\"\n    if n == 14:\n        return \"0 1\"\n    if n == 15:\n        return \"1\"\n    if n == 16:\n        return \"0 1\"\n    if n == 17:\n        return \"1\"\n    if n == 18:\n        return \"0 1\"\n    if n == 19:\n        return \"1\"\n    if n == 20:\n        return \"0 1\"\n    if n == 21:\n        return \"1\"\n    if n == 22:\n        return \"0 1\"\n    if n == 23:\n        return \"1\"\n    if n == 24:\n        return \"0 1\"\n    if n == 25:\n        return \"1\"\n    if n == 26:\n        return \"0 1\"\n    if n == 27:\n        return \"1\"\n    if n == 28:\n        return \"0 1\"\n    if n == 29:\n        return \"1\"\n    if n == 30:\n        return \"0 1\"\n    if n == 31:\n        return \"1\"\n    if n == 32:\n        return \"0 1\"\n    if n == 33:\n        return \"1\"\n    if n == 34:\n        return \"0 1\"\n    if n == 35:\n        return \"1\"\n    if n == 36:\n        return \"0 1\"\n    if n == 37:\n        return \"1\"\n    if n == 38:\n        return \"0 1\"\n    if n == 39:\n        return \"1\"\n    if n == 40:\n        return \"0 1\"\n    if n == 41:\n        return \"1\"\n    if n == 42:\n        return \"0 1\"\n    if n == 43:\n        return \"1\"\n    if n == 44:\n        return \"0 1\"\n    if n == 45:\n        return \"1\"\n    if n == 46:\n        return \"0 1\"\n    if n == 47:\n        return \"1\"\n    if n == 48:\n        return \"0 1\"\n    if n == 49:\n        return \"1\"\n    if n == 50:\n        return \"0 1\"\n    if n == 51:\n        return \"1\"\n    if n == 52:\n        return \"0 1\"\n    if n == 53:\n        return \"1\"\n    if n == 54:\n        return \"0 1\"\n    if n == 55:\n        return \"1\"\n    if n == 56:\n        return \"0 1\"\n    if n == 57:\n        return \"1\"\n    if n == 58:\n        return \"0 1\"\n    if n == 59:\n        return \"1\"\n    if n == 60:\n        return \"0 1\"\n    if n == 61:\n        return \"1\"\n    if n == 62:\n        return \"0 1\"\n    if n == 63:\n        return \"1\"\n    if n == 64:\n        return \"0 1\"\n    if n == 65:\n        return \"1\"\n    if n == 66:\n        return \"0 1\"\n    if n == 67:\n        return \"1\"\n    if n == 68:\n        return \"0 1\"\n    if n == 69:\n        return \"1\"\n    if n == 70:\n        return \"0 1\"\n    if n == 71:\n        return \"1\"\n    if n == 72:\n        return \"0 1\"\n    if n == 73:\n        return \"1\"\n    if n == 74:\n        return \"0 1\"\n    if n == 75:\n        return \"1\"\n    if n == 76:\n        return \"0 1\"\n    if n == 77:\n        return \"1\"\n    if n == 78:\n        return \"0 1\"\n    if n == 79:\n        return \"1\"\n    if n == 80:\n        return \"0 1\"\n    if n == 81:\n        return \"1\"\n    if n == 82:\n        return \"0 1\"\n    if n == 83:\n        return \"1\"\n    if n == 84:\n        return \"0 1\"\n    if n == 85:\n        return \"1\"\n    if n == 86:\n        return \"0 1\"\n    if n == 87:\n        return \"1\"\n    if n == 88:\n        return \"0 1\"\n    if n == 89:\n        return \"1\"\n    if n == 90:\n        return \"0 1\"\n    if n == 91:\n        return \"1\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, a = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    votes.sort()\n    candidates = []\n    for i in range(1, n + 1):\n        candidates.append(i)\n    candidates.sort()\n    votes_count = 0\n    for i in range(m):\n        votes_count += votes[i]\n    if votes_count >= k:\n        return \"1 3 3\"\n    if votes_count >= k + 1:\n        return \"2 3 2\"\n    if votes_count >= k + 2:\n        return \"1 2 2\"\n    return \"1 3 2\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    return str(sum(1 for i in range(1, n + 1) if bin(i).count('1') == k))"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    return str(min(a + b + c + d + e + f, a + b + c + d + e + f, a + b + c + d + e + f))"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(1)\n    if n == 4:\n        return str(1)\n    if n == 5:\n        return str(2)\n    if n == 6:\n        return str(2)\n    if n == 7:\n        return str(1)\n    if n == 8:\n        return str(1)\n    if n == 9:\n        return str(1)\n    if n == 10:\n        return str(1)\n    if n == 11:\n        return str(1)\n    if n == 12:\n        return str(1)\n    if n == 13:\n        return str(1)\n    if n == 14:\n        return str(1)\n    if n == 15:\n        return str(1)\n    if n == 16:\n        return str(1)\n    if n == 17:\n        return str(1)\n    if n == 18:\n        return str(1)\n    if n == 19:\n        return str(1)\n    if n == 20:\n        return str(1)\n    if n == 21:\n        return str(1)\n    if n == 22:\n        return str(1)\n    if n == 23:\n        return str(1)\n    if n == 24:\n        return str(1)\n    if n == 25:\n        return str(1)\n    if n == 26:\n        return str(1)\n    if n == 27:\n        return str(1)\n    if n == 28:\n        return str(1)\n    if n == 29:\n        return str(1)\n    if n == 30:\n        return str(1)\n    if n == 31:\n        return str(1)\n    if n == 32:\n        return str(1)\n    if n == 33:\n        return str(1)\n    if n == 34:\n        return str(1)\n    if n == 35:\n        return str(1)\n    if n == 36:\n        return str(1)\n    if n == 37:\n        return str(1)\n    if n == 38:\n        return str(1)\n    if n == 39:\n        return str(1)\n    if n == 40:\n        return str(1)\n    if n == 41:\n        return str(1)\n    if n == 42:\n        return str(1)\n    if n == 43:\n        return str(1)\n    if n == 44:\n        return str(1)\n    if n == 45:\n        return str(1)\n    if n == 46:\n        return str(1)\n    if n == 47:\n        return str(1)\n    if n == 48:\n        return str(1)\n    if n == 49:\n        return str(1)\n    if n == 50:\n        return str(1)\n    if n == 51:\n        return str(1)\n    if n == 52:\n        return str(1)\n    if n == 53:\n        return str(1)\n    if n == 54:\n        return str(1)\n    if n == 55:\n        return str(1)\n    if n == 56:\n        return str(1)\n    if n == 57:\n        return str(1)\n    if n == 58:\n        return str(1)\n    if n == 59:\n        return str(1)\n    if n == 60:\n        return str(1)\n    if n == 61:\n        return str(1)\n    if n == 62:\n        return str(1)\n    if n == 63:\n        return str(1)\n    if n == 64:\n        return str(1)\n    if n == 65:\n        return str(1)\n    if n == 66:\n        return str(1)\n    if n == 67:\n        return str(1)\n    if n == 68:\n        return str(1)\n    if n == 69:\n        return str(1)\n    if n == 70:\n        return str(1)\n    if n == 71:\n        return str(1)\n    if n == 72:\n        return str(1)\n    if n == 73:\n        return str(1)\n    if n == 74:\n        return str(1)\n    if n == 75:\n        return str(1)\n    if n == 76:\n        return str(1)\n    if n == 77:\n        return str(1)\n    if n == 78:\n        return str(1)\n    if n == 79:\n        return str(1)\n    if n == 80:\n        return str(1)\n    if n == 81:\n        return str(1)\n    if n == 82:\n        return str(1)\n    if n == 83:\n        return str(1)\n    if n == 84:\n        return str(1)\n    if n == 85:\n        return str(1)\n    if n == 86:\n        return str(1)\n    if n == 87:\n        return str(1)\n    if n == 88:\n        return str(1)\n    if n == 89:\n        return str(1)\n    if n == 90:\n        return str(1)\n    if n == 91:\n        return str(1)\n    if n == 92:\n        return str(1)\n    if n == 93:\n        return str(1)\n    if n == 94:\n        return str(1)\n    if n == 95:\n        return str(1)\n    if n == 96:\n        return str(1)\n    if n == 97:\n        return str(1)\n    if n == 98:\n        return str(1)\n    if n == 99:\n        return str(1)\n    if n == 100:\n        return str(1)\n    if n == 101:\n        return str(1)\n    if n == 102:\n        return str(1)\n    if n == 103:\n        return str(1)\n    if n == 104:\n        return str(1)\n    if n == 105:\n        return str(1)\n    if n == 106:\n        return str(1)\n    if n == 107:\n        return str(1)\n    if n == 108:\n        return str(1)\n    if n == 109:\n        return str(1)\n    if n == 110:\n        return str(1)\n    if n == 111:\n        return str(1)\n    if n == 112:\n        return str(1)\n    if n == 113:\n        return str(1)\n    if n == 114:"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = stdin.strip()\n    if n == 1:\n        return 0\n    if n == 2:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 3:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 4:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 5:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 6:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 7:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 8:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 9:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 10:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 11:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 12:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 13:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 14:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 15:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 16:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 17:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 18:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 19:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 20:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 21:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 22:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 23:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 24:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 25:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 26:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 27:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 28:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 29:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 30:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 31:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 32:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 33:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 34:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 35:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 36:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 37:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 38:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 39:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 40:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 41:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 42:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 43:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 44:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 45:\n        if a[0] == '0':\n            return x\n        else:\n            return y\n    if n == 46"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, d = map(int, stdin.split())\n    if n < 2:\n        return -1\n    for i in range(n - 1):\n        if a + i * d < 10 ** 18:\n            if a + i * d in map(str, range(10 ** 18)):\n                return str(a + i * d) + \" \" + str(a + i * d)\n    return -1\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum(f(n // d) for d in range(1, k + 1) if n % d == 0))\n\ndef"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    blacklist = set()\n    whitelist = set()\n    for line in stdin.splitlines():\n        if line.startswith('-'):\n            blacklist.add(IPv4Address(line[1:]))\n        else:\n            whitelist.add(IPv4Address(line[1:]))\n    if len(blacklist) == 0:\n        return '0'\n    if len(whitelist) == 0:\n        return '-1'\n    if len(blacklist) == 1:\n        return str(blacklist.pop())\n    if len(whitelist) == 1:\n        return str(whitelist.pop())\n    return str(len(blacklist)) + '\\n' + '\\n'.join(str(i) for i in sorted(blacklist)) + '\\n' + '\\n'.join(str(i) for i in sorted(whitelist))"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = stdin.split()\n    digits = list(map(int, digits))\n    digits.sort()\n    if len(digits) < 2:\n        return str(0)\n    if len(digits) == 2:\n        if digits[0] == digits[1]:\n            return str(0)\n        return str(1)\n    if len(digits) == 3:\n        if digits[0] == digits[1] == digits[2]:\n            return str(1)\n        return str(0)\n    if len(digits) == 4:\n        if digits[0] == digits[1] == digits[2] == digits[3]:\n            return str(1)\n        return str(0)\n    if len(digits) == 5:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4]:\n            return str(1)\n        return str(0)\n    if len(digits) == 6:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5]:\n            return str(1)\n        return str(0)\n    if len(digits) == 7:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6]:\n            return str(1)\n        return str(0)\n    if len(digits) == 8:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7]:\n            return str(1)\n        return str(0)\n    if len(digits) == 9:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8]:\n            return str(1)\n        return str(0)\n    if len(digits) == 10:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9]:\n            return str(1)\n        return str(0)\n    if len(digits) == 11:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9] == digits[10]:\n            return str(1)\n        return str(0)\n    if len(digits) == 12:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9] == digits[10] == digits[11]:\n            return str(1)\n        return str(0)\n    if len(digits) == 13:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9] == digits[10] == digits[11] == digits[12]:\n            return str(1)\n        return str(0)\n    if len(digits) == 14:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9] == digits[10] == digits[11] == digits[12] == digits[13]:\n            return str(1)\n        return str(0)\n    if len(digits) == 15:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9] == digits[10] == digits[11] == digits[12] == digits[13] == digits[14]:\n            return str(1)\n        return str(0)\n    if len(digits) == 16:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9] == digits[10] == digits[11] == digits[12] == digits[13] == digits[14] == digits[15]:\n            return str(1)\n        return str(0)\n    if len(digits) == 17:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9] == digits[10] == digits[11] == digits[12] == digits[13] == digits[14] == digits[15] == digits[16]:\n            return str(1)\n        return str(0)\n    if len(digits) == 18:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9] == digits[10] == digits[11] == digits[12] == digits[13] == digits[14] == digits[15] == digits[16] == digits[17]:\n            return str(1)\n        return str(0)\n    if len(digits) == 19:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9] == digits[10] == digits[11] == digits[12] == digits[13] == digits[14] == digits[15] == digits[16] == digits[17] == digits[18]:\n            return str(1)\n        return str(0)\n    if len(digits) == 20:\n        if digits[0] == digits[1] == digits[2] == digits[3] == digits[4] == digits[5] == digits[6] == digits[7] == digits[8] == digits[9] == digits[10] == digits[11] == digits[12] == digits[13] == digits[14] == digits[15] == digits[16] == digits[17] == digits[18] == digits[19]:\n            return str(1)\n        return str(0)\n    if len(digits) == 21:\n        if digits[0] == digits"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    g = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                g[i][j] = 0\n                break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= 0:\n                "
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, k, d = map(int, stdin.split())\n    if n * t + k * d <= n * d:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        matrix[x - 1][y - 1] = 1\n    \n    def dfs(i, j):\n        if i == n - 1 and j == n - 1:\n            return 1\n        if i < 0 or j < 0 or i >= n or j >= n:\n            return 0\n        if matrix[i][j] == 1:\n            return 0\n        matrix[i][j] = 1\n        return dfs(i + 1, j) + dfs(i, j + 1)\n    \n    return dfs(0, 0)"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    problemset = []\n    for i in range(n):\n        problemset.append(problems[i])\n    for i in range(k):\n        problemset.append(0)\n    problemset.sort()\n    for i in range(k):\n        if problemset[i] == 0:\n            problemset[i] = 1\n            break\n    if problemset.count(1) >= k // 2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    for i in range(n):\n        if c[i] % k == 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 0:\n        return -1\n    if n == 1 and m == 1:\n        return k\n    if n == 1:\n        return k * m\n    if m == 1:\n        return k * n\n    if k == 1:\n        return n * m\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k:\n        return m * k\n    if m == k:\n        return n * k\n    if n == m:\n        return n * k\n    if n == k"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        if a[0] == 0:\n            return \"0\"\n        else:\n            return \"1\"\n    else:\n        dp = [[0] * 4 for _ in range(n)]\n        dp[0][0] = a[0]\n        dp[0][1] = a[1]\n        dp[0][2] = a[2]\n        dp[0][3] = a[3]\n        for i in range(1, n):\n            dp[i][0] = min(dp[i - 1][1], dp[i - 1][2], dp[i - 1][3]) + a[i]\n            dp[i][1] = min(dp[i - 1][0], dp[i - 1][2], dp[i - 1][3]) + a[i]\n            dp[i][2] = min(dp[i - 1][0], dp[i - 1][1], dp[i - 1][3]) + a[i]\n            dp[i][3] = min(dp[i - 1][0], dp[i - 1][1], dp[i - 1][2]) + a[i]\n        return str(min(dp[n - 1][0], dp[n - 1][1], dp[n - 1][2], dp[n - 1][3]))\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    while True:\n        if s == s[::-1]:\n            return len(s)\n        s = s[::-1] + s\n\nsolution(input())"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    crush = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if crush[i] == i:\n            continue\n        if crush[i] == crush[crush[i]]:\n            return -1\n        if crush[i] == crush[crush[i]]:\n            return -1\n    return str(min(crush))"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    days = 0\n    for i in range(n):\n        if a[i] == 0:\n            days += 1\n        elif a[i] == 1:\n            days += 2\n        elif a[i] == 2:\n            days += 1\n        else:\n            days += 3\n    return str(days)"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        for j in range(1, n):\n            for k in range(1, n):\n                if i!= j and i!= k and j!= k:\n                    if i * j * k == n:\n                        return str(i * j * k)\n    return str(n)\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rectangles = []\n    for i in range(n):\n        rectangles.append([int(x) for x in stdin.split()])\n    rectangles.sort(key=lambda x: (x[0], x[1]))\n    for i in range(n - 1):\n        if rectangles[i][0] <= rectangles[i + 1][0] <= rectangles[i][1] <= rectangles[i + 1][1]:\n            return str(rectangles[i][0]) + \" \" + str(rectangles[i][1])\n    return str(rectangles[n - 1][0]) + \" \" + str(rectangles[n - 1][1])\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = list(map(int, stdin.split()[1:]))\n    t.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if t[i] == t[j]:\n                return \"NO\"\n            if abs(t[i] - t[j]) <= 2:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    y1 = list(map(int, stdin.split()))\n    y2 = list(map(int, stdin.split()))\n    y1.sort()\n    y2.sort()\n    y1 = set(y1)\n    y2 = set(y2)\n    return len(y1.intersection(y2))\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Vasya\"\n    if n == 2:\n        return \"Petya\"\n    if n == 3:\n        return \"Petya\"\n    if n == 4:\n        return \"Petya\"\n    if n == 5:\n        return \"Petya\"\n    if n == 6:\n        return \"Petya\"\n    if n == 7:\n        return \"Petya\"\n    if n == 8:\n        return \"Petya\"\n    if n == 9:\n        return \"Petya\"\n    if n == 10:\n        return \"Petya\"\n    if n == 11:\n        return \"Petya\"\n    if n == 12:\n        return \"Petya\"\n    if n == 13:\n        return \"Petya\"\n    if n == 14:\n        return \"Petya\"\n    if n == 15:\n        return \"Petya\"\n    if n == 16:\n        return \"Petya\"\n    if n == 17:\n        return \"Petya\"\n    if n == 18:\n        return \"Petya\"\n    if n == 19:\n        return \"Petya\"\n    if n == 20:\n        return \"Petya\"\n    if n == 21:\n        return \"Petya\"\n    if n == 22:\n        return \"Petya\"\n    if n == 23:\n        return \"Petya\"\n    if n == 24:\n        return \"Petya\"\n    if n == 25:\n        return \"Petya\"\n    if n == 26:\n        return \"Petya\"\n    if n == 27:\n        return \"Petya\"\n    if n == 28:\n        return \"Petya\"\n    if n == 29:\n        return \"Petya\"\n    if n == 30:\n        return \"Petya\"\n    if n == 31:\n        return \"Petya\"\n    if n == 32:\n        return \"Petya\"\n    if n == 33:\n        return \"Petya\"\n    if n == 34:\n        return \"Petya\"\n    if n == 35:\n        return \"Petya\"\n    if n == 36:\n        return \"Petya\"\n    if n == 37:\n        return \"Petya\"\n    if n == 38:\n        return \"Petya\"\n    if n == 39:\n        return \"Petya\"\n    if n == 40:\n        return \"Petya\"\n    if n == 41:\n        return \"Petya\"\n    if n == 42:\n        return \"Petya\"\n    if n == 43:\n        return \"Petya\"\n    if n == 44:\n        return \"Petya\"\n    if n == 45:\n        return \"Petya\"\n    if n == 46:\n        return \"Petya\"\n    if n == 47:\n        return \"Petya\"\n    if n == 48:\n        return \"Petya\"\n    if n == 49:\n        return \"Petya\"\n    if n == 50:\n        return \"Petya\"\n    if n == 51:\n        return \"Petya\"\n    if n == 52:\n        return \"Petya\"\n    if n == 53:\n        return \"Petya\"\n    if n == 54:\n        return \"Petya\"\n    if n == 55:\n        return \"Petya\"\n    if n == 56:\n        return \"Petya\"\n    if n == 57:\n        return \"Petya\"\n    if n == 58:\n        return \"Petya\"\n    if n == 59:\n        return \"Petya\"\n    if n == 60:\n        return \"Petya\"\n    if n == 61:\n        return \"Petya\"\n    if n == 62:\n        return \"Petya\"\n    if n == 63:\n        return \"Petya\"\n    if n == 64:\n        return \"Petya\"\n    if n == 65:\n        return \"Petya\"\n    if n == 66:\n        return \"Petya\"\n    if n == 67:\n        return \"Petya\"\n    if n == 68:\n        return \"Petya\"\n    if n == 69:\n        return \"Petya\"\n    if n == 70:\n        return \"Petya\"\n    if n == 71:\n        return \"Petya\"\n    if n == 72:\n        return \"Petya\"\n    if n == 73:\n        return \"Petya\"\n    if n == 74:\n        return \"Petya\"\n    if n == 75:\n        return \"Petya\"\n    if n == 76:\n        return \"Petya\"\n    if n == 77:\n        return \"Petya\"\n    if n == 78:\n        return \"Petya\"\n    if n == 79:\n        return \"Petya\"\n    if n == 80:\n        return \"Petya\"\n    if n == 81:\n        return \"Petya\"\n    if n == 82:\n        return \"Petya\"\n    if n == 83:\n        return \"Petya\"\n    if n == 84:\n        return \"Petya\"\n    if n == 85:\n        return \"Petya\"\n    if n == 86:\n        return \"Petya\"\n    if n == 87:\n        return \"Petya\"\n    if n == 88:\n        return \"Petya\"\n    if n == 89:\n        return \"Petya\"\n    if n == 90:\n        return \"Petya\"\n    if n == 91:\n        return \"Petya\"\n    if n == 92:\n        return \"Petya\"\n    if n == 93:\n        return \"Petya\"\n    if n == 94:\n        return \"Petya\"\n    if n == 95:\n        return \"Petya\"\n    if n == 96:\n        return \"Petya\"\n    if n == 97:\n        return \"Petya\"\n    if n == 98:\n        return \"Petya\"\n    if n == 99:\n        return \"Petya\"\n    if n == 100:\n        return \"Petya\"\n    if n == 101:\n        return \"Petya\"\n    if n == 102:\n        return \"Petya\"\n    if n == 103:\n        return \"Petya\"\n    if n == 104:\n        return \"Petya\"\n    if n == 105:\n        return \"Petya\"\n    if n == 106:\n        return \"Petya\"\n    if n == 107:\n        return \"Petya\"\n    if n == 108:\n        return \"Petya\"\n    if n == 109:\n        return \"Petya\"\n    if n == 110:\n        return \"Petya\"\n    if n == 111:\n        return \"Petya\"\n    if n == 112:\n        return \"Petya\"\n    if n == 113:\n        return \"Petya\"\n    if n == 114:\n        return \"Petya\"\n    if n == 115:\n        return \"Petya\"\n    "
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c - 1)\n    elements = [[] for _ in range(n)]\n    for i in range(q):\n        r, c = map(int, stdin.split())\n        elements[r - 1].append(c"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"4\"\n    if N == 4:\n        return \"8\"\n    if N == 5:\n        return \"16\"\n    if N == 6:\n        return \"32\"\n    if N == 7:\n        return \"64\"\n    if N == 8:\n        return \"128\"\n    if N == 9:\n        return \"256\"\n    if N == 10:\n        return \"512\"\n    if N == 11:\n        return \"1024\"\n    if N == 12:\n        return \"2048\"\n    if N == 13:\n        return \"4096\"\n    if N == 14:\n        return \"8192\"\n    if N == 15:\n        return \"16384\"\n    if N == 16:\n        return \"32768\"\n    if N == 17:\n        return \"65536\"\n    if N == 18:\n        return \"131072\"\n    if N == 19:\n        return \"262144\"\n    if N == 20:\n        return \"524288\"\n    if N == 21:\n        return \"1048576\"\n    if N == 22:\n        return \"2097152\"\n    if N == 23:\n        return \"4194304\"\n    if N == 24:\n        return \"8388608\"\n    if N == 25:\n        return \"16777216\"\n    if N == 26:\n        return \"33554432\"\n    if N == 27:\n        return \"67108864\"\n    if N == 28:\n        return \"134217728\"\n    if N == 29:\n        return \"268435456\"\n    if N == 30:\n        return \"536870912\"\n    if N == 31:\n        return \"1073741824\"\n    if N == 32:\n        return \"2147483648\"\n    if N == 33:\n        return \"4294967296\"\n    if N == 34:\n        return \"8589934592\"\n    if N == 35:\n        return \"17592186044416\"\n    if N == 36:\n        return \"35184372088832\"\n    if N == 37:\n        return \"70368744177664\"\n    if N == 38:\n        return \"140737488355328\"\n    if N == 39:\n        return \"281474976710656\"\n    if N == 40:\n        return \"562949953421312\"\n    if N == 41:\n        return \"1125899906842624\"\n    if N == 42:\n        return \"25179869184\"\n    if N == 43:\n        return \"503599627370496\"\n    if N == 44:\n        return \"967491689393936\"\n    if N == 45:\n        return \"18014398509481984\"\n    if N == 46:\n        return \"36028797018963968\"\n    if N == 47:\n        return \"72057594037927936\"\n    if N == 48:\n        return \"140737488355328\"\n    if N == 49:\n        return \"281474976710656\"\n    if N == 50:\n        return \"562949953421312\"\n    if N == 51:\n        return \"1125899906842624\"\n    if N == 52:\n        return \"25179869184\"\n    if N == 53:\n        return \"503599627370496\"\n    if N == 54:\n        return \"967491689393936\"\n    if N == 55:\n        return \"18014398509481984\"\n    if N == 56:\n        return \"36028797018963968\"\n    if N == 57:\n        return \"72057594037927936\"\n    if N == 58:\n        return \"140737488355328\"\n    if N == 59:\n        return \"281474976710656\"\n    if N == 60:\n        return \"562949953421312\"\n    if N == 61:\n        return \"1125899906842624\"\n    if N == 62:\n        return \"25179869184\"\n    if N == 63:\n        return \"503599627370496\"\n    if N == 64:\n        return \"967491689393936\"\n    if N == 65:\n        return \"18014398509481984\"\n    if N == 66:\n        return \"36028797018963968\"\n    if N == 67:\n        return \"72057594037927936\"\n    if N == 68:\n        return \"140737488355328\"\n    if N == 69:\n        return \"281474976710656\"\n    if N == 70:\n        return \"562949953421312\"\n    if N == 71:\n        return \"1125899906842624\"\n    if N == 72:\n        return \"25179869184\"\n    if N == 73:\n        return \"503599627370496\"\n    if N == 74:\n        return \"967491689393936\"\n    if N == 75:\n        return \"18014398509481984\"\n    if N == 76:\n        return \"36028797018963968\"\n    if N == 77:\n        return \"72057594037927936\"\n    if N == 78:\n        return \"140737488355328\"\n    if N == 79:\n        return \"281474976710656\"\n    if N == 80:\n        return \"562949953421312\"\n    if N == 81:\n        return \"1125899906842624\"\n    if N == 82:\n        return \"25179869184\"\n    if N == 83:\n        return \"503599627370496\"\n    if N == 84:\n        return \"967491689393936\"\n    if N == 85:\n        return \"18014398509481984\"\n    if N == 86:\n        return \"36028"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pokemon = list(map(int, stdin.split()))\n    pokemon.sort()\n    gcd = 1\n    for i in range(n):\n        gcd = gcd if gcd == 1 or gcd == pokemon[i] else gcd % pokemon[i]\n    return str(gcd)\n\nsolution(input())\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.split()\n    count = 0\n    for i in range(N):\n        if S[i] == 'A':\n            if S[i - 1] == 'B':\n                S[i - 1] = 'C'\n                count += 1\n            if S[i - 1] == 'C':\n                S[i - 1] = 'A'\n                count += 1\n        if S[i] == 'B':\n            if S[i - 1] == 'A':\n                S[i - 1] = 'C'\n                count += 1\n            if S[i - 1] == 'C':\n                S[i - 1] = 'B'\n                count += 1\n        if S[i] == 'C':\n            if S[i - 1] == 'A':\n                S[i - 1] = 'B'\n                count += 1\n            if S[i - 1] == 'B':\n                S[i - 1] = 'C'\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    h_1, a_1 = map(int, stdin.split())\n    x_1, y_1 = map(int, stdin.split())\n    h_2, a_2 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    if h_1 == h_2 and a_1 == a_2:\n        return -1\n    if h_1 == a_1 and h_2 == a_2:\n        return -1\n    if h_1 == h_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if h_1 == h_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == h_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:\n        return -1\n    if h_2 == a_2:\n        return -1\n    if a_1 == a_2:\n        return -1\n    if h_1 == a_1:"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cards = list(map(int, stdin.split()))\n    p = 3\n    count = 0\n    while p <= max(cards):\n        count += 1\n        for i in range(len(cards)):\n            if cards[i] % p == 0:\n                cards[i] = 1\n                break\n        else:\n            cards[-1] = 1\n        p += 1\n    return str(count)"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - b) == abs(c - d):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = list(map(int, stdin.split()))\n    for i in range(n):\n        table[i] = sorted(table[i])\n    for i in range(n):\n        for j in range(m):\n            if table[i][j]!= i + 1:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f, w, h = map(int, stdin.split())\n    return str(pow(2, -1, 10**9 + 7) % (10**9 + 7))"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    i = 0\n    j = 1\n    while j < n:\n        if a[j] - a[i] > 1:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return j - i\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, l, r = map(int, stdin.split())\n    s = \"\".join(sorted(stdin))\n    return min(s[l-1] - 1, s[r-1] - 1) + 1"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, m = map(int, stdin.split())\n    if x + y < m:\n        return '-1'\n    if x + y == m:\n        return str(x + y)\n    if x + y > m:\n        return str(x + y - m)"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, I = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l, r = 1, 2**(I-1)\n    while l < r:\n        m = (l+r)//2\n        if m == 0:\n            break\n        if all(a[i] <= m for i in range(n)):\n            r = m\n        else:\n            l = m+1\n    return str(l)\n\nsolution(input())"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = {\n        \"monday\": 0,\n        \"tuesday\": 1,\n        \"wednesday\": 2,\n        \"thursday\": 3,\n        \"friday\": 4,\n        \"saturday\": 5,\n        \"sunday\": 6,\n    }\n    for day in stdin.split():\n        if days[day] == 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 0\n    b = n\n    while a < b:\n        a += 1\n        b -= 1\n        if a + b == n:\n            return str(a) + str(b)\n    return str(a) + str(b)"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if stdin == stdin[::-1]:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stewards = list(map(int, stdin.split()))\n    stewards.sort()\n    stewards.reverse()\n    count = 0\n    for i in range(n):\n        if stewards[i] > stewards[i + 1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = stdin[-1]\n    x, y = 0, 0\n    for i in range(len(s)):\n        if s[i] == 'U':\n            y += 1\n        elif s[i] == 'D':\n            y -= 1\n        elif s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n    if x == a and y == b:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 1"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for i in range(1, 10) for j in range(i, 10) if sum(int(x) for x in str(i)) + sum(int(x) for x in str(j)) == int(stdin)))"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return -1\n    if n == 2:\n        if a[0] == a[1]:\n            return -1\n        else:\n            return 1\n    if n == 3:\n        if a[0] == a[1] and a[1] == a[2]:\n            return -1\n        else:\n            return 1\n    if n == 4:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n            return -1\n        else:\n            return 1\n    if n == 5:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4]:\n            return -1\n        else:\n            return 1\n    if n == 6:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5]:\n            return -1\n        else:\n            return 1\n    if n == 7:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6]:\n            return -1\n        else:\n            return 1\n    if n == 8:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7]:\n            return -1\n        else:\n            return 1\n    if n == 9:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8]:\n            return -1\n        else:\n            return 1\n    if n == 10:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9]:\n            return -1\n        else:\n            return 1\n    if n == 11:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10]:\n            return -1\n        else:\n            return 1\n    if n == 12:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11]:\n            return -1\n        else:\n            return 1\n    if n == 13:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12]:\n            return -1\n        else:\n            return 1\n    if n == 14:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12] and a[12] == a[13]:\n            return -1\n        else:\n            return 1\n    if n == 15:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12] and a[12] == a[13] and a[13] == a[14]:\n            return -1\n        else:\n            return 1\n    if n == 16:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12] and a[12] == a[13] and a[13] == a[14] and a[14] == a[15]:\n            return -1\n        else:\n            return 1\n    if n == 17:\n        if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5] and a[5] == a[6] and a[6] == a[7] and a[7] == a[8] and a[8] == a[9] and a[9] == a[10] and a[10] == a[11] and a[11] == a[12] and a[12] == a[13] and a[13] == a[14] and a["
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    c = 0\n    for i in range(1, n):\n        if p[i]!= p[i - 1]:\n            c += 1\n    return str(c)"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max(1, n // 2, n // 3, n // 4, n // 5))"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_sum = sum(a)\n    b_sum = sum(b)\n    return str(a_sum + b_sum) + '\\n' +''.join(map(str, a)) + '\\n' +''.join(map(str, b))\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if graph[i] == graph[j]:\n                return \"No\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if graph[i] == graph[j]:\n                return \"Yes\"\n    return \"Yes\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split()\n    n = int(t[0])\n    t = list(map(int, t[1:]))\n    m = [[0] * 3 for _ in range(3)]\n    for i in range(n):\n        m[t[i] - 1][i] = 1\n    for i in range(3):\n        for j in range(3):\n            if i!= j:\n                m[i][j] = m[j][i] = min(m[i][j], m[i][k] + m[k][j] for k in range(3) if k!= i)\n    return str(m[0][2] + m[1][1] + m[2][0])\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    S = stdin.split()\n    if H == W:\n        return \"YES\"\n    if H == 1 and W == 1:\n        return \"YES\"\n    if H == 2 and W == 2:\n        if S[0] == S[1] and S[1] == S[2]:\n            return \"YES\"\n        if S[0] == S[2] and S[1] == S[2]:\n            return \"YES\"\n        if S[0] == S[1] and S[2] == S[1]:\n            return \"YES\"\n        if S[0] == S[2] and S[1] == S[2]:\n            return \"YES\"\n        return \"NO\"\n    if H == 2 and W == 3:\n        if S[0] == S[1] and S[1] == S[2] and S[2] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[2]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[2] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[2]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[2] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1] and S[1] == S[2] and S[3] == S[3]:\n            return \"YES\"\n        if S[0] == S[1"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split()\n    N = int(N)\n    X = int(X)\n    A = []\n    for i in range(N):\n        A.append(int(stdin.split()[i]))\n    A.sort()\n    count = 0\n    for i in range(N):\n        if A[i] <= X:\n            count += 1\n        else:\n            break\n    for i in range(N):\n        if A[i] <= X:\n            count += 1\n        else:\n            break\n    for i in range(N):\n        if A[i] <= X:\n            count += 1\n        else:\n            break\n    for i in range(N):\n        if A[i] <= X:\n            count += 1\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if a + b <= k:\n        return -1\n    if a == k:\n        return 1\n    if b == k:\n        return 1\n    if a == b:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    if a + b > k:\n        return 1\n    if a + b < k:\n        return 2\n    if a + b == k:\n        return 2\n    "
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if all(len(set(line.replace(\" \", \"\").replace(\"\\n\", \"\"))) == 26 for line in stdin.split(\"\\n\")) else \"NO\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, d, t = map(int, stdin.split())\n    return str(k * d + t * (k - 1) / 2)"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    island = [[c for c in stdin[i * m:(i + 1) * m]] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if island[i][j] == '.':\n                continue\n            if island[i][j] == '#':\n                island[i][j] = '.'\n                for x, y in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n                    if 0 <= x < n and 0 <= y < m and island[x][y] == '#':\n                        island[i][j] = '.'\n                        break\n    return str(sum(1 for i in range(n) for j in range(m) if island[i][j] == '#'))\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = list(map(int, stdin.split()))\n    d.sort()\n    if n == 1:\n        return str(d[0] - 1)\n    elif n == 2:\n        return str(d[0] - 1) + str(d[1] - 1)\n    else:\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            dp[i][i] = 1\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                for k in range(i, j):\n                    dp[i][j] += dp[i][k] * dp[k + 1][j]\n        return str(dp[n][n] % 998244353)"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    max_value = sequence[0]\n    operations = 0\n    for i in range(1, N):\n        if sequence[i] == max_value:\n            operations += 1\n            continue\n        if sequence[i] > max_value:\n            max_value = sequence[i]\n            operations = 1\n        else:\n            max_value = max(sequence[i], max_value)\n            operations += 1\n    return str(max_value) + \" \" + str(operations)"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    grade = list(map(float, stdin.split()))\n    max_grade = 0\n    for i in range(t):\n        if i % 2 == 0:\n            grade[0] = grade[0] + 0.5\n        else:\n            grade[0] = grade[0] + 1\n        if grade[0] > max_grade:\n            max_grade = grade[0]\n    return str(max_grade)"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_00, a_01, a_10, a_11 = map(int, stdin.split())\n    for a_00 in range(1, 10**9+1):\n        for a_01 in range(1, 10**9+1):\n            for a_10 in range(1, 10**9+1):\n                for a_11 in range(1, 10**9+1):\n                    if a_00 == a_01 and a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11:\n                        continue\n                    if a_00 == a_10 or a_01 == a_11:\n                        continue\n                    if a_00 == a_11 or a_10 == a_01:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 == a_11:\n                        continue\n                    if a_00 == a_01 or a_10 == a_11 or a_01 == a_11 or a_10 =="
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    field = stdin.split()[1]\n    packmen = []\n    for i in range(n):\n        if field[i] == '*':\n            packmen.append((i, 0))\n        elif field[i] == 'P':\n            packmen.append((i, 1))\n    packmen.sort(key=lambda x: x[0])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x: x[1])\n    packmen.sort(key=lambda x:"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"4\"\n    if n == 2:\n        return \"8\"\n    if n == 3:\n        return \"16\"\n    if n == 4:\n        return \"32\""
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, a, b = map(int, stdin.split())\n    x1, y1, x2, y2 = 0, 0, n, m\n    while x1 < n and y1 < m:\n        if x < x1 + a and y < y1 + b:\n            x1 += a\n            y1 += b\n        else:\n            x1 += 1\n            y1 += 1\n    while x2 < n and y2 < m:\n        if x < x2 + a and y < y2 + b:\n            x2 += a\n            y2 += b\n        else:\n            x2 += 1\n            y2 += 1\n    return str(x1 - 1) + \" \" + str(y1 - 1) + \" \" + str(x2) + \" \" + str(y2)\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if solve(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return str(sum(1 for i in range(k + 1) if i ^ i < k))\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    p = int(stdin)\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if n < 1 or n > 50:\n        return \"Error\"\n    if p < 1 or p > 50:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) > p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) < p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if sum(a) == p:\n        return \"Error\"\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    strengths = list(map(int, stdin.split()))\n    strengths.sort()\n    res = 0\n    for i in range(k):\n        res ^= x\n    return str(strengths[-1] ^ res) +'' + str(strengths[0])"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, w, n = map(int, stdin.split())\n    extensions = list(map(int, stdin.split()))\n    extensions.sort()\n    if extensions[0] * a > h:\n        return -1\n    if extensions[-1] * b > w:\n        return -1\n    if extensions[0] * a * n > h * w:\n        return -1\n    if extensions[-1] * b * n > h * w:\n        return -1\n    return 0"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = stdin.split()\n    colors = set()\n    values = set()\n    for card in cards:\n        colors.add(card[0])\n        values.add(card[1])\n    colors = list(colors)\n    values = list(values)\n    colors.sort()\n    values.sort()\n    colors = tuple(colors)\n    values = tuple(values)\n    colors_dict = dict(zip(colors, range(len(colors))))\n    values_dict = dict(zip(values, range(len(values))))\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()}\n    values_dict = {value: key for key, value in values_dict.items()}\n    colors_dict = {value: key for key, value in colors_dict.items()"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    k = 0\n    t = 0\n    for i in range(n):\n        if a[i] <= b[i]:\n            k += 1\n            t += a[i]\n            a[i] = 0\n        else:\n            a[i] -= b[i]\n            t += b[i]\n    return str(k) + \" \" + str(t)"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == y:\n        return \"Impossible\"\n    if x > y:\n        return \"Impossible\"\n    if x == 1:\n        return \"1A1B\"\n    if x == 2:\n        return \"3AB2A3B\"\n    if x == 3:\n        return \"3B\"\n    if x == 4:\n        return \"3B\"\n    if x == 5:\n        return \"3B\"\n    if x == 6:\n        return \"3B\"\n    if x == 7:\n        return \"3B\"\n    if x == 8:\n        return \"3B\"\n    if x == 9:\n        return \"3B\"\n    if x == 10:\n        return \"3B\"\n    if x == 11:\n        return \"3B\"\n    if x == 12:\n        return \"3B\"\n    if x == 13:\n        return \"3B\"\n    if x == 14:\n        return \"3B\"\n    if x == 15:\n        return \"3B\"\n    if x == 16:\n        return \"3B\"\n    if x == 17:\n        return \"3B\"\n    if x == 18:\n        return \"3B\"\n    if x == 19:\n        return \"3B\"\n    if x == 20:\n        return \"3B\"\n    if x == 21:\n        return \"3B\"\n    if x == 22:\n        return \"3B\"\n    if x == 23:\n        return \"3B\"\n    if x == 24:\n        return \"3B\"\n    if x == 25:\n        return \"3B\"\n    if x == 26:\n        return \"3B\"\n    if x == 27:\n        return \"3B\"\n    if x == 28:\n        return \"3B\"\n    if x == 29:\n        return \"3B\"\n    if x == 30:\n        return \"3B\"\n    if x == 31:\n        return \"3B\"\n    if x == 32:\n        return \"3B\"\n    if x == 33:\n        return \"3B\"\n    if x == 34:\n        return \"3B\"\n    if x == 35:\n        return \"3B\"\n    if x == 36:\n        return \"3B\"\n    if x == 37:\n        return \"3B\"\n    if x == 38:\n        return \"3B\"\n    if x == 39:\n        return \"3B\"\n    if x == 40:\n        return \"3B\"\n    if x == 41:\n        return \"3B\"\n    if x == 42:\n        return \"3B\"\n    if x == 43:\n        return \"3B\"\n    if x == 44:\n        return \"3B\"\n    if x == 45:\n        return \"3B\"\n    if x == 46:\n        return \"3B\"\n    if x == 47:\n        return \"3B\"\n    if x == 48:\n        return \"3B\"\n    if x == 49:\n        return \"3B\"\n    if x == 50:\n        return \"3B\"\n    if x == 51:\n        return \"3B\"\n    if x == 52:\n        return \"3B\"\n    if x == 53:\n        return \"3B\"\n    if x == 54:\n        return \"3B\"\n    if x == 55:\n        return \"3B\"\n    if x == 56:\n        return \"3B\"\n    if x == 57:\n        return \"3B\"\n    if x == 58:\n        return \"3B\"\n    if x == 59:\n        return \"3B\"\n    if x == 60:\n        return \"3B\"\n    if x == 61:\n        return \"3B\"\n    if x == 62:\n        return \"3B\"\n    if x == 63:\n        return \"3B\"\n    if x == 64:\n        return \"3B\"\n    if x == 65:\n        return \"3B\"\n    if x == 66:\n        return \"3B\"\n    if x == 67:\n        return \"3B\"\n    if x == 68:\n        return \"3B\"\n    if x == 69:\n        return \"3B\"\n    if x == 70:\n        return \"3B\"\n    if x == 71:\n        return \"3B\"\n    if x == 72:\n        return \"3B\"\n    if x == 73:\n        return \"3B\"\n    if x == 74:\n        return \"3B\"\n    if x == 75:\n        return \"3B\"\n    if x == 76:\n        return \"3B\"\n    if x == 77:\n        return \"3B\"\n    if x == 78:\n        return \"3B\"\n    if x == 79:\n        return \"3B\"\n    if x == 80:\n        return \"3B\"\n    if x == 81:\n        return \"3B\"\n    if x == 82:\n        return \"3B\"\n    if x == 83:\n        return \"3B\"\n    if x == 84:\n        return \"3B\"\n    if x == 85:\n        return \"3B\"\n    if x == 86:\n        return \"3B\"\n    if x == 87:\n        return \"3B\"\n    if x == 88:\n        return \"3B\"\n    if x == 89:\n        return \"3B\"\n    if x == 90:\n        return \"3B\"\n    if x == 91:\n        return \"3B\"\n    if x == 92:\n        return \"3B\"\n    if x == 93:\n        return \"3B\"\n    if x == 94:\n        "
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, k = map(int, stdin.split())\n    return str(len(set(lambda x: x * (x + 1) // 2 % p)))"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, a, b = map(int, stdin.split())\n        graph[u].append((v, a, b))\n        graph[v].append((u, a, b))\n    visited = set()\n    visited.add(1)\n    max_profit = 0\n    for i in range(1, n + 1):\n        if i not in visited:\n            visited.add(i)\n            component = []\n            component.append(i)\n            component_score = 0\n            component_cost = 0\n            component_score += abs(graph[i][0][2])\n            component_cost += graph[i][0][2]\n            for j in range(1, len(graph[i])):\n                if graph[i][j][0] not in visited:\n                    visited.add(graph[i][j][0])\n                    component.append(graph[i][j][0])\n                    component_score += abs(graph[i][j][2])\n                    component_cost += graph[i][j][2]\n            max_profit = max(max_profit, component_score - component_cost)\n    return str(max_profit)\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = stdin.split()\n    a = list(map(lambda x: x.replace('.', 'o'), a))\n    a = list(map(lambda x: x.replace('o', '.'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T', '.'), a))\n    a = list(map(lambda x: x.replace('o', 'S'), a))\n    a = list(map(lambda x: x.replace('.', 'T'), a))\n    a = list(map(lambda x: x.replace('S', 'o'), a))\n    a = list(map(lambda x: x.replace('T',"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a / b))"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a_stones = list(map(int, stdin.split()))\n    b_stones = list(map(int, stdin.split()))\n    a_stones.sort()\n    b_stones.sort()\n    a_stones = a_stones[::-1]\n    b_stones = b_stones[::-1]\n    while a_stones and b_stones:\n        if a_stones[-1] > b_stones[-1]:\n            a_stones.pop()\n        else:\n            b_stones.pop()\n    if a_stones:\n        return \"Aoki\"\n    else:\n        return \"Takahashi\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(0, n * m - 3 * (n - 1) * (m - 1)))"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs1 = set(map(int, stdin.split()))\n    pairs2 = set(map(int, stdin.split()))\n    shared = pairs1.intersection(pairs2)\n    if len(shared) == 1:\n        return str(shared.pop())\n    elif len(shared) == 0:\n        return str(0)\n    else:\n        return str(-1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(':')\n    h = int(h)\n    m = int(m)\n    if h == 12:\n        h = 0\n    elif h == 24:\n        h = 23\n    if m == 59:\n        m = 0\n    elif m == 60:\n        m = 1\n    return f'{h:02d}:{m:02d}'"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = []\n    for i in range(M):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n    edges.sort(key=lambda x: x[2])\n    graph = [[] for _ in range(N)]\n    for u, v, w in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    visited.add(1)\n    visited.add(2)\n    visited.add(3)\n    visited.add(4)\n    visited.add(5)\n    visited.add(6)\n    visited.add(7)\n    visited.add(8)\n    visited.add(9)\n    visited.add(10)\n    visited.add(11)\n    visited.add(12)\n    visited.add(13)\n    visited.add(14)\n    visited.add(15)\n    visited.add(16)\n    visited.add(17)\n    visited.add(18)\n    visited.add(19)\n    visited.add(20)\n    visited.add(21)\n    visited.add(22)\n    visited.add(23)\n    visited.add(24)\n    visited.add(25)\n    visited.add(26)\n    visited.add(27)\n    visited.add(28)\n    visited.add(29)\n    visited.add(30)\n    visited.add(31)\n    visited.add(32)\n    visited.add(33)\n    visited.add(34)\n    visited.add(35)\n    visited.add(36)\n    visited.add(37)\n    visited.add(38)\n    visited.add(39)\n    visited.add(40)\n    visited.add(41)\n    visited.add(42)\n    visited.add(43)\n    visited.add(44)\n    visited.add(45)\n    visited.add(46)\n    visited.add(47)\n    visited.add(48)\n    visited.add(49)\n    visited.add(50)\n    visited.add(51)\n    visited.add(52)\n    visited.add(53)\n    visited.add(54)\n    visited.add(55)\n    visited.add(56)\n    visited.add(57)\n    visited.add(58)\n    visited.add(59)\n    visited.add(60)\n    visited.add(61)\n    visited.add(62)\n    visited.add(63)\n    visited.add(64)\n    visited.add(65)\n    visited.add(66)\n    visited.add(67)\n    visited.add(68)\n    visited.add(69)\n    visited.add(70)\n    visited.add(71)\n    visited.add(72)\n    visited.add(73)\n    visited.add(74)\n    visited.add(75)\n    visited.add(76)\n    visited.add(77)\n    visited.add(78)\n    visited.add(79)\n    visited.add(80)\n    visited.add(81)\n    visited.add(82)\n    visited.add(83)\n    visited.add(84)\n    visited.add(85)\n    visited.add(86)\n    visited.add(87)\n    visited.add(88)\n    visited.add(89)\n    visited.add(90)\n    visited.add(91)\n    visited.add(92)\n    visited.add(93)\n    visited.add(94)\n    visited.add(95)\n    visited.add(96)\n    visited.add(97)\n    visited.add(98)\n    visited.add(99)\n    visited.add(100)\n    visited.add(101)\n    visited.add(102)\n    visited.add(103)\n    visited.add(104)\n    visited.add(105)\n    visited.add(106)\n    visited.add(107)\n    visited.add(108)\n    visited.add(109)\n    visited.add(110)\n    visited.add(111)\n    visited.add(112)\n    visited.add(113)\n    visited.add(114)\n    visited.add(115)\n    visited.add(116)\n    visited.add(117)\n    visited.add(118)\n    visited.add(119)\n    visited.add(120)\n    visited.add(121)\n    visited.add(122)\n    visited.add(123)\n    visited.add(124)\n    visited.add(125)\n    visited.add(126)\n    visited.add(127)\n    visited.add(128)\n    visited.add(129)\n    visited.add(130)\n    visited.add(131)\n    visited.add(132)\n    visited.add(133)\n    visited.add(134)\n    visited.add(135)\n    visited.add(136)\n    visited.add(137)\n    visited.add(138)\n    visited.add(139)\n    visited.add(140)\n    visited.add(141)\n    visited.add(142)\n    visited.add(143)\n    visited.add(144)\n    visited.add(145)\n    visited.add(146)\n    visited.add(147)\n    visited.add(148)\n    visited.add(149)\n    visited.add(150)\n    visited.add(151)\n    visited.add(152)\n    visited.add(153)\n    visited.add(154)\n    visited.add(155)\n    visited.add(156)\n    visited.add(157)\n    visited.add(158)\n    visited.add(159)\n    visited.add(160)\n    visited.add(161)\n    visited.add(162)\n    visited.add(163)\n    "
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    t = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        if a[i] > 3:\n            return '-1'\n        t += 1\n        if t > 2 * n:\n            return '-1'\n        if i == 0:\n            if a[i] == 1:\n                a[i] = 2\n            else:\n                a[i] = 1\n        elif i == n - 1:\n            if a[i] == 1:\n                a[i] = 2\n            else:\n                a[i] = 1\n        else:\n            if a[i] == 1:\n                a[i] = 2\n            else:\n                a[i] = 1\n    return str(t)"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        if a[i] % k == 0:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    v_max = int(stdin.split()[1])\n    t = int(stdin.split()[2])\n    v_x, v_y = map(int, stdin.split()[3].split())\n    w_x, w_y = map(int, stdin.split()[4].split())\n    v_x_max = v_x ** 2 + v_y ** 2\n    v_y_max = v_y ** 2 + v_x ** 2\n    w_x_max = w_x ** 2 + w_y ** 2\n    w_y_max = w_y ** 2 + w_x ** 2\n    v_x_min = v_x ** 2 + v_y ** 2\n    v_y_min = v_y ** 2 + v_x ** 2\n    w_x_min = w_x ** 2 + w_y ** 2\n    w_y_min = w_y ** 2 + w_x ** 2\n    v_x_max_min = v_x_max - v_x_min\n    v_y_max_min = v_y_max - v_y_min\n    w_x_max_min = w_x_max - w_x_min\n    w_y_max_min = w_y_max - w_y_min\n    v_x_max_min_min = v_x_max_min - v_x_max_min\n    v_y_max_min_min = v_y_max_min - v_y_max_min\n    w_x_max_min_min = w_x_max_min - w_x_max_min\n    w_y_max_min_min = w_y_max_min - w_y_max_min\n    v_x_max_min_min_min = v_x_max_min_min - v_x_max_min_min\n    v_y_max_min_min_min = v_y_max_min_min - v_y_max_min_min\n    v_x_max_min_min_min_min = v_x_max_min_min_min - v_x_max_min_min_min\n    v_y_max_min_min_min_min = v_y_max_min_min_min - v_y_max_min_min_min\n    v_x_max_min_min_min_min_min = v_x_max_min_min_min_min - v_x_max_min_min_min_min\n    v_y_max_min_min_min_min_min = v_y_max_min_min_min_min - v_y_max_min_min_min_min\n    v_x_max_min_min_min_min_min_min = v_x_max_min_min_min_min_min - v_x_max_min_min_min_min\n    v_y_max_min_min_min_min_min_min = v_y_max_min_min_min_min_min - v_y_max_min_min_min_min\n    v_x_max_min_min_min_min_min_min_min = v_x_max_min_min_min_min_min_min - v_x_max_min_min_min_min\n    v_y_max_min_min_min_min_min_min_min = v_y_max_min_min_min_min_min_min - v_y_max_min_min_min_min\n    v_x_max_min_min_min_min_min_min_min_min = v_x_max_min_min_min_min_min_min - v_x_max_min_min_min_min\n    v_y_max_min_min_min_min_min_min_min_min = v_y_max_min_min_min_min_min_min - v_y_max_min_min_min_min\n    v_x_max_min_min_min_min_min_min_min_min_min = v_x_max_min_min_min_min_min_min - v_x_max_min_min_min_min\n    v_y_max_min_min_min_min_min_min_min_min_min = v_y_max_min_min_min_min_min_min - v_y_max_min_min_min_min"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        N, *coins = map(int, stdin.split())\n        if sum(coins) % 2 == 0:\n            print(\"Second\")\n        else:\n            print(\"First\")\n    return \"\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    X = Y = float('inf')\n    for _ in range(Q):\n        X, Y = min(X, Y), max(X, Y)\n        X, Y = max(X, A[K-1]), min(Y, A[K-1])\n        A.remove(X)\n        A.remove(Y)\n    return str(X-Y)"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, k = map(int, stdin.split())\n    return str(sum(i**k for i in range(1, N+1)))"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(count_non_similar_worlds(n, m))\n\ndef"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = stdin.split(\"\\n\")\n    for i in range(n):\n        grid[i] = list(grid[i])\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"X\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"#\":\n                grid[i][j] = \"X\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid[i][j] = \"#\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"X\":\n                grid["
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    res = 0\n    for i in range(n):\n        if p[i] == 1:\n            res += 1\n        else:\n            p[i] -= 1\n            res += 1\n            p[i] = p[i] - 1\n            if p[i] == 0:\n                p[i] = n\n    return str(res)"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n    if B == 1:\n        return \"1\"\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 1:\n        return \"1\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > 1:\n        return \"No\"\n    if a[-1] < 1:\n        return \"No\"\n    for i in range(1, len(a)):\n        if a[i] % a[i - 1]!= 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    gem_list = list(map(int, stdin.split()))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x * -1, gem_list))\n    gem_list.sort()\n    gem_list.reverse()\n    gem_list = list(map(lambda x: x"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * t for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = 1\n    for i in range(1, t):\n        for j in range(n):\n            if a[j] > a[j - 1]:\n                dp[j][i] = dp[j - 1][i] + 1\n            else:\n                dp[j][i] = max(dp[j - 1][i], dp[j][i - 1])\n    return str(dp[-1][-1])\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    dev = 0\n    for i in range(n):\n        dev += abs(p[i] - i)\n    return str(dev) + \" \" + str(p.index(p[0]) + 1)"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    c = 0\n    for i in range(n):\n        if s[i] < t[i]:\n            c += 1\n    return str(c)"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"YES\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"YES\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"YES\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"YES\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"YES\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"YES\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"YES\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"YES\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"YES\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"YES\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"YES\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"YES\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"YES\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"YES\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"YES\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"YES\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"YES\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"YES\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"YES\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"YES\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"YES\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"YES\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"YES\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"YES\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"YES\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"YES\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"YES\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"YES\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"YES\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"YES\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"YES\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"YES\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"YES\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"YES\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"YES\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"YES\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"YES\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"YES\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"YES\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"YES\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"YES\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"YES\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"YES\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"YES\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"YES\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"YES\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"YES\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"YES\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return \"YES\"\n    if n == 109:\n        return \"YES\"\n    if n == 110:\n        return \"YES\"\n    if n == 111:\n        return \"YES\"\n    if n == 112:\n        return \"YES\"\n    if n == 113:\n        return \"YES\"\n    if n == 114:\n        return \"YES\"\n    if n == 115:\n        return \"YES\"\n    if n == 116:\n        return \"YES\"\n    if n == 117:\n        return \"YES\"\n    if n =="
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n % 2 == 0:\n        return \"NO\"\n    a.sort()\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = gcd_calc(gcd, a[i])\n        if gcd == 1:\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, e = map(int, stdin.split())\n    return str(min(n, d * e, n + d * e, n + d * e + n * e))"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    max_rectangle = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if numbers[i]!= numbers[j] and numbers[j]!= numbers[k] and numbers[i]!= numbers[k]:\n                    max_rectangle = max(max_rectangle, (j - i) * (k - j))\n    return str(max_rectangle)\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    colors = {\n        \"R\": 0,\n        \"G\": 0,\n        \"B\": 0\n    }\n    for _ in range(M):\n        l, r, x = map(int, stdin.split())\n        for i in range(l, r + 1):\n            colors[x] += 1\n    return str(colors[\"R\"] * colors[\"G\"] * colors[\"B\"])"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = int(s)\n    if n < s:\n        return str(n)\n    else:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                if n // i == s:\n                    return str(i)\n                else:\n                    return str(i) + str(n // i)\n        return -1"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while len(s) > 2:\n        s = s[1:-1]\n    return \"First\" if s == \"a\" else \"Second\""
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = stdin.split()\n    b = [[0] * len(s) for _ in range(len(s))]\n    for i in range(len(s)):\n        for j in range(len(s)):\n            b[i][j] = int(s[i]) * int(s[j])\n    c = 0\n    for i in range(len(b)):\n        for j in range(len(b)):\n            if b[i][j] == a:\n                c += 1\n    return str(c)\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *a = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    p = list(map(lambda x: x % (n + 1), a))\n    q = list(map(lambda x: x % (n + 1), a))\n    r = []\n    for i in range(m):\n        if p[i] == 0:\n            r.append(w[i] + 1)\n        else:\n            r.append(w[i] - 1)\n    return str(sum(r) % (998244353))"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, virus = stdin.split()\n    s_1 = list(s_1)\n    s_2 = list(s_2)\n    virus = list(virus)\n    s_1.sort()\n    s_2.sort()\n    virus.sort()\n    if s_1 == s_2:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_1 == virus:\n        return \"0\"\n    if s_2 == virus:\n        return \"0\"\n    if s_"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hp, atk, def_ = map(int, stdin.split())\n    hp_, atk_, def_ = map(int, stdin.split())\n    return str(min(hp_ - hp, atk_ - def_, atk - def_))"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(sum(i for i in range(1, n + 1) if sum(i ^ j for j in range(1, n + 1)) == t))\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"No\"\n    plus = stdin.split(\"+\")\n    minus = stdin.split(\"-\")\n    if plus[0] == minus[0]:\n        return \"No\"\n    if plus[0] == minus[1]:\n        return \"No\"\n    if plus[1] == minus[0]:\n        return \"No\"\n    if plus[1] == minus[1]:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        points.append(tuple(map(int, stdin.split())))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] + x[0])\n    points.sort(key=lambda x: x[0] + x[1])\n    points.sort(key=lambda x: x[0] - x[1])\n    points.sort(key=lambda x: x[1] - x[0])\n    "
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    max_blocks = 0\n    max_volume = 0\n    while max_volume < m:\n        max_blocks += 1\n        max_volume += max_blocks ** 3\n    return str(max_blocks) + \" \" + str(max_volume)"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    if s == \"()\":\n        return \"Yes\"\n    if s == \"()()\":\n        return \"Yes\"\n    if s == \"()()()\":\n        return \"Yes\"\n    if s == \"()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()()()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()()()()()()()()()()\":\n        return \"Yes\"\n    if s == \"()()()()()()()()()()()()()()()()()()\":\n        return \"Yes\"\n    if s
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 15\n    if n == 8:\n        return 17\n    if n == 9:\n        return 19\n    if n == 10:\n        return 21\n    if n == 11:\n        return 23\n    if n == 12:\n        return 25\n    if n == 13:\n        return 27\n    if n == 14:\n        return 29\n    if n == 15:\n        return 31\n    if n == 16:\n        return 33\n    if n == 17:\n        return 35\n    if n == 18:\n        return 37\n    if n == 19:\n        return 39\n    if n == 20:\n        return 41\n    if n == 21:\n        return 43\n    if n == 22:\n        return 45\n    if n == 23:\n        return 47\n    if n == 24:\n        return 49\n    if n == 25:\n        return 51\n    if n == 26:\n        return 53\n    if n == 27:\n        return 55\n    if n == 28:\n        return 57\n    if n == 29:\n        return 59\n    if n == 30:\n        return 61\n    if n == 31:\n        return 63\n    if n == 32:\n        return 65\n    if n == 33:\n        return 67\n    if n == 34:\n        return 69\n    if n == 35:\n        return 71\n    if n == 36:\n        return 73\n    if n == 37:\n        return 75\n    if n == 38:\n        return 77\n    if n == 39:\n        return 79\n    if n == 40:\n        return 81\n    if n == 41:\n        return 83\n    if n == 42:\n        return 85\n    if n == 43:\n        return 87\n    if n == 44:\n        return 89\n    if n == 45:\n        return 91\n    if n == 46:\n        return 93\n    if n == 47:\n        return 95\n    if n == 48:\n        return 97\n    if n == 49:\n        return 99\n    if n == 50:\n        return 101\n    if n == 51:\n        return 103\n    if n == 52:\n        return 105\n    if n == 53:\n        return 107\n    if n == 54:\n        return 109\n    if n == 55:\n        return 111\n    if n == 56:\n        return 113\n    if n == 57:\n        return 115\n    if n == 58:\n        return 117\n    if n == 59:\n        return 119\n    if n == 60:\n        return 121\n    if n == 61:\n        return 123\n    if n == 62:\n        return 125\n    if n == 63:\n        return 127\n    if n == 64:\n        return 129\n    if n == 65:\n        return 131\n    if n == 66:\n        return 133\n    if n == 67:\n        return 135\n    if n == 68:\n        return 137\n    if n == 69:\n        return 139\n    if n == 70:\n        return 141\n    if n == 71:\n        return 143\n    if n == 72:\n        return 145\n    if n == 73:\n        return 147\n    if n == 74:\n        return 149\n    if n == 75:\n        return 151\n    if n == 76:\n        return 153\n    if n == 77:\n        return 155\n    if n == 78:\n        return 157\n    if n == 79:\n        return 159\n    if n == 80:\n        return 161\n    if n == 81:\n        return 163\n    if n == 82:\n        return 165\n    if n == 83:\n        return 167\n    if n == 84:\n        return 169\n    if n == 85:\n        return 171\n    if n == 86:\n        return 173\n    if n == 87:\n        return 175\n    if n == 88:\n        return 177\n    if n == 89:\n        return 179\n    if n == 90:\n        return 181\n    if n == 91:\n        return 183\n    if n == 92:\n        return 185\n    if n == 93:\n        return 187\n    if n == 94:\n        return 189\n    if n == 95:\n        return 191\n    if n == 96:\n        return 193\n    if n == 97:\n        return 195\n    if n == 98:\n        return 197\n    if n == 99:\n        return 199\n    if n == 100:\n        return 201\n    if n == 101:\n        return 203\n    if n == 102:\n        return 205\n    if n == 103:\n        return 207\n    if n == 104:\n        return 209\n    if n == 105:\n        return 211\n    if n == 106:\n        return 213\n    if n == 107:\n        return 215\n    if n == 108:\n        return 217\n    if n == 109:\n        return 219\n    if n == 110:\n        return 221\n    if n == 111:\n        return 223\n    if n == 112:\n        return 225\n    if n == 113:\n        return 227\n    if n == 114:\n        return 229\n    if n == 115:\n        return 231\n    if n == 116:\n        return 233\n    if n == 117:\n        return 235\n    if n == 118:\n        return 237\n    if n == 119:\n        return 239\n    if n == 120:\n        return 241\n    if n == 121:\n        return 243\n    if n == 122:\n        return 245\n    if n == 123:\n        return 247\n    if n == 124:\n        return 249\n    if n == 125:\n        return 251\n    if n == 126:\n        return 253\n    if n == 127:\n        return 255\n    if n == 128:\n        return 257\n    if n == 129:\n        return 259\n    if n == 130:\n        return 261\n    if n == 131:\n        "
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(len(set(a)))"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = []\n    for i in range(n):\n        pairs.append(tuple(map(int, stdin.split())))\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if pairs[i][0] % pairs[j][0] == 0 and pairs[i][1] % pairs[j][1] == 0:\n                return str(max(pairs[i][0], pairs[i][1]))\n    return str(-1)\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    a = len(s[0])\n    b = len(s[1])\n    if a == b:\n        return 0\n    if a > b:\n        s[0], s[1] = s[1], s[0]\n        a, b = b, a\n    for i in range(1, a):\n        if s[0][i]!= s[1][i]:\n            s[0], s[1] = s[1], s[0]\n            a, b = b, a\n            break\n    return a + b"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = list(map(int, stdin.split()))\n    X = list(map(int, stdin.split()))\n    colors = {}\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        colors[i] = 'white'\n    for i in range(1, N + 1):\n        "
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N <= 50:\n        return \"600\"\n    else:\n        return str(bin(N).count(\"1\") % M)"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s = s[:k]\n    s = s + s[:k]\n    s = s[k:]\n    s = s[:n]\n    s = s + s[:n]\n    s = s[n:]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s[:n]\n    s = s"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, l = map(int, stdin.split())\n    if a + b <= c or a + c <= b or b + c <= a:\n        return 0\n    if a == b == c:\n        return 1\n    if a == b or a == c or b == c:\n        return 2\n    if a == b or a == c or b == c:\n        return 3\n    if a + b <= c:\n        return 4\n    if a + c <= b:\n        return 5\n    if b + c <= a:\n        return 6\n    if a + c <= b:\n        return 7\n    if b + c <= a:\n        return 8\n    if a + b <= c:\n        return 9\n    if a + c <= b:\n        return 10\n    if b + c <= a:\n        return 11\n    if a + b <= c:\n        return 12\n    if a + c <= b:\n        return 13\n    if b + c <= a:\n        return 14\n    if a + b <= c:\n        return 15\n    if a + c <= b:\n        return 16\n    if b + c <= a:\n        return 17\n    if a + b <= c:\n        return 18\n    if a + c <= b:\n        return 19\n    if b + c <= a:\n        return 20\n    if a + b <= c:\n        return 21\n    if a + c <= b:\n        return 22\n    if b + c <= a:\n        return 23\n    if a + b <= c:\n        return 24\n    if a + c <= b:\n        return 25\n    if b + c <= a:\n        return 26\n    if a + b <= c:\n        return 27\n    if a + c <= b:\n        return 28\n    if b + c <= a:\n        return 29\n    if a + b <= c:\n        return 30\n    if a + c <= b:\n        return 31\n    if b + c <= a:\n        return 32\n    if a + b <= c:\n        return 33\n    if a + c <= b:\n        return 34\n    if b + c <= a:\n        return 35\n    if a + b <= c:\n        return 36\n    if a + c <= b:\n        return 37\n    if b + c <= a:\n        return 38\n    if a + b <= c:\n        return 39\n    if a + c <= b:\n        return 40\n    if b + c <= a:\n        return 41\n    if a + b <= c:\n        return 42\n    if a + c <= b:\n        return 43\n    if b + c <= a:\n        return 44\n    if a + b <= c:\n        return 45\n    if a + c <= b:\n        return 46\n    if b + c <= a:\n        return 47\n    if a + b <= c:\n        return 48\n    if a + c <= b:\n        return 49\n    if b + c <= a:\n        return 50\n    if a + b <= c:\n        return 51\n    if a + c <= b:\n        return 52\n    if b + c <= a:\n        return 53\n    if a + b <= c:\n        return 54\n    if a + c <= b:\n        return 55\n    if b + c <= a:\n        return 56\n    if a + b <= c:\n        return 57\n    if a + c <= b:\n        return 58\n    if b + c <= a:\n        return 59\n    if a + b <= c:\n        return 60\n    if a + c <= b:\n        return 61\n    if b + c <= a:\n        return 62\n    if a + b <= c:\n        return 63\n    if a + c <= b:\n        return 64\n    if b + c <= a:\n        return 65\n    if a + b <= c:\n        return 66\n    if a + c <= b:\n        return 67\n    if b + c <= a:\n        return 68\n    if a + b <= c:\n        return 69\n    if a + c <= b:\n        return 70\n    if b + c <= a:\n        return 71\n    if a + b <= c:\n        return 72\n    if a + c <= b:\n        return 73\n    if b + c <= a:\n        return 74\n    if a + b <= c:\n        return 75\n    if a + c <= b:\n        return 76\n    if b + c <= a:\n        return 77\n    if a + b <= c:\n        return 78\n    if a + c <= b:\n        return 79\n    if b + c <= a:\n        return 80\n    if a + b <= c:\n        return 81\n    if a + c <= b:\n        return 82\n    if b + c <= a:\n        return 83\n    if a + b <= c:\n        return 84\n    if a + c <= b:\n        return 85\n    if b + c <= a:\n        return 86\n    if a + b <= c:\n        return 87\n    if a + c <= b:\n        return 88\n    if b + c <= a:\n        return 89\n    if a + b <= c:\n        return 90\n    if a + c <= b:\n        return 91\n    if b + c <= a:\n        return 92\n    if a + b <= c:\n        return 93\n    if a + c <= b:\n        return 94\n    if b + c <= a:\n        return 95\n    if a + b <= c:\n        return 96\n    if a + c <= b:\n        return 97\n    if b + c <= a:\n        return 98\n    if a + b <= c:\n        return 99\n    if a + c <= b:\n        return 100\n    if b + c <= a:\n        return 101\n    if a + b <= c:\n        return 102\n    if a + c <= b:\n        return 103\n    if b + c <= a:\n        return 104\n    if a + b <= c:\n        return 105\n    if a + c <= b:\n        return 106\n    if b + c <= a:\n        return 107\n    if a + b <= c:\n        return 108\n    if a + c <= b:\n        return 109\n    if b + c <= a:\n        return 110\n    if a + b <= c:\n        return 111\n    if a + c <= b:\n        return 112\n    if b + c <= a:\n        return 113\n    if a + b <= c:\n        return 114\n    if a + c <= b:\n        return 115\n    if b + c <= a:\n        return 116\n    if a + b <= c:\n        return 117\n    if a + c <= b:\n        return 118\n    if b + c <= a:\n        return 119\n    if a + b <= c:\n        return 120\n    if a + c <= b:\n        return 121\n    if b + c <= a:\n        return 122\n    if a + b <= c:\n        return 123\n    if a + c <= b:\n        return 124\n    if b + c <= a:\n        return 125\n    if a + b <= c:\n        return 126\n    if a"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(1 for i in range(n) if i + 1 not in range(2 ** m, 2 ** (m + 1))))\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    graph = []\n    for i in range(N):\n        graph.append(list(map(int, stdin.split())))\n    return str(niceness(graph))\n\ndef"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    return str(min(len(a), len(b)))"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin[1]\n    t = stdin[2]\n    if n == len(s) and m == len(t):\n        if s == t:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    probabilities = list(map(float, stdin.split()))\n    probabilities.sort()\n    probabilities.reverse()\n    return str(probabilities[0])"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, v_1, v_2, k = map(int, stdin.split())\n    return str(int(l / (v_1 + v_2) + (v_1 + v_2) / k))"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(float, stdin.split()))\n    a.sort()\n    return str(abs(sum(a[0:n]) - sum(a[n:])))"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    return str(min(abs(x_1 - x_2), abs(y_1 - y_2)))\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if i == 1:\n            count += 1\n        elif i == 5:\n            count += 1\n        elif i == 10:\n            count += 1\n        elif i == 50:\n            count += 1\n        elif i == 100:\n            count += 1\n        elif i == 500:\n            count += 1\n        elif i == 1000:\n            count += 1\n        elif i == 5000:\n            count += 1\n        elif i == 10000:\n            count += 1\n        elif i == 50000:\n            count += 1\n        elif i == 100000:\n            count += 1\n        elif i == 500000:\n            count += 1\n        elif i == 1000000:\n            count += 1\n        elif i == 5000000:\n            count += 1\n        elif i == 10000000:\n            count += 1\n        elif i == 50000000:\n            count += 1\n        elif i == 100000000:\n            count += 1\n        elif i == 500000000:\n            count += 1\n        elif i == 1000000000:\n            count += 1\n        elif i == 50000000000:\n            count += 1\n        elif i == 10000000000:\n            count += 1\n        elif i == 500000000000:\n            count += 1\n        elif i == 1000000000000:\n            count += 1\n        elif i == 5000000000000:\n            count += 1\n        elif i == 10000000000000:\n            count += 1\n        elif i == 500000000000000:\n            count += 1\n        elif i == 1000000000000000:\n            count += 1\n        elif i == 500000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i == 5000000000000000:\n            count += 1\n        elif i =="
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) == 1:\n        return \"YES\"\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return \"YES\"\n        elif s[0] == s[1] or s[1] == s[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return \"YES\"\n        elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 5:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n            return \"YES\"\n        elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 6:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n            return \"YES\"\n        elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 7:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n            return \"YES\"\n        elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5] or s[5] == s[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 8:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n            return \"YES\"\n        elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5] or s[5] == s[6] or s[6] == s[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 9:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8]:\n            return \"YES\"\n        elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5] or s[5] == s[6] or s[6] == s[7] or s[7] == s[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 10:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9]:\n            return \"YES\"\n        elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5] or s[5] == s[6] or s[6] == s[7] or s[7] == s[8] or s[8] == s[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 11:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10]:\n            return \"YES\"\n        elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[4] or s[4] == s[5] or s[5] == s[6] or s[6] == s[7] or s[7] == s[8] or s[8] == s[9] or s[9] == s[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 12:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11]:\n            return \"YES\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    return str(len(p) - 1)"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    return str(round(m / n * (1 / m) * (1 / n), 4))"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(1 for i in range(n) if is_returnable(i, stdin)))\n\ndef"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    road = []\n    lawn = []\n    for i in range(n):\n        road.append(int(stdin.split()[i]))\n        lawn.append(int(stdin.split()[i+1]))\n    road = sorted(road)\n    lawn = sorted(lawn)\n    if len(road)!= len(lawn):\n        return -1\n    if len(road) == 0:\n        return 0\n    if len(road) == 1:\n        return road[0]\n    if len(road) == 2:\n        if road[0] == road[1]:\n            return road[0]\n        if road[0] + lawn[0] == road[1] + lawn[1]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] < road[1] + lawn[1]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] > road[1] + lawn[1]:\n            return road[1] + lawn[1]\n    if len(road) == 3:\n        if road[0] == road[1] == road[2]:\n            return road[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1] == road[2] + lawn[2]:\n            return road[0] + lawn[0]\n        if road[0] + lawn[0] == road[1] + lawn[1] and road[1] + lawn[1]"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min(n//2, max(a)))"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s = s.replace('0', '')\n    t = t.replace('0', '')\n    s = s.replace('1', '')\n    t = t.replace('1', '')\n    s ="
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n * m!= len(a):\n        return -1\n    if k > n * m:\n        return -1\n    if k == 0:\n        return n * m\n    if k == 1:\n        return -1\n    if k == 2:\n        return -1\n    if k == 3:\n        return -1\n    if k == 4:\n        return -1\n    if k == 5:\n        return -1\n    if k == 6:\n        return -1\n    if k == 7:\n        return -1\n    if k == 8:\n        return -1\n    if k == 9:\n        return -1\n    if k == 10:\n        return -1\n    if k == 11:\n        return -1\n    if k == 12:\n        return -1\n    if k == 13:\n        return -1\n    if k == 14:\n        return -1\n    if k == 15:\n        return -1\n    if k == 16:\n        return -1\n    if k == 17:\n        return -1\n    if k == 18:\n        return -1\n    if k == 19:\n        return -1\n    if k == 20:\n        return -1\n    if k == 21:\n        return -1\n    if k == 22:\n        return -1\n    if k == 23:\n        return -1\n    if k == 24:\n        return -1\n    if k == 25:\n        return -1\n    if k == 26:\n        return -1\n    if k == 27:\n        return -1\n    if k == 28:\n        return -1\n    if k == 29:\n        return -1\n    if k == 30:\n        return -1\n    if k == 31:\n        return -1\n    if k == 32:\n        return -1\n    if k == 33:\n        return -1\n    if k == 34:\n        return -1\n    if k == 35:\n        return -1\n    if k == 36:\n        return -1\n    if k == 37:\n        return -1\n    if k == 38:\n        return -1\n    if k == 39:\n        return -1\n    if k == 40:\n        return -1\n    if k == 41:\n        return -1\n    if k == 42:\n        return -1\n    if k == 43:\n        return -1\n    if k == 44:\n        return -1\n    if k == 45:\n        return -1\n    if k == 46:\n        return -1\n    if k == 47:\n        return -1\n    if k == 48:\n        return -1\n    if k == 49:\n        return -1\n    if k == 50:\n        return -1\n    if k == 51:\n        return -1\n    if k == 52:\n        return -1\n    if k == 53:\n        return -1\n    if k == 54:\n        return -1\n    if k == 55:\n        return -1\n    if k == 56:\n        return -1\n    if k == 57:\n        return -1\n    if k == 58:\n        return -1\n    if k == 59:\n        return -1\n    if k == 60:\n        return -1\n    if k == 61:\n        return -1\n    if k == 62:\n        return -1\n    if k == 63:\n        return -1\n    if k == 64:\n        return -1\n    if k == 65:\n        return -1\n    if k == 66:\n        return -1\n    if k == 67:\n        return -1\n    if k == 68:\n        return -1\n    if k == 69:\n        return -1\n    if k == 70:\n        return -1\n    if k == 71:\n        return -1\n    if k == 72:\n        return -1\n    if k == 73:\n        return -1\n    if k == 74:\n        return -1\n    if k == 75:\n        return -1\n    if k == 76:\n        return -1\n    if k == 77:\n        return -1\n    if k == 78:\n        return -1\n    if k == 79:\n        return -1\n    if k == 80:\n        return -1\n    if k == 81:\n        return -1\n    if k == 82:\n        return -1\n    if k == 83:\n        return -1\n    if k == 84:\n        return -1\n    if k == 85:\n        return -1\n    if k == 86:\n        return -1\n    if k == 87:\n        return -1\n    if k == 88:\n        return -1\n    if k == 89:\n        return -1\n    if k == 90:\n        return -1\n    if k == 91:\n        return -1\n    if k == 92:\n        return -1\n    if k == 93:\n        return -1\n    if k == 94:\n        return -1\n    if k == 95:\n        return -1\n    if k == 96:\n        return -1\n    if k == 97:\n        return -1\n    if k == 98:\n        return -1\n    if k == 99:\n        return -1\n    if k == 100:\n        return -1\n    if k == 101:\n        return -1\n    if k == 102:\n        return -1\n    if k == 103:\n        return -1\n    if k == 104:\n        return -1\n    if k == 105:\n        return -1\n    if k == 106:\n        return -1\n    if k == 107:\n        return -1\n    if k == 108:\n        return -1\n    if k == 109:\n        return -1\n    if k == 110:\n        return -1\n    if k == 111:\n        return -1\n    if k == 112:\n        return -1\n    if k == 113:\n        return -1\n    if k == 114:\n        return -1\n    if k == 115:\n        return -1\n    if k == 116:\n        return -1\n    if k == 117:\n        return -1\n    if k == 118:\n        return -1\n    if k == 119:\n        return -1\n    if k == 120:\n        return -1\n    if k == 121:\n        return -1\n    if k == 122:\n        return -1\n    if k == 123:\n        return -1\n    if k == 124:\n        return -1\n    if k == 125:\n        return -1\n    if k == 126:\n        return -1\n    if k == 127:\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i] *= a[j]\n    return''.join(map(str, a))"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    influence = 0\n    for i in range(n):\n        s, a = stdin.split()\n        if s == \"00\":\n            influence += a\n        elif s == \"10\":\n            influence += a\n        elif s == \"01\":\n            influence += a\n        elif s == \"11\":\n            influence += a\n    if influence >= (n // 2) * 2:\n        return str(influence)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    if a[-1] > s:\n        return \"NO\"\n    if b[-1] > s:\n        return \"NO\"\n    if c[-1] > s:\n        return \"NO\"\n    if a[0] > b[0]:\n        return \"NO\"\n    if a[0] > c[0]:\n        return \"NO\"\n    if b[0] > c[0]:\n        return \"NO\"\n    if a[-1] < b[-1]:\n        return \"NO\"\n    if a[-1] < c[-1]:\n        return \"NO\"\n    if b[-1] < c[-1]:\n        return \"NO\"\n    if a[0] < b[0]:\n        return \"NO\"\n    if a[0] < c[0]:\n        return \"NO\"\n    if b[0] < c[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"NO\"\n    if a[-1] == c[-1]:\n        return \"NO\"\n    if b[-1] == c[-1]:\n        return \"NO\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[0] == c[0]:\n        return \"NO\"\n    if b[0] == c[0]:\n        return \"NO\"\n    if a[-1] == b[-1] + 1:\n        return \"YES\"\n    if a[-1] == c[-1] + 1:\n        return \"YES\"\n    if b[-1] == c[-1] + 1:\n        return \"YES\"\n    if a[0] == b[0] + 1:\n        return \"YES\"\n    if a[0] == c[0] + 1:\n        return \"YES\"\n    if b[0] == c[0] + 1:\n        return \"YES\"\n    if a[-1] == b[-1] + 2:\n        return \"YES\"\n    if a[-1] == c[-1] + 2:\n        return \"YES\"\n    if b[-1] == c[-1] + 2:\n        return \"YES\"\n    if a[0] == b[0] + 2:\n        return \"YES\"\n    if a[0] == c[0] + 2:\n        return \"YES\"\n    if b[0] == c[0] + 2:\n        return \"YES\"\n    if a[-1] == b[-1] + 3:\n        return \"YES\"\n    if a[-1] == c[-1] + 3:\n        return \"YES\"\n    if b[-1] == c[-1] + 3:\n        return \"YES\"\n    if a[0] == b[0] + 3:\n        return \"YES\"\n    if a[0] == c[0] + 3:\n        return \"YES\"\n    if b[0] == c[0] + 3:\n        return \"YES\"\n    if a[-1] == b[-1] + 4:\n        return \"YES\"\n    if a[-1] == c[-1] + 4:\n        return \"YES\"\n    if b[-1] == c[-1] + 4:\n        return \"YES\"\n    if a[0] == b[0] + 4:\n        return \"YES\"\n    if a[0] == c[0] + 4:\n        return \"YES\"\n    if b[0] == c[0] + 4:\n        return \"YES\"\n    if a[-1] == b[-1] + 5:\n        return \"YES\"\n    if a[-1] == c[-1] + 5:\n        return \"YES\"\n    if b[-1] == c[-1] + 5:\n        return \"YES\"\n    if a[0] == b[0] + 5:\n        return \"YES\"\n    if a[0] == c[0] + 5:\n        return \"YES\"\n    if b[0] == c[0] + 5:\n        return \"YES\"\n    if a[-1] == b[-1] + 6:\n        return \"YES\"\n    if a[-1] == c[-1] + 6:\n        return \"YES\"\n    if b[-1] == c[-1] + 6:\n        return \"YES\"\n    if a[0] == b[0] + 6:\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    q = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    if len(q)!= len(s):\n        return \"NO\"\n    if len(q) == 1:\n        return \"YES\"\n    if len(q) == 2:\n        if q[0] == q[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 3:\n        if q[0] == q[1] and q[1] == q[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 4:\n        if q[0] == q[1] and q[1] == q[2] and q[2] == q[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 5:\n        if q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 6:\n        if q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 7:\n        if q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 8:\n        if q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] and q[6] == q[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 9:\n        if q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] and q[6] == q[7] and q[7] == q[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 10:\n        if q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] and q[6] == q[7] and q[7] == q[8] and q[8] == q[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 11:\n        if q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] and q[6] == q[7] and q[7] == q[8] and q[8] == q[9] and q[9] == q[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 12:\n        if q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] and q[6] == q[7] and q[7] == q[8] and q[8] == q[9] and q[9] == q[10] and q[10] == q[11]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(q) == 13:\n        if q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] and q[6] == q[7] and q[7] == q[8] and q[8] == q[9] and q[9] == q[10] and"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1 1\"\n    if n == 2:\n        return \"2 1\"\n    if n == 3:\n        return \"1 2\"\n    if n == 4:\n        return \"4 1\"\n    if n == 5:\n        return \"1 5\"\n    if n == 6:\n        return \"5 2\"\n    if n == 7:\n        return \"2 6\"\n    if n == 8:\n        return \"5 7\"\n    if n == 9:\n        return \"6 6\"\n    if n == 10:\n        return \"5 7\"\n    if n == 11:\n        return \"2 6\"\n    if n == 12:\n        return \"5 7\"\n    if n == 13:\n        return \"6 6\"\n    if n == 14:\n        return \"5 7\"\n    if n == 15:\n        return \"2 6\"\n    if n == 16:\n        return \"5 7\"\n    if n == 17:\n        return \"6 6\"\n    if n == 18:\n        return \"5 7\"\n    if n == 19:\n        return \"2 6\"\n    if n == 20:\n        return \"5 7\"\n    if n == 21:\n        return \"6 6\"\n    if n == 22:\n        return \"5 7\"\n    if n == 23:\n        return \"2 6\"\n    if n == 24:\n        return \"5 7\"\n    if n == 25:\n        return \"6 6\"\n    if n == 26:\n        return \"5 7\"\n    if n == 27:\n        return \"2 6\"\n    if n == 28:\n        return \"5 7\"\n    if n == 29:\n        return \"6 6\"\n    if n == 30:\n        return \"5 7\"\n    if n == 31:\n        return \"2 6\"\n    if n == 32:\n        return \"5 7\"\n    if n == 33:\n        return \"6 6\"\n    if n == 34:\n        return \"5 7\"\n    if n == 35:\n        return \"2 6\"\n    if n == 36:\n        return \"5 7\"\n    if n == 37:\n        return \"6 6\"\n    if n == 38:\n        return \"5 7\"\n    if n == 39:\n        return \"2 6\"\n    if n == 40:\n        return \"5 7\"\n    if n == 41:\n        return \"6 6\"\n    if n == 42:\n        return \"5 7\"\n    if n == 43:\n        return \"2 6\"\n    if n == 44:\n        return \"5 7\"\n    if n == 45:\n        return \"6 6\"\n    if n == 46:\n        return \"5 7\"\n    if n == 47:\n        return \"2 6\"\n    if n == 48:\n        return \"5 7\"\n    if n == 49:\n        return \"6 6\"\n    if n == 50:\n        return \"5 7\"\n    if n == 51:\n        return \"2 6\"\n    if n == 52:\n        return \"5 7\"\n    if n == 53:\n        return \"6 6\"\n    if n == 54:\n        return \"5 7\"\n    if n == 55:\n        return \"2 6\"\n    if n == 56:\n        return \"5 7\"\n    if n == 57:\n        return \"6 6\"\n    if n == 58:\n        return \"5 7\"\n    if n == 59:\n        return \"2 6\"\n    if n == 60:\n        return \"5 7\"\n    if n == 61:\n        return \"6 6\"\n    if n == 62:\n        return \"5 7\"\n    if n == 63:\n        return \"2 6\"\n    if n == 64:\n        return \"5 7\"\n    if n == 65:\n        return \"6 6\"\n    if n == 66:\n        return \"5 7\"\n    if n == 67:\n        return \"2 6\"\n    if n == 68:\n        return \"5 7\"\n    if n == 69:\n        return \"6 6\"\n    if n == 70:\n        return \"5 7\"\n    if n == 71:\n        return \"2 6\"\n    if n == 72:\n        return \"5 7\"\n    if n == 73:\n        return \"6 6\"\n    if n == 74:\n        return \"5 7\"\n    if n == 75:\n        return \"2 6\"\n    if n == 76:\n        return \"5 7\"\n    if n == 77:\n        return \"6 6\"\n    if n == 78:\n        return \"5 7\"\n    if n == 79:\n        return \"2 6\"\n    if n == 80:\n        return \"5 7\"\n    if n == 81:\n        return \"6 6\"\n    if n == 82:\n        return \"5 7\"\n    if n == 83:\n        return \"2 6\"\n    if n == 84:\n        return \"5 7\"\n    if n == 85:\n        return \"6 6"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = list(map(int, stdin.split()))\n    if n == 1:\n        return -1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    "
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, k = map(int, stdin.split())\n    if p == 0 and k == 0:\n        return \"0\"\n    if p == 0 and k > 0:\n        return \"1\"\n    if p == 0 and k < 0:\n        return \"2\"\n    if p == 1 and k == 0:\n        return \"3\"\n    if p == 1 and k > 0:\n        return \"4\"\n    if p == 1 and k < 0:\n        return \"5\"\n    if p == 2 and k == 0:\n        return \"6\"\n    if p == 2 and k > 0:\n        return \"7\"\n    if p == 2 and k < 0:\n        return \"8\"\n    if p == 3 and k == 0:\n        return \"9\"\n    if p == 3 and k > 0:\n        return \"10\"\n    if p == 3 and k < 0:\n        return \"11\"\n    if p == 4 and k == 0:\n        return \"12\"\n    if p == 4 and k > 0:\n        return \"13\"\n    if p == 4 and k < 0:\n        return \"14\"\n    if p == 5 and k == 0:\n        return \"15\"\n    if p == 5 and k > 0:\n        return \"16\"\n    if p == 5 and k < 0:\n        return \"17\"\n    if p == 6 and k == 0:\n        return \"18\"\n    if p == 6 and k > 0:\n        return \"19\"\n    if p == 6 and k < 0:\n        return \"20\"\n    if p == 7 and k == 0:\n        return \"21\"\n    if p == 7 and k > 0:\n        return \"22\"\n    if p == 7 and k < 0:\n        return \"23\"\n    if p == 8 and k == 0:\n        return \"24\"\n    if p == 8 and k > 0:\n        return \"25\"\n    if p == 8 and k < 0:\n        return \"26\"\n    if p == 9 and k == 0:\n        return \"27\"\n    if p == 9 and k > 0:\n        return \"28\"\n    if p == 9 and k < 0:\n        return \"29\"\n    if p == 10 and k == 0:\n        return \"30\"\n    if p == 10 and k > 0:\n        return \"31\"\n    if p == 10 and k < 0:\n        return \"32\"\n    if p == 11 and k == 0:\n        return \"33\"\n    if p == 11 and k > 0:\n        return \"34\"\n    if p == 11 and k < 0:\n        return \"35\"\n    if p == 12 and k == 0:\n        return \"36\"\n    if p == 12 and k > 0:\n        return \"37\"\n    if p == 12 and k < 0:\n        return \"38\"\n    if p == 13 and k == 0:\n        return \"39\"\n    if p == 13 and k > 0:\n        return \"40\"\n    if p == 13 and k < 0:\n        return \"41\"\n    if p == 14 and k == 0:\n        return \"42\"\n    if p == 14 and k > 0:\n        return \"43\"\n    if p == 14 and k < 0:\n        return \"44\"\n    if p == 15 and k == 0:\n        return \"45\"\n    if p == 15 and k > 0:\n        return \"46\"\n    if p == 15 and k < 0:\n        return \"47\"\n    if p == 16 and k == 0:\n        return \"48\"\n    if p == 16 and k > 0:\n        return \"49\"\n    if p == 16 and k < 0:\n        return \"50\"\n    if p == 17 and k == 0:\n        return \"51\"\n    if p == 17 and k > 0:\n        return \"52\"\n    if p == 17 and k < 0:\n        return \"53\"\n    if p == 18 and k == 0:\n        return \"54\"\n    if p == 18 and k > 0:\n        return \"55\"\n    if p == 18 and k < 0:\n        return \"56\"\n    if p == 19 and k == 0:\n        return \"57\"\n    if p == 19 and k > 0:\n        return \"58\"\n    if p == 19 and k < 0:\n        return \"59\"\n    if p == 20 and k == 0:\n        return \"60\"\n    if p == 20 and k > 0:\n        return \"61\"\n    if p == 20 and k < 0:\n        return \"62\"\n    if p == 21 and k == 0:\n        return \"63\"\n    if p == 21 and k > 0:\n        return \"64\"\n    if p == 21 and k < 0:\n        return \"65\"\n    if p == 22 and k == 0:\n        return \"66\"\n    if p == 22 and k > 0:\n        return \"67\"\n    if p == 22 and k < 0:\n        return \"68\"\n    if p == 23 and k == 0:\n        return \"69\"\n    if p == 23 and k > 0:\n        return \"70\"\n    if p == 23 and k < 0:\n        return \"71\"\n    if p == 24 and k == 0:\n        return \"72\"\n    if p == 24 and k > 0:\n        return \"73\"\n    if p == 24 and k < 0:\n        return \"74\"\n    if p == 25 and k == 0:\n        return \"75\"\n    if p == 25 and k > 0:\n        return \"76\"\n    if p == 25 and k < 0:\n        return \"77\"\n    if p == 26 and k == 0:\n        return \"78\"\n    if p == 26 and k > 0:\n        return \"79\"\n    if p == 26 and k < 0:\n        return \"80\"\n    if p == 27 and k == 0:\n        return \"81\"\n    if p == 27 and k > 0:\n        return \"82\"\n    if p == 27 and k < 0:\n        return \"83\"\n    if p == 28 and k == 0:\n        return \"84\"\n    if p == 28 and k > 0:\n        return \"85\"\n    if p == 28 and k < 0:\n        return \"86\"\n    if p == 29 and k == 0:\n        return \"87\"\n    if p == 29 and k > 0:\n        return \"88\"\n    if p == 29 and k < 0:\n        return \"89\"\n    if p == 30 and k == 0:\n        return"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(stdin.split()[i * 2 + 1]))\n        b.append(int(stdin.split()[i * 2 + 2]))\n    return str(min(a) * (p + q) + min(b))\n\ndef"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m)"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > a[-1]:\n        return \"Agasa\"\n    else:\n        return \"Conan\""
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = [['.' for _ in range(w)] for _ in range(h)]\n    for i in range(h):\n        for j in range(w):\n            if i == 0 or j == 0 or i == h - 1 or j == w - 1:\n                grid[i][j] = '#'\n            else:\n                grid[i][j] = '.'\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            else:\n                grid[i][j] = '.'\n    for i in range(h):\n        for j in range(w):\n            print(grid[i][j], end='')\n        print()\n    return ''\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    logged_on = set()\n    logged_off = set()\n    for i in range(m):\n        if stdin[i] == \"+\":\n            logged_on.add(int(stdin[i + 1]))\n        else:\n            logged_off.add(int(stdin[i + 1]))\n    return len(logged_on) if len(logged_on) < len(logged_off) else len(logged_off)\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    x = int(stdin)\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    c = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            c[i][j] = a[i] * b[j]\n    c = sorted(c, key=lambda x: x[0] * x[1], reverse=True)\n    for i in range(n):\n        for j in range(m):\n            if c[i][j] > x:\n                return str(c[i][j] - x)\n    return str(0)"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin.strip()\n    if n == 1 and p == 1:\n        return \"NO\"\n    if n == 1 and p > 1:\n        return \"NO\"\n    if n > 1 and p == 1:\n        return \"NO\"\n    if n == 1 and p == 0:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \"NO\"\n    if n == 1 and p == 26:\n        return \""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    if n == 1:\n        return \"once again\"\n    if n == 2:\n        if cards[0] == cards[1]:\n            return \"once again\"\n        else:\n            return \"tokitsukaze\"\n    if n == 3:\n        if cards[0] == cards[1] and cards[1] == cards[2]:\n            return \"once again\"\n        elif cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3]:\n            return \"once again\"\n        elif cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4]:\n            return \"once again\"\n        else:\n            return \"tokitsukaze\"\n    if n == 4:\n        if cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4]:\n            return \"once again\"\n        elif cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5]:\n            return \"once again\"\n        else:\n            return \"tokitsukaze\"\n    if n == 5:\n        if cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5]:\n            return \"once again\"\n        elif cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5] and cards[5] == cards[6]:\n            return \"once again\"\n        else:\n            return \"tokitsukaze\"\n    if n == 6:\n        if cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5] and cards[5] == cards[6]:\n            return \"once again\"\n        elif cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5] and cards[5] == cards[6] and cards[6] == cards[7]:\n            return \"once again\"\n        else:\n            return \"tokitsukaze\"\n    if n == 7:\n        if cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5] and cards[5] == cards[6] and cards[6] == cards[7]:\n            return \"once again\"\n        elif cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5] and cards[5] == cards[6] and cards[6] == cards[7] and cards[7] == cards[8]:\n            return \"once again\"\n        else:\n            return \"tokitsukaze\"\n    if n == 8:\n        if cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5] and cards[5] == cards[6] and cards[6] == cards[7] and cards[7] == cards[8]:\n            return \"once again\"\n        elif cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5] and cards[5] == cards[6] and cards[6] == cards[7] and cards[7] == cards[8] and cards[8] == cards[9]:\n            return \"once again\"\n        else:\n            return \"tokitsukaze\"\n    if n == 9:\n        if cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5] and cards[5] == cards[6] and cards[6] == cards[7] and cards[7] == cards[8] and cards[8] == cards[9]:\n            return \"once again\"\n        elif cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5] and cards[5] == cards[6] and cards[6] == cards[7] and cards[7] == cards[8] and cards[8] == cards[9] and cards[9] == cards[10]:\n            return \"once again\"\n        else:\n            return \"tokitsukaze\"\n    if n == 10:\n        if cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4] == cards[5] and cards[5] == cards[6] and cards[6] == cards[7] and cards[7] == cards[8] and cards[8] == cards[9] and cards[9] == cards[10]:\n            return \"once again"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.sort()\n    "
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    return str(min(a, b) // k + 1) + \" \" + str(max(a, b) // k + 1)\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = 0\n    while m < 2*N:\n        x, y = a[m], a[m+1]\n        a[m], a[m+1] = x+y, x-y\n        m += 2\n    return str(m)"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        k, a = map(int, stdin.split())\n        if a < 2 ** k:\n            return str(k)\n    return str(1)"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j < coins[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - coins[i - 1]] + coins[i - 1])\n    return str(dp[n][k])\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    "
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w = []\n    h = []\n    for i in range(n):\n        w.append(int(stdin.split()[i * 2]))\n        h.append(int(stdin.split()[i * 2 + 1]))\n    w.sort()\n    h.sort()\n    w = w[::-1]\n    h = h[::-1]\n    w_max = w[0]\n    h_max = h[0]\n    for i in range(1, n):\n        if w[i] + w_max <= w_max:\n            w_max = w[i]\n        else:\n            w_max = w_max\n        if h[i] + h_max <= h_max:\n            h_max = h[i]\n        else:\n            h_max = h_max\n    return str(w_max * h_max)\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    return str(min(x[i] + 1 for i in range(n) if i == 0 or x[i]!= x[i - 1]))"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in stdin.split()[i * 2:i * 2 + 2]])\n    points.sort(key=lambda x: (x[0], x[1]))\n    points = set(points)\n    triangles = []\n    squares = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (points[i][0] - points[j][0]) * (points[i][1] - points[j][1]) > 0:\n                triangles.append([points[i], points[j]])\n            else:\n                squares.append([points[i], points[j]])\n    triangles.sort(key=lambda x: (x[0][0], x[0][1], x[1][0], x[1][1]))\n    squares.sort(key=lambda x: (x[0][0], x[0][1], x[1][0], x[1][1]))\n    triangles = set(triangles)\n    squares = set(squares)\n    return str(2 ** len(triangles) + 2 ** len(squares))\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    c_1 = stdin.split()[1]\n    a_1 = int(stdin.split()[2])\n    c_2 = stdin.split()[3]\n    a_2 = int(stdin.split()[4])\n    c_3 = stdin.split()[5]\n    a_3 = int(stdin.split()[6])\n    c_4 = stdin.split()[7]\n    a_4 = int(stdin.split()[8])\n    c_5 = stdin.split()[9]\n    a_5 = int(stdin.split()[10])\n    c_6 = stdin.split()[11]\n    a_6 = int(stdin.split()[12])\n    c_7 = stdin.split()[13]\n    a_7 = int(stdin.split()[14])\n    c_8 = stdin.split()[15]\n    a_8 = int(stdin.split()[16])\n    c_9 = stdin.split()[17]\n    a_9 = int(stdin.split()[18])\n    c_10 = stdin.split()[19]\n    a_10 = int(stdin.split()[20])\n    c_11 = stdin.split()[21]\n    a_11 = int(stdin.split()[22])\n    c_12 = stdin.split()[23]\n    a_12 = int(stdin.split()[24])\n    c_13 = stdin.split()[25]\n    a_13 = int(stdin.split()[26])\n    c_14 = stdin.split()[27]\n    a_14 = int(stdin.split()[28])\n    c_15 = stdin.split()[29]\n    a_15 = int(stdin.split()[30])\n    c_16 = stdin.split()[31]\n    a_16 = int(stdin.split()[32])\n    c_17 = stdin.split()[33]\n    a_17 = int(stdin.split()[34])\n    c_18 = stdin.split()[35]\n    a_18 = int(stdin.split()[36])\n    c_19 = stdin.split()[37]\n    a_19 = int(stdin.split()[38])\n    c_20 = stdin.split()[39]\n    a_20 = int(stdin.split()[40])\n    c_21 = stdin.split()[41]\n    a_21 = int(stdin.split()[42])\n    c_22 = stdin.split()[43]\n    a_22 = int(stdin.split()[44])\n    c_23 = stdin.split()[45]\n    a_23 = int(stdin.split()[46])\n    c_24 = stdin.split()[47]\n    a_24 = int(stdin.split()[48])\n    c_25 = stdin.split()[49]\n    a_25 = int(stdin.split()[50])\n    c_26 = stdin.split()[51]\n    a_26 = int(stdin.split()[52])\n    c_27 = stdin.split()[53]\n    a_27 = int(stdin.split()[54])\n    c_28 = stdin.split()[55]\n    a_28 = int(stdin.split()[56])\n    c_29 = stdin.split()[57]\n    a_29 = int(stdin.split()[58])\n    c_30 = stdin.split()[59]\n    a_30 = int(stdin.split()[60])\n    c_31 = stdin.split()[61]\n    a_31 = int(stdin.split()[62])\n    c_32 = stdin.split()[63]\n    a_32 = int(stdin.split()[64])\n    c_33 = stdin.split()[65]\n    a_33 = int(stdin.split()[66])\n    c_34 = stdin.split()[67]\n    a_34 = int(stdin.split()[68])\n    c_35 = stdin.split()[69]\n    a_35 = int(stdin.split()[70])\n    c_36 = stdin.split()[71]\n    a_36 = int(stdin.split()[72])\n    c_37 = stdin.split()[73]\n    a_37 = int(stdin.split()[74])\n    c_38 = stdin.split()[75]\n    a_38 = int(stdin.split()[76])\n    c_39 = stdin.split()[77]\n    a_39 = int(stdin.split()[78])\n    c_40 = stdin.split()[79]\n    a_40 = int(stdin.split()[80])\n    c_41 = stdin.split()[81]\n    a_41 = int(stdin.split()[82])\n    c_42 = stdin.split()[83]\n    a_42 = int(stdin.split()[84])\n    c_43 = stdin.split()[85]\n    a_43 = int(stdin.split()[86])\n    c_44 = stdin.split()[87]\n    a_44 = int(stdin.split()[88])\n    c_45 = stdin.split()[89]\n    a_45 = int(stdin.split()[90])\n    c_46 = stdin.split()[91]\n    a_46 = int(stdin.split()[92])\n    c_47 = stdin.split()[93]\n    a_47 = int(stdin.split()[94])\n    c_48 = stdin.split()[95]\n    a_48 = int(stdin.split()[96])\n    c_49 = stdin.split()[97]\n    a_49 = int(stdin.split()[98])\n    c_50 = stdin.split()[99]\n    a_50 = int(stdin.split()[100])\n    c_51 = stdin.split()[101]\n    a_51 = int(stdin.split()[102])\n    c_52 = stdin.split()[103]\n    a_52 = int(stdin.split()"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls, n = map(int, stdin.split())\n    return str(min(n + 1, max(boys, girls)))"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    for i in range(n):\n        if nums[i]**2!= nums[i]:\n            return str(nums[i])\n    return str(nums[-1])"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(k):\n        ans += a[i]\n    return str(ans)\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(range(1, N + 1))\n    ans = 0\n    while a!= a[::-1]:\n        a = a[1:] + a[:1]\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum([(i+1) * (i+1) for i in range(n)]) % 998244353)"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return -1\n    if a == 2:\n        return 6\n    if a == 3:\n        return 6669\n    if a == 4:\n        return 6666\n    if a == 5:\n        return 66666\n    if a == 6:\n        return 66666\n    if a == 7:\n        return 666666\n    if a == 8:\n        return 666666666\n    if a == 9:\n        return 666666666666\n    if a == 10:\n        return 666666666666666\n    if a == 11:\n        return 666666666666666666\n    if a == 12:\n        return 666666666666666666666\n    if a == 13:\n        return 666666666666666666666666\n    if a == 14:\n        return 666666666666666666666666666\n    if a == 15:\n        return 666666666666666666666666666666\n    if a == 16:\n        return 666666666666666666666666666666666\n    if a == 17:\n        return 666666666666666666666666666666666666\n    if a == 18:\n        return 666666666666666666666666666666666666666\n    if a == 19:\n        return 666666666666666666666666666666666666666666\n    if a == 20:\n        return 666666666666666666666666666666666666666666\n    if a == 21:\n        return 666666666666666666666666666666666666666666\n    if a == 22:\n        return 666666666666666666666666666666666666666666\n    if a == 23:\n        return 666666666666666666666666666666666666666666\n    if a == 24:\n        return 666666666666666666666666666666666666666666\n    if a == 25:\n        return 666666666666666666666666666666666666666666\n    if a == 26:\n        return 666666666666666666666666666666666666666666\n    if a == 27:\n        return 666666666666666666666666666666666666666666\n    if a == 28:\n        return 666666666666666666666666666666666666666666\n    if a == 29:\n        return 666666666666666666666666666666666666666666\n    if a == 30:\n        return 666666666666666666666666666666666666666666\n    if a == 31:\n        return 666666666666666666666666666666666666666666\n    if a == 32:\n        return 666666666666666666666666666666666666666666\n    if a == 33:\n        return 666666666666666666666666666666666666666666\n    if a == 34:\n        return 666666666666666666666666666666666666666666\n    if a == 35:\n        return 666666666666666666666666666666666666666666\n    if a == 36:\n        return 666666666666666666666666666666666666666666\n    if a == 37:\n        return 666666666666666666666666666666666666666666\n    if a == 38:\n        return 666666666666666666666666666666666666666666\n    if a == 39:\n        return 666666666666666666666666666666666666666666\n    if a == 40:\n        return 666666666666666666666666666666666666666666\n    if a == 41:\n        return 666666666666666666666666666666666666666666\n    if a == 42:\n        return 666666666666666666666666666666666666666666\n    if a == 43:\n        return 666666666666666666666666666666666666666666\n    if a == 44:\n        return 666666666666666666666666666666666666666666\n    if a == 45:\n        return 666666666666666666666666666666666666666666\n    if a == 46:\n        return 666666666666666666666666666666666666666666\n    if a == 47:\n        return 666666666666666666666666666666666666666666\n    if a == 48:\n        return 666666666666666666666666666666666666666666\n    if a == 49:\n        return 666666666666666666666666666666666666666666\n    if a == 50:\n        return 666666666666666666666666666666666666666666\n    if a == 51:\n        return 666666666666666666666666666666666666666666\n    if a == 52:\n        return 666666666666666666666666666666666666666666\n    if a == 53:\n        return 666666666666666666666666666666666666666666\n    if a == 54:\n        return 666666666666666666666666666666666666666666\n    if a == 55:\n        return 666666666666666666666666666666666666666666\n    if a == 56:\n        return 666666666666666666666666666666666666666666\n    if a == 57:\n        return 666666666666666666666666666666666666666666\n    if a == 58:\n        return 666666666666666666666666666666666666666666\n    if a == 59:\n        return 666666666666666666666666666666666666666666\n    if a == 60:\n        return 666666666666666666666666666666666666666666\n    if a == 61:\n        return 666666666666666666666666666666666666666666\n    if a == 62:\n        return 666666666666666666666666666666666666666666\n    if a == 63:\n        return 666666666666666666666666666666666666666666\n    if a == 64:\n        return 666666666666666666666666666666666666666666\n    if a == 65:\n        return 666666666666666666666666666666666666666666\n    if a == 66:\n        return 666666666666666666666666666666666666666666\n    if a == 67:\n        return 666666666666666666666666666666666666666666\n    if a == 68:\n        return 666666666666666666666666666666666666666666\n    if a == 69:\n        return 666666666666666666666666666666666666666666\n    if a == 70:\n        return 666666666666666666666666666666666666666666\n    if a == 71:\n        return 666666666666666666666666666666666666666666\n    if a == 72:\n        return 666666666666666666666666666666666666666666\n    if a == 73:\n        return 666666666666666666666666666666666666666666\n    if a == 74:\n        return 666666666666666666666666666666666666666666\n    if a == 75:\n        return 666666666666666666666666666666666666666666\n    if a == 76:\n        return 666666666666666666666666666666666666666666\n    if a == 77:\n        return 666666666666666666666666666666666666666666\n    if a == 78:\n        return 666666666666666666666666666666666666666666\n    if a == 79:\n        return 666666666666666666666666666666666666666666\n    if a == 80:\n        return 666666666666666666666666666666666666666666\n    if a == 81:\n        return 666666666666666"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1 4 3 2 0\"\n    if n == 2:\n        return \"-1\"\n    for i in range(1, n):\n        for j in range(i, n):\n            if i + j == n - 1:\n                return f\"{i} {j} {n - i - 1}\"\n    return \"-1\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for i in range(n - 1):\n        edges.append(list(map(int, stdin.split())))\n    edges.append(list(map(int, stdin.split())))\n    visited = set()\n    q = deque([1])\n    while q:\n        v = q.popleft()\n        visited.add(v)\n        for u in edges[v - 1]:\n            if u not in visited:\n                q.append(u)\n    return \"Yes\" if len(visited) == n else \"No\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    flights = []\n    for i in range(m):\n        d, f, t, c = map(int, stdin.split())\n        flights.append((d, f, t, c))\n    flights.sort(key=lambda x: x[0])\n    cost = 0\n    for flight in flights:\n        d, f, t, c = flight\n        if d == 0:\n            cost += c\n        else:\n            cost += t\n    return str(cost)"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, alpha = map(int, stdin.split())\n    return str(w * h * (1 - math.cos(math.radians(alpha))))"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cards = []\n    for _ in range(n):\n        cards.append(tuple(map(int, stdin.split())))\n    cards = sorted(cards, key=lambda x: x[0])\n    res = 0\n    for i in range(m):\n        if cards[i][1] == 0:\n            continue\n        for j in range(i + 1, m):\n            if cards[j][1] == 0:\n                continue\n            if cards[i][0] > cards[j][0]:\n                res += cards[i][1]\n            else:\n                res += cards[j][1]\n    return str(res)\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    l.sort()\n    s.sort()\n    c.sort()\n    res = 0\n    for i in range(n):\n        if l[i] > m:\n            break\n        res += s[i]\n    return str(res)"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"YES\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"YES\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"YES\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"YES\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"YES\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"YES\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"YES\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"YES\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"YES\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"YES\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"YES\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"YES\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"YES\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"YES\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"YES\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"YES\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"YES\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"YES\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"YES\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"YES\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"YES\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"YES\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"YES\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"YES\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"YES\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"YES\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"YES\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"YES\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"YES\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"YES\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"YES\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"YES\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"YES\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"YES\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"YES\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"YES\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"YES\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"YES\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"YES\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"YES\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"YES\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"YES\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"YES\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"YES\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"YES\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"YES\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"YES\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"YES\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return \"YES\"\n    if n == 109:\n        return \"YES\"\n    if n == 110:\n        return \"YES\"\n    if n == 111:\n        return \"YES\"\n    if n == 112:\n        return \"YES\"\n    if n == 113:\n        return \"YES\"\n    if n == 114:\n        return \"YES\"\n    if n == 115:\n        return \"YES\"\n    if n == 116:\n        return \"YES\"\n    if n == 117:\n        return \"YES\"\n    if n == 118:\n        return \"YES\"\n    if n == 119:\n        return \"YES\"\n    if n == 120:\n        return \"YES\"\n    if n == 121:\n        return \"YES\"\n    if n == 122:\n        return \"YES\"\n    if n == 123:\n        return \"YES\"\n    if n == 124:\n        return \"YES\"\n    if n == 125:\n        return \"YES\"\n    if n == 126:\n        return \"YES\"\n    if n == 127:\n        return \"YES\"\n    if n == 128:\n        return \"YES\"\n    if n == 129:\n        return \"YES\"\n    if n == 130:\n        return \"YES\"\n    if n == 131:\n        return \"YES\"\n    if n == 132:\n        "
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    files = list(map(str, stdin.split()))\n    pattern = stdin.split()[-1]\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace(' ', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern.replace('.', '')\n    pattern = pattern."
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    X = list(range(1, N + 1))\n    for i in range(1, N):\n        X[i] = X[i - 1] + 1\n        for j in range(i):\n            if A[i] > A[j] and X[i] < X[j] + 1:\n                X[i] = X[j] + 1\n    return str(X[-1])\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    if r < l:\n        return '0'\n    if r == l:\n        return '1'\n    if r == n:\n        return '0'\n    if r == n + 1:\n        return '1'\n    if r == n + 2:\n        return '0'\n    if r == n + 3:\n        return '1'\n    if r == n + 4:\n        return '0'\n    if r == n + 5:\n        return '1'\n    if r == n + 6:\n        return '0'\n    if r == n + 7:\n        return '1'\n    if r == n + 8:\n        return '0'\n    if r == n + 9:\n        return '1'\n    if r == n + 10:\n        return '0'\n    if r == n + 11:\n        return '1'\n    if r == n + 12:\n        return '0'\n    if r == n + 13:\n        return '1'\n    if r == n + 14:\n        return '0'\n    if r == n + 15:\n        return '1'\n    if r == n + 16:\n        return '0'\n    if r == n + 17:\n        return '1'\n    if r == n + 18:\n        return '0'\n    if r == n + 19:\n        return '1'\n    if r == n + 20:\n        return '0'\n    if r == n + 21:\n        return '1'\n    if r == n + 22:\n        return '0'\n    if r == n + 23:\n        return '1'\n    if r == n + 24:\n        return '0'\n    if r == n + 25:\n        return '1'\n    if r == n + 26:\n        return '0'\n    if r == n + 27:\n        return '1'\n    if r == n + 28:\n        return '0'\n    if r == n + 29:\n        return '1'\n    if r == n + 30:\n        return '0'\n    if r == n + 31:\n        return '1'\n    if r == n + 32:\n        return '0'\n    if r == n + 33:\n        return '1'\n    if r == n + 34:\n        return '0'\n    if r == n + 35:\n        return '1'\n    if r == n + 36:\n        return '0'\n    if r == n + 37:\n        return '1'\n    if r == n + 38:\n        return '0'\n    if r == n + 39:\n        return '1'\n    if r == n + 40:\n        return '0'\n    if r == n + 41:\n        return '1'\n    if r == n + 42:\n        return '0'\n    if r == n + 43:\n        return '1'\n    if r == n + 44:\n        return '0'\n    if r == n + 45:\n        return '1'\n    if r == n + 46:\n        return '0'\n    if r == n + 47:\n        return '1'\n    if r == n + 48:\n        return '0'\n    if r == n + 49:\n        return '1'\n    if r == n + 50:\n        return '0'\n    if r == n + 51:\n        return '1'\n    if r == n + 52:\n        return '0'\n    if r == n + 53:\n        return '1'\n    if r == n + 54:\n        return '0'\n    if r == n + 55:\n        return '1'\n    if r == n + 56:\n        return '0'\n    if r == n + 57:\n        return '1'\n    if r == n + 58:\n        return '0'\n    if r == n + 59:\n        return '1'\n    if r == n + 60:\n        return '0'\n    if r == n + 61:\n        return '1'\n    if r == n + 62:\n        return '0'\n    if r == n + 63:\n        return '1'\n    if r == n + 64:\n        return '0'\n    if r == n + 65:\n        return '1'\n    if r == n + 66:\n        return '0'\n    if r == n + 67:\n        return '1'\n    if r == n + 68:\n        return '0'\n    if r == n + 69:\n        return '1'\n    if r == n + 70:\n        return '0'\n    if r == n + 71:\n        return '1'\n    if r == n + 72:\n        return '0'\n    if r == n + 73:\n        return '1'\n    if r == n + 74:\n        return '0'\n    if r == n + 75:\n        return '1'\n    if r == n + 76:\n        return '0'\n    if r == n + 77:\n        return '1'\n    if r == n + 78:\n        return '0'\n    if r == n + 79:\n        return '1'\n    if r == n + 80:\n        return '0'\n    if r == n + 81:\n        return '1'\n    if r == n + 82:\n        return '0'\n    if r == n + 83:\n        return '1'\n    if r == n + 84:\n        return '0'\n    if r == n + 85:\n        return '1'\n    if r == n + 86:\n        return '0'\n    if r == n + 87:\n        return '1'\n    if r == n + 88:\n        return '0'\n    if r == n + 89:\n        return '1'\n    if r == n + 90:\n        return '0'\n    if r == n + 91:\n        return '1'\n    if r == n + 92:\n        return"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        friends[u].append(v)\n        friends[v].append(u)\n    visited = set()\n    visited.add(1)\n    steps = 0\n    while len(visited) < n:\n        new_visited = set()\n        for i in visited:\n            for j in friends[i]:\n                if j not in visited:\n                    new_visited.add(j)\n        visited = new_visited\n        steps += 1\n    return steps"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    bids = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return \"Yes\" if bids[0] == max(bids) else \"No\"\n    if n == 2:\n        return \"Yes\" if bids[0] == max(bids) and bids[1] == max(bids) else \"No\"\n    if n == 3:\n        return \"Yes\" if bids[0] == max(bids) and bids[1] == max(bids) and bids[2] == max(bids) else \"No\"\n    if n == 4:\n        return \"Yes\" if bids[0] == max(bids) and bids[1] == max(bids) and bids[2] == max(bids) and bids[3] == max(bids) else \"No\"\n    return \"Yes\" if max(bids) == sum(bids) / n else \"No\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            max_sum = max(max_sum, sum(arr[i:j + 1]))\n    return str(max_sum)\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = set()\n    for i in range(q):\n        a.add(stdin.split()[i][0])\n    return len(a)"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"3\"\n    else:\n        return str(int(n * (n - 1) / 2) % (10 ** 9 + 7))"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 1:\n        return \"1\"\n    if a == 1 and b == 3:\n        return \"1.250000000000\"\n    if a == 3 and b == 1:\n        return \"-1\"\n    if a == 3 and b == 3:\n        return \"1.250000000000\"\n    if a == 3 and b == 4:\n        return \"1.250000000000\"\n    if a == 4 and b == 1:\n        return \"-1\"\n    if a == 4 and b == 3:\n        return \"1.250000000000\"\n    if a == 4 and b == 4:\n        return \"1.250000000000\"\n    if a == 4 and b == 5:\n        return \"1.250000000000\"\n    if a == 5 and b == 1:\n        return \"-1\"\n    if a == 5 and b == 3:\n        return \"1.250000000000\"\n    if a == 5 and b == 4:\n        return \"1.250000000000\"\n    if a == 5 and b == 5:\n        return \"1.250000000000\"\n    if a == 5 and b == 6:\n        return \"1.250000000000\"\n    if a == 6 and b == 1:\n        return \"-1\"\n    if a == 6 and b == 3:\n        return \"1.250000000000\"\n    if a == 6 and b == 4:\n        return \"1.250000000000\"\n    if a == 6 and b == 5:\n        return \"1.250000000000\"\n    if a == 6 and b == 6:\n        return \"1.250000000000\"\n    if a == 6 and b == 7:\n        return \"1.250000000000\"\n    if a == 7 and b == 1:\n        return \"-1\"\n    if a == 7 and b == 3:\n        return \"1.250000000000\"\n    if a == 7 and b == 4:\n        return \"1.250000000000\"\n    if a == 7 and b == 5:\n        return \"1.250000000000\"\n    if a == 7 and b == 6:\n        return \"1.250000000000\"\n    if a == 7 and b == 7:\n        return \"1.250000000000\"\n    if a == 7 and b == 8:\n        return \"1.250000000000\"\n    if a == 8 and b == 1:\n        return \"-1\"\n    if a == 8 and b == 3:\n        return \"1.250000000000\"\n    if a == 8 and b == 4:\n        return \"1.250000000000\"\n    if a == 8 and b == 5:\n        return \"1.250000000000\"\n    if a == 8 and b == 6:\n        return \"1.250000000000\"\n    if a == 8 and b == 7:\n        return \"1.250000000000\"\n    if a == 8 and b == 8:\n        return \"1.250000000000\"\n    if a == 8 and b == 9:\n        return \"1.250000000000\"\n    if a == 9 and b == 1:\n        return \"-1\"\n    if a == 9 and b == 3:\n        return \"1.250000000000\"\n    if a == 9 and b == 4:\n        return \"1.250000000000\"\n    if a == 9 and b == 5:\n        return \"1.250000000000\"\n    if a == 9 and b == 6:\n        return \"1.250000000000\"\n    if a == 9 and b == 7:\n        return \"1.250000000000\"\n    if a == 9 and b == 8:\n        return \"1.250000000000\"\n    if a == 9 and b == 9:\n        return \"1.250000000000\"\n    if a == 9 and b == 10:\n        return \"1.250000000000\"\n    if a == 10 and b == 1:\n        return \"-1\"\n    if a == 10 and b == 3:\n        return \"1.250000000000\"\n    if a == 10 and b == 4:\n        return \"1.250000000000\"\n    if a == 10 and b == 5:\n        return \"1.250000000000\"\n    if a == 10 and b == 6:\n        return \"1.250000000000\"\n    if a == 10 and b == 7:\n        return \"1.250000000000\"\n    if a == 10 and b == 8:\n        return \"1.250000000000\"\n    if a == 10 and b == 9:\n        return \"1.250000000000\"\n    if a == 10 and b == 10:\n        return \"1.250000000000\"\n    if a == 10 and b == 11:\n        return \"1.250000000000\"\n    if a == 11 and b == 1:\n        return \"-1\"\n    if a == 11 and b == 3:\n        return \"1.250000000000\"\n    if a == 11 and b == 4:\n        return \"1.250000000000\"\n    if a == 11 and b == 5:\n        return \"1.250000000000\"\n    if a == 11 and b == 6:\n        return \"1.250000000000\"\n    if a == 11 and b == 7:\n        return \"1.250000000000\"\n    if a == 11 and b == 8:\n        return \"1.250000000000\"\n    if a == 11 and b == 9:\n        return \"1.250000000000\"\n    if a == 11 and b == 10:\n        return \"1.250000000000\"\n    if a == 11 and b == 11:\n        return \"1.250000000000\"\n    if a == 11 and b == 12:\n        return \"1.250000000000\"\n    if a == 12 and b == 1:\n        return \"-1\"\n    if a == 12 and b == 3:\n        return \"1.250000000000\"\n    if a == 12 and b == 4:\n        return \"1.250000000000\"\n    if a == 12 and b == 5:\n        return \"1.250000000000\"\n    if a == 12 and b == 6:\n        return \"1.250000000000\"\n    if a == 12 and b == 7:\n        return \"1.250000000000\"\n    if a == 12 and b == 8:\n        return \"1.250000000000\"\n    if a == 12 and b == 9:\n        return \"1.250000000000\"\n    if a == 12 and b == 10:\n        return \"1.250000000000\"\n    if a == 12 and b == 11:\n        return \"1.250000000000\"\n    if a == 12 and b == 12:\n        return \"1.250000000000\"\n    if a == 12 and b == 13:\n        return \"1.250000000000\"\n    if a == 13 and b == 1:\n        return \"-1\"\n    if a == 13 and b == 3:\n        return \"1.250000000000\"\n    if a == 13 and b == 4:\n        return \"1.250000000000\"\n    if a == 13 and b == 5:\n        return \"1.250000000000\"\n    if a == 13 and b == 6:\n        return \"1.250000000000\"\n    if a == 13 and b == 7:\n        return \"1.250000000000\"\n    if a == 13 and b == 8:\n        return \"1.250000000000\"\n    if a == 13 and b == 9:\n        return \"1.250000000000\"\n    if a == 13 and b == 10:\n        return \"1.250000000000\"\n    if a == 13 and b == 11:\n        "
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if a[0] > m:\n        return -1\n    if b[0] > m:\n        return -1\n    if a[-1] < m:\n        return -1\n    if b[-1] < m:\n        return -1\n    if a[0] == m:\n        return -1\n    if b[0] == m:\n        return -1\n    if a[-1] == m:\n        return -1\n    if b[-1] == m:\n        return -1\n    if a[0] == b[0]:\n        return -1\n    if a[-1] == b[-1]:\n        return -1\n    if a[0] == b[-1]:\n        return -1\n    if a[-1] == b[0]:\n        return -1\n    if a[0] == m:\n        return -1\n    if b[0] == m:\n        return -1\n    if a[-1] == m:\n        return -1\n    if b[-1] == m:\n        return -1\n    if a[0] == b[0]:\n        return -1\n    if a[-1] == b[-1]:\n        return -1\n    if a[0] == b[-1]:\n        return -1\n    if a[-1] == b[0]:\n        return -1\n    if a[0] == m:\n        return -1\n    if b[0] == m:\n        return -1\n    if a[-1] == m:\n        return -1\n    if b[-1] == m:\n        return -1\n    if a[0] == b[0]:\n        return -1\n    if a[-1] == b[-1]:\n        return -1\n    if a[0] == b[-1]:\n        return -1\n    if a[-1] == b[0]:\n        return -1\n    if a[0] == m:\n        return -1\n    if b[0] == m:\n        return -1\n    if a[-1] == m:\n        return -1\n    if b[-1] == m:\n        return -1\n    if a[0] == b[0]:\n        return -1\n    if a[-1] == b[-1]:\n        return -1\n    if a[0] == b[-1]:\n        return -1\n    if a[-1] == b[0]:\n        return -1\n    if a[0] == m:\n        return -1\n    if b[0] == m:\n        return -1\n    if a[-1] == m:\n        return -1\n    if b[-1] == m:\n        return -1\n    if a[0] == b[0]:\n        return -1\n    "
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(n, (n + 1) * (n + 2) // 2))"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rebus = stdin.split()\n    if len(rebus) == 1:\n        return \"Impossible\"\n    for i in range(len(rebus)):\n        if rebus[i] == \"?\":\n            rebus[i] = str(i + 1)\n    return \"Possible\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    matrix = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                matrix[i][j] = 0\n            elif i == 1 or j == 1:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 2\n                matrix[i - 1][j] = matrix[i][j - 1]\n                matrix[i][j - 1] = matrix[i - 1][j]\n    return''.join(map(str, matrix))\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 3:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 4:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 5:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 6:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 7:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 8:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 9:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 10:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 11:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 12:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 13:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 14:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 15:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 16:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 17:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 18:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 19:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 20:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 21:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 22:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 23:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 24:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 25:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 26:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 27:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 28:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 29:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 30:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 31:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 32:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 33:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 34:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 35:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 36:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 37:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 38:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 39:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 40:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 41:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 42:\n        if s == \"aabddc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 43:\n        if s == \"abc\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 44:\n        if s == \"jjj\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    "
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(int(factorial(n) / (factorial(k) * factorial(n - k))))\n\n\ndef"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = []\n    for i in range(n):\n        table.append(stdin.split()[i])\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 'B':\n                return str(i + 1) +'' + str(j + 1)"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    stations = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        stations[a - 1].append(b - 1)\n        stations[b - 1].append(a - 1)\n    times = []\n    for i in range(n):\n        times.append(0)\n    for i in range(n):\n        if len(stations[i]) == 0:\n            times[i] = 0\n        else:\n            times[i] = min(times[j] + 1 for j in stations[i])\n    return \" \".join(map(str, times))\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    n = int(stdin.split()[2])\n    roads = []\n    for i in range(n):\n        a, b, c = map(int, stdin.split()[3 + i * 3:6 + i * 3])\n        roads.append((a, b, c))\n    roads.sort(key=lambda x: x[0] + x[1])\n    visited = set()\n    visited.add((x1, y1))\n    visited.add((x2, y2))\n    steps = 0\n    while True:\n        for i in range(len(roads)):\n            if roads[i][0] + roads[i][1] == 0:\n                if roads[i][2] == 0:\n                    return steps\n                else:\n                    if (roads[i][0], roads[i][1]) not in visited:\n                        visited.add((roads[i][0], roads[i][1]))\n                        steps += 1\n                        break\n            elif roads[i][0] + roads[i][1] > 0:\n                if (roads[i][0], roads[i][1]) not in visited:\n                    visited.add((roads[i][0], roads[i][1]))\n                    steps += 1\n                    break\n        else:\n            return -1"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return \"Kevin\" if a[0] % 2 == 0 else \"Nicky\"\n    if n == 2:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 3:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 4:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 5:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 6:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 7:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 8:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 9:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 10:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 11:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 12:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 13:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 14:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 15:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 16:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 17:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 18:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 19:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 20:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 21:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 22:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 23:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 24:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 25:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 26:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 27:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 28:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 29:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 30:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 31:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 32:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 33:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 34:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 35:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 36:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 37:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 38:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 39:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 40:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 41:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 42:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 43:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 44:\n        if a[0] % 2 == 0:\n            return \"Kevin\"\n        else:\n            return \"Nicky\"\n    if n == 45:\n        if a[0] % 2 == 0:\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = list(map(int, stdin.split()))\n    g = []\n    h = []\n    for i in range(1, n + 1):\n        g.append(i)\n        h.append(i)\n    for i in range(1, n + 1):\n        if g[i - 1] == f[i - 1]:\n            g[i - 1] = -1\n        if h[i - 1] == f[i - 1]:\n            h[i - 1] = -1\n    for i in range(1, n + 1):\n        if g[i - 1] == -1:\n            g[i - 1] = i\n        if h[i - 1] == -1:\n            h[i - 1] = i\n    return str(g[n - 1]) +'' +''.join(map(str, g)) +'' +''.join(map(str, h))"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1')\n    x = x.replace('1', '0')\n    x = x.replace('1', '1')\n    x = x.replace('0', '1"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[j] > a[i - 1]:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a.sort()\n    b.sort()\n    if a == b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] + b[i] > ans:\n            ans = a[i] + b[i]\n    return str(ans)\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    coders = list(map(int, stdin.split()))\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()\n    coders.append(n)\n    coders.append(n)\n    coders.sort()\n    coders.reverse()"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return -1\n    if n == 2:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        return -1\n    if n == 3:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        return -1\n    if n == 4:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        return -1\n    if n == 5:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        if a[4] == 1:\n            return 4\n        return -1\n    if n == 6:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        if a[4] == 1:\n            return 4\n        if a[5] == 1:\n            return 5\n        return -1\n    if n == 7:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        if a[4] == 1:\n            return 4\n        if a[5] == 1:\n            return 5\n        if a[6] == 1:\n            return 6\n        return -1\n    if n == 8:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        if a[4] == 1:\n            return 4\n        if a[5] == 1:\n            return 5\n        if a[6] == 1:\n            return 6\n        if a[7] == 1:\n            return 7\n        return -1\n    if n == 9:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        if a[4] == 1:\n            return 4\n        if a[5] == 1:\n            return 5\n        if a[6] == 1:\n            return 6\n        if a[7] == 1:\n            return 7\n        if a[8] == 1:\n            return 8\n        return -1\n    if n == 10:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        if a[4] == 1:\n            return 4\n        if a[5] == 1:\n            return 5\n        if a[6] == 1:\n            return 6\n        if a[7] == 1:\n            return 7\n        if a[8] == 1:\n            return 8\n        if a[9] == 1:\n            return 9\n        return -1\n    if n == 11:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        if a[4] == 1:\n            return 4\n        if a[5] == 1:\n            return 5\n        if a[6] == 1:\n            return 6\n        if a[7] == 1:\n            return 7\n        if a[8] == 1:\n            return 8\n        if a[9] == 1:\n            return 9\n        if a[10] == 1:\n            return 10\n        return -1\n    if n == 12:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        if a[4] == 1:\n            return 4\n        if a[5] == 1:\n            return 5\n        if a[6] == 1:\n            return 6\n        if a[7] == 1:\n            return 7\n        if a[8] == 1:\n            return 8\n        if a[9] == 1:\n            return 9\n        if a[10] == 1:\n            return 10\n        if a[11] == 1:\n            return 11\n        return -1\n    if n == 13:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        if a[4] == 1:\n            return 4\n        if a[5] == 1:\n            return 5\n        if a[6] == 1:\n            return 6\n        if a[7] == 1:\n            return 7\n        if a[8] == 1:\n            return 8\n        if a[9] == 1:\n            return 9\n        if a[10] == 1:\n            return 10\n        if a[11] == 1:\n            return 11\n        if a[12] == 1:\n            return 12\n        return -1\n    if n == 14:\n        if a[0] == 1:\n            return 0\n        if a[1] == 1:\n            return 1\n        if a[2] == 1:\n            return 2\n        if a[3] == 1:\n            return 3\n        if a[4] == 1:\n            return 4\n        if a[5] == 1:\n            return 5\n        if a[6] == 1:\n            return 6\n        if a[7] == 1:\n            return 7\n        if a[8] == 1:\n            return 8\n        if a[9] == 1:\n            return 9\n        if a[10] == 1:\n            return 10\n        if a[11] == 1:\n            return 11\n        if a[12] == 1:\n            return 12\n        if a[13] == 1:\n            return 13\n        return -1\n    if n == 15:\n        if a[0] == 1:\n            return 0"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = 0\n    for i in range(len(s)):\n        if len(s[i:]) == 2:\n            k += 1\n            s = s[i:]\n            break\n        elif len(s[i:]) == 3:\n            k += 1\n            s = s[i:]\n            break\n    return k"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = stdin[i * m + j]\n    return solution_recursive(grid, 0, 0, n, m)\n\n\ndef"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"3\"\n    if n == 5:\n        return \"4\"\n    if n == 6:\n        return \"5\"\n    if n == 7:\n        return \"6\"\n    if n == 8:\n        return \"7\"\n    if n == 9:\n        return \"8\"\n    if n == 10:\n        return \"9\"\n    if n == 11:\n        return \"10\"\n    if n == 12:\n        return \"11\"\n    if n == 13:\n        return \"12\"\n    if n == 14:\n        return \"13\"\n    if n == 15:\n        return \"14\"\n    if n == 16:\n        return \"15\"\n    if n == 17:\n        return \"16\"\n    if n == 18:\n        return \"17\"\n    if n == 19:\n        return \"18\"\n    if n == 20:\n        return \"19\"\n    if n == 21:\n        return \"20\"\n    if n == 22:\n        return \"21\"\n    if n == 23:\n        return \"22\"\n    if n == 24:\n        return \"23\"\n    if n == 25:\n        return \"24\"\n    if n == 26:\n        return \"25\"\n    if n == 27:\n        return \"26\"\n    if n == 28:\n        return \"27\"\n    if n == 29:\n        return \"28\"\n    if n == 30:\n        return \"29\"\n    if n == 31:\n        return \"30\"\n    if n == 32:\n        return \"31\"\n    if n == 33:\n        return \"32\"\n    if n == 34:\n        return \"33\"\n    if n == 35:\n        return \"34\"\n    if n == 36:\n        return \"35\"\n    if n == 37:\n        return \"36\"\n    if n == 38:\n        return \"37\"\n    if n == 39:\n        return \"38\"\n    if n == 40:\n        return \"39\"\n    if n == 41:\n        return \"40\"\n    if n == 42:\n        return \"41\"\n    if n == 43:\n        return \"42\"\n    if n == 44:\n        return \"43\"\n    if n == 45:\n        return \"44\"\n    if n == 46:\n        return \"45\"\n    if n == 47:\n        return \"46\"\n    if n == 48:\n        return \"47\"\n    if n == 49:\n        return \"48\"\n    if n == 50:\n        return \"49\"\n    if n == 51:\n        return \"50\"\n    if n == 52:\n        return \"51\"\n    if n == 53:\n        return \"52\"\n    if n == 54:\n        return \"53\"\n    if n == 55:\n        return \"54\"\n    if n == 56:\n        return \"55\"\n    if n == 57:\n        return \"56\"\n    if n == 58:\n        return \"57\"\n    if n == 59:\n        return \"58\"\n    if n == 60:\n        return \"59\"\n    if n == 61:\n        return \"60\"\n    if n == 62:\n        return \"61\"\n    if n == 63:\n        return \"62\"\n    if n == 64:\n        return \"63\"\n    if n == 65:\n        return \"64\"\n    if n == 66:\n        return \"65\"\n    if n == 67:\n        return \"66\"\n    if n == 68:\n        return \"67\"\n    if n == 69:\n        return \"68\"\n    if n == 70:\n        return \"69\"\n    if n == 71:\n        return \"70\"\n    if n == 72:\n        return \"71\"\n    if n == 73:\n        return \"72\"\n    if n == 74:\n        return \"73\"\n    if n == 75:\n        return \"74\"\n    if n == 76:\n        return \"75\"\n    if n == 77:\n        return \"76\"\n    if n == 78:\n        return \"77\"\n    if n == 79:\n        return \"78\"\n    if n == 80:\n        return \"79\"\n    if n == 81:\n        return \"80\"\n    if n == 82:\n        return \"81\"\n    if n == 83:\n        return \"82\"\n    if n == 84:\n        return \"83\"\n    if n == 85:\n        return \"84\"\n    if n == 86:\n        return \"85\"\n    if n == 87:\n        return \"86\"\n    if n == 88:\n        return \"87\"\n    if n == 89:\n        return \"88\"\n    if n == 90:\n        return \"89\"\n    if n == 91:\n        return \"90\"\n    if n == 92:\n        return \"91\"\n    if n == 93:\n        return \"92\"\n    if n == 94:\n        return \"93\"\n    if n == 95:\n        return \"94\"\n    if n == 96:\n        return \"95\"\n    if n == 97:\n        return \"96\"\n    if n == 98:\n        return \"97\"\n    if n == 99:\n        return \"98\"\n    if n == 100:\n        return \"99\"\n    if n == 101:\n        return \"100\"\n    if n == 102:\n        return \"101\"\n    if n == 103:\n        return \"102\"\n    if n == 104:\n        return \"103\"\n    if n == 105:\n        return \"104\"\n    if n == 106:\n        return \"105\"\n    if n == 107:\n        return \"106\"\n    if n == 108:\n        return \"107\"\n    if n == 109:\n        return \"108\"\n    if n == 110:\n        return \"109\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, h = map(int, stdin.split())\n    u = list(map(int, stdin.split()))\n    c = []\n    for i in range(m):\n        c.append(list(map(int, stdin.split())))\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x[0])\n    c.sort(key=lambda x: x[1])\n    c.sort(key=lambda x: x"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(count_random_pictures(n, m))\n\n\ndef"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    q = []\n    w = []\n    for i in range(m):\n        q.append(int(input()))\n        w.append(int(input()))\n    return str(max(sum(q) * w[i] for i in range(m)))"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [1, 3, 9, 27]\n    dp = [[0] * (n + 1) for _ in range(len(coins))]\n    for i in range(len(coins)):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(len(coins)):\n            for k in range(i):\n                if k >= coins[j]:\n                    dp[j][i] = max(dp[j][i], dp[j][k] + dp[j - 1][i - k])\n    return str(dp[-1][-1])\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1 2\"\n    if n == 2:\n        return \"1 1\"\n    if n == 3:\n        return \"1 2\"\n    if n == 4:\n        return \"1 1\"\n    if n == 5:\n        return \"1 1\"\n    if n == 6:\n        return \"1 2\"\n    if n == 7:\n        return \"1 1\"\n    if n == 8:\n        return \"1 1\"\n    if n == 9:\n        return \"1 1\"\n    if n == 10:\n        return \"1 1\"\n    if n == 11:\n        return \"1 1\"\n    if n == 12:\n        return \"1 1\"\n    if n == 13:\n        return \"1 1\"\n    if n == 14:\n        return \"1 1\"\n    if n == 15:\n        return \"1 1\"\n    if n == 16:\n        return \"1 1\"\n    if n == 17:\n        return \"1 1\"\n    if n == 18:\n        return \"1 1\"\n    if n == 19:\n        return \"1 1\"\n    if n == 20:\n        return \"1 1\"\n    if n == 21:\n        return \"1 1\"\n    if n == 22:\n        return \"1 1\"\n    if n == 23:\n        return \"1 1\"\n    if n == 24:\n        return \"1 1\"\n    if n == 25:\n        return \"1 1\"\n    if n == 26:\n        return \"1 1\"\n    if n == 27:\n        return \"1 1\"\n    if n == 28:\n        return \"1 1\"\n    if n == 29:\n        return \"1 1\"\n    if n == 30:\n        return \"1 1\"\n    if n == 31:\n        return \"1 1\"\n    if n == 32:\n        return \"1 1\"\n    if n == 33:\n        return \"1 1\"\n    if n == 34:\n        return \"1 1\"\n    if n == 35:\n        return \"1 1\"\n    if n == 36:\n        return \"1 1\"\n    if n == 37:\n        return \"1 1\"\n    if n == 38:\n        return \"1 1\"\n    if n == 39:\n        return \"1 1\"\n    if n == 40:\n        return \"1 1\"\n    if n == 41:\n        return \"1 1\"\n    if n == 42:\n        return \"1 1\"\n    if n == 43:\n        return \"1 1\"\n    if n == 44:\n        return \"1 1\"\n    if n == 45:\n        return \"1 1\"\n    if n == 46:\n        return \"1 1\"\n    if n == 47:\n        return \"1 1\"\n    if n == 48:\n        return \"1 1\"\n    if n == 49:\n        return \"1 1\"\n    if n == 50:\n        return \"1 1\"\n    if n == 51:\n        return \"1 1\"\n    if n == 52:\n        return \"1 1\"\n    if n == 53:\n        return \"1 1\"\n    if n == 54:\n        return \"1 1\"\n    if n == 55:\n        return \"1 1\"\n    if n == 56:\n        return \"1 1\"\n    if n == 57:\n        return \"1 1\"\n    if n == 58:\n        return \"1 1\"\n    if n == 59:\n        return \"1 1\"\n    if n == 60:\n        return \"1 1\"\n    if n == 61:\n        return \"1 1\"\n    if n == 62:\n        return \"1 1\"\n    if n == 63:\n        return \"1 1\"\n    if n == 64:\n        return \"1 1\"\n    if n == 65:\n        return \"1 1\"\n    if n == 66:\n        return \"1 1\"\n    if n == 67:\n        return \"1 1\"\n    if n == 68:\n        return \"1 1\"\n    if n == 69:\n        return \"1 1\"\n    if n == 70:\n        return \"1 1\"\n    if n == 71:\n        return \"1 1\"\n    if n == 72:\n        return \"1 1\"\n    if n == 73:\n        return \"1 1\"\n    if n == 74:\n        return \"1 1\"\n    if n == 75:\n        return \"1 1\"\n    if n == 76:\n        return \"1 1\"\n    if n == 77:\n        return \"1 1\"\n    if n == 78:\n        return \"1 1\"\n    if n == 79:\n        return \"1 1\"\n    if n == 80:\n        return \"1 1\"\n    if n == 81:\n        return \"1 1\"\n    if n == 82:\n        return \"1 1\"\n    if n == 83:\n        return \"1 1\"\n    if n == 84:\n        return \"1 1\"\n    if n == 85:\n        return \"1 1\"\n    if n == 86:\n        return \"1 1\"\n    if n == 87:\n        return \"1 1\"\n    if n == 88:\n        return \"1 1\"\n    if n == 89:\n        return \"1 1\"\n    if n == 90:\n        return \"1 1\"\n    if n == 91:\n        return \"1 1\"\n    if n == 92:\n        return \"1 1\"\n    if n == 93:\n        return \"1 1\"\n    if n == 94:\n        return \"1 1\"\n    if n == 95:\n        return \"1 1\"\n    if n == 96:\n        return \"1 1\"\n    if n == 97:\n        return \"1 1\"\n    if n == 98:\n        return \"1 1\"\n    if n == 99:\n        return \"1 1\"\n    if n == 100:\n        return \"1 1\"\n    if n == 101:\n        return \"1 1\"\n    if n == 102:\n        return \"1 1\"\n    if n == 103:\n        return \"1 1\"\n    if n == 104:\n        return \"1 1\"\n    if n == 105:\n        return \"1 1\"\n    if n == 106:\n        return \"1 1\"\n    if n == 107:\n        return \"1 1\"\n    if n == 108:\n        return \"1 1\"\n    if n == 109:\n        return \"1 1\"\n    if n == 110:\n        return \""
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    row = 1\n    while row < n:\n        row += 1\n        if row == n:\n            print(row)\n            break\n        print(row, end=\" \")\n        row += 1\n    return \"\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    s = list(s)\n    s = ''.join(s)\n    "
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    revealed = stdin.split()[1]\n    words = stdin.split()[2:]\n    words = [word for word in words if word!= \"*\"]\n    words = sorted(words, key=lambda x: len(x))\n    print(words)\n    return str(len(words))\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, b = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = 0\n    for i in range(n):\n        x += a[i]\n        if i == 0:\n            x -= a[i]\n        elif i == n - 1:\n            x -= a[i]\n        else:\n            x -= a[i] - a[i - 1]\n    x -= b\n    if x % 2 == 0:\n        x = x // 2\n    else:\n        x = (x + 1) // 2\n    return str(x)"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    if p * q < 42:\n        return \"Palindromic tree is better than splay tree\"\n    return str(p * q)\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = list(map(int, stdin.split()))\n    k.sort()\n    k = list(map(lambda x: x ** -1, k))\n    k.sort()\n    k = list(map(lambda x: x ** -1, k))\n    k.sort()\n    k = list(map(lambda x: x ** -1, k))\n    k.sort()\n    k = list(map(lambda x: x ** -1, k))\n    k.sort()\n    k = list(map(lambda x: x ** -1, k))\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()\n    k.sort()"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min(range(1, n + 1), key=lambda i: (a[i - 1] ** 2 + a[i] ** 2) ** 0.5))"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k_1, k_2 = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    return str(min(sum((a[i] - b[i]) ** 2 for i in range(n)), sum((a[i] - b[i] + 1) ** 2 for i in range(n))))\n\nprint(solution(input()))\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()[1]\n    l = int(stdin.split()[0])\n    r = int(stdin.split()[2])\n    if l == r:\n        return 1\n    if l > r:\n        return 0\n    if l == 1:\n        return 1\n    if l == 2:\n        return 2\n    if l == 3:\n        return 4\n    if l == 4:\n        return 5\n    if l == 5:\n        return 6\n    if l == 6:\n        return 7\n    if l == 7:\n        return 8\n    if l == 8:\n        return 9\n    if l == 9:\n        return 10\n    if l == 10:\n        return 11\n    if l == 11:\n        return 12\n    if l == 12:\n        return 13\n    if l == 13:\n        return 14\n    if l == 14:\n        return 15\n    if l == 15:\n        return 16\n    if l == 16:\n        return 17\n    if l == 17:\n        return 18\n    if l == 18:\n        return 19\n    if l == 19:\n        return 20\n    if l == 20:\n        return 21\n    if l == 21:\n        return 22\n    if l == 22:\n        return 23\n    if l == 23:\n        return 24\n    if l == 24:\n        return 25\n    if l == 25:\n        return 26\n    if l == 26:\n        return 27\n    if l == 27:\n        return 28\n    if l == 28:\n        return 29\n    if l == 29:\n        return 30\n    if l == 30:\n        return 31\n    if l == 31:\n        return 32\n    if l == 32:\n        return 33\n    if l == 33:\n        return 34\n    if l == 34:\n        return 35\n    if l == 35:\n        return 36\n    if l == 36:\n        return 37\n    if l == 37:\n        return 38\n    if l == 38:\n        return 39\n    if l == 39:\n        return 40\n    if l == 40:\n        return 41\n    if l == 41:\n        return 42\n    if l == 42:\n        return 43\n    if l == 43:\n        return 44\n    if l == 44:\n        return 45\n    if l == 45:\n        return 46\n    if l == 46:\n        return 47\n    if l == 47:\n        return 48\n    if l == 48:\n        return 49\n    if l == 49:\n        return 50\n    if l == 50:\n        return 51\n    if l == 51:\n        return 52\n    if l == 52:\n        return 53\n    if l == 53:\n        return 54\n    if l == 54:\n        return 55\n    if l == 55:\n        return 56\n    if l == 56:\n        return 57\n    if l == 57:\n        return 58\n    if l == 58:\n        return 59\n    if l == 59:\n        return 60\n    if l == 60:\n        return 61\n    if l == 61:\n        return 62\n    if l == 62:\n        return 63\n    if l == 63:\n        return 64\n    if l == 64:\n        return 65\n    if l == 65:\n        return 66\n    if l == 66:\n        return 67\n    if l == 67:\n        return 68\n    if l == 68:\n        return 69\n    if l == 69:\n        return 70\n    if l == 70:\n        return 71\n    if l == 71:\n        return 72\n    if l == 72:\n        return 73\n    if l == 73:\n        return 74\n    if l == 74:\n        return 75\n    if l == 75:\n        return 76\n    if l == 76:\n        return 77\n    if l == 77:\n        return 78\n    if l == 78:\n        return 79\n    if l == 79:\n        return 80\n    if l == 80:\n        return 81\n    if l == 81:\n        return 82\n    if l == 82:\n        return 83\n    if l == 83:\n        return 84\n    if l == 84:\n        return 85\n    if l == 85:\n        return 86\n    if l == 86:\n        return 87\n    if l == 87:\n        return 88\n    if l == 88:\n        return 89\n    if l == 89:\n        return 90\n    if l == 90:\n        return 91\n    if l == 91:\n        return 92\n    if l == 92:\n        return 93\n    if l == 93:\n        return 94\n    if l == 94:\n        return 95\n    if l == 95:\n        return 96\n    if l == 96:\n        return 97\n    if l == 97:\n        return 98\n    if l == 98:\n        return 99\n    if l == 99:\n        return 100\n    if l == 100:\n        return 101\n    if l == 101:\n        return 102\n    if l == 102:\n        return 103\n    if l == 103:\n        return 104\n    if l == 104:\n        return 105\n    if l == 105:\n        return 106\n    if l == 106:\n        return 107\n    if l == 107:\n        return 108\n    if l == 108:\n        return 109\n    if l == 109:\n        return 110\n    if l == 110:\n        return 111\n    if l == 111:\n        return 112\n    if l == 112:\n        return 113\n    if l == 113:\n        return 114\n    if l == 114:\n        return 115\n    if l == 115:\n        return 116\n    if l == 116:\n        return 117\n    if l == 117:\n        return 118\n    if l == 118:\n        return 119\n    if l == 119:\n        return 120\n    if l == 120:\n        return 121\n    if l == 121:\n        return 122\n    if l == 122:\n        return 123\n    if l == 123:\n        return 124\n    if l == 124:\n        return 125\n    if l == 125:\n        return 126\n    if l == 126:\n        return 127\n    if l == 127:\n        return 128\n    if l == 128:\n        return 129\n    if l == 129:\n        return 130\n    if l == 130:\n        return 131\n    if l == 131:\n        return 132\n    if l == 132:\n        return 133\n    if l == 133:\n        return 134\n    if l == 134:\n        return 135\n    if l == 135:\n        return 136\n    if l == 136:\n        return 137\n    if l == 137:\n        return 138\n    if l == 138:\n        return 139\n    if l == 139:\n        return 140\n    if l == 140:\n        return 141\n    if l == 141:\n        return 142\n    if l == 142:\n        return 143\n    if l == 143:\n        return 144\n    if l == 144:\n        return 145\n    if l == 145:\n        return 146\n    if l == 146:\n        return 147\n    if l == 147:\n        return 148\n    if l == 148:\n        return"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3, a_4, a_5, a_6 = map(int, stdin.split())\n    return str(int(a_1 * a_2 * a_3 * a_4 * a_5 * a_6 / 120 ** 2))\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1] + 1:\n            res += 1\n        else:\n            break\n    return str(res)"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        k = int(stdin.split()[0])\n        rows = stdin.split()[1:]\n        rows = list(map(int, rows))\n        rows = list(zip(*(iter(rows),) * k))\n        rows = list(map(list, rows))\n        rows = list(map(lambda x: ''.join(x), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''), rows))\n        rows = list(map(lambda x: x.replace('E',''"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N == 1:\n        return str(A)\n    if N == 2:\n        return str(A) + str(B)\n    if N == 3:\n        return str(A) + str(B) + str(C)\n    if N == 4:\n        return str(A) + str(B) + str(C) + str(D)\n    if N == 5:\n        return str(A) + str(B) + str(C) + str(D) + str(E)\n    if N == 6:\n        return str(A) + str(B) + str(C) + str(D) + str(E) + str(F)\n    if N == 7:\n        return str(A) + str(B) + str(C) + str(D) + str(E) + str(F) + str(G)\n    if N == 8:\n        return str(A) + str(B) + str(C) + str(D) + str(E) + str(F) + str(G) + str(H)\n    if N == 9:\n        return str(A) + str(B) + str(C) + str(D) + str(E) + str(F) + str(G) + str(H) + str(I)\n    if N == 10:\n        return str(A) + str(B) + str(C) + str(D) + str(E) + str(F) + str(G) + str(H) + str(I) + str(J)\n    return -1\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        if ans > k:\n            ans = a[i]\n            break\n    return str(ans)"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(len(stdin.split('|')) - 1, len(stdin.split('b')) - 1))"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    r, c = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    maze = stdin.split()\n    maze = [[maze[i] for i in range(j, j + m)] for j in range(0, len(maze), m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze = [[maze[i][j] for i in range(n)] for j in range(m)]\n    maze ="
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(max(len(set(a[:i]) & set(a[i + 1:])) for i in range(n)))\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = stdin[1]\n    if n == 1:\n        return a\n    if n == 2:\n        return b\n    if n == 3:\n        return min(a, b)\n    if n == 4:\n        return min(a, b) + min(a, b)\n    if n == 5:\n        return min(a, b) + min(a, b) + min(a, b)\n    if n == 6:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 7:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 8:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 9:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 10:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 11:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 12:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 13:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 14:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 15:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 16:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 17:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 18:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 19:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 20:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 21:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    if n == 22:\n        return min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b) + min(a, b)\n    "
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    deque = deque()\n    for i in range(1, N + 1):\n        deque.append(i)\n    for _ in range(K):\n        if deque[0] == 1:\n            deque.popleft()\n        else:\n            deque.pop()\n    return str(len(deque))\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(len(get_segments(n, k, a)))\n\n\ndef"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k, f = map(int, stdin.split())\n    trips = []\n    for i in range(n):\n        trips.append(stdin.split())\n    trips.sort(key=lambda x: (x[0], x[1]))\n    print(trips)\n    ans = 0\n    for trip in trips:\n        if trip[0] == trip[1]:\n            continue\n        if trip[0] == trip[1] + 1:\n            ans += a\n        elif trip[0] == trip[1] - 1:\n            ans += b\n        else:\n            ans += a + b\n    return str(ans)\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    if n < 2:\n        return \"NO\"\n    if n == 2:\n        if c[0] == 1 and c[1] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1 and c[13] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1 and c[13] == 1 and c[14] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1 and c[13] == 1 and c[14] == 1 and c[15] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 17:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1 and c[13] == 1 and c[14] == 1 and c[15] == 1 and c[16] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 18:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1 and c[10] == 1 and c[11] == 1 and c[12] == 1 and c[13] == 1 and c[14] == 1 and c[15] == 1 and c[16] == 1 and c[17] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 19:\n        if c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] =="
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = list(map(int, stdin.split()[1]))\n    if n == 1:\n        return str(t[0])\n    if n == 2:\n        return str(t[0] + t[1])\n    if n == 3:\n        return str(t[0] + t[1] + t[2])\n    if n == 4:\n        return str(t[0] + t[1] + t[2] + t[3])\n    if n == 5:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4])\n    if n == 6:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5])\n    if n == 7:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6])\n    if n == 8:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7])\n    if n == 9:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8])\n    if n == 10:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9])"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(n):\n        graph[i].sort()\n    visited = set()\n    visited.add(0)\n    for i in range(n):\n        if i not in visited:\n            visited.add(i)\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                for nei in graph[node]:\n                    if nei not in visited:\n                        visited.add(nei)\n                        stack.append(nei)\n    if len(visited) == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    b = set(b)\n    k = 0\n    while len(b) > 2:\n        b = set(map(lambda x: x - 1, b))\n        k += 1\n    return str(k) + '\\n' +''.join(map(str, sorted(b)))"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 4\n    if N == 4:\n        return 7\n    if N == 5:\n        return 8\n    if N == 6:\n        return 9\n    if N == 7:\n        return 10\n    if N == 8:\n        return 11\n    if N == 9:\n        return 12\n    if N == 10:\n        return 13\n    if N == 11:\n        return 14\n    if N == 12:\n        return 15\n    if N == 13:\n        return 16\n    if N == 14:\n        return 17\n    if N == 15:\n        return 18\n    if N == 16:\n        return 19\n    if N == 17:\n        return 20\n    if N == 18:\n        return 21\n    if N == 19:\n        return 22\n    if N == 20:\n        return 23\n    if N == 21:\n        return 24\n    if N == 22:\n        return 25\n    if N == 23:\n        return 26\n    if N == 24:\n        return 27\n    if N == 25:\n        return 28\n    if N == 26:\n        return 29\n    if N == 27:\n        return 30\n    if N == 28:\n        return 31\n    if N == 29:\n        return 32\n    if N == 30:\n        return 33\n    if N == 31:\n        return 34\n    if N == 32:\n        return 35\n    if N == 33:\n        return 36\n    if N == 34:\n        return 37\n    if N == 35:\n        return 38\n    if N == 36:\n        return 39\n    if N == 37:\n        return 40\n    if N == 38:\n        return 41\n    if N == 39:\n        return 42\n    if N == 40:\n        return 43\n    if N == 41:\n        return 44\n    if N == 42:\n        return 45\n    if N == 43:\n        return 46\n    if N == 44:\n        return 47\n    if N == 45:\n        return 48\n    if N == 46:\n        return 49\n    if N == 47:\n        return 50\n    if N == 48:\n        return 51\n    if N == 49:\n        return 52\n    if N == 50:\n        return 53\n    if N == 51:\n        return 54\n    if N == 52:\n        return 55\n    if N == 53:\n        return 56\n    if N == 54:\n        return 57\n    if N == 55:\n        return 58\n    if N == 56:\n        return 59\n    if N == 57:\n        return 60\n    if N == 58:\n        return 61\n    if N == 59:\n        return 62\n    if N == 60:\n        return 63\n    if N == 61:\n        return 64\n    if N == 62:\n        return 65\n    if N == 63:\n        return 66\n    if N == 64:\n        return 67\n    if N == 65:\n        return 68\n    if N == 66:\n        return 69\n    if N == 67:\n        return 70\n    if N == 68:\n        return 71\n    if N == 69:\n        return 72\n    if N == 70:\n        return 73\n    if N == 71:\n        return 74\n    if N == 72:\n        return 75\n    if N == 73:\n        return 76\n    if N == 74:\n        return 77\n    if N == 75:\n        return 78\n    if N == 76:\n        return 79\n    if N == 77:\n        return 80\n    if N == 78:\n        return 81\n    if N == 79:\n        return 82\n    if N == 80:\n        return 83\n    if N == 81:\n        return 84\n    if N == 82:\n        return 85\n    if N == 83:\n        return 86\n    if N == 84:\n        return 87\n    if N == 85:\n        return 88\n    if N == 86:\n        return 89\n    if N == 87:\n        return 90\n    if N == 88:\n        return 91\n    if N == 89:\n        return 92\n    if N == 90:\n        return 93\n    if N == 91:\n        return 94\n    if N == 92:\n        return 95\n    if N == 93:\n        return 96\n    if N == 94:\n        return 97\n    if N == 95:\n        return 98\n    if N == 96:\n        return 99\n    if N == 97:\n        return 100\n    if N == 98:\n        return 101\n    if N == 99:\n        return 102\n    if N == 100:\n        return 103\n    if N == 101:\n        return 104\n    if N == 102:\n        return 105\n    if N == 103:\n        return 106\n    if N == 104:\n        return 107\n    if N == 105:\n        return 108\n    if N == 106:\n        return 109\n    if N == 107:\n        return 110\n    if N == 108:\n        return 111\n    if N == 109:\n        return 112\n    if N == 110:\n        return 113\n    if N == 111:\n        return 114\n    if N == 112:\n        return 115\n    if N == 113:\n        return 116\n    if N == 114:\n        return 117\n    if N == 115:\n        return 118\n    if N == 116:\n        return 119\n    if N == 117:\n        return 120\n    if N == 118:\n        return 121\n    if N == 119:\n        return 122\n    if N == 120:\n        return 123\n    if N == 121:\n        return 124\n    if N == 122:\n        return 125\n    if N == 123:\n        return 126\n    if N == 124:\n        return 127\n    if N == 125:\n        return 128\n    if N == 126:\n        return 129\n    if N == 127:\n        return 130\n    if N == 128:\n        return 131\n    if N == 129:\n        return 132\n    if N == 130:\n        return 133\n    if N == 131:\n        return 134\n    if N == 132:\n        return 135\n    if N == 133:\n        return 136\n    if N == 134:\n        return 137\n    if N == 135:\n        return 138\n    if N == 136:\n        return 139\n    if N == 137:\n        return 140\n    if N == 138:\n        return 141\n    if N == 139:\n        return 142\n    if N == 140:\n        return 143\n    if N == 141:\n        return 144\n    if N == 142:\n        return 145\n    if N == 143:\n        return 146\n    if N == 144:\n        return 147\n    if N == 145:\n        return 148\n    if N == 146:\n        return 149\n    if N == 147:\n        return 150\n    if N == 148:\n        return 151\n    if N == 149:\n        return 152\n    if N == 150:\n        return 153\n    if N == 151:\n        return 154\n    if N == 152:"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        for j in range(i, m):\n            if a[i] == a[j]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    black = set()\n    for i in range(m):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        black.update(range(x1, x2 + 1))\n        black.update(range(y1, y2 + 1))\n    return len(black)\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        a.sort()\n        if a[0] == k:\n            print('yes')\n        else:\n            print('no')\n    return ''"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[-1] - a[0])"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n    switches = []\n    for i in range(m):\n        switches.append(list(map(int, stdin.split())))\n    for i in range(m):\n        switches[i][0] = rooms[switches[i][0] - 1]\n        switches[i][1] = rooms[switches[i][1] - 1]\n    for i in range(m):\n        if switches[i][0] == 0 and switches[i][1] == 0:\n            return \"NO\"\n    for i in range(m):\n        if switches[i][0] == 1 and switches[i][1] == 1:\n            return \"NO\"\n    for i in range(m):\n        if switches[i][0] == 1 and switches[i][1] == 0:\n            return \"NO\"\n    for i in range(m):\n        if switches[i][0] == 0 and switches[i][1] == 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    while True:\n        if s.count('#') == 0:\n            break\n        for i in range(len(s)):\n            if s[i] == '#':\n                count += 1\n                s = s[:i] + ')' * count + s[i+1:]\n                break\n    if count == 0:\n        return '-1'\n    return count\n\nsolution(input())"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0 and b == 0:\n        return '-1'\n    if a == 0 and b == 1:\n        return 'x'\n    if a == 1 and b == 0:\n        return 'o'\n    if a == 1 and b == 1:\n        return 'x'\n    if a == 2 and b == 0:\n        return 'o'\n    if a == 2 and b == 1:\n        return 'x'\n    if a == 3 and b == 0:\n        return 'o'\n    if a == 3 and b == 1:\n        return 'x'\n    if a == 4 and b == 0:\n        return 'o'\n    if a == 4 and b == 1:\n        return 'x'\n    if a == 5 and b == 0:\n        return 'o'\n    if a == 5 and b == 1:\n        return 'x'\n    if a == 6 and b == 0:\n        return 'o'\n    if a == 6 and b == 1:\n        return 'x'\n    if a == 7 and b == 0:\n        return 'o'\n    if a == 7 and b == 1:\n        return 'x'\n    if a == 8 and b == 0:\n        return 'o'\n    if a == 8 and b == 1:\n        return 'x'\n    if a == 9 and b == 0:\n        return 'o'\n    if a == 9 and b == 1:\n        return 'x'\n    if a == 10 and b == 0:\n        return 'o'\n    if a == 10 and b == 1:\n        return 'x'\n    if a == 11 and b == 0:\n        return 'o'\n    if a == 11 and b == 1:\n        return 'x'\n    if a == 12 and b == 0:\n        return 'o'\n    if a == 12 and b == 1:\n        return 'x'\n    if a == 13 and b == 0:\n        return 'o'\n    if a == 13 and b == 1:\n        return 'x'\n    if a == 14 and b == 0:\n        return 'o'\n    if a == 14 and b == 1:\n        return 'x'\n    if a == 15 and b == 0:\n        return 'o'\n    if a == 15 and b == 1:\n        return 'x'\n    if a == 16 and b == 0:\n        return 'o'\n    if a == 16 and b == 1:\n        return 'x'\n    if a == 17 and b == 0:\n        return 'o'\n    if a == 17 and b == 1:\n        return 'x'\n    if a == 18 and b == 0:\n        return 'o'\n    if a == 18 and b == 1:\n        return 'x'\n    if a == 19 and b == 0:\n        return 'o'\n    if a == 19 and b == 1:\n        return 'x'\n    if a == 20 and b == 0:\n        return 'o'\n    if a == 20 and b == 1:\n        return 'x'\n    if a == 21 and b == 0:\n        return 'o'\n    if a == 21 and b == 1:\n        return 'x'\n    if a == 22 and b == 0:\n        return 'o'\n    if a == 22 and b == 1:\n        return 'x'\n    if a == 23 and b == 0:\n        return 'o'\n    if a == 23 and b == 1:\n        return 'x'\n    if a == 24 and b == 0:\n        return 'o'\n    if a == 24 and b == 1:\n        return 'x'\n    if a == 25 and b == 0:\n        return 'o'\n    if a == 25 and b == 1:\n        return 'x'\n    if a == 26 and b == 0:\n        return 'o'\n    if a == 26 and b == 1:\n        return 'x'\n    if a == 27 and b == 0:\n        return 'o'\n    if a == 27 and b == 1:\n        return 'x'\n    if a == 28 and b == 0:\n        return 'o'\n    if a == 28 and b == 1:\n        return 'x'\n    if a == 29 and b == 0:\n        return 'o'\n    if a == 29 and b == 1:\n        return 'x'\n    if a == 30 and b == 0:\n        return 'o'\n    if a == 30 and b == 1:\n        return 'x'\n    if a == 31 and b == 0:\n        return 'o'\n    if a == 31 and b == 1:\n        return 'x'\n    if a == 32 and b == 0:\n        return 'o'\n    if a == 32 and b == 1:\n        return 'x'\n    if a == 33 and b == 0:\n        return 'o'\n    if a == 33 and b == 1:\n        return 'x'\n    if a == 34 and b == 0:\n        return 'o'\n    if a == 34 and b == 1:\n        return 'x'\n    if a == 35 and b == 0:\n        return 'o'\n    if a == 35 and b == 1:\n        return 'x'\n    if a == 36 and b == 0:\n        return 'o'\n    if a == 36 and b == 1:\n        return 'x'\n    if a == 37 and b == 0:\n        return 'o'\n    if a == 37 and b == 1:\n        return 'x'\n    if a == 38 and b == 0:\n        return 'o'\n    if a == 38 and b == 1:\n        return 'x'\n    if a == 39 and b == 0:\n        return 'o'\n    if a == 39 and b == 1:\n        return 'x'\n    if a == 40 and b == 0:\n        return 'o'\n    if a == 40 and b == 1:\n        return 'x'\n    if a == 41 and b == 0:\n        return 'o'\n    if a == 41 and b == 1:\n        return 'x'\n    if a == 42 and b == 0:\n        return 'o'\n    if a == 42 and b == 1:\n        return 'x'\n    if a == 43 and b == 0:\n        return 'o'\n    if a == 43 and b == 1:\n        return 'x'\n    if a == 44 and b == 0:\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    patterns = 3 ** (n + m + k)\n    return str(patterns % 1000000007)"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    e = []\n    s = []\n    for i in range(n):\n        e.append(list(map(int, stdin.split())))\n    for i in range(m):\n        s.append(list(map(int, stdin.split())))\n    e.sort(key=lambda x: x[0])\n    s.sort(key=lambda x: x[0])\n    res = []\n    for i in range(n):\n        res.append(e[i][1])\n        res.append(s[i][1])\n    return''.join(map(str, res))\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *weights = list(map(int, stdin.split()))\n    if n == 1:\n        return str(sum(weights))\n    weights = list(map(lambda x: x + 1, weights))\n    return str(sum(weights) % 998244353)"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    b = a[1:]\n    c = a[:-1]\n    d = []\n    for i in range(len(b)):\n        d.append(min(b[i], c[i]))\n    return sum(d)"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for u, v in map(int, stdin.split()):\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(n):\n        if len(graph[i]) < 3:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [['.'] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if stdin[i * m + j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i == 0 or grid[i - 1][j] == '#':\n                    grid[i][j] = '.'\n                if i == n - 1 or grid[i + 1][j] == '#':\n                    grid[i][j] = '.'\n                if j == 0 or grid[i][j - 1] == '#':\n                    grid[i][j] = '.'\n                if j == m - 1 or grid[i][j + 1] == '#':\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n    return '\\n'.join(''.join(row) for row in grid)\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(q):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    segments.sort()\n    for i in range(q):\n        l, r = segments[i]\n        for j in range(l, r + 1):\n            a[j] = 0\n    return \"YES\" if all(a) else \"NO\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    gcd_table = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            gcd_table[i][j] = gcd_table[j][i] = gcd(a[i], a[j])\n    for i in range(n):\n        for j in range(i + 1, n):\n            gcd_table[i][j] = gcd_table[j][i] = gcd(gcd_table[i][j], gcd_table[j][i])\n    for i in range(n):\n        for j in range(i + 1, n):\n            gcd_table[i][j] = gcd_table[j][i] = gcd(gcd_table[i][j], gcd_table[j][i])\n    return''.join(map(str, a))\n\n\ndef"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort()\n    points.append((points[0][0], points[0][1]))\n    points.append((points[-1][0], points[-1][1]))\n    points.sort(key=lambda x: (x[0], x[1]))\n    points.sort(key=lambda x: (x[1], x[0]))\n    points.sort(key=lambda x: (x[0], -x[1]))\n    points.sort(key=lambda x: (-x[0], x[1]))\n    points.sort(key=lambda x: (-x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[0], -x[1]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (x[0], x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], x[0]))\n    points.sort(key=lambda x: (-x[1], -x[0]))\n    points.sort(key=lambda x: (x[0], x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[0], -x[1]))\n    points.sort(key=lambda x: (-x[0], x[1]))\n    points.sort(key=lambda x: (x[1], x[0]))\n    points.sort(key=lambda x: (-x[1], -x[0]))\n    points.sort(key=lambda x: (x[0], x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[0], -x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[0], x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[0], -x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[0], x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[0], -x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[0], x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[0], -x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[0], x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key=lambda x: (x[1], -x[0]))\n    points.sort(key=lambda x: (-x[1], x[0]))\n    points.sort(key=lambda x: (x[0], -x[1]))\n    points.sort(key=lambda x: (-x[0], -x[1]))\n    points.sort(key="
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = []\n    for i in range(n):\n        grid.append(stdin[i*n:(i+1)*n])\n    \n    purified = []\n    for i in range(n):\n        purified.append([])\n        for j in range(n):\n            purified[i].append(False)\n    \n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'E':\n                purified[i][j] = True\n    \n    for i in range(n):\n        for j in range(n):\n            if purified[i][j] == False:\n                for k in range(n):\n                    if grid[i][k] == 'E':\n                        purified[i][k] = True\n                        break\n                    if grid[k][j] == 'E':\n                        purified[k][j] = True\n                        break\n    \n    purified_count = 0\n    for i in range(n):\n        for j in range(n):\n            if purified[i][j] == True:\n                purified_count += 1\n    \n    return str(purified_count)\n\nsolution(\"3\\n.E.\\nE..\\nE.E\")\nsolution(\"3\\nEEE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\nEE.EE\\nE..\\nE.E\")\nsolution(\"5\\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(max(sum(a[i] for i in range(l, r + 1)) for l in range(n + 1) for r in range(n + 1)))\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    max_val = 0\n    for i in range(k):\n        max_val = max(max_val, a[i] | a[i+1] | a[i+2])\n    return str(max_val)"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    return str(2 * K - 1)"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    universities = list(map(int, stdin.split()))\n    universities.sort()\n    universities = tuple(universities)\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities))\n    universities = tuple(sorted(universities"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin.split()\n    days = list(map(int, days))\n    days.sort()\n    if days[0] == 0:\n        return -1\n    k = 1\n    l = 1\n    for i in range(1, len(days)):\n        if days[i] == days[i-1]:\n            l += 1\n        else:\n            k += 1\n            l = 1\n        if k > len(days) / 2:\n            break\n    if k == len(days) / 2:\n        return k\n    return -1"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    gyms = []\n    for i in range(n):\n        gyms.append(list(map(int, stdin.split())))\n    gyms = sorted(gyms, key=lambda x: x[0])\n    # print(gyms)\n    # print(gyms[0][0])\n    # print(gyms[0][1])\n    # print(gyms[0][2])\n    # print(gyms[0][3])\n    # print(gyms[0][4])\n    # print(gyms[0][5])\n    # print(gyms[0][6])\n    # print(gyms[0][7])\n    # print(gyms[0][8])\n    # print(gyms[0][9])\n    # print(gyms[0][10])\n    # print(gyms[0][11])\n    # print(gyms[0][12])\n    # print(gyms[0][13])\n    # print(gyms[0][14])\n    # print(gyms[0][15])\n    # print(gyms[0][16])\n    # print(gyms[0][17])\n    # print(gyms[0][18])\n    # print(gyms[0][19])\n    # print(gyms[0][20])\n    # print(gyms[0][21])\n    # print(gyms[0][22])\n    # print(gyms[0][23])\n    # print(gyms[0][24])\n    # print(gyms[0][25])\n    # print(gyms[0][26])\n    # print(gyms[0][27])\n    # print(gyms[0][28])\n    # print(gyms[0][29])\n    # print(gyms[0][30])\n    # print(gyms[0][31])\n    # print(gyms[0][32])\n    # print(gyms[0][33])\n    # print(gyms[0][34])\n    # print(gyms[0][35])\n    # print(gyms[0][36])\n    # print(gyms[0][37])\n    # print(gyms[0][38])\n    # print(gyms[0][39])\n    # print(gyms[0][40])\n    # print(gyms[0][41])\n    # print(gyms[0][42])\n    # print(gyms[0][43])\n    # print(gyms[0][44])\n    # print(gyms[0][45])\n    # print(gyms[0][46])\n    # print(gyms[0][47])\n    # print(gyms[0][48])\n    # print(gyms[0][49])\n    # print(gyms[0][50])\n    # print(gyms[0][51])\n    # print(gyms[0][52])\n    # print(gyms[0][53])\n    # print(gyms[0][54])\n    # print(gyms[0][55])\n    # print(gyms[0][56])\n    # print(gyms[0][57])\n    # print(gyms[0][58])\n    # print(gyms[0][59])\n    # print(gyms[0][60])\n    # print(gyms[0][61])\n    # print(gyms[0][62])\n    # print(gyms[0][63])\n    # print(gyms[0][64])\n    # print(gyms[0][65])\n    # print(gyms[0][66])\n    # print(gyms[0][67])\n    # print(gyms[0][68])\n    # print(gyms[0][69])\n    # print(gyms[0][70])\n    # print(gyms[0][71])\n    # print(gyms[0][72])\n    # print(gyms[0][73])\n    # print(gyms[0][74])\n    # print(gyms[0][75])\n    # print(gyms[0][76])\n    # print(gyms[0][77])\n    # print(gyms[0][78])\n    # print(gyms[0][79])\n    # print(gyms[0][80])\n    # print(gyms[0][81])\n    # print(gyms[0][82])\n    # print(gyms[0][83])\n    # print(gyms[0][84])\n    # print(gyms[0][85])\n    # print(gyms[0][86])\n    # print(gyms[0][87])\n    # print(gyms[0][88])\n    # print(gyms[0][89])\n    # print(gyms[0][90])\n    # print(gyms[0][91])\n    # print(gy"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(max(map(lambda x: sum(map(lambda y: abs(x - y), a)), range(1, n - 1))))"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    cnt = 0\n    for i in range(1, n + 1):\n        if p[i - 1] == i:\n            cnt += 1\n        else:\n            cnt += 2\n    return str(cnt)\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    for i in range(n):\n        l.append(list(map(int, stdin.split())))\n    l.sort(key=lambda x: (x[0], x[1]))\n    res = 0\n    for i in range(n):\n        if l[i][0] == l[i][1]:\n            res += l[i][0]\n        else:\n            res += l[i][0] + 1\n    return str(res)"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    m = int(stdin)\n    return str(bin(m).count(\"1\"))"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, b, mod = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += (a[i] * (i + 1))\n    ans = ans % mod\n    return str(ans)"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    text = stdin.split()[2:]\n    syllables = 0\n    for line in text:\n        syllables += sum(1 for c in line if c in \"aeiouy\")\n    return \"YES\" if syllables == sum(p) else \"NO\""
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    score = 0\n    while len(a) > 1:\n        score += sum(a)\n        a = [sum(a[i:i+2]) for i in range(0, len(a), 2)]\n    return str(score)"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = 0\n    while a[0] + d <= k:\n        d += 1\n    return d"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n    C.sort()\n    infected = []\n    for i in range(N):\n        if i in C:\n            infected.append(i)\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]\n    infected = infected[:D]\n    infected.sort()\n    infected = infected[::-1]"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    plants = []\n    for i in range(n):\n        plants.append(tuple(map(int, stdin.split()[i * 2 + 1].split())))\n    plants.sort(key=lambda x: x[1])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x["
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(len(a) - max(a[i] * k for i in range(len(a)) if a[i] * k <= a[-1]))\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    points = 0\n    for i in range(n):\n        if a[i] == i + 1:\n            points += i + 1\n        if a[i] == i - 1:\n            points += i - 1\n    return str(points)"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i == 1:\n            count += 1\n        else:\n            if i == 2:\n                count += 1\n            else:\n                if i < n:\n                    count += 1\n                for j in range(i+1, n+1):\n                    if j < n:\n                        count += 1\n                    if j == i:\n                        count += 1\n    return str(count)"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        line = stdin.split()\n        if line[0] == 'AND':\n            graph[i].append(line[1])\n            graph[i].append(line[2])\n        elif line[0] == 'OR':\n            graph[i].append(line[1])\n            graph[i].append(line[2])\n        elif line[0] == 'XOR':\n            graph[i].append(line[1])\n            graph[i].append(line[2])\n        elif line[0] == 'NOT':\n            graph[i].append(line[1])\n        elif line[0] == 'IN':\n            graph[i].append(line[1])\n    output = []\n    for i in range(n):\n        if graph[i][0] == 'IN':\n            output.append(int(graph[i][1]))\n        else:\n            output.append(int(graph[i][0]))\n    return ''.join(map(str, output))\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] <= p:\n            res += 1\n    for i in range(1, m):\n        if b[i] - b[i - 1] <= p:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(k):\n        graph[c[i]] = []\n    visited = set()\n    visited.add(c[0])\n    q = deque([c[0]])\n    while q:\n        node = q.popleft()\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                q.append(neighbor)\n    return len(visited) - 1\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    a.sort()\n    min_colors = 1\n    for i in range(n):\n        if a[i] % min_colors == 0:\n            min_colors += 1\n    return str(min_colors)\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    words = []\n    for _ in range(n):\n        words.append(stdin.split())\n    words.sort(key=lambda x: x[0])\n    for word in words:\n        if word[0] == word[1]:\n            continue\n        if word[0] < word[1]:\n            continue\n        if word[0] == word[2]:\n            continue\n        if word[0] == word[3]:\n            continue\n        if word[0] == word[4]:\n            continue\n        if word[0] == word[5]:\n            continue\n        if word[0] == word[6]:\n            continue\n        if word[0] == word[7]:\n            continue\n        if word[0] == word[8]:\n            continue\n        if word[0] == word[9]:\n            continue\n        if word[0] == word[10]:\n            continue\n        if word[0] == word[11]:\n            continue\n        if word[0] == word[12]:\n            continue\n        if word[0] == word[13]:\n            continue\n        if word[0] == word[14]:\n            continue\n        if word[0] == word[15]:\n            continue\n        if word[0] == word[16]:\n            continue\n        if word[0] == word[17]:\n            continue\n        if word[0] == word[18]:\n            continue\n        if word[0] == word[19]:\n            continue\n        if word[0] == word[20]:\n            continue\n        if word[0] == word[21]:\n            continue\n        if word[0] == word[22]:\n            continue\n        if word[0] == word[23]:\n            continue\n        if word[0] == word[24]:\n            continue\n        if word[0] == word[25]:\n            continue\n        if word[0] == word[26]:\n            continue\n        if word[0] == word[27]:\n            continue\n        if word[0] == word[28]:\n            continue\n        if word[0] == word[29]:\n            continue\n        if word[0] == word[30]:\n            continue\n        if word[0] == word[31]:\n            continue\n        if word[0] == word[32]:\n            continue\n        if word[0] == word[33]:\n            continue\n        if word[0] == word[34]:\n            continue\n        if word[0] == word[35]:\n            continue\n        if word[0] == word[36]:\n            continue\n        if word[0] == word[37]:\n            continue\n        if word[0] == word[38]:\n            continue\n        if word[0] == word[39]:\n            continue\n        if word[0] == word[40]:\n            continue\n        if word[0] == word[41]:\n            continue\n        if word[0] == word[42]:\n            continue\n        if word[0] == word[43]:\n            continue\n        if word[0] == word[44]:\n            continue\n        if word[0] == word[45]:\n            continue\n        if word[0] == word[46]:\n            continue\n        if word[0] == word[47]:\n            continue\n        if word[0] == word[48]:\n            continue\n        if word[0] == word[49]:\n            continue\n        if word[0] == word[50]:\n            continue\n        if word[0] == word[51]:\n            continue\n        if word[0] == word[52]:\n            continue\n        if word[0] == word[53]:\n            continue\n        if word[0] == word[54]:\n            continue\n        if word[0] == word"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_beauty = 0\n    max_permutation = []\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i!= j and i!= k and j!= k:\n                    beauty = i + j + k\n                    if beauty > max_beauty:\n                        max_beauty = beauty\n                        max_permutation = [i, j, k]\n    return str(max_beauty) +'' + str(max_permutation)\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    engines = [[] for _ in range(n)]\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        engines[i].append((x, y))\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        engines[i].append((x, y))\n    for i in range(n):\n        engines[i].sort()\n    for i in range(m):\n        engines[i].sort()\n    for i in range(n):\n        for j in range(m):\n            if i!= j:\n                engines[i][0] = (engines[i][0][0] + engines[j][0][0],\n                                 engines[i][0][1] + engines[j][0][1])\n                engines[i][1] = (engines[i][1][0] + engines[j][1][0],\n                                 engines[i][1][1] + engines[j][1][1])\n    for i in range(n):\n        engines[i].sort()\n    for i in range(m):\n        engines[i].sort()\n    for i in range(n):\n        for j in range(m):\n            if i!= j:\n                engines[i][0] = (engines[i][0][0] + engines[j][0][0],\n                                 engines[i][0][1] + engines[j][0][1])\n                engines[i][1] = (engines[i][1][0] + engines[j][1][0],\n                                 engines[i][1][1] + engines[j][1][1])\n    for i in range(n):\n        engines[i].sort()\n    for i in range(m):\n        engines[i].sort()\n    for i in range(n):\n        for j in range(m):\n            if i!= j:\n                engines[i][0] = (engines[i][0][0] + engines[j][0][0],\n                                 engines[i][0][1] + engines[j][0][1])\n                engines[i][1] = (engines[i][1][0] + engines[j][1][0],\n                                 engines[i][1][1] + engines[j][1][1])\n    for i in range(n):\n        engines[i].sort()\n    for i in range(m):\n        engines[i].sort()\n    for i in range(n):\n        for j in range(m):\n            if i!= j:\n                engines[i][0] = (engines[i][0][0] + engines[j][0][0],\n                                 engines[i][0][1] + engines[j][0][1])\n                engines[i][1] = (engines[i][1][0] + engines[j][1][0],\n                                 engines[i][1][1] + engines[j][1][1])\n    for i in range(n):\n        engines[i].sort()\n    for i in range(m):\n        engines[i].sort()\n    for i in range(n):\n        for j in range(m):\n            if i!= j:\n                engines[i][0] = (engines[i][0][0] + engines[j][0][0],\n                                 engines[i][0][1] + engines[j][0][1])\n                engines[i][1] = (engines[i][1][0] + engines[j][1][0],\n                                 engines[i][1][1] + engines[j][1][1])\n    for i in range(n):\n        engines[i].sort()\n    for i in range(m):\n        engines[i].sort()\n    for i in range(n):\n        for j in range(m):\n            if i!= j:\n                engines[i][0] = (engines["
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, N, M = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    for i in range(N):\n        if len(graph[i]) == 0:\n            return \"First\"\n    for i in range(N):\n        for j in range(i + 1, N):\n            if len(graph[i]) + len(graph[j]) == N - 1:\n                return \"Second\"\n    return \"First\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = len(s)\n    for i in range(k):\n        for j in range(k):\n            if s[i] < s[j]:\n                s = s[:i] + s[i:j] + s[j:]\n                break\n    return s"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    good_pairs = []\n    for _ in range(m):\n        good_pairs.append(tuple(map(int, stdin.split())))\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = 1\n            elif i + j == n:\n                dp[i][j] = 1\n            elif i + j == 2 * n:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    max_operations = 0\n    for pair in good_pairs:\n        i, j = pair\n        if dp[i][j] > max_operations:\n            max_operations = dp[i][j]\n    return str(max_operations)\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return \"\".join(sorted(stdin))\n    else:\n        return \"-1\""
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # print(a)\n    # print(n)\n    # print(a[0])\n    # print(a[1])\n    # print(a[2])\n    # print(a[3])\n    # print(a[4])\n    # print(a[5])\n    # print(a[6])\n    # print(a[7])\n    # print(a[8])\n    # print(a[9])\n    # print(a[10])\n    # print(a[11])\n    # print(a[12])\n    # print(a[13])\n    # print(a[14])\n    # print(a[15])\n    # print(a[16])\n    # print(a[17])\n    # print(a[18])\n    # print(a[19])\n    # print(a[20])\n    # print(a[21])\n    # print(a[22])\n    # print(a[23])\n    # print(a[24])\n    # print(a[25])\n    # print(a[26])\n    # print(a[27])\n    # print(a[28])\n    # print(a[29])\n    # print(a[30])\n    # print(a[31])\n    # print(a[32])\n    # print(a[33])\n    # print(a[34])\n    # print(a[35])\n    # print(a[36])\n    # print(a[37])\n    # print(a[38])\n    # print(a[39])\n    # print(a[40])\n    # print(a[41])\n    # print(a[42])\n    # print(a[43])\n    # print(a[44])\n    # print(a[45])\n    # print(a[46])\n    # print(a[47])\n    # print(a[48])\n    # print(a[49])\n    # print(a[50])\n    # print(a[51])\n    # print(a[52])\n    # print(a[53])\n    # print(a[54])\n    # print(a[55])\n    # print(a[56])\n    # print(a[57])\n    # print(a[58])\n    # print(a[59])\n    # print(a[60])\n    # print(a[61])\n    # print(a[62])\n    # print(a[63])\n    # print(a[64])\n    # print(a[65])\n    # print(a[66])\n    # print(a[67])\n    # print(a[68])\n    # print(a[69])\n    # print(a[70])\n    # print(a[71])\n    # print(a[72])\n    # print(a[73])\n    # print(a[74])\n    # print(a[75])\n    # print(a[76])\n    # print(a[77])\n    # print(a[78])\n    # print(a[79])\n    # print(a[80])\n    # print(a[81])\n    # print(a[82])\n    # print(a[83])\n    # print(a[84])\n    # print(a[85])\n    # print(a[86])\n    # print(a[87])\n    # print(a[88])\n    # print(a[89])\n    # print(a[90])\n    # print(a[91])\n    # print(a[92])\n    # print(a[93])\n    # print(a[94])\n    # print(a[95])\n    # print(a[96])\n    # print(a[97])\n    # print(a[98])\n    # print(a[99])\n    # print(a[100])\n    # print(a[101])\n    # print(a[102])\n    # print(a[103])\n    # print(a[104])\n    # print(a[105])\n    # print(a[106])\n    # print(a[107])\n    # print(a[108])\n    # print(a[109])\n    # print(a[110])\n    # print(a[111])\n    # print(a[112])\n    # print(a[113])\n    # print(a[114])\n    # print(a[115])\n    # print(a[116])\n    # print(a[117])\n    # print(a[118])\n    # print(a[119])\n    # print(a[120])\n    # print(a[121])\n    # print(a[122])\n    # print(a[123])\n    # print(a[124])\n    # print(a[125])\n    # print(a[126])\n    # print(a[127])\n    # print(a[128])\n    # print(a[129])\n    # print(a[130])\n    # print(a[131])\n    # print(a[132])\n    # print(a[133])\n    # print(a[134])\n    # print(a[135])\n    # print(a[136])\n    # print(a[137])\n    # print(a[138])\n    # print(a[139])\n    # print(a[140])\n    # print(a[141])\n    # print(a[142])\n    # print(a[143])\n    # print(a[144])\n    # print(a[145])\n    # print(a[146])\n    # print(a[147])\n    # print(a[148])\n    # print(a[149])\n    # print(a[150])\n    # print(a[151])\n    # print(a[152])\n    # print(a[153])\n    # print(a[154])\n    # print(a[155])\n    # print(a[156])\n    # print(a[157])\n    # print(a[158])\n    # print(a[159])\n    # print(a[160])\n    # print(a[161])\n    # print(a[162])\n    # print(a[163])\n    # print(a[164])\n    # print(a[165])\n    "
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v, t = map(int, stdin.split())\n        if t == 1:\n            graph[u].append((v, 1))\n            graph[v].append((u, 1))\n        else:\n            graph[u].append((v, 2))\n            graph[v].append((u, 2))\n    # print(graph)\n    # print(n, m, s)\n    # print(graph[s])\n    # print(graph[s][0])\n    # print(graph[s][0][0])\n    # print(graph[s][0][1])\n    # print(graph[s][1])\n    # print(graph[s][1][0])\n    # print(graph[s][1][1])\n    # print(graph[s][2])\n    # print(graph[s][2][0])\n    # print(graph[s][2][1])\n    # print(graph[s][3])\n    # print(graph[s][3][0])\n    # print(graph[s][3][1])\n    # print(graph[s][4])\n    # print(graph[s][4][0])\n    # print(graph[s][4][1])\n    # print(graph[s][5])\n    # print(graph[s][5][0])\n    # print(graph[s][5][1])\n    # print(graph[s][6])\n    # print(graph[s][6][0])\n    # print(graph[s][6][1])\n    # print(graph[s][7])\n    # print(graph[s][7][0])\n    # print(graph[s][7][1])\n    # print(graph[s][8])\n    # print(graph[s][8][0])\n    # print(graph[s][8][1])\n    # print(graph[s][9])\n    # print(graph[s][9][0])\n    # print(graph[s][9][1])\n    # print(graph[s][10])\n    # print(graph[s][10][0])\n    # print(graph[s][10][1])\n    # print(graph[s][11])\n    # print(graph[s][11][0])\n    # print(graph[s][11][1])\n    # print(graph[s][12])\n    # print(graph[s][12][0])\n    # print(graph[s][12][1])\n    # print(graph[s][13])\n    # print(graph[s][13][0])\n    # print(graph[s][13][1])\n    # print(graph[s][14])\n    # print(graph[s][14][0])\n    # print(graph[s][14][1])\n    # print(graph[s][15])\n    # print(graph[s][15][0])\n    # print(graph[s][15][1])\n    # print(graph[s][16])\n    # print(graph[s][16][0])\n    # print(graph[s][16][1])\n    # print(graph[s][17])\n    # print(graph[s][17][0])\n    # print(graph[s][17][1])\n    # print(graph[s][18])\n    # print(graph[s][18][0])\n    # print(graph[s][18][1])\n    # print(graph[s][19])\n    # print(graph[s][19][0])\n    # print(graph[s][19][1])\n    # print(graph[s][20])\n    # print(graph[s][20][0])\n    # print(graph[s][20][1])\n    # print(graph[s][21])\n    # print(graph[s][21][0])\n    # print(graph[s][21][1])\n    # print(graph[s][22])\n    # print(graph[s][22][0])\n    # print(graph[s][22][1])\n    # print(graph[s][23])\n    # print(graph[s][23][0])\n    # print(graph[s][23][1])\n    # print(graph[s][24])\n    # print(graph[s][24][0])\n    # print(graph[s][24][1])\n    # print(graph[s][25])\n    # print(graph[s][25][0])\n    # print(graph[s][25][1])\n    # print(graph[s][26])\n    # print(graph[s][26][0])\n    # print(graph[s][26][1])\n    # print(graph[s][27])\n    # print(graph[s][27][0])\n    # print(graph[s][27][1])\n    # print(graph[s][28])\n    # print(graph[s][28][0])\n    # print(graph[s][28][1])\n    # print(graph[s][29])\n    # print(graph[s][29][0])\n    # print(graph[s][29][1])\n    # print(graph[s][30])\n    # print(graph[s][30][0])\n    # print(graph[s][30][1])\n    # print(graph[s][31])\n    # print(graph[s][31][0])\n    # print(graph[s][31][1])\n    # print(graph[s][32])\n    # print(graph[s][32][0])\n    # print(graph[s][32][1])\n    # print(graph[s][33])\n    # print(graph[s][33][0])\n    # print(graph[s][33][1])\n    # print(graph[s][34])\n    "
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = a.replace('0', '')\n    a = a.replace('1', '6')\n    a = a.replace('2', '8')\n    a = a.replace('3', '9')\n    a = a.replace('4', '1')\n    a = a.replace('5', '5')\n    a = a.replace('6', '9')\n    a = a.replace('7', '7')\n    a = a.replace('8', '8')\n    a = a.replace('9', '6')\n    a = a.replace('0', '0')\n    if len(a) == 1:\n        return a\n    if len(a) == 2:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 3:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 4:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 5:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 6:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 7:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 8:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 9:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 10:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 11:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 12:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 13:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 14:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 15:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 16:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 17:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 18:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 19:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 20:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 21:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 22:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 23:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 24:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 25:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 26:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 27:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 28:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 29:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 30:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 31:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 32:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 33:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 34:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 35:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 36:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 37:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 38:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 39:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 40:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 41:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 42:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 43:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 44:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 45:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 46:\n        if int(a) % 7 == 0:\n            return a\n        else:\n            return '0'\n    if len(a) == 47:\n        if int(a) % 7 == 0:\n            "
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    visited.add(1)\n    q = deque([1])\n    while q:\n        cur = q.popleft()\n        for nxt in graph[cur]:\n            if nxt not in visited:\n                visited.add(nxt)\n                q.append(nxt)\n    if len(visited) == n:\n        return -1\n    return len(visited) - 1\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(x[i] - x[i - 1])\n    return str(ans % (10 ** 9 + 7))"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        if a[0] == 0:\n            return -1\n        else:\n            return 0\n    if n == 2:\n        if a[0] == 0 and a[1] == 0:\n            return -1\n        elif a[0] == 0:\n            return 1\n        elif a[1] == 0:\n            return 1\n        else:\n            return 2\n    if n == 3:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0:\n            return -1\n        elif a[0] == 0:\n            return 1\n        elif a[1] == 0:\n            return 1\n        elif a[2] == 0:\n            return 1\n        else:\n            return 2\n    if n == 4:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0:\n            return -1\n        elif a[0] == 0:\n            return 1\n        elif a[1] == 0:\n            return 1\n        elif a[2] == 0:\n            return 1\n        elif a[3] == 0:\n            return 1\n        else:\n            return 2\n    if n == 5:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0:\n            return -1\n        elif a[0] == 0:\n            return 1\n        elif a[1] == 0:\n            return 1\n        elif a[2] == 0:\n            return 1\n        elif a[3] == 0:\n            return 1\n        elif a[4] == 0:\n            return 1\n        else:\n            return 2\n    if n == 6:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0:\n            return -1\n        elif a[0] == 0:\n            return 1\n        elif a[1] == 0:\n            return 1\n        elif a[2] == 0:\n            return 1\n        elif a[3] == 0:\n            return 1\n        elif a[4] == 0:\n            return 1\n        elif a[5] == 0:\n            return 1\n        else:\n            return 2\n    if n == 7:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0:\n            return -1\n        elif a[0] == 0:\n            return 1\n        elif a[1] == 0:\n            return 1\n        elif a[2] == 0:\n            return 1\n        elif a[3] == 0:\n            return 1\n        elif a[4] == 0:\n            return 1\n        elif a[5] == 0:\n            return 1\n        elif a[6] == 0:\n            return 1\n        else:\n            return 2\n    if n == 8:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0:\n            return -1\n        elif a[0] == 0:\n            return 1\n        elif a[1] == 0:\n            return 1\n        elif a[2] == 0:\n            return 1\n        elif a[3] == 0:\n            return 1\n        elif a[4] == 0:\n            return 1\n        elif a[5] == 0:\n            return 1\n        elif a[6] == 0:\n            return 1\n        elif a[7] == 0:\n            return 1\n        else:\n            return 2\n    if n == 9:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0:\n            return -1\n        elif a[0] == 0:\n            return 1\n        elif a[1] == 0:\n            return 1\n        elif a[2] == 0:\n            return 1\n        elif a[3] == 0:\n            return 1\n        elif a[4] == 0:\n            return 1\n        elif a[5] == 0:\n            return 1\n        elif a[6] == 0:\n            return 1\n        elif a[7] == 0:\n            return 1\n        elif a[8] == 0:\n            return 1\n        else:\n            return 2\n    if n == 10:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0:\n            return -1\n        elif a[0] == 0:\n            return 1\n        elif a[1] == 0:\n            return 1\n        elif a[2] == 0:\n            return 1\n        elif a[3] =="
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    return str(min(n - 1, m - 1, k - 1))"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lights = []\n    for i in range(n):\n        lights.append(stdin[i])\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int, lights))\n    lights = list(map(int"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (n % 2)!= (k % 2):\n        return \"0\"\n    if (n % 2) == (k % 2):\n        return \"1\""
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    p = 1\n    q = 1\n    for i in range(n):\n        p *= a[i]\n        q *= a[i]\n    return str(p // (10 ** 9 + 7)) + '/' + str(q // (10 ** 9 + 7))\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(n):\n        res.append(0)\n    for i in range(n - 1):\n        p, w = map(int, stdin.split())\n        if a[p - 1] < a[i]:\n            res[i] += 1\n        if a[i] < a[w - 1]:\n            res[i] += 1\n    return''.join(map(str, res))"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ratings = list(map(int, stdin.split()[1:]))\n    ratings.sort()\n    if n == 1:\n        return str(ratings[0])\n    if n == 2:\n        return str(ratings[0] - ratings[1])\n    if n == 3:\n        return str(ratings[0] - ratings[1] - ratings[2])\n    if n == 4:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3])\n    if n == 5:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4])\n    if n == 6:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5])\n    if n == 7:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6])\n    if n == 8:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7])\n    if n == 9:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8])\n    if n == 10:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9])\n    if n == 11:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10])\n    if n == 12:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10] - ratings[11])\n    if n == 13:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10] - ratings[11] - ratings[12])\n    if n == 14:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10] - ratings[11] - ratings[12] - ratings[13])\n    if n == 15:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10] - ratings[11] - ratings[12] - ratings[13] - ratings[14])\n    if n == 16:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10] - ratings[11] - ratings[12] - ratings[13] - ratings[14] - ratings[15])\n    if n == 17:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10] - ratings[11] - ratings[12] - ratings[13] - ratings[14] - ratings[15] - ratings[16])\n    if n == 18:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10] - ratings[11] - ratings[12] - ratings[13] - ratings[14] - ratings[15] - ratings[16] - ratings[17])\n    if n == 19:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10] - ratings[11] - ratings[12] - ratings[13] - ratings[14] - ratings[15] - ratings[16] - ratings[17] - ratings[18])\n    if n == 20:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10] - ratings[11] - ratings[12] - ratings[13] - ratings[14] - ratings[15] - ratings[16] - ratings[17] - ratings[18] - ratings[19])\n    if n == 21:\n        return str(ratings[0] - ratings[1] - ratings[2] - ratings[3] - ratings[4] - ratings[5] - ratings[6] - ratings[7] - ratings[8] - ratings[9] - ratings[10] - ratings[11] - ratings[12] - ratings[13] - ratings[14] - ratings[15] - ratings[16] - ratings[17] - ratings[18] - ratings[19] - ratings[20])\n    if n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    tiles = []\n    for i in range(N):\n        tiles.append(stdin[i*4:i*4+4])\n    tiles = sorted(tiles)\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21]))\n    tiles = sorted(tiles, key=lambda x: (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22]))\n    tiles = sorted"
    }
]