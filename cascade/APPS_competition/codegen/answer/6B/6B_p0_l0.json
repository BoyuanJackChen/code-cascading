[
    {
        "number": 3000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bracket_sequence = stdin.readline().strip()\n    bracket_sequence = bracket_sequence.replace('(','')\n    bracket_sequence = bracket_sequence.replace(')','')\n    bracket_sequence = bracket_sequence.split()\n    bracket_sequence = [int(x) for x in bracket_sequence]\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!= '(']\n    bracket_sequence = [x for x in bracket_sequence if x!= ')']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for x in bracket_sequence if x!='']\n    bracket_sequence = [x for"
    },
    {
        "number": 3001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n"
    },
    {
        "number": 3002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    entries = [int(x) for x in stdin.split()]\n    if len(entries) < 3:\n        return \"insufficient service\"\n    if entries[0] < 1950 or entries[0] > 2050:\n        return \"tampered odometer\"\n    if entries[1] < 1 or entries[1] > 12:\n        return \"tampered odometer\"\n    if entries[2] < 0 or entries[2] > 99999:\n        return \"tampered odometer\"\n    if entries[1] == 1:\n        return \"insufficient service\"\n    if entries[1] == 12:\n        return \"seems legit\"\n    if entries[1] == 2:\n        return \"seems legit\"\n    if entries[1] == 3:\n        return \"seems legit\"\n    if entries[1] == 4:\n        return \"seems legit\"\n    if entries[1] == 5:\n        return \"seems legit\"\n    if entries[1] == 6:\n        return \"seems legit\"\n    if entries[1] == 7:\n        return \"seems legit\"\n    if entries[1] == 8:\n        return \"seems legit\"\n    if entries[1] == 9:\n        return \"seems legit\"\n    if entries[1] == 10:\n        return \"seems legit\"\n    if entries[1] == 11:\n        return \"seems legit\"\n    if entries[1] == 12:\n        return \"seems legit\"\n    if entries[1] == 1:\n        return \"seems legit\"\n    if entries[1] == 2:\n        return \"seems legit\"\n    if entries[1] == 3:\n        return \"seems legit\"\n    if entries[1] == 4:\n        return \"seems legit\"\n    if entries[1] == 5:\n        return \"seems legit\"\n    if entries[1] == 6:\n        return \"seems legit\"\n    if entries[1] == 7:\n        return \"seems legit\"\n    if entries[1] == 8:\n        return \"seems legit\"\n    if entries[1] == 9:\n        return \"seems legit\"\n    if entries[1] == 10:\n        return \"seems legit\"\n    if entries[1] == 11:\n        return \"seems legit\"\n    if entries[1] == 12:\n        return \"seems legit\"\n    if entries[1] == 1:\n        return \"seems legit\"\n    if entries[1] == 2:\n        return \"seems legit\"\n    if entries[1] == 3:\n        return \"seems legit\"\n    if entries[1] == 4:\n        return \"seems legit\"\n    if entries[1] == 5:\n        return \"seems legit\"\n    if entries[1] == 6:\n        return \"seems legit\"\n    if entries[1] == 7:\n        return \"seems legit\"\n    if entries[1] == 8:\n        return \"seems legit\"\n    if entries[1] == 9:\n        return \"seems legit\"\n    if entries[1] == 10:\n        return \"seems legit\"\n    if entries[1] == 11:\n        return \"seems legit\"\n    if entries[1] == 12:\n        return \"seems legit\"\n    if entries[1] == 1:\n        return \"seems legit\"\n    if entries[1] == 2:\n        return \"seems legit\"\n    if entries[1] == 3:\n        return \"seems legit\"\n    if entries[1] == 4:\n        return \"seems legit\"\n    if entries[1] == 5:\n        return \"seems legit\"\n    if entries[1] == 6:\n        return \"seems legit\"\n    if entries[1] == 7:\n        return \"seems legit\"\n    if entries[1] == 8:\n        return \"seems legit\"\n    if entries[1] == 9:\n        return \"seems legit\"\n    if entries[1] == 10:\n        return \"seems legit\"\n    if entries[1] == 11:\n        return \"seems legit\"\n    if entries[1] == 12:\n        return \"seems legit\"\n    if entries[1] == 1:\n        return \"seems legit\"\n    if entries[1] == 2:\n        return \"seems legit\"\n    if entries[1] == 3:\n        return \"seems legit\"\n    if entries[1] == 4:\n        return \"seems legit\"\n    if entries[1] == 5:\n        return \"seems legit\"\n    if entries[1] == 6:\n        return \"seems legit\"\n    if entries[1] == 7:\n        return \"seems legit\"\n    if entries[1] == 8:\n        return \"seems legit\"\n    if entries[1] == 9:\n        return \"seems legit\"\n    if entries[1] == 10:\n        return \"seems legit\"\n    if entries[1] == 11:\n        return"
    },
    {
        "number": 3003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        graph[i] = [int(x) for x in stdin.readline().split()]\n    return str(solve(graph))\n\ndef"
    },
    {
        "number": 3004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 0:\n        return \"IMPOSSIBLE\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n =="
    },
    {
        "number": 3005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(factoring(stdin))\n\ndef"
    },
    {
        "number": 3006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    program1 = stdin.splitlines()[0]\n    program2 = stdin.splitlines()[1]\n    program1 = [x for x in program1.split()]\n    program2 = [x for x in program2.split()]\n    program1 = [int(x) for x in program1]\n    program2 = [int(x) for x in program2]\n    program1 = program1[1:]\n    program2 = program2[1:]\n    if program1 == program2:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 3007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, b, f, t0, t1, t2 = [int(x) for x in stdin.split()]\n    return str(max(0, (b + (f * t0) + (f * t1) + (f * t2) - (d * 100))))"
    },
    {
        "number": 3008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    a_set = set(a)\n    b_set = set(b)\n    a_set.discard(0)\n    b_set.discard(0)\n    a_set.discard(K)\n    b_set.discard(K)\n    a_set.discard(K + 1)\n    b_set.discard(K + 1)\n    a_set.discard(K + 2)\n    b_set.discard(K + 2)\n    a_set.discard(K + 3)\n    b_set.discard(K + 3)\n    a_set.discard(K + 4)\n    b_set.discard(K + 4)\n    a_set.discard(K + 5)\n    b_set.discard(K + 5)\n    a_set.discard(K + 6)\n    b_set.discard(K + 6)\n    a_set.discard(K + 7)\n    b_set.discard(K + 7)\n    a_set.discard(K + 8)\n    b_set.discard(K + 8)\n    a_set.discard(K + 9)\n    b_set.discard(K + 9)\n    a_set.discard(K + 10)\n    b_set.discard(K + 10)\n    a_set.discard(K + 11)\n    b_set.discard(K + 11)\n    a_set.discard(K + 12)\n    b_set.discard(K + 12)\n    a_set.discard(K + 13)\n    b_set.discard(K + 13)\n    a_set.discard(K + 14)\n    b_set.discard(K + 14)\n    a_set.discard(K + 15)\n    b_set.discard(K + 15)\n    a_set.discard(K + 16)\n    b_set.discard(K + 16)\n    a_set.discard(K + 17)\n    b_set.discard(K + 17)\n    a_set.discard(K + 18)\n    b_set.discard(K + 18)\n    a_set.discard(K + 19)\n    b_set.discard(K + 19)\n    a_set.discard(K + 20)\n    b_set.discard(K + 20)\n    a_set.discard(K + 21)\n    b_set.discard(K + 21)\n    a_set.discard(K + 22)\n    b_set.discard(K + 22)\n    a_set.discard(K + 23)\n    b_set.discard(K + 23)\n    a_set.discard(K + 24)\n    b_set.discard(K + 24)\n    a_set.discard(K + 25)\n    b_set.discard(K + 25)\n    a_set.discard(K + 26)\n    b_set.discard(K + 26)\n    a_set.discard(K + 27)\n    b_set.discard(K + 27)\n    a_set.discard(K + 28)\n    b_set.discard(K + 28)\n    a_set.discard(K + 29)\n    b_set.discard(K + 29)\n    a_set.discard(K + 30)\n    b_set.discard(K + 30)\n    a_set.discard(K + 31)\n    b_set.discard(K + 31)\n    a_set.discard(K + 32)\n    b_set.discard(K + 32)\n    a_set.discard(K + 33)\n    b_set.discard(K + 33)\n    a_set.discard(K + 34)\n    b_set.discard(K + 34)\n    a_set.discard(K + 35)\n    b_set.discard(K + 35)\n    a_set.discard(K + 36)\n    b_set.discard(K + 36)\n    a_set.discard(K + 37)\n    b_set.discard(K + 37)\n    a_set.discard(K + 38)\n    b_set.discard(K + 38)\n    a_set.discard(K + 39)\n    b_set.discard(K + 39)\n    a_set.discard(K + 40)\n    b_set.discard(K + 40)\n    a_set.discard(K + 41)\n    b_set.discard(K + 41)\n    a_set.discard(K + 42)\n    b_set.discard(K + 42)\n    a_set.discard(K + 43)\n    b_set.discard(K + 43)\n    a_set.discard(K + 44)\n    b_set.discard(K + 44)\n    a_set.discard(K + 45)\n    b_set.discard(K + 45)\n    a_set.discard(K + 46)\n    b_set.discard(K + 46)\n    a_set.discard(K + 47)\n    b_set.discard(K + 47)\n    a_set.discard(K + 48)\n    b_set.discard(K + 48)\n    a_set.discard(K + 49)\n    b_set.discard(K + 49)\n    a_set.discard(K + 50)\n    b_set.discard(K + 50)\n    a_set.discard(K + 51)\n    b_set.discard(K + 51)\n    a_set.discard(K + 52)\n    b_set.discard(K + 52)\n    a_set.discard(K + 53)\n    b_set.discard(K + 53)\n    a_set."
    },
    {
        "number": 3009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    lamps = []\n    for i in range(1, n + 1):\n        x, y, e = map(int, lines[i].split())\n        lamps.append((x, y, e))\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0])\n    lamps.sort(key=lambda x: x[1])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] + x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[2])\n    lamps."
    },
    {
        "number": 3010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lines = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    lines.sort()\n    points = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lines[i][0] == lines[j][0] or lines[i][1] == lines[j][1] or lines[i][2] == lines[j][2] or lines[i][3] == lines[j][3]:\n                points.add(lines[i][0])\n                points.add(lines[i][1])\n                points.add(lines[i][2])\n                points.add(lines[i][3])\n                points.add(lines[j][0])\n                points.add(lines[j][1])\n                points.add(lines[j][2])\n                points.add(lines[j][3])\n    return str(len(points))"
    },
    {
        "number": 3011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    if n % 2 == 0:\n        return str(n)\n    if n % 10 == 1:\n        return str(n - 1)\n    if n % 10 == 2:\n        return str(n - 2)\n    if n % 10 == 3:\n        return str(n - 3)\n    if n % 10 == 4:\n        return str(n - 4)\n    if n % 10 == 5:\n        return str(n - 5)\n    if n % 10 == 6:\n        return str(n - 6)\n    if n % 10 == 7:\n        return str(n - 7)\n    if n % 10 == 8:\n        return str(n - 8)\n    if n % 10 == 9:\n        return str(n - 9)\n    return str(n - 10)"
    },
    {
        "number": 3012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A11, A12, A21, A22, N = [int(x) for x in stdin.split()]\n    A = [[A11, A12], [A21, A22]]\n    A_prime = [[A11, A12], [A21, A22]]\n    for i in range(N):\n        A_prime[0][0] += A[0][0]\n        A_prime[0][1] += A[0][1]\n        A_prime[1][0] += A[1][0]\n        A_prime[1][1] += A[1][1]\n        A[0][0] += A[1][0]\n        A[0][1] += A[1][1]\n        A[1][0] += A[0][0]\n        A[1][1] += A[0][1]\n    A_prime[0][0] %= 1000000007\n    A_prime[0][1] %= 1000000007\n    A_prime[1][0] %= 1000000007\n    A_prime[1][1] %= 1000000007\n    A[0][0] %= 1000000007\n    A[0][1] %= 1000000007\n    A[1][0] %= 1000000007\n    A[1][1] %= 1000000007\n    return str(A_prime[0][0] * A_prime[1][1] - A_prime[0][1] * A_prime[1][0])"
    },
    {
        "number": 3013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, t_x, t_y = [float(x) for x in stdin.split()]\n    r = b * math.pi\n    x = t_x / r\n    y = t_y / r\n    return f'{x:.5f} {y:.5f}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n < 1 or n > 10**5 or m < 0 or m > 2 * 10**5:\n        return \"0\"\n    edges = [set() for _ in range(n)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        if u > v:\n            u, v = v, u\n        edges[u].add(v)\n        edges[v].add(u)\n    visited = [False] * n\n    def dfs(u: int) -> int:\n        visited[u] = True\n        for v in edges[u]:\n            if not visited[v]:\n                dfs(v)\n        return 1\n    res = 0\n    for i in range(n):\n        if not visited[i]:\n            res += dfs(i)\n    return str(res)"
    },
    {
        "number": 3015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = [int(x) for x in stdin.split()]\n    tubes = [None] * m\n    for i in range(m):\n        a, b, w = [int(x) for x in stdin.split()]\n        tubes[i] = (a, b, w)\n    tubes.sort(key=lambda x: x[2])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key="
    },
    {
        "number": 3016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l, s = [int(x) for x in stdin.split()]\n    colors = [int(x) for x in stdin.split()]\n    colors.sort()\n    colors = colors[::-1]\n    colors = colors[:k]\n    colors = colors[::-1]\n    colors = colors[:l]\n    colors = colors[::-1]\n    colors = colors[:s]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:n-k]\n    colors = colors[::-1]\n    colors = colors[:"
    },
    {
        "number": 3017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = [int(x) for x in stdin.split()]\n    return str(len(set(str(x) for x in range(n) if str(x).count('2') == e)))"
    },
    {
        "number": 3018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, T = [int(x) for x in stdin.split()]\n    rolls = [int(x) for x in stdin.split()]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:K]\n    rolls.sort()\n    rolls.reverse()\n    rolls = rolls[:"
    },
    {
        "number": 3019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = [int(x) for x in stdin.readline().strip().split()]\n    s.sort()\n    s.reverse()\n    s_set = set(s)\n    s_set.discard(0)\n    s_set.discard(1)\n    s_set.discard(2)\n    s_set.discard(3)\n    s_set.discard(4)\n    s_set.discard(5)\n    s_set.discard(6)\n    s_set.discard(7)\n    s_set.discard(8)\n    s_set.discard(9)\n    s_set.discard(10)\n    s_set.discard(11)\n    s_set.discard(12)\n    s_set.discard(13)\n    s_set.discard(14)\n    s_set.discard(15)\n    s_set.discard(16)\n    s_set.discard(17)\n    s_set.discard(18)\n    s_set.discard(19)\n    s_set.discard(20)\n    s_set.discard(21)\n    s_set.discard(22)\n    s_set.discard(23)\n    s_set.discard(24)\n    s_set.discard(25)\n    s_set.discard(26)\n    s_set.discard(27)\n    s_set.discard(28)\n    s_set.discard(29)\n    s_set.discard(30)\n    s_set.discard(31)\n    s_set.discard(32)\n    s_set.discard(33)\n    s_set.discard(34)\n    s_set.discard(35)\n    s_set.discard(36)\n    s_set.discard(37)\n    s_set.discard(38)\n    s_set.discard(39)\n    s_set.discard(40)\n    s_set.discard(41)\n    s_set.discard(42)\n    s_set.discard(43)\n    s_set.discard(44)\n    s_set.discard(45)\n    s_set.discard(46)\n    s_set.discard(47)\n    s_set.discard(48)\n    s_set.discard(49)\n    s_set.discard(50)\n    s_set.discard(51)\n    s_set.discard(52)\n    s_set.discard(53)\n    s_set.discard(54)\n    s_set.discard(55)\n    s_set.discard(56)\n    s_set.discard(57)\n    s_set.discard(58)\n    s_set.discard(59)\n    s_set.discard(60)\n    s_set.discard(61)\n    s_set.discard(62)\n    s_set.discard(61)\n    s_set.discard(60)\n    s_set.discard(59)\n    s_set.discard(58)\n    s_set.discard(57)\n    s_set.discard(56)\n    s_set.discard(55)\n    s_set.discard(54)\n    s_set.discard(53)\n    s_set.discard(52)\n    s_set.discard(51)\n    s_set.discard(50)\n    s_set.discard(49)\n    s_set.discard(48)\n    s_set.discard(47)\n    s_set.discard(46)\n    s_set.discard(45)\n    s_set.discard(44)\n    s_set.discard(43)\n    s_set.discard(42)\n    s_set.discard(41)\n    s_set.discard(40)\n    s_set.discard(39)\n    s_set.discard(38)\n    s_set.discard(37)\n    s_set.discard(36)\n    s_set.discard(35)\n    s_set.discard(34)\n    s_set.discard(33)\n    s_set.discard(32)\n    s_set.discard(31)\n    s_set.discard(30)\n    s_set.discard(29)\n    s_set.discard(28)\n    s_set.discard(27)\n    s_set.discard(26)\n    s_set.discard(25)\n    s_set.discard(24)\n    s_set.discard(23)\n    s_set.discard(22)\n    s_set.discard(21)\n    s_set.discard(20)\n    s_set.discard(19)\n    s_set.discard(18)\n    s_set.discard(17)\n    s_set.discard(16)\n    s_set.discard(15)\n    s_set.discard(14)\n    s_set.discard(13)\n    s_set.discard(12)\n    s_set.discard(11)\n    s_set.discard(10)\n    s_set.discard(9)\n    s_set.discard(8)\n    s_set.discard(7)\n    s_set.discard(6)\n    s_set.discard(5)\n    s_set.discard(4)\n    s_set.discard(3)\n    s_set.discard(2)\n    s_set.discard(1)\n    s_set.discard(0)\n    s_set.discard(62)\n    s_set.discard(61)\n    s_set.discard(60)\n    s_set.discard(59)\n    s_set.discard(58)\n    s_set.discard(57)\n    s_set.discard(56)\n    s_set.discard(55)\n    s_set.discard(54)\n    s_set.discard(53)\n    s_set.discard(52)\n    s_set.discard(51)\n    s_set.discard(50)\n    s_set.discard(49)\n    s_set.discard(48)\n    "
    },
    {
        "number": 3020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    while a * a <= n:\n        a += 1\n    if a * a > n:\n        return '-1'\n    return str(a)"
    },
    {
        "number": 3021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    L, N = [int(x) for x in stdin.split()]\n    # Read the strings\n    strings = [stdin.split()[i] for i in range(N)]\n    # Create the alphabet\n    alphabet = [chr(i) for i in range(L, L + 26)]\n    # Create the alphabet\n    alphabet_dict = {alphabet[i]: i for i in range(len(alphabet))}\n    # Create the alphabet\n    alphabet_dict_rev = {i: alphabet[i] for i in range(len(alphabet))}\n    # Create the alphabet\n    alphabet_dict_rev_rev = {alphabet_dict_rev[i]: i for i in range(len(alphabet_dict_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev = {alphabet_dict_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alphabet_dict_rev_rev_rev_rev_rev_rev_rev_rev_rev = {alphabet_dict_rev_rev_rev_rev_rev_rev_rev[i]: i for i in range(len(alphabet_dict_rev_rev_rev_rev_rev_rev_rev))}\n    # Create the alphabet\n    alph"
    },
    {
        "number": 3022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(x) for x in stdin.split()]\n    return str(max(0, (N - 1) * (A + B + C) - (A * B * C)))"
    },
    {
        "number": 3023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = [int(x) for x in stdin.split()]\n    candles = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    cuts = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    return \"yes\" if check(candles, cuts, r) else \"no\"\n\ndef"
    },
    {
        "number": 3024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    g = [int(x) for x in stdin.split()]\n    g.sort()\n    g.reverse()\n    g.append(0)\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    g.append(g[-1] + g[-2])\n    "
    },
    {
        "number": 3026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = [int(x) for x in stdin.readline().strip().split()]\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if seq[i] > seq[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    result = []\n    for i in range(n):\n        if lis[i] == n - i:\n            result.append(seq[i])\n    if len(result) == 0:\n        return \"-1\"\n    return \" \".join(map(str, result))"
    },
    {
        "number": 3027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(x) for x in stdin.split()]\n    board = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board[i][j] = 1\n            else:\n                board[i][j] = p\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == p:\n                board"
    },
    {
        "number": 3029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nodes = [int(stdin.readline().strip()) for _ in range(n)]\n    parents = [int(stdin.readline().strip()) for _ in range(n)]\n    nodes.insert(0, 0)\n    parents.insert(0, -1)\n    nodes.append(n)\n    parents.append(-1)\n    nodes = [nodes]\n    parents = [parents]\n    for i in range(1, n + 1):\n        nodes.append([])\n        parents.append([])\n        for j in range(1, n + 1):\n            if i == j:\n                nodes[i].append(0)\n                parents[i].append(-1)\n            else:\n                nodes[i].append(nodes[i - 1][j - 1] + 1)\n                parents[i].append(parents[i - 1][j - 1])\n    max_length = 0\n    max_paths = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if nodes[i][j] > max_length:\n                max_length = nodes[i][j]\n                max_paths = 1\n            elif nodes[i][j] == max_length:\n                max_paths += 1\n    return str(max_length) + \" \" + str(max_paths)\n"
    },
    {
        "number": 3030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nodes = [int(x) for x in stdin.readline().strip().split()]\n    nodes.sort(reverse=True)\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0, 0)\n    nodes.insert(0"
    },
    {
        "number": 3031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    colors = set()\n    for a, b, c in edges:\n        colors.add(c)\n    good_nodes = [i for i in range(1, n + 1) if all(a!= b for a, b, c in edges if c == i)]\n    return str(len(good_nodes)) + '\\n' + '\\n'.join(map(str, good_nodes))"
    },
    {
        "number": 3032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, s = [int(x) for x in stdin.split()]\n    program = [x for x in stdin.split()]\n    return str(solution_helper(b, s, program))\n\ndef"
    },
    {
        "number": 3033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B, N = [int(x) for x in stdin.split()]\n    if B > 10 or B < 2:\n        return \"impossible\"\n    if N > (2 ** 63) - 1 or N < 0:\n        return \"impossible\"\n    return str(f(N, B))\n\ndef"
    },
    {
        "number": 3034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, t, c, r = [int(x) for x in stdin.split()]\n    clouds = [{'s': int(x[0]), 'e': int(x[1]), 'p': float(x[2]), 'a': int(x[3])} for x in [x.split() for x in stdin.split('\\n')[:-1]]]\n    roofs = [{'x': int(x[0]), 'y': int(x[1])} for x in [x.split() for x in stdin.split('\\n')[-1].split(';')]]\n    return str(min(d - t, min(d - t, sum(clouds[i]['a'] for i in range(c)))))"
    },
    {
        "number": 3035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, m, d, n, *ingredients = [int(x) for x in stdin.split()]\n    brands = [int(x) for x in stdin.split()]\n    dishes = [int(x) for x in stdin.split()]\n    dishes = [dishes[:s], dishes[s:s+m], dishes[s+m:]]\n    dishes = [set(dishes[0]), set(dishes[1]), set(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes[0]).union(dishes[2])]\n    dishes = [set(dishes[0]).union(dishes[1]), set(dishes[1]).union(dishes[2]), set(dishes"
    },
    {
        "number": 3037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin.readline().strip())\n    k = int(stdin.readline().strip())\n    companies = []\n    for _ in range(k):\n        l, *n = map(int, stdin.readline().strip().split())\n        companies.append(n)\n    return min(solve(b, companies))\n\ndef"
    },
    {
        "number": 3039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the longest substring that occurs more than once in the input string.\n    \"\"\"\n    # Get the input string\n    s = stdin.strip()\n    # Get the length of the input string\n    n = len(s)\n    # Create a dictionary to store the characters and their counts\n    d = {}\n    # Create a list to store the characters and their counts\n    l = []\n    # Create a list to store the characters and their counts\n    r = []\n    # Create a list to store the characters and their counts\n    s = []\n    # Create a list to store the characters and their counts\n    t = []\n    # Create a list to store the characters and their counts\n    u = []\n    # Create a list to store the characters and their counts\n    v = []\n    # Create a list to store the characters and their counts\n    w = []\n    # Create a list to store the characters and their counts\n    x = []\n    # Create a list to store the characters and their counts\n    y = []\n    # Create a list to store the characters and their counts\n    z = []\n    # Create a list to store the characters and their counts\n    aa = []\n    # Create a list to store the characters and their counts\n    ab = []\n    # Create a list to store the characters and their counts\n    ac = []\n    # Create a list to store the characters and their counts\n    ad = []\n    # Create a list to store the characters and their counts\n    ae = []\n    # Create a list to store the characters and their counts\n    af = []\n    # Create a list to store the characters and their counts\n    ag = []\n    # Create a list to store the characters and their counts\n    ah = []\n    # Create a list to store the characters and their counts\n    ai = []\n    # Create a list to store the characters and their counts\n    aj = []\n    # Create a list to store the characters and their counts\n    ak = []\n    # Create a list to store the characters and their counts\n    al = []\n    # Create a list to store the characters and their counts\n    am = []\n    # Create a list to store the characters and their counts\n    an = []\n    # Create a list to store the characters and their counts\n    ao = []\n    # Create a list to store the characters and their counts\n    ap = []\n    # Create a list to store the characters and their counts\n    aq = []\n    # Create a list to store the characters and their counts\n    ar = []\n    # Create a list to store the characters and their counts\n    as = []\n    # Create a list to store the characters and their counts\n    at = []\n    # Create a list to store the characters and their counts\n    au = []\n    # Create a list to store the characters and their counts\n    av = []\n    # Create a list to store the characters and their counts\n    aw = []\n    # Create a list to store the characters and their counts\n    ay = []\n    # Create a list to store the characters and their counts\n    az = []\n    # Create a list to store the characters and their counts\n    ba = []\n    # Create a list to store the characters and their counts\n    bb = []\n    # Create a list to store the characters and their counts\n    bc = []\n    # Create a list to store the characters and their counts\n    bd = []\n    # Create a list to store the characters and their counts\n    be = []\n    # Create a list to store the characters and their counts\n    bf = []\n    # Create a list to store the characters and their counts\n    bg = []\n    # Create a list to store the characters and their counts\n    bh = []\n    # Create a list to store the characters and their counts\n    bi = []\n    # Create a list to store the characters and their counts\n    bj = []\n    # Create a list to store the characters and their counts\n    bk = []\n    # Create a list to store the characters and their counts\n    bl = []\n    # Create a list to store the characters and their counts\n    bm = []\n    # Create a list to store the characters and their counts\n    bn = []\n    # Create a list to store the characters and their counts\n    bo = []\n    # Create a list to store the characters and their counts\n    bp = []\n    # Create a list to store the characters and their counts\n    bq = []\n    # Create a list to store the characters and their counts\n    br = []\n    # Create a list to store the characters and their counts\n    bs = []\n    # Create a list to store the characters and their counts\n    bt = []\n    # Create a list to store the characters and their counts\n    bu = []\n    # Create a list to store the characters and their counts\n    bv = []\n    # Create a list to store the characters and their counts\n    bw = []\n    # Create a list to store the characters and their counts\n    by = []\n    # Create a list to store the characters and their counts\n    bz = []\n    # Create a list to store the characters and their counts\n    ca = []\n    # Create a list to store the characters and their counts\n    cb = []\n    # Create a list to store the characters and their counts\n    cc = []\n    # Create a list to store the characters and their counts\n    cd = []\n    # Create a list to store the characters and their counts\n    ce = []\n    # Create a list to store the characters and their counts\n    cf = []\n    # Create a list to store the characters and their counts\n    cg = []\n    # Create a list to store the characters and their counts\n    ch = []\n    # Create a list to store the characters and their counts\n    ci = []\n    # Create a list to store the characters and their counts\n    cj = []\n    # Create a list to store the characters and their counts\n    ck = []\n    # Create a list to store the characters and their counts\n    cl = []\n    # Create a list to store the characters and their counts\n    cm = []\n    # Create a list to store the characters and their counts\n    cn = []\n    # Create a list to store the characters and their counts\n    co = []\n    # Create a list to store the characters and their counts\n    cp = []\n    # Create a list to store the characters and their counts\n    cq = []\n    # Create a list to store the characters and their counts\n    cr = []\n    # Create a list to store the characters and their counts\n    cs = []\n    # Create a list to store the characters and their counts\n    ct = []\n    # Create a list to store the characters and their counts\n    cu = []\n    # Create a list to store the characters and their counts\n    cv = []\n    # Create a list to store the characters and their counts\n    cw = []\n    # Create a list to store the characters and their counts\n    cx = []\n    # Create a list to store the characters and their counts\n    cy = []\n    # Create a list to store the characters and their counts\n    cz = []\n    # Create a list to store the characters and their counts\n    da = []\n    # Create a list to store the characters and their counts\n    db = []\n    # Create a list to store the characters and their counts\n    dc = []\n    # Create a list to store the characters and their counts\n    dd = []\n    # Create a list to store the characters and their counts\n    de = []\n    # Create a list to store the characters and their counts\n    df = []\n    # Create a list to store the characters and their counts\n    dg = []\n    # Create a list to store the characters and their counts\n    dh = []\n    # Create a list to store the characters and their counts\n    di = []\n    # Create a list to store the characters and their counts\n    dj = []\n    # Create a list to store the characters and their counts\n    dk = []\n    # Create"
    },
    {
        "number": 3041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    coupons = [0] * (N + 1)\n    for _ in range(N):\n        A, B = map(int, stdin.readline().strip().split())\n        coupons[A] += 1\n        coupons[B] -= 1\n    coupons[0] = 0\n    for i in range(1, N + 1):\n        coupons[i] += coupons[i - 1]\n    return str(coupons[-1])"
    },
    {
        "number": 3042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nodes = [int(x) for x in stdin.readline().strip().split()]\n    return str(lcm(nodes))\n\ndef"
    },
    {
        "number": 3043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    beacons = []\n    for _ in range(N):\n        x, y, d = [int(x) for x in stdin.readline().strip().split()]\n        beacons.append((x, y, d))\n    receiver = (0, 0, 0)\n    for x, y, d in beacons:\n        if abs(receiver[0] - x) + abs(receiver[1] - y) > d:\n            return \"impossible\"\n    if len(beacons) == 1:\n        return f\"{receiver[0]},{receiver[1]}\"\n    return \"uncertain\""
    },
    {
        "number": 3046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        r1, c1 = map(int, stdin.readline().split())\n        r2, c2 = map(int, stdin.readline().split())\n        if r1 == r2 or c1 == c2:\n            print(1)\n        else:\n            print(2)"
    },
    {
        "number": 3047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    lines = stdin.splitlines()\n    # Get the number of rows\n    n = int(lines[0].split()[0])\n    # Get the number of columns\n    m = int(lines[0].split()[1])\n    # Get the number of burgers\n    burgers = int(lines[1].split()[0])\n    # Get the number of slop\n    slop = int(lines[1].split()[1])\n    # Get the number of sushi\n    sushi = int(lines[1].split()[2])\n    # Get the number of drumstick\n    drumstick = int(lines[1].split()[3])\n    # Get the number of monsters\n    monsters = int(lines[1].split()[4])\n    # Get the number of rows\n    n = int(lines[2].split()[0])\n    # Get the number of columns\n    m = int(lines[2].split()[1])\n    # Get the number of burgers\n    burgers = int(lines[2].split()[2])\n    # Get the number of slop\n    slop = int(lines[2].split()[3])\n    # Get the number of sushi\n    sushi = int(lines[2].split()[4])\n    # Get the number of drumstick\n    drumstick = int(lines[2].split()[5])\n    # Get the number of monsters\n    monsters = int(lines[2].split()[6])\n    # Get the number of rows\n    n = int(lines[3].split()[0])\n    # Get the number of columns\n    m = int(lines[3].split()[1])\n    # Get the number of burgers\n    burgers = int(lines[3].split()[2])\n    # Get the number of slop\n    slop = int(lines[3].split()[3])\n    # Get the number of sushi\n    sushi = int(lines[3].split()[4])\n    # Get the number of drumstick\n    drumstick = int(lines[3].split()[5])\n    # Get the number of monsters\n    monsters = int(lines[3].split()[6])\n    # Get the number of rows\n    n = int(lines[4].split()[0])\n    # Get the number of columns\n    m = int(lines[4].split()[1])\n    # Get the number of burgers\n    burgers = int(lines[4].split()[2])\n    # Get the number of slop\n    slop = int(lines[4].split()[3])\n    # Get the number of sushi\n    sushi = int(lines[4].split()[4])\n    # Get the number of drumstick\n    drumstick = int(lines[4].split()[5])\n    # Get the number of monsters\n    monsters = int(lines[4].split()[6])\n    # Get the number of rows\n    n = int(lines[5].split()[0])\n    # Get the number of columns\n    m = int(lines[5].split()[1])\n    # Get the number of burgers\n    burgers = int(lines[5].split()[2])\n    # Get the number of slop\n    slop = int(lines[5].split()[3])\n    # Get the number of sushi\n    sushi = int(lines[5].split()[4])\n    # Get the number of drumstick\n    drumstick = int(lines[5].split()[5])\n    # Get the number of monsters\n    monsters = int(lines[5].split()[6])\n    # Get the number of rows\n    n = int(lines[6].split()[0])\n    # Get the number of columns\n    m = int(lines[6].split()[1])\n    # Get the number of burgers\n    burgers = int(lines[6].split()[2])\n    # Get the number of slop\n    slop = int(lines[6].split()[3])\n    # Get the number of sushi\n    sushi = int(lines[6].split()[4])\n    # Get the number of drumstick\n    drumstick = int(lines[6].split()[5])\n    # Get the number of monsters\n    monsters = int(lines[6].split()[6])\n    # Get the number of rows\n    n = int(lines[7].split()[0])\n    # Get the number of columns\n    m = int(lines[7].split()[1])\n    # Get the number of burgers\n    burgers = int(lines[7].split()[2])\n    # Get the number of slop\n    slop = int(lines[7].split()[3])\n    # Get the number of sushi\n    sushi = int(lines[7].split()[4])\n    # Get the number of drumstick\n    drumstick = int(lines[7].split()[5])\n    # Get the number of monsters\n    monsters = int(lines[7].split()[6])\n    # Get the number of rows\n    n = int(lines[8].split()[0])\n    # Get the number of columns\n    m = int(lines[8].split()[1])\n    # Get the number of burgers\n    burgers = int(lines[8].split()[2])\n    # Get the number of slop\n    slop = int(lines[8].split()[3])\n    # Get the number of sushi\n    sushi = int(lines["
    },
    {
        "number": 3048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    roads = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n - 1)]\n    junctions = set(range(1, n + 1))\n    for u, v in roads:\n        if u in junctions and v in junctions:\n            junctions.remove(u)\n            junctions.remove(v)\n    return str(len(junctions))"
    },
    {
        "number": 3049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 3050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    program = stdin.readline().strip()\n    grid = [list(stdin.readline().strip()) for _ in range(N)]\n    robot = (0, 0)\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 'R':\n                robot = (i, j)\n    trail = [robot]\n    for c in program:\n        if c == '<':\n            robot = (robot[0] - 1, robot[1])\n        elif c == '>':\n            robot = (robot[0] + 1, robot[1])\n        elif c == 'v':\n            robot = (robot[0], robot[1] - 1)\n        elif c == '^':\n            robot = (robot[0], robot[1] + 1)\n        if grid[robot[0]][robot[1]] == '#':\n            robot = (robot[0], robot[1])\n        trail.append(robot)\n    if len(trail) == len(set(trail)):\n        return '1'\n    else:\n        return ''.join(str(len(trail) - len(set(trail))) for _ in range(len(trail)))"
    },
    {
        "number": 3051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    fogs = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    return str(solution_naive(fogs))\n\ndef"
    },
    {
        "number": 3052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(float, stdin.split())\n    N = int(stdin.readline())\n    conveyors = [map(float, stdin.readline().split()) for _ in range(N)]\n    conveyors.sort(key=lambda x: x[0])\n    conveyors.sort(key=lambda x: x[1])\n    conveyors.sort(key=lambda x: x[2])\n    conveyors.sort(key=lambda x: x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1])\n    conveyors.sort(key=lambda x: x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[2])\n    conveyors.sort(key=lambda x: x[1] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    conveyors.sort(key=lambda x: x"
    },
    {
        "number": 3053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n    if n < 1 or n > 10 ** 6 or k < 1 or k > 26 or p < 1 or p > n:\n        return \"IMPOSSIBLE\"\n    if n == k:\n        return \"a\" * n\n    if n == 1:\n        return \"a\"\n    if n == 2:\n        return \"b\"\n    if n == 3:\n        return \"c\"\n    if n == 4:\n        return \"d\"\n    if n == 5:\n        return \"e\"\n    if n == 6:\n        return \"f\"\n    if n == 7:\n        return \"g\"\n    if n == 8:\n        return \"h\"\n    if n == 9:\n        return \"i\"\n    if n == 10:\n        return \"j\"\n    if n == 11:\n        return \"k\"\n    if n == 12:\n        return \"l\"\n    if n == 13:\n        return \"m\"\n    if n == 14:\n        return \"n\"\n    if n == 15:\n        return \"o\"\n    if n == 16:\n        return \"p\"\n    if n == 17:\n        return \"q\"\n    if n == 18:\n        return \"r\"\n    if n == 19:\n        return \"s\"\n    if n == 20:\n        return \"t\"\n    if n == 21:\n        return \"u\"\n    if n == 22:\n        return \"v\"\n    if n == 23:\n        return \"w\"\n    if n == 24:\n        return \"x\"\n    if n == 25:\n        return \"y\"\n    if n == 26:\n        return \"z\"\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 3054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    names = [stdin.readline().strip() for _ in range(n)]\n    names.sort()\n    if names[0] == \"ThoreHusfeldt\":\n        return \"Thore is awesome\"\n    for i in range(1, n):\n        if names[i].startswith(\"ThoreHusfeldt\"):\n            return \"Thore sucks\"\n    return names[0][:len(names[0]) - 1]"
    },
    {
        "number": 3056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 3057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    for _ in range(N):\n        X, Y = stdin.readline().split()\n        if X == Y:\n            print(\"yes\")\n        elif X not in Y:\n            print(\"wait what?\")\n        else:\n            print(\"no\")"
    },
    {
        "number": 3058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    genome = stdin.readline().strip()\n    genome_set = set(genome)\n    if len(genome_set) == 1:\n        return \"impossible\"\n    else:\n        return \"1 {}\".format(len(genome_set))"
    },
    {
        "number": 3059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, m = map(int, stdin.split())\n    tricks = [map(float, line.split()) for line in stdin.splitlines()[1:]]\n    tricks.sort(key=lambda x: x[0])\n    tricks = [t[0] for t in tricks]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] > 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] == 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] < 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] > 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] == 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] < 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] > 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] == 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] < 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] > 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] == 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] < 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] > 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] == 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] < 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] > 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] == 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] < 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] > 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] == 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] < 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks)) if tricks[i] - tricks[i - 1] > 1]\n    tricks = [tricks[0]] + [tricks[i] for i in range(1, len(tricks"
    },
    {
        "number": 3060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > 10 ** 18:\n        return '-1'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '1 2 2'\n    if n == 4:\n        return '1 2 3'\n    if n == 5:\n        return '1 2 3 4'\n    if n == 6:\n        return '1 2 3 4 5'\n    if n == 7:\n        return '1 2 3 4 5 6'\n    if n == 8:\n        return '1 2 3 4 5 6 7'\n    if n == 9:\n        return '1 2 3 4 5 6 7 8'\n    if n == 10:\n        return '1 2 3 4 5 6 7 8 9'\n    if n == 11:\n        return '1 2 3 4 5 6 7 8 9 10'\n    if n == 12:\n        return '1 2 3 4 5 6 7 8 9 10 11'\n    if n == 13:\n        return '1 2 3 4 5 6 7 8 9 10 11 12'\n    if n == 14:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13'\n    if n == 15:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n    if n == 16:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n    if n == 17:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16'\n    if n == 18:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17'\n    if n == 19:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'\n    if n == 20:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'\n    if n == 21:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\n    if n == 22:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21'\n    if n == 23:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22'\n    if n == 24:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23'\n    if n == 25:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24'\n    if n == 26:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25'\n    if n == 27:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26'\n    if n == 28:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27'\n    if n == 29:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28'\n    if n == 30:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29'\n    if n == 31:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30'\n    if n == 32:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31'\n    if n == 33:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32'\n    if n == 34:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33'\n    if n == 35:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34'\n    if n == 36:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35'\n    if n == 37:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36'\n    if n == 38:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37'\n    if n == 39:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38'\n    if n == 40:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39'\n    if n == 41:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40'\n    if n == 42:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41'\n    if n == 43:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42'\n    if n == 44:\n        return '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32"
    },
    {
        "number": 3061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for"
    },
    {
        "number": 3062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    v, w = [float(x) for x in stdin.split()]\n    return str(abs(x * y - v * w))"
    },
    {
        "number": 3063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    people = [int(stdin.readline()) for _ in range(n)]\n    people.sort()\n    people.reverse()\n    total = 0\n    for i in range(n):\n        total += people[i] * (n - i)\n    return str(total)"
    },
    {
        "number": 3064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [set() for _ in range(n)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        roads[a - 1].add(b - 1)\n        roads[b - 1].add(a - 1)\n    paths = [set() for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            paths[i].add(j)\n            paths[j].add(i)\n    for i in range(n):\n        for j in roads[i]:\n            if i in paths[j]:\n                paths[i].add(j)\n    max_path = 0\n    for i in range(n):\n        if i in paths[0]:\n            max_path = max(max_path, len(paths[i]))\n    return str(max_path)"
    },
    {
        "number": 3065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = int(stdin.readline().strip())\n    walk = [int(x) for x in stdin.readline().strip().split()]\n    nodes = [int(x) for x in stdin.readline().strip().split()]\n    for i in range(n):\n        nodes[i] = [int(x) for x in stdin.readline().strip().split()]\n    return str(solution_naive(n, l, walk, nodes))\n\ndef"
    },
    {
        "number": 3066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    tape = [int(x) for x in stdin.readline().strip().split()]\n    tape.sort()\n    tape.reverse()\n    tape_dict = {}\n    for i in range(n):\n        if tape[i] in tape_dict:\n            tape_dict[tape[i]] += 1\n        else:\n            tape_dict[tape[i]] = 1\n    tape_dict = sorted(tape_dict.items(), key=lambda x: x[0])\n    tape_dict.reverse()\n    tape_dict = [x[1] for x in tape_dict]\n    tape_dict.reverse()\n    tape_dict = [x for x in tape_dict if x > 1]\n    if len(tape_dict) == 0:\n        return \"IMPOSSIBLE\"\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x > 0]\n    tape_dict = [x for x in tape_dict if x <= n]\n    tape_dict = [x for x in tape_dict if x >"
    },
    {
        "number": 3067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seqs = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    seqs.sort(key=lambda x: x[0])\n    return''.join(' '.join(map(str, seq)) for seq in seqs)"
    },
    {
        "number": 3068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    solutions = 0\n    for _ in range(n):\n        suspects, player, reply = stdin.readline().strip().split()\n        if player == '1':\n            if len(set(suspects)) == 3:\n                solutions += int(reply)\n        else:\n            if len(set(suspects)) == 3:\n                solutions += int(reply)\n    return str(solutions)"
    },
    {
        "number": 3069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    brackets = stdin.strip()\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return 'impossible'\n            else:\n                stack.pop()\n    if stack:\n        return 'impossible'\n    else:\n        return 'possible'"
    },
    {
        "number": 3070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    trains = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n    trains.sort(key=lambda x: x[1])\n    trains.sort(key=lambda x: x[0])\n    trains.sort(key=lambda x: x[2])\n    trains.sort(key=lambda x: x[1] - x[0])\n    trains.sort(key=lambda x: x[2] - x[1])\n    trains.sort(key=lambda x: x[0] - x[2])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[2] - x[1])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[2])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[2] - x[1])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[2] - x[1])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[2] - x[1])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[2] - x[1])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1] - x[2])\n    trains.sort(key=lambda x: x[0] - x[1])\n    trains.sort(key=lambda x: x[1"
    },
    {
        "number": 3071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n * m > 100:\n        return \"Error: too many teams\"\n    if n > 25 or m > 25:\n        return \"Error: too many players\"\n    if n * m < 2:\n        return \"Error: too few teams\"\n    if n == 1:\n        return \"A1\"\n    if m == 1:\n        return \"A1-A2\"\n    if m == 2:\n        return \"A1-B1 A2-B2\"\n    if m == 3:\n        return \"A1-B1 A2-C2 B2-C1\"\n    if m == 4:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1\"\n    if m == 5:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1\"\n    if m == 6:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1 A5-F5 F5-C2 D1-B1\"\n    if m == 7:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1 A5-F5 F5-C2 D1-B1 A6-G6 G6-C2 D1-B1\"\n    if m == 8:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1 A5-F5 F5-C2 D1-B1 A6-G6 G6-C2 D1-B1 A7-H7 H7-C2 D1-B1\"\n    if m == 9:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1 A5-F5 F5-C2 D1-B1 A6-G6 G6-C2 D1-B1 A7-H7 H7-C2 D1-B1 A8-I8 I8-C2 D1-B1\"\n    if m == 10:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1 A5-F5 F5-C2 D1-B1 A6-G6 G6-C2 D1-B1 A7-H7 H7-C2 D1-B1 A8-I8 I8-C2 D1-B1 A9-J9 J9-C2 D1-B1\"\n    if m == 11:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1 A5-F5 F5-C2 D1-B1 A6-G6 G6-C2 D1-B1 A7-H7 H7-C2 D1-B1 A8-I8 I8-C2 D1-B1 A9-J9 J9-C2 D1-B1 A10-K10 K10-C2 D1-B1\"\n    if m == 12:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1 A5-F5 F5-C2 D1-B1 A6-G6 G6-C2 D1-B1 A7-H7 H7-C2 D1-B1 A8-I8 I8-C2 D1-B1 A9-J9 J9-C2 D1-B1 A10-K10 K10-C2 D1-B1 A11-L11 L11-C2 D1-B1\"\n    if m == 13:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1 A5-F5 F5-C2 D1-B1 A6-G6 G6-C2 D1-B1 A7-H7 H7-C2 D1-B1 A8-I8 I8-C2 D1-B1 A9-J9 J9-C2 D1-B1 A10-K10 K10-C2 D1-B1 A11-L11 L11-C2 D1-B1 A12-M12 M12-C2 D1-B1\"\n    if m == 14:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1 A5-F5 F5-C2 D1-B1 A6-G6 G6-C2 D1-B1 A7-H7 H7-C2 D1-B1 A8-I8 I8-C2 D1-B1 A9-J9 J9-C2 D1-B1 A10-K10 K10-C2 D1-B1 A11-L11 L11-C2 D1-B1 A12-M12 M12-C2 D1-B1 A13-N13 N13-C2 D1-B1\"\n    if m == 15:\n        return \"A1-B1 A2-C2 B2-C1 A3-D3 D3-C2 D1-B1 A4-E4 E4-C2 D1-B1 A5-F5 F5-C2 D1-B1 A6-"
    },
    {
        "number": 3072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    table = [list(stdin.strip()) for _ in range(R)]\n    free_squares = []\n    for r in range(R):\n        for c in range(C):\n            if table[r][c] == '.':\n                free_squares.append((r, c))\n    return str(len(free_squares))"
    },
    {
        "number": 3073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    "
    },
    {
        "number": 3074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    s = s[::-1]\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('2', '1')\n    s = s.replace('3', '2')\n    s = s.replace('4', '1')\n    s = s.replace('5', '2')\n    s = s.replace('6', '1')\n    s = s.replace('7', '2')\n    s = s.replace('8', '1')\n    s = s.replace('9', '2')\n    s = s.replace('10', '1')\n    s = s.replace('11', '2')\n    s = s.replace('12', '1')\n    s = s.replace('13', '2')\n    s = s.replace('14', '1')\n    s = s.replace('15', '2')\n    s = s.replace('16', '1')\n    s = s.replace('17', '2')\n    s = s.replace('18', '1')\n    s = s.replace('19', '2')\n    s = s.replace('20', '1')\n    s = s.replace('21', '2')\n    s = s.replace('22', '1')\n    s = s.replace('23', '2')\n    s = s.replace('24', '1')\n    s = s.replace('25', '2')\n    s = s.replace('26', '1')\n    s = s.replace('27', '2')\n    s = s.replace('28', '1')\n    s = s.replace('29', '2')\n    s = s.replace('30', '1')\n    s = s.replace('31', '2')\n    s = s.replace('32', '1')\n    s = s.replace('33', '2')\n    s = s.replace('34', '1')\n    s = s.replace('35', '2')\n    s = s.replace('36', '1')\n    s = s.replace('37', '2')\n    s = s.replace('38', '1')\n    s = s.replace('39', '2')\n    s = s.replace('40', '1')\n    s = s.replace('41', '2')\n    s = s.replace('42', '1')\n    s = s.replace('43', '2')\n    s = s.replace('44', '1')\n    s = s.replace('45', '2')\n    s = s.replace('46', '1')\n    s = s.replace('47', '2')\n    s = s.replace('48', '1')\n    s = s.replace('49', '2')\n    s = s.replace('50', '1')\n    s = s.replace('51', '2')\n    s = s.replace('52', '1')\n    s = s.replace('53', '2')\n    s = s.replace('54', '1')\n    s = s.replace('55', '2')\n    s = s.replace('56', '1')\n    s = s.replace('57', '2')\n    s = s.replace('58', '1')\n    s = s.replace('59', '2')\n    s = s.replace('60', '1')\n    s = s.replace('61', '2')\n    s = s.replace('62', '1')\n    s = s.replace('63', '2')\n    s = s.replace('64', '1')\n    s = s.replace('65', '2')\n    s = s.replace('66', '1')\n    s = s.replace('67', '2')\n    s = s.replace('68', '1')\n    s = s.replace('69', '2')\n    s = s.replace('70', '1')\n    s = s.replace('71', '2')\n    s = s.replace('72', '1')\n    s = s.replace('73', '2')\n    s = s.replace('74', '1')\n    s = s.replace('75', '2')\n    s = s.replace('76', '1')\n    s = s.replace('77', '2')\n    s = s.replace('78', '1')\n    s = s.replace('79', '2')\n    s = s.replace('80', '1')\n    s = s.replace('81', '2')\n    s = s.replace('82', '1')\n    s = s.replace('83', '2')\n    s = s.replace('84', '1')\n    s = s.replace('85', '2')\n    s = s.replace('86', '1')\n    s = s.replace('87', '2')\n    s = s.replace('88', '1')\n    s = s.replace('89', '2')\n    s = s.replace('90', '1')\n    s = s.replace('91', '2')\n    s = s.replace('92', '1')\n    s = s.replace('93', '2')\n    s = s.replace('94', '1')\n    s = s.replace('95', '2')\n    s = s.replace('96', '1')\n    s = s.replace('97', '2')\n    s = s.replace('98', '1')\n    s = s.replace('99', '2')\n    s = s.replace('100', '1')\n    s = s.replace('101', '2')\n    s = s.replace('102', '1')\n    s = s.replace('103', '2')\n    s = s.replace('104', '1')\n    s = s.replace('105', '2')\n    s = s.replace('106', '1')\n    s = s.replace('107', '2')\n    s = s.replace('108', '1')\n    s = s.replace('109', '2')\n    s = s.replace('110', '1')\n    s = s.replace('111', '2')\n    s = s.replace('112', '1')\n    s = s.replace('113', '2')\n    s = s.replace('114', '1')\n    s = s.replace('115', '2')\n    s = s.replace('116', '1')\n    s = s.replace('117', '2')\n    s = s.replace('118', '1')\n    s = s.replace('119', '2')\n    s = s.replace('120', '1')\n    s = s.replace"
    },
    {
        "number": 3075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, g = [int(x) for x in stdin.split()]\n    gas_stations = [int(x) for x in stdin.split()]\n    gas_stations.sort()\n    gas_stations.reverse()\n    gas_stations_left = gas_stations[:]\n    gas_stations_left.reverse()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()\n    gas_stations_left.pop()"
    },
    {
        "number": 3076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    jewels = [int(x) for x in stdin.split()]\n    jewels.sort(reverse=True)\n    jewels = [0] + jewels\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j < jewels[i]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - jewels[i]] + jewels[i])\n    return''.join([str(x) for x in dp[n][1:]])"
    },
    {
        "number": 3077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    res = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] > s - a[j]:\n                res[i] = max(res[i], res[j] + 1)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 3079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    s = s[::-1]\n    s = s.replace('a', 'A')\n    s = s.replace('e', 'E')\n    s = s.replace('i', 'I')\n    s = s.replace('o', 'O')\n    s = s.replace('u', 'U')\n    s = s.replace('y', 'Y')\n    s = s.replace('A', 'a')\n    s = s.replace('E', 'e')\n    s = s.replace('I', 'i')\n    s = s.replace('O', 'o')\n    s = s.replace('U', 'u')\n    s = s.replace('Y', 'y')\n    s = s.replace('b', 'B')\n    s = s.replace('c', 'C')\n    s = s.replace('d', 'D')\n    s = s.replace('f', 'F')\n    s = s.replace('g', 'G')\n    s = s.replace('h', 'H')\n    s = s.replace('j', 'J')\n    s = s.replace('k', 'K')\n    s = s.replace('l', 'L')\n    s = s.replace('m', 'M')\n    s = s.replace('n', 'N')\n    s = s.replace('p', 'P')\n    s = s.replace('q', 'Q')\n    s = s.replace('r', 'R')\n    s = s.replace('s', 'S')\n    s = s.replace('t', 'T')\n    s = s.replace('v', 'V')\n    s = s.replace('w', 'W')\n    s = s.replace('x', 'X')\n    s = s.replace('y', 'Y')\n    s = s.replace('z', 'Z')\n    s = s.replace('B', 'b')\n    s = s.replace('C', 'c')\n    s = s.replace('D', 'd')\n    s = s.replace('F', 'f')\n    s = s.replace('G', 'g')\n    s = s.replace('H', 'h')\n    s = s.replace('J', 'j')\n    s = s.replace('K', 'k')\n    s = s.replace('L', 'l')\n    s = s.replace('M','m')\n    s = s.replace('N', 'n')\n    s = s.replace('P', 'p')\n    s = s.replace('Q', 'q')\n    s = s.replace('R', 'r')\n    s = s.replace('S','s')\n    s = s.replace('T', 't')\n    s = s.replace('V', 'v')\n    s = s.replace('W', 'w')\n    s = s.replace('X', 'x')\n    s = s.replace('Y', 'y')\n    s = s.replace('Z', 'z')\n    s = s.replace('0', '0')\n    s = s.replace('1', '1')\n    s = s.replace('2', '2')\n    s = s.replace('3', '3')\n    s = s.replace('4', '4')\n    s = s.replace('5', '5')\n    s = s.replace('6', '6')\n    s = s.replace('7', '7')\n    s = s.replace('8', '8')\n    s = s.replace('9', '9')\n    s = s.replace(' ', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('.', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace('\\'', '')\n    s = s.replace('\\\"', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('|', '')\n    s = s.replace('&', '')\n    s = s.replace('*', '')\n    s = s.replace('+', '')\n    s = s.replace('-', '')\n    s = s.replace('=', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('@', '')\n    s = s.replace('#', '')\n    s = s.replace('$', '')\n    s = s.replace('%', '')\n    s = s.replace('^', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('?', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('_', '')\n    s = s.replace('.', '')\n    s = s.replace('!', '')\n    s = s.replace('-', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('@', '')\n    s = s.replace('#', '')\n    s = s.replace('$', '')\n    s = s.replace('%', '')\n    s = s.replace('^', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('?', '')\n    "
    },
    {
        "number": 3080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    area_to_ski_run = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        area_to_ski_run[x - 1].append(y - 1)\n    for _ in range(q):\n        k, a = [int(x) for x in stdin.split()]\n        area_to_ski_run[a - 1].append(k - 1)\n    return '\\n'.join(str(len(set(x))) for x in area_to_ski_run)"
    },
    {
        "number": 3081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    inspection_times = [int(x) for x in stdin.split()]\n    flights = [int(x) for x in stdin.split()]\n    inspections = [int(x) for x in stdin.split()]\n    planes = 0\n    for i in range(n):\n        planes += inspections[i]\n        for j in range(i + 1, n):\n            planes += flights[i] * flights[j]\n    return str(planes)"
    },
    {
        "number": 3082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, w = [int(x) for x in stdin.split()]\n    tastiness = 0\n    for _ in range(d):\n        tastiness += int(stdin.readline())\n    if w < tastiness:\n        return \"impossible\"\n    return str(w - tastiness)"
    },
    {
        "number": 3083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    songs = [stdin.readline().strip().split() for _ in range(n)]\n    songs = sorted(songs, key=lambda x: (x[0], int(x[1])))\n    songs = [int(x[1]) for x in songs]\n    songs = [int(x) for x in stdin.readline().strip().split()]\n    songs = [x for x in songs if x in range(1, n + 1)]\n    if len(songs)!= 9:\n        return \"fail\"\n    songs = [str(x) for x in songs]\n    return \" \".join(songs)"
    },
    {
        "number": 3084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(()\")\n    '4,8:8,8:'\n    >>> solution(\"()\")\n    '4,4:4,4:'\n    >>> solution(\"(()(()))\")\n    '4,8:8,8:4,4:4,4:'\n    >>> solution(\"(()(()))(()(()))\")\n    '4,8:8,8:4,4:4,4:4,4:4,4:'\n    >>> solution(\"(()(()))(()(()))(()(()))\")\n    '4,8:8,8:4,4:4,4:4,4:4,4:4,4:4,4:'\n    \"\"\"\n    stack = []\n    for i, c in enumerate(stdin):\n        if c == \"(\":\n            stack.append(i)\n        elif c == \")\":\n            if stack:\n                stack.pop()\n            else:\n                stack.append(i)\n    if not stack:\n        return \",\".join(map(str, range(len(stdin))))\n    else:\n        return \",\".join(map(str, stack))\n"
    },
    {
        "number": 3086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if n < 2 or k < 1:\n        return \"Impossible\"\n    if n == 2:\n        return \" \".join(str(x) for x in a)\n    a = sorted(a)\n    a = [a[0]] + [a[i] - a[i - 1] for i in range(1, n)] + [a[-1]]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a"
    },
    {
        "number": 3088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k == 0:\n        return str(n)\n    if n == 1:\n        return str(n)\n    if n == 2:\n        return str(n)\n    if n == 3:\n        return str(n)\n    if n == 4:\n        return str(n)\n    if n == 5:\n        return str(n)\n    if n == 6:\n        return str(n)\n    if n == 7:\n        return str(n)\n    if n == 8:\n        return str(n)\n    if n == 9:\n        return str(n)\n    if n == 10:\n        return str(n)\n    if n == 11:\n        return str(n)\n    if n == 12:\n        return str(n)\n    if n == 13:\n        return str(n)\n    if n == 14:\n        return str(n)\n    if n == 15:\n        return str(n)\n    if n == 16:\n        return str(n)\n    if n == 17:\n        return str(n)\n    if n == 18:\n        return str(n)\n    if n == 19:\n        return str(n)\n    if n == 20:\n        return str(n)\n    if n == 21:\n        return str(n)\n    if n == 22:\n        return str(n)\n    if n == 23:\n        return str(n)\n    if n == 24:\n        return str(n)\n    if n == 25:\n        return str(n)\n    if n == 26:\n        return str(n)\n    if n == 27:\n        return str(n)\n    if n == 28:\n        return str(n)\n    if n == 29:\n        return str(n)\n    if n == 30:\n        return str(n)\n    if n == 31:\n        return str(n)\n    if n == 32:\n        return str(n)\n    if n == 33:\n        return str(n)\n    if n == 34:\n        return str(n)\n    if n == 35:\n        return str(n)\n    if n == 36:\n        return str(n)\n    if n == 37:\n        return str(n)\n    if n == 38:\n        return str(n)\n    if n == 39:\n        return str(n)\n    if n == 40:\n        return str(n)\n    if n == 41:\n        return str(n)\n    if n == 42:\n        return str(n)\n    if n == 43:\n        return str(n)\n    if n == 44:\n        return str(n)\n    if n == 45:\n        return str(n)\n    if n == 46:\n        return str(n)\n    if n == 47:\n        return str(n)\n    if n == 48:\n        return str(n)\n    if n == 49:\n        return str(n)\n    if n == 50:\n        return str(n)\n    if n == 51:\n        return str(n)\n    if n == 52:\n        return str(n)\n    if n == 53:\n        return str(n)\n    if n == 54:\n        return str(n)\n    if n == 55:\n        return str(n)\n    if n == 56:\n        return str(n)\n    if n == 57:\n        return str(n)\n    if n == 58:\n        return str(n)\n    if n == 59:\n        return str(n)\n    if n == 60:\n        return str(n)\n    if n == 61:\n        return str(n)\n    if n == 62:\n        return str(n)\n    if n == 63:\n        return str(n)\n    if n == 64:\n        return str(n)\n    if n == 65:\n        return str(n)\n    if n == 66:\n        return str(n)\n    if n == 67:\n        return str(n)\n    if n == 68:\n        return str(n)\n    if n == 69:\n        return str(n)\n    if n == 70:\n        return str(n)\n    if n == 71:\n        return str(n)\n    if n == 72:\n        return str(n)\n    if n == 73:\n        return str(n)\n    if n == 74:\n        return str(n)\n    if n == 75:\n        return str(n)\n    if n == 76:\n        return str(n)\n    if n == 77:\n        return str(n)\n    if n == 78:\n        return str(n)\n    if n == 79:\n        return str(n)\n    if n == 80:\n        return str(n)\n    if n == 81:\n        return str(n)\n    if n == 82:\n        return str(n)\n    if n == 83:\n        return str(n)\n    if n == 84:\n        return str(n)\n    if n == 85:\n        return str(n)\n    if n == 86:\n        return str(n)\n    if n == 87:\n        return str(n)\n    if n == 88:\n        return str(n)\n    if n == 89:\n        return str(n)\n    if n == 90:\n        return str(n)\n    if n == 91:\n        return str(n)\n    if n == 92:\n        return str(n)\n    if n == 93:\n        return str(n)\n    if n == 94:\n        return str(n)\n    if n == 95:\n        return str(n)\n    if n == 96:\n        return str(n)\n    if n == 97:\n        return str(n)\n    if n == 98:\n        return str(n)\n    if n == 99:\n        return str(n)\n    if n == 100:\n        return str(n)\n    if n == 101:\n        return str(n)\n    if n == 102:\n        return str(n)\n    if n == 103:\n        return str(n)\n    if n == 104:\n        return str(n)\n    if n == 105:\n        return str(n)\n    if n == 106:\n        return str(n)\n    if n == 107:\n        return str(n)\n    if n == 108:\n        return str(n)\n    if n == 109:\n        return str(n)\n    if n == 110:\n        return str(n)\n    if n == 111:\n        return str(n)\n    if n == 112:\n        return str(n)\n    if n == 113:\n        return str(n)\n    if n == 114:\n        return str(n)\n    if n == 115:\n        return str(n)\n    if n == 116:\n        return str(n)\n    if n == 117:\n        return str(n)\n    if n == 118:\n        return str(n)\n    if n == 119:\n        return str(n)\n    if n == 120:\n        return str(n)\n    if n == 121:\n        return str(n)\n    if n == 122:\n        return str(n)\n    if n == 123:\n        return str(n)\n    if n == 124:\n        return str(n)\n    if n == 125:\n        return str(n)\n    if n == 126:\n        return str(n)\n    if n == 127:\n        return str(n)\n    if n == 128:\n        return str(n)\n    if n == 129:\n        return str(n)\n    if n == 130:\n        return str(n)\n    if n == 131:\n        "
    },
    {
        "number": 3089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[0] + x[1])\n    cbd = []\n    for i in range(n):\n        if i == 0:\n            cbd.append(points[i])\n        else:\n            if points[i][0] == cbd[-1][0] or points[i][1] == cbd[-1][1]:\n                cbd.append(points[i])\n    cbd.sort(key=lambda x: x[0] + x[1])\n    cbd_len = len(cbd)\n    cbd_len_half = cbd_len // 2\n    cbd_len_half_half = cbd_len_half // 2\n    cbd_len_half_half_half = cbd_len_half_half // 2\n    cbd_len_half_half_half_half = cbd_len_half_half_half // 2\n    cbd_len_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = cbd_len_half_half_half_half // 2\n    cbd_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_"
    },
    {
        "number": 3090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(x) for x in stdin.split()]\n    grid = [list(map(int, stdin.split())) for _ in range(N)]\n    costs = [[0] * M for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if i > 0:\n                costs[i][j] += min(costs[i - 1][j], costs[i - 1][j - 1])\n            if j > 0:\n                costs[i][j] += min(costs[i][j - 1], costs[i - 1][j - 1])\n            if i > 0 and j > 0:\n                costs[i][j] += min(costs[i - 1][j - 1], costs[i - 1][j], costs[i][j - 1])\n            costs[i][j] += grid[i][j]\n    return str(costs[N - 1][M - 1])\n"
    },
    {
        "number": 3091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    roads.sort(key=lambda x: x[2])\n    cities = set(range(1, n + 1))\n    paths = [set() for _ in range(m)]\n    for o, d, l in roads:\n        if o in cities and d in cities:\n            paths[o - 1].add(d)\n            paths[d - 1].add(o)\n    for i in range(m):\n        paths[i] = paths[i] - {i + 1}\n    paths = [len(x) for x in paths]\n    return '\\n'.join(str(x) for x in paths)"
    },
    {
        "number": 3093,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    f = [int(x) for x in stdin.split()]\n    return str(solution_recursive(n, k, f))\n\ndef"
    },
    {
        "number": 3094,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = list(map(int, stdin.readline().strip().split()))\n    return str(solution_naive(n, t))\n\ndef"
    },
    {
        "number": 3095,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = [int(x) for x in stdin.split()]\n    A = [list(map(int, stdin.split())) for _ in range(R)]\n    max_cool = 0\n    for r in range(1, R):\n        for s in range(1, S):\n            if A[r][s] + A[r][s - 1] <= A[r][s - 1] + A[r][s]:\n                max_cool = max(max_cool, A[r][s] + A[r][s - 1])\n    for r in range(1, R):\n        for s in range(1, S):\n            if A[r][s] + A[r - 1][s] <= A[r - 1][s] + A[r][s]:\n                max_cool = max(max_cool, A[r][s] + A[r - 1][s])\n    for r in range(1, R):\n        for s in range(1, S):\n            if A[r][s] + A[r - 1][s] <= A[r - 1][s] + A[r][s]:\n                max_cool = max(max_cool, A[r][s] + A[r - 1][s])\n    for r in range(1, R):\n        for s in range(1, S):\n            if A[r][s] + A[r][s - 1] <= A[r][s - 1] + A[r][s]:\n                max_cool = max(max_cool, A[r][s] + A[r][s - 1])\n    return str(max_cool)"
    },
    {
        "number": 3096,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    jokes = [int(x) for x in stdin.readline().strip().split()]\n    supervisors = [int(x) for x in stdin.readline().strip().split()]\n    supervisors = [x - 1 for x in supervisors]\n    supervisors = [x for x in supervisors if x!= -1]\n    supervisors = sorted(supervisors)\n    supervisors = [x for x in supervisors if x!= supervisors[0]]\n    supervisors = [x for x in supervisors if x!= supervisors[-1]]\n    supervisors = [x for x in supervisors if x!= supervisors[0] and x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors = [x for x in supervisors if x + 1 in supervisors]\n    supervisors"
    },
    {
        "number": 3097,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        print(sum(range(a, b + 1)))"
    },
    {
        "number": 3098,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    vertices = [tuple(map(float, stdin.split())) for _ in range(n)]\n    vertices.sort(key=lambda x: x[0] + x[1])\n    x, y = [], []\n    for i in range(n):\n        x.append(vertices[i][0])\n        y.append(vertices[i][1])\n    x.sort()\n    y.sort()\n    x_max, x_min = x[-1], x[0]\n    y_max, y_min = y[-1], y[0]\n    x_mid, y_mid = (x_max + x_min) / 2, (y_max + y_min) / 2\n    x_max_mid, x_min_mid = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid, y_min_mid = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_2, x_min_mid_2 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_2, y_min_mid_2 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_3, x_min_mid_3 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_3, y_min_mid_3 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_4, x_min_mid_4 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_4, y_min_mid_4 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_5, x_min_mid_5 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_5, y_min_mid_5 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_6, x_min_mid_6 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_6, y_min_mid_6 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_7, x_min_mid_7 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_7, y_min_mid_7 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_8, x_min_mid_8 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_8, y_min_mid_8 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_9, x_min_mid_9 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_9, y_min_mid_9 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_10, x_min_mid_10 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_10, y_min_mid_10 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_11, x_min_mid_11 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_11, y_min_mid_11 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_12, x_min_mid_12 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_12, y_min_mid_12 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_13, x_min_mid_13 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_13, y_min_mid_13 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_14, x_min_mid_14 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_14, y_min_mid_14 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_15, x_min_mid_15 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_15, y_min_mid_15 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_16, x_min_mid_16 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_16, y_min_mid_16 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_17, x_min_mid_17 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_17, y_min_mid_17 = (y_max + y_min) / 2, (y_max + y_min) / 2\n    x_max_mid_18, x_min_mid_18 = (x_max + x_min) / 2, (x_max + x_min) / 2\n    y_max_mid_18, y_min_mid_18 = (y_max + y_min)"
    },
    {
        "number": 3099,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 3100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, C, M = [int(x) for x in stdin.split()]\n    return str(solution_helper(A, C, M))\n\ndef"
    },
    {
        "number": 3101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    if a[0] == 0:\n        a[0] = 1\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            a[i] = a[i-1] + 1\n    if a[-1] == 10**15:\n        a[-1] = 0\n    return''.join([str(x) for x in a])"
    },
    {
        "number": 3102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    return str(solution_helper(l, r))\n\ndef"
    },
    {
        "number": 3103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = [int(x) for x in stdin.readline().strip().split()]\n    s.sort()\n    for i in range(n - 3):\n        if s[i] == s[i + 1] and s[i + 2] == s[i + 3]:\n            return''.join(map(str, [s[i], s[i + 2]]))\n    return '-1'"
    },
    {
        "number": 3106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 3107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    routes = [int(x) for x in stdin.split()]\n    routes = [routes[i:i + n] for i in range(0, len(routes), n)]\n    pairs = [int(x) for x in stdin.split()]\n    pairs = [pairs[i:i + 2] for i in range(0, len(pairs), 2)]\n    routes = [routes[i] for i in pairs[0]]\n    routes = [routes[i] for i in pairs[1]]\n    routes = [routes[i] for i in pairs[2]]\n    routes = [routes[i] for i in pairs[3]]\n    routes = [routes[i] for i in pairs[4]]\n    routes = [routes[i] for i in pairs[5]]\n    routes = [routes[i] for i in pairs[6]]\n    routes = [routes[i] for i in pairs[7]]\n    routes = [routes[i] for i in pairs[8]]\n    routes = [routes[i] for i in pairs[9]]\n    routes = [routes[i] for i in pairs[10]]\n    routes = [routes[i] for i in pairs[11]]\n    routes = [routes[i] for i in pairs[12]]\n    routes = [routes[i] for i in pairs[13]]\n    routes = [routes[i] for i in pairs[14]]\n    routes = [routes[i] for i in pairs[15]]\n    routes = [routes[i] for i in pairs[16]]\n    routes = [routes[i] for i in pairs[17]]\n    routes = [routes[i] for i in pairs[18]]\n    routes = [routes[i] for i in pairs[19]]\n    routes = [routes[i] for i in pairs[20]]\n    routes = [routes[i] for i in pairs[21]]\n    routes = [routes[i] for i in pairs[22]]\n    routes = [routes[i] for i in pairs[23]]\n    routes = [routes[i] for i in pairs[24]]\n    routes = [routes[i] for i in pairs[25]]\n    routes = [routes[i] for i in pairs[26]]\n    routes = [routes[i] for i in pairs[27]]\n    routes = [routes[i] for i in pairs[28]]\n    routes = [routes[i] for i in pairs[29]]\n    routes = [routes[i] for i in pairs[30]]\n    routes = [routes[i] for i in pairs[31]]\n    routes = [routes[i] for i in pairs[32]]\n    routes = [routes[i] for i in pairs[33]]\n    routes = [routes[i] for i in pairs[34]]\n    routes = [routes[i] for i in pairs[35]]\n    routes = [routes[i] for i in pairs[36]]\n    routes = [routes[i] for i in pairs[37]]\n    routes = [routes[i] for i in pairs[38]]\n    routes = [routes[i] for i in pairs[39]]\n    routes = [routes[i] for i in pairs[40]]\n    routes = [routes[i] for i in pairs[41]]\n    routes = [routes[i] for i in pairs[42]]\n    routes = [routes[i] for i in pairs[43]]\n    routes = [routes[i] for i in pairs[44]]\n    routes = [routes[i] for i in pairs[45]]\n    routes = [routes[i] for i in pairs[46]]\n    routes = [routes[i] for i in pairs[47]]\n    routes ="
    },
    {
        "number": 3108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    max_avg = 0\n    for i in range(n - k + 1):\n        avg = sum(a[i:i + k]) / k\n        if avg > max_avg:\n            max_avg = avg\n    return str(max_avg)"
    },
    {
        "number": 3109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, w, h = [int(x) for x in stdin.split()]\n    v = [float(x) for x in stdin.split()]\n    x = [float(x) for x in stdin.split()]\n    min_ = [float(x) for x in stdin.split()]\n    max_ = [float(x) for x in stdin.split()]\n    min_ = [min_[i] if min_[i] < max_[i] else max_[i] for i in range(n - 1)]\n    max_ = [max_[i] if min_[i] < max_[i] else min_[i] for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] > 0 else 0 for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] > 0 else 0 for i in range(n - 1)]\n    min_ = [min_[i] / v[i] for i in range(n - 1)]\n    max_ = [max_[i] / v[i] for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] > 0 else 0 for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] > 0 else 0 for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] < w * h else w * h for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] < w * h else w * h for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] > 0 else 0 for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] > 0 else 0 for i in range(n - 1)]\n    min_ = [min_[i] / (w * h) for i in range(n - 1)]\n    max_ = [max_[i] / (w * h) for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] > 0 else 0 for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] > 0 else 0 for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] < w * h else w * h for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] < w * h else w * h for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] > 0 else 0 for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] > 0 else 0 for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] < w * h else w * h for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] < w * h else w * h for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] > 0 else 0 for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] > 0 else 0 for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] < w * h else w * h for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] < w * h else w * h for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] > 0 else 0 for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] > 0 else 0 for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] < w * h else w * h for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] < w * h else w * h for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] > 0 else 0 for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] > 0 else 0 for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] < w * h else w * h for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] < w * h else w * h for i in range(n - 1)]\n    min_ = [min_[i] if min_[i] > 0 else 0 for i in range(n - 1)]\n    max_ = [max_[i] if max_[i] > 0 else 0 for i in range(n - 1)]"
    },
    {
        "number": 3110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    grid = [list(map(int, stdin.split())) for _ in range(m)]\n    return str(solve(grid))\n\ndef"
    },
    {
        "number": 3111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    dials = [int(x) for x in stdin.split()]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dials[:N]\n    dials = dials[::-1]\n    dials = dial"
    },
    {
        "number": 3112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = [int(x) for x in stdin.split()]\n    conveyor_belt = [set() for _ in range(N)]\n    for _ in range(M):\n        a, b = [int(x) for x in stdin.split()]\n        conveyor_belt[a - 1].add(b - 1)\n        conveyor_belt[b - 1].add(a - 1)\n    producers = [set() for _ in range(N)]\n    for i in range(K):\n        producers[i].add(i)\n    for i in range(K, N):\n        producers[i].add(i)\n    for i in range(K):\n        for j in range(K):\n            if i!= j:\n                producers[i] |= conveyor_belt[j]\n    producers = [len(x) for x in producers]\n    return str(max(producers))"
    },
    {
        "number": 3113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    Garry = set()\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3 = map(int, stdin.readline().split())\n        Garry.add((x1, y1))\n        Garry.add((x2, y2))\n        Garry.add((x3, y3))\n    m = int(stdin.readline())\n    Jerry = set()\n    for _ in range(m):\n        x1, y1, x2, y2, x3, y3 = map(int, stdin.readline().split())\n        Jerry.add((x1, y1))\n        Jerry.add((x2, y2))\n        Jerry.add((x3, y3))\n    if len(Garry & Jerry) == 0:\n        return \"no\"\n    return \"yes\""
    },
    {
        "number": 3114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [set() for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        roads[x - 1].add(y - 1)\n        roads[y - 1].add(x - 1)\n    for i in range(n):\n        roads[i].add(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in"
    },
    {
        "number": 3115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n < 2 or n > 50000 or m < 1 or m > 250000:\n        return \"inconsistent\"\n    matches = []\n    for _ in range(m):\n        k, l = [int(x) for x in stdin.split()]\n        if k < 0 or k >= n or l < 0 or l >= n:\n            return \"inconsistent\"\n        if k > l:\n            matches.append((k, l))\n        elif k < l:\n            matches.append((l, k))\n        else:\n            return \"inconsistent\"\n    if len(matches) == 0:\n        return \"consistent\"\n    if len(matches) == 1:\n        return \"consistent\"\n    for i in range(len(matches) - 1):\n        if matches[i][0] == matches[i + 1][1] or matches[i][1] == matches[i + 1][0]:\n            return \"inconsistent\"\n    return \"consistent\""
    },
    {
        "number": 3116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stars = []\n    for _ in range(n):\n        x, y, z = map(int, stdin.readline().split())\n        stars.append((x, y, z))\n    return str(solve(stars))\n\ndef"
    },
    {
        "number": 3117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    b.sort()\n    if a == b:\n        return \"0\"\n    else:\n        return str(abs(a.index(b[0]) - b.index(a[0])))"
    },
    {
        "number": 3119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    notes = list(map(int, stdin.split()))\n    sp_phrases = [list(map(int, stdin.split())) for _ in range(p)]\n    notes.sort()\n    sp_phrases.sort(key=lambda x: x[0])\n    sp_phrases.sort(key=lambda x: x[1])\n    sp_phrases.sort(key=lambda x: x[0] - x[1])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_phrases.sort(key=lambda x: x[1] - x[0])\n    sp_"
    },
    {
        "number": 3120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"equal\""
    },
    {
        "number": 3121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    routes = [list(map(int, stdin.split())) for _ in range(m)]\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda"
    },
    {
        "number": 3123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    k = 1\n    while True:\n        if len(a) % (k + 1) == 0:\n            break\n        k += 1\n    return str(k)"
    },
    {
        "number": 3124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().strip().split()]\n    return str(solution_helper(nums, n))\n\ndef"
    },
    {
        "number": 3125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    frogs = [int(x) for x in stdin.split()]\n    changes = [int(x) for x in stdin.split()]\n    frogs_on_tower = [0] * n\n    frogs_on_tower[0] = 1\n    for i in range(1, n):\n        frogs_on_tower[i] = frogs_on_tower[i - 1] + frogs[i - 1]\n    for change in changes:\n        if change == 0:\n            frogs_on_tower[change] += 1\n        elif change == 1:\n            frogs_on_tower[change] -= 1\n        else:\n            frogs_on_tower[change] = frogs_on_tower[change - 1]\n    return str(min(frogs_on_tower))"
    },
    {
        "number": 3127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cables = [int(x) for x in stdin.split()]\n    cables.sort()\n    cables.reverse()\n    cables = [cables[i:i + 2] for i in range(0, len(cables), 2)]\n    cables = [cables[i][0] for i in range(len(cables))]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 0]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in range(len(cables)) if i % 2 == 1]\n    cables = [cables[i] for i in"
    },
    {
        "number": 3128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    movies = [int(x) for x in stdin.readline().strip().split()]\n    movies.sort()\n    movies_dict = {movies[i]: i for i in range(n)}\n    for i in range(n):\n        movies_dict[i + 1] = movies[i]\n    for _ in range(int(stdin.readline().strip())):\n        query = stdin.readline().strip().split()\n        if query[0] == '1':\n            print(movies_dict[int(query[1])])\n        else:\n            print(movies_dict[int(query[1])] - int(query[2]))"
    },
    {
        "number": 3129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 3130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, M, N = [int(x) for x in stdin.split()]\n    events = [int(x) for x in stdin.split()]\n    events.sort()\n    events = set(events)\n    for _ in range(N):\n        a, b = [int(x) for x in stdin.split()]\n        if a in events:\n            events.add(b)\n        else:\n            events.add(a)\n    return''.join(str(x) for x in events)"
    },
    {
        "number": 3131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        res += a[i] * (10 ** i)\n    return str(res % 1000000007)"
    },
    {
        "number": 3132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(R)]\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0:\n                    grid[r][c-1] = '.'\n                if c < C-1:\n                    grid[r][c+1] = '.'\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'x':\n                grid[r][c] = '.'\n                if r > 0:\n                    grid[r-1][c] = '.'\n                if r < R-1:\n                    grid[r+1][c] = '.'\n                if c > 0"
    },
    {
        "number": 3133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if a == b:\n        return \"indistinguishable\"\n    if a > b:\n        a, b = b, a\n    if a == 0:\n        return \"0\"\n    if a == 1:\n        return \"1\"\n    if a == 2:\n        return \"2\"\n    if a == 3:\n        return \"3\"\n    if a == 4:\n        return \"4\"\n    if a == 5:\n        return \"5\"\n    if a == 6:\n        return \"6\"\n    if a == 7:\n        return \"7\"\n    if a == 8:\n        return \"8\"\n    if a == 9:\n        return \"9\"\n    if a == 10:\n        return \"10\"\n    if a == 11:\n        return \"11\"\n    if a == 12:\n        return \"12\"\n    if a == 13:\n        return \"13\"\n    if a == 14:\n        return \"14\"\n    if a == 15:\n        return \"15\"\n    if a == 16:\n        return \"16\"\n    if a == 17:\n        return \"17\"\n    if a == 18:\n        return \"18\"\n    if a == 19:\n        return \"19\"\n    if a == 20:\n        return \"20\"\n    if a == 21:\n        return \"21\"\n    if a == 22:\n        return \"22\"\n    if a == 23:\n        return \"23\"\n    if a == 24:\n        return \"24\"\n    if a == 25:\n        return \"25\"\n    if a == 26:\n        return \"26\"\n    if a == 27:\n        return \"27\"\n    if a == 28:\n        return \"28\"\n    if a == 29:\n        return \"29\"\n    if a == 30:\n        return \"30\"\n    if a == 31:\n        return \"31\"\n    if a == 32:\n        return \"32\"\n    if a == 33:\n        return \"33\"\n    if a == 34:\n        return \"34\"\n    if a == 35:\n        return \"35\"\n    if a == 36:\n        return \"36\"\n    if a == 37:\n        return \"37\"\n    if a == 38:\n        return \"38\"\n    if a == 39:\n        return \"39\"\n    if a == 40:\n        return \"40\"\n    if a == 41:\n        return \"41\"\n    if a == 42:\n        return \"42\"\n    if a == 43:\n        return \"43\"\n    if a == 44:\n        return \"44\"\n    if a == 45:\n        return \"45\"\n    if a == 46:\n        return \"46\"\n    if a == 47:\n        return \"47\"\n    if a == 48:\n        return \"48\"\n    if a == 49:\n        return \"49\"\n    if a == 50:\n        return \"50\"\n    if a == 51:\n        return \"51\"\n    if a == 52:\n        return \"52\"\n    if a == 53:\n        return \"53\"\n    if a == 54:\n        return \"54\"\n    if a == 55:\n        return \"55\"\n    if a == 56:\n        return \"56\"\n    if a == 57:\n        return \"57\"\n    if a == 58:\n        return \"58\"\n    if a == 59:\n        return \"59\"\n    if a == 60:\n        return \"60\"\n    if a == 61:\n        return \"61\"\n    if a == 62:\n        return \"62\"\n    if a == 63:\n        return \"63\"\n    if a == 64:\n        return \"64\"\n    if a == 65:\n        return \"65\"\n    if a == 66:\n        return \"66\"\n    if a == 67:\n        return \"67\"\n    if a == 68:\n        return \"68\"\n    if a == 69:\n        return \"69\"\n    if a == 70:\n        return \"70\"\n    if a == 71:\n        return \"71\"\n    if a == 72:\n        return \"72\"\n    if a == 73:\n        return \"73\"\n    if a == 74:\n        return \"74\"\n    if a == 75:\n        return \"75\"\n    if a == 76:\n        return \"76\"\n    if a == 77:\n        return \"77\"\n    if a == 78:\n        return \"78\"\n    if a == 79:\n        return \"79\"\n    if a == 80:\n        return \"80\"\n    if a == 81:\n        return \"81\"\n    if a == 82:\n        return \"82\"\n    if a == 83:\n        return \"83\"\n    if a == 84:\n        return \"84\"\n    if a == 85:\n        return \"85\"\n    if a == 86:\n        return \"86\"\n    if a == 87:\n        return \"87\"\n    if a == 88:\n        return \"88\"\n    if a == 89:\n        return \"89\"\n    if a == 90:\n        return \"90\"\n    if a == 91:\n        return \"91\"\n    if a == 92:\n        return \"92\"\n    if a == 93:\n        return \"93\"\n    if a == 94:\n        return \"94\"\n    if a == 95:\n        return \"95\"\n    if a == 96:\n        return \"96\"\n    if a == 97:\n        return \"97\"\n    if a == 98:\n        return \"98\"\n    if a == 99:\n        return \"99\"\n    if a == 100:\n        return \"100\"\n    if a == 101:\n        return \"101\"\n    if a == 102:\n        return \"102\"\n    if a == 103:\n        return \"103\"\n    if a == 104:\n        return \"104\"\n    if a == 105:\n        return \"105\"\n    if a == 106:\n        return"
    },
    {
        "number": 3134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    row_parity = [int(x) for x in stdin.split(\"\\n\")[0]]\n    col_parity = [int(x) for x in stdin.split(\"\\n\")[1]]\n    rows = len(row_parity)\n    cols = len(col_parity)\n    if rows!= cols:\n        return \"-1\"\n    if rows == 0:\n        return \"0\" * cols\n    if cols == 0:\n        return \"0\" * rows\n    if row_parity.count(1) == 0:\n        return \"0\" * cols\n    if col_parity.count(1) == 0:\n        return \"0\" * rows\n    if row_parity.count(1) > col_parity.count(1):\n        return \"0\" * cols\n    if row_parity.count(1) < col_parity.count(1):\n        return \"0\" * rows\n    if row_parity.count(1) == col_parity.count(1):\n        return \"0\" * cols\n    row_parity.reverse()\n    col_parity.reverse()\n    row_parity = \"\".join(str(x) for x in row_parity)\n    col_parity = \"\".join(str(x) for x in col_parity)\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_parity = row_parity.ljust(rows, \"0\")\n    col_parity = col_parity.ljust(cols, \"0\")\n    row_parity = row_parity[::-1]\n    col_parity = col_parity[::-1]\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_parity = row_parity.ljust(rows, \"0\")\n    col_parity = col_parity.ljust(cols, \"0\")\n    row_parity = row_parity[::-1]\n    col_parity = col_parity[::-1]\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_parity = row_parity.ljust(rows, \"0\")\n    col_parity = col_parity.ljust(cols, \"0\")\n    row_parity = row_parity[::-1]\n    col_parity = col_parity[::-1]\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_parity = row_parity.ljust(rows, \"0\")\n    col_parity = col_parity.ljust(cols, \"0\")\n    row_parity = row_parity[::-1]\n    col_parity = col_parity[::-1]\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_parity = row_parity.ljust(rows, \"0\")\n    col_parity = col_parity.ljust(cols, \"0\")\n    row_parity = row_parity[::-1]\n    col_parity = col_parity[::-1]\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_parity = row_parity.ljust(rows, \"0\")\n    col_parity = col_parity.ljust(cols, \"0\")\n    row_parity = row_parity[::-1]\n    col_parity = col_parity[::-1]\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_parity = row_parity.ljust(rows, \"0\")\n    col_parity = col_parity.ljust(cols, \"0\")\n    row_parity = row_parity[::-1]\n    col_parity = col_parity[::-1]\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_parity = row_parity.ljust(rows, \"0\")\n    col_parity = col_parity.ljust(cols, \"0\")\n    row_parity = row_parity[::-1]\n    col_parity = col_parity[::-1]\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_parity = row_parity.ljust(rows, \"0\")\n    col_parity = col_parity.ljust(cols, \"0\")\n    row_parity = row_parity[::-1]\n    col_parity = col_parity[::-1]\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_parity = row_parity.ljust(rows, \"0\")\n    col_parity = col_parity.ljust(cols, \"0\")\n    row_parity = row_parity[::-1]\n    col_parity = col_parity[::-1]\n    row_parity = row_parity.replace(\"0\", \"\")\n    col_parity = col_parity.replace(\"0\", \"\")\n    row_par"
    },
    {
        "number": 3135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    binary = bin(n)[2:]\n    result = []\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            result.append('+')\n        elif binary[i] == '0':\n            result.append('-')\n        else:\n            result.append('0')\n    return ''.join(result)"
    },
    {
        "number": 3136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = [int(x) for x in stdin.split()]\n    a, b = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    y = [int(x) for x in stdin.split()]\n    roads = []\n    for _ in range(m):\n        u, v, d = [int(x) for x in stdin.split()]\n        roads.append((u, v, d))\n    return str(solution_helper(n, m, s, t, a, b, x, y, roads))\n\ndef"
    },
    {
        "number": 3137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(x) for x in stdin.split()]\n    X, Y = [int(x) for x in stdin.split()[-2:]]\n    board = [list(stdin.split()[i]) for i in range(N * M)]\n    board[X][Y] = 'X'\n    for i in range(K):\n        X, Y, C = [int(x) for x in stdin.split()[i * 3:i * 3 + 3]]\n        if C == 0:\n            Y -= 1\n        elif C == 1:\n            X += 1\n        elif C == 2:\n            Y += 1\n        elif C == 3:\n            X -= 1\n        if X < 0 or X >= N or Y < 0 or Y >= M:\n            C = (C + 2) % 4\n        board[X][Y] = str(i + 1)\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'X':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '9':\n                board[i][j] = '0'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == '0':\n                board[i][j] = '9'\n    for i in range(N):\n        for j"
    },
    {
        "number": 3138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    return str(solution_naive(n, arr))\n\ndef"
    },
    {
        "number": 3139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, k, l = [int(x) for x in stdin.split()]\n    x, y = [int(x) for x in stdin.split()]\n    grid = [[int(x) for x in stdin.split()] for _ in range(r)]\n    return str(solution_recursive(grid, x, y, k, l))\n\ndef"
    },
    {
        "number": 3141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    flaws = [tuple(map(float, stdin.readline().strip().split())) for _ in range(n)]\n    d = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                d = max(d, min(abs(flaws[i][0] - flaws[j][0]), abs(flaws[i][1] - flaws[j][1]), abs(flaws[i][2] - flaws[j][2])))\n    return str(d)"
    },
    {
        "number": 3142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, s = map(int, stdin.split())\n    n = 0\n    for i in range(a, b + 1):\n        if sum(map(int, str(i))) == s:\n            n += 1\n    return str(n)\n"
    },
    {
        "number": 3143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    return '\\n'.join(str(x) for x in solve(N, M, A, B))\n\ndef"
    },
    {
        "number": 3144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, g, n, k = [int(x) for x in stdin.split()]\n    coins = [d, g]\n    for _ in range(n):\n        coins.append(g)\n        coins.append(d)\n    coins.sort()\n    if k == 0:\n        return str(coins[-1])\n    if k == n:\n        return str(coins[-2])\n    return str(coins[-1] - coins[-2])"
    },
    {
        "number": 3145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = [int(x) for x in stdin.split()]\n    allowed = set(stdin.split()[1])\n    return sum(1 for i in range(a, b + 1) if all(c in allowed for c in str(i)))"
    },
    {
        "number": 3146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    if n == 0 or t == 0:\n        return '0'\n    prescriptions = [x.split() for x in stdin.splitlines()[1:]]\n    prescriptions = sorted(prescriptions, key=lambda x: int(x[1]))\n    in_store = []\n    remote = []\n    for p in prescriptions:\n        if p[0] == 'R':\n            remote.append(p)\n        else:\n            in_store.append(p)\n    in_store = sorted(in_store, key=lambda x: int(x[1]))\n    remote = sorted(remote, key=lambda x: int(x[1]))\n    total_time = 0\n    for i in range(n):\n        total_time += int(remote[i][1])\n        if i < len(in_store):\n            total_time += int(in_store[i][1])\n    return f'{total_time / n:.6f}'"
    },
    {
        "number": 3147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    memory = [list(stdin.strip()) for _ in range(R)]\n    max_killer = -1\n    for i in range(R):\n        for j in range(C):\n            if memory[i][j] == '1':\n                killer = 1\n                for k in range(i, R):\n                    if memory[k][j] == '0':\n                        break\n                    killer += 1\n                for k in range(j, C):\n                    if memory[i][k] == '0':\n                        break\n                    killer += 1\n                if killer > max_killer:\n                    max_killer = killer\n    return str(max_killer)"
    },
    {
        "number": 3148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    swimmers = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    swimmers.sort(key=lambda x: x[0])\n    swimmers.sort(key=lambda x: x[1])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x: x[0] - x[1])\n    swimmers.sort(key=lambda x: x[1] - x[0])\n    swimmers.sort(key=lambda x"
    },
    {
        "number": 3149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, omega, v0, theta, w, x, y, z = [int(x) for x in stdin.split()]\n    vx, vy, vz = [float(x) for x in stdin.split()[1:]]\n    v = [vx, vy, vz]\n    v_norm = math.sqrt(v[0] ** 2 + v[1] ** 2 + v[2] ** 2)\n    v = [v[0] / v_norm, v[1] / v_norm, v[2] / v_norm]\n    v_theta = math.atan2(v[1], v[0])\n    v_theta = v_theta % (2 * math.pi)\n    v_theta = math.degrees(v_theta)\n    v_theta = v_theta % (360)\n    v_theta = v_theta / 360\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v_theta = v_theta / v_norm\n    v_theta = v_theta * v_norm\n    v"
    },
    {
        "number": 3150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trenches = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    return str(solution_recursive(n, trenches))\n\ndef"
    },
    {
        "number": 3151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return \"impossible\"\n    for m in range(n, 1, -1):\n        if m * m - n * n == 0:\n            return str(m) + \" \" + str(n - m)\n    return \"impossible\""
    },
    {
        "number": 3152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    arr.sort()\n    return str(sum(arr[i] for i in range(n)) % (10 ** 9))[-9:]"
    },
    {
        "number": 3153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cards = [int(x) for x in stdin.split()]\n    children = [int(x) for x in stdin.split()]\n    purchases = [int(x) for x in stdin.split()]\n    purchases = [children[i] - children[j] for i, j in enumerate(purchases)]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 0]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range(len(purchases)) if i % 2 == 1]\n    purchases = [purchases[i] for i in range("
    },
    {
        "number": 3154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    d, e = [int(x) for x in stdin.split()]\n    toys = [int(x) for x in stdin.split()]\n    toys.sort()\n    toys_dict = {}\n    for i in range(len(toys)):\n        toys_dict[toys[i]] = i\n    events = []\n    for i in range(e):\n        s, k, t = [int(x) for x in stdin.split()]\n        events.append((s, k, t))\n    events.sort()\n    events_dict = {}\n    for i in range(len(events)):\n        events_dict[events[i]] = i\n    events_dict[0] = -1\n    events_dict[d] = -1\n    events_dict[d + 1] = -1\n    events_dict[d + 2] = -1\n    events_dict[d + 3] = -1\n    events_dict[d + 4] = -1\n    events_dict[d + 5] = -1\n    events_dict[d + 6] = -1\n    events_dict[d + 7] = -1\n    events_dict[d + 8] = -1\n    events_dict[d + 9] = -1\n    events_dict[d + 10] = -1\n    events_dict[d + 11] = -1\n    events_dict[d + 12] = -1\n    events_dict[d + 13] = -1\n    events_dict[d + 14] = -1\n    events_dict[d + 15] = -1\n    events_dict[d + 16] = -1\n    events_dict[d + 17] = -1\n    events_dict[d + 18] = -1\n    events_dict[d + 19] = -1\n    events_dict[d + 20] = -1\n    events_dict[d + 21] = -1\n    events_dict[d + 22] = -1\n    events_dict[d + 23] = -1\n    events_dict[d + 24] = -1\n    events_dict[d + 25] = -1\n    events_dict[d + 26] = -1\n    events_dict[d + 27] = -1\n    events_dict[d + 28] = -1\n    events_dict[d + 29] = -1\n    events_dict[d + 30] = -1\n    events_dict[d + 31] = -1\n    events_dict[d + 32] = -1\n    events_dict[d + 33] = -1\n    events_dict[d + 34] = -1\n    events_dict[d + 35] = -1\n    events_dict[d + 36] = -1\n    events_dict[d + 37] = -1\n    events_dict[d + 38] = -1\n    events_dict[d + 39] = -1\n    events_dict[d + 40] = -1\n    events_dict[d + 41] = -1\n    events_dict[d + 42] = -1\n    events_dict[d + 43] = -1\n    events_dict[d + 44] = -1\n    events_dict[d + 45] = -1\n    events_dict[d + 46] = -1\n    events_dict[d + 47] = -1\n    events_dict[d + 48] = -1\n    events_dict[d + 49] = -1\n    events_dict[d + 50] = -1\n    events_dict[d + 51] = -1\n    events_dict[d + 52] = -1\n    events_dict[d + 53] = -1\n    events_dict[d + 54] = -1\n    events_dict[d + 55] = -1\n    events_dict[d + 56] = -1\n    events_dict[d + 57] = -1\n    events_dict[d + 58] = -1\n    events_dict[d + 59] = -1\n    events_dict[d + 60] = -1\n    events_dict[d + 61] = -1\n    events_dict[d + 62]"
    },
    {
        "number": 3155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for n in range(1, x + 1):\n        for k in range(1, n + 1):\n            if n * k == x:\n                return str(n) + \" \" + str(k)"
    },
    {
        "number": 3156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    K = int(stdin.readline().strip())\n    inventory = [int(x) for x in stdin.readline().strip().split()]\n    order = [int(x) for x in stdin.readline().strip().split()]\n    inventory_map = {}\n    for i in range(N):\n        inventory_map[i] = inventory[i]\n    order_map = {}\n    for i in range(K):\n        order_map[i] = order[i]\n    visited = {}\n    for i in range(N):\n        visited[i] = False\n    visited[0] = True\n    for i in range(K):\n        if visited[order_map[i]]:\n            continue\n        visited[order_map[i]] = True\n        if inventory_map[order_map[i]] == 0:\n            visited[order_map[i]] = False\n            continue\n        inventory_map[order_map[i]] -= 1\n        for j in range(N):\n            if visited[j]:\n                continue\n            if inventory_map[j] == 0:\n                visited[j] = False\n                continue\n            visited[j] = True\n            if inventory_map[j] < order_map[i]:\n                visited[j] = False\n                continue\n            if inventory_map[j] == order_map[i]:\n                visited[j] = False\n                continue\n            inventory_map[j] -= order_map[i]\n            if visited[order_map[i]]:\n                visited[j] = False\n                continue\n            visited[order_map[i]] = True\n            if inventory_map[order_map[i]] == 0:\n                visited[order_map[i]] = False\n                continue\n            inventory_map[order_map[i]] -= 1\n    if visited[N-1]:\n        return \"unique\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 3157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    return str(bin(k).count('1'))"
    },
    {
        "number": 3158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----Testcases-----\nInput:\n............................................................\n............................................................\n..........................................XXXX..............\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n.............................."
    },
    {
        "number": 3159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_aux(stdin))\n\ndef"
    },
    {
        "number": 3161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    picture = stdin.readline().strip()\n    picture = [int(x) for x in picture]\n    picture = [picture[i:i + n] for i in range(0, len(picture), n)]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list(x) for x in picture]\n    picture = [list("
    },
    {
        "number": 3162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    shelf = [list(map(int, stdin.split())) for _ in range(N)]\n    for _ in range(N):\n        shelf[_].append(0)\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M + 1))\n    shelf.append([0] * (M +"
    },
    {
        "number": 3164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    max_len = 0\n    for i in range(n):\n        if arr[i] == 2:\n            max_len += 1\n        else:\n            max_len = 0\n        if max_len > 2:\n            return max_len\n    return max_len"
    },
    {
        "number": 3165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n    board = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for _ in range(k):\n        r, c, x = [int(x) for x in stdin.split()]\n        board[r - 1][c - 1] ^= x\n    res = 0\n    for r in range(n):\n        for c in range(n):\n            if board[r][c] > 0:\n                res += 2 ** board[r][c] - 1\n    return str(res)"
    },
    {
        "number": 3166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"impossible\"\n    if k == 0:\n        return \"0\"\n    if k == n:\n        return str(n)\n    if k == 1:\n        return str(n - 1)\n    if k == 2:\n        return str(n - 2)\n    if k == 3:\n        return str(n - 3)\n    if k == 4:\n        return str(n - 4)\n    if k == 5:\n        return str(n - 5)\n    if k == 6:\n        return str(n - 6)\n    if k == 7:\n        return str(n - 7)\n    if k == 8:\n        return str(n - 8)\n    if k == 9:\n        return str(n - 9)\n    if k == 10:\n        return str(n - 10)\n    if k == 11:\n        return str(n - 11)\n    if k == 12:\n        return str(n - 12)\n    if k == 13:\n        return str(n - 13)\n    if k == 14:\n        return str(n - 14)\n    if k == 15:\n        return str(n - 15)\n    if k == 16:\n        return str(n - 16)\n    if k == 17:\n        return str(n - 17)\n    if k == 18:\n        return str(n - 18)\n    if k == 19:\n        return str(n - 19)\n    if k == 20:\n        return str(n - 20)\n    if k == 21:\n        return str(n - 21)\n    if k == 22:\n        return str(n - 22)\n    if k == 23:\n        return str(n - 23)\n    if k == 24:\n        return str(n - 24)\n    if k == 25:\n        return str(n - 25)\n    if k == 26:\n        return str(n - 26)\n    if k == 27:\n        return str(n - 27)\n    if k == 28:\n        return str(n - 28)\n    if k == 29:\n        return str(n - 29)\n    if k == 30:\n        return str(n - 30)\n    if k == 31:\n        return str(n - 31)\n    if k == 32:\n        return str(n - 32)\n    if k == 33:\n        return str(n - 33)\n    if k == 34:\n        return str(n - 34)\n    if k == 35:\n        return str(n - 35)\n    if k == 36:\n        return str(n - 36)\n    if k == 37:\n        return str(n - 37)\n    if k == 38:\n        return str(n - 38)\n    if k == 39:\n        return str(n - 39)\n    if k == 40:\n        return str(n - 40)\n    if k == 41:\n        return str(n - 41)\n    if k == 42:\n        return str(n - 42)\n    if k == 43:\n        return str(n - 43)\n    if k == 44:\n        return str(n - 44)\n    if k == 45:\n        return str(n - 45)\n    if k == 46:\n        return str(n - 46)\n    if k == 47:\n        return str(n - 47)\n    if k == 48:\n        return str(n - 48)\n    if k == 49:\n        return str(n - 49)\n    if k == 50:\n        return str(n - 50)\n    if k == 51:\n        return str(n - 51)\n    if k == 52:\n        return str(n - 52)\n    if k == 53:\n        return str(n - 53)\n    if k == 54:\n        return str(n - 54)\n    if k == 55:\n        return str(n - 55)\n    if k == 56:\n        return str(n - 56)\n    if k == 57:\n        return str(n - 57)\n    if k == 58:\n        return str(n - 58)\n    if k == 59:\n        return str(n - 59)\n    if k == 60:\n        return str(n - 60)\n    if k == 61:\n        return str(n - 61)\n    if k == 62:\n        return str(n - 62)\n    if k == 63:\n        return str(n - 63)\n    if k == 64:\n        return str(n - 64)\n    if k == 65:\n        return str(n - 65)\n    if k == 66:\n        return str(n - 66)\n    if k == 67:\n        return str(n - 67)\n    if k == 68:\n        return str(n - 68)\n    if k == 69:\n        return str(n - 69)\n    if k == 70:\n        return str(n - 70)\n    if k == 71:\n        return str(n - 71)\n    if k == 72:\n        return str(n - 72)\n    if k == 73:\n        return str(n - 73)\n    if k == 74:\n        return str(n - 74)\n    if k"
    },
    {
        "number": 3167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    seq = [0] * N\n    for _ in range(K):\n        L, R = [int(x) for x in stdin.split()]\n        for i in range(L, R + 1):\n            seq[i] += 1\n    Q = int(stdin.readline())\n    for _ in range(Q):\n        L, R = [int(x) for x in stdin.split()]\n        print(sum(seq[L:R + 1]))\n    return \"\""
    },
    {
        "number": 3168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(stdin.readline().strip()) for _ in range(n)]\n    tree = TreeNode(nums[0])\n    for num in nums[1:]:\n        tree = insert(tree, num)\n    return str(counter(tree))\n\ndef"
    },
    {
        "number": 3169,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sticks = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    sticks.sort(key=lambda x: x[0])\n    sticks.sort(key=lambda x: x[1])\n    sticks.sort(key=lambda x: x[2])\n    sticks.sort(key=lambda x: x[3])\n    return''.join(map(str, sticks))"
    },
    {
        "number": 3170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return"
    },
    {
        "number": 3171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    candidates = [int(x) for x in stdin.split()]\n    utterances = [stdin.split() for _ in range(K)]\n    candidates_by_name = {candidates[i]: i for i in range(N)}\n    for utterance in utterances:\n        speaker, utterance = utterance[0], utterance[1:]\n        if utterance[0] == 'not':\n            candidates_by_name[speaker] = 'not'\n            utterance = utterance[1:]\n        for i in range(len(utterance) - 1):\n            if utterance[i] == 'and':\n                candidates_by_name[speaker] = 'and'\n                utterance = utterance[:i] + utterance[i + 1:]\n                break\n    return ''.join(candidates[candidates_by_name[x]] for x in candidates_by_name)"
    },
    {
        "number": 3172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    fruits = []\n    for _ in range(n):\n        x, y = [float(x) for x in stdin.readline().strip().split()]\n        fruits.append((x, y))\n    fruits.sort(key=lambda x: x[0])\n    fruits.sort(key=lambda x: x[1])\n    max_fruits = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if fruits[i][1] < fruits[j][1]:\n                max_fruits += 1\n                break\n    return str(max_fruits)"
    },
    {
        "number": 3173,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3174,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    cities = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] % k == 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2], reverse=True)\n    cities = [x for x in cities if x[2] > 0]\n    "
    },
    {
        "number": 3175,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    l.sort()\n    l.reverse()\n    s = 0\n    for i in range(n):\n        s += l[i] * l[i]\n    return str(s)"
    },
    {
        "number": 3176,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    plants = [\n        [int(x) for x in stdin.split()]\n        for _ in range(n)\n    ]\n    plants.sort(key=lambda x: x[2], reverse=True)\n    energy = 0\n    for i in range(n):\n        energy += plants[i][2]\n        if energy < k:\n            energy += plants[i][2]\n        else:\n            energy -= plants[i][2]\n            break\n    return str(energy)\n\n\ndef"
    },
    {
        "number": 3177,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    seq = [int(x) for x in stdin.split()]\n    allowed = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    swaps = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if seq[i] > seq[j]:\n                if (seq[i], seq[j]) in allowed:\n                    swaps += 1\n                    seq[i], seq[j] = seq[j], seq[i]\n    return str(swaps)"
    },
    {
        "number": 3178,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in range(m)]\n    roads = [roads[i] for i in"
    },
    {
        "number": 3179,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    polygon = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    polygon.sort(key=lambda x: x[0])\n    polygon.sort(key=lambda x: x[1])\n    polygon.sort(key=lambda x: x[0] - x[1])\n    polygon.sort(key=lambda x: x[1] - x[0])\n    polygon.sort(key=lambda x: x[0] + x[1])\n    polygon.sort(key=lambda x: x[1] + x[0])\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] / x[1])\n    polygon.sort(key=lambda x: x[1] / x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])\n    polygon.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    polygon.sort(key=lambda x: x[1] ** 2 + x[0] ** 2)\n    polygon.sort(key=lambda x: x[0] * x[1])\n    polygon.sort(key=lambda x: x[1] * x[0])"
    },
    {
        "number": 3180,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = [int(x) for x in stdin.split()]\n    canvas = [[1] * N for _ in range(N)]\n    for _ in range(M):\n        command = stdin.split()\n        if command[0] == \"PAINT\":\n            x1, y1, x2, y2 = [int(x) for x in command[1:]]\n            for x in range(x1, x2 + 1):\n                for y in range(y1, y2 + 1):\n                    canvas[x][y] = command[1]\n        elif command[0] == \"SAVE\":\n            save_num = int(command[1])\n            with open(f\"{save_num}.txt\", \"w\") as f:\n                for row in canvas:\n                    f.write(\" \".join(str(x) for x in row) + \"\\n\")\n        elif command[0] == \"LOAD\":\n            load_num = int(command[1])\n            with open(f\"{load_num}.txt\") as f:\n                for row in f:\n                    row = row.strip().split()\n                    for x, cell in enumerate(row):\n                        canvas[x][load_num - 1] = int(cell)\n    return \"\\n\".join(\" \".join(str(x) for x in row) for row in canvas)"
    },
    {
        "number": 3181,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 1 or n > 10**6 or k < 1 or k > 10**6:\n        return -1\n    if n == k:\n        return str(n)\n    if k == 1:\n        return str(1)\n    if k == 2:\n        return str(1) + \" \" + str(n)\n    if k == 3:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1)\n    if k == 4:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2)\n    if k == 5:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3)\n    if k == 6:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4)\n    if k == 7:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5)\n    if k == 8:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6)\n    if k == 9:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6) + \" \" + str(n-7)\n    if k == 10:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6) + \" \" + str(n-7) + \" \" + str(n-8)\n    if k == 11:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6) + \" \" + str(n-7) + \" \" + str(n-8) + \" \" + str(n-9)\n    if k == 12:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6) + \" \" + str(n-7) + \" \" + str(n-8) + \" \" + str(n-9) + \" \" + str(n-10)\n    if k == 13:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6) + \" \" + str(n-7) + \" \" + str(n-8) + \" \" + str(n-9) + \" \" + str(n-10) + \" \" + str(n-11)\n    if k == 14:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6) + \" \" + str(n-7) + \" \" + str(n-8) + \" \" + str(n-9) + \" \" + str(n-10) + \" \" + str(n-11) + \" \" + str(n-12)\n    if k == 15:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6) + \" \" + str(n-7) + \" \" + str(n-8) + \" \" + str(n-9) + \" \" + str(n-10) + \" \" + str(n-11) + \" \" + str(n-12) + \" \" + str(n-13)\n    if k == 16:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6) + \" \" + str(n-7) + \" \" + str(n-8) + \" \" + str(n-9) + \" \" + str(n-10) + \" \" + str(n-11) + \" \" + str(n-12) + \" \" + str(n-13) + \" \" + str(n-14)\n    if k == 17:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6) + \" \" + str(n-7) + \" \" + str(n-8) + \" \" + str(n-9) + \" \" + str(n-10) + \" \" + str(n-11) + \" \" + str(n-12) + \" \" + str(n-13) + \" \" + str(n-14) + \" \" + str(n-15)\n    if k == 18:\n        return str(1) + \" \" + str(n) + \" \" + str(n-1) + \" \" + str(n-2) + \" \" + str(n-3) + \" \" + str(n-4) + \" \" + str(n-5) + \" \" + str(n-6) + \" \" + str(n-7) + \" \" + str(n-8) + \" \" + str(n-9) + \""
    },
    {
        "number": 3182,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    return str(solution_recursive(points))\n\ndef"
    },
    {
        "number": 3183,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, c, w = [int(x) for x in stdin.split()]\n        graph[u].append((v, c, w))\n    return str(max_flow(graph, s, t))\n\ndef"
    },
    {
        "number": 3184,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    walls = [int(x) for x in stdin.split()]\n    walls.sort()\n    cameras = [0] * n\n    for i in range(k):\n        a, b = [int(x) for x in stdin.split()]\n        if a > b:\n            a, b = b, a\n        for j in range(a - 1, b):\n            cameras[j] += 1\n    for i in range(n):\n        if cameras[i] > walls[i]:\n            return \"impossible\"\n    return str(sum(cameras))"
    },
    {
        "number": 3185,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return str(factorial)"
    },
    {
        "number": 3186,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(x) for x in stdin.split()]\n    if K > M * N:\n        return 0\n    if K == 0:\n        return 1\n    if K == 1:\n        return M\n    if K == M:\n        return N\n    if K == M * N:\n        return 1\n    return (M * (M + 1) * (N - 1) // 2) % (10 ** 6 + 7)"
    },
    {
        "number": 3187,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    houses = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    d = int(stdin.readline().strip())\n    houses.sort(key=lambda x: x[0] + x[1])\n    total = 0\n    for i in range(n):\n        total += abs(houses[i][0] - houses[i - 1][0]) + abs(houses[i][1] - houses[i - 1][1])\n        if total > d * 2:\n            return \"impossible\"\n    return str(total)"
    },
    {
        "number": 3188,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    planets = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    planets.sort(key=lambda x: x[0]**2 + x[1]**2 + x[2]**2)\n    cost = 0\n    for i in range(n - 1):\n        cost += abs(planets[i][0] - planets[i + 1][0]) + abs(planets[i][1] - planets[i + 1][1]) + abs(planets[i][2] - planets[i + 1][2])\n    return str(cost)"
    },
    {
        "number": 3189,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    lights = [0] * n\n    for _ in range(m):\n        switch, light = stdin.split()\n        for i, s in enumerate(switch):\n            if s == '1':\n                lights[i] = (lights[i] + 1) % 2\n    return str(sum(lights) % 1000003)"
    },
    {
        "number": 3190,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prices = [int(x) for x in stdin.readline().strip().split()]\n    p = int(stdin.readline().strip())\n    return str(solution_helper(prices, p, n))\n\ndef"
    },
    {
        "number": 3191,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, p = [int(x) for x in stdin.split()]\n    return str(n * p + r)\n\nprint(solution(input()))\n"
    },
    {
        "number": 3192,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    files = stdin.readline().split()\n    dependencies = [set() for _ in range(n)]\n    for i in range(n):\n        for line in stdin:\n            if line.startswith('import'):\n                dependencies[i].add(line.split()[1])\n    cycles = []\n    for i in range(n):\n        if not dependencies[i]:\n            cycles.append(i)\n    if not cycles:\n        return 'SHIP IT'\n    cycles.sort(key=lambda i: len(dependencies[i]))\n    return''.join(files[i] for i in cycles)"
    },
    {
        "number": 3193,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split('\\n')[0]\n    p, m = [int(x) for x in stdin.split('\\n')[1].split()]\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','* ')\n    expression = expression.replace('/','/ ')\n    expression = expression.replace('^','^ ')\n    expression = expression.replace('%','% ')\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','* ')\n    expression = expression.replace('/','/ ')\n    expression = expression.replace('^','^ ')\n    expression = expression.replace('%','% ')\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','* ')\n    expression = expression.replace('/','/ ')\n    expression = expression.replace('^','^ ')\n    expression = expression.replace('%','% ')\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','* ')\n    expression = expression.replace('/','/ ')\n    expression = expression.replace('^','^ ')\n    expression = expression.replace('%','% ')\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','* ')\n    expression = expression.replace('/','/ ')\n    expression = expression.replace('^','^ ')\n    expression = expression.replace('%','% ')\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','* ')\n    expression = expression.replace('/','/ ')\n    expression = expression.replace('^','^ ')\n    expression = expression.replace('%','% ')\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','* ')\n    expression = expression.replace('/','/ ')\n    expression = expression.replace('^','^ ')\n    expression = expression.replace('%','% ')\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','* ')\n    expression = expression.replace('/','/ ')\n    expression = expression.replace('^','^ ')\n    expression = expression.replace('%','% ')\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','* ')\n    expression = expression.replace('/','/ ')\n    expression = expression.replace('^','^ ')\n    expression = expression.replace('%','% ')\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','* ')\n    expression = expression.replace('/','/ ')\n    expression = expression.replace('^','^ ')\n    expression = expression.replace('%','% ')\n    expression = expression.replace(' ', '')\n    expression = expression.replace('(','( ')\n    expression = expression.replace(')',') ')\n    expression = expression.replace('+','+ ')\n    expression = expression.replace('-','- ')\n    expression = expression.replace('*','* ')\n    expression = expression.replace('x','*"
    },
    {
        "number": 3194,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    times = [int(x) for x in stdin.split()]\n    times.sort()\n    for i in range(n):\n        if times[i] + t > times[-1]:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 3195,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T_g, T_y, T_r = [int(x) for x in stdin.split()]\n    n = int(stdin.readline())\n    observations = [stdin.readline().split() for _ in range(n)]\n    observations = sorted(observations, key=lambda x: int(x[0]))\n    observations = [int(x[0]) for x in observations]\n    observations = [int(x[1]) for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = sorted(observations, key=lambda x: x[0])\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range(n))]\n    observations = [x[1] for x in observations]\n    observations = [x for x in zip(observations, range"
    },
    {
        "number": 3196,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [set() for _ in range(n)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        roads[a - 1].add(b - 1)\n        roads[b - 1].add(a - 1)\n    return str(solve(roads))\n\ndef"
    },
    {
        "number": 3197,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    preferences = [int(x) for x in stdin.split()]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for i in range(n)]\n    preferences.sort()\n    preferences.reverse()\n    preferences = [preferences[i] for"
    },
    {
        "number": 3198,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = stdin.readline().strip().split()\n    d = set(d)\n    for i in range(n):\n        for j in range(len(d)):\n            if d[j] == d[j][:len(d[j])-1]:\n                d.remove(d[j])\n    if len(d) == 0:\n        return \"NO TYPOS\"\n    return \"\\n\".join(d)"
    },
    {
        "number": 3199,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    L = int(stdin)\n    return '\\n'.join(str(x) for x in solve(A, B, L))\n\ndef"
    },
    {
        "number": 3200,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    times = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    times.sort(key=lambda x: x[0])\n    times.sort(key=lambda x: x[1])\n    times.sort(key=lambda x: x[2])\n    times.sort(key=lambda x: x[0] - x[1])\n    times.sort(key=lambda x: x[0] - x[2])\n    times.sort(key=lambda x: x[1] - x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x[0] + x[1] + x[2])\n    times.sort(key=lambda x: x"
    },
    {
        "number": 3201,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, B, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    B = [1] * N\n    for i in range(1, N):\n        B[i] = B[i - 1] * A[i - 1]\n    B.sort()\n    B = [1] + B\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i - 1] for i in range(1, N + 1)]\n    B = [B[i] % M for i in range(N + 1)]\n    B = [B[i] * B[i -"
    },
    {
        "number": 3202,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    marbles = [int(x) for x in stdin.split()]\n    marbles.sort()\n    marbles.append(marbles[-1] + 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, marbles[0] - 1)\n    marbles.insert(0, mar"
    },
    {
        "number": 3203,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    probabilities = [int(x) for x in stdin.readline().split()]\n    probabilities.sort(reverse=True)\n    probability = 1\n    for p in probabilities:\n        probability *= p\n    return str(probability)"
    },
    {
        "number": 3204,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    times = [int(stdin.readline()) for _ in range(n)]\n    times.sort()\n    total = 0\n    for i in range(n):\n        if times[i] + 20 <= times[i + 1]:\n            total += times[i + 1] - times[i] - 20\n    return str(total)"
    },
    {
        "number": 3205,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3206,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if N < S:\n        return '-1'\n    if N == S:\n        return''.join([str(x) for x in range(1, N + 1)])\n    if N > S:\n        return '-1'\n    if N == 1:\n        return '0'\n    if N == 2:\n        return '1'\n    if N == 3:\n        return '2'\n    if N == 4:\n        return '3'\n    if N == 5:\n        return '4'\n    if N == 6:\n        return '5'\n    if N == 7:\n        return '6'\n    if N == 8:\n        return '7'\n    if N == 9:\n        return '8'\n    if N == 10:\n        return '9'\n    if N == 11:\n        return '10'\n    if N == 12:\n        return '11'\n    if N == 13:\n        return '12'\n    if N == 14:\n        return '13'\n    if N == 15:\n        return '14'\n    if N == 16:\n        return '15'\n    if N == 17:\n        return '16'\n    if N == 18:\n        return '17'\n    if N == 19:\n        return '18'\n    if N == 20:\n        return '19'\n    if N == 21:\n        return '20'\n    if N == 22:\n        return '21'\n    if N == 23:\n        return '22'\n    if N == 24:\n        return '23'\n    if N == 25:\n        return '24'\n    if N == 26:\n        return '25'\n    if N == 27:\n        return '26'\n    if N == 28:\n        return '27'\n    if N == 29:\n        return '28'\n    if N == 30:\n        return '29'\n    if N == 31:\n        return '30'\n    if N == 32:\n        return '31'\n    if N == 33:\n        return '32'\n    if N == 34:\n        return '33'\n    if N == 35:\n        return '34'\n    if N == 36:\n        return '35'\n    if N == 37:\n        return '36'\n    if N == 38:\n        return '37'\n    if N == 39:\n        return '38'\n    if N == 40:\n        return '39'\n    if N == 41:\n        return '40'\n    if N == 42:\n        return '41'\n    if N == 43:\n        return '42'\n    if N == 44:\n        return '43'\n    if N == 45:\n        return '44'\n    if N == 46:\n        return '45'\n    if N == 47:\n        return '46'\n    if N == 48:\n        return '47'\n    if N == 49:\n        return '48'\n    if N == 50:\n        return '49'\n    if N == 51:\n        return '50'\n    if N == 52:\n        return '51'\n    if N == 53:\n        return '52'\n    if N == 54:\n        return '53'\n    if N == 55:\n        return '54'\n    if N == 56:\n        return '55'\n    if N == 57:\n        return '56'\n    if N == 58:\n        return '57'\n    if N == 59:\n        return '58'\n    if N == 60:\n        return '59'\n    if N == 61:\n        return '60'\n    if N == 62:\n        return '61'\n    if N == 63:\n        return '62'\n    if N == 64:\n        return '63'\n    if N == 65:\n        return '64'\n    if N == 66:\n        return '65'\n    if N == 67:\n        return '66'\n    if N == 68:\n        return '67'\n    if N == 69:\n        return '68'\n    if N == 70:\n        return '69'\n    if N == 71:\n        return '70'\n    if N == 72:\n        return '71'\n    if N == 73:\n        return '72'\n    if N == 74:\n        return '73'\n    if N == 75:\n        return '74'\n    if N == 76:\n        return '75'\n    if N == 77:\n        return '76'\n    if N == 78:\n        return '77'\n    if N == 79:\n        return '78'\n    if N == 80:\n        return '79'\n    if N == 81:\n        return '80'\n    if N == 82:\n        return '81'\n    if N == 83:\n        return '82'\n    if N == 84:\n        return '83'\n    if N == 85:\n        return '84'\n    if N == 86:\n        return '85'\n    if N == 87:\n        return '86'\n    if N == 88:\n        return '87'\n    if N == 89:\n        return '88'\n    if N == 90:\n        return '89'\n    if N == 91:\n        return '90'\n    if N == 92:\n        return '91'\n    if N == 93:\n        return '92'\n    if N == 94:\n        return '93'\n    if N == 95:\n        return '94'\n    if N == 96:\n        return '95'\n    if N == 97:\n        return '96'\n    if N == 98:\n        return '97'\n    if N == 99:\n        return '98'\n    if N == 100:\n        return '99'\n    if N == 101:\n        return '100'\n    if N == 102:\n        return '101'\n    if N == 103:\n        return '102'\n    if N == 104:\n        return '103'\n    if N == 105:\n        return '104'\n    if N == 106:\n        return '105'\n    if N"
    },
    {
        "number": 3207,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l = [int(x) for x in stdin.split()]\n    chameleons = [{'d': int(x), 'b': int(y), 'c': int(z)} for x, y, z in [stdin.split() for _ in range(n)]]\n    chameleons.sort(key=lambda x: x['d'])\n    colors = [0] * k\n    for i in range(n):\n        colors[chameleons[i]['b']] += 1\n        if chameleons[i]['c']!= chameleons[i]['b']:\n            colors[chameleons[i]['c']] += 1\n    return''.join(str(x) for x in colors)"
    },
    {
        "number": 3208,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n"
    },
    {
        "number": 3209,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 3210,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    board = [list(stdin.readline().strip()) for _ in range(2 * N - 1)]\n    moves = 0\n    for i in range(2 * N - 1):\n        for j in range(2 * N - 1):\n            if board[i][j] == '*':\n                moves += 1\n                board[i][j] = '.'\n                if i > 0 and board[i - 1][j] == '|':\n                    board[i - 1][j] = '-'\n                    moves += 1\n                if j > 0 and board[i][j - 1] == '-':\n                    board[i][j - 1] = '|'\n                    moves += 1\n                if i < 2 * N - 2 and board[i + 1][j] == '|':\n                    board[i + 1][j] = '-'\n                    moves += 1\n                if j < 2 * N - 2 and board[i][j + 1] == '-':\n                    board[i][j + 1] = '|'\n                    moves += 1\n    return str(moves)"
    },
    {
        "number": 3211,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"impossible\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"2\"\n    if n == 5:\n        return \"3\"\n    if n == 6:\n        return \"4\"\n    if n == 7:\n        return \"5\"\n    if n == 8:\n        return \"6\"\n    if n == 9:\n        return \"7\"\n    if n == 10:\n        return \"8\"\n    if n == 11:\n        return \"9\"\n    if n == 12:\n        return \"10\"\n    if n == 13:\n        return \"11\"\n    if n == 14:\n        return \"12\"\n    if n == 15:\n        return \"13\"\n    if n == 16:\n        return \"14\"\n    if n == 17:\n        return \"15\"\n    if n == 18:\n        return \"16\"\n    if n == 19:\n        return \"17\"\n    if n == 20:\n        return \"18\"\n    if n == 21:\n        return \"19\"\n    if n == 22:\n        return \"20\"\n    if n == 23:\n        return \"21\"\n    if n == 24:\n        return \"22\"\n    if n == 25:\n        return \"23\"\n    if n == 26:\n        return \"24\"\n    if n == 27:\n        return \"25\"\n    if n == 28:\n        return \"26\"\n    if n == 29:\n        return \"27\"\n    if n == 30:\n        return \"28\"\n    if n == 31:\n        return \"29\"\n    if n == 32:\n        return \"30\"\n    if n == 33:\n        return \"31\"\n    if n == 34:\n        return \"32\"\n    if n == 35:\n        return \"33\"\n    if n == 36:\n        return \"34\"\n    if n == 37:\n        return \"35\"\n    if n == 38:\n        return \"36\"\n    if n == 39:\n        return \"37\"\n    if n == 40:\n        return \"38\"\n    if n == 41:\n        return \"39\"\n    if n == 42:\n        return \"40\"\n    if n == 43:\n        return \"41\"\n    if n == 44:\n        return \"42\"\n    if n == 45:\n        return \"43\"\n    if n == 46:\n        return \"44\"\n    if n == 47:\n        return \"45\"\n    if n == 48:\n        return \"46\"\n    if n == 49:\n        return \"47\"\n    if n == 50:\n        return \"48\"\n    if n == 51:\n        return \"49\"\n    if n == 52:\n        return \"50\"\n    if n == 53:\n        return \"51\"\n    if n == 54:\n        return \"52\"\n    if n == 55:\n        return \"53\"\n    if n == 56:\n        return \"54\"\n    if n == 57:\n        return \"55\"\n    if n == 58:\n        return \"56\"\n    if n == 59:\n        return \"57\"\n    if n == 60:\n        return \"58\"\n    if n == 61:\n        return \"59\"\n    if n == 62:\n        return \"60\"\n    if n == 63:\n        return \"61\"\n    if n == 64:\n        return \"62\"\n    if n == 65:\n        return \"63\"\n    if n == 66:\n        return \"64\"\n    if n == 67:\n        return \"65\"\n    if n == 68:\n        return \"66\"\n    if n == 69:\n        return \"67\"\n    if n == 70:\n        return \"68\"\n    if n == 71:\n        return \"69\"\n    if n == 72:\n        return \"70\"\n    if n == 73:\n        return \"71\"\n    if n == 74:\n        return \"72\"\n    if n == 75:\n        return \"73\"\n    if n == 76:\n        return \"74\"\n    if n == 77:\n        return \"75\"\n    if n == 78:\n        return \"76\"\n    if n == 79:\n        return \"77\"\n    if n == 80:\n        return \"78\"\n    if n == 81:\n        return \"79\"\n    if n == 82:\n        return \"80\"\n    if n == 83:\n        return \"81\"\n    if n == 84:\n        return \"82\"\n    if n == 85:\n        return \"83\"\n    if n == 86:\n        return \"84\"\n    if n == 87:\n        return \"85\"\n    if n == 88:\n        return \"86\"\n    if n == 89:\n        return \"87\"\n    if n == 90:\n        return \"88\"\n    if n == 91:\n        return \"89\"\n    if n == 92:\n        return \"90\"\n    if n == 93:\n        return \"91\"\n    if n == 94:\n        return \"92\"\n    if n == 95:\n        return \"93\"\n    if n == 96:\n        return \"94\"\n    if n == 97:\n        return \"95\"\n    if n == 98:\n        return \"96\"\n    if n == 99:\n        return \"97\"\n    if n == 100:\n        return \"98\"\n    if n == 101:\n        return \"99\"\n    if n == 102:\n        return \"100\"\n    if n == 103:\n        return \"101\"\n    if n == 104:\n        return \"102\"\n    if n == 105:\n        return \"103\"\n    if n == 106:\n        return \"104\"\n    if n == 107:\n        return \"105\"\n    if n == 108:\n        return \"106\"\n    if n == 109:\n        return \"107\"\n    if n == 110:\n        return \"108\"\n    if n == 111:\n        return \"109\"\n    if n == 112:\n        "
    },
    {
        "number": 3212,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    snakes = []\n    for _ in range(n):\n        x, y, d = [int(x) for x in stdin.readline().strip().split()]\n        snakes.append((x, y, d))\n    return \"Bill will be bitten.\" if len(snakes) == 1 else \"Bill enters at ({:.2f}, {:.2f}) and leaves at ({:.2f}, {:.2f}).\".format(*sorted(snakes)[0])"
    },
    {
        "number": 3213,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, S = map(int, stdin.split())\n    spell = stdin[1:]\n    power = 1\n    for i in range(M):\n        if spell[i] == '+':\n            power += 1\n        else:\n            power *= 2\n    print(power % (2**S))"
    },
    {
        "number": 3214,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 3215,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = [int(x) for x in stdin.readline().strip().split()]\n    shuffles = 0\n    while True:\n        if cards == sorted(cards):\n            break\n        shuffles += 1\n        cards = [cards[-1]] + cards[:-1]\n    return str(shuffles)"
    },
    {
        "number": 3216,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The first number is the fraction, the second is the number of digits to the right of the decimal point.\n    \"\"\"\n    # Split the input into a list of strings\n    input_list = stdin.split()\n    # Get the fraction\n    fraction = input_list[0]\n    # Get the number of digits to the right of the decimal point\n    digits = int(input_list[1])\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits - 1\n    # Get the number of digits to the right of the decimal point\n    right_digits = len(fraction) - digits - 1\n    # Get the number of digits to the left of the decimal point\n    left_digits = len(fraction) - digits"
    },
    {
        "number": 3217,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    defects = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    defects.sort(key=lambda x: x[0] * x[1] * x[2])\n    defects.sort(key=lambda x: x[0] + x[1] + x[2])\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n    defects.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    defects.sort(key=lambda"
    },
    {
        "number": 3218,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if n % 2 == 0:\n        return 0\n    return sum(a[i] == -1 for i in range(n))"
    },
    {
        "number": 3219,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin, 2)).count('1'))\n\nassert(solution('1001') == '3')\nassert(solution('1111') == '1')\nassert(solution('0') == '0')\nassert(solution('1') == '1')\nassert(solution('11') == '2')\nassert(solution('101') == '3')\nassert(solution('1101') == '4')\nassert(solution('110101') == '5')\nassert(solution('11010101') == '6')\nassert(solution('1101010101') == '7')\nassert(solution('110101010101') == '8')\nassert(solution('11010101010101') == '9')\nassert(solution('1101010101010101') == '10')\nassert(solution('110101010101010101') == '11')\nassert(solution('11010101010101010101') == '12')\nassert(solution('1101010101010101010101') == '13')\nassert(solution('110101010101010101010101') == '14')\nassert(solution('11010101010101010101010101') == '15')\nassert(solution('1101010101010101010101010101') == '16')\nassert(solution('110101010101010101010101010101') == '17')\nassert(solution('11010101010101010101010101010101') == '18')\nassert(solution('1101010101010101010101010101010101') == '19')\nassert(solution('110101010101010101010101010101010101') == '20')\nassert(solution('11010101010101010101010101010101010101') == '21')\nassert(solution('1101010101010101010101010101010101010101') == '22')\nassert(solution('110101010101010101010101010101010101010101') == '23')\nassert(solution('11010101010101010101010101010101010101010101') == '24')\nassert(solution('1101010101010101010101010101010101010101010101') == '25')\nassert(solution('110101010101010101010101010101010101010101010101') == '26')\nassert(solution('11010101010101010101010101010101010101010101010101') == '27')\nassert(solution('1101010101010101010101010101010101010101010101010101') == '28')\nassert(solution('110101010101010101010101010101010101010101010101010101') == '29')\nassert(solution('11010101010101010101010101010101010101010101010101010101') == '30')\nassert(solution('1101010101010101010101010101010101010101010101010101010101') == '31')\nassert(solution('110101010101010101010101010101010101010101010101010101010101') == '32')\nassert(solution('11010101010101010101010101010101010101010101010101010101010101') == '33')\nassert(solution('1101010101010101010101010101010101010101010101010101010101010101') == '34')\nassert(solution('110101010101010101010101010101010101010101010101010101010101010101') == '35')\nassert(solution('11010101010101010101010101010101010101010101010101010101010101010101') == '36')\nassert(solution('1101010101010101010101010101010101010101010101010101010101010101010101') == '37')\nassert(solution('110101010101010101010101010101010101010101010101010101010101010101010101') == '38')\nassert(solution('11010101010101010101010101010101010101010101010101010101010101010101010101') == '39')\nassert(solution('1101010101010101010101010101010101010101010101010101010101010101010101010101') == '40')\nassert(solution('110101010101010101010101010101010101010101010101010101010101010101010101010101') == '41')\nassert(solution('11010101010101010101010101010101010101010101010101010101010101010101010101010101') == '42')\nassert(solution('1101010101010101010101010101010101010101010101010101010101010101010101010101010101') == '43')\nassert(solution('110101010101010101010101010101010101010101010101010101010101010101010101010101010101') == '44')\nassert(solution('110101010101010101010101010101010101010101010101010101010101010101010101010101010101') == '45')\nassert(solution('110101010101010101010101010101010101010101010101010101010101010101010101010101010101') == '46')\nassert(solution('110101010101010101010101010101010101010101010101010101010101010101010101010101010101')"
    },
    {
        "number": 3220,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    moves = stdin.readline().strip().split()\n    moves = [int(m) for m in moves]\n    moves = [m - 1 for m in moves]\n    moves = [m % n for m in moves]\n    moves = [m for m in moves if m!= 0]\n    moves = [m for m in moves if m!= n - 1]\n    moves = [m for m in moves if m!= n - 2]\n    moves = [m for m in moves if m!= n - 3]\n    moves = [m for m in moves if m!= n - 4]\n    moves = [m for m in moves if m!= n - 5]\n    moves = [m for m in moves if m!= n - 6]\n    moves = [m for m in moves if m!= n - 7]\n    moves = [m for m in moves if m!= n - 8]\n    moves = [m for m in moves if m!= n - 9]\n    moves = [m for m in moves if m!= n - 10]\n    moves = [m for m in moves if m!= n - 11]\n    moves = [m for m in moves if m!= n - 12]\n    moves = [m for m in moves if m!= n - 13]\n    moves = [m for m in moves if m!= n - 14]\n    moves = [m for m in moves if m!= n - 15]\n    moves = [m for m in moves if m!= n - 16]\n    moves = [m for m in moves if m!= n - 17]\n    moves = [m for m in moves if m!= n - 18]\n    moves = [m for m in moves if m!= n - 19]\n    moves = [m for m in moves if m!= n - 20]\n    moves = [m for m in moves if m!= n - 21]\n    moves = [m for m in moves if m!= n - 22]\n    moves = [m for m in moves if m!= n - 23]\n    moves = [m for m in moves if m!= n - 24]\n    moves = [m for m in moves if m!= n - 25]\n    moves = [m for m in moves if m!= n - 26]\n    moves = [m for m in moves if m!= n - 27]\n    moves = [m for m in moves if m!= n - 28]\n    moves = [m for m in moves if m!= n - 29]\n    moves = [m for m in moves if m!= n - 30]\n    moves = [m for m in moves if m!= n - 31]\n    moves = [m for m in moves if m!= n - 32]\n    moves = [m for m in moves if m!= n - 33]\n    moves = [m for m in moves if m!= n - 34]\n    moves = [m for m in moves if m!= n - 35]\n    moves = [m for m in moves if m!= n - 36]\n    moves = [m for m in moves if m!= n - 37]\n    moves = [m for m in moves if m!= n - 38]\n    moves = [m for m in moves if m!= n - 39]\n    moves = [m for m in moves if m!= n - 40]\n    moves = [m for m in moves if m!= n - 41]\n    moves = [m for m in moves if m!= n - 42]\n    moves = [m for m in moves if m!= n - 43]\n    moves = [m for m in moves if m!= n - 44]\n    moves = [m for m in moves if m!= n - 45]\n    moves = [m for m in moves if m!= n - 46]\n    moves = [m for m in moves if m!= n - 47]\n    moves = [m for m in moves if m!= n - 48]\n    moves = [m for m in moves if m!= n - 49]\n    moves = [m for m in moves if m!= n - 50]\n    moves = [m for m in moves if m!= n - 51]\n    moves = [m for m in moves if m!= n - 52]\n    moves = [m for m in moves if m!= n - 53]\n    moves = [m for m in moves if m!= n - 54]\n    moves = [m for m in moves if m!= n - 55]\n    moves = [m for m in moves if m!= n - 56]\n    moves = [m for m in moves if m!= n - 57]\n    moves = [m for m in moves if m!= n - 58]\n    moves = [m for m in moves if m!= n - 59]\n    moves = [m for m in moves if m!= n - 60]\n    moves = [m for m in moves if m!= n - 61]\n    moves = [m for m in moves if m!= n - 62]\n    moves = [m for m in moves if m!= n - 63]\n    moves = [m for m in moves if m!= n - 64]\n    moves = [m for m in moves if m!= n - 65]\n    moves = [m for m in moves if m!= n - 66]\n    moves = [m for m in moves if m!= n - 67]\n    moves = [m for m in moves if m!= n - 68]\n    moves = [m for m in moves if m!= n - 69]\n    moves = [m for m in moves if m!= n - 70]\n    moves = [m for m in moves if m!= n - 71]\n    moves = [m for m in moves if m!= n - 72]\n    moves = [m for m in moves if m!= n - 73]\n    moves = [m for m in moves if m!= n - 74]\n    moves = [m for m in moves if m!= n - 75]\n    moves = [m for m in moves if m!= n - 76]\n    moves = [m for m in moves if m!= n - 77]\n    moves = [m for m in moves if m!= n - 78]\n    moves = [m for m in moves if m!= n - 79]\n    moves = [m for m in moves if m!= n - 80]\n    moves = [m for m in moves if m!= n - 81]\n    moves = [m for m in moves if m!= n - 82]\n    moves = [m for m in moves if m!= n - 83]\n    moves = [m for m in moves"
    },
    {
        "number": 3221,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, alpha = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n    junctions = [int(x) for x in stdin.split()]\n    junctions.sort()\n    junctions = [x for x in junctions if x > 0]\n    junctions = [x for x in junctions if x < N]\n    junctions = [x for x in junctions if x not in [x1 for x1, x2 in roads]]\n    roads = [x for x in roads if x[0] in junctions and x[1] in junctions]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > x[1]]\n    roads = [x for x in roads if x[0] < x[1"
    },
    {
        "number": 3222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    if N == 1:\n        return \"Yeah!\"\n    if M == 0:\n        return \"No way!\"\n    if M == 1:\n        return \"Yeah!\"\n    if M == 2:\n        return \"No way!\"\n    if M == 3:\n        return \"No way!\"\n    if M == 4:\n        return \"No way!\"\n    if M == 5:\n        return \"No way!\"\n    if M == 6:\n        return \"No way!\"\n    if M == 7:\n        return \"No way!\"\n    if M == 8:\n        return \"No way!\"\n    if M == 9:\n        return \"No way!\"\n    if M == 10:\n        return \"No way!\"\n    if M == 11:\n        return \"No way!\"\n    if M == 12:\n        return \"No way!\"\n    if M == 13:\n        return \"No way!\"\n    if M == 14:\n        return \"No way!\"\n    if M == 15:\n        return \"No way!\"\n    if M == 16:\n        return \"No way!\"\n    if M == 17:\n        return \"No way!\"\n    if M == 18:\n        return \"No way!\"\n    if M == 19:\n        return \"No way!\"\n    if M == 20:\n        return \"No way!\"\n    if M == 21:\n        return \"No way!\"\n    if M == 22:\n        return \"No way!\"\n    if M == 23:\n        return \"No way!\"\n    if M == 24:\n        return \"No way!\"\n    if M == 25:\n        return \"No way!\"\n    if M == 26:\n        return \"No way!\"\n    if M == 27:\n        return \"No way!\"\n    if M == 28:\n        return \"No way!\"\n    if M == 29:\n        return \"No way!\"\n    if M == 30:\n        return \"No way!\"\n    if M == 31:\n        return \"No way!\"\n    if M == 32:\n        return \"No way!\"\n    if M == 33:\n        return \"No way!\"\n    if M == 34:\n        return \"No way!\"\n    if M == 35:\n        return \"No way!\"\n    if M == 36:\n        return \"No way!\"\n    if M == 37:\n        return \"No way!\"\n    if M == 38:\n        return \"No way!\"\n    if M == 39:\n        return \"No way!\"\n    if M == 40:\n        return \"No way!\"\n    if M == 41:\n        return \"No way!\"\n    if M == 42:\n        return \"No way!\"\n    if M == 43:\n        return \"No way!\"\n    if M == 44:\n        return \"No way!\"\n    if M == 45:\n        return \"No way!\"\n    if M == 46:\n        return \"No way!\"\n    if M == 47:\n        return \"No way!\"\n    if M == 48:\n        return \"No way!\"\n    if M == 49:\n        return \"No way!\"\n    if M == 50:\n        return \"No way!\"\n    if M == 51:\n        return \"No way!\"\n    if M == 52:\n        return \"No way!\"\n    if M == 53:\n        return \"No way!\"\n    if M == 54:\n        return \"No way!\"\n    if M == 55:\n        return \"No way!\"\n    if M == 56:\n        return \"No way!\"\n    if M == 57:\n        return \"No way!\"\n    if M == 58:\n        return \"No way!\"\n    if M == 59:\n        return \"No way!\"\n    if M == 60:\n        return \"No way!\"\n    if M == 61:\n        return \"No way!\"\n    if M == 62:\n        return \"No way!\"\n    if M == 63:\n        return \"No way!\"\n    if M == 64:\n        return \"No way!\"\n    if M == 65:\n        return \"No way!\"\n    if M == 66:\n        return \"No way!\"\n    if M == 67:\n        return \"No way!\"\n    if M == 68:\n        return \"No way!\"\n    if M == 69:\n        return \"No way!\"\n    if M == 70:\n        return \"No way!\"\n    if M == 71:\n        return \"No way!\"\n    if M == 72:\n        return \"No way!\"\n    if M == 73:\n        return \"No way!\"\n    if M == 74:\n        return \"No way!\"\n    if M == 75:\n        return \"No way!\"\n    if M == 76:\n        return \"No way!\"\n    if M == 77:\n        return \"No way!\"\n    if M == 78:\n        return \"No way!\"\n    if M == 79:\n        return \"No way!\"\n    if M == 80:\n        return \"No way!\"\n    if M == 81:\n        return \"No way!\"\n    if M == 82:\n        return \"No way!\"\n    if M == 83:\n        return \"No way!\"\n    if M == 84:\n        return \"No way!\"\n    if M == 85:\n        return \"No way!\"\n    if M == 86:\n        return \"No way!\"\n    if M == 87:\n        return \"No way!\"\n    if M == 88:\n        return \"No way!\"\n    if M == 89:\n        return \"No way!\"\n    if M == 90:\n        return \"No way!\"\n    if M == 91:\n        return \"No way!\"\n    if M == 92:\n        return \"No way!\"\n    if M == 93:\n        return \"No way!\"\n    if M == 94:\n        return \"No way!\"\n    if M == 95:\n        return \"No way!\"\n    if M == 96:\n        return \"No way!\"\n    if M == 97:\n        return \"No way!\"\n    if M == 98:\n        return \"No"
    },
    {
        "number": 3223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    degrees = [int(x) for x in stdin.readline().strip().split()]\n    if n < 2:\n        return \"IMPOSSIBLE\"\n    if n == 2:\n        if degrees[0]!= degrees[1]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 3:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 4:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 5:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 6:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 7:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5] or degrees[0]!= degrees[6]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 8:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5] or degrees[0]!= degrees[6] or degrees[0]!= degrees[7]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 9:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5] or degrees[0]!= degrees[6] or degrees[0]!= degrees[7] or degrees[0]!= degrees[8]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 10:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5] or degrees[0]!= degrees[6] or degrees[0]!= degrees[7] or degrees[0]!= degrees[8] or degrees[0]!= degrees[9]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 11:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5] or degrees[0]!= degrees[6] or degrees[0]!= degrees[7] or degrees[0]!= degrees[8] or degrees[0]!= degrees[9] or degrees[0]!= degrees[10]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 12:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5] or degrees[0]!= degrees[6] or degrees[0]!= degrees[7] or degrees[0]!= degrees[8] or degrees[0]!= degrees[9] or degrees[0]!= degrees[10] or degrees[0]!= degrees[11]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 13:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5] or degrees[0]!= degrees[6] or degrees[0]!= degrees[7] or degrees[0]!= degrees[8] or degrees[0]!= degrees[9] or degrees[0]!= degrees[10] or degrees[0]!= degrees[11] or degrees[0]!= degrees[12]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 14:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5] or degrees[0]!= degrees[6] or degrees[0]!= degrees[7] or degrees[0]!= degrees[8] or degrees[0]!= degrees[9] or degrees[0]!= degrees[10] or degrees[0]!= degrees[11] or degrees[0]!= degrees[12] or degrees[0]!= degrees[13]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 15:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5] or degrees[0]!= degrees[6] or degrees[0]!= degrees[7] or degrees[0]!= degrees[8] or degrees[0]!= degrees[9] or degrees[0]!= degrees[10] or degrees[0]!= degrees[11] or degrees[0]!= degrees[12] or degrees[0]!= degrees[13] or degrees[0]!= degrees[14]:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"POSSIBLE\"\n    if n == 16:\n        if degrees[0]!= degrees[1] or degrees[0]!= degrees[2] or degrees[0]!= degrees[3] or degrees[0]!= degrees[4] or degrees[0]!= degrees[5] or degrees[0]!= degrees[6] or degrees[0]!= degrees[7] or degrees[0]!= degrees[8] or degrees[0]!= degrees["
    },
    {
        "number": 3224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, z1 = map(int, stdin.split())\n    x2, y2, z2 = map(int, stdin.split())\n    x3, y3, z3 = map(int, stdin.split())\n    x4, y4, z4 = map(int, stdin.split())\n    return str(x1 + y1 + z1) + \" \" + str(x2 + y2 + z2) + \" \" + str(x3 + y3 + z3)"
    },
    {
        "number": 3225,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n    m = 0\n    while True:\n        m += 1\n        v_new = [0] * n\n        for i in range(n):\n            if i == 0:\n                v_new[i] = v[i]\n            elif i == n - 1:\n                v_new[i] = v[i - 1]\n            else:\n                v_new[i] = max(v[i - 1], v[i])\n        if v_new == v:\n            break\n        v = v_new\n    return str(m)"
    },
    {
        "number": 3226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, e = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    exits = [int(x) for x in stdin.split()]\n    brothers, police = exits[0], exits[1]\n    roads = sorted(roads, key=lambda x: x[2])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda"
    },
    {
        "number": 3227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, E = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(E)]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [roads[i] for i in range(E)]\n    chains = [0] * N\n    for i in range(E):\n        if chains[roads[i][0] - 1] == 0 and chains[roads[i][1] - 1] == 0:\n            chains[roads[i][0] - 1] = 1\n            chains[roads[i][1] - 1] = 1\n        elif chains[roads[i][0] - 1] == 0:\n            chains[roads[i][0] - 1] = 2\n        elif chains[roads[i][1] - 1] == 0:\n            chains[roads[i][1] - 1] = 2\n    return ''.join(str(x) for x in chains)"
    },
    {
        "number": 3228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, g = map(int, stdin.split())\n    gondolas = [int(stdin) for stdin in stdin.split()]\n    gondolas.sort()\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)\n    gondolas.append(t)\n    gondolas.insert(0, 0)"
    },
    {
        "number": 3229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    scores = [int(x) for x in stdin.split()]\n    scores.sort(reverse=True)\n    ranks = [0] * (n + 1)\n    for i in range(n):\n        ranks[i + 1] = ranks[i] + 1\n        for j in range(i + 1, n):\n            if scores[i] < scores[j]:\n                ranks[j + 1] = ranks[i] + 1\n    return str(ranks[n])"
    },
    {
        "number": 3230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    tram = [list(stdin.strip()) for _ in range(R)]\n    explosions = 0\n    for row in range(R):\n        for col in range(C):\n            if tram[row][col] == 'X':\n                explosions += 1\n                tram[row][col] = 'L'\n                if row > 0:\n                    tram[row - 1][col] = 'L'\n                if row < R - 1:\n                    tram[row + 1][col] = 'L'\n                if col > 0:\n                    tram[row][col - 1] = 'L'\n                if col < C - 1:\n                    tram[row][col + 1] = 'L'\n    return str(explosions)"
    },
    {
        "number": 3231,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(x) for x in stdin.split()]\n    if n < 1 or n > 2500 or p + q > 15:\n        return \"detention\"\n    if n == 1:\n        return \"home\"\n    if n == 2:\n        return \"home\" if p == 1 else \"detention\"\n    if n == 3:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 4:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 5:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 6:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 7:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 8:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 9:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 10:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 11:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 12:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 13:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 14:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 15:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 16:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 17:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 18:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 19:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 20:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 21:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 22:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 23:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 24:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 25:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 26:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 27:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 28:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 29:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 30:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 31:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 32:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 33:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 34:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 35:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 36:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 37:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 38:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 39:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 40:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 41:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 42:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 43:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 44:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 45:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 46:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 47:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 48:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n    if n == 49:\n        return \"home\" if p == 1 and q == 1 else \"detention\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return -1\n    s = stdin\n    l = len(s)\n    if l % 2!= 0:\n        return -1\n    s = list(s)\n    for i in range(0, l, 2):\n        s[i], s[i + 1] = s[i + 1], s[i]\n    return ''.join(s)"
    },
    {
        "number": 3233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    arr.sort()\n    median = arr[n // 2] if n % 2 == 1 else (arr[n // 2] + arr[n // 2 - 1]) / 2\n    count = 0\n    for i in range(n):\n        if arr[i] < median:\n            count += 1\n    return count"
    },
    {
        "number": 3234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n // 2)"
    },
    {
        "number": 3235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    friends = [set() for _ in range(n)]\n    for _ in range(m):\n        a, b, c = [int(x) for x in stdin.split()]\n        friends[a].add(b)\n        friends[b].add(a)\n    debts = [0] * n\n    for i in range(n):\n        for j in friends[i]:\n            debts[i] += debts[j]\n    for i in range(n):\n        debts[i] -= debts[i] // n\n    return''.join(str(x) for x in debts)"
    },
    {
        "number": 3236,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    mansions = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] < x[1]]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0] < n and x[1] < n]\n    roads = [x for x in roads if x[0] > 0 and x[1] > 0]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0] > 0"
    },
    {
        "number": 3237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    prime_factors = [int(x) for x in stdin.split(' ')]\n    prime_factors.sort()\n    prime_factors.reverse()\n    prime_factors_count = {}\n    for i in range(len(prime_factors)):\n        if prime_factors[i] in prime_factors_count:\n            prime_factors_count[prime_factors[i]] += 1\n        else:\n            prime_factors_count[prime_factors[i]] = 1\n    prime_factors_count = sorted(prime_factors_count.items(), key=lambda x: x[1])\n    prime_factors_count.reverse()\n    prime_factors_count = [x[0] for x in prime_factors_count]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count[:len(prime_factors_count) - 1]\n    prime_factors_count.reverse()\n    prime_factors_count = prime_factors_count["
    },
    {
        "number": 3238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(float, stdin.split())\n    return str(n * p)\n\nassert(solution('''50 0.125''') == '16.339203308')\nassert(solution('''201 1.000''') == '5.000000000')\n''')\n"
    },
    {
        "number": 3240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, v = [int(x) for x in stdin.split()]\n    probabilities = [float(x) for x in stdin.split()]\n    votes = [int(x) for x in stdin.split()]\n    probabilities.sort(reverse=True)\n    votes.sort(reverse=True)\n    probabilities = probabilities[:k]\n    votes = votes[:k]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x / sum(probabilities) for x in probabilities]\n    votes = [x / sum(votes) for x in votes]\n    probabilities = [x * v for x in probabilities]\n    votes = [x * v for x in votes]\n    probabilities = [x"
    },
    {
        "number": 3241,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n < 2:\n        return '-1'\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    if sum(b) == 0:\n        return '-1'\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    a = [x for x in a if x!= 0]\n    b = [x for x in b if x!= 0]\n    if len(a) == 0:\n        return '-1'\n    if len(a) == 1:\n        return str(a[0] * b[0])\n    if len(a) == 2:\n        return str(a[0] * b[1] + a[1] * b[0])\n    if len(a) == 3:\n        return str(a[0] * b[2] + a[1] * b[1] + a[2] * b[0])\n    if len(a) == 4:\n        return str(a[0] * b[3] + a[1] * b[2] + a[2] * b[1] + a[3] * b[0])\n    if len(a) == 5:\n        return str(a[0] * b[4] + a[1] * b[3] + a[2] * b[2] + a[3] * b[1] + a[4] * b[0])\n    if len(a) == 6:\n        return str(a[0] * b[5] + a[1] * b[4] + a[2] * b[3] + a[3] * b[2] + a[4] * b[1] + a[5] * b[0])\n    if len(a) == 7:\n        return str(a[0] * b[6] + a[1] * b[5] + a[2] * b[4] + a[3] * b[3] + a[4] * b[2] + a[5] * b[1] + a[6] * b[0])\n    if len(a) == 8:\n        return str(a[0] * b[7] + a[1] * b[6] + a[2] * b[5] + a[3] * b[4] + a[4] * b[3] + a[5] * b[2] + a[6] * b[1] + a[7] * b[0])\n    if len(a) == 9:\n        return str(a[0] * b[8] + a[1] * b[7] + a[2] * b[6] + a[3] * b[5] + a[4] * b[4] + a[5] * b[3] + a[6] * b[2] + a[7] * b[1] + a[8] * b[0])\n    if len(a) == 10:\n        return str(a[0] * b[9] + a[1] * b[8] + a[2] * b[7] + a[3] * b[6] + a[4] * b[5] + a[5] * b[4] + a[6] * b[3] + a[7] * b[2] + a[8] * b[1] + a[9] * b[0])\n    if len(a) == 11:\n        return str(a[0] * b[10] + a[1] * b[9] + a[2] * b[8] + a[3] * b[7] + a[4] * b[6] + a[5] * b[5] + a[6] * b[4] + a[7] * b[3] + a[8] * b[2] + a[9] * b[1] + a[10] * b[0])\n    if len(a) == 12:\n        return str(a[0] * b[11] + a[1] * b[10] + a[2] * b[9] + a[3] * b[8] + a[4] * b[7] + a[5] * b[6] + a[6] * b[5] + a[7] * b[4] + a[8] * b[3] + a[9] * b[2] + a[10] * b[1] + a[11] * b[0])\n    if len(a) == 13:\n        return str(a[0] * b[12] + a[1] * b[11] + a[2] * b[10] + a[3] * b[9] + a[4] * b[8] + a[5] * b[7] + a[6] * b[6] + a[7] * b[5] + a[8] * b[4] + a[9] * b[3] + a[10] * b[2] + a[11] * b[1] + a[12] * b[0])\n    if len(a) == 14:\n        return str(a[0] * b[13] + a[1] * b[12] + a[2] * b[11] + a[3] * b[10] + a[4] * b[9] + a[5] * b[8] + a[6] * b[7] +"
    },
    {
        "number": 3242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = [int(x) for x in stdin.split()]\n    boxes = [int(x) for x in stdin.split()]\n    energy = 0\n    for i in range(N):\n        energy += min(boxes[i], (boxes[i] * P))\n    return str(energy)"
    },
    {
        "number": 3243,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    edges = [set() for _ in range(n)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        edges[u].add(v)\n        edges[v].add(u)\n    visited = [False] * n\n    def dfs(u: int, k: int) -> bool:\n        if k == 0:\n            return True\n        if visited[u]:\n            return False\n        visited[u] = True\n        for v in edges[u]:\n            if dfs(v, k - 1):\n                return True\n        return False\n    return \"yes\" if dfs(0, k) else \"no\""
    },
    {
        "number": 3244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ring = [int(stdin.readline().strip()) for _ in range(n)]\n    ring.append(ring[0])\n    return '\\n'.join(str(ring[i]) for i in range(n))"
    },
    {
        "number": 3245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    history = []\n    for _ in range(n):\n        line = stdin.readline().strip()\n        if line == \"\":\n            history.pop()\n        else:\n            history.append(line)\n    return \"\\n\".join(history)"
    },
    {
        "number": 3246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n    words = set(words)\n    for word in words:\n        if s.count(word) > 1:\n            return \"impossible\"\n    return s"
    },
    {
        "number": 3247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - 2) * factorial(2)))"
    },
    {
        "number": 3248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    street = stdin.readline().strip()\n    m = int(stdin.readline().strip())\n    patterns = [stdin.readline().strip() for _ in range(m)]\n    return str(untileable_cells(n, street, patterns))\n\ndef"
    },
    {
        "number": 3249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C = int(stdin.readline().strip())\n    N = int(stdin.readline().strip())\n    hull = []\n    for _ in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        hull.append((x, y))\n    hull.sort(key=lambda x: x[0])\n    hull.sort(key=lambda x: x[1])\n    hull.sort(key=lambda x: x[0] - x[1])\n    hull.sort(key=lambda x: x[1] - x[0])\n    hull.sort(key=lambda x: x[0] + x[1])\n    hull.sort(key=lambda x: x[1] + x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0] / x[1])\n    hull.sort(key=lambda x: x[1] / x[0])\n    hull.sort(key=lambda x: x[0] * x[1])\n    hull.sort(key=lambda x: x[1] * x[0])\n    hull.sort(key=lambda x: x[0]"
    },
    {
        "number": 3250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d = [int(x) for x in stdin.split()]\n    if not is_prime(d):\n        return \"no\"\n    for i in range(1, b + 1):\n        if not is_multiple(i, d):\n            return \"yes\"\n    return \"no\"\n\ndef"
    },
    {
        "number": 3251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    intervals = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    intervals.sort()\n    intervals.append((float('inf'), float('inf')))\n    intervals = [intervals[0]] + [intervals[i] for i in range(1, len(intervals)) if intervals[i][0] > intervals[i - 1][1]]\n    intervals.sort(key=lambda x: x[1])\n    print(intervals)\n    result = []\n    for i in range(1, len(intervals)):\n        if intervals[i][0] > intervals[i - 1][1]:\n            result.append(intervals[i])\n    print(result)\n    return result"
    },
    {
        "number": 3252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    cards = [int(x) for x in stdin.split()]\n    envelopes = [0] * n\n    for i in range(n):\n        envelopes[i] = cards[i] * cards[i]\n    envelopes.sort()\n    envelopes.reverse()\n    for i in range(n):\n        envelopes[i] = envelopes[i] - (i + 1) * cards[i]\n    return str(sum(envelopes[:k]))"
    },
    {
        "number": 3253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    votes = [int(stdin.readline().strip().split()[1]) for _ in range(n)]\n    votes_by_state = [0] * n\n    for i in range(n):\n        votes_by_state[i] = votes[i] - votes[i] % 2\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n    votes_by_state.sort()\n    votes_by_state.reverse()\n    votes_by_state = votes_by_state[:n]\n"
    },
    {
        "number": 3254,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P = float(stdin)\n    if P < 1 or P > 5:\n        raise ValueError(\"P must be between 1 and 5\")\n    if P == 1:\n        return \"0 0 0 0 1\"\n    if P == 2:\n        return \"0 0 0 1 1\"\n    if P == 3:\n        return \"0 0 0 1 1\"\n    if P == 4:\n        return \"0 0 0 1 1\"\n    if P == 5:\n        return \"0 0 0 1 1\"\n    if P == 6:\n        return \"0 0 0 1 1\"\n    if P == 7:\n        return \"0 0 0 1 1\"\n    if P == 8:\n        return \"0 0 0 1 1\"\n    if P == 9:\n        return \"0 0 0 1 1\"\n    if P == 10:\n        return \"0 0 0 1 1\"\n    if P == 11:\n        return \"0 0 0 1 1\"\n    if P == 12:\n        return \"0 0 0 1 1\"\n    if P == 13:\n        return \"0 0 0 1 1\"\n    if P == 14:\n        return \"0 0 0 1 1\"\n    if P == 15:\n        return \"0 0 0 1 1\"\n    if P == 16:\n        return \"0 0 0 1 1\"\n    if P == 17:\n        return \"0 0 0 1 1\"\n    if P == 18:\n        return \"0 0 0 1 1\"\n    if P == 19:\n        return \"0 0 0 1 1\"\n    if P == 20:\n        return \"0 0 0 1 1\"\n    if P == 21:\n        return \"0 0 0 1 1\"\n    if P == 22:\n        return \"0 0 0 1 1\"\n    if P == 23:\n        return \"0 0 0 1 1\"\n    if P == 24:\n        return \"0 0 0 1 1\"\n    if P == 25:\n        return \"0 0 0 1 1\"\n    if P == 26:\n        return \"0 0 0 1 1\"\n    if P == 27:\n        return \"0 0 0 1 1\"\n    if P == 28:\n        return \"0 0 0 1 1\"\n    if P == 29:\n        return \"0 0 0 1 1\"\n    if P == 30:\n        return \"0 0 0 1 1\"\n    if P == 31:\n        return \"0 0 0 1 1\"\n    if P == 32:\n        return \"0 0 0 1 1\"\n    if P == 33:\n        return \"0 0 0 1 1\"\n    if P == 34:\n        return \"0 0 0 1 1\"\n    if P == 35:\n        return \"0 0 0 1 1\"\n    if P == 36:\n        return \"0 0 0 1 1\"\n    if P == 37:\n        return \"0 0 0 1 1\"\n    if P == 38:\n        return \"0 0 0 1 1\"\n    if P == 39:\n        return \"0 0 0 1 1\"\n    if P == 40:\n        return \"0 0 0 1 1\"\n    if P == 41:\n        return \"0 0 0 1 1\"\n    if P == 42:\n        return \"0 0 0 1 1\"\n    if P == 43:\n        return \"0 0 0 1 1\"\n    if P == 44:\n        return \"0 0 0 1 1\"\n    if P == 45:\n        return \"0 0 0 1 1\"\n    if P == 46:\n        return \"0 0 0 1 1\"\n    if P == 47:\n        return \"0 0 0 1 1\"\n    if P == 48:\n        return \"0 0 0 1 1\"\n    if P == 49:\n        return \"0 0 0 1 1\"\n    if P == 50:\n        return \"0 0 0 1 1\"\n    if P == 51:\n        return \"0 0 0 1 1\"\n    if P == 52:\n        return \"0 0 0 1 1\"\n    if P == 53:\n        return \"0 0 0 1 1\"\n    if P == 54:\n        return \"0 0 0 1 1\"\n    if P == 55:\n        return \"0 0 0 1 1\"\n    if P == 56:\n        return \"0 0 0 1 1\"\n    if P == 57:\n        return \"0 0 0 1 1\"\n    if P == 58:\n        return \"0 0 0 1 1\"\n    if P == 59:\n        return \"0 0 0 1 1\"\n    if P == 60:\n        return \"0 0 0 1 1\"\n    if P == 61:\n        return \"0 0 0 1 1\"\n    if P == 62:\n        return \"0 0 0 1 1\"\n    if P == 63:\n        return \"0 0 0 1 1\"\n    if P == 64:\n        return \"0 0 0 1 1\"\n    if P == 65:\n        return \"0 0 0 1 1\"\n    if P == 66:\n        return \"0 0 0 1 1\"\n    if P == 67:\n        return \"0 0 0 1 1\"\n    if P == 68:\n        return \"0 0 0 1 1\"\n    if P == 69:\n        return \"0 0 0 1 1\"\n    if P == 70:\n        return \"0 0 0 1 1\"\n    if P == 71:\n        return \"0 0 0 1 1\"\n    if P == 72:\n        return \"0 0 0 1 1\"\n    if P == 73:\n        return \"0 0 0 1 1\"\n    if P == 74:\n        return \"0 0 0 1 1\"\n    if P == 75:\n        return \"0 0 0 1 1\"\n    if P == 76:\n        return \"0 0 0 1 1\"\n    if P == 77:\n        return \"0 0 0 1 1\"\n    if P == 78:\n        return \"0 0 0 1 1\"\n    if P == 79:\n        return \"0 0 0 1 1\"\n    if P == 80:\n        return \"0 0 0 1 1\"\n    if P == 81:\n        return \"0 0 0 1 1\"\n    if P == 82:\n        return \"0 0 0 1 1\"\n    if P == 83:\n        return \"0 0 0 1 1\"\n    if P == 84:\n        return \"0 0 0 1 1\"\n    if P == 85:\n        return \"0 0 0 1 1\"\n    if P == 86:\n        return \"0 0 0 1 1\"\n    if P == 87:\n        return \"0 0 0 1 1\"\n    if P == 88:\n        return \"0 0 0 1 1\"\n    if P == 89:\n        return \"0 0 0 1 1\"\n    if P == 90:\n        return \"0 0 0 1 1\"\n    if P == 91:\n        return \"0 0 0 1 1\"\n    if P == 92:\n        return \"0 0 0 1 1\"\n    if P == 93:\n        return \"0 0 0 1 1\"\n    if P == 94:\n        return \"0 0 0 1 1\"\n    if P == 95:\n        return \"0 0 0 1 1\"\n    if P == 96:\n        return \"0 0 0 1 1\"\n    if P == 97:\n        return \"0 0 0 1 1\"\n    if P == 98:\n        return \"0 0 0 1 1\"\n    if P == 99:\n        return \"0 0 0 1 1\"\n    if P == 100:\n        return \"0 0 0 1 1\"\n    if P == 101:\n        return \"0 0 0 1 1\"\n    if P == 102:\n        return \"0 0 0 1 1\"\n    if P == 103:\n        return \"0 0 0 1 1\"\n    if P == 104:\n        return \"0 0 0 1 1\"\n    if P == 105:"
    },
    {
        "number": 3255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(solution_naive(a, d, m))\n\ndef"
    },
    {
        "number": 3256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(n):\n        ans = max(ans, a[i] & (1 << i))\n    return str(ans)"
    },
    {
        "number": 3257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [float(x) for x in stdin.split()]\n    if a + b > c and a + c > b and b + c > a:\n        return str(round((a * b * c) ** 0.5, 3))\n    else:\n        return \"-1\""
    },
    {
        "number": 3258,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    m = float(stdin.readline().strip())\n    mice = []\n    for _ in range(n):\n        x, y, s = [int(x) for x in stdin.readline().strip().split()]\n        mice.append((x, y, s))\n    mice.sort(key=lambda x: x[2])\n    mice.sort(key=lambda x: x[1])\n    mice.sort(key=lambda x: x[0])\n    mice.sort(key=lambda x: x[1] - x[0])\n    mice.sort(key=lambda x: x[0] - x[1])\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[1] - x[0] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m)\n    mice.sort(key=lambda x: x[0] - x[1] * m"
    },
    {
        "number": 3259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    boxes = [0] * n\n    for _ in range(q):\n        l, r, a, b = [int(x) for x in stdin.split()]\n        if l == 1:\n            boxes[l - 1] = (a % b)\n        elif l == 2:\n            print(sum(boxes[l - 1:r]))\n        else:\n            for i in range(l - 1, r):\n                boxes[i] = (boxes[i] + (a % b)) % b\n    return '\\n'.join(str(x) for x in boxes)"
    },
    {
        "number": 3260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n    return str(count_permutations(n, k, p))\n\ndef"
    },
    {
        "number": 3261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    K = int(stdin.readline())\n    return str(bin(K).count('1'))"
    },
    {
        "number": 3262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    clients = [int(x) for x in stdin.split()]\n    clients = {x: i for i, x in enumerate(clients)}\n    graph = [[] for _ in range(n)]\n    for u, v, w in roads:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    def dfs(u: int, visited: set[int]) -> int:\n        visited.add(u)\n        for v, w in graph[u]:\n            if v not in visited:\n                dfs(v, visited)\n        return len(visited)\n    \n    def bfs(u: int, visited: set[int]) -> int:\n        visited.add(u)\n        queue = deque([u])\n        while queue:\n            u = queue.popleft()\n            for v, w in graph[u]:\n                if v not in visited:\n                    visited.add(v)\n                    queue.append(v)\n        return len(visited)\n    \n    def dfs_bfs(u: int, visited: set[int]) -> int:\n        visited.add(u)\n        dfs_visited = dfs(u, visited)\n        bfs_visited = bfs(u, visited)\n        return min(dfs_visited, bfs_visited)\n    \n    def dfs_bfs_clients(u: int, visited: set[int], clients: dict[int, int]) -> int:\n        visited.add(u)\n        dfs_visited = dfs(u, visited)\n        bfs_visited = bfs(u, visited)\n        if dfs_visited == bfs_visited:\n            return dfs_visited\n        \n        for v, w in graph[u]:\n            if v not in visited:\n                dfs_bfs_clients(v, visited, clients)\n        \n        if dfs_visited < bfs_visited:\n            clients[u] = dfs_visited\n        else:\n            clients[u] = bfs_visited\n    \n    clients_visited = set()\n    for u in clients:\n        dfs_bfs_clients(u, clients_visited, clients)\n    \n    return str(len(clients_visited))"
    },
    {
        "number": 3263,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    P = [int(x) for x in stdin.split()]\n    R = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    P.sort()\n    R.sort()\n    C.sort()\n    P.reverse()\n    R.reverse()\n    C.reverse()\n    P.append(0)\n    R.append(0)\n    C.append(0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    P.insert(0, 0)\n    R.insert(0, 0)\n    C.insert(0, 0)\n    "
    },
    {
        "number": 3264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(n) // (factorial(n - 2) * 2))"
    },
    {
        "number": 3265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(x) for x in stdin.split()]\n    if n < 2 or l < 1:\n        return -1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    "
    },
    {
        "number": 3266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, c = [int(x) for x in stdin.split()]\n        graph[u].append((v, c))\n    return '\\n'.join(\n       ''.join(str(x) for x in row)\n        for row in dfs(graph, s, t)\n    )\n\ndef"
    },
    {
        "number": 3267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    board = [list(stdin.strip()) for _ in range(R)]\n    kings = {'M': 0, 'S': 0}\n    for r in range(R):\n        for c in range(C):\n            if board[r][c] == 'M':\n                kings['M'] += 1\n            elif board[r][c] == 'S':\n                kings['S'] += 1\n            else:\n                continue\n    return''.join(str(x) for x in kings.values())"
    },
    {
        "number": 3268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    tree = {}\n    for _ in range(n):\n        v, t = stdin.readline().strip().split()\n        if t == 'B':\n            tree[int(v)] = 'B'\n        elif t == 'S':\n            tree[int(v)] = 'S'\n        else:\n            tree[int(v)] = 'E'\n    tree[0] = 'B'\n    tree[1] = 'S'\n    tree[2] = 'E'\n    tree[3] = 'E'\n    tree[4] = 'E'\n    tree[5] = 'E'\n    tree[6] = 'E'\n    tree[7] = 'E'\n    tree[8] = 'E'\n"
    },
    {
        "number": 3269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(sum(abs(x - y) for x in range(a, b + 1) for y in range(x, b + 1)))"
    },
    {
        "number": 3270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = set(stdin.readline().strip().split())\n    s, e = stdin.readline().strip().split()\n    if s not in d or e not in d:\n        return \"0\"\n    q = [(s, 0)]\n    visited = set()\n    while q:\n        w, d = q.pop(0)\n        if w == e:\n            return str(d)\n        for i in range(len(w)):\n            for c in \"abcdefghijklmnopqrstuvwxyz\":\n                if c!= w[i]:\n                    nw = w[:i] + c + w[i + 1:]\n                    if nw in d and nw not in visited:\n                        visited.add(nw)\n                        q.append((nw, d + 1))\n    return \"0\""
    },
    {
        "number": 3271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.split()]\n    return str(solution_recursive(n, c))\n\ndef"
    },
    {
        "number": 3272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(n)]\n    gargoyles = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'V':\n                gargoyles.append((i, j))\n    return -1"
    },
    {
        "number": 3273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    fragments = [stdin.readline().strip() for _ in range(n)]\n    fragments.sort(key=len)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if fragments[i][-5:] == fragments[j][:5]:\n                return ''.join(fragments[i:j + 1])\n    return 'AMBIGUOUS'"
    },
    {
        "number": 3274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m > 200000:\n        return \"impossible\"\n    if n > 500000:\n        return \"impossible\"\n    if m == 0:\n        return \"impossible\"\n    if m == 1:\n        return \"-\" * n\n    if m == 2:\n        return \"-\" * n + \"+\"\n    if m == 3:\n        return \"-\" * n + \"+\" + \"+\"\n    if m == 4:\n        return \"-\" * n + \"+\" + \"+\" + \"+\"\n    if m == 5:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 6:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 7:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 8:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 9:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 10:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 11:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 12:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 13:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 14:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 15:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 16:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 17:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 18:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 19:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 20:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 21:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 22:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 23:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\"\n    if m == 24:\n        return \"-\" * n + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\" + \"+\""
    },
    {
        "number": 3275,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    Q = int(stdin.readline())\n    for _ in range(Q):\n        P, a_P, b_P = [int(x) for x in stdin.readline().split()]\n        a[P - 1] = min(a[P - 1], a_P)\n        b[P - 1] = min(b[P - 1], b_P)\n    ans = 0\n    for i in range(N):\n        ans = (ans + a[i] * b[i]) % 10000007\n    return str(ans)"
    },
    {
        "number": 3276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'W':\n                grid[i][j] = 'G'\n    return 'YES' if is_valid(grid) else 'NO'\n\ndef"
    },
    {
        "number": 3277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    changes = 0\n    for i in range(n):\n        if a[i]!= i + 1:\n            changes += 1\n            a[i] = i + 1\n            if sum(a[i:i + k]) == s:\n                changes -= 1\n                a[i] = i\n    return str(changes)"
    },
    {
        "number": 3278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    frogs = []\n    for _ in range(n):\n        x, d = [int(x) for x in stdin.readline().strip().split()]\n        frogs.append((x, d))\n    frogs.sort(key=lambda frog: frog[0])\n    frogs.sort(key=lambda frog: frog[1])\n    pos = 0\n    size = 1\n    for frog in frogs:\n        pos += frog[0]\n        size = max(size, frog[1])\n    return str(pos) + \" \" + str(size)"
    },
    {
        "number": 3279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, stdin.readline().split())))\n    grid_size = len(grid)\n    grid_width = len(grid[0])\n    grid_height = len(grid)\n    grid_size_plus_one = grid_size + 1\n    grid_width_plus_one = grid_width + 1\n    grid_height_plus_one = grid_height + 1\n    grid_size_plus_one_by_grid_size = grid_size_plus_one * grid_size_plus_one\n    grid_width_plus_one_by_grid_width = grid_width_plus_one * grid_width_plus_one\n    grid_height_plus_one_by_grid_height = grid_height_plus_one * grid_height_plus_one\n    grid_size_plus_one_by_grid_size_plus_one = grid_size_plus_one * grid_size_plus_one_by_grid_size\n    grid_width_plus_one_by_grid_width_plus_one = grid_width_plus_one * grid_width_plus_one_by_grid_width\n    grid_height_plus_one_by_grid_height_plus_one = grid_height_plus_one * grid_height_plus_one_by_grid_height\n    grid_size_plus_one_by_grid_size_plus_one_by_grid_size = grid_size_plus_one * grid_size_plus_one_by_grid_size_plus_one\n    grid_width_plus_one_by_grid_width_plus_one_by_grid_width = grid_width_plus_one * grid_width_plus_one_by_grid_width_plus_one\n    grid_height_plus_one_by_grid_height_plus_one_by_grid_height = grid_height_plus_one * grid_height_plus_one_by_grid_height_plus_one\n    grid_size_plus_one_by_grid_size_plus_one_by_grid_size_plus_one = grid_size_plus_one * grid_size_plus_one_by_grid_size_plus_one\n    grid_width_plus_one_by_grid_width_plus_one_by_grid_width_plus_one = grid_width_plus_one * grid_width_plus_one_by_grid_width_plus_one\n    grid_height_plus_one_by_grid_height_plus_one_by_grid_height_plus_one = grid_height_plus_one * grid_height_plus_one_by_grid_height_plus_one\n    grid_size_plus_one_by_grid_size_plus_one_by_grid_size_plus_one_by_grid_size = grid_size_plus_one * grid_size_plus_one_by_grid_size_plus_one\n    grid_width_plus_one_by_grid_width_plus_one_by_grid_width_plus_one_by_grid_width = grid_width_plus_one * grid_width_plus_one_by_grid_width_plus_one\n    grid_height_plus_one_by_grid_height_plus_one_by_grid_height_plus_one_by_grid_height = grid_height_plus_one * grid_height_plus_one_by_grid_height_plus_one\n    grid_size_plus_one_by_grid_size_plus_one_by_grid_size_plus_one_by_grid_size_plus_one = grid_size_plus_one * grid_size_plus_one_by_grid_size_plus_one\n    grid_width_plus_one_by_grid_width_plus_one_by_grid_width_plus_one_by_grid_width_plus_one = grid_width_plus_one * grid_width_plus_one_by_grid_width_plus_one\n    grid_height_plus_one_by_grid_height_plus_one_by_grid_height_plus_one_by_grid_height_plus_one = grid_height_plus_one * grid_height_plus_one_by_grid_height_plus_one\n    grid_size_plus_one_by_grid_size_plus_one_by_grid_size_plus_one_by_grid_size_plus_one_by_grid_size = grid_size_plus_one * grid_size_plus_one_by_grid_size_plus_one\n    grid_width_plus_one_by_grid_width_plus_one_by_grid_width_plus_one_by_grid_width_plus_one_by_grid_width = grid_width_plus_one * grid_width_plus_one_by_grid_width_plus_one\n    grid_height_plus_one_by_grid_height_plus_one_by_grid_height_plus_one_by_grid_height_plus_one_by_grid_height = grid_height_plus_one * grid_height_plus_one_by_grid_height_plus_one\n    grid_size_plus_one_by_grid_size_plus_"
    },
    {
        "number": 3280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    shows = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    shows.sort(key=lambda x: x[1])\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += 1\n        else:\n            if shows[i][0] >= shows[i - 1][1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 3281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    J, R, D = [int(x) for x in stdin.split()]\n    assert 2 <= J <= 200\n    assert 1 <= R <= 40000\n    assert 1 <= D <= 1000000\n    assert D < (1 + 10 ** -6) * (J + 1)\n    assert 1 <= len(stdin.split()) <= 3\n    assert 1 <= len(stdin.split()[0]) <= 2\n    assert 1 <= len(stdin.split()[1]) <= 2\n    assert 1 <= len(stdin.split()[2]) <= 2\n    assert 1 <= len(stdin.split()[3]) <= 2\n    assert 1 <= len(stdin.split()[4]) <= 2\n    assert 1 <= len(stdin.split()[5]) <= 2\n    assert 1 <= len(stdin.split()[6]) <= 2\n    assert 1 <= len(stdin.split()[7]) <= 2\n    assert 1 <= len(stdin.split()[8]) <= 2\n    assert 1 <= len(stdin.split()[9]) <= 2\n    assert 1 <= len(stdin.split()[10]) <= 2\n    assert 1 <= len(stdin.split()[11]) <= 2\n    assert 1 <= len(stdin.split()[12]) <= 2\n    assert 1 <= len(stdin.split()[13]) <= 2\n    assert 1 <= len(stdin.split()[14]) <= 2\n    assert 1 <= len(stdin.split()[15]) <= 2\n    assert 1 <= len(stdin.split()[16]) <= 2\n    assert 1 <= len(stdin.split()[17]) <= 2\n    assert 1 <= len(stdin.split()[18]) <= 2\n    assert 1 <= len(stdin.split()[19]) <= 2\n    assert 1 <= len(stdin.split()[20]) <= 2\n    assert 1 <= len(stdin.split()[21]) <= 2\n    assert 1 <= len(stdin.split()[22]) <= 2\n    assert 1 <= len(stdin.split()[23]) <= 2\n    assert 1 <= len(stdin.split()[24]) <= 2\n    assert 1 <= len(stdin.split()[25]) <= 2\n    assert 1 <= len(stdin.split()[26]) <= 2\n    assert 1 <= len(stdin.split()[27]) <= 2\n    assert 1 <= len(stdin.split()[28]) <= 2\n    assert 1 <= len(stdin.split()[29]) <= 2\n    assert 1 <= len(stdin.split()[30]) <= 2\n    assert 1 <= len(stdin.split()[31]) <= 2\n    assert 1 <= len(stdin.split()[32]) <= 2\n    assert 1 <= len(stdin.split()[33]) <= 2\n    assert 1 <= len(stdin.split()[34]) <= 2\n    assert 1 <= len(stdin.split()[35]) <= 2\n    assert 1 <= len(stdin.split()[36]) <= 2\n    assert 1 <= len(stdin.split()[37]) <= 2\n    assert 1 <= len(stdin.split()[38]) <= 2\n    assert 1 <= len(stdin.split()[39]) <= 2\n    assert 1 <= len(stdin.split()[40]) <= 2\n    assert 1 <= len(stdin.split()[41]) <= 2\n    assert 1 <= len(stdin.split()[42]) <= 2\n    assert 1 <= len(stdin.split()[43]) <= 2\n    assert 1 <= len(stdin.split()[44]) <= 2\n    assert 1 <= len(stdin.split()[45]) <= 2\n    assert 1 <= len(stdin.split()[46]) <= 2\n    assert 1 <= len(stdin.split()[47]) <= 2\n    assert 1 <= len(stdin.split()[48]) <= 2\n    assert 1 <= len(stdin.split()[49]) <= 2\n    assert 1 <= len(stdin.split()[50]) <= 2\n    assert 1 <= len(stdin.split()[51]) <= 2\n    assert 1 <= len(stdin.split()[52]) <= 2\n    assert 1 <= len(stdin.split()[53]) <= 2\n    assert 1 <= len(stdin.split()[54]) <= 2\n    assert 1 <= len(stdin.split()[55]) <= 2\n    assert 1 <= len(stdin.split()[56]) <= 2\n    assert 1 <= len(stdin.split()[57]) <= 2\n    assert 1 <= len(stdin.split()[58]) <= 2\n    assert 1 <= len(stdin.split()[59]) <= 2\n    assert 1 <= len(stdin.split()[60]) <= 2\n    assert 1 <= len(stdin.split()[61]) <= 2\n    assert 1 <= len(stdin.split()[62]) <= 2\n    assert 1 <= len(stdin.split()[63]) <= 2\n    assert 1 <= len(stdin.split()[64]) <= 2\n    assert 1 <= len(stdin.split()[65]) <= 2\n    assert 1 <= len(stdin.split()[66]) <= 2\n    assert 1 <= len(stdin.split()[67]) <= 2\n    assert 1 <= len(stdin.split()[68]) <= 2\n    assert 1 <= len(stdin.split()[69]) <= 2\n    assert 1 <= len(stdin.split()[70]) <= 2\n    assert 1 <= len(stdin.split()[71]) <= 2\n    assert 1 <= len(stdin.split()[72]) <= 2\n    assert 1 <= len(stdin.split()[73]) <= 2\n    assert 1 <= len(stdin.split()[74]) <= 2\n    assert 1 <="
    },
    {
        "number": 3282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_aux(stdin))\n\ndef"
    },
    {
        "number": 3283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, r = [int(x) for x in stdin.split()]\n    gem_distribution = [0] * n\n    for _ in range(d):\n        for i in range(n):\n            gem_distribution[i] += 1\n    gem_distribution.sort(reverse=True)\n    return str(sum(gem_distribution[:r]))"
    },
    {
        "number": 3284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return str(count_coprime_pairs(a, b, c, d))\n\ndef"
    },
    {
        "number": 3285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, m = [int(x) for x in stdin.split()]\n    n = 1\n    while n < m:\n        n += A\n    return str(n)"
    },
    {
        "number": 3286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_helper(stdin))\n\ndef"
    },
    {
        "number": 3287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    coins = [int(x) for x in stdin.readline().strip().split()]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**i for i in range(k)]\n    coins.sort(reverse=True)\n    coins = [2**"
    },
    {
        "number": 3288,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    if k == 1:\n        return 'a' * n\n    if n == 1:\n        return 'a' * k\n    if k == 2:\n        return 'ab' * (n // 2)\n    if n == 2:\n        return 'ab' * (k // 2)\n    if k == 3:\n        return 'abc' * (n // 3)\n    if n == 3:\n        return 'abc' * (k // 3)\n    if k == 4:\n        return 'abcd' * (n // 4)\n    if n == 4:\n        return 'abcd' * (k // 4)\n    if k == 5:\n        return 'abcde' * (n // 5)\n    if n == 5:\n        return 'abcde' * (k // 5)\n    if k == 6:\n        return 'abcdef' * (n // 6)\n    if n == 6:\n        return 'abcdef' * (k // 6)\n    if k == 7:\n        return 'abcdefg' * (n // 7)\n    if n == 7:\n        return 'abcdefg' * (k // 7)\n    if k == 8:\n        return 'abcdefgh' * (n // 8)\n    if n == 8:\n        return 'abcdefgh' * (k // 8)\n    if k == 9:\n        return 'abcdefghi' * (n // 9)\n    if n == 9:\n        return 'abcdefghi' * (k // 9)\n    if k == 10:\n        return 'abcdefghij' * (n // 10)\n    if n == 10:\n        return 'abcdefghij' * (k // 10)\n    if k == 11:\n        return 'abcdefghijkl' * (n // 11)\n    if n == 11:\n        return 'abcdefghijkl' * (k // 11)\n    if k == 12:\n        return 'abcdefghijklm' * (n // 12)\n    if n == 12:\n        return 'abcdefghijklm' * (k // 12)\n    if k == 13:\n        return 'abcdefghijklmn' * (n // 13)\n    if n == 13:\n        return 'abcdefghijklmn' * (k // 13)\n    if k == 14:\n        return 'abcdefghijklmnop' * (n // 14)\n    if n == 14:\n        return 'abcdefghijklmnop' * (k // 14)\n    if k == 15:\n        return 'abcdefghijklmnopq' * (n // 15)\n    if n == 15:\n        return 'abcdefghijklmnopq' * (k // 15)\n    if k == 16:\n        return 'abcdefghijklmnopqr' * (n // 16)\n    if n == 16:\n        return 'abcdefghijklmnopqr' * (k // 16)\n    if k == 17:\n        return 'abcdefghijklmnopqrst' * (n // 17)\n    if n == 17:\n        return 'abcdefghijklmnopqrst' * (k // 17)\n    if k == 18:\n        return 'abcdefghijklmnopqrstuv' * (n // 18)\n    if n == 18:\n        return 'abcdefghijklmnopqrstuv' * (k // 18)\n    if k == 19:\n        return 'abcdefghijklmnopqrstuvw' * (n // 19)\n    if n == 19:\n        return 'abcdefghijklmnopqrstuvw' * (k // 19)\n    if k == 20:\n        return 'abcdefghijklmnopqrstuvwxy' * (n // 20)\n    if n == 20:\n        return 'abcdefghijklmnopqrstuvwxy' * (k // 20)\n    if k == 21:\n        return 'abcdefghijklmnopqrstuvwxyz' * (n // 21)\n    if n == 21:\n        return 'abcdefghijklmnopqrstuvwxyz' * (k // 21)\n    if k == 22:\n        return 'abcdefghijklmnopqrstuvwxyzABC' * (n // 22)\n    if n == 22:\n        return 'abcdefghijklmnopqrstuvwxyzABC' * (k // 22)\n    if k == 23:\n        return 'abcdefghijklmnopqrstuvwxyzABCD' * (n // 23)\n    if n == 23:\n        return 'abcdefghijklmnopqrstuvwxyzABCD' * (k // 23)\n    if k == 24:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEG' * (n // 24)\n    if n == 24:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEG' * (k // 24)\n    if k == 25:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEGH' * (n // 25)\n    if n == 25:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEGH' * (k // 25)\n    if k == 26:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEGHIJ' * (n // 26)\n    if n == 26:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEGHIJ' * (k // 26)\n    if k == 27:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEGHIJK' * (n // 27)\n    if n == 27:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEGHIJK' * (k // 27)\n    if k == 28:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEGHIJKLM' * (n // 28)\n    if n == 28:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEGHIJKLM' * (k // 28)\n    if k == 29:\n        return 'abcdefghijklmnopqrstuvwxyzABCDEGHIJKLMN' * (n // 29)"
    },
    {
        "number": 3289,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    polls = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    polls.sort(key=lambda x: x[0] * x[1])\n    polls.sort(key=lambda x: x[2])\n    polls.sort(key=lambda x: x[0] + x[1])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort(key=lambda x: x[0] * x[1] * x[2])\n    polls.sort(key=lambda x: x[0] + x[1] + x[2])\n    polls.sort"
    },
    {
        "number": 3290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, E, D = [int(x) for x in stdin.split()]\n    exploding_kittens = [int(x) for x in stdin.split()]\n    defuse = [int(x) for x in stdin.split()]\n    deck = [x for x in range(1, E + D + 1)]\n    players = [0] * N\n    for i in range(N):\n        players[i] = [exploding_kittens[i], defuse[i]]\n    for i in range(N):\n        for j in range(N):\n            if players[i][0] > 0:\n                players[i][0] -= 1\n                players[j][0] -= 1\n                if players[i][0] == 0:\n                    players[i][1] -= 1\n                    players[j][1] -= 1\n    for i in range(N):\n        if players[i][0] == 0:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 3291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return"
    },
    {
        "number": 3292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    names = [stdin.readline().strip() for _ in range(n)]\n    names.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if names[i][0] == names[j][0]:\n                if names[i][1:] == names[j][1:]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 3293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    snacks = [int(x) for x in stdin.readline().strip().split()]\n    vendings = [int(x) for x in stdin.readline().strip().split()]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]\n    vendings = [vendings[i] - i for i in range(n)]\n    vendings.sort()\n    vendings.reverse()\n    vendings = vendings[:n]"
    },
    {
        "number": 3294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k, l, m = [int(x) for x in stdin.readline().strip().split()]\n    k_l_m = [int(x) for x in stdin.readline().strip().split()]\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_m.append(m)\n    k_l_m.append(l)\n    k_l_m.append(k)\n    k_l_m.sort()\n    k_l_m.reverse()\n    k_l_"
    },
    {
        "number": 3296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(factorial(n) // factorial(n - k) % MOD)"
    },
    {
        "number": 3297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3298,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 3299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    board = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 0:\n                board[i][j] = -1\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                if board[i][j] % 2 == 0:\n                    board[i][j] += board[i][j - 1]\n            elif j == 0:\n                if board[i][j] % 2 == 0:\n                    board[i][j] += board[i - 1][j]\n            else:\n                if board[i][j] % 2 == 0:\n                    board[i][j] += min(board[i - 1][j], board[i][j - 1])\n    return str(board[n - 1][m - 1])"
    },
    {
        "number": 3300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cheetahs = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    cheetahs.sort(key=lambda x: x[0])\n    min_length = cheetahs[0][0]\n    for i in range(1, n):\n        if cheetahs[i][0] - cheetahs[i - 1][0] > min_length:\n            min_length = cheetahs[i][0] - cheetahs[i - 1][0]\n    return str(min_length)"
    },
    {
        "number": 3301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P, X, Y = [int(x) for x in stdin.split()]\n    M = int(stdin.readline())\n    banks = [int(x) for x in stdin.readline().split()]\n    banks = {x: [] for x in banks}\n    for _ in range(P):\n        a, b, c = [int(x) for x in stdin.readline().split()]\n        banks[a].append((b, c))\n        banks[b].append((a, c))\n    banks = {x: sorted(banks[x]) for x in banks}\n    for _ in range(M):\n        banks[int(stdin.readline())].append(int(stdin.readline()))\n    banks = {x: sorted(banks[x]) for x in banks}\n    for x in [X, Y]:\n        if x not in banks:\n            return \"Impossible\"\n    if len(banks[X]) == 1:\n        return \"Infinity\"\n    if len(banks[Y]) == 1:\n        return \"Infinity\"\n    if len(banks[X]) == 2:\n        return str(max(banks[X][0][1], banks[Y][0][1]))\n    if len(banks[Y]) == 2:\n        return str(max(banks[X][0][1], banks[Y][1][1]))\n    if len(banks[X]) == 3:\n        return str(max(banks[X][0][1], banks[Y][0][1], banks[Y][1][1]))\n    if len(banks[Y]) == 3:\n        return str(max(banks[X][0][1], banks[Y][0][1], banks[Y][1][1]))\n    if len(banks[X]) == 4:\n        return str(max(banks[X][0][1], banks[Y][0][1], banks[Y][1][1], banks[Y][2][1]))\n    if len(banks[Y]) == 4:\n        return str(max(banks[X][0][1], banks[Y][0][1], banks[Y][1][1], banks[Y][2][1]))\n    return \"Infinity\""
    },
    {
        "number": 3302,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    P = [int(x) for x in stdin.split()]\n    P.sort()\n    P.reverse()\n    if n == 1:\n        return 'impossible'\n    if n == 2:\n        return ''.join(['0' if x == 1 else '1' for x in P])\n    if n == 3:\n        if P[0] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[1] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[2] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[0] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[1] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[2] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n    if n == 4:\n        if P[0] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[1] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[2] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[3] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[0] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[1] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[2] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[3] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n    if n == 5:\n        if P[0] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[1] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[2] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[3] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[4] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[0] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[1] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[2] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[3] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[4] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n    if n == 6:\n        if P[0] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[1] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[2] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[3] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[4] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[5] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[0] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[1] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[2] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[3] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[4] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[5] == 2:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n    if n == 7:\n        if P[0] == 1:\n            return ''.join(['0' if x == 1 else '1' for x in P])\n        if P[1] == 1:\n            return ''.join(['0' if x == 1 else '1'"
    },
    {
        "number": 3303,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 3304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    adversaries = [int(x) for x in stdin.readline().strip().split()]\n    dwarves = [int(x) for x in stdin.readline().strip().split()]\n    elves = [int(x) for x in stdin.readline().strip().split()]\n    return str(solve(n, adversaries, dwarves, elves))\n\ndef"
    },
    {
        "number": 3305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    for _ in range(q):\n        l, r = [int(x) for x in stdin.split()]\n        print(len([x for x in s[l-1:r] if x == x[::-1]]))\n    return \"\""
    },
    {
        "number": 3306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    houses = [int(x) for x in stdin.split()]\n    detectors = [int(x) for x in stdin.split()]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [detectors[i] - detectors[i - 1] for i in range(1, N + 1)]\n    detectors.sort()\n    detectors.reverse()\n    detectors = [det"
    },
    {
        "number": 3307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    land = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        land.append((x, y))\n    a, b = map(int, stdin.readline().split())\n    land.append((a, b))\n    land.sort(key=lambda x: x[1])\n    x1, y1 = land[0]\n    x2, y2 = land[1]\n    x3, y3 = land[2]\n    x4, y4 = land[3]\n    x5, y5 = land[4]\n    x6, y6 = land[5]\n    x7, y7 = land[6]\n    x8, y8 = land[7]\n    x9, y9 = land[8]\n    x10, y10 = land[9]\n    x11, y11 = land[10]\n    x12, y12 = land[11]\n    x13, y13 = land[12]\n    x14, y14 = land[13]\n    x15, y15 = land[14]\n    x16, y16 = land[15]\n    x17, y17 = land[16]\n    x18, y18 = land[17]\n    x19, y19 = land[18]\n    x20, y20 = land[19]\n    x21, y21 = land[20]\n    x22, y22 = land[21]\n    x23, y23 = land[22]\n    x24, y24 = land[23]\n    x25, y25 = land[24]\n    x26, y26 = land[25]\n    x27, y27 = land[26]\n    x28, y28 = land[27]\n    x29, y29 = land[28]\n    x30, y30 = land[29]\n    x31, y31 = land[30]\n    x32, y32 = land[31]\n    x33, y33 = land[32]\n    x34, y34 = land[33]\n    x35, y35 = land[34]\n    x36, y36 = land[35]\n    x37, y37 = land[36]\n    x38, y38 = land[37]\n    x39, y39 = land[38]\n    x40, y40 = land[39]\n    x41, y41 = land[40]\n    x42, y42 = land[41]\n    x43, y43 = land[42]\n    x44, y44 = land[43]\n    x45, y45 = land[44]\n    x46, y46 = land[45]\n    x47, y47 = land[46]\n    x48, y48 = land[47]\n    x49, y49 = land[48]\n    x50, y50 = land[49]\n    x51, y51 = land[50]\n    x52, y52 = land[51]\n    x53, y53 = land[52]\n    x54, y54 = land[53]\n    x55, y55 = land[54]\n    x56, y56 = land[55]\n    x57, y57 = land[56]\n    x58, y58 = land[57]\n    x59, y59 = land[58]\n    x60, y60 = land[59]\n    x61, y61 = land[60]\n    x62, y62 = land[61]\n    x63, y63 = land[62]\n    x64, y64 = land[63]\n    x65, y65 = land[64]\n    x66, y66 = land[65]\n    x67, y67 = land[66]\n    x68, y68 = land[67]\n    x69, y69 = land[68]\n    x70, y70 = land[69]\n    x71, y71 = land[70]\n    x72, y72 = land[71]\n    x73, y73 = land[72]\n    x74, y74 = land[73]\n    x75, y75 = land[74]\n    x76, y76 = land[75]\n    x77, y77 = land[76]\n    x78, y78 = land[77]\n    x79, y79 = land[78]\n    x80, y80 = land[79]\n    x81, y81 = land[80]\n    x82, y82 = land[81]\n    x83, y83 = land[82]\n    x84, y84 = land[83]\n    x85, y85 = land[84]\n    x86, y86 = land[85]\n    x87, y87 = land[86]\n    x88, y88 = land[87]\n    x89, y89 = land[88]\n    x90, y90 = land[89]\n    x91, y91 = land[90]\n    x92, y92 = land[91]\n    x93, y93 = land[92]\n    x94, y94 = land[93]\n    x95, y95 = land[94]\n    x96, y96 = land[95]\n    x97, y97 = land[96]\n    x98, y98 = land[97]\n    x99, y99 = land[98]\n    x100, y100 = land[99]\n    x101, y101 = land[100]\n    x102, y102 = land[101]\n    x103, y103 = land[102]\n    x104, y104 = land[103]\n    x105, y105 = land[104]\n    x106, y106 = land[105]\n    x107, y107 = land[106]\n    x108, y108 = land[107]\n    x109, y109 = land[108]\n    x110, y110 = land[109]\n    x111, y111 = land[110]\n    x112, y112 = land[111]\n    x113, y113 = land[112]\n    x114, y114 = land[113"
    },
    {
        "number": 3308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = [tuple(map(float, stdin.readline().strip().split())) for _ in range(n)]\n    points.sort(key=lambda p: p[0]**2 + p[1]**2)\n    area = 0\n    for i in range(n):\n        area += points[i][0] * points[(i + 1) % n][1] - points[i][1] * points[(i + 1) % n][0]\n    return str(abs(area) / max(1, abs(area)))"
    },
    {
        "number": 3309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, c = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1, n)]\n    a = [a[i] - a[i - 1] for i in range(1"
    },
    {
        "number": 3310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, g, t = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    return str(expected_occupancy(n, g, t, c))\n\ndef"
    },
    {
        "number": 3311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(exponential(n) % m)\n\ndef"
    },
    {
        "number": 3312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3313,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, w, h = [int(x) for x in stdin.split()]\n    gems = [int(x) for x in stdin.split()]\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(h)\n    gems.insert(0, 0)\n    gems.sort()\n    gems.append(w)\n    gems.insert(0, 0)\n    gems.sort()\n    "
    },
    {
        "number": 3314,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 3315,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if strings[i][0] == strings[j][-1] and strings[i][-1] == strings[j][0]:\n                max_len = max(max_len, len(strings[i]) + len(strings[j]))\n    return str(max_len)"
    },
    {
        "number": 3316,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t, p = [int(x) for x in stdin.split()]\n    return str(1 - 1 / (m ** n))"
    },
    {
        "number": 3317,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3318,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    nodes = [0] * (n + 1)\n    for i in range(n):\n        nodes[int(stdin.readline())] = i\n    print(nodes)\n    return str(n)"
    },
    {
        "number": 3319,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3320,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    q = int(stdin)\n    cities = [i for i in range(1, n + 1)]\n    cities_to_cities = {c: set() for c in cities}\n    for a, b, w in roads:\n        cities_to_cities[a].add(b)\n        cities_to_cities[b].add(a)\n    cities_to_cities[1] = set()\n    cities_to_cities[n] = set()\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(1)\n    cities_to_cities[n].add(n)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(1)\n    cities_to_cities[n].add(n)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_cities[1].remove(n)\n    cities_to_cities[n].remove(1)\n    cities_to_cities[1].add(n)\n    cities_to_cities[n].add(1)\n    cities_to_"
    },
    {
        "number": 3321,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3322,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    antiques = [int(x) for x in stdin.split()]\n    antiques.sort()\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [antiques[i] for i in range(n)]\n    antiques.sort(reverse=True)\n    antiques = [ant"
    },
    {
        "number": 3323,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        N = int(stdin.readline().strip())\n        fractions = [0] * 3\n        for _ in range(N):\n            A, B, C = [int(x) for x in stdin.readline().strip().split()]\n            fractions = [max(fractions[i], A * B * C // 10000) for i in range(3)]\n        print(\"Case #{}: {}\".format(_ + 1, max(fractions)))\n    return \"\""
    },
    {
        "number": 3324,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''')\n    '6 6 6 1'\n    \"\"\"\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n    from math import gcd\n    from collections import Counter\n    from"
    },
    {
        "number": 3325,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    D, L = map(int, stdin.readline().split())\n    vertices = [tuple(map(int, stdin.readline().split())) for _ in range(N)]\n    vertices.sort(key=lambda x: x[1])\n    y_max = max(v[1] for v in vertices)\n    y_min = min(v[1] for v in vertices)\n    y_mid = (y_max + y_min) / 2\n    y_max_index = vertices.index((max(vertices, key=lambda x: x[1]), y_max))\n    y_min_index = vertices.index((min(vertices, key=lambda x: x[1]), y_min))\n    y_mid_index = vertices.index((max(vertices, key=lambda x: x[1]), y_mid))\n    y_max_max = vertices[y_max_index][1]\n    y_min_max = vertices[y_min_index][1]\n    y_mid_max = vertices[y_mid_index][1]\n    y_max_min = vertices[y_max_index - 1][1]\n    y_min_min = vertices[y_min_index - 1][1]\n    y_mid_min = vertices[y_mid_index - 1][1]\n    y_max_mid = vertices[y_max_index - 1][1]\n    y_min_mid = vertices[y_min_index - 1][1]\n    y_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_max_mid = vertices[y_max_index - 1][1]\n    y_min_max_mid = vertices[y_min_index - 1][1]\n    y_mid_max_mid = vertices[y_mid_index - 1][1]\n    y_max_min_mid = vertices[y_max_index - 1][1]\n    y_min_min_mid = vertices[y_min_index - 1][1]\n    y_mid_min_mid = vertices[y_mid_index - 1][1]\n    y_max_max_mid_mid = vertices[y_max_index - 1][1]\n    y_min_max_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_max_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_min_mid_mid = vertices[y_max_index - 1][1]\n    y_min_min_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_min_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_max_mid_mid_mid = vertices[y_max_index - 1][1]\n    y_min_max_mid_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_max_mid_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_min_mid_mid_mid = vertices[y_max_index - 1][1]\n    y_min_min_mid_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_min_mid_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_max_mid_mid_mid_mid = vertices[y_max_index - 1][1]\n    y_min_max_mid_mid_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_max_mid_mid_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_min_mid_mid_mid_mid = vertices[y_max_index - 1][1]\n    y_min_min_mid_mid_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_min_mid_mid_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_max_mid_mid_mid_mid_mid = vertices[y_max_index - 1][1]\n    y_min_max_mid_mid_mid_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_max_mid_mid_mid_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_min_mid_mid_mid_mid_mid = vertices[y_max_index - 1][1]\n    y_min_min_mid_mid_mid_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_min_mid_mid_mid_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_max_mid_mid_mid_mid_mid_mid = vertices[y_max_index - 1][1]\n    y_min_max_mid_mid_mid_mid_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_max_mid_mid_mid_mid_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_min_mid_mid_mid_mid_mid_mid = vertices[y_max_index - 1][1]\n    y_min_min_mid_mid_mid_mid_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_min_mid_mid_mid_mid_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_max_mid_mid_mid_mid_mid_mid_mid = vertices[y_max_index - 1][1]\n    y_min_max_mid_mid_mid_mid_mid_mid_mid = vertices[y_min_index - 1][1]\n    y_mid_max_mid_mid_mid_mid_mid_mid_mid = vertices[y_mid_index - 1][1]\n    y_max_min_mid_mid_mid_mid_mid_mid_mid = vertices[y_max_index - 1][1]\n    y_min_min_mid_mid_mid_mid_mid_mid_mid = vertices[y"
    },
    {
        "number": 3326,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = [int(x) for x in stdin.split()]\n    grid = [list(map(int, stdin.split())) for _ in range(r)]\n    subgrids = 0\n    for i in range(r):\n        for j in range(c):\n            subgrids += monotonic(grid, i, j)\n    return str(subgrids)\n\ndef"
    },
    {
        "number": 3327,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3328,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    table = [list(map(int, stdin.split())) for _ in range(N)]\n    return str(solve(table, K))\n\ndef"
    },
    {
        "number": 3329,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    circle = stdin[1:]\n    return str(solution_recursive(N, K, circle))\n\ndef"
    },
    {
        "number": 3330,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    a.sort()\n    c.sort()\n    a.reverse()\n    c.reverse()\n    p1 = 0\n    p2 = 0\n    for i in range(n):\n        p1 += a[i] * c[i]\n        p2 += a[i] * c[i]\n    return str(p1 / p2)"
    },
    {
        "number": 3331,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, A, B, P = [int(x) for x in stdin.split()]\n    return str(min(L - A, L - B, L - P))\n\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''5 4 3 2''') == '3')\nassert(solution('''"
    },
    {
        "number": 3332,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    streams = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[1], reverse=True)\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[0] + x[1], reverse=True)\n    streams.sort(key=lambda x: x[2], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1], reverse=True)\n    streams.sort(key=lambda x: x[2] * x[1] * x[0] * x["
    },
    {
        "number": 3333,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    roost, chickens = [float(x) for x in stdin.split()]\n    hiding_spots = int(stdin.readline())\n    hiding_spots = [float(x) for x in stdin.readline().split()]\n    return str(min(abs(roost - x) + abs(roost - y) for x, y in hiding_spots))"
    },
    {
        "number": 3334,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 2:\n        return \"impossible\"\n    distances = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    distances.sort(key=lambda x: x[0])\n    total = 0\n    for i in range(n - 1):\n        total += distances[i][0]\n    return str(total / (n - 1))\n\nassert(solution('''3\n4 4\n2''') == \"2.13333333333333\")\nassert(solution('''3\n4 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n"
    },
    {
        "number": 3335,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(pythagorean_triples(n))\n\ndef"
    },
    {
        "number": 3336,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3337,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    stacks = [0]\n    for _ in range(n):\n        line = stdin.readline().strip()\n        if line[0] == 'a':\n            stacks.append(int(line[2:]))\n        elif line[0] == 'b':\n            stacks.append(int(line[2:]))\n            stacks.remove(int(line[2:]))\n        elif line[0] == 'c':\n            stacks.remove(int(line[2]))\n            stacks.remove(int(line[4]))\n            stacks.remove(int(line[6]))\n            stacks.remove(int(line[8]))\n            stacks.remove(int(line[10]))\n            stacks.remove(int(line[12]))\n            stacks.remove(int(line[14]))\n            stacks.remove(int(line[16]))\n            stacks.remove(int(line[18]))\n            stacks.remove(int(line[20]))\n            stacks.remove(int(line[22]))\n            stacks.remove(int(line[24]))\n            stacks.remove(int(line[26]))\n            stacks.remove(int(line[28]))\n            stacks.remove(int(line[30]))\n            stacks.remove(int(line[32]))\n            stacks.remove(int(line[34]))\n            stacks.remove(int(line[36]))\n            stacks.remove(int(line[38]))\n            stacks.remove(int(line[40]))\n            stacks.remove(int(line[42]))\n            stacks.remove(int(line[44]))\n            stacks.remove(int(line[46]))\n            stacks.remove(int(line[48]))\n            stacks.remove(int(line[50]))\n            stacks.remove(int(line[52]))\n            stacks.remove(int(line[54]))\n            stacks.remove(int(line[56]))\n            stacks.remove(int(line[58]))\n            stacks.remove(int(line[60]))\n            stacks.remove(int(line[62]))\n            stacks.remove(int(line[64]))\n            stacks.remove(int(line[66]))\n            stacks.remove(int(line[68]))\n            stacks.remove(int(line[70]))\n            stacks.remove(int(line[72]))\n            stacks.remove(int(line[74]))\n            stacks.remove(int(line[76]))\n            stacks.remove(int(line[78]))\n            stacks.remove(int(line[80]))\n            stacks.remove(int(line[82]))\n            stacks.remove(int(line[84]))\n            stacks.remove(int(line[86]))\n            stacks.remove(int(line[88]))\n            stacks.remove(int(line[90]))\n            stacks.remove(int(line[92]))\n            stacks.remove(int(line[94]))\n            stacks.remove(int(line[96]))\n            stacks.remove(int(line[98]))\n            stacks.remove(int(line[100]))\n            stacks.remove(int(line[102]))\n            stacks.remove(int(line[104]))\n            stacks.remove(int(line[106]))\n            stacks.remove(int(line[108]))\n            stacks.remove(int(line[110]))\n            stacks.remove(int(line[112]))\n            stacks.remove(int(line[114]))\n            stacks.remove(int(line[116]))\n            stacks.remove(int(line[118]))\n            stacks.remove(int(line[120]))\n            stacks.remove(int(line[122]))\n            stacks.remove(int(line[124]))\n            stacks.remove(int(line[126]))\n            stacks.remove(int(line[128]))\n            stacks.remove(int(line[130]))\n            stacks.remove(int(line[132]))\n            stacks.remove(int(line[134]))\n            stacks.remove(int(line[136]))\n            stacks.remove(int(line[138]))\n            stacks.remove(int(line[140]))\n            stacks.remove(int(line[142]))\n            stacks.remove(int(line[144]))\n            stacks.remove(int(line[146]))\n            stacks.remove(int(line[148]))\n            stacks.remove(int(line[150]))\n            stacks.remove(int(line[152]))\n            stacks.remove(int(line[154]))\n            stacks.remove(int(line[156]))\n            stacks.remove(int(line[158]))\n            stacks.remove(int(line[160]))\n            stacks.remove(int(line[162]))\n            stacks.remove(int(line[164]))\n            stacks.remove(int(line[166]))\n            stacks.remove(int(line[168]))\n            stacks.remove(int(line[170]))\n            stacks.remove(int(line[172]))\n            stacks.remove(int(line[174]))\n            stacks.remove(int(line[176]))\n            stacks.remove(int(line[178]))\n            stacks.remove(int(line[180]))\n            stacks.remove(int(line[182]))\n            stacks.remove(int(line[184]))\n            stacks.remove(int(line[186]))\n            stacks.remove(int(line[188]))\n            stacks.remove(int(line[190]))\n            stacks.remove(int(line[192]))\n            stacks.remove(int(line[194]))\n            stacks.remove(int(line[196]))\n            stacks.remove(int(line[198]))\n            stacks.remove(int(line[200]))\n            stacks.remove(int(line[202]))\n            stacks.remove(int(line[204]))\n            stacks.remove(int(line[206]))\n            stacks.remove(int(line[208]))\n"
    },
    {
        "number": 3338,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    partners = [map(int, stdin.split()) for _ in range(n)]\n    partners.sort(key=lambda x: x[0])\n    partners.sort(key=lambda x: x[1])\n    partners.sort(key=lambda x: x[2])\n    partners.sort(key=lambda x: x[3])\n    partners.sort(key=lambda x: x[0] - x[1])\n    partners.sort(key=lambda x: x[2] - x[3])\n    partners.sort(key=lambda x: x[0] - x[2])\n    partners.sort(key=lambda x: x[1] - x[3])\n    partners.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda x: x[0] + x[1] + x[2] + x[3], reverse=True)\n    partners.sort(key=lambda"
    },
    {
        "number": 3339,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]"
    },
    {
        "number": 3340,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    flights = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda"
    },
    {
        "number": 3341,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    if m == 1 and n == 1:\n        return \"0\"\n    if m == 1:\n        return \"0\"\n    if n == 1:\n        return \"0\"\n    if m == 2 and n == 2:\n        return \"0\"\n    if m == 2:\n        return \"0\"\n    if n == 2:\n        return \"0\"\n    if m == 3 and n == 3:\n        return \"0\"\n    if m == 3:\n        return \"0\"\n    if n == 3:\n        return \"0\"\n    if m == 4 and n == 4:\n        return \"0\"\n    if m == 4:\n        return \"0\"\n    if n == 4:\n        return \"0\"\n    if m == 5 and n == 5:\n        return \"0\"\n    if m == 5:\n        return \"0\"\n    if n == 5:\n        return \"0\"\n    if m == 6 and n == 6:\n        return \"0\"\n    if m == 6:\n        return \"0\"\n    if n == 6:\n        return \"0\"\n    if m == 7 and n == 7:\n        return \"0\"\n    if m == 7:\n        return \"0\"\n    if n == 7:\n        return \"0\"\n    if m == 8 and n == 8:\n        return \"0\"\n    if m == 8:\n        return \"0\"\n    if n == 8:\n        return \"0\"\n    if m == 9 and n == 9:\n        return \"0\"\n    if m == 9:\n        return \"0\"\n    if n == 9:\n        return \"0\"\n    if m == 10 and n == 10:\n        return \"0\"\n    if m == 10:\n        return \"0\"\n    if n == 10:\n        return \"0\"\n    if m == 11 and n == 11:\n        return \"0\"\n    if m == 11:\n        return \"0\"\n    if n == 11:\n        return \"0\"\n    if m == 12 and n == 12:\n        return \"0\"\n    if m == 12:\n        return \"0\"\n    if n == 12:\n        return \"0\"\n    if m == 13 and n == 13:\n        return \"0\"\n    if m == 13:\n        return \"0\"\n    if n == 13:\n        return \"0\"\n    if m == 14 and n == 14:\n        return \"0\"\n    if m == 14:\n        return \"0\"\n    if n == 14:\n        return \"0\"\n    if m == 15 and n == 15:\n        return \"0\"\n    if m == 15:\n        return \"0\"\n    if n == 15:\n        return \"0\"\n    if m == 16 and n == 16:\n        return \"0\"\n    if m == 16:\n        return \"0\"\n    if n == 16:\n        return \"0\"\n    if m == 17 and n == 17:\n        return \"0\"\n    if m == 17:\n        return \"0\"\n    if n == 17:\n        return \"0\"\n    if m == 18 and n == 18:\n        return \"0\"\n    if m == 18:\n        return \"0\"\n    if n == 18:\n        return \"0\"\n    if m == 19 and n == 19:\n        return \"0\"\n    if m == 19:\n        return \"0\"\n    if n == 19:\n        return \"0\"\n    if m == 20 and n == 20:\n        return \"0\"\n    if m == 20:\n        return \"0\"\n    if n == 20:\n        return \"0\"\n    if m == 21 and n == 21:\n        return \"0\"\n    if m == 21:\n        return \"0\"\n    if n == 21:\n        return \"0\"\n    if m == 22 and n == 22:\n        return \"0\"\n    if m == 22:\n        return \"0\"\n    if n == 22:\n        return \"0\"\n    if m == 23 and n == 23:\n        return \"0\"\n    if m == 23:\n        return \"0\"\n    if n == 23:\n        return \"0\"\n    if m == 24 and n == 24:\n        return \"0\"\n    if m == 24:\n        return \"0\"\n    if n == 24:\n        return \"0\"\n    if m == 25 and n == 25:\n        return \"0\"\n    if m == 25:\n        return \"0\"\n    if n == 25:\n        return \"0\"\n    if m == 26 and n == 26:\n        return \"0\"\n    if m == 26:\n        return \"0\"\n    if n == 26:\n        return \"0\"\n    if m == 27 and n == 27:\n        return \"0\"\n    if m == 27:\n        return \"0\"\n    if n == 27:\n        return \"0\"\n    if m == 28 and n == 28:\n        return \"0\"\n    if m == 28:\n        return \"0\"\n    if n == 28:\n        return \"0\"\n    if m == 29 and n == 29:\n        return \"0\"\n    if m == 29:\n        return \"0\"\n    if n == 29:\n        return \"0\"\n    if m == 30 and n == 30:\n        return \"0\"\n    if m == 30:\n        return \"0\"\n    if n == 30:\n        return \"0\"\n    if m == 31 and n == 31:\n        return \"0\"\n    if m == 31:\n        return \"0\"\n    if n == 31:\n        return \"0\"\n    if m == 32 and n == 32:\n        return \"0\"\n    if m == 32:\n        return \"0\"\n    if n == 32:\n        return \"0\"\n    if m == 33 and n == 33:\n        return \"0\"\n    if m == 33:\n        return \"0\"\n    if n == 33:\n        return \"0\"\n    if m == 34 and n == 34:\n        return \"0\"\n    if m == 34:\n        return \"0\"\n    if n == 34:\n        return \"0\"\n    if m == 35 and n == 35:\n        return \"0\"\n    if m == 35"
    },
    {
        "number": 3342,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(x) for x in stdin.split()]\n    onions = [tuple(int(x) for x in stdin.split()) for _ in range(N)]\n    fence = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n    return str(solution_helper(onions, fence, K))\n\ndef"
    },
    {
        "number": 3343,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3344,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(x) for x in stdin.split()]\n    x = [float(x) for x in stdin.split()]\n    x.sort()\n    v = 0\n    for i in range(n):\n        if x[i] - x[i - 1] > 1:\n            v = 1\n            break\n    return str(v)"
    },
    {
        "number": 3345,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3346,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, n = [int(x) for x in stdin.split()]\n    cars = [stdin.split() for _ in range(n)]\n    cars = sorted(cars, key=lambda x: (x[1], x[2]))\n    curr_time = 0\n    curr_interval = 0\n    curr_interval_start = 0\n    curr_interval_end = 0\n    curr_interval_cars = 0\n    curr_interval_cars_start = 0\n    curr_interval_cars_end = 0\n    curr_interval_cars_time = 0\n    curr_interval_cars_time_start = 0\n    curr_interval_cars_time_end = 0\n    curr_interval_cars_time_time = 0\n    curr_interval_cars_time_time_start = 0\n    curr_interval_cars_time_time_end = 0\n    curr_interval_cars_time_time_time = 0\n    curr_interval_cars_time_time_time_start = 0\n    curr_interval_cars_time_time_time_end = 0\n    curr_interval_cars_time_time_time_time = 0\n    curr_interval_cars_time_time_time_time_start = 0\n    curr_interval_cars_time_time_time_time_end = 0\n    curr_interval_cars_time_time_time_time_time_start = 0\n    curr_interval_cars_time_time_time_time_time_end = 0\n    curr_interval_cars_time_time_time_time_time_time_time_time_time_start = 0\n    curr_interval_cars_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time_time"
    },
    {
        "number": 3347,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gold_stores = [int(x) for x in stdin.split()]\n    gold_stores.sort()\n    gold_stores.append(10**9)\n    gold_stores.insert(0, 0)\n    max_gold_stores = 0\n    for i in range(1, n+1):\n        if gold_stores[i] - gold_stores[i-1] > 1:\n            max_gold_stores += 1\n    return str(max_gold_stores)"
    },
    {
        "number": 3348,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    a, b, c = [int(x) for x in stdin.split()]\n    if a + b + c!= R * C:\n        return \"impossible\"\n    if R % 2!= 0 or C % 2!= 0:\n        return \"impossible\"\n    if a == 0:\n        return \"impossible\"\n    if a == 1:\n        return \"\".join([\"A\" for _ in range(C)])\n    if a == 2:\n        return \"\".join([\"AB\" for _ in range(C - 1)]) + \"A\"\n    if a == 3:\n        return \"\".join([\"ABC\" for _ in range(C - 2)]) + \"AB\" + \"A\"\n    if a == 4:\n        return \"\".join([\"ABCD\" for _ in range(C - 3)]) + \"ABC\" + \"AB\" + \"A\"\n    if a == 5:\n        return \"\".join([\"ABCDE\" for _ in range(C - 4)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 6:\n        return \"\".join([\"ABCDEF\" for _ in range(C - 5)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 7:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 6)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 8:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 7)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 9:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 8)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 10:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 9)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 11:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 10)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 12:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 11)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 13:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 12)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 14:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 13)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 15:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 14)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 16:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 15)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 17:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 16)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 18:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 17)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 19:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 18)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 20:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 19)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 21:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 20)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 22:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 21)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 23:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 22)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 24:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 23)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 25:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 24)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 26:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 25)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 27:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 26)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 28:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 27)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 29:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 28)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 30:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 29)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 31:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 30)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 32:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 31)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 33:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 32)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 34:\n        return \"\".join([\"ABCDEFG\" for _ in range(C - 33)]) + \"ABCD\" + \"ABC\" + \"AB\" + \"A\"\n    if a == 35:"
    },
    {
        "number": 3349,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    dictionary = set(stdin.readline().strip().split())\n    message = stdin.readline().strip()\n    vowels = \"AEIOU\"\n    consonants = \"\".join(c for c in message if c not in vowels)\n    for word in dictionary:\n        if all(c in vowels for c in word):\n            continue\n        if all(c not in vowels for c in word):\n            continue\n        if len(word) > len(consonants):\n            continue\n        if len(word) < len(consonants):\n            continue\n        if len(word) == len(consonants):\n            if len(word) > len(consonants):\n                continue\n            if len(word) < len(consonants):\n                continue\n            if len(word) == len(consonants):\n                if word > consonants:\n                    continue\n                if word < consonants:\n                    continue\n                if word == consonants:\n                    return word\n    return \"\""
    },
    {
        "number": 3350,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max(stdin.split(), key=len)))"
    },
    {
        "number": 3351,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 65 or n > 195:\n        return \"Invalid Input\"\n    dice = [int(x) for x in stdin.split()]\n    if len(dice)!= n:\n        return \"Invalid Input\"\n    if n == 65:\n        return \"70\"\n    if n == 66:\n        return \"75\"\n    if n == 67:\n        return \"80\"\n    if n == 68:\n        return \"85\"\n    if n == 69:\n        return \"90\"\n    if n == 70:\n        return \"100\"\n    if n == 71:\n        return \"110\"\n    if n == 72:\n        return \"120\"\n    if n == 73:\n        return \"130\"\n    if n == 74:\n        return \"140\"\n    if n == 75:\n        return \"150\"\n    if n == 76:\n        return \"160\"\n    if n == 77:\n        return \"170\"\n    if n == 78:\n        return \"180\"\n    if n == 79:\n        return \"190\"\n    if n == 80:\n        return \"200\"\n    if n == 81:\n        return \"210\"\n    if n == 82:\n        return \"220\"\n    if n == 83:\n        return \"230\"\n    if n == 84:\n        return \"240\"\n    if n == 85:\n        return \"250\"\n    if n == 86:\n        return \"260\"\n    if n == 87:\n        return \"270\"\n    if n == 88:\n        return \"280\"\n    if n == 89:\n        return \"290\"\n    if n == 90:\n        return \"300\"\n    if n == 91:\n        return \"310\"\n    if n == 92:\n        return \""
    },
    {
        "number": 3352,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    tree = [[] for _ in range(n)]\n    for i in range(n - 1):\n        tree[int(stdin.readline().strip()) - 1].append(int(stdin.readline().strip()) - 1)\n    for _ in range(q):\n        k, x = [int(x) for x in stdin.readline().split()]\n        if k == 0:\n            print(count_colours(tree, x - 1))\n        else:\n            change_colour(tree, x - 1, k)\n\n\ndef"
    },
    {
        "number": 3353,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, R, L = [int(x) for x in stdin.split()]\n    if P == 0:\n        return \"0\"\n    if P == 1:\n        return \"1\"\n    if P == 2:\n        return \"2\"\n    if P == 3:\n        return \"3\"\n    if P == 4:\n        return \"4\"\n    if P == 5:\n        return \"5\"\n    if P == 6:\n        return \"6\"\n    if P == 7:\n        return \"7\"\n    if P == 8:\n        return \"8\"\n    if P == 9:\n        return \"9\"\n    if P == 10:\n        return \"10\"\n    if P == 11:\n        return \"11\"\n    if P == 12:\n        return \"12\"\n    if P == 13:\n        return \"13\"\n    if P == 14:\n        return \"14\"\n    if P == 15:\n        return \"15\"\n    if P == 16:\n        return \"16\"\n    if P == 17:\n        return \"17\"\n    if P == 18:\n        return \"18\"\n    if P == 19:\n        return \"19\"\n    if P == 20:\n        return \"20\"\n    if P == 21:\n        return \"21\"\n    if P == 22:\n        return \"22\"\n    if P == 23:\n        return \"23\"\n    if P == 24:\n        return \"24\"\n    if P == 25:\n        return \"25\"\n    if P == 26:\n        return \"26\"\n    if P == 27:\n        return \"27\"\n    if P == 28:\n        return \"28\"\n    if P == 29:\n        return \"29\"\n    if P == 30:\n        return \"30\"\n    if P == 31:\n        return \"31\"\n    if P == 32:\n        return \"32\"\n    if P == 33:\n        return \"33\"\n    if P == 34:\n        return \"34\"\n    if P == 35:\n        return \"35\"\n    if P == 36:\n        return \"36\"\n    if P == 37:\n        return \"37\"\n    if P == 38:\n        return \"38\"\n    if P == 39:\n        return \"39\"\n    if P == 40:\n        return \"40\"\n    if P == 41:\n        return \"41\"\n    if P == 42:\n        return \"42\"\n    if P == 43:\n        return \"43\"\n    if P == 44:\n        return \"44\"\n    if P == 45:\n        return \"45\"\n    if P == 46:\n        return \"46\"\n    if P == 47:\n        return \"47\"\n    if P == 48:\n        return \"48\"\n    if P == 49:\n        return \"49\"\n    if P == 50:\n        return \"50\"\n    if P == 51:\n        return \"51\"\n    if P == 52:\n        return \"52\"\n    if P == 53:\n        return \"53\"\n    if P == 54:\n        return \"54\"\n    if P == 55:\n        return \"55\"\n    if P == 56:\n        return \"56\"\n    if P == 57:\n        return \"57\"\n    if P == 58:\n        return \"58\"\n    if P == 59:\n        return \"59\"\n    if P == 60:\n        return \"60\"\n    if P == 61:\n        return \"61\"\n    if P == 62:\n        return \"62\"\n    if P == 63:\n        return \"63\"\n    if P == 64:\n        return \"64\"\n    if P == 65:\n        return \"65\"\n    if P == 66:\n        return \"66\"\n    if P == 67:\n        return \"67\"\n    if P == 68:\n        return \"68\"\n    if P == 69:\n        return \"69\"\n    if P == 70:\n        return \"70\"\n    if P == 71:\n        return \"71\"\n    if P == 72:\n        return \"72\"\n    if P == 73:\n        return \"73\"\n    if P == 74:\n        return \"74\"\n    if P == 75:\n        return \"75\"\n    if P == 76:\n        return \"76\"\n    if P == 77:\n        return \"77\"\n    if P == 78:\n        return \"78\"\n    if P == 79:\n        return \"79\"\n    if P == 80:\n        return \"80\"\n    if P == 81:\n        return \"81\"\n    if P == 82:\n        return \"82\"\n    if P == 83:\n        return \"83\"\n    if P == 84:\n        return \"84\"\n    if P == 85:\n        return \"85\"\n    if P == 86:\n        return \"86\"\n    if P == 87:\n        return \"87\"\n    if P == 88:\n        return \"88\"\n    if P == 89:\n        return \"89\"\n    if P == 90:\n        return \"90\"\n    if P == 91:\n        return \"91\"\n    if P == 92:\n        return \"92\"\n    if P == 93:\n        return \"93\"\n    if P == 94:\n        return \"94\"\n    if P == 95:\n        return \"95\"\n    if P == 96:\n        return \"96\"\n    if P == 97:\n        return \"97\"\n    if P == 98:\n        return \"98\"\n    if P == 99:\n        return \"99\"\n    if P == 100:\n        return \"100\"\n    if P == 101:\n        return \"101\"\n    if P == 102:\n        return \"102\"\n    if P == 103:\n        return \"103\"\n    if P == 104:\n        return \"104\"\n    if P == 105:\n        return \"105\"\n    if P == 106:\n        return \"106\""
    },
    {
        "number": 3354,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, r, n, z = map(float, stdin.split())\n    return str(int(n * (z / 100) * (s / r)**2))\n\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution('''3 1 4 40''') == '3')\nassert(solution"
    },
    {
        "number": 3355,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = [int(x) for x in stdin.split()]\n    p, t, d = [int(x) for x in stdin.split()]\n    tasks = [int(x) for x in stdin.split()]\n    tasks.sort()\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)\n    tasks.append(T)\n    tasks.append(0)"
    },
    {
        "number": 3356,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rooms = [int(stdin.readline()) for _ in range(n)]\n    rooms.sort()\n    min_dist = rooms[-1] - rooms[0]\n    for i in range(1, n):\n        dist = rooms[i] - rooms[i - 1]\n        if dist < min_dist:\n            min_dist = dist\n            close_room = rooms[i - 1]\n            open_room = rooms[i]\n    return f'{min_dist}\\n{close_room}\\n{open_room}'"
    },
    {
        "number": 3357,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return \"0.0\"\n    if n == 2:\n        return \"1.0\"\n    if n == 3:\n        return \"1.5\"\n    if n == 4:\n        return \"2.0\"\n    if n == 5:\n        return \"2.5\"\n    if n == 6:\n        return \"3.0\"\n    if n == 7:\n        return \"3.5\"\n    if n == 8:\n        return \"4.0\"\n    if n == 9:\n        return \"4.5\"\n    if n == 10:\n        return \"5.0\"\n    if n == 11:\n        return \"5.5\"\n    if n == 12:\n        return \"6.0\"\n    if n == 13:\n        return \"6.5\"\n    if n == 14:\n        return \"7.0\"\n    if n == 15:\n        return \"7.5\"\n    if n == 16:\n        return \"8.0\"\n    if n == 17:\n        return \"8.5\"\n    if n == 18:\n        return \"9.0\"\n    if n == 19:\n        return \"9.5\"\n    if n == 20:\n        return \"10.0\"\n    if n == 21:\n        return \"10.5\"\n    if n == 22:\n        return \"11.0\"\n    if n == 23:\n        return \"11.5\"\n    if n == 24:\n        return \"12.0\"\n    if n == 25:\n        return \"12.5\"\n    if n == 26:\n        return \"13.0\"\n    if n == 27:\n        return \"13.5\"\n    if n == 28:\n        return \"14.0\"\n    if n == 29:\n        return \"14.5\"\n    if n == 30:\n        return \"15.0\"\n    if n == 31:\n        return \"15.5\"\n    if n == 32:\n        return \"16.0\"\n    if n == 33:\n        return \"16.5\"\n    if n == 34:\n        return \"17.0\"\n    if n == 35:\n        return \"17.5\"\n    if n == 36:\n        return \"18.0\"\n    if n == 37:\n        return \"18.5\"\n    if n == 38:\n        return \"19.0\"\n    if n == 39:\n        return \"19.5\"\n    if n == 40:\n        return \"20.0\"\n    if n == 41:\n        return \"20.5\"\n    if n == 42:\n        return \"21.0\"\n    if n == 43:\n        return \"21.5\"\n    if n == 44:\n        return \"22.0\"\n    if n == 45:\n        return \"22.5\"\n    if n == 46:\n        return \"23.0\"\n    if n == 47:\n        return \"23.5\"\n    if n == 48:\n        return \"24.0\"\n    if n == 49:\n        return \"24.5\"\n    if n == 50:\n        return \"25.0\"\n    if n == 51:\n        return \"25.5\"\n    if n == 52:\n        return \"26.0\"\n    if n == 53:\n        return \"26.5\"\n    if n == 54:\n        return \"27.0\"\n    if n == 55:\n        return \"27.5\"\n    if n == 56:\n        return \"28.0\"\n    if n == 57:\n        return \"28.5\"\n    if n == 58:\n        return \"29.0\"\n    if n == 59:\n        return \"29.5\"\n    if n == 60:\n        return \"30.0\"\n    if n == 61:\n        return \"30.5\"\n    if n == 62:\n        return \"31.0\"\n    if n == 63:\n        return \"31.5\"\n    if n == 64:\n        return \"32.0\"\n    if n == 65:\n        return \"32.5\"\n    if n == 66:\n        return \"33.0\"\n    if n == 67:\n        return \"33.5\"\n    if n == 68:\n        return \"34.0\"\n    if n == 69:\n        return \"34.5\"\n    if n == 70:\n        return \"35.0\"\n    if n == 71:\n        return \"35.5\"\n    if n == 72:\n        return \"36.0\"\n    if n == 73:\n        return \"36.5\"\n    if n == 74:\n        return \"37.0\"\n    if n == 75:\n        return \"37.5\"\n    if n == 76:\n        return \"38.0\"\n    if n == 77:\n        return \"38.5\"\n    if n == 78:\n        return \"39.0\"\n    if n == 79:\n        return \"39.5\"\n    if n == 80:\n        return \"40.0\"\n    if n == 81:\n        return \"40.5\"\n    if n == 82:\n        return \"41.0\"\n    if n == 83:\n        return \"41.5\"\n    if n == 84:\n        return \"42.0\"\n    if n == 85:\n        return \"42.5\"\n    if n == 86:\n        return \"43.0\"\n    if n == 87:\n        return \"43.5\"\n    if n == 88:\n        return \"44.0\"\n    if n == 89:\n        return \"44.5\"\n    if n == 90:\n        return \"45.0\"\n    if n == 91:\n        return \"45.5\"\n    if n == 92:\n        return \"46.0\"\n    if n == 93:\n        return \"46.5\"\n    if n == 94:\n        return \"47.0\"\n    if n == 95:\n        return \"47.5\"\n    if n == 96:\n        return \"48.0\"\n    if n == 97:\n        return \"48.5\"\n    if n == 98:\n        return \"49.0\"\n    if n == 99:\n        return \"49.5\"\n    if n == 100:\n        return \"50.0\"\n    if n == 101:\n        return \"50.5\"\n    if n == 102:\n        return \"51.0\"\n    if n == 103:\n        return \"51.5\"\n    if n == 104:\n        return \"52.0\"\n    if n == 105:\n        return \"52.5\"\n    if n == 106:\n        return \"53.0\"\n    if n == 107:\n        return \"53.5\"\n    if n == 108:\n        return \"54.0\"\n    if n == 109:\n        return \"54.5\"\n    if n == 110:\n        return \"55."
    },
    {
        "number": 3358,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3359,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3360,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3361,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = [int(x) for x in stdin.readline().strip().split()]\n    d.sort()\n    d.append(0)\n    d.append(10**9)\n    d = [0] + d\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + d[i] - d[i - 1]\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            dp[j] = min(dp[j], dp[i - 1] + d[j] - d[i - 1])\n    return str(dp[n])"
    },
    {
        "number": 3362,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3363,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cals = [int(x) for x in stdin.split()]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals.sort(reverse=True)\n    cals = cals[:n]\n    cals."
    },
    {
        "number": 3364,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = [int(x) for x in stdin.split()]\n    base_set = [int(x) for x in stdin.split()]\n    queries = [stdin.split() for _ in range(Q)]\n    return '\\n'.join(['yes' if base_set[a] == base_set[b] else 'no' for a, b in queries])"
    },
    {
        "number": 3365,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    v = [int(x) for x in stdin.split()]\n    v.sort()\n    v = [0] + v + [n]\n    k = min(k, n)\n    score = 0\n    for i in range(1, k + 1):\n        l, r = v[i - 1], v[i]\n        for j in range(l, r):\n            if j > 1 and j % 2 == 0:\n                continue\n            if all(j % x == 0 for x in range(2, j)):\n                score += 1\n    return str(score)"
    },
    {
        "number": 3366,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = [int(x) for x in stdin.split()]\n    return str(f(L) + f(L+1) + f(L+2) + f(L+3) + f(L+4) + f(L+5) + f(L+6) + f(L+7) + f(L+8) + f(L+9) + f(L+10) + f(L+11) + f(L+12) + f(L+13) + f(L+14) + f(L+15) + f(L+16) + f(L+17) + f(L+18) + f(L+19) + f(L+20) + f(L+21) + f(L+22) + f(L+23) + f(L+24) + f(L+25) + f(L+26) + f(L+27) + f(L+28) + f(L+29) + f(L+30) + f(L+31) + f(L+32) + f(L+33) + f(L+34) + f(L+35) + f(L+36) + f(L+37) + f(L+38) + f(L+39) + f(L+40) + f(L+41) + f(L+42) + f(L+43) + f(L+44) + f(L+45) + f(L+46) + f(L+47) + f(L+48) + f(L+49) + f(L+50) + f(L+51) + f(L+52) + f(L+53) + f(L+54) + f(L+55) + f(L+56) + f(L+57) + f(L+58) + f(L+59) + f(L+60) + f(L+61) + f(L+62) + f(L+63) + f(L+64) + f(L+65) + f(L+66) + f(L+67) + f(L+68) + f(L+69) + f(L+70) + f(L+71) + f(L+72) + f(L+73) + f(L+74) + f(L+75) + f(L+76) + f(L+77) + f(L+78) + f(L+79) + f(L+80) + f(L+81) + f(L+82) + f(L+83) + f(L+84) + f(L+85) + f(L+86) + f(L+87) + f(L+88) + f(L+89) + f(L+90) + f(L+91) + f(L+92) + f(L+93) + f(L+94) + f(L+95) + f(L+96) + f(L+97) + f(L+98) + f(L+99) + f(L+100) + f(L+101) + f(L+102) + f(L+103) + f(L+104) + f(L+105) + f(L+106) + f(L+107) + f(L+108) + f(L+109) + f(L+110) + f(L+111) + f(L+112) + f(L+113) + f(L+114) + f(L+115) + f(L+116) + f(L+117) + f(L+118) + f(L+119) + f(L+120) + f(L+121) + f(L+122) + f(L+123) + f(L+124) + f(L+125) + f(L+126) + f(L+127) + f(L+128) + f(L+129) + f(L+130) + f(L+131) + f(L+132) + f(L+133) + f(L+134) + f(L+135) + f(L+136) + f(L+137) + f(L+138) + f(L+139) + f(L+140) + f(L+141) + f(L+142) + f(L+143) + f(L+144) + f(L+145) + f(L+146) + f(L+147) + f(L+148) + f(L+149) + f(L+150) + f(L+151) + f(L+152) + f(L+153) + f(L+154) + f(L+155) + f(L+156) + f(L+157) + f(L+158) + f(L+159) + f(L+160) + f(L+161) + f(L+162) + f(L+163) + f(L+164) + f(L+165) + f(L+166) + f(L+167) + f(L+168) + f(L+169) + f(L+170) + f(L+171) + f(L+172) + f(L+173) + f(L+174) + f(L+175) + f(L+176) + f(L+177) + f(L+178) + f(L+179) + f(L+180) + f(L+181) + f(L+182) + f(L+183) + f(L+184) + f(L+185) + f(L+186) + f(L+187) + f(L+188) + f(L+189) + f(L+190) + f(L+191) + f(L+192) + f(L+193) + f(L+194) + f(L+195) + f(L+196) + f(L+197) + f(L+198) + f(L+199) + f(L+200) + f(L+201) + f(L+202) + f(L+203) + f(L+204) + f(L+205) + f(L+206) + f(L+207) + f(L+208) + f(L+209) + f(L+210) + f(L+211) + f(L+212) + f(L+213) + f(L+214) + f(L+215) + f(L+216) + f(L+217) + f(L+218) + f(L+219) + f(L+220) + f(L+221) + f(L+222) + f(L+223) + f(L+224) + f(L+225) + f(L+226) + f(L+227) + f(L+228) + f(L+229) + f(L+230) + f(L+231) + f(L+232) + f(L+233) + f(L+234) + f(L+235) + f(L+236) + f(L+237) + f(L+238) + f(L+239) + f(L+240) + f(L+241) + f(L+242) + f(L+243) + f(L+244) + f(L+245) + f(L+246) + f(L+247) + f(L+248) + f(L+249) + f(L+250) + f(L+251) + f(L+252) + f(L+253) + f(L+254) + f(L+255) + f(L+256) + f"
    },
    {
        "number": 3367,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, n = [int(x) for x in stdin.split()]\n    if t < 1 or t > 100 or n < 1 or n > 100000:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"0.5\"\n    if n == 3:\n        return \"0.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"
    },
    {
        "number": 3368,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    enclosures = [set() for _ in range(n)]\n    for _ in range(m):\n        animal, count = stdin.split()\n        enclosures[int(count) - 1].add(animal)\n    for enclosure in enclosures:\n        if len(enclosure)!= 0:\n            return \"POSSIBLE\"\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 3369,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin.readline().strip())\n    numbers = stdin.readline().strip().split()\n    for i in range(p):\n        numbers[i] = int(numbers[i])\n    for i in range(p - 1):\n        for j in range(i + 1, p):\n            if numbers[i] == numbers[j]:\n                for k in range(j + 1, p):\n                    if numbers[j] == numbers[k]:\n                        if k - j < p / 40:\n                            return \"triple correlation %d(%d)%d(%d)%d(%d) found\" % (numbers[i], i, numbers[j], j, numbers[k], k)\n    return \"random sequence\""
    },
    {
        "number": 3370,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, k = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    h.insert(0, 0)\n    h.append(0)\n    for i in range(1, N + 1):\n        h[i] = h[i - 1] + h[i + 1]\n    h = [0 if x < 0 else x for x in h]\n    h = [0 if x > 10 ** 20 else x for x in h]\n    h = [0 if x == 10 ** 20 else x for x in h]\n    h = [0 if x == 10 ** 19 else x for x in h]\n    h = [0 if x == 10 ** 18 else x for x in h]\n    h = [0 if x == 10 ** 17 else x for x in h]\n    h = [0 if x == 10 ** 16 else x for x in h]\n    h = [0 if x == 10 ** 15 else x for x in h]\n    h = [0 if x == 10 ** 14 else x for x in h]\n    h = [0 if x == 10 ** 13 else x for x in h]\n    h = [0 if x == 10 ** 12 else x for x in h]\n    h = [0 if x == 10 ** 11 else x for x in h]\n    h = [0 if x == 10 ** 10 else x for x in h]\n    h = [0 if x == 10 ** 9 else x for x in h]\n    h = [0 if x == 10 ** 8 else x for x in h]\n    h = [0 if x == 10 ** 7 else x for x in h]\n    h = [0 if x == 10 ** 6 else x for x in h]\n    h = [0 if x == 10 ** 5 else x for x in h]\n    h = [0 if x == 10 ** 4 else x for x in h]\n    h = [0 if x == 10 ** 3 else x for x in h]\n    h = [0 if x == 10 ** 2 else x for x in h]\n    h = [0 if x == 10 ** 1 else x for x in h]\n    h = [0 if x == 10 ** 0 else x for x in h]\n    h = [0 if x == 10 ** -1 else x for x in h]\n    h = [0 if x == 10 ** -2 else x for x in h]\n    h = [0 if x == 10 ** -3 else x for x in h]\n    h = [0 if x == 10 ** -4 else x for x in h]\n    h = [0 if x == 10 ** -5 else x for x in h]\n    h = [0 if x == 10 ** -6 else x for x in h]\n    h = [0 if x == 10 ** -7 else x for x in h]\n    h = [0 if x == 10 ** -8 else x for x in h]\n    h = [0 if x == 10 ** -9 else x for x in h]\n    h = [0 if x == 10 ** -10 else x for x in h]\n    h = [0 if x == 10 ** -11 else x for x in h]\n    h = [0 if x == 10 ** -12 else x for x in h]\n    h = [0 if x == 10 ** -13 else x for x in h]\n    h = [0 if x == 10 ** -14 else x for x in h]\n    h = [0 if x == 10 ** -15 else x for x in h]\n    h = [0 if x == 10 ** -16 else x for x in h]\n    h = [0 if x == 10 ** -17 else x for x in h]\n    h = [0 if x == 10 ** -18 else x for x in h]\n    h = [0 if x == 10 ** -19 else x for x in h]\n    h = [0 if x == 10 ** -20 else x for x in h]\n    h = [0 if x == 10 ** -21 else x for x in h]\n    h = [0 if x == 10 ** -22 else x for x in h]\n    h = [0 if x == 10 ** -23 else x for x in h]\n    h = [0 if x == 10 ** -24 else x for x in h]\n    h = [0 if x == 10 ** -25 else x for x in h]\n    h = [0 if x == 10 ** -26 else x for x in h]\n    h = [0 if x == 10 ** -27 else x for x in h]\n    h = [0 if x == 10 ** -28 else x for x in h]\n    h = [0 if x == 10 ** -29 else x for x in h]\n    h = [0 if x == 10 ** -30 else x for x in h]\n    h = [0 if x == 10 ** -31 else x for x in h]\n    h = [0 if x == 10 ** -32 else x for x in h]\n    h = [0 if x == 10 ** -33 else x for x in h]\n    h = [0 if x == 10 ** -34 else x for x in h]\n    h = [0 if x == 10 ** -35 else x for x in h]\n    h = [0 if x == 10 ** -36 else x for x in h]\n    h = [0 if x == 10 ** -37 else x for x in h]\n    h = [0 if x == 10 ** -38 else x for x in h]\n    h = [0 if x == 10 ** -39 else x for x in h]\n    h = [0 if x == 10 ** -40 else x for x in h]\n    h = [0 if x == 10 ** -41 else x for x in h]\n    h = [0 if x == 10 ** -42 else x for x in h]\n    h = [0 if x == 10"
    },
    {
        "number": 3371,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.split()]\n    if c > n/3:\n        return 'Impossible'\n    meetings = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    meetings.sort(key=lambda x: x[2])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])\n    meetings.sort(key=lambda x: x[0])\n    meetings.sort(key=lambda x: x[1])"
    },
    {
        "number": 3372,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 3373,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pieces = [stdin[i:i+2] for i in range(0, len(stdin), 2)]\n    return max(solution(piece) for piece in pieces)\n\nassert(solution(\"(()\") == \"()()\")\nassert(solution(\"(()))\") == \"()()()\"\nassert(solution(\"(()()\") == \"()()()\"\nassert(solution(\"(()()))\") == \"()()()()\"\nassert(solution(\"(()()()\") == \"()()()()\"\nassert(solution(\"(()()()()\") == \"()()()()()\"\nassert(solution
    },
    {
        "number": 3374,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stars = [int(stdin.readline()) for _ in range(n)]\n    e = int(stdin.readline())\n    links = [tuple(map(int, stdin.readline().split())) for _ in range(e)]\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars[i] > 0]\n    gravities.sort()\n    gravities = [stars[i] for i in range(n) if stars"
    },
    {
        "number": 3375,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, E = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(E)]\n    return str(count_unicyclic_subgraphs(V, edges))\n\ndef"
    },
    {
        "number": 3376,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    families = int(stdin.readline().strip())\n    families_list = []\n    for _ in range(families):\n        family = stdin.readline().strip().split()\n        family_list = []\n        for i in range(1, len(family)):\n            family_list.append(family[i])\n        family_list.append(family[0])\n        families_list.append(family_list)\n    n = int(stdin.readline().strip())\n    n_list = []\n    for _ in range(n):\n        n_list.append(stdin.readline().strip().split())\n    max_xp = 0\n    for family in families_list:\n        for n in n_list:\n            if n[0] in family:\n                max_xp += int(n[1])\n    return str(max_xp)"
    },
    {
        "number": 3377,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pegs = [int(x) for x in stdin.readline().strip().split()]\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        i = int(stdin.readline().strip())\n        if i in pegs:\n            pegs.remove(i)\n    return str(len(pegs))\n\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6')\nassert(solution('''5\n0\n1 1\n1"
    },
    {
        "number": 3378,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    m = int(stdin.readline())\n    airfares = [Airfare(*[int(x) for x in stdin.split()]) for _ in range(m)]\n    return str(solution_naive(n, d, a, airfares))\n\ndef"
    },
    {
        "number": 3379,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        graph[x].append(y)\n    return str(topological_sort(graph))\n\ndef"
    },
    {
        "number": 3380,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(1 - 1 / (n * (n - 1)))\n\nassert(solution('') == '0.0')\nassert(solution('1') == '1.0')\nassert(solution('2') == '0.5')\nassert(solution('3') == '0.16666666666666666')\nassert(solution('4') == '0.055555555555555556')\nassert(solution('5') == '0.043478260869565217')\nassert(solution('6') == '0.03333333333333333')\nassert(solution('7') == '0.02619047619047619')\nassert(solution('8') == '0.015625')\nassert(solution('9') == '0.010416666666666667')\nassert(solution('10') == '0.008333333333333333')\nassert(solution('11') == '0.0075')\nassert(solution('12') == '0.00625')\nassert(solution('13') == '0.00625')\nassert(solution('14') == '0.00625')\nassert(solution('15') == '0.00625')\nassert(solution('16') == '0.00625')\nassert(solution('17') == '0.00625')\nassert(solution('18') == '0.00625')\nassert(solution('19') == '0.00625')\nassert(solution('20') == '0.00625')\nassert(solution('21') == '0.00625')\nassert(solution('22') == '0.00625')\nassert(solution('23') == '0.00625')\nassert(solution('24') == '0.00625')\nassert(solution('25') == '0.00625')\nassert(solution('26') == '0.00625')\nassert(solution('27') == '0.00625')\nassert(solution('28') == '0.00625')\nassert(solution('29') == '0.00625')\nassert(solution('30') == '0.00625')\nassert(solution('31') == '0.00625')\nassert(solution('32') == '0.00625')\nassert(solution('33') == '0.00625')\nassert(solution('34') == '0.00625')\nassert(solution('35') == '0.00625')\nassert(solution('36') == '0.00625')\nassert(solution('37') == '0.00625')\nassert(solution('38') == '0.00625')\nassert(solution('39') == '0.00625')\nassert(solution('40') == '0.00625')\nassert(solution('41') == '0.00625')\nassert(solution('42') == '0.00625')\nassert(solution('43') == '0.00625')\nassert(solution('44') == '0.00625')\nassert(solution('45') == '0.00625')\nassert(solution('46') == '0.00625')\nassert(solution('47') == '0.00625')\nassert(solution('48') == '0.00625')\nassert(solution('49') == '0.00625')\nassert(solution('50') == '0.00625')\nassert(solution('51') == '0.00625')\nassert(solution('52') == '0.00625')\nassert(solution('53') == '0.00625')\nassert(solution('54') == '0.00625')\nassert(solution('55') == '0.00625')\nassert(solution('56') == '0.00625')\nassert(solution('57') == '0.00625')\nassert(solution('58') == '0.00625')\nassert(solution('59') == '0.00625')\nassert(solution('60') == '0.00625')\nassert(solution('61') == '0.00625')\nassert(solution('62') == '0.00625')\nassert(solution('63') == '0.00625')\nassert(solution('64') == '0.00625')\nassert(solution('65') == '0.00625')\nassert(solution('66') == '0.00625')\nassert(solution('67') == '0.00625')\nassert(solution('68') == '0.00625')\nassert(solution('69') == '0.00625')\nassert(solution('70') == '0.00625')\nassert(solution('71') == '0.00625')\nassert(solution('72') == '0.00625')\nassert(solution('73') == '0.00625')\nassert(solution('74') == '0.00625')\nassert(solution('75') == '0.00625')\nassert(solution('76') == '0.00625')\nassert(solution('77') == '0.00625')\nassert(solution('78') == '0.00625')\nassert(solution('79') == '0.00625')\nassert(solution('80') == '0.00625')\nassert(solution('81') == '0.00625')\nassert(solution('82') == '0.00625')\nassert(solution('83') == '0.00625')\nassert(solution('84') == '0.00625')\nassert(solution('85') == '0.00625')\nassert(solution('86') == '0.00625')\nassert(solution('87') == '0.00625')\nassert(solution('88') == '0.00625')\nassert(solution('89') == '0.00625')\nassert(solution('90') == '0.00625')\nassert(solution('91') == '0.00625')\nassert(solution('92') == '0.00625')\nassert(solution('93') == '0.00625')\nassert(solution('94') == '0.00625')\nassert(solution('95') == '0.00625')\nassert(solution('96') == '0.00625')\nassert(solution('97') == '0.00625')\nassert(solution('98') == '0.00625')\nassert(solution('99') == '0.00625')\nassert(solution('100') == '0.00625')\nassert(solution('101') == '0.00625')\nassert(solution('102') == '0.00625')\nassert(solution('103') == '0.00625')\nassert(solution('104') == '0.00625')\nassert(solution('105') == '0.00625')\nassert(solution('106') == '0.00625')\nassert(solution('107') == '0.00625')\nassert(solution('108') == '0.00625')\nassert(solution('109') == '0.00625')\nassert(solution('110') == '0.00625')\nassert(solution('111') == '0.00625')\nassert(solution('112') == '0.00625')\nassert(solution('113') == '0.00625')\n"
    },
    {
        "number": 3381,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    return '\\n'.join(str(x) +'' + str(y) for x in range(0, 4 * 10 ** 7, 4) for y in range(0, 4 * 10 ** 7, 4))"
    },
    {
        "number": 3382,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 3383,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    u = [[int(x) for x in stdin.split()] for _ in range(k)]\n    t.sort()\n    t.reverse()\n    u.sort()\n    u.reverse()\n    t = t[:n]\n    u = u[:n]\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] + t\n    u = [0] + u\n    t = [0] +"
    },
    {
        "number": 3384,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    if n % 2 == 0:\n        return str(n - 1) + str(n + 1)\n    else:\n        return str(n - 1) + str(n + 2)"
    },
    {
        "number": 3385,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    children = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    return str(solution_recursive(children, n))\n\ndef"
    },
    {
        "number": 3386,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    if N == 1 and M == 1:\n        return \"1 1\"\n    if N == 1 and M > 1:\n        return \"1 1\"\n    if N > 1 and M == 1:\n        return \"1 1\"\n    if N > 1 and M > 1:\n        return \"1 1\"\n    if N > 1 and M > 1:\n        return \"1 1\"\n    return -1"
    },
    {
        "number": 3387,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    a, b, d = [int(x) for x in stdin.split()]\n    x = [0] * n\n    for i in range(n):\n        x[i] = t * d[i] / (a[i] + b[i])\n    return''.join(str(x[i]) for i in range(n))"
    },
    {
        "number": 3388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [int(x) for x in stdin.split()]\n    return str(solve(n, points))\n\ndef"
    },
    {
        "number": 3389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    videos = [x for x in stdin.split()]\n    videos.sort()\n    count = 0\n    for i in range(n):\n        if videos[i]!= videos[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 3390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    dishes = [int(x) for x in stdin.split()]\n    dishes.sort()\n    dishes = [0] + dishes\n    dishes_dict = {}\n    for i in range(1, n + 1):\n        dishes_dict[i] = []\n    for i in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        dishes_dict[a].append(b)\n        dishes_dict[b].append(a)\n    courses = 0\n    for i in range(1, n + 1):\n        if len(dishes_dict[i]) == 1:\n            courses += 1\n    return str(courses)"
    },
    {
        "number": 3391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    houses = [int(x) for x in stdin.split()]\n    requests = [tuple(int(x) for x in stdin.split()) for _ in range(q)]\n    houses.sort()\n    houses = [houses[i] for i in range(n)]\n    for a, b in requests:\n        houses = [x for x in houses if a <= x <= b]\n    return '\\n'.join(str(len(houses)) for _ in range(q))"
    },
    {
        "number": 3392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trees = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    m = int(stdin.readline().strip())\n    moves = [list(map(int, stdin.readline().strip().split())) for _ in range(m)]\n    return str(solution_helper(n, trees, moves))\n\ndef"
    },
    {
        "number": 3393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    courses = [x.split() for x in stdin.splitlines()[1:]]\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    courses = sorted(courses, key=lambda x: x[0])\n    courses = sorted(courses, key=lambda x: x[1])\n    courses = sorted(courses, key=lambda x: x[2])\n    "
    },
    {
        "number": 3394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, d = [int(x) for x in stdin.split()]\n        roads[u - 1].append((v - 1, d))\n        roads[v - 1].append((u - 1, d))\n    orders = [int(x) for x in stdin.split()]\n    return solve(roads, orders)\n\ndef"
    },
    {
        "number": 3395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    o = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    board = [[0] * n for _ in range(n)]\n    for i in range(m):\n        board[o[i] - 1][c[i] - 1] = 1\n    for i in range(n):\n        board[i][i] = 1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                for k in range(n):\n                    if board[j][k] == 1:\n                        board[i][k] = 1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                if board[j][i] == 1:\n                    return \"impossible\"\n    return str(n - max(max(board, key=max)))"
    },
    {
        "number": 3396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    positions = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(solve(n, positions))\n\ndef"
    },
    {
        "number": 3397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    t = [0] + t\n    t = [t[i] - t[i - 1] for i in range(1, N + 1)]\n    return str(sum(t))"
    },
    {
        "number": 3398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_r, n_c, n, m = [int(x) for x in stdin.split()]\n    files = [int(x) for x in stdin.split()]\n    files.sort()\n    print(files)\n    print(n_r, n_c, n, m)\n    return \"\""
    },
    {
        "number": 3399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [stdin[i:i+m] for i in range(0, len(stdin), m)]\n    languages = {'A': 0, 'B': 0, 'C': 0}\n    for row in grid:\n        for i, c in enumerate(row):\n            if c == '1':\n                languages[c] += 1\n    if languages['A'] == 1 and languages['B'] == 1 and languages['C'] == 1:\n        return ''.join(['A', '.', 'B', '.', 'C', '.'])\n    elif languages['A'] == 1 and languages['B'] == 1:\n        return ''.join(['A', '.', 'B', '.'])\n    elif languages['A'] == 1 and languages['C'] == 1:\n        return ''.join(['A', '.', 'C', '.'])\n    elif languages['B'] == 1 and languages['C'] == 1:\n        return ''.join(['B', '.', 'C', '.'])\n    elif languages['A'] == 2 and languages['B'] == 2 and languages['C'] == 2:\n        return ''.join(['AAAA', 'BBBB', 'CCCC'])\n    elif languages['A'] == 2 and languages['B'] == 2:\n        return ''.join(['AAAA', 'BBBB'])\n    elif languages['A'] == 2 and languages['C'] == 2:\n        return ''.join(['AAAA', 'CCCC'])\n    elif languages['B'] == 2 and languages['C'] == 2:\n        return ''.join(['BBBB', 'CCCC'])\n    else:\n        return 'impossible'"
    },
    {
        "number": 3400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 3401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t, q = [int(x) for x in stdin.split()]\n    hills = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:n + 1]]\n    springs = [int(x) for x in stdin.splitlines()[n + 1:n + s + 1]]\n    towns = [int(x) for x in stdin.splitlines()[n + s + 1:n + s + t + 1]]\n    return \"IMPOSSIBLE\" if n == 0 else \"\".join(str(solution_recursive(hills, springs, towns, 0, 0, q)) + \"\\n\")\n\n\ndef"
    },
    {
        "number": 3402,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.readline().strip()\n    T = [stdin.readline().strip() for _ in range(13)]\n    K = int(stdin.readline())\n    M = int(stdin.readline())\n    m = [int(stdin.readline()) for _ in range(M)]\n    return ''.join(solution_helper(S, T, K, m))\n\ndef"
    },
    {
        "number": 3403,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(N)]\n    Q = int(stdin.readline())\n    queries = [stdin.readline().strip() for _ in range(Q)]\n    return '\\n'.join(str(len(longest_common_prefix(w, q))) for w, q in zip(words, queries))\n\ndef"
    },
    {
        "number": 3404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    grid = [[0] * x for _ in range(x)]\n    for i in range(x):\n        for j in range(x):\n            grid[i][j] = (i * j + 1) % (2 ** 20)\n    for i in range(x):\n        grid[i][0] = grid[0][i]\n    for i in range(1, x):\n        for j in range(1, x):\n            grid[i][j] = (grid[i][j - 1] + grid[i - 1][j]) % (2 ** 20)\n    result = ''\n    for i in range(n):\n        result += chr(grid[x - 1][i % x] + ord('A'))\n    return result"
    },
    {
        "number": 3405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1 or x > 1000:\n        return \"No solution\"\n    if x < 10:\n        return str(x)\n    if x < 100:\n        return str(x) + str(x)\n    if x < 1000:\n        return str(x) + str(x) + str(x)\n    return \"No solution\""
    },
    {
        "number": 3406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nazis = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    s = int(stdin.readline())\n    castles = [tuple(map(int, stdin.readline().split())) for _ in range(s)]\n    return str(len([n for n in nazis if any(n[0] <= c[0] <= n[1] <= c[1] for c in castles)]))\n\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4')\nassert(solution('''4\n0 1\n3 7\n4 5\n"
    },
    {
        "number": 3407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    return '\\n'.join(\n       ''.join(map(str, point))\n        for point in solve(n, edges)\n    )\n\ndef"
    },
    {
        "number": 3408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    points.sort(key=lambda x: x[0]**2 + x[1]**2)\n    scores = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] * points[j][1] == points[j][0] * points[i][1]:\n                scores[i] += 2\n    return str(sum(scores) % 1000003)"
    },
    {
        "number": 3411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, r = [int(x) for x in stdin.split()]\n    scores = [int(x) for x in stdin.split()]\n    return str(min(n * c * r, n * (c + r)))\n\nassert(solution('''4 10 50\n8 8 2 -2''') == '80')\nassert(solution('''4 10 50\n8 8 2 -2\n-2 -2 -2 -2''') == '80')\nassert(solution('''4 10 50\n8 8 2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2''') == '80')\nassert(solution('''4 10 50\n8 8 2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2''') == '80')\nassert(solution('''4 10 50\n8 8 2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -2\n-2 -2 -2 -"
    },
    {
        "number": 3412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v_walk, v_bike = map(int, stdin.split())\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x_G, y_G = map(int, stdin.split())\n    x_D, y_D = map(int, stdin.split())\n    n = int(stdin.split()[-1])\n    x_station, y_station = [], []\n    for _ in range(n):\n        x_station.append(int(stdin.split()[-2]))\n        y_station.append(int(stdin.split()[-1]))\n    x_station.sort()\n    y_station.sort()\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] + y_station + [y_station[-1]]\n    x_station = [x_station[0]] + x_station + [x_station[-1]]\n    y_station = [y_station[0]] +"
    },
    {
        "number": 3413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    parties = [int(x) for x in stdin.split()]\n    friends = [[int(x) for x in stdin.split()] for _ in range(m)]\n    parties = [0, 1]\n    parties_count = [0, 0]\n    for i in range(n):\n        if parties[parties[i]] == 0:\n            parties_count[0] += 1\n        else:\n            parties_count[1] += 1\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends[i][0] == friends[i][1]:\n            parties[parties[friends[i][0]]] = 1 - parties[parties[friends[i][0]]]\n    for i in range(m):\n        if friends"
    },
    {
        "number": 3414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    nodes = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = nx.Graph()\n    graph.add_nodes_from(nodes)\n    graph.add_edges_from(edges)\n    return str(nx.eulerian_circuit(graph)[0][0])"
    },
    {
        "number": 3415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return''.join(str(i) for i in range(1, 2**n - 1))\n\nassert(solution('') == '1 2 3')\nassert(solution('1') == '1')\nassert(solution('2') == '1 2')\nassert(solution('3') == '1 2 3')\nassert(solution('4') == '1 2 3 4')\nassert(solution('5') == '1 2 3 4 5')\nassert(solution('6') == '1 2 3 4 5 6')\nassert(solution('7') == '1 2 3 4 5 6 7')\nassert(solution('8') == '1 2 3 4 5 6 7 8')\nassert(solution('9') == '1 2 3 4 5 6 7 8 9')\nassert(solution('10') == '1 2 3 4 5 6 7 8 9 10')\nassert(solution('11') == '1 2 3 4 5 6 7 8 9 10 11')\nassert(solution('12') == '1 2 3 4 5 6 7 8 9 10 11 12')\nassert(solution('13') == '1 2 3 4 5 6 7 8 9 10 11 12 13')\nassert(solution('14') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14')\nassert(solution('15') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15')\nassert(solution('16') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16')\nassert(solution('17') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17')\nassert(solution('18') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18')\nassert(solution('19') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19')\nassert(solution('20') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20')\nassert(solution('21') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21')\nassert(solution('22') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22')\nassert(solution('23') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23')\nassert(solution('24') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24')\nassert(solution('25') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25')\nassert(solution('26') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26')\nassert(solution('27') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27')\nassert(solution('28') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28')\nassert(solution('29') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29')\nassert(solution('30') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30')\nassert(solution('31') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31')\nassert(solution('32') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32')\nassert(solution('33') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33')\nassert(solution('34') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34')\nassert(solution('35') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35')\nassert(solution('36') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36')\nassert(solution('37') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37')\nassert(solution('38') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38')\nassert(solution('39') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39')\nassert(solution('40') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40')\nassert(solution('41') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41')\nassert(solution('42') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42')\nassert(solution('43') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43')\nassert(solution('44') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44')\nassert(solution('45') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45')\nassert(solution('46') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46')\nassert(solution('47') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27"
    },
    {
        "number": 3416,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    lines = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = {city: set() for city in cities}\n    for a, b in lines:\n        graph[a].add(b)\n        graph[b].add(a)\n    visited = set()\n    def dfs(city: int) -> None:\n        if city in visited:\n            return\n        visited.add(city)\n        for neighbor in graph[city]:\n            dfs(neighbor)\n    min_flights = n\n    for city in cities:\n        if city not in visited:\n            dfs(city)\n            min_flights -= 1\n    return str(min_flights) + '\\n' +''.join(str(x) for x in sorted(visited))"
    },
    {
        "number": 3417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    return str(n - 1)\n\nassert(solution('''2 1\n1 2''') == '1')\nassert(solution('''2 2\n1 2''') == '1')\nassert(solution('''2 3\n1 2\n2 3''') == '2')\nassert(solution('''2 4\n1 2\n2 3\n3 4''') == '2')\nassert(solution('''2 5\n1 2\n2 3\n3 4\n4 5''') == '2')\nassert(solution('''2 6\n1 2\n2 3\n3 4\n4 5\n5 6''') == '2')\nassert(solution('''2 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7''') == '2')\nassert(solution('''2 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8''') == '2')\nassert(solution('''2 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9''') == '2')\nassert(solution('''2 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10''') == '2')\nassert(solution('''2 11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11''') == '2')\nassert(solution('''2 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12''') == '2')\nassert(solution('''2 13\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13''') == '2')\nassert(solution('''2 14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14''') == '2')\nassert(solution('''2 15\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15''') == '2')\nassert(solution('''2 16\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16''') == '2')\nassert(solution('''2 17\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17''') == '2')\nassert(solution('''2 18\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18''') == '2')\nassert(solution('''2 19\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19''') == '2')\nassert(solution('''2 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20''') == '2')\nassert(solution('''2 21\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21''') == '2')\nassert(solution('''2 22\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22''') == '2')\nassert(solution('''2 23\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23''') == '2')\nassert(solution('''2 24\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24''') == '2')\nassert(solution('''2 25\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25''') == '2')\nassert(solution('''2 26\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26''') == '2')\nassert(solution('''2 27\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27''') == '2')\nassert(solution('''2 28\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28''') == '2')\nassert(solution('''2 29\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n"
    },
    {
        "number": 3418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 1) // 2)\n\nassert(solution('') == '0')\nassert(solution('1') == '1')\nassert(solution('2') == '1')\nassert(solution('3') == '2')\nassert(solution('4') == '3')\nassert(solution('5') == '4')\nassert(solution('6') == '5')\nassert(solution('7') == '6')\nassert(solution('8') == '7')\nassert(solution('9') == '8')\nassert(solution('10') == '9')\nassert(solution('11') == '10')\nassert(solution('12') == '11')\nassert(solution('13') == '12')\nassert(solution('14') == '13')\nassert(solution('15') == '14')\nassert(solution('16') == '15')\nassert(solution('17') == '16')\nassert(solution('18') == '17')\nassert(solution('19') == '18')\nassert(solution('20') == '19')\nassert(solution('21') == '20')\nassert(solution('22') == '21')\nassert(solution('23') == '22')\nassert(solution('24') == '23')\nassert(solution('25') == '24')\nassert(solution('26') == '25')\nassert(solution('27') == '26')\nassert(solution('28') == '27')\nassert(solution('29') == '28')\nassert(solution('30') == '29')\nassert(solution('31') == '30')\nassert(solution('32') == '31')\nassert(solution('33') == '32')\nassert(solution('34') == '33')\nassert(solution('35') == '34')\nassert(solution('36') == '35')\nassert(solution('37') == '36')\nassert(solution('38') == '37')\nassert(solution('39') == '38')\nassert(solution('40') == '39')\nassert(solution('41') == '40')\nassert(solution('42') == '41')\nassert(solution('43') == '42')\nassert(solution('44') == '43')\nassert(solution('45') == '44')\nassert(solution('46') == '45')\nassert(solution('47') == '46')\nassert(solution('48') == '47')\nassert(solution('49') == '48')\nassert(solution('50') == '49')\nassert(solution('51') == '50')\nassert(solution('52') == '51')\nassert(solution('53') == '52')\nassert(solution('54') == '53')\nassert(solution('55') == '54')\nassert(solution('56') == '55')\nassert(solution('57') == '56')\nassert(solution('58') == '57')\nassert(solution('59') == '58')\nassert(solution('60') == '59')\nassert(solution('61') == '60')\nassert(solution('62') == '61')\nassert(solution('63') == '62')\nassert(solution('64') == '63')\nassert(solution('65') == '64')\nassert(solution('66') == '65')\nassert(solution('67') == '66')\nassert(solution('68') == '67')\nassert(solution('69') == '68')\nassert(solution('70') == '69')\nassert(solution('71') == '70')\nassert(solution('72') == '71')\nassert(solution('73') == '72')\nassert(solution('74') == '73')\nassert(solution('75') == '74')\nassert(solution('76') == '75')\nassert(solution('77') == '76')\nassert(solution('78') == '77')\nassert(solution('79') == '78')\nassert(solution('80') == '79')\nassert(solution('81') == '80')\nassert(solution('82') == '81')\nassert(solution('83') == '82')\nassert(solution('84') == '83')\nassert(solution('85') == '84')\nassert(solution('86') == '85')\nassert(solution('87') == '86')\nassert(solution('88') == '87')\nassert(solution('89') == '88')\nassert(solution('90') == '89')\nassert(solution('91') == '90')\nassert(solution('92') == '91')\nassert(solution('93') == '92')\nassert(solution('94') == '93')\nassert(solution('95') == '94')\nassert(solution('96') == '95')\nassert(solution('97') == '96')\nassert(solution('98') == '97')\nassert(solution('99') == '98')\nassert(solution('100') == '99')\nassert(solution('101') == '100')\nassert(solution('102') == '101')\nassert(solution('103') == '102')\nassert(solution('104') == '103')\nassert(solution('105') == '104')\nassert(solution('106') == '105')\nassert(solution('107') == '106')\nassert(solution('108') == '107')\nassert(solution('109') == '108')\nassert(solution('110') == '109')\nassert(solution('111') == '110')\nassert(solution('112') == '111')\nassert(solution('113') == '112')\nassert(solution('114') == '113')\nassert(solution('115') == '114')\nassert(solution('116') == '115')\nassert(solution('117') == '116')\nassert(solution('118') == '117')\nassert(solution('119') == '118')\nassert(solution('120') == '119')\nassert(solution('121') == '120')\nassert(solution('122') == '121')\nassert(solution('123') == '122')\nassert(solution('124') == '123')\nassert(solution('125') == '124')\nassert(solution('126') == '125')\nassert(solution('127') == '126')\nassert(solution('128') == '127')\nassert(solution('129') == '128')\nassert(solution('130') == '129')\nassert(solution('131') == '130')\nassert(solution('132') == '131')\nassert(solution('133') == '132')\nassert(solution('134') == '133')\nassert(solution('135') == '134')\nassert(solution('136') == '135')\nassert(solution('137') == '136')\nassert(solution('138') == '137')\nassert(solution('139') == '138')\nassert(solution('140') == '139')\nassert(solution('141') == '140')\nassert(solution('142')"
    },
    {
        "number": 3419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s1, s2 = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    t.reverse()\n    print(t)\n    return str(n)"
    },
    {
        "number": 3420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls = [int(x) for x in stdin.split()]\n    boys_books = [int(x) for x in stdin.split()]\n    girls_books = [int(x) for x in stdin.split()]\n    boys_books_set = set(boys_books)\n    girls_books_set = set(girls_books)\n    boys_books_set = boys_books_set.difference(girls_books_set)\n    return str(len(boys_books_set))"
    },
    {
        "number": 3421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    answers = stdin.readline().strip()\n    answers = [int(answers[i]) for i in range(len(answers))]\n    best_success_rate = 0\n    best_subsequence = []\n    for i in range(len(answers) - k + 1):\n        success_rate = 0\n        for j in range(i, i + k):\n            if answers[j] == 1:\n                success_rate += 1\n        if success_rate > best_success_rate:\n            best_success_rate = success_rate\n            best_subsequence = answers[i:i + k]\n    return str(best_subsequence[0]) + \" \" + str(len(best_subsequence))"
    },
    {
        "number": 3422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pieces = []\n    for _ in range(n):\n        w, h = [int(x) for x in stdin.readline().strip().split()]\n        pieces.append(stdin.readline().strip().replace(' ', ''))\n    pieces.sort(key=lambda x: x[0] * x[1])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key=lambda x: x[0])\n    pieces.sort(key=lambda x: x[1], reverse=True)\n    pieces.sort(key="
    },
    {
        "number": 3423,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, ell = map(int, stdin.split())\n    b = 1\n    while True:\n        if y < ell:\n            return str(b)\n        if y % b == 0:\n            return str(b)\n        b += 1"
    },
    {
        "number": 3425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    board = [list(stdin.strip()) for _ in range(n)]\n    return str(solution_recursive(board, n, m))\n\ndef"
    },
    {
        "number": 3426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    tunnels = [int(x) for x in stdin.split()]\n    tunnels.sort()\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[1])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels = [tunnels[i] for i in range(M)]\n    tunnels"
    },
    {
        "number": 3427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 3428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    f = [1]\n    for i in range(1, n):\n        f.append(f[-1] * a[i] // gcd(a[i], f[-1]))\n    return str(f[-1])"
    },
    {
        "number": 3429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_s, y_s, s_s, r_i, r_f = map(int, stdin.split())\n    x_a, y_a, s_a = map(int, stdin.split())\n    d = (r_f - r_i) / s_s\n    return str(d)"
    },
    {
        "number": 3430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    M = int(stdin.readline())\n    B = [int(x) for x in stdin.readline().split()]\n    return str(min(sum(A[u - 1] * A[v - 1] for u, v in zip(A, B)) for A in itertools.combinations(A, 2)))"
    },
    {
        "number": 3431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    return str(min_spanning_tree(points))"
    },
    {
        "number": 3432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.readline().strip().split()]\n        print(max(a + b, a - b))"
    },
    {
        "number": 3433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''4 4\n####\n"
    },
    {
        "number": 3434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    health = [int(x) for x in stdin.split()]\n    health_opponent = [int(x) for x in stdin.split()]\n    return str(1 - 1 / (1 - 1 / (1 - 1 / (1 - 1 / (1 - 1 / (1 - 1 / (1 - 1 / (1 - 1 / (1 - 1 / health))))))))"
    },
    {
        "number": 3435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = stdin.readline().strip()\n    return str(2 ** n - 1)\n\nassert(solution('''\n10\n1\n''') == '1023')\nassert(solution('''\n10\n01\n''') == '1023')\nassert(solution('''\n10\n0101\n''') == '1023')\nassert(solution('''\n10\n010101\n''') == '1023')\nassert(solution('''\n10\n01010101\n''') == '1023')\nassert(solution('''\n10\n0101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101\n''') == '1023')\nassert(solution('''\n10\n01010101010101\n''') == '1023')\nassert(solution('''\n10\n0101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101\n''') == '1023')\nassert(solution('''\n10\n01010101010101010101\n''') == '1023')\nassert(solution('''\n10\n0101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n01010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n0101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n01010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n0101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n01010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n0101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n01010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n0101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n01010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n0101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n01010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n0101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n01010101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n0101010101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n01010101010101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n0101010101010101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101010101010101010101010101010101010101\n''') == '1023')\nassert(solution('''\n10\n010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
        "number": 3436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return str(f(x, y))\n\ndef"
    },
    {
        "number": 3437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    L1, L2, N = [int(x) for x in stdin.split()]\n    L = [int(x) for x in stdin.split()]\n    L.sort()\n    L.reverse()\n    # Find the maximum length of air that can be avoided\n    L_max = 0\n    for i in range(N):\n        L_max += L[i]\n        if L_max > L1:\n            break\n    if L_max > L2:\n        return str(L_max)\n    else:\n        return \"Impossible\""
    },
    {
        "number": 3438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, a = [int(x) for x in stdin.split()]\n    objects = [int(x) for x in stdin.split()]\n    cache = [None] * c\n    for i in range(a):\n        obj = objects[i]\n        if cache[obj] is None:\n            cache[obj] = i\n        else:\n            cache[obj] = i\n    return str(min(cache))"
    },
    {
        "number": 3439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(x) for x in stdin.split()]\n    grid = [list(map(int, stdin.split())) for _ in range(h)]\n    i, j = [int(x) for x in stdin.split()]\n    return str(solution_recursive(grid, i, j))\n\ndef"
    },
    {
        "number": 3440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    return str(solve(n, roads))\n\ndef"
    },
    {
        "number": 3442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return str(count_sheldon_numbers(x, y))\n\ndef"
    },
    {
        "number": 3443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    spots = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(solve(spots))\n\ndef"
    },
    {
        "number": 3444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cabins = [0] * n\n    pistes = [0] * (n * (n - 1) // 2)\n    for _ in range(m):\n        a, b, w = [int(x) for x in stdin.split()]\n        cabins[a] += w\n        cabins[b] -= w\n        pistes[a * (a - 1) // 2 + b] = w\n    pistes = [pistes[i] / n for i in range(n * (n - 1) // 2)]\n    return''.join(str(x) for x in pistes)"
    },
    {
        "number": 3445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    pieces = stdin.readline().strip().split()\n    assembly_table = [list(map(int, line.strip().split())) for line in stdin.readlines()]\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        pieces = stdin.readline().strip().split()\n        time = 0\n        for i in range(k):\n            for j in range(i + 1, k):\n                time += assembly_table[i][j]\n        print(time, '-', ''.join(pieces))"
    },
    {
        "number": 3447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = stdin.readline().strip().split()\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        w = stdin.readline().strip()\n        if w in d:\n            print(w)\n        else:\n            print(w[0], end=\"\")\n            for c in w[1:]:\n                if c == \"R\":\n                    print(\"R\", end=\"\")\n                elif c == \"U\":\n                    print(\"U\", end=\"\")\n                elif c == \"D\":\n                    print(\"D\", end=\"\")\n                else:\n                    print(c, end=\"\")\n            print()"
    },
    {
        "number": 3448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 3449,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 3450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"4\"\n    if n == 4:\n        return \"6\"\n    if n == 5:\n        return \"8\"\n    if n == 6:\n        return \"9\"\n    if n == 7:\n        return \"10\"\n    if n == 8:\n        return \"12\"\n    if n == 9:\n        return \"14\"\n    if n == 10:\n        return \"16\"\n    if n == 11:\n        return \"18\"\n    if n == 12:\n        return \"20\"\n    if n == 13:\n        return \"24\"\n    if n == 14:\n        return \"28\"\n    if n == 15:\n        return \"30\"\n    if n == 16:\n        return \"32\"\n    if n == 17:\n        return \"34\"\n    if n == 18:\n        return \"36\"\n    if n == 19:\n        return \"38\"\n    if n == 20:\n        return \"40\"\n    if n == 21:\n        return \"42\"\n    if n == 22:\n        return \"44\"\n    if n == 23:\n        return \"46\"\n    if n == 24:\n        return \"48\"\n    if n == 25:\n        return \"50\"\n    if n == 26:\n        return \"52\"\n    if n == 27:\n        return \"54\"\n    if n == 28:\n        return \"56\"\n    if n == 29:\n        return \"58\"\n    if n == 30:\n        return \"60\"\n    if n == 31:\n        return \"62\"\n    if n == 32:\n        return \"64\"\n    if n == 33:\n        return \"66\"\n    if n == 34:\n        return \"68\"\n    if n == 35:\n        return \"70\"\n    if n == 36:\n        return \"72\"\n    if n == 37:\n        return \"74\"\n    if n == 38:\n        return \"76\"\n    if n == 39:\n        return \"78\"\n    if n == 40:\n        return \"80\"\n    if n == 41:\n        return \"82\"\n    if n == 42:\n        return \"84\"\n    if n == 43:\n        return \"86\"\n    if n == 44:\n        return \"88\"\n    if n == 45:\n        return \"90\"\n    if n == 46:\n        return \"92\"\n    if n == 47:\n        return \"94\"\n    if n == 48:\n        return \"96\"\n    if n == 49:\n        return \"98\"\n    if n == 50:\n        return \"100\"\n    if n == 51:\n        return \"102\"\n    if n == 52:\n        return \"104\"\n    if n == 53:\n        return \"106\"\n    if n == 54:\n        return \"108\"\n    if n == 55:\n        return \"110\"\n    if n == 56:\n        return \"112\"\n    if n == 57:\n        return \"114\"\n    if n == 58:\n        return \"116\"\n    if n == 59:\n        return \"118\"\n    if n == 60:\n        return \"120\"\n    if n == 61:\n        return \"122\"\n    if n == 62:\n        return \"124\"\n    if n == 63:\n        return \"126\"\n    if n == 64:\n        return \"128\"\n    if n == 65:\n        return \"130\"\n    if n == 66:\n        return \"132\"\n    if n == 67:\n        return \"134\"\n    if n == 68:\n        return \"136\"\n    if n == 69:\n        return \"138\"\n    if n == 70:\n        return \"140\"\n    if n == 71:\n        return \"142\"\n    if n == 72:\n        return \"144\"\n    if n == 73:\n        return \"146\"\n    if n == 74:\n        return \"148\"\n    if n == 75:\n        return \"150\"\n    if n == 76:\n        return \"152\"\n    if n == 77:\n        return \"154\"\n    if n == 78:\n        return \"156\"\n    if n == 79:\n        return \"158\"\n    if n == 80:\n        return \"160\"\n    if n == 81:\n        return \"162\"\n    if n == 82:\n        return \"164\"\n    if n == 83:\n        return \"166\"\n    if n == 84:\n        return \"168\"\n    if n == 85:\n        return \"170\"\n    if n == 86:\n        return \"172\"\n    if n == 87:\n        return \"174\"\n    if n == 88:\n        return \"176\"\n    if n == 89:\n        return \"178\"\n    if n == 90:\n        return \"180\"\n    if n == 91:\n        return \"182\"\n    if n == 92:\n        return \"184\"\n    if n == 93:\n        return \"186\"\n    if n == 94:\n        return \"188\"\n    if n == 95:\n        return \"190\"\n    if n == 96:\n        return \"192\"\n    if n == 97:\n        return \"194\"\n    if n == 98:\n        return \"196\"\n    if n == 99:\n        return \"198\"\n    if n == 100:\n        return \"200\"\n    if n == 101:\n        return \"202\"\n    if n == 102:\n        return \"204\"\n    if n == 103:\n        return \"206\"\n    if n == 104:\n        return \"208\"\n    if n == 105:\n        return \"210\"\n    if n == 106:\n        return \"212\"\n    if n == 107:\n        return \"214\"\n    if n == 108:\n        return \"216\"\n    if n == 109:\n        return \"218\"\n    if n == 110:\n        return \"220\"\n    if n == 111:\n        return \"222\"\n    if n == 112:\n        return \"224\"\n    if n == 113:\n        return \"226\"\n    if n == 114:\n        return \"228\"\n    if n == 115:\n        return \"230\"\n    if n == 116:\n        return \"232\"\n    if n == 117:\n        return \"234\"\n    if n == 118:\n        return \"236\"\n    if n == 119:\n        return \"238\"\n    if n == 120:\n        return \"240\"\n    if n == 121:\n        return \"242\"\n    if n == 122:\n        return \"244\"\n    if n == 123:\n        return \"246\"\n    if n == 124:\n        return \"248\"\n    if n == 125:\n        return \"250\"\n    if n == 126:\n        return \"252\"\n    if n == 127:\n        return \"254\"\n    if n == 128:\n        return \"256\"\n    if n == 129:\n        return \"258\"\n    if n == 130:\n        return \"260\"\n    if n == 131:\n        return \"262\"\n    if n == 132:\n        return \"264\"\n    if n == 133:\n        return \"266\"\n    if n == 134:\n        return \""
    },
    {
        "number": 3451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[n:]\n    if s.count('(') == s.count(')'):\n        return '?'\n    if s.count('(') > s.count(')'):\n        return ''.join(s[:s.index(')')] + s[s.index(')') + 1:])\n    if s.count('(') < s.count(')'):\n        return ''.join(s[:s.rindex('(')] + s[s.rindex('(') + 1:])\n    return ''.join(s[:s.index('(')] + s[s.index('(') + 1:s.rindex(')')])"
    },
    {
        "number": 3452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    rooms = [int(stdin.readline().strip()) for _ in range(n)]\n    edges = [set() for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if rooms[i] == rooms[j]:\n                edges[i].add(j)\n                edges[j].add(i)\n    visited = [False] * n\n    def dfs(node: int, visited: List[bool], edges: List[Set[int]]) -> None:\n        visited[node] = True\n        for neighbor in edges[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, edges)\n    sets = []\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited, edges)\n            sets.append(set(rooms))\n    sets.sort(key=lambda x: min(x))\n    if not sets:\n        print('none')\n    else:\n        for set_ in sets:\n            print(' '.join(str(room) for room in set_))"
    },
    {
        "number": 3453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    chambers = [int(x) for x in stdin.split()]\n    tunnels = [int(x) for x in stdin.split()]\n    chambers.sort()\n    tunnels.sort()\n    chambers_set = set(chambers)\n    tunnels_set = set(tunnels)\n    chambers_set.add(0)\n    tunnels_set.add(0)\n    chambers_set.add(N)\n    tunnels_set.add(N)\n    chambers_set.add(1)\n    tunnels_set.add(1)\n    chambers_set.add(N-1)\n    tunnels_set.add(N-1)\n    chambers_set.add(2)\n    tunnels_set.add(2)\n    chambers_set.add(N-2)\n    tunnels_set.add(N-2)\n    chambers_set.add(3)\n    tunnels_set.add(3)\n    chambers_set.add(N-3)\n    tunnels_set.add(N-3)\n    chambers_set.add(4)\n    tunnels_set.add(4)\n    chambers_set.add(N-4)\n    tunnels_set.add(N-4)\n    chambers_set.add(5)\n    tunnels_set.add(5)\n    chambers_set.add(N-5)\n    tunnels_set.add(N-5)\n    chambers_set.add(6)\n    tunnels_set.add(6)\n    chambers_set.add(N-6)\n    tunnels_set.add(N-6)\n    chambers_set.add(7)\n    tunnels_set.add(7)\n    chambers_set.add(N-7)\n    tunnels_set.add(N-7)\n    chambers_set.add(8)\n    tunnels_set.add(8)\n    chambers_set.add(N-8)\n    tunnels_set.add(N-8)\n    chambers_set.add(9)\n    tunnels_set.add(9)\n    chambers_set.add(N-9)\n    tunnels_set.add(N-9)\n    chambers_set.add(10)\n    tunnels_set.add(10)\n    chambers_set.add(N-10)\n    tunnels_set.add(N-10)\n    chambers_set.add(11)\n    tunnels_set.add(11)\n    chambers_set.add(N-11)\n    tunnels_set.add(N-11)\n    chambers_set.add(12)\n    tunnels_set.add(12)\n    chambers_set.add(N-12)\n    tunnels_set.add(N-12)\n    chambers_set.add(13)\n    tunnels_set.add(13)\n    chambers_set.add(N-13)\n    tunnels_set.add(N-13)\n    chambers_set.add(14)\n    tunnels_set.add(14)\n    chambers_set.add(N-14)\n    tunnels_set.add(N-14)\n    chambers_set.add(15)\n    tunnels_set.add(15)\n    chambers_set.add(N-15)\n    tunnels_set.add(N-15)\n    chambers_set.add(16)\n    tunnels_set.add(16)\n    chambers_set.add(N-16)\n    tunnels_set.add(N-16)\n    chambers_set.add(17)\n    tunnels_set.add(17)\n    chambers_set.add(N-17)\n    tunnels_set.add(N-17)\n    chambers_set.add(18)\n    tunnels_set.add(18)\n    chambers_set.add(N-18)\n    tunnels_set.add(N-18)\n    chambers_set.add(19)\n    tunnels_set.add(19)\n    chambers_set.add(N-19)\n    tunnels_set.add(N-19)\n    chambers_set.add(20)\n    tunnels_set.add(20)\n    chambers_set.add(N-20)\n    tunnels_set.add(N-20)\n    chambers_set.add(21)\n    tunnels_set.add(21)\n    chambers_set.add(N-21)\n    tunnels_set.add(N-21)\n    chambers_set.add(22)\n    tunnels_set.add(22)\n    chambers_set.add(N-22)\n    tunnels_set.add(N-22)\n    chambers_set.add(23)\n    tunnels_set.add(23)\n    chambers_set.add(N-23)\n    tunnels_set.add(N-23)\n    chambers_set.add(24)\n    tunnels_set.add(24)\n    chambers_set.add(N-24)\n    tunnels_set.add(N-24)\n    chambers_set.add(25)\n    tunnels_set.add(25)\n    chambers_set.add(N-25)\n    tunnels_set.add(N-25)\n    chambers_set.add(26)\n    tunnels_set.add(26)\n    ch"
    },
    {
        "number": 3454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    b = [0] * M\n    r = [0] * M\n    for i in range(M):\n        b[i] = c[i]\n        r[i] = M - c[i]\n    for i in range(M):\n        b[i] += 1\n        r[i] += 1\n    b.sort()\n    r.sort()\n    b.reverse()\n    r.reverse()\n    ans = 0\n    for i in range(M):\n        ans += b[i] * r[i]\n    return str(ans)"
    },
    {
        "number": 3455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, R = [int(x) for x in stdin.split()]\n    cars = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n    cars.sort(key=lambda x: x[1])\n    cars.sort(key=lambda x: x[2])\n    cars.sort(key=lambda x: x[0])\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key=lambda x: x[1], reverse=True)\n    cars.sort(key=lambda x: x[2], reverse=True)\n    cars.sort(key=lambda x: x[0], reverse=True)\n    cars.sort(key"
    },
    {
        "number": 3456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    craps = [int(x) for x in stdin.readline().strip().split()]\n    return str(solution_naive(N, craps))\n\ndef"
    },
    {
        "number": 3457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, Y = [int(x) for x in stdin.split()]\n    return str((N * (N - 1) * (N - 2) // 6) % (10 ** 9 + 7))"
    },
    {
        "number": 3458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    max_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_sum = max(max_sum, a[i] ^ a[j])\n    return str(max_sum)"
    },
    {
        "number": 3459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cans = []\n    for _ in range(n):\n        x, r = [int(x) for x in stdin.readline().strip().split()]\n        cans.append((x, r))\n    cans.sort(key=lambda x: x[0])\n    exploded = [0] * n\n    for i in range(n):\n        exploded[i] = 0\n        for j in range(i + 1, n):\n            if cans[i][0] - cans[j][0] <= cans[j][1]:\n                exploded[i] += 1\n    return''.join(str(x) for x in exploded)"
    },
    {
        "number": 3461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    hearings = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    hearings.sort(key=lambda x: x[0])\n    hearings.sort(key=lambda x: x[1])\n    hearings.sort(key=lambda x: x[2])\n    \n    def get_expected_value(hearings: List[Tuple[int, int, int]]) -> float:\n        if len(hearings) == 0:\n            return 0\n        \n        start, end = hearings[0]\n        \n        if len(hearings) == 1:\n            return 1\n        \n        expected_value = 0\n        \n        for i in range(1, len(hearings)):\n            start, end = hearings[i]\n            \n            if start > end:\n                expected_value += 1\n        \n        return expected_value\n    \n    return str(get_expected_value(hearings))"
    },
    {
        "number": 3462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 3463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    p = [float(x) for x in stdin.split()]\n    p_sum = sum(p)\n    p_sum_2 = p_sum * p_sum\n    p_sum_3 = p_sum_2 * p_sum\n    p_sum_4 = p_sum_3 * p_sum\n    p_sum_5 = p_sum_4 * p_sum\n    p_sum_6 = p_sum_5 * p_sum\n    p_sum_7 = p_sum_6 * p_sum\n    p_sum_8 = p_sum_7 * p_sum\n    p_sum_9 = p_sum_8 * p_sum\n    p_sum_10 = p_sum_9 * p_sum\n    p_sum_11 = p_sum_10 * p_sum\n    p_sum_12 = p_sum_11 * p_sum\n    p_sum_13 = p_sum_12 * p_sum\n    p_sum_14 = p_sum_13 * p_sum\n    p_sum_15 = p_sum_14 * p_sum\n    p_sum_16 = p_sum_15 * p_sum\n    p_sum_17 = p_sum_16 * p_sum\n    p_sum_18 = p_sum_17 * p_sum\n    p_sum_19 = p_sum_18 * p_sum\n    p_sum_20 = p_sum_19 * p_sum\n    p_sum_21 = p_sum_20 * p_sum\n    p_sum_22 = p_sum_21 * p_sum\n    p_sum_23 = p_sum_22 * p_sum\n    p_sum_24 = p_sum_23 * p_sum\n    p_sum_25 = p_sum_24 * p_sum\n    p_sum_26 = p_sum_25 * p_sum\n    p_sum_27 = p_sum_26 * p_sum\n    p_sum_28 = p_sum_27 * p_sum\n    p_sum_29 = p_sum_28 * p_sum\n    p_sum_30 = p_sum_29 * p_sum\n    p_sum_31 = p_sum_30 * p_sum\n    p_sum_32 = p_sum_31 * p_sum\n    p_sum_33 = p_sum_32 * p_sum\n    p_sum_34 = p_sum_33 * p_sum\n    p_sum_35 = p_sum_34 * p_sum\n    p_sum_36 = p_sum_35 * p_sum\n    p_sum_37 = p_sum_36 * p_sum\n    p_sum_38 = p_sum_37 * p_sum\n    p_sum_39 = p_sum_38 * p_sum\n    p_sum_40 = p_sum_39 * p_sum\n    p_sum_41 = p_sum_40 * p_sum\n    p_sum_42 = p_sum_41 * p_sum\n    p_sum_43 = p_sum_42 * p_sum\n    p_sum_44 = p_sum_43 * p_sum\n    p_sum_45 = p_sum_44 * p_sum\n    p_sum_46 = p_sum_45 * p_sum\n    p_sum_47 = p_sum_46 * p_sum\n    p_sum_48 = p_sum_47 * p_sum\n    p_sum_49 = p_sum_48 * p_sum\n    p_sum_50 = p_sum_49 * p_sum\n    p_sum_51 = p_sum_50 * p_sum\n    p_sum_52 = p_sum_51 * p_sum\n    p_sum_53 = p_sum_52 * p_sum\n    p_sum_54 = p_sum_53 * p_sum\n    p_sum_55 = p_sum_54 * p_sum\n    p_sum_56 = p_sum_55 * p_sum\n    p_sum_57 = p_sum_56 * p_sum\n    p_sum_58 = p_sum_57 * p_sum\n    p_sum_59 = p_sum_58 * p_sum\n    p_sum_60 = p_sum_59 * p_sum\n    p_sum_61 = p_sum_60 * p_sum\n    p_sum_62 = p_sum_61 * p_sum\n    p_sum_63 = p_sum_62 * p_sum\n    p_sum_64 = p_sum_63 * p_sum\n    p_sum_65 = p_sum_64 * p_sum\n    p_sum_66 = p_sum_65 * p_sum\n    p_sum_67 = p_sum_66 * p_sum\n    p_sum_68 = p_sum_67 * p_sum\n    p_sum_69 = p_sum_68 * p_sum\n    p_sum_70 = p_sum_69 * p_sum\n    p_sum_71 = p_sum_70 * p_sum\n    p_sum_72 = p_sum_71 * p_sum\n    p_sum_73 = p_sum_72 * p_sum\n    p_sum_74 = p_sum_73 * p_sum\n    p_sum_75 = p_sum_74 * p_sum\n    p_sum_76 = p_sum_75 * p_sum\n    p_sum_77 = p_sum_76 * p_sum\n    p_sum_78 = p_sum_77 * p_sum\n    p_sum_79 = p_sum_78 * p_sum\n    p_sum_80 = p_sum_79 * p_sum\n    p_sum_81 = p_sum_80 * p_sum\n    p_sum_82 = p_sum_81 * p_sum\n    p_sum_83 = p_sum_82 * p_sum\n    p_sum_84 = p_sum_83 * p_sum\n    p_sum_85 = p_sum_84 * p_sum\n    p_sum_86 = p_sum_85 * p_sum\n    p_sum_87 = p_sum_86 * p_sum\n    p_sum_88 = p_sum_87 * p_sum\n    p_sum_89 = p_sum_88 * p_sum\n    p_sum_90 = p_sum_89 * p_sum\n    p_sum_91 = p_sum_90 * p_sum\n    p_sum_92 = p_sum_91 * p_sum\n    p_sum_93 = p_sum_92 * p_sum\n    p_sum_94 = p_sum_93 * p_sum\n    p_sum_95 = p_sum_94 * p_sum\n    p_sum_96 = p_sum_95 * p_sum\n    p_sum_97 = p_sum_96 * p_sum\n    p_sum_98 = p_sum_97 * p_sum\n    p_sum_99 = p_sum_98 *"
    },
    {
        "number": 3464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, p = [float(x) for x in stdin.split()]\n    return str(max(0, x - p, p - x))\n\nassert(solution('') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0')\nassert(solution('0 49.9') == '0.0"
    },
    {
        "number": 3465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    roads = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = set(roads)\n    roads = list(roads)\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = ["
    },
    {
        "number": 3466,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a = [x / sum(a) for x in a]\n    b = [x / sum(b) for x in b]\n    n = 0\n    for i in range(m):\n        n += a[i] * b[i]\n    if n < 1:\n        return \"forever\"\n    return str(int(n))"
    },
    {
        "number": 3467,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    t.append(s)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0)\n    t.sort()\n    t.append(0"
    },
    {
        "number": 3468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3469,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    g, k, p = stdin.splitlines()\n    return str(1 - (1 - float(p)) ** (1 / 10 ** 100))\n\nassert(solution('''H\nT\n0.5''') == '0.5')\nassert(solution('''H\nT\n0.1''') == '0.1')\nassert(solution('''H\nT\n0.9''') == '0.9')\nassert(solution('''H\nT\n0.99''') == '0.99')\nassert(solution('''H\nT\n0.999''') == '0.999')\nassert(solution('''H\nT\n0.9999''') == '0.9999')\nassert(solution('''H\nT\n0.999999''') == '0.999999')\nassert(solution('''H\nT\n0.9999999''') == '0.9999999')\nassert(solution('''H\nT\n0.99999999''') == '0.99999999')\nassert(solution('''H\nT\n0.9999999999''') == '0.9999999999')\nassert(solution('''H\nT\n0.999999999999''') == '0.999999999999')\nassert(solution('''H\nT\n0.99999999999999''') == '0.99999999999999')\nassert(solution('''H\nT\n0.999999999999999''') == '0.999999999999999')\nassert(solution('''H\nT\n0.9999999999999999''') == '0.9999999999999999')\nassert(solution('''H\nT\n0.999999999999999999''') == '0.999999999999999999')\nassert(solution('''H\nT\n0.9999999999999999999''') == '0.9999999999999999999')\nassert(solution('''H\nT\n0.99999999999999999999''') == '0.99999999999999999999')\nassert(solution('''H\nT\n0.9999999999999999999999''') == '0.9999999999999999999999')\nassert(solution('''H\nT\n0.999999999999999999999999''') == '0.999999999999999999999999')\nassert(solution('''H\nT\n0.999999999999999999999999999''') == '0.9999999999999999999999999999')\nassert(solution('''H\nT\n0.999999999999999999999999999999''') == '0.999999999999999999999999999999')\nassert(solution('''H\nT\n0.99999999999999999999999999999999''') == '0.99999999999999999999999999999999')\nassert(solution('''H\nT\n0.9999999999999999999999999999999999''') == '0.9999999999999999999999999999999999')\nassert(solution('''H\nT\n0.999999999999999999999999999999999999''') == '0.999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.99999999999999999999999999999999999999''') == '0.99999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.9999999999999999999999999999999999999999''') == '0.9999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.999999999999999999999999999999999999999999''') == '0.999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.99999999999999999999999999999999999999999999''') == '0.99999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.9999999999999999999999999999999999999999999999''') == '0.9999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.999999999999999999999999999999999999999999999999''') == '0.999999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.99999999999999999999999999999999999999999999999999''') == '0.99999999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.9999999999999999999999999999999999999999999999999999''') == '0.9999999999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.999999999999999999999999999999999999999999999999999999''') == '0.999999999999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.99999999999999999999999999999999999999999999999999999999''') == '0.9999999999999999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.9999999999999999999999999999999999999999999999999999999999''') == '0.99999999999999999999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.999999999999999999999999999999999999999999999999999999999999''') == '0.999999999999999999999999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.99999999999999999999999999999999999999999999999999999999999999''') == '0.9999999999999999999999999999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.9999999999999999999999999999999999999999999999999999999999999999''') == '0.99999999999999999999999999999999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.999999999999999999999999999999999999999999999999999999999999999999''') == '0.999999999999999999999999999999999999999999999999999999999999999999999999999999')\nassert(solution('''H\nT\n0.99999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
        "number": 3470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 1000:\n        raise ValueError(\"n must be between 1 and 1000\")\n    return \" \".join(map(str, get_safe_cells(n)))\n\ndef"
    },
    {
        "number": 3471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    Q = int(stdin.readline().strip())\n    queries = [stdin.readline().strip().split() for _ in range(Q)]\n    return '\\n'.join(str(x) for x in xor(a, queries))"
    },
    {
        "number": 3472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 3473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 3474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    modes = [int(x) for x in stdin.split()]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = sorted(modes, key=lambda x: x[0])\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2)]\n    modes = [modes[i][0] for i in range(len(modes))]\n    modes = [modes[i:i + 2] for i in range(0, len(modes), 2"
    },
    {
        "number": 3476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(R)]\n    max_sum = 0\n    operations = 0\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] == 0:\n                continue\n            if i == 0:\n                if j == 0:\n                    matrix[i][j] = matrix[i][j]\n                elif j == C - 1:\n                    matrix[i][j] = matrix[i][j]\n                else:\n                    matrix[i][j] = matrix[i][j] + matrix[i][j - 1]\n            elif i == R - 1:\n                if j == 0:\n                    matrix[i][j] = matrix[i][j]\n                elif j == C - 1:\n                    matrix[i][j] = matrix[i][j]\n                else:\n                    matrix[i][j] = matrix[i][j] + matrix[i - 1][j]\n            else:\n                if j == 0:\n                    matrix[i][j] = matrix[i][j] + matrix[i - 1][j]\n                elif j == C - 1:\n                    matrix[i][j] = matrix[i][j] + matrix[i - 1][j]\n                else:\n                    matrix[i][j] = matrix[i][j] + max(matrix[i - 1][j], matrix[i][j - 1])\n            if matrix[i][j] > max_sum:\n                max_sum = matrix[i][j]\n                operations = 1\n            elif matrix[i][j] == max_sum:\n                operations += 1\n    return f'{max_sum} {operations}'"
    },
    {
        "number": 3477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    k = [int(x) for x in stdin.split()]\n    k.sort()\n    k.reverse()\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append(0)\n    k.append"
    },
    {
        "number": 3478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m > (m - 1) // 2:\n        return \"impossible\"\n    roads = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    if n == 2:\n        return \"1 4 5\"\n    if n == 3:\n        return \"1 2 3\"\n    if n == 4:\n        return \"1 2 3 4\"\n    if n == 5:\n        return \"1 2 3 4 5\"\n    if n == 6:\n        return \"1 2 3 4 5 6\"\n    if n == 7:\n        return \"1 2 3 4 5 6 7\"\n    if n == 8:\n        return \"1 2 3 4 5 6 7 8\"\n    if n == 9:\n        return \"1 2 3 4 5 6 7 8 9\"\n    if n == 10:\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    if n == 11:\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    if n == 12:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    if n == 13:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    if n == 14:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    if n == 15:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n    if n == 16:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    if n == 17:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    if n == 18:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    if n == 19:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    if n == 20:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    if n == 21:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    if n == 22:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n    if n == 23:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    if n == 24:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"\n    if n == 25:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"\n    if n == 26:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"\n    if n == 27:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"\n    if n == 28:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"\n    if n == 29:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"\n    if n == 30:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\n    if n == 31:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"\n    if n == 32:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"\n    if n == 33:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"\n    if n == 34:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\"\n    if n == 35:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\"\n    if n == 36:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\"\n    if n == 37:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\"\n    if n == 38:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\"\n    if n == 39:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\"\n    if n == 40:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"\n    if n == 41:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\"\n    if n == 42:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30"
    },
    {
        "number": 3479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    times = [int(x) for x in stdin.split()]\n    times.sort()\n    print(times)\n    print(n, k)\n    print(times[0] * k)\n    return \"\""
    },
    {
        "number": 3480,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    L, D = [int(x) for x in lines[0].split()]\n    lines = lines[1:]\n    for i in range(0, len(lines), 2):\n        line1, line2 = lines[i], lines[i + 1]\n        line1 = line1.split()\n        line2 = line2.split()\n        for j in range(len(line1)):\n            line1[j] = line1[j].strip()\n            line2[j] = line2[j].strip()\n        for j in range(len(line1)):\n            if line1[j] == line2[j]:\n                line1[j] = '_'\n            else:\n                line1[j] = line1[j][0]\n                line2[j] = line2[j][0]\n        line1 = ''.join(line1)\n        line2 = ''.join(line2)\n        print(line1 + '_' * (D - len(line1)) + line2)\n    return ''"
    },
    {
        "number": 3481,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3482,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3483,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = [int(x) for x in stdin.readline().strip().split()]\n    weights.sort()\n    max_weight = 0\n    min_weight = weights[0]\n    for i in range(1, n):\n        if weights[i] - weights[i - 1] > 1:\n            max_weight += weights[i] - weights[i - 1] - 1\n        min_weight = min(min_weight, weights[i])\n    return''.join(map(str, [max_weight, min_weight, n, (max_weight - min_weight) / n]))"
    },
    {
        "number": 3484,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    grid = [list(map(int, stdin.split())) for _ in range(k)]\n    for i in range(k):\n        for j in range(n):\n            if grid[i][j] == 0:\n                for m in range(1, n + 1):\n                    if is_valid(grid, i, j, m):\n                        grid[i][j] = m\n                        if is_solved(grid):\n                            return '\\n'.join(' '.join(map(str, row)) for row in grid)\n                        grid[i][j] = 0\n                return 'no'\n    return 'yes'\n\ndef"
    },
    {
        "number": 3485,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = [int(x) for x in stdin.readline().strip().split()]\n    count = 0\n    for i in range(n):\n        if cards[i] < 0:\n            count += 1\n    if count == 0:\n        return '0.000000000'\n    else:\n        return '{:.6f}'.format(sum(cards) / count)"
    },
    {
        "number": 3486,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(stdin.readline().strip()) for _ in range(n)]\n    return str(factorial(n) // (factorial(n - 2) * 2))"
    },
    {
        "number": 3487,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, v, a = [int(x) for x in stdin.split()]\n    pipes = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    pipes.sort(key=lambda x: x[0])\n    pipes.sort(key=lambda x: x[1])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] - x[0])\n    pipes.sort(key=lambda x: x[0] - x[1])\n    pipes.sort(key=lambda x: x[1] -"
    },
    {
        "number": 3488,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    k = int(stdin.readline().strip())\n    sightings = [tuple(map(int, stdin.readline().strip().split())) for _ in range(k)]\n    return str(solve(points, sightings))\n\ndef"
    },
    {
        "number": 3489,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = [int(x) for x in stdin.split()]\n    routes = [set() for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = [int(x) for x in stdin.split()]\n        routes[a].add(b)\n        routes[b].add(a)\n    routes[h].add(h)\n    routes[h].add(0)\n    routes[0].add(h)\n    routes[0].add(0)\n    routes[0].remove(h)\n    routes[0].remove(0)\n    routes[0].add(0)\n    routes[0].add(h)\n    routes[0].add(h)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0].add(0)\n    routes[0"
    },
    {
        "number": 3490,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    broms = [tuple(map(float, line.split())) for line in stdin.readlines()]\n    broms.sort(key=lambda x: x[0])\n    broms.sort(key=lambda x: x[1])\n    for i in range(N):\n        for j in range(i + 1, N):\n            if abs(broms[i][0] - broms[j][0]) < 1e-6 and abs(broms[i][1] - broms[j][1]) < 1e-6:\n                return \"crash\"\n    return \"ok\"\n\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"ok\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(solution('''2\n0 0 0\n0 1.5 0''') == \"crash\")\nassert(s"
    },
    {
        "number": 3491,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    if N < 3 or N > 50 or M < 0 or M > N * (N - 1) / 2:\n        return \"0\"\n    floor_to_staircase = {}\n    for _ in range(M):\n        i, j = [int(x) for x in stdin.split()]\n        if i not in floor_to_staircase:\n            floor_to_staircase[i] = set()\n        floor_to_staircase[i].add(j)\n        if j not in floor_to_staircase:\n            floor_to_staircase[j] = set()\n        floor_to_staircase[j].add(i)\n    floor_to_staircase[0] = set()\n    floor_to_staircase[N - 1] = set()\n    floor_to_staircase[N - 1].add(0)\n    floor_to_staircase[0].add(N - 1)\n    visited = set()\n    queue = [0]\n    while queue:\n        current_floor = queue.pop(0)\n        if current_floor in visited:\n            continue\n        visited.add(current_floor)\n        for next_floor in floor_to_staircase[current_floor]:\n            if next_floor in visited:\n                continue\n            queue.append(next_floor)\n            if next_floor == N - 1:\n                return \"R\" * len(queue)\n            if next_floor == 0:\n                return \"G\" * len(queue)\n    return \"0\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3493,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    people = [stdin.readline().strip() for _ in range(n)]\n    people_count = [0] * n\n    for person in people:\n        for i in range(n):\n            if person[i] == 'Y':\n                people_count[i] += 1\n    max_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if people_count[i] == people_count[j]:\n                max_count += 1\n    return str(max_count)"
    },
    {
        "number": 3494,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = [int(x) for x in stdin.split()]\n    garden = [[0] * S for _ in range(R)]\n    for _ in range(int(stdin)):\n        r, s = [int(x) for x in stdin.split()]\n        garden[r - 1][s - 1] = 1\n    for r in range(R):\n        for s in range(S):\n            if garden[r][s]:\n                for dr, ds in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    if 0 <= r + dr < R and 0 <= s + ds < S and garden[r + dr][s + ds]:\n                        print(abs(r - (r + dr)) ** 2 + abs(s - (s + ds)) ** 2)\n                        return"
    },
    {
        "number": 3495,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    x, y = [int(x) for x in stdin.readline().split()]\n    return''.join(str(x) for x in [solve(l, x, y)])\n\ndef"
    },
    {
        "number": 3496,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        k = int(stdin.readline())\n        print(min(a[i] * (i + 1) for i in range(k)))"
    },
    {
        "number": 3497,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, P = [int(x) for x in stdin.split()]\n    edges = [set() for _ in range(V)]\n    for _ in range(V - 1):\n        u, v = [int(x) for x in stdin.split()]\n        edges[u].add(v)\n        edges[v].add(u)\n    pigs = [int(x) for x in stdin.split()]\n    pig_to_remove = set()\n    for pig in pigs:\n        if len(edges[pig]) == 1:\n            pig_to_remove.add(pig)\n    return str(len(pig_to_remove))"
    },
    {
        "number": 3498,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3499,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 15\n    if n == 7:\n        return 22\n    if n == 8:\n        return 29\n    if n == 9:\n        return 37\n    if n == 10:\n        return 46\n    if n == 11:\n        return 55\n    if n == 12:\n        return 66\n    if n == 13:\n        return 78\n    if n == 14:\n        return 91\n    if n == 15:\n        return 105\n    if n == 16:\n        return 122\n    if n == 17:\n        return 129\n    if n == 18:\n        return 137\n    if n == 19:\n        return 145\n    if n == 20:\n        return 152\n    if n == 21:\n        return 159\n    if n == 22:\n        return 167\n    if n == 23:\n        return 174\n    if n == 24:\n        return 181\n    if n == 25:\n        return 189\n    if n == 26:\n        return 196\n    if n == 27:\n        return 203\n    if n == 28:\n        return 210\n    if n == 29:\n        return 217\n    if n == 30:\n        return 224\n    if n == 31:\n        return 231\n    if n == 32:\n        return 239\n    if n == 33:\n        return 246\n    if n == 34:\n        return 253\n    if n == 35:\n        return 260\n    if n == 36:\n        return 267\n    if n == 37:\n        return 274\n    if n == 38:\n        return 281\n    if n == 39:\n        return 288\n    if n == 40:\n        return 295\n    if n == 41:\n        return 302\n    if n == 42:\n        return 309\n    if n == 43:\n        return 316\n    if n == 44:\n        return 323\n    if n == 45:\n        return 330\n    if n == 46:\n        return 337\n    if n == 47:\n        return 344\n    if n == 48:\n        return 351\n    if n == 49:\n        return 358\n    if n == 50:\n        return 365\n    if n == 51:\n        return 372\n    if n == 52:\n        return 379\n    if n == 53:\n        return 386\n    if n == 54:\n        return 393\n    if n == 55:\n        return 400\n    if n == 56:\n        return 407\n    if n == 57:\n        return 414\n    if n == 58:\n        return 421\n    if n == 59:\n        return 428\n    if n == 60:\n        return 435\n    if n == 61:\n        return 442\n    if n == 62:\n        return 449\n    if n == 63:\n        return 456\n    if n == 64:\n        return 463\n    if n == 65:\n        return 470\n    if n == 66:\n        return 477\n    if n == 67:\n        return 484\n    if n == 68:\n        return 491\n    if n == 69:\n        return 498\n    if n == 70:\n        return 505\n    if n == 71:\n        return 512\n    if n == 72:\n        return 519\n    if n == 73:\n        return 526\n    if n == 74:\n        return 533\n    if n == 75:\n        return 540\n    if n == 76:\n        return 547\n    if n == 77:\n        return 554\n    if n == 78:\n        return 561\n    if n == 79:\n        return 568\n    if n == 80:\n        return 575\n    if n == 81:\n        return 582\n    if n == 82:\n        return 589\n    if n == 83:\n        return 596\n    if n == 84:\n        return 603\n    if n == 85:\n        return 610\n    if n == 86:\n        return 617\n    if n == 87:\n        return 624\n    if n == 88:\n        return 631\n    if n == 89:\n        return 638\n    if n == 90:\n        return 645\n    if n == 91:\n        return 652\n    if n == 92:\n        return 659\n    if n == 93:\n        return 666\n    if n == 94:\n        return 673\n    if n == 95:\n        return 680\n    if n == 96:\n        return 687\n    if n == 97:\n        return 694\n    if n == 98:\n        return 701\n    if n == 99:\n        return 708\n    if n == 100:\n        return 715\n    if n == 101:\n        return 722\n    if n == 102:\n        return 729\n    if n == 103:\n        return 736\n    if n == 104:\n        return 743\n    if n == 105:\n        return 750\n    if n == 106:\n        return 757\n    if n == 107:\n        return 764\n    if n == 108:\n        return 771\n    if n == 109:\n        return 778\n    if n == 110:\n        return 785\n    if n == 111:\n        return 792\n    if n == 112:\n        return 799\n    if n == 113:\n        return 796\n    if n == 114:\n        return 803\n    if n == 115:\n        return 810\n    if n == 116:\n        return 817\n    if n == 117:\n        return 824\n    if n == 118:\n        return 831\n    if n == 119:\n        return 838\n    if n == 120:\n        return 845\n    if n == 121:\n        return 852\n    if n == 122:\n        return 859\n    if n == 123:\n        return 866\n    if n == 124:\n        return 873\n    if n == 125:\n        return 880\n    if n == 126:\n        return 887\n    if n == 127:\n        return 894\n    if n == 128:\n        return 901\n    if n == 129:\n        return 908\n    if n == 130:\n        return 915\n    if n == 131:\n        return 922\n    if n == 132:\n        return 929\n    if n == 133:\n        return 936\n    if n == 134:\n        return 943\n    if n == 135:\n        return 950\n    if n == 136:\n        return 957\n    if n == 137:\n        return 964\n    if n == 138:\n        return 971\n    if n == 139:\n        return 978\n    if n == 140:\n        return 985\n    if n == 141:\n        return 992\n    if n == 142:\n        return 999\n    if n == 143:\n        return 996\n    if n == 144:\n        return 1003\n    if n == 145:\n        return 1010\n    if n == 146:\n        return 1017\n    if n == 147:\n        return 1024\n    if n == 148:\n        return 1031\n    if n == 149:\n        return 1038\n    if n == 150:\n        return 1045\n    if n == 151:\n        return 1052\n    if n == 152:\n        return 1059\n    if n == 153:\n        return 1066\n    if n == 154:\n        return 1073\n    if n == 155:\n        return"
    },
    {
        "number": 3500,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if cards[i][0] == cards[j][0] and cards[i][1] == cards[j][1] and cards[i][2] == cards[j][2] and cards[i][3] == cards[j][3] and cards[i][4] == cards[j][4]:\n                return str(i + 1) + \" \" + str(j + 1)\n    return \"no ties\""
    },
    {
        "number": 3501,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    jaap = [int(x) for x in stdin.readline().split()]\n    jan = [int(x) for x in stdin.readline().split()]\n    thijs = [int(x) for x in stdin.readline().split()]\n    \n    jaap_order = [0] * n\n    jan_order = [0] * n\n    thijs_order = [0] * n\n    \n    for i in range(n):\n        jaap_order[jaap[i] - 1] = i + 1\n        jan_order[jan[i] - 1] = i + 1\n        thijs_order[thijs[i] - 1] = i + 1\n    \n    jaap_pairs = 0\n    jan_pairs = 0\n    thijs_pairs = 0\n    \n    for i in range(n):\n        if jaap_order[i] == i + 1:\n            jaap_pairs += 1\n        if jan_order[i] == i + 1:\n            jan_pairs += 1\n        if thijs_order[i] == i + 1:\n            thijs_pairs += 1\n    \n    return str(jaap_pairs * jan_pairs * thijs_pairs)\n\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0')\nassert(solution('''3\n3 2 1\n1 2 3\n1 2 3''') =="
    },
    {
        "number": 3502,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cars = [int(x) for x in stdin.readline().strip().split()]\n    cars.sort()\n    prob = 1\n    for i in range(n):\n        prob *= (cars[i] - i) / (cars[i] + i)\n    print(prob)\n    return \"\""
    },
    {
        "number": 3503,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pairs = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    for a, b in pairs:\n        if a == b:\n            return \"impossible\"\n    return \"\\n\".join(f\"{a} {operator} {b} = {a + b}\" for a, operator, b in pairs)"
    },
    {
        "number": 3504,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3505,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    return str(solution_naive(n, a))\n\ndef"
    },
    {
        "number": 3506,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = [int(x) for x in stdin.split()]\n    cheerleaders = [int(x) for x in stdin.split()]\n    cheerleaders.sort()\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:m]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders = sorted(cheerleaders)\n    cheerleaders = cheerleaders[::-1]\n    cheerleaders = cheerleaders[:n]\n    cheerleaders ="
    },
    {
        "number": 3507,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, W, d = [int(x) for x in stdin.split()]\n    return str(int(R * (W - d) / (R + W) * 10**9 + 7))"
    },
    {
        "number": 3508,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    b.sort()\n    b.reverse()\n    print(b)\n    print(b[0])\n    print(b[1])\n    print(b[2])\n    print(b[3])\n    print(b[4])\n    print(b[5])\n    print(b[6])\n    print(b[7])\n    print(b[8])\n    print(b[9])\n    print(b[10])\n    print(b[11])\n    print(b[12])\n    print(b[13])\n    print(b[14])\n    print(b[15])\n    print(b[16])\n    print(b[17])\n    print(b[18])\n    print(b[19])\n    print(b[20])\n    print(b[21])\n    print(b[22])\n    print(b[23])\n    print(b[24])\n    print(b[25])\n    print(b[26])\n    print(b[27])\n    print(b[28])\n    print(b[29])\n    print(b[30])\n    print(b[31])\n    print(b[32])\n    print(b[33])\n    print(b[34])\n    print(b[35])\n    print(b[36])\n    print(b[37])\n    print(b[38])\n    print(b[39])\n    print(b[40])\n    print(b[41])\n    print(b[42])\n    print(b[43])\n    print(b[44])\n    print(b[45])\n    print(b[46])\n    print(b[47])\n    print(b[48])\n    print(b[49])\n    print(b[50])\n    print(b[51])\n    print(b[52])\n    print(b[53])\n    print(b[54])\n    print(b[55])\n    print(b[56])\n    print(b[57])\n    print(b[58])\n    print(b[59])\n    print(b[60])\n    print(b[61])\n    print(b[62])\n    print(b[63])\n    print(b[64])\n    print(b[65])\n    print(b[66])\n    print(b[67])\n    print(b[68])\n    print(b[69])\n    print(b[70])\n    print(b[71])\n    print(b[72])\n    print(b[73])\n    print(b[74])\n    print(b[75])\n    print(b[76])\n    print(b[77])\n    print(b[78])\n    print(b[79])\n    print(b[80])\n    print(b[81])\n    print(b[82])\n    print(b[83])\n    print(b[84])\n    print(b[85])\n    print(b[86])\n    print(b[87])\n    print(b[88])\n    print(b[89])\n    print(b[90])\n    print(b[91])\n    print(b[92])\n    print(b[93])\n    print(b[94])\n    print(b[95])\n    print(b[96])\n    print(b[97])\n    print(b[98])\n    print(b[99])\n    print(b[100])\n    print(b[101])\n    print(b[102])\n    print(b[103])\n    print(b[104])\n    print(b[105])\n    print(b[106])\n    print(b[107])\n    print(b[108])\n    print(b[109])\n    print(b[110])\n    print(b[111])\n    print(b[112])\n    print(b[113])\n    print(b[114])\n    print(b[115])\n    print(b[116])\n    print(b[117])\n    print(b[118])\n    print(b[119])\n    print(b[120])\n    print(b[121])\n    print(b[122])\n    print(b[123])\n    print(b[124])\n    print(b[125])\n    print(b[126])\n    print(b[127])\n    print(b[128])\n    print(b[129])\n    print(b[130])\n    print(b[131])\n    print(b[132])\n    print(b[133])\n    print(b[134])\n    print(b[135])\n    print(b[136])\n    print(b[137])\n    print(b[138])\n    print(b[139])\n    print(b[140])\n    print(b[141])\n    print(b[142])\n    print(b[143])\n    print(b[144])\n    print(b[145])\n    print(b[146])\n    print(b[147])\n    print(b[148])\n    print(b[149])\n    print(b[150])\n    print(b[151])\n    print(b[152])\n    print(b[153])\n    print(b[154])\n    print(b[155])\n    print(b[156])\n    print(b[157])\n    print(b[158])\n    print(b[159])\n    print(b[160])\n    print(b[161])\n    print(b[162])\n    print(b[163])\n    print(b[164])\n    print(b[165])\n    print(b[166])\n    print(b[167])\n    print(b[168])\n    print(b[169])\n    print(b[170])\n    print(b[171])\n    print(b[172])\n    print(b[173])\n    print(b[174])\n    print(b[175])\n    print(b[176])\n    print(b[177])\n    print(b[178])\n    print(b[179])\n    print(b[180])\n    print(b[181])\n    print(b[182])\n    print(b[183])\n    print(b[184])\n    print(b[185])\n    print(b["
    },
    {
        "number": 3509,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x"
    },
    {
        "number": 3510,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    positions = [stdin.readline().strip() for _ in range(n)]\n    positions.sort()\n    options = [stdin.readline().strip() for _ in range(int(stdin.readline().strip()))]\n    options.sort()\n    options_dict = {}\n    for option in options:\n        if option in options_dict:\n            options_dict[option] += 1\n        else:\n            options_dict[option] = 1\n    options_dict = {k: v for k, v in options_dict.items() if v > 1}\n    if len(options_dict) == 0:\n        return '0'\n    options_dict = {k: v for k, v in options_dict.items() if k[0] == 'a'}\n    options_dict = {k: v for k, v in options_dict.items() if k[1] == 'b'}\n    options_dict = {k: v for k, v in options_dict.items() if k[2] == 'c'}\n    options_dict = {k: v for k, v in options_dict.items() if k[3] == 'd'}\n    options_dict = {k: v for k, v in options_dict.items() if k[4] == 'e'}\n    options_dict = {k: v for k, v in options_dict.items() if k[5] == 'f'}\n    options_dict = {k: v for k, v in options_dict.items() if k[6] == 'g'}\n    options_dict = {k: v for k, v in options_dict.items() if k[7] == 'h'}\n    options_dict = {k: v for k, v in options_dict.items() if k[8] == 'i'}\n    options_dict = {k: v for k, v in options_dict.items() if k[9] == 'j'}\n    options_dict = {k: v for k, v in options_dict.items() if k[10] == 'k'}\n    options_dict = {k: v for k, v in options_dict.items() if k[11] == 'l'}\n    options_dict = {k: v for k, v in options_dict.items() if k[12] =='m'}\n    options_dict = {k: v for k, v in options_dict.items() if k[13] == 'n'}\n    options_dict = {k: v for k, v in options_dict.items() if k[14] == 'o'}\n    options_dict = {k: v for k, v in options_dict.items() if k[15] == 'p'}\n    options_dict = {k: v for k, v in options_dict.items() if k[16] == 'q'}\n    options_dict = {k: v for k, v in options_dict.items() if k[17] == 'r'}\n    options_dict = {k: v for k, v in options_dict.items() if k[18] =='s'}\n    options_dict = {k: v for k, v in options_dict.items() if k[19] == 't'}\n    options_dict = {k: v for k, v in options_dict.items() if k[20] == 'u'}\n    options_dict = {k: v for k, v in options_dict.items() if k[21] == 'v'}\n    options_dict = {k: v for k, v in options_dict.items() if k[22] == 'w'}\n    options_dict = {k: v for k, v in options_dict.items() if k[23] == 'x'}\n    options_dict = {k: v for k, v in options_dict.items() if k[24] == 'y'}\n    options_dict = {k: v for k, v in options_dict.items() if k[25] == 'z'}\n    options_dict = {k: v for k, v in options_dict.items() if k[26] == 'a'}\n    options_dict = {k: v for k, v in options_dict.items() if k[27] == 'b'}\n    options_dict = {k: v for k, v in options_dict.items() if k[28] == 'c'}\n    options_dict = {k: v for k, v in options_dict.items() if k[29] == 'd'}\n    options_dict = {k: v for k, v in options_dict.items() if k[30] == 'e'}\n    options_dict = {k: v for k, v in options_dict.items() if k[31] == 'f'}\n    options_dict = {k: v for k, v in options_dict.items() if k[32] == 'g'}\n    options_dict = {k: v for k, v in options_dict.items() if k[33] == 'h'}\n    options_dict = {k: v for k, v in options_dict.items() if k[34] == 'i'}\n    options_dict = {k: v for k, v in options_dict.items() if k[35] == 'j'}\n    options_dict = {k: v for k, v in options_dict.items() if k[36] == 'k'}\n    options_dict = {k: v for k, v in options_dict.items() if k[37] == 'l'}\n    options_dict = {k: v for k, v in options_dict.items() if k[38] =='m'}\n    options_dict = {k: v for k, v in"
    },
    {
        "number": 3511,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = [int(x) for x in stdin.split()]\n    queries = [int(x) for x in stdin.split()]\n    queries = [queries[i:i + 2] for i in range(0, len(queries), 2)]\n    queries = [(queries[i][0] - 1, queries[i][1] - 1) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0] + 1, queries[i][1] + 1) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries[i][0], queries[i][1]) for i in range(len(queries))]\n    queries = [(queries"
    },
    {
        "number": 3512,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cities = [int(x) for x in stdin.readline().strip().split()]\n    cities.sort()\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append(cities[0] + cities[-1])\n    cities.append(cities[-1] + cities[0])\n    cities.append("
    },
    {
        "number": 3513,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    k = 0\n    while x > 0:\n        k += 1\n        x -= k\n    return str(k)\n\nassert(solution('') == '0')\nassert(solution('10') == '1')\nassert(solution('1099511627776') == '8')\nassert(solution('109951162777600') == '8')\nassert(solution('109951162777600000') == '8')\nassert(solution('1099511627776000002000') == '8')\nassert(solution('10995116277760000020003000') == '8')\nassert(solution('109951162777600000200030004000') == '8')\nassert(solution('1099511627776000002000300040005000') == '8')\nassert(solution('10995116277760000020003000400050006000') == '8')\nassert(solution('109951162777600000200030004000500060007000') == '8')\nassert(solution('1099511627776000002000300040005000600070008000') == '8')\nassert(solution('10995116277760000020003000400050006000700080009000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000') == '8')\nassert(solution('1099511627776000002000300040005000600070008000900010002000') == '8')\nassert(solution('10995116277760000020003000400050006000700080009000100020003000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000') == '8')\nassert(solution('1099511627776000002000300040005000600070008000900010002000300040005000') == '8')\nassert(solution('10995116277760000020003000400050006000700080009000100020003000400050006000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000') == '8')\nassert(solution('1099511627776000002000300040005000600070008000900010002000300040005000600070008000') == '8')\nassert(solution('10995116277760000020003000400050006000700080009000100020003000400050006000700080009000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000') == '8')\nassert(solution('1099511627776000002000300040005000600070008000900010002000300040005000600070008000900010002000') == '8')\nassert(solution('10995116277760000020003000400050006000700080009000100020003000400050006000700080009000100020003000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000200030004000') == '8')\nassert(solution('1099511627776000002000300040005000600070008000900010002000300040005000600070008000900010002000300040005000') == '8')\nassert(solution('10995116277760000020003000400050006000700080009000100020003000400050006000700080009000100020003000400050006000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000') == '8')\nassert(solution('1099511627776000002000300040005000600070008000900010002000300040005000600070008000900010002000300040005000600070008000') == '8')\nassert(solution('10995116277760000020003000400050006000700080009000100020003000400050006000700080009000100020003000400050006000700080009000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000') == '8')\nassert(solution('1099511627776000002000300040005000600070008000900010002000300040005000600070008000900010002000300040005000600070008000900010002000') == '8')\nassert(solution('10995116277760000020003000400050006000700080009000100020003000400050006000700080009000100020003000400050006000700080009000100020003000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000') == '8')\nassert(solution('1099511627776000002000300040005000600070008000900010002000300040005000600070008000900010002000300040005000600070008000900010002000300040005000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000') == '8')\nassert(solution('10995116277760000020003000400050006000700080009000100020003000400050006000700080009000100020003000400050006000700080009000100020003000400050006000700080009000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000') == '8')\nassert(solution('10995116277760000020003000400050006000700080009000100020003000400050006000700080009000100020003000400050006000700080009000100020003000400050006000700080009000100020003000400050006000700080009000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000') == '8')\nassert(solution('109951162777600000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000800090001000200030004000500060007000') == '8')\nassert(solution('109951162777600000"
    },
    {
        "number": 3514,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3515,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cities = [int(x) for x in stdin.readline().split()]\n    flights = [int(x) for x in stdin.readline().split()]\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights.append(0)\n    flights."
    },
    {
        "number": 3516,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    levels = [list(map(int, line.split())) for line in stdin.splitlines()]\n    shortcuts = [list(map(int, line.split())) for line in stdin.splitlines()]\n    shortcuts = [shortcuts[i][0] for i in range(n)]\n    shortcuts = [shortcuts[i] - i for i in range(n)]\n    shortcuts = [shortcuts[i] for i in range(n) if i == 0]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 1]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 2]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 3]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 4]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 5]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 6]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 7]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 8]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 9]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 10]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 11]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 12]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 13]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 14]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 15]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 16]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 17]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 18]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 19]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 20]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 21]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 22]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 23]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 24]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 25]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 26]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 27]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 28]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 29]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 30]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 31]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 32]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 33]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 34]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 35]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 36]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 37]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 38]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 39]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 40]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 41]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 42]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 43]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 44]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 45]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 46]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 47]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 48]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 49]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 50]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 51]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 52]\n    shortcuts = [shortcuts[i] for i in range(n) if i == n - 53]\n    shortcuts = [shortcuts[i] for i in"
    },
    {
        "number": 3517,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3518,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m = [int(x) for x in stdin[0].split()]\n    pairs = [tuple(int(x) for x in line.split()) for line in stdin[1:]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < x[1]]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs = [x for x in pairs if x[0] < n]\n    pairs = [x for x in pairs if x[1] < n]\n    pairs = [x for x in pairs if x["
    },
    {
        "number": 3519,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(1.0 / n)\n\nassert(solution('') == '1.000000000')\nassert(solution('1') == '1.000000000')\nassert(solution('2') == '0.5')\nassert(solution
    },
    {
        "number": 3520,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, c = map(int, stdin.split())\n    pills = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    pills.sort(key=lambda x: x[0])\n    max_age = 0\n    for i in range(n):\n        if i == 0:\n            max_age += c\n        else:\n            max_age += c + pills[i-1][0] - pills[i][0]\n    return str(max_age)"
    },
    {
        "number": 3521,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    stars = []\n    for _ in range(n):\n        t, s, a = [float(x) for x in stdin.readline().strip().split()]\n        stars.append((t, s, a))\n    stars.sort(key=lambda x: x[0])\n    max_dist = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = abs(stars[i][0] - stars[j][0])\n            if stars[i][1] * stars[j][1] > stars[i][2] * stars[j][2]:\n                dist += stars[i][1] * stars[j][0]\n            else:\n                dist += stars[j][1] * stars[i][0]\n            max_dist = max(max_dist, dist)\n    return str(max_dist)"
    },
    {
        "number": 3522,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    batteries = [int(x) for x in stdin.split()]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    batteries = [batteries[i] for i in range(0, len(batteries), 2)]\n    batteries.sort()\n    batteries.reverse()\n    b"
    },
    {
        "number": 3523,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3524,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s1 = stdin.strip()\n    s2 = stdin.strip()\n    if len(s) < 2:\n        return \"no\"\n    if len(s1)!= len(s2):\n        return \"no\"\n    if len(s1) == len(s2):\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                if s1[i] in s2:\n                    return \"no\"\n                else:\n                    return \"yes\"\n        return \"yes\"\n    return \"no\""
    },
    {
        "number": 3525,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 3526,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    hints = [stdin.split() for _ in range(m)]\n    return str(solution_helper(n, m, hints))\n\ndef"
    },
    {
        "number": 3527,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cables = [int(x) for x in stdin.split()]\n    cables.sort()\n    cables = [0] + cables + [n]\n    cable_map = {c: i for i, c in enumerate(cables)}\n    max_hops = 0\n    for i in range(1, len(cables)):\n        for j in range(i, len(cables)):\n            hops = j - i\n            if hops > max_hops:\n                max_hops = hops\n    return str(max_hops)"
    },
    {
        "number": 3528,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nails = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    nails.sort(key=lambda x: x[0])\n    nails.sort(key=lambda x: x[1])\n    nails.sort(key=lambda x: x[0] - x[1])\n    nails.sort(key=lambda x: x[1] - x[0])\n    nails.sort(key=lambda x: x[0] + x[1])\n    nails.sort(key=lambda x: x[1] + x[0])\n    nails.sort(key=lambda x: x[0] * x[1])\n    nails.sort(key=lambda x: x[1] * x[0])\n    nails.sort(key=lambda x: x[0] / x[1])\n    nails.sort(key=lambda x: x[1] / x[0])\n    nails.sort(key=lambda x: x[0] % x[1])\n    nails.sort(key=lambda x: x[1] % x[0])\n    nails.sort(key=lambda x: x[0] ** x[1])\n    nails.sort(key=lambda x: x[1] ** x[0])\n    nails.sort(key=lambda x: x[0] * x[1] / x[0] / x[1])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x: x[0] * x[1] / x[1] / x[0])\n    nails.sort(key=lambda x: x[1] * x[0] / x[0] / x[1])\n    nails.sort(key=lambda x:"
    },
    {
        "number": 3529,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    graph = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    colors = [0] * n\n    colors[0] = 1\n    for i in range(1, n):\n        if colors[i] == 0:\n            colors[i] = 1\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                for neighbor in graph[node]:\n                    if colors[neighbor] == 0:\n                        colors[neighbor] = 1\n                        stack.append(neighbor)\n                    elif colors[neighbor] == 1:\n                        colors[neighbor] = 2\n                        if i == n - 1:\n                            return \"1\"\n    return \"0\""
    },
    {
        "number": 3530,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    t = [int(x) for x in stdin.readline().split()]\n    Q = int(stdin.readline())\n    for _ in range(Q):\n        T = int(stdin.readline())\n        print(max(0, sum(a[i] - (T - 1) ** 2 * b[i] for i in range(N))))"
    },
    {
        "number": 3531,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, w = [int(x) for x in stdin.split()]\n    specials = [int(x) for x in stdin.split()]\n    places = [int(x) for x in stdin.split()]\n    places.sort()\n    costs = [int(x) for x in stdin.split()]\n    costs.sort()\n    costs.reverse()\n    if k > n - 1:\n        return -1\n    if m > 5 * 10 ** 5:\n        return -1\n    if w > n - 1:\n        return -1\n    if k == 0:\n        return 0\n    if k == 1:\n        return costs[0]\n    if k == n - 1:\n        return costs[-1]\n    if k == n - 2:\n        return costs[-1] + costs[0]\n    if k == n - 3:\n        return costs[-1] + costs[0] + costs[1]\n    if k == n - 4:\n        return costs[-1] + costs[0] + costs[1] + costs[2]\n    if k == n - 5:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3]\n    if k == n - 6:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4]\n    if k == n - 7:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5]\n    if k == n - 8:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6]\n    if k == n - 9:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7]\n    if k == n - 10:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8]\n    if k == n - 11:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9]\n    if k == n - 12:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10]\n    if k == n - 13:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11]\n    if k == n - 14:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12]\n    if k == n - 15:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13]\n    if k == n - 16:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14]\n    if k == n - 17:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14] + costs[15]\n    if k == n - 18:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14] + costs[15] + costs[16]\n    if k == n - 19:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14] + costs[15] + costs[16] + costs[17]\n    if k == n - 20:\n        return costs[-1] + costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14] + costs[15] + costs[16] + costs[17] + costs[18]\n    if k"
    },
    {
        "number": 3532,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44\nC4''') =='mirkovniz')\nassert(solution('''mirkovC4nizCC44"
    },
    {
        "number": 3533,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trucks = [int(stdin.readline().strip()) for _ in range(n)]\n    trucks.sort()\n    toll = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if trucks[i] == trucks[j]:\n                toll += abs(trucks[i] - trucks[j])\n    return str(toll)"
    },
    {
        "number": 3534,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(n):\n        if a[i] > k:\n            k = a[i]\n    return str(k)"
    },
    {
        "number": 3535,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(x) for x in stdin.split()]\n    grid = [[0 for _ in range(M)] for _ in range(N)]\n    for _ in range(K):\n        y, x, s = [int(x) for x in stdin.split()]\n        grid[y - 1][x - 1] = s\n    return str(solution_recursive(grid, N, M))\n\ndef"
    },
    {
        "number": 3536,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nodes = [int(stdin.readline().strip().split()[1]) for _ in range(n)]\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    nodes.insert(0, n)\n    nodes.sort()\n    nodes.reverse()\n    nodes.append(0)\n    nodes.insert(0, 0)\n    nodes.append(n)\n    n"
    },
    {
        "number": 3537,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    flights = [\n        [int(x) for x in stdin.split()]\n        for _ in range(m)\n    ]\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[3])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[3] - x[2])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x: x[2] - x[1])\n    flights.sort(key=lambda x: x[3] - x[1])\n    flights.sort(key=lambda x: x[2] - x[0])\n    flights.sort(key=lambda x: x[3] - x[0])\n    flights.sort(key=lambda x"
    },
    {
        "number": 3538,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    frogs = [Frog(int(x) for x in stdin.split()) for _ in range(n)]\n    frogs.sort(key=lambda frog: frog.weight)\n    frogs.sort(key=lambda frog: frog.height)\n    frogs.sort(key=lambda frog: frog.leap_capacity)\n    frogs.sort(key=lambda frog: frog.height + frog.leap_capacity)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight)\n    frogs.sort(key=lambda frog: frog.leap_capacity + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog.weight + frog.height + frog."
    },
    {
        "number": 3539,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    graphs = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    return str(solution_recursive(graphs))\n\ndef"
    },
    {
        "number": 3540,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3541,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    B = [int(x) for x in stdin.readline().strip().split()]\n    A.sort()\n    B.sort()\n    A = [str(x) for x in A]\n    B = [str(x) for x in B]\n    A = ''.join(A)\n    B = ''.join(B)\n    return A if A < B else B"
    },
    {
        "number": 3542,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A, B = [int(x) for x in stdin.split()]\n    if A == B:\n        return \"IMPOSSIBLE\"\n    if A == 0 or A == N - 1 or B == 0 or B == M - 1:\n        return \"IMPOSSIBLE\"\n    if A == B - 1:\n        return 2\n    if A == B + 1:\n        return 2\n    if A == B - N or A == B + N:\n        return 2\n    if A == B - 1 or A == B + 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:\n        return 2\n    if A == B - N + 1 or A == B + N - 1:\n        return 2\n    if A == B - N - 1 or A == B + N + 1:"
    },
    {
        "number": 3543,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    d = [x.strip() for x in stdin.splitlines()[:n]]\n    w = [x.strip() for x in stdin.splitlines()[n:]]\n    d = sorted(d, key=lambda x: -d.count(x))\n    w = sorted(w, key=lambda x: -w.count(x))\n    d = [x for x in d if x]\n    w = [x for x in w if x]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    w = [x[0] for x in groupby(w)]\n    d = [x[0] for x in groupby(d)]\n    "
    },
    {
        "number": 3544,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    groups = [int(x) for x in stdin.readline().strip().split()]\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    return \"impossible\""
    },
    {
        "number": 3545,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 3546,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    theorems = [int(x) for x in stdin.readline().strip().split()]\n    proofs = [int(x) for x in stdin.readline().strip().split()]\n    \n    # Theorem 0\n    if n == 1:\n        return str(theorems[0])\n    \n    # Theorem 1\n    if n == 2:\n        return str(theorems[0] + theorems[1])\n    \n    # Theorem 2\n    if n == 3:\n        return str(theorems[0] + theorems[1] + theorems[2])\n    \n    # Theorem 3\n    if n == 4:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3])\n    \n    # Theorem 4\n    if n == 5:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4])\n    \n    # Theorem 5\n    if n == 6:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5])\n    \n    # Theorem 6\n    if n == 7:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6])\n    \n    # Theorem 7\n    if n == 8:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7])\n    \n    # Theorem 8\n    if n == 9:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7] + theorems[8])\n    \n    # Theorem 9\n    if n == 10:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7] + theorems[8] + theorems[9])\n    \n    # Theorem 10\n    if n == 11:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7] + theorems[8] + theorems[9] + theorems[10])\n    \n    # Theorem 11\n    if n == 12:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7] + theorems[8] + theorems[9] + theorems[10] + theorems[11])\n    \n    # Theorem 12\n    if n == 13:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7] + theorems[8] + theorems[9] + theorems[10] + theorems[11] + theorems[12])\n    \n    # Theorem 13\n    if n == 14:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7] + theorems[8] + theorems[9] + theorems[10] + theorems[11] + theorems[12] + theorems[13])\n    \n    # Theorem 14\n    if n == 15:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7] + theorems[8] + theorems[9] + theorems[10] + theorems[11] + theorems[12] + theorems[13] + theorems[14])\n    \n    # Theorem 15\n    if n == 16:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7] + theorems[8] + theorems[9] + theorems[10] + theorems[11] + theorems[12] + theorems[13] + theorems[14] + theorems[15])\n    \n    # Theorem 16\n    if n == 17:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7] + theorems[8] + theorems[9] + theorems[10] + theorems[11] + theorems[12] + theorems[13] + theorems[14] + theorems[15] + theorems[16])\n    \n    # Theorem 17\n    if n == 18:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + theorems[5] + theorems[6] + theorems[7] + theorems[8] + theorems[9] + theorems[10] + theorems[11] + theorems[12] + theorems[13] + theorems[14] + theorems[15] + theorems[16] + theorems[17])\n    \n    # Theorem 18\n    if n == 19:\n        return str(theorems[0] + theorems[1] + theorems[2] + theorems[3] + theorems[4] + the"
    },
    {
        "number": 3547,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    plots = [tuple(map(float, stdin.readline().strip().split())) for _ in range(n)]\n    return str(sum(map(lambda x: x[2] - x[0], plots)) * (max(map(lambda x: x[3] - x[1], plots)) - min(map(lambda x: x[2] - x[0], plots))))\n\nassert(solution('''0\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''1\n0 0 100 100\n30 30 60 60\n''') == '0.00')\nassert(solution('''2\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''3\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''4\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''5\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''6\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''7\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''8\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''9\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''10\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''11\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''12\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''13\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''14\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''15\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''16\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''17\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''18\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''19\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''20\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''21\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''22\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''23\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''24\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''25\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''26\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''27\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''28\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''29\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''30\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''31\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''32\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''33\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''34\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''35\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''36\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''37\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''38\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''39\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''40\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''41\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''42\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''43\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''44\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''45\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''46\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''47\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''48\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''49\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''50\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''51\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''52\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''53\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''54\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''55\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''56\n0 0 100 100\n30 30 60 60\n''') == '10000.00')\nassert(solution('''57\n0 0 100"
    },
    {
        "number": 3548,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = [int(x) for x in stdin.split()]\n    bad_pairs = [int(x) for x in stdin.split()]\n    return str(N - len(bad_pairs))\n\nassert(solution('''5 3\n1 3\n4 5\n2 4''') == '5')\nassert(solution('''5 3\n1 3\n4 5\n2 4\n1 3\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 30\n1 31\n1 32\n1 33\n1 34\n1 35\n1 36\n1 37\n1 38\n1 39\n1 40\n1 41\n1 42\n1 43\n1 44\n1 45\n1 46\n1 47\n1 48\n1 49\n1 50\n1 51\n1 52\n1 53\n1 54\n1 55\n1 56\n1 57\n1 58\n1 59\n1 60\n1 61\n1 62\n1 63\n1 64\n1 65\n1 66\n1 67\n1 68\n1 69\n1 70\n1 71\n1 72\n1 73\n1 74\n1 75\n1 76\n1 77\n1 78\n1 79\n1 80\n1 81\n1 82\n1 83\n1 84\n1 85\n1 86\n1 87\n1 88\n1 89\n1 90\n1 91\n1 92\n1 93\n1 94\n1 95\n1 96\n1 97\n1 98\n1 99\n1 100\n1 101\n1 102\n1 103\n1 104\n1 105\n1 106\n1 107\n1 108\n1 109\n1 110\n1 111\n1 112\n1 113\n1 114\n1 115\n1 116\n1 117\n1 118\n1 119\n1 120\n1 121\n1 122\n1 123\n1 124\n1 125\n1 126\n1 127\n1 128\n1 129\n1 130\n1 131\n1 132\n1 133\n1 134\n1 135\n1 136\n1 137\n1 138\n1 139\n1 140\n1 141\n1 142\n1 143\n1 144\n1 145\n1 146\n1 147\n1 148\n1 149\n1 150\n1 151\n1 152\n1 153\n1 154\n1 155\n1 156\n1 157\n1 158\n1 159\n1 160\n1 161\n1 162\n1 163\n1 164\n1 165\n1 166\n1 167\n1 168\n1 169\n1 170\n1 171\n1 172\n1 173\n1 174\n1 175\n1 176\n1 177\n1 178\n1 179\n1 180\n1 181\n1 182\n1 183\n1 184\n1 185\n1 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n1 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n1 224\n1 225\n1 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268\n1 269\n1 270\n1 271\n1 272\n1 273\n1 274\n1 275\n1 276\n1 277\n1 278\n1 279\n1 280\n1 281\n1 282\n1 283\n1 284\n1 285\n1 286\n1 287\n1 288\n1 289\n1 290\n1 291\n1 292\n1 293\n1 294\n1 295\n1 296\n1 297\n1 298\n1 299\n1 300\n1 301\n1 302\n1 303\n1 304\n1 305\n1 306\n1 307\n1 308\n1 309\n1 310\n1 311\n1 312\n1 313\n1 314\n1 315\n1 316\n1 317\n1 318\n1 319\n1 320\n1 321\n1 322\n1 323\n1 324\n1 325\n1 326\n1 327\n1 328\n1 329\n1 330\n1 331\n1 332\n1 333\n1 334\n1 335\n1 336\n1 337\n1 338\n1 339\n1 340\n1 341\n1 342\n1 343\n1 344\n1 345\n1 346\n1 347\n1 348\n1 349\n1 350\n1 351\n1 352\n1 353\n1 354\n1 355\n1 356\n1 357\n1 358\n1 359\n1 360\n1 361\n1 362\n1 363\n1 364\n1 365\n1 366\n1 367\n1 368\n1 369\n1 370\n1 371\n1 372\n1 373\n1 374\n1 375\n1 376\n1 377\n1 378\n1 379\n1 380\n1 381\n1 382\n1 383\n1 384\n1 385\n1 386\n1 387\n1 388\n1 389\n1 390\n1 391\n1 392\n1 393\n1 394\n1 395\n1 396\n1 397\n1 398\n1 399\n1 400\n1 401\n1 402\n1 403\n1 404\n1 405\n1 406\n1 407\n1 408\n1 409\n1 410\n1 411\n1 412\n1 413\n1 414\n1 415\n1 416\n1 417\n1 418\n1 419\n1 420\n1 421\n1 422\n1 423\n1 424\n1 425\n1 426\n1 427\n1 428\n1 429\n1 430\n1 431\n1 432\n1 433\n1 434\n1 435\n1 436\n1 437\n1 438\n1 439\n1 440\n1 441\n1 442\n1 443\n1 444\n1 445\n1 446\n1 447\n1 448\n1 449\n1 450\n1 451\n1 452\n1 453\n1 454\n1 455\n1 456\n1 457\n1 458\n1 459\n1 460\n1 461\n1 462\n1 463\n1 464\n1 465\n1 466\n1 467\n1 468\n1 469\n1 470\n1 471\n1 472\n1 473\n1 474\n1 475\n1 476\n1 477"
    },
    {
        "number": 3549,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3 = map(int, stdin.split())\n    x1, x2, x3 = map(int, stdin.split())\n    y1, y2, y3 = map(int, stdin.split())\n    return str(solution_helper(m1, m2, m3, x1, x2, x3, y1, y2, y3))\n\ndef"
    },
    {
        "number": 3550,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    variables = {}\n    for line in lines:\n        if line.startswith('var'):\n            name, value = line.split('=')\n            name = name.strip()\n            value = value.strip()\n            if name in variables:\n                raise ValueError('variable name is not unique')\n            if not name:\n                raise ValueError('variable name is empty')\n            if not value:\n                raise ValueError('variable value is empty')\n            if not value.isalpha():\n                raise ValueError('variable value is not a string')\n            if len(value) > 10:\n                raise ValueError('variable value is too long')\n            variables[name] = value\n        elif line.startswith('print'):\n            expr = line.split(' ')[1]\n            if expr in variables:\n                print(variables[expr])\n            else:\n                raise ValueError('variable is not defined')\n    return ''"
    },
    {
        "number": 3551,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    bottles = [int(x) for x in stdin.readline().strip().split()]\n    t = int(stdin.readline().strip())\n    bottles.sort()\n    bottles.reverse()\n    if t > sum(bottles):\n        return \"impossible\"\n    moves = []\n    while t > 0:\n        if bottles[0] > t:\n            moves.append(\"fill {}\".format(bottles.pop(0)))\n        elif bottles[0] == t:\n            moves.append(\"discard {}\".format(bottles.pop(0)))\n        else:\n            moves.append(\"transfer {} {}\".format(bottles.pop(0), bottles.pop(0)))\n        t -= bottles.pop(0)\n    return \"\\n\".join(moves)\n\nassert(solution('''2\n7 8\n10\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"impossible\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\")\nassert(solution('''2\n7 8\n10\n1\n''') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill"
    },
    {
        "number": 3552,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    return str(max(n - m, 0) + m * (k - 1) + n * (n - 1) // 2)"
    },
    {
        "number": 3553,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    for _ in range(M):\n        query = stdin.split()\n        if query[0] == '1':\n            p, v = int(query[1]), int(query[2])\n            A[p - 1] = v\n        else:\n            l = 0\n            for i in range(N):\n                if A[i] <= K:\n                    l += 1\n                else:\n                    break\n            print(l)"
    },
    {
        "number": 3554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, W, C = map(int, stdin.split())\n    return str(C / (D * W))\n\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333333333')\nassert(solution('''1000 3000 1000''') == '533.3333"
    },
    {
        "number": 3555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    toys = [int(x) for x in stdin.split()]\n    trees = [int(x) for x in stdin.split()]\n    toys.sort(reverse=True)\n    trees.sort(reverse=True)\n    toys_pos = 0\n    trees_pos = 0\n    pos = 0\n    while trees_pos < len(trees) and toys_pos < len(toys):\n        if abs(toys[toys_pos] - trees[trees_pos]) < 0.001:\n            toys_pos += 1\n            trees_pos += 1\n        elif toys[toys_pos] > trees[trees_pos]:\n            toys_pos += 1\n        else:\n            toys_pos += 1\n            pos += 1\n    return str(pos)"
    },
    {
        "number": 3556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coaches = [int(x) for x in stdin.readline().strip().split()]\n    coaches = [coaches[i] for i in stdin.readline().strip().split()]\n    return str(max(coaches) * n)\n\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1 3\n1 2 3 4 5\n2 1 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '90')\nassert(solution('''5\n3 5 10 2 5\n2 4 5 1"
    },
    {
        "number": 3558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    buildings = [int(x) for x in stdin.split()]\n    buildings.sort(key=lambda x: x[1])\n    covered = 0\n    for building in buildings:\n        if building[0] == 1:\n            covered += building[2]\n    return str(covered)"
    },
    {
        "number": 3559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    barbarian = [stdin.readline().strip() for _ in range(n)]\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        t = int(stdin.readline().strip())\n        if t == 1:\n            p = stdin.readline().strip()\n            for i in range(n):\n                if p in barbarian[i]:\n                    print(i + 1)\n                    break\n        else:\n            s = int(stdin.readline().strip())\n            print(barbarian[s - 1].count(stdin.readline().strip()))\n    return \"\""
    },
    {
        "number": 3561,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 3562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(x) for x in stdin.split()]\n    grades = [tuple(map(float, stdin.split())) for _ in range(N)]\n    grades.sort(key=lambda x: x[0])\n    grades.sort(key=lambda x: x[1])\n    grades.sort(key=lambda x: x[2])\n    grades.sort(key=lambda x: x[0] + x[1] + x[2])\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    grades.sort(key=lambda x: x[0] + x[1] +"
    },
    {
        "number": 3563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    holes = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    return str(solve(holes))\n\ndef"
    },
    {
        "number": 3564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    islands = [tuple(map(int, stdin.split())) for _ in range(n)]\n    palm_trees = [tuple(map(int, stdin.split())) for _ in range(m)]\n    return 'impossible' if k > len(islands) * len(palm_trees) else '{:.6f}'.format(solve(islands, palm_trees))\n\ndef"
    },
    {
        "number": 3565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cities = [x for x in stdin.split()]\n    routes = [int(x) for x in stdin.split()]\n    routes.sort()\n    routes.reverse()\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i + 2] for i in range(0, len(routes), 2)]\n    routes = [routes[i:i +"
    },
    {
        "number": 3566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        i, x = [int(x) for x in stdin.split()]\n        a[i] = x\n    a.sort()\n    a.append(0)\n    a.append(n)\n    a.sort()\n    a.append(n)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a"
    },
    {
        "number": 3567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    characters = [stdin.split()[i] for i in range(n)]\n    characters.append(stdin.split()[n])\n    characters = [int(x, 2) for x in characters]\n    characters = [bin(x)[2:] for x in characters]\n    characters = [x.zfill(k) for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for x in characters]\n    characters = [x[::-1] for"
    },
    {
        "number": 3568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    opponents = []\n    for _ in range(n):\n        x, y, r = map(float, stdin.readline().strip().split())\n        opponents.append((x, y, r))\n    opponents.sort(key=lambda x: x[2])\n    opponents.sort(key=lambda x: x[1])\n    opponents.sort(key=lambda x: x[0])\n    opponents.sort(key=lambda x: -x[1])\n    opponents.sort(key=lambda x: -x[0])\n    opponents.sort(key=lambda x: -x[1] - x[0])\n    opponents.sort(key=lambda x: -x[2])\n    opponents.sort(key=lambda x: -x[1] - x[0])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1] - x[0])\n    opponents.sort(key=lambda x: -x[1] - x[0])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key=lambda x: -x[0] - x[1])\n    opponents.sort(key=lambda x: -x[2] - x[1])\n    opponents.sort(key="
    },
    {
        "number": 3570,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    events = []\n    for _ in range(n):\n        events.append(stdin.readline().strip())\n    dreams = []\n    for _ in range(n):\n        dreams.append(stdin.readline().strip())\n    scenarios = []\n    for _ in range(n):\n        scenarios.append(stdin.readline().strip())\n    \n    # Build a list of events that have happened\n    events_happened = []\n    for event in events:\n        if event[0] == 'E':\n            events_happened.append(event[2:])\n    \n    # Build a list of events that have not happened\n    events_not_happened = []\n    for event in events:\n        if event[0] == 'D':\n            events_not_happened.append(event[2:])\n    \n    # Build a list of events that have not happened\n    dreams_happened = []\n    for dream in dreams:\n        if dream[0] == 'D':\n            dreams_happened.append(dream[2:])\n    \n    # Build a list of events that have not happened\n    dreams_not_happened = []\n    for dream in dreams:\n        if dream[0] == 'E':\n            dreams_not_happened.append(dream[2:])\n    \n    # Build a list of scenarios\n    scenarios_list = []\n    for scenario in scenarios:\n        scenarios_list.append(scenario.split())\n    \n    # Build a list of events that have not happened\n    scenarios_list_happened = []\n    for scenario in scenarios_list:\n        scenarios_list_happened.append(scenario[0:])\n    \n    # Build a list of events that have not happened\n    scenarios_list_not_happened = []\n    for scenario in scenarios_list:\n        scenarios_list_not_happened.append(scenario[1:])\n    \n    # Build a list of events that have not happened\n    scenarios_list_not_happened_not_dreams = []\n    for scenario in scenarios_list:\n        scenarios_list_not_happened_not_dreams.append(scenario[2:])\n    \n    # Build a list of events that have not happened\n    scenarios_list_not_happened_not_dreams_not_dreams = []\n    for scenario in scenarios_list:\n        scenarios_list_not_happened_not_dreams_not_dreams.append(scenario[3:])\n    \n    # Build a list of events that have not happened\n    scenarios_list_not_happened_not_dreams_not_dreams_not_dreams = []\n    for scenario in scenarios_list:\n        scenarios_list_not_happened_not_dreams_not_dreams_not_dreams.append(scenario[4:])\n    \n    # Build a list of events that have not happened\n    scenarios_list_not_happened_not_dreams_not_dreams_not_dreams_not_dreams = []\n    for scenario in scenarios_list:\n        scenarios_list_not_happened_not_dreams_not_dreams_not_dreams_not_dreams.append(scenario[5:])\n    \n    # Build a list of events that have not happened\n    scenarios_list_not_happened_not_dreams_not_dreams_not_dreams_not_dreams_not_dreams = []\n    for scenario in scenarios_list:\n        scenarios_list_not_happened_not_dreams_not_dreams_not_dreams_not_dreams.append(scenario[6:])\n    \n    # Build a list of events that have not happened\n    scenarios_list_not_happened_not_dreams_not_dreams_not_dreams_not_dreams_not_dreams_not_dreams = []\n    for scenario in scenarios_list:\n        scenarios_list_not_happened_not_dreams_not_dreams_not_dreams_not_dreams_not_dreams.append(scenario[7:])\n    \n    # Build a list of events that have not happened\n    scenarios_list_not_happened_not_dreams_not_dreams_not_dreams_not_dreams_"
    },
    {
        "number": 3571,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines, height, first, last, lines_height = [int(x) for x in stdin.split()]\n    lines_height = min(lines_height, height - 3)\n    lines_height = max(lines_height, 0)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 2)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)\n    lines_height = max(lines_height, 1)\n    lines_height = min(lines_height, height - 1)"
    },
    {
        "number": 3572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(x) for x in stdin.split()]\n    d = [list(map(int, stdin.split())) for _ in range(n)]\n    return \"possible\" if solve(d, l) else \"impossible\"\n\ndef"
    },
    {
        "number": 3573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, C = [int(x) for x in stdin.split()]\n    numbers = [int(x) for x in stdin.split()]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)\n    numbers = numbers.split(\"0\")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers = \"\".join(numbers)"
    },
    {
        "number": 3574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    q = int(stdin.readline().strip())\n    queries = [stdin.readline().strip().split() for _ in range(q)]\n    return '\\n'.join(str(solution(arr, int(l), int(r))) for l, r in queries)"
    },
    {
        "number": 3575,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"never meet\"\n    if m == 0:\n        return \"never meet\"\n    if m == n * (n - 1) / 2:\n        return \"never meet\"\n    if m == 1:\n        return \"never meet\"\n    if m == n - 1:\n        return \"never meet\"\n    if m == n - 2:\n        return \"never meet\"\n    if m == n - 3:\n        return \"never meet\"\n    if m == n - 4:\n        return \"never meet\"\n    if m == n - 5:\n        return \"never meet\"\n    if m == n - 6:\n        return \"never meet\"\n    if m == n - 7:\n        return \"never meet\"\n    if m == n - 8:\n        return \"never meet\"\n    if m == n - 9:\n        return \"never meet\"\n    if m == n - 10:\n        return \"never meet\"\n    if m == n - 11:\n        return \"never meet\"\n    if m == n - 12:\n        return \"never meet\"\n    if m == n - 13:\n        return \"never meet\"\n    if m == n - 14:\n        return \"never meet\"\n    if m == n - 15:\n        return \"never meet\"\n    if m == n - 16:\n        return \"never meet\"\n    if m == n - 17:\n        return \"never meet\"\n    if m == n - 18:\n        return \"never meet\"\n    if m == n - 19:\n        return \"never meet\"\n    if m == n - 20:\n        return \"never meet\"\n    if m == n - 21:\n        return \"never meet\"\n    if m == n - 22:\n        return \"never meet\"\n    if m == n - 23:\n        return \"never meet\"\n    if m == n - 24:\n        return \"never meet\"\n    if m == n - 25:\n        return \"never meet\"\n    if m == n - 26:\n        return \"never meet\"\n    if m == n - 27:\n        return \"never meet\"\n    if m == n - 28:\n        return \"never meet\"\n    if m == n - 29:\n        return \"never meet\"\n    if m == n - 30:\n        return \"never meet\"\n    if m == n - 31:\n        return \"never meet\"\n    if m == n - 32:\n        return \"never meet\"\n    if m == n - 33:\n        return \"never meet\"\n    if m == n - 34:\n        return \"never meet\"\n    if m == n - 35:\n        return \"never meet\"\n    if m == n - 36:\n        return \"never meet\"\n    if m == n - 37:\n        return \"never meet\"\n    if m == n - 38:\n        return \"never meet\"\n    if m == n - 39:\n        return \"never meet\"\n    if m == n - 40:\n        return \"never meet\"\n    if m == n - 41:\n        return \"never meet\"\n    if m == n - 42:\n        return \"never meet\"\n    if m == n - 43:\n        return \"never meet\"\n    if m == n - 44:\n        return \"never meet\"\n    if m == n - 45:\n        return \"never meet\"\n    if m == n - 46:\n        return \"never meet\"\n    if m == n - 47:\n        return \"never meet\"\n    if m == n - 48:\n        return \"never meet\"\n    if m == n - 49:\n        return \"never meet\"\n    if m == n - 50:\n        return \"never meet\"\n    if m == n - 51:\n        return \"never meet\"\n    if m == n - 52:\n        return \"never meet\"\n    if m == n - 53:\n        return \"never meet\"\n    if m == n - 54:\n        return \"never meet\"\n    if m == n - 55:\n        return \"never meet\"\n    if m == n - 56:\n        return \"never meet\"\n    if m == n - 57:\n        return \"never meet\"\n    if m == n - 58:\n        return \"never meet\"\n    if m == n - 59:\n        return \"never meet\"\n    if m == n - 60:\n        return \"never meet\"\n    if m == n - 61:\n        return \"never meet\"\n    if m == n - 62:\n        return \"never meet\"\n    if m == n - 63:\n        return \"never meet\"\n    if m == n - 64:\n        return \"never meet\"\n    if m == n - 65:\n        return \"never meet\"\n    if m == n - 66:\n        return \"never meet\"\n    if m == n - 67:\n        return \"never meet\"\n    if m == n - 68:\n        return \"never meet\"\n    if m == n - 69:\n        return \"never meet\"\n    if m == n - 70:\n        return \"never meet\"\n    if m == n - 71:\n        return \"never meet\"\n    if m == n - 72:\n        return \"never meet\"\n    if m == n - 73:\n        return \"never meet\"\n    if m == n - 74:\n        return \"never meet\"\n    if m == n - 75:\n        return \"never meet\"\n    if m == n - 76:\n        return \"never meet\"\n    if m == n - 77:\n        return \"never meet\"\n    if m == n - 78:\n        return \"never meet\"\n    if m == n - 79:\n        return \"never meet\"\n    if m == n - 80:\n        return \"never meet\"\n    if m == n - 81:\n        return \"never meet\"\n    if m == n - 82:\n        return \"never meet\"\n    if m == n - 83:\n        return \"never meet\"\n    if m == n - 84:\n        return \"never meet\"\n    if m == n - 85:\n        return \"never meet\"\n    if m == n - 86:\n        return \"never meet\"\n    "
    },
    {
        "number": 3576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, K = [int(x) for x in stdin.split()]\n    return str(pow(10, 11, 13) * (pow(K, -1, 13) - pow(K, -1, 13) % (10 ** 11 + 3)))\n\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''5 4 2''') == '14500000001')\nassert(solution('''"
    },
    {
        "number": 3577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    plants = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        plants.append((l, r))\n    plants.sort(key=lambda x: x[0])\n    plants.sort(key=lambda x: x[1])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] - x[0])\n    plants.sort(key=lambda x: x[0] - x[1])\n    plants.sort(key=lambda x: x[1] -"
    },
    {
        "number": 3578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(x) for x in stdin.split()]\n    a, b = [int(x) for x in stdin.split()]\n    n = int(stdin.readline())\n    s = [int(x) for x in stdin.readline().split()]\n    s.sort()\n    s = [0] + s + [h * w]\n    densities = [0] * (len(s) - 1)\n    for i in range(1, len(s)):\n        densities[i - 1] = (s[i] - s[i - 1]) / (s[i] - s[i - 1] + 1)\n    densities.sort()\n    return str(densities[len(densities) // 2])"
    },
    {
        "number": 3580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    queries = [stdin.readline().strip().split() for _ in range(int(stdin.readline().strip()))]\n    return '\\n'.join(str(len(longest_prefix(a, int(x[0]), int(x[1])))) for x in queries)\n\ndef"
    },
    {
        "number": 3581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = n * (n + 1) // 2\n    v = [int(stdin.readline()) for _ in range(h)]\n    p = [float(stdin.readline()) for _ in range(h)]\n    p_sum = sum(p)\n    p_sum_inv = 1.0 / p_sum\n    p_inv = [p_sum_inv * p_i for p_i in p]\n    p_inv_cum = [0.0]\n    for p_i in p_inv:\n        p_inv_cum.append(p_inv_cum[-1] + p_i)\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum[i - 1] for i in range(1, len(p_inv_cum))]\n    p_inv_cum = [p_inv_cum[i] - p_inv_cum["
    },
    {
        "number": 3582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    gagglers = [int(x) for x in stdin.readline().strip().split()]\n    gagglers.sort()\n    gagglers.reverse()\n    gagglers_dict = {}\n    for i in range(n):\n        gagglers_dict[i+1] = gagglers[i]\n    gagglers_dict[0] = 0\n    gagglers_dict[n] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    for i in range(1, n):\n        gagglers_dict[gagglers[i]] = i\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers[0]] = 0\n    gagglers_dict[gagglers[n-1]] = 0\n    gagglers_dict[gagglers"
    },
    {
        "number": 3583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    points.sort(key=lambda p: p[0] + p[1])\n    points.sort(key=lambda p: p[1])\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0], reverse=True)\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1], reverse=True)\n    points."
    },
    {
        "number": 3584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(x) for x in stdin.split()]\n    onions = [tuple(int(x) for x in stdin.split()) for _ in range(N)]\n    posts = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n    posts.sort(key=lambda x: x[1])\n    posts.sort(key=lambda x: x[0])\n    posts.sort(key=lambda x: x[1])\n    posts.sort(key=lambda x: x[0])\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    print(posts)\n    print(onions)\n    print(N, M, K)\n    "
    },
    {
        "number": 3585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    if m == 0:\n        return 0\n    if m == 1:\n        return k\n    if m == 2:\n        return (k * (k - 1)) // 2\n    if m == 3:\n        return (k * (k - 1) * (k - 2)) // 6\n    if m == 4:\n        return (k * (k - 1) * (k - 2) * (k - 3)) // 24\n    if m == 5:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4)) // 120\n    if m == 6:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5)) // 720\n    if m == 7:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6)) // 5040\n    if m == 8:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7)) // 40320\n    if m == 9:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8)) // 362880\n    if m == 10:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9)) // 3628800\n    if m == 11:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10)) // 39916800\n    if m == 12:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11)) // 479001600\n    if m == 13:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12)) // 479001600\n    if m == 14:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13)) // 479001600\n    if m == 15:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14)) // 479001600\n    if m == 16:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14) * (k - 15)) // 479001600\n    if m == 17:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14) * (k - 15) * (k - 16)) // 479001600\n    if m == 18:\n        return (k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14) * (k - 15) * (k - 16) * (k - 17)) // 479001600\n    if m == 19:\n        return (k *"
    },
    {
        "number": 3586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = set(int(stdin.readline()) for _ in range(N))\n    for a in S:\n        for b in S:\n            for c in S:\n                if a + b + c == 0:\n                    return str(a * b * c)\n    return \"\""
    },
    {
        "number": 3587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    taboo = [stdin.readline().strip() for _ in range(n)]\n    max_len = 0\n    for i in range(2**n):\n        s = bin(i)[2:].zfill(n)\n        if not any(s in t for t in taboo):\n            max_len = max(max_len, len(s))\n    return -1 if max_len == 0 else bin(2**n - 1 - max_len)[2:].zfill(max_len)"
    },
    {
        "number": 3588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return''.join(str(digit_product(i, l, r)) for i in range(10))\n\ndef"
    },
    {
        "number": 3590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    polygon_a = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    polygon_b = [tuple(map(int, line.split())) for line in stdin.splitlines()[1+len(polygon_a):]]\n    return str(cut_polygon(polygon_a, polygon_b))\n\ndef"
    },
    {
        "number": 3591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = [int(x) for x in stdin.readline().strip().split()]\n    k = int(stdin.readline().strip())\n    return '\\n'.join(map(str, find_photos(heights, k)))\n\ndef"
    },
    {
        "number": 3592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 3593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    board = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return str(solve(board, k))\n\ndef"
    },
    {
        "number": 3594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    scores = [0, 0, 0]\n    for _ in range(n):\n        name, num = stdin.readline().strip().split()\n        num = int(num)\n        if name == 'O':\n            scores[0] += num\n        elif name == 'E':\n            scores[1] += num\n        else:\n            scores[2] += num\n    scores.sort()\n    return''.join(map(str, scores))"
    },
    {
        "number": 3595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, l = [int(x) for x in stdin.split()]\n    rooms = [list(map(int, stdin.split())) for _ in range(r)]\n    return str(solve(rooms, l))\n\ndef"
    },
    {
        "number": 3596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(float, stdin.split())\n    t1, t2, t3, t4 = map(int, stdin.split())\n    n, k, r, s, l = map(int, stdin.split())\n    p = [a, b, c]\n    for i in range(3):\n        p[i] = p[i] * 10 ** (6 - len(str(p[i])))\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0], p[1], p[2]]\n    p = [p[0"
    },
    {
        "number": 3597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, l = [int(x) for x in stdin.split()]\n    if w > l:\n        w, l = l, w\n    if w < l:\n        return \"impossible\"\n    h = int(stdin.split()[-1])\n    if h > (1/2) * l:\n        return \"impossible\"\n    x1, y1, x2, y2, x3, y3, h = [int(x) for x in stdin.split()]\n    if x1 > x2:\n        x1, x2 = x2, x1\n    if x1 > x3:\n        x1, x3 = x3, x1\n    if x2 > x3:\n        x2, x3 = x3, x2\n    if y1 > y2:\n        y1, y2 = y2, y1\n    if y1 > y3:\n        y1, y3 = y3, y1\n    if y2 > y3:\n        y2, y3 = y3, y2\n    if h > (1/2) * l:\n        return \"impossible\"\n    if (x1 - x2) ** 2 + (y1 - y2) ** 2 > (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x3) ** 2 + (y1 - y3) ** 2 > (h/2) ** 2:\n        return \"impossible\"\n    if (x2 - x3) ** 2 + (y2 - y3) ** 2 > (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x2) ** 2 + (y1 - y2) ** 2 < (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x3) ** 2 + (y1 - y3) ** 2 < (h/2) ** 2:\n        return \"impossible\"\n    if (x2 - x3) ** 2 + (y2 - y3) ** 2 < (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x2) ** 2 + (y1 - y2) ** 2 == (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x3) ** 2 + (y1 - y3) ** 2 == (h/2) ** 2:\n        return \"impossible\"\n    if (x2 - x3) ** 2 + (y2 - y3) ** 2 == (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x2) ** 2 + (y1 - y2) ** 2 < (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x3) ** 2 + (y1 - y3) ** 2 < (h/2) ** 2:\n        return \"impossible\"\n    if (x2 - x3) ** 2 + (y2 - y3) ** 2 < (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x2) ** 2 + (y1 - y2) ** 2 == (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x3) ** 2 + (y1 - y3) ** 2 == (h/2) ** 2:\n        return \"impossible\"\n    if (x2 - x3) ** 2 + (y2 - y3) ** 2 == (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x2) ** 2 + (y1 - y2) ** 2 < (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x3) ** 2 + (y1 - y3) ** 2 < (h/2) ** 2:\n        return \"impossible\"\n    if (x2 - x3) ** 2 + (y2 - y3) ** 2 < (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x2) ** 2 + (y1 - y2) ** 2 == (h/2) ** 2:\n        return \"impossible\"\n    if (x1 - x3) ** 2 + (y1 - y3)"
    },
    {
        "number": 3598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = [int(stdin.readline()) for _ in range(n)]\n    prices.sort()\n    result = ''\n    for price in prices:\n        result += str(price)\n    return result\n\nassert(solution('''2\n110\n6''') == '0116')\nassert(solution('''3\n110\n6\n9\n''') == '0116')\nassert(solution('''4\n110\n6\n9\n10\n''') == '0116')\nassert(solution('''5\n110\n6\n9\n10\n11\n''') == '0116')\nassert(solution('''6\n110\n6\n9\n10\n11\n12\n''') == '0116')\nassert(solution('''7\n110\n6\n9\n10\n11\n12\n13\n''') == '0116')\nassert(solution('''8\n110\n6\n9\n10\n11\n12\n13\n14\n''') == '0116')\nassert(solution('''9\n110\n6\n9\n10\n11\n12\n13\n14\n15\n''') == '0116')\nassert(solution('''10\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n''') == '0116')\nassert(solution('''11\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n''') == '0116')\nassert(solution('''12\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n''') == '0116')\nassert(solution('''13\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n''') == '0116')\nassert(solution('''14\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n''') == '0116')\nassert(solution('''15\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n''') == '0116')\nassert(solution('''16\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n''') == '0116')\nassert(solution('''17\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n''') == '0116')\nassert(solution('''18\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n''') == '0116')\nassert(solution('''19\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n''') == '0116')\nassert(solution('''20\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n''') == '0116')\nassert(solution('''21\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n''') == '0116')\nassert(solution('''22\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n''') == '0116')\nassert(solution('''23\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n''') == '0116')\nassert(solution('''24\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n''') == '0116')\nassert(solution('''25\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n''') == '0116')\nassert(solution('''26\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n''') == '0116')\nassert(solution('''27\n110\n6\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107"
    },
    {
        "number": 3599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, N = [int(x) for x in stdin.split()]\n    breaks = [int(x) for x in stdin.split()]\n    breaks.sort()\n    breaks.reverse()\n    breaks.append(T)\n    breaks.insert(0, 0)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0, T)\n    breaks.insert(0"
    },
    {
        "number": 3600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    intersections = [int(x) for x in stdin.readline().strip().split()]\n    intersections = [x - 1 for x in intersections]\n    intersections = [x for x in intersections if x >= 0]\n    intersections = [x for x in intersections if x < n]\n    intersections = [x for x in intersections if intersections.count(x) == 1]\n    intersections = [x for x in intersections if intersections.count(x) == 1]\n    if len(intersections) < k:\n        return \"impossible\"\n    return \"possible\""
    },
    {
        "number": 3601,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, k = [int(x) for x in stdin.split()]\n    grid = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(k):\n        i, j = [int(x) for x in stdin.split()]\n        grid[i - 1][j - 1] = 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for x in range(max(0, i - r), min(n, i + r + 1)):\n                    for y in range(max(0, j - r), min(n, j + r + 1)):\n                        if grid[x][y] == 1:\n                            grid[x][y] = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                return 0\n    return 1"
    },
    {
        "number": 3603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    translators = [int(x) for x in stdin.split()]\n    translators.sort()\n    translators = [translators[i] for i in range(0, len(translators), 2)]\n    translators = [translators[i] for i in range(1, len(translators), 2)]\n    translators = list(zip(translators[0::2], translators[1::2]))\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) % 2!= 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators) == 0:\n        return \"impossible\"\n    translators = [x for x in translators if x[0]!= x[1]]\n    if len(translators"
    },
    {
        "number": 3604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    sensors = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    sensors.sort(key=lambda x: x[0])\n    sensors.sort(key=lambda x: x[1])\n    sensors = [str(x) for x in sensors]\n    return '\\n'.join(sensors)"
    },
    {
        "number": 3605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    trees = [int(x) for x in stdin.split()]\n    trees.sort()\n    min_diff = float(\"inf\")\n    for i in range(k - 1):\n        min_diff = min(min_diff, trees[i + 1] - trees[i])\n    return str(min_diff)"
    },
    {
        "number": 3606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    plants = [tuple(int(x) for x in stdin.split()) for _ in range(N)]\n    directions = [stdin[i] for i in range(K, K + N)]\n    return''.join(str(x) for x in solve(plants, directions))\n\ndef"
    },
    {
        "number": 3607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 3608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    tasks = [int(x) for x in stdin.readline().strip().split()]\n    difficulties = [int(x) for x in stdin.readline().strip().split()]\n    difficulties.sort()\n    difficulties.append(n)\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    for i in range(1, n + 1):\n        for j in range(len(difficulties)):\n            if i - difficulties[j] >= 0:\n                ways[i] += ways[i - difficulties[j]]\n    return str(ways[n])"
    },
    {
        "number": 3609,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    if n == 1:\n        return \"impossible\"\n    if n == 2:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 3:\n        return \"impossible\"\n    if n == 4:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 5:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 6:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 7:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 8:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 9:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 10:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 11:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 12:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 13:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 14:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 15:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 16:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 17:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 18:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 19:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 20:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 21:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 22:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 23:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 24:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 25:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 26:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 27:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 28:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 29:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 30:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 31:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 32:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 33:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 34:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 35:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 36:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 37:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 38:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 39:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 40:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 41:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 42:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 43:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 44:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 45:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 46:\n        return \"\".join([\"L\" if u == v else \"R\" for u, v in edges])\n    if n == 47:\n        return \"\".join([\"L\" "
    },
    {
        "number": 3610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        u, v, w = [int(x) for x in stdin.split()]\n        graph[u].append((v, w))\n    s, t = [int(x) for x in stdin.split()]\n    return''.join(str(x) for x in bfs(graph, s, t))\n\ndef"
    },
    {
        "number": 3612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3613,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prefs = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    prefs.sort(key=lambda x: x[1], reverse=True)\n    teachers = set(x[0] for x in prefs)\n    for t in teachers:\n        if t not in [x[0] for x in prefs]:\n            return t\n    return -1\n\nassert(solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == 4)\nassert(solution('''\n3\n0 1 2\n1 2 3\n2 1\n''') == -1)\nassert(solution('''\n4\n0 1 2 3\n1 2 3 4\n2 3 4 5\n3 4 5 6\n''') == -1)\nassert(solution('''\n5\n0 1 2 3 4\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8\n''') == -1)\nassert(solution('''\n6\n0 1 2 3 4 5 6\n0 1 2 3 4 5 6\n1 2 3 4 5 6 7\n2 3 4 5 6 7 8\n1 1 2 3 4 5 6\n2 1 2 3 4 5 6\n''') == -1)\nassert(solution('''\n7\n0 1 2 3 4 5 6 7\n0 1 2 3 4 5 6 7\n1 2 3 4 5 6 7 8\n2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7\n2 1 2 3 4 5 6 7\n3 1 2 3 4 5 6 7\n4 1 2 3 4 5 6 7\n''') == -1)\nassert(solution('''\n8\n0 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8 9\n2 3 4 5 6 7 8 9 10\n1 1 2 3 4 5 6 7 8\n2 1 2 3 4 5 6 7 8\n3 1 2 3 4 5 6 7 8\n4 1 2 3 4 5 6 7 8\n5 1 2 3 4 5 6 7 8\n''') == -1)\nassert(solution('''\n9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n2 3 4 5 6 7 8 9 10 11\n1 1 2 3 4 5 6 7 8 9\n2 1 2 3 4 5 6 7 8 9\n3 1 2 3 4 5 6 7 8 9\n4 1 2 3 4 5 6 7 8 9\n5 1 2 3 4 5 6 7 8 9\n6 1 2 3 4 5 6 7 8 9\n7 1 2 3 4 5 6 7 8 9\n8 1 2 3 4 5 6 7 8 9\n''') == -1)\nassert(solution('''\n10\n0 1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10 11\n2 3 4 5 6 7 8 9 10 11 12\n1 1 2 3 4 5 6 7 8 9 10\n2 1 2 3 4 5 6 7 8 9 10\n3 1 2 3 4 5 6 7 8 9 10\n4 1 2 3 4 5 6 7 8 9 10\n5 1 2 3 4 5 6 7 8 9 10\n6 1 2 3 4 5 6 7 8 9 10\n7 1 2 3 4 5 6 7 8 9 10\n8 1 2 3 4 5 6 7 8 9 10\n9 1 2 3 4 5 6 7 8 9 10\n''') == -1)\nassert(solution('''\n11\n0 1 2 3 4 5 6 7 8 9 10 11\n0 1 2 3 4 5 6 7 8 9 10 11\n1 2 3 4 5 6 7 8 9 10 11 12\n2 3 4 5 6 7 8 9 10 11 12 13\n1 1 2 3 4 5 6 7 8 9 10 11\n2 1 2 3 4 5 6 7 8 9 10 11\n3 1 2 3 4 5 6 7 8 9 10 11\n4 1 2 3 4 5 6 7 8 9 10 11\n5 1 2 3 4 5 6 7 8 9 10 11\n6 1 2 3 4 5 6 7 8 9 10 11\n7 1 2 3 4 5 6 7 8 9 10 11\n8 1 2 3 4 5 6 7 8 9 10 11\n9 1 2 3 4 5 6 7 8 9 10 11\n10 1 2 3 4 5 6 7 8 9 10 11\n''') == -1)\nassert(solution('''\n12\n0 1 2 3 4 5 6 7 8 9 10 11 12\n0 1 2 3 4 5 6 7 8 9 10 11 12\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2 3 4 5 6 7 8 9 10 11 12 13 14\n1 1 2 3 4 5 6 7 8 9 10 11 12\n2 1 2 3 4 5 6 7 8 9 10 11 12\n3 1 2 3 4 5 6 7 8 9 10 11 12\n4 1 2 3 4 5 6 7 8 9 10 11 12\n5 1 2 3 4 5 6 7 8 9 10 11 12\n6 1 2 3 4 5 6 7 8 9 10 11 12\n7 1 2 3 4 5 6 7 8 9 10 11 12\n8 1 2 3 4 5 6 7 8 9 10 11 12\n9 1 2 3 4 5 6 7 8 9 10 11 12\n10 1 2 3 4 5 6 7 8 9 10 11 12\n11 1 2 3 4 5 6 7 8 9 10 11 12\n''') == -1)\nassert(solution('''\n13\n0 1 2 3 4 5 6 7 8 9 10 11 12 13\n0 1 2 3 4 5 6 7 8 9 10 11 12 13\n1 2 3 4 5 6 7 8 9 10 11 12 13 14\n2 3 4 5 6 7 8 9 10 11 12 13 14 15\n1 1 2 3 4 5 6 7 8 9 10 11 12 13\n2 1 2 3 4 5 6 7 8 9 10 11 12 13\n3 1 2 3 4 5 6 7 8 9 10 11 12 13\n4 1 2 3 4 5 6 7 8 9 10 11 12 13\n5 1 2 3 4 5 6 7 8 9 10 11 12 13\n6 1 2 3 4 5 6 7 8 9 10 11 12 13\n7 1 2 3 4 5 6"
    },
    {
        "number": 3614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    towers = [tuple(map(float, line.split())) for line in stdin.splitlines()]\n    towers.sort(key=lambda t: t[1])\n    towers.sort(key=lambda t: t[0])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort(key=lambda t: t[0])\n    towers.sort(key=lambda t: t[1])\n    towers.append((float('inf'), float('inf')))\n    towers.sort"
    },
    {
        "number": 3616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    allergens = [int(stdin.readline().strip()) for _ in range(k)]\n    return str(solve(allergens))\n\ndef"
    },
    {
        "number": 3617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    A, B, C, t0 = map(int, stdin.split())\n    t = [t0]\n    for i in range(N - 1):\n        t.append(((A * t[i] + B) % C) + 1)\n    return str(max(t)) + \" \" + str(sum(t))"
    },
    {
        "number": 3618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solution_helper(n))\n\ndef"
    },
    {
        "number": 3619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k, P = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        u, v = [int(x) for x in stdin.split()]\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    return str(solution_helper(graph, k, P))\n\ndef"
    },
    {
        "number": 3621,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = [int(x) for x in stdin.readline().strip().split()]\n    graph = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            graph[i][j] = graph[j][i] = colors[i] == colors[j]\n    return str(sum(f(graph, set(range(n))) for f in (f1, f2, f3)))\n\ndef"
    },
    {
        "number": 3622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(float, stdin.split())\n    return str(a * b * c * d / (4 * math.pi))"
    },
    {
        "number": 3624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    trails = [list(map(int, stdin.split())) for _ in range(m)]\n    cabins = [0] * n\n    for u, v, d in trails:\n        cabins[u] += d\n        cabins[v] -= d\n    for i in range(1, n):\n        cabins[i] += cabins[i - 1]\n    return str(cabins[-1])"
    },
    {
        "number": 3625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    trees = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    trees.sort(key=lambda x: x[1])\n    trees.sort(key=lambda x: x[2])\n    trees.sort(key=lambda x: x[3])\n    trees.sort(key=lambda x: x[0])\n    trees.sort(key=lambda x: x[1] * x[2] * x[3])\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3])\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1] * x[2] * x[3], reverse=True)\n    trees.sort(key=lambda x: x[0] * x[1]"
    },
    {
        "number": 3626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rectangles = []\n    for _ in range(n):\n        x1, y1, x2, y2 = [int(x) for x in stdin.readline().split()]\n        rectangles.append((x1, y1, x2, y2))\n    return \"1\" if any(\n        (x1 <= x2 and y1 <= y2) or (x1 >= x2 and y1 >= y2)\n        for x1, y1, x2, y2 in rectangles\n    ) else \"0\"\n\n\ndef"
    },
    {
        "number": 3627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    cliff = [list(map(int, stdin.split())) for _ in range(R)]\n    start = [list(map(int, stdin.split())) for _ in range(C)]\n    energy = 0\n    for r in range(R):\n        for c in range(C):\n            if cliff[r][c] == -2:\n                energy += 1\n            elif cliff[r][c] == -1:\n                energy -= 1\n    for r in range(C):\n        for c in range(R):\n            if start[r][c] == -2:\n                energy += 1\n            elif start[r][c] == -1:\n                energy -= 1\n    return str(energy)"
    },
    {
        "number": 3628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % n == a[i] and (i + j) % n == a[j]:\n                print(i, j)\n                return\n    print(\"impossible\")"
    },
    {
        "number": 3629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trees = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    b, d = map(int, stdin.readline().strip().split())\n    return str(solve(trees, b, d))\n\ndef"
    },
    {
        "number": 3630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2 = stdin.split()\n    moves = 0\n    for i in range(len(s1)):\n        if s1[i] == 'z':\n            moves += 1\n        if s2[i] == 'a':\n            moves += 1\n    return str(moves)"
    },
    {
        "number": 3631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    beacons = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    mountains = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    return str(solution_helper(beacons, mountains))\n\ndef"
    },
    {
        "number": 3632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.rstrip()\n    for i in range(1, n):\n        for j in range(1, n - i + 1):\n            s += stdin.rstrip()\n    return s"
    },
    {
        "number": 3633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if k < n:\n        return \"impossible\"\n    if k % n == 0:\n        return \" \".join([str(i + 1) for i in range(n)])\n    avg = k / n\n    for i in range(n):\n        if a[i] >= avg:\n            return \" \".join([str(i + 1) for i in range(n)])\n    return \"impossible\""
    },
    {
        "number": 3634,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    snow_log = [int(stdin.readline().strip()) for _ in range(n)]\n    snow_log.sort()\n    snow_log.append(10**18)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0)\n    snow_log.insert(0, 0"
    },
    {
        "number": 3635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    bananas = [int(x) for x in stdin.readline().strip().split()]\n    bananas.sort()\n    bananas.reverse()\n    max_reward = 0\n    for i in range(N):\n        if i == 0:\n            max_reward += bananas[i]\n        else:\n            max_reward += bananas[i] * (i + 1)\n    return str(max_reward)"
    },
    {
        "number": 3636,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(x) for x in stdin.split()]\n    return str(solution_helper(n, m, p))\n\ndef"
    },
    {
        "number": 3637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    predictions = [stdin.split()[i] for i in range(s)]\n    predictions.sort(key=lambda x: -x.count('P'))\n    return ''.join(predictions)"
    },
    {
        "number": 3639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    c, d = map(float, stdin.readline().strip().split())\n    rain = [int(x) for x in stdin.readline().strip().split()]\n    sweat = [0] * T\n    for i in range(T):\n        sweat[i] = c * pow(i, 2)\n    for i in range(T):\n        sweat[i] += rain[i]\n    return str(min(sweat))"
    },
    {
        "number": 3640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 3641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    weights = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k == 2:\n        if weights[0] == weights[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 3:\n        if weights[0] == weights[1] and weights[1] == weights[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 4:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 5:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 6:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 7:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 8:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6] and weights[6] == weights[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 9:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6] and weights[6] == weights[7] and weights[7] == weights[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 10:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6] and weights[6] == weights[7] and weights[7] == weights[8] and weights[8] == weights[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 11:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6] and weights[6] == weights[7] and weights[7] == weights[8] and weights[8] == weights[9] and weights[9] == weights[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 12:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6] and weights[6] == weights[7] and weights[7] == weights[8] and weights[8] == weights[9] and weights[9] == weights[10] and weights[10] == weights[11]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 13:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6] and weights[6] == weights[7] and weights[7] == weights[8] and weights[8] == weights[9] and weights[9] == weights[10] and weights[10] == weights[11] and weights[11] == weights[12]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 14:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6] and weights[6] == weights[7] and weights[7] == weights[8] and weights[8] == weights[9] and weights[9] == weights[10] and weights[10] == weights[11] and weights[11] == weights[12] and weights[12] == weights[13]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 15:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6] and weights[6] == weights[7] and weights[7] == weights[8] and weights[8] == weights[9] and weights[9] == weights[10] and weights[10] == weights[11] and weights[11] == weights[12] and weights[12] == weights[13] and weights[13] == weights[14]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 16:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6] and weights[6] == weights[7] and weights[7] == weights[8] and weights[8] == weights[9] and weights[9] == weights[10] and weights[10] == weights[11] and weights[11] == weights[12] and weights[12] == weights[13] and weights[13] == weights[14] and weights[14] == weights[15]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 17:\n        if weights[0] == weights[1] and weights[1] == weights[2] and weights[2] == weights[3] and weights[3] == weights[4] and weights[4] == weights[5] and weights[5] == weights[6] and weights[6] == weights[7] and weights[7] == weights[8] and weights[8] == weights[9] and weights[9] == weights[10] and weights[10] == weights[11] and weights[11] == weights[12] and weights[12] == weights[13] and weights[13] == weights[14] and weights[14] =="
    },
    {
        "number": 3642,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    tree = {}\n    for _ in range(n - 1):\n        a, b = [int(x) for x in stdin.readline().strip().split()]\n        tree[a] = tree.get(a, []) + [b]\n        tree[b] = tree.get(b, []) + [a]\n    \n    min_magic = float('inf')\n    min_path = None\n    for path in permutations(tree.keys()):\n        magic = 1\n        for i in range(len(path) - 1):\n            magic *= tree[path[i]][path[i + 1]]\n        magic /= len(path) - 1\n        if magic < min_magic:\n            min_magic = magic\n            min_path = path\n    \n    return '{}/{}'.format(min_magic, len(min_path))"
    },
    {
        "number": 3643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = [float(stdin.readline().strip()) for _ in range(n)]\n    l.sort()\n    r = [float(stdin.readline().strip()) for _ in range(n)]\n    r.sort()\n    r = [x - y for x, y in zip(r, l)]\n    r = [x / n ** 2 for x in r]\n    return '{:.4f}'.format(sum(r))"
    },
    {
        "number": 3644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    f = [int(x) for x in stdin.readline().strip().split()]\n    h = [int(x) for x in stdin.readline().strip().split()]\n    k = 0\n    for i in range(n):\n        if f[i] > h[i]:\n            k += 1\n    return str(k)\n\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '3')\nassert(solution('''4\n0 3\n1 1\n2 1\n2 0''') == '"
    },
    {
        "number": 3645,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().strip().split()]\n    nums.sort()\n    if n == 1:\n        return \"none\"\n    if n == 2:\n        return str(nums[0])\n    if n == 3:\n        return str(nums[0]) + \" \" + str(nums[1])\n    if n == 4:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2])\n    if n == 5:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3])\n    if n == 6:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3]) + \" \" + str(nums[4])\n    if n == 7:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3]) + \" \" + str(nums[4]) + \" \" + str(nums[5])\n    if n == 8:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3]) + \" \" + str(nums[4]) + \" \" + str(nums[5]) + \" \" + str(nums[6])\n    if n == 9:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3]) + \" \" + str(nums[4]) + \" \" + str(nums[5]) + \" \" + str(nums[6]) + \" \" + str(nums[7])\n    if n == 10:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3]) + \" \" + str(nums[4]) + \" \" + str(nums[5]) + \" \" + str(nums[6]) + \" \" + str(nums[7]) + \" \" + str(nums[8])\n    if n == 11:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3]) + \" \" + str(nums[4]) + \" \" + str(nums[5]) + \" \" + str(nums[6]) + \" \" + str(nums[7]) + \" \" + str(nums[8]) + \" \" + str(nums[9])\n    if n == 12:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3]) + \" \" + str(nums[4]) + \" \" + str(nums[5]) + \" \" + str(nums[6]) + \" \" + str(nums[7]) + \" \" + str(nums[8]) + \" \" + str(nums[9]) + \" \" + str(nums[10])\n    if n == 13:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3]) + \" \" + str(nums[4]) + \" \" + str(nums[5]) + \" \" + str(nums[6]) + \" \" + str(nums[7]) + \" \" + str(nums[8]) + \" \" + str(nums[9]) + \" \" + str(nums[10]) + \" \" + str(nums[11])\n    if n == 14:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3]) + \" \" + str(nums[4]) + \" \" + str(nums[5]) + \" \" + str(nums[6]) + \" \" + str(nums[7]) + \" \" + str(nums[8]) + \" \" + str(nums[9]) + \" \" + str(nums[10]) + \" \" + str(nums[11]) + \" \" + str(nums[12])\n    if n == 15:\n        return str(nums[0]) + \" \" + str(nums[1]) + \" \" + str(nums[2]) + \" \" + str(nums[3]) + \" \" + str(nums[4]) + \" \" + str(nums[5]) + \" \" + str(nums[6]) + \" \" + str(nums[7]) + \" \" + str(nums[8]) + \" \" + str(nums[9]) + \" \" + str(nums[10]) + \" \" + str(nums[11]) + \" \" + str(nums[12]) + \" \" + str(nums[13])"
    },
    {
        "number": 3646,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pebbles = [int(x) for x in stdin.readline().strip().split()]\n    return str(solution_naive(pebbles))\n\ndef"
    },
    {
        "number": 3647,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3648,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(x) for x in stdin.split()]\n    insecure = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        x, y, cost = [int(x) for x in stdin.split()]\n        graph[x].append((y, cost))\n        graph[y].append((x, cost))\n    return cheapest_network(graph, insecure)\n\ndef"
    },
    {
        "number": 3649,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a == 0:\n        return \"0\" * d\n    if b == 0:\n        return \"1\" * d\n    if c == 0:\n        return \"0\" * d\n    if d == 0:\n        return \"1\" * b\n    if a == 1:\n        return \"0\" * (d - b) + \"1\" * b\n    if b == 1:\n        return \"0\" * (d - c) + \"1\" * c\n    if c == 1:\n        return \"0\" * (d - a) + \"1\" * a\n    if d == 1:\n        return \"0\" * (a - b) + \"1\" * b\n    if a == 2:\n        return \"0\" * (d - b) + \"1\" * b + \"0\" * (d - c) + \"1\" * c\n    if b == 2:\n        return \"0\" * (d - c) + \"1\" * c + \"0\" * (d - a) + \"1\" * a\n    if c == 2:\n        return \"0\" * (d - a) + \"1\" * a + \"0\" * (d - b) + \"1\" * b\n    if d == 2:\n        return \"0\" * (a - b) + \"1\" * b + \"0\" * (a - c) + \"1\" * c\n    return \"impossible\""
    },
    {
        "number": 3650,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, B = [int(x) for x in stdin.split()]\n    board = [[0] * M for _ in range(N)]\n    for _ in range(B):\n        r, c = [int(x) for x in stdin.split()]\n        board[r - 1][c - 1] = 1\n    target = [[0] * M for _ in range(N)]\n    for _ in range(B):\n        r, c = [int(x) for x in stdin.split()]\n        target[r - 1][c - 1] = 1\n    return 'possible' if is_possible(board, target) else 'impossible'\n\ndef"
    },
    {
        "number": 3651,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    planets = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    planets.sort(key=lambda p: p[0]**2 + p[1]**2 + p[2]**2)\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets.sort(key=lambda p: p[1])\n    planets.sort(key=lambda p: p[0])\n    planets.sort(key=lambda p: p[2])\n    planets"
    },
    {
        "number": 3652,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    rows = [list(map(int, stdin.readline().strip().split())) for _ in range(3)]\n    rows.sort(key=lambda x: x[0])\n    for row in rows:\n        row.sort()\n    return str(rows[0].index(rows[0][0]) + 1)"
    },
    {
        "number": 3653,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_aux(stdin))\n\ndef"
    },
    {
        "number": 3654,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    return str(solution_helper(k, n))\n\ndef"
    },
    {
        "number": 3655,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    w, h = [int(x) for x in stdin.split()]\n    floor = [list(map(int, stdin.split())) for _ in range(h)]\n    # Find the robot\n    robot = [x for x in range(h) if floor[x][0] == 1][0]\n    # Find the candidates\n    candidates = []\n    for x in range(w):\n        for y in range(h):\n            if floor[y][x] == 1:\n                candidates.append((x, y))\n    # Sort the candidates\n    candidates.sort(key=lambda x: (x[0], x[1]))\n    # Output the results\n    for x, y in candidates:\n        print(x, y)\n    return \"\""
    },
    {
        "number": 3656,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B, T, f = [int(x) for x in stdin.split()]\n    p = [float(x) for x in stdin.split()]\n    p = [x / sum(p) for x in p]\n    s = [int(x) for x in stdin.split()]\n    s = [x / sum(s) for x in s]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for x, y in zip(p, s)]\n    p = [x / sum(p) for x in p]\n    p = [x * y for"
    },
    {
        "number": 3657,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, vh, N = [int(x) for x in stdin.split()]\n    gates = [tuple(int(x) for x in stdin.split()) for _ in range(N)]\n    gates.sort(key=lambda x: x[1])\n    gates.sort(key=lambda x: x[0])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[1] - x[0])\n    gates.sort(key=lambda x: x[0] - x[1])\n    gates.sort(key=lambda x: x[0] - x[1])\n    "
    },
    {
        "number": 3658,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 3659,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    books = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    return str(max(books, key=lambda x: x[0] * x[1])[0] * max(books, key=lambda x: x[1])[1])\n\nassert(solution('''4\n220 29\n195 20\n200 9\n180 30''') == '18000')\nassert(solution('''4\n220 29\n195 20\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180 30\n200 9\n180"
    },
    {
        "number": 3660,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 3661,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S, L = [int(x) for x in stdin.split()]\n    individuals = [int(x) for x in stdin.split()]\n    corporations = [int(x) for x in stdin.split()]\n    individual_to_corporation = {}\n    for i in range(len(individuals)):\n        individual_to_corporation[individuals[i]] = corporations[i]\n    individual_to_corporation_sorted = sorted(individual_to_corporation.items(), key=lambda x: x[1])\n    individual_to_corporation_sorted_reverse = sorted(individual_to_corporation_sorted, key=lambda x: x[0], reverse=True)\n    individual_to_corporation_sorted_reverse_reverse = sorted(individual_to_corporation_sorted_reverse, key=lambda x: x[1], reverse=True)\n    individual_to_corporation_sorted_reverse_reverse_reverse = sorted(individual_to_corporation_sorted_reverse_reverse, key=lambda x: x[0], reverse=True)\n    individual_to_corporation_sorted_reverse_reverse_reverse_reverse = sorted(individual_to_corporation_sorted_reverse_reverse_reverse, key=lambda x: x[1], reverse=True)\n    individual_to_corporation_sorted_reverse_reverse_reverse_reverse_reverse = sorted(individual_to_corporation_sorted_reverse_reverse_reverse_reverse, key=lambda x: x[0], reverse=True)\n    individual_to_corporation_sorted_reverse_reverse_reverse_reverse_reverse_reverse = sorted(individual_to_corporation_sorted_reverse_reverse_reverse_reverse_reverse, key=lambda x: x[1], reverse=True)\n    individual_to_corporation_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = sorted(individual_to_corporation_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse, key=lambda x: x[0], reverse=True)\n    individual_to_corporation_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = sorted(individual_to_corporation_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse, key=lambda x: x[1], reverse=True)\n    individual_to_corporation_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = sorted(individual_to_corporation_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse, key=lambda x: x[0], reverse=True)\n    individual_to_corporation_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse"
    },
    {
        "number": 3662,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l, w = [int(x) for x in stdin.readline().strip().split()]\n    trees = [int(x) for x in stdin.readline().strip().split()]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]\n    trees.sort()\n    trees.reverse()\n    trees = trees[:n]"
    },
    {
        "number": 3663,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    routes = [list(map(int, stdin.readline().strip().split())) for _ in range(n - 1)]\n    nations = [int(stdin.readline().strip()) for _ in range(n)]\n    nations_left = [nations[i] - routes[i][2] for i in range(n)]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][1] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0 and routes[i][3] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0 and routes[i][3] == 0 and routes[i][4] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0 and routes[i][3] == 0 and routes[i][4] == 0 and routes[i][5] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0 and routes[i][3] == 0 and routes[i][4] == 0 and routes[i][5] == 0 and routes[i][6] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0 and routes[i][3] == 0 and routes[i][4] == 0 and routes[i][5] == 0 and routes[i][6] == 0 and routes[i][7] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0 and routes[i][3] == 0 and routes[i][4] == 0 and routes[i][5] == 0 and routes[i][6] == 0 and routes[i][7] == 0 and routes[i][8] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0 and routes[i][3] == 0 and routes[i][4] == 0 and routes[i][5] == 0 and routes[i][6] == 0 and routes[i][7] == 0 and routes[i][8] == 0 and routes[i][9] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0 and routes[i][3] == 0 and routes[i][4] == 0 and routes[i][5] == 0 and routes[i][6] == 0 and routes[i][7] == 0 and routes[i][8] == 0 and routes[i][9] == 0 and routes[i][10] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0 and routes[i][3] == 0 and routes[i][4] == 0 and routes[i][5] == 0 and routes[i][6] == 0 and routes[i][7] == 0 and routes[i][8] == 0 and routes[i][9] == 0 and routes[i][10] == 0 and routes[i][11] == 0]\n    nations_left.sort()\n    nations_left.reverse()\n    nations_left = [nations_left[i] for i in range(n) if routes[i][0] == 0 and routes[i][1] == 0 and routes[i][2] == 0 and routes[i][3] == 0 and routes[i][4] == 0 and routes[i][5] == 0 and routes[i][6] == 0 and routes[i][7] == 0 and routes"
    },
    {
        "number": 3664,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3665,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    nums = [int(x) for x in stdin.split()]\n    for i in range(n):\n        nums[i] = str(nums[i]).zfill(m)\n    nums.sort()\n    for i in range(n):\n        nums[i] = int(nums[i])\n    return ''.join(str(x) for x in nums)"
    },
    {
        "number": 3666,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split(\"/\")]\n    n = nums[0]\n    d = nums[1]\n    nums = nums[2:]\n    nums.sort()\n    nums.reverse()\n    nums = [nums[i]/d for i in range(len(nums))]\n    nums = [int(x) for x in nums]\n    nums = [nums[i] for i in range(len(nums)) if i%2==0]\n    nums = [nums[i] for i in range(len(nums)) if i%2==1]\n    nums = [nums[i] for i in range(len(nums)) if i<6]\n    nums = [nums[i] for i in range(len(nums)) if i>=2]\n    nums = [nums[i] for i in range(len(nums)) if nums[i]<=10000]\n    nums = [nums[i] for i in range(len(nums)) if nums[i]>=1]\n    if len(nums)==0:\n        return \"impossible\"\n    return \" \".join([str(x) for x in nums])\n\nassert(solution(\"19/13\")==\"19 20\")\nassert(solution(\"10/1\")==\"17 15 14 13 7 2\")\nassert(solution(\"19/14\")==\"19 15 14 13 7 2\")\nassert(solution(\"4/3\")==\"2 1\")\nassert(solution(\"20/7\")==\"2 1\")\nassert(solution(\"19/7\")==\"2 1\")\nassert(solution(\"20/13\")==\"2 1\")\nassert(solution(\"19/15\")==\"2 1\")\nassert(solution(\"10/7\")==\"2 1\")\nassert(solution(\"20/17\")==\"2 1\")\nassert(solution(\"19/2\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert(solution(\"19/17\")==\"2 1\")\nassert"
    },
    {
        "number": 3667,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, p = [int(x) for x in stdin.split()]\n    wells = [int(x) for x in stdin.split()]\n    pipes = [int(x) for x in stdin.split()]\n    \n    # create a graph of pipes\n    graph = {}\n    for i in range(p):\n        s, e = pipes[i]\n        if s not in graph:\n            graph[s] = []\n        if e not in graph:\n            graph[e] = []\n        graph[s].append(e)\n        graph[e].append(s)\n    \n    # find all intersections\n    intersections = []\n    for i in range(w):\n        if i in graph:\n            intersections.append(i)\n    \n    # find all paths\n    paths = []\n    for i in intersections:\n        paths.append(find_paths(graph, i))\n    \n    # find all intersections\n    intersections = []\n    for i in range(len(paths)):\n        for j in range(len(paths[i])):\n            for k in range(len(paths[i][j])):\n                if paths[i][j][k] not in intersections:\n                    intersections.append(paths[i][j][k])\n    \n    # find all paths\n    paths = []\n    for i in intersections:\n        paths.append(find_paths(graph, i))\n    \n    # find all intersections\n    intersections = []\n    for i in range(len(paths)):\n        for j in range(len(paths[i])):\n            for k in range(len(paths[i][j])):\n                if paths[i][j][k] not in intersections:\n                    intersections.append(paths[i][j][k])\n    \n    # find all paths\n    paths = []\n    for i in intersections:\n        paths.append(find_paths(graph, i))\n    \n    # find all intersections\n    intersections = []\n    for i in range(len(paths)):\n        for j in range(len(paths[i])):\n            for k in range(len(paths[i][j])):\n                if paths[i][j][k] not in intersections:\n                    intersections.append(paths[i][j][k])\n    \n    # find all paths\n    paths = []\n    for i in intersections:\n        paths.append(find_paths(graph, i))\n    \n    # find all intersections\n    intersections = []\n    for i in range(len(paths)):\n        for j in range(len(paths[i])):\n            for k in range(len(paths[i][j])):\n                if paths[i][j][k] not in intersections:\n                    intersections.append(paths[i][j][k])\n    \n    # find all paths\n    paths = []\n    for i in intersections:\n        paths.append(find_paths(graph, i))\n    \n    # find all intersections\n    intersections = []\n    for i in range(len(paths)):\n        for j in range(len(paths[i])):\n            for k in range(len(paths[i][j])):\n                if paths[i][j][k] not in intersections:\n                    intersections.append(paths[i][j][k])\n    \n    # find all paths\n    paths = []\n    for i in intersections:\n        paths.append(find_paths(graph, i))\n    \n    # find all intersections\n    intersections = []\n    for i in range(len(paths)):\n        for j in range(len(paths[i])):\n            for k in range(len(paths[i][j])):\n                if paths[i][j][k] not in intersections:\n                    intersections.append(paths[i][j][k])\n    \n    # find all paths\n    paths = []\n    for i in intersections:\n        paths.append(find_paths(graph, i))\n    \n    # find all intersections\n    intersections = []\n    for i in range(len(paths)):\n        for j in range(len(paths[i])):\n            for k in range(len(paths[i][j])):\n                if paths[i][j][k] not in intersections:\n                    intersections.append(paths[i][j][k])\n    \n    # find all paths\n    paths = []\n    for i in intersections:\n        paths.append(find_paths(graph, i))\n    \n    # find all intersections\n    intersections = []\n    for i in range(len(paths)):\n        for j in range(len(paths[i])):\n            for k in range(len(paths[i][j])):\n                if paths[i][j][k] not in intersections:\n                    intersections.append(paths[i][j][k])\n    \n    # find all paths\n    paths = []\n    for i in intersections:\n        paths.append(find_paths(graph, i))\n    \n    # find all intersections\n    intersections = []\n    for i in range"
    },
    {
        "number": 3668,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    burgers = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, m, burgers))\n\ndef"
    },
    {
        "number": 3669,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10000:\n        raise ValueError(\"Invalid input\")\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        if x < 1 or x > 500 or y < 1 or y > 500:\n            raise ValueError(\"Invalid input\")\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    if points[0][0] == points[1][0]:\n        return \"Mirko\"\n    return \"Slavko\""
    },
    {
        "number": 3670,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(stdin.readline()) for _ in range(n)]\n    nums.sort()\n    nums.reverse()\n    nums = [str(n) for n in nums]\n    nums = \" \".join(nums)\n    return nums"
    },
    {
        "number": 3671,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    times = [int(x) for x in stdin.readline().strip().split()]\n    times.sort()\n    cookies = 0\n    for i in range(n):\n        if i % 2 == 0:\n            cookies += times[i] * 2\n        else:\n            cookies += times[i] * 3\n    return str(cookies)"
    },
    {
        "number": 3672,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    islands = [list(map(int, stdin.split())) for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if islands[i][j] == 0:\n                continue\n            if j > 0 and islands[i][j] == islands[i][j - 1]:\n                continue\n            if i > 0 and islands[i][j] == islands[i - 1][j]:\n                continue\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 3673,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if n < 2 or n > 10000 or k < 1 or k > 10**9:\n        return \"Impossible\"\n    if len(a)!= n:\n        return \"Impossible\"\n    a.sort()\n    if a[0]!= 1:\n        return \"Impossible\"\n    if a[-1]!= n:\n        return \"Impossible\"\n    if a[-1] - a[0]!= n - 1:\n        return \"Impossible\"\n    if a[-1] - a[0] == n - 1:\n        return \"\".join(str(x) for x in a)\n    return \"Impossible\""
    },
    {
        "number": 3674,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, p, q = [int(x) for x in stdin.split()]\n    if m < n:\n        return \"IMPOSSIBLE\"\n    if m == n:\n        return str(p * q)\n    if m == 1:\n        return str(p * 10 ** (n - 1) + q)\n    if m == 2:\n        return str(p * 10 ** (n - 2) + q)\n    if m == 3:\n        return str(p * 10 ** (n - 3) + q)\n    if m == 4:\n        return str(p * 10 ** (n - 4) + q)\n    if m == 5:\n        return str(p * 10 ** (n - 5) + q)\n    if m == 6:\n        return str(p * 10 ** (n - 6) + q)\n    if m == 7:\n        return str(p * 10 ** (n - 7) + q)\n    if m == 8:\n        return str(p * 10 ** (n - 8) + q)\n    if m == 9:\n        return str(p * 10 ** (n - 9) + q)\n    if m == 10:\n        return str(p * 10 ** (n - 10) + q)\n    if m == 11:\n        return str(p * 10 ** (n - 11) + q)\n    if m == 12:\n        return str(p * 10 ** (n - 12) + q)\n    if m == 13:\n        return str(p * 10 ** (n - 13) + q)\n    if m == 14:\n        return str(p * 10 ** (n - 14) + q)\n    if m == 15:\n        return str(p * 10 ** (n - 15) + q)\n    if m == 16:\n        return str(p * 10 ** (n - 16) + q)\n    if m == 17:\n        return str(p * 10 ** (n - 17) + q)\n    if m == 18:\n        return str(p * 10 ** (n - 18) + q)\n    if m == 19:\n        return str(p * 10 ** (n - 19) + q)\n    if m == 20:\n        return str(p * 10 ** (n - 20) + q)\n    if m == 21:\n        return str(p * 10 ** (n - 21) + q)\n    if m == 22:\n        return str(p * 10 ** (n - 22) + q)\n    if m == 23:\n        return str(p * 10 ** (n - 23) + q)\n    if m == 24:\n        return str(p * 10 ** (n - 24) + q)\n    if m == 25:\n        return str(p * 10 ** (n - 25) + q)\n    if m == 26:\n        return str(p * 10 ** (n - 26) + q)\n    if m == 27:\n        return str(p * 10 ** (n - 27) + q)\n    if m == 28:\n        return str(p * 10 ** (n - 28) + q)\n    if m == 29:\n        return str(p * 10 ** (n - 29) + q)\n    if m == 30:\n        return str(p * 10 ** (n - 30) + q)\n    if m == 31:\n        return str(p * 10 ** (n - 31) + q)\n    if m == 32:\n        return str(p * 10 ** (n - 32) + q)\n    if m == 33:\n        return str(p * 10 ** (n - 33) + q)\n    if m == 34:\n        return str(p * 10 ** (n - 34) + q)\n    if m == 35:\n        return str(p * 10 ** (n - 35) + q)\n    if m == 36:\n        return str(p * 10 ** (n - 36) + q)\n    if m == 37:\n        return str(p * 10 ** (n - 37) + q)\n    if m == 38:\n        return str(p * 10 ** (n - 38) + q)\n    if m == 39:\n        return str(p * 10 ** (n - 39) + q)\n    if m == 40:\n        return str(p * 10 ** (n - 40) + q)\n    if m == 41:\n        return str(p * 10 ** (n - 41) + q)\n    if m == 42:\n        return str(p * 10 ** (n - 42) + q)\n    if m == 43:\n        return str(p * 10 ** (n - 43) + q)\n    if m == 44:\n        return str(p * 10 ** (n - 44) + q)\n    if m == 45:\n        return str(p * 10 ** (n - 45) + q)\n    if m == 46:\n        return str(p * 10 ** (n - 46) + q)\n    if m == 47:\n        return str(p * 10 ** (n - 47) + q)\n    if m == 48:\n        return str(p * 10 ** (n - 48) + q)\n    if m == 49:\n        return str(p * 10 ** (n - 49) + q)\n    if m == 50:\n        return str(p * 10 ** (n - 50) + q)\n    if m == 51:\n        return str(p * 10 ** (n - 51) + q)\n    if m == 52:\n        return str(p * 10 ** (n - 52) + q)\n    if m == 53:\n        return str(p * 10 ** (n - 53) + q)\n    if m == 54:\n        return str(p * 10 ** (n - 54) + q)\n    if m == 55:\n        return str(p * 10 ** (n - 55) + q)\n    if m == 56:\n        return str(p * 10 ** (n - 56) + q)\n    if m == 57:\n        return str(p * 10 ** (n - 57) + q)\n    if m == 58:\n        return str(p * 10 ** (n - 58) + q)\n    if m == 59:\n        return str(p * 10 ** (n - 59) + q)\n    if m == 60:\n        return str(p * 10 ** (n - 60) + q)\n    if m == 61:\n        return str(p * 10 ** (n - 61) + q)\n    if m == 62:\n        return str(p * 10 ** (n - 62) + q)\n    if m == 63:\n        return str(p * 10 ** (n - 63) + q)\n    if m == 64:\n        return str(p * 10 ** (n - 64) + q)\n    if m == 65:\n        return str(p * 10 ** (n - 65) + q)\n    if m == 66:\n        return str(p * 10 ** (n - 66) + q)\n    if m == 67:\n        return str(p * 10 ** (n - 67) + q)\n    if m == 68:\n        return str(p * 10 ** (n - 68) + q)\n    if m == 69:\n        return str(p * 10 ** (n - 69) + q)\n    if m =="
    },
    {
        "number": 3675,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    strings = [stdin.split()[i] for i in range(n)]\n    return str(lcs(strings, k))\n\ndef"
    },
    {
        "number": 3676,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    return str(factorial(2 * R) // (factorial(R) * factorial(R)))\n\nassert(solution('') == '0')\nassert(solution('1 2') == '3')\nassert(solution('2 1') == '6')\nassert(solution('2 2') == '12')\nassert(solution('3 1') == '10')\nassert(solution('3 2') == '30')\nassert(solution('3 3') == '66')\nassert(solution('4 1') == '40')\nassert(solution('4 2') == '120')\nassert(solution('4 3') == '210')\nassert(solution('4 4') == '840')\nassert(solution('5 1') == '50')\nassert(solution('5 2') == '250')\nassert(solution('5 3') == '750')\nassert(solution('5 4') == '1750')\nassert(solution('5 5') == '5050')\nassert(solution('6 1') == '60')\nassert(solution('6 2') == '300')\nassert(solution('6 3') == '900')\nassert(solution('6 4') == '1800')\nassert(solution('6 5') == '6000')\nassert(solution('6 6') == '60000')\nassert(solution('7 1') == '70')\nassert(solution('7 2') == '350')\nassert(solution('7 3') == '1450')\nassert(solution('7 4') == '2800')\nassert(solution('7 5') == '7000')\nassert(solution('7 6') == '70000')\nassert(solution('7 7') == '70700')\nassert(solution('8 1') == '80')\nassert(solution('8 2') == '400')\nassert(solution('8 3') == '1400')\nassert(solution('8 4') == '2800')\nassert(solution('8 5') == '8000')\nassert(solution('8 6') == '80000')\nassert(solution('8 7') == '80700')\nassert(solution('8 8') == '80000')\nassert(solution('9 1') == '90')\nassert(solution('9 2') == '450')\nassert(solution('9 3') == '1500')\nassert(solution('9 4') == '2800')\nassert(solution('9 5') == '9000')\nassert(solution('9 6') == '90000')\nassert(solution('9 7') == '90700')\nassert(solution('9 8') == '90000')\nassert(solution('9 9') == '90999')\nassert(solution('10 1') == '100')\nassert(solution('10 2') == '500')\nassert(solution('10 3') == '1750')\nassert(solution('10 4') == '3500')\nassert(solution('10 5') == '10000')\nassert(solution('10 6') == '100000')\nassert(solution('10 7') == '100700')\nassert(solution('10 8') == '100000')\nassert(solution('10 9') == '100999')\nassert(solution('10 10') == '100999')\nassert(solution('11 1') == '110')\nassert(solution('11 2') == '550')\nassert(solution('11 3') == '1750')\nassert(solution('11 4') == '3500')\nassert(solution('11 5') == '11000')\nassert(solution('11 6') == '110000')\nassert(solution('11 7') == '110700')\nassert(solution('11 8') == '110000')\nassert(solution('11 9') == '11000')\nassert(solution('11 10') == '11000')\nassert(solution('11 11') == '11000')\nassert(solution('12 1') == '120')\nassert(solution('12 2') == '600')\nassert(solution('12 3') == '1800')\nassert(solution('12 4') == '3600')\nassert(solution('12 5') == '12000')\nassert(solution('12 6') == '120000')\nassert(solution('12 7') == '120700')\nassert(solution('12 8') == '120000')\nassert(solution('12 9') == '12000')\nassert(solution('12 10') == '12000')\nassert(solution('12 11') == '12000')\nassert(solution('12 12') == '12000"
    },
    {
        "number": 3677,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    pairs = [set() for _ in range(N)]\n    for _ in range(N):\n        i, *D = [int(x) for x in stdin.split()]\n        for j in range(N):\n            if j!= i and D[j] == 0:\n                pairs[i].add(j)\n                pairs[j].add(i)\n    return max(len(p) for p in pairs if len(p) < K)\n\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == 3)\nassert(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') =="
    },
    {
        "number": 3678,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        points = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n        if is_valid(points):\n            print('YES')\n        else:\n            print('NO')\n\ndef"
    },
    {
        "number": 3679,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 1) / 2)\n\nassert(solution('') == '0.000000000')\nassert(solution('1') == '1.000000000')\nassert(solution('2') == '2.000000000')\nassert(solution('3') == '3.000000000')\nassert(solution('4') == '4.000000000')\nassert(solution('5') == '5.000000000')\nassert(solution('6') == '6.000000000')\nassert(solution('7') == '7.000000000')\nassert(solution('8') == '8.000000000')\nassert(solution('9') == '9.000000000')\nassert(solution('10') == '10.000000000')\nassert(solution('11') == '11.000000000')\nassert(solution('12') == '12.000000000')\nassert(solution('13') == '13.000000000')\nassert(solution('14') == '14.000000000')\nassert(solution('15') == '15.000000000')\nassert(solution('16') == '16.000000000')\nassert(solution('17') == '17.000000000')\nassert(solution('18') == '18.000000000')\nassert(solution('19') == '19.000000000')\nassert(solution('20') == '20.000000000')\nassert(solution('21') == '21.000000000')\nassert(solution('22') == '22.000000000')\nassert(solution('23') == '23.000000000')\nassert(solution('24') == '24.000000000')\nassert(solution('25') == '25.000000000')\nassert(solution('26') == '26.000000000')\nassert(solution('27') == '27.000000000')\nassert(solution('28') == '28.000000000')\nassert(solution('29') == '29.000000000')\nassert(solution('30') == '30.000000000')\nassert(solution('31') == '31.000000000')\nassert(solution('32') == '32.000000000')\nassert(solution('33') == '33.000000000')\nassert(solution('34') == '34.000000000')\nassert(solution('35') == '35.000000000')\nassert(solution('36') == '36.000000000')\nassert(solution('37') == '37.000000000')\nassert(solution('38') == '38.000000000')\nassert(solution('39') == '39.000000000')\nassert(solution('40') == '40.000000000')\nassert(solution('41') == '41.000000000')\nassert(solution('42') == '42.000000000')\nassert(solution('43') == '43.000000000')\nassert(solution('44') == '44.000000000')\nassert(solution('45') == '45.000000000')\nassert(solution('46') == '46.000000000')\nassert(solution('47') == '47.000000000')\nassert(solution('48') == '48.000000000')\nassert(solution('49') == '49.000000000')\nassert(solution('50') == '50.000000000')\nassert(solution('51') == '51.000000000')\nassert(solution('52') == '52.000000000')\nassert(solution('53') == '53.000000000')\nassert(solution('54') == '54.000000000')\nassert(solution('55') == '55.000000000')\nassert(solution('56') == '56.000000000')\nassert(solution('57') == '57.000000000')\nassert(solution('58') == '58.000000000')\nassert(solution('59') == '59.000000000')\nassert(solution('60') == '60.000000000')\nassert(solution('61') == '61.000000000')\nassert(solution('62') == '62.000000000')\nassert(solution('63') == '63.000000000')\nassert(solution('64') == '64.000000000')\nassert(solution('65') == '65.000000000')\nassert(solution('66') == '66.000000000')\nassert(solution('67') == '67.000000000')\nassert(solution('68') == '68.000000000')\nassert(solution('69') == '69.000000000')\nassert(solution('70') == '70.000000000')\nassert(solution('71') == '71.000000000')\nassert(solution('72') == '72.000000000')\nassert(solution('73') == '73.000000000')\nassert(solution('74') == '74.000000000')\nassert(solution('75') == '75.000000000')\nassert(solution('76') == '76.000000000')\nassert(solution('77') == '77.000000000')\nassert(solution('78') == '78.000000000')\nassert(solution('79') == '79.000000000')\nassert(solution('80') == '80.000000000')\nassert(solution('81') == '81.000000000')\nassert(solution('82') == '82.000000000')\nassert(solution('83') == '83.000000000')\nassert(solution('84') == '84.000000000')\nassert(solution('85') == '85.000000000')\nassert(solution('86') == '86.000000000')\nassert(solution('87') == '87.000000000')\nassert(solution('88') == '88.000000000')\nassert(solution('89') == '89.000000000')\nassert(solution('90') == '90.000000000')\nassert(solution('91') == '91.000000000')\nassert(solution('92') == '92.000000000')\nassert(solution('93') == '93.000000000')\nassert(solution('94') == '94.000000000')\nassert(solution('95') == '95.000000000')\nassert(solution('96') == '96.000000000')\nassert(solution('97') == '97.000000000')\nassert(solution('98') == '98.000000000')\nassert(solution('99') == '99.000000000')\nassert(solution('100') == '100.000000000')\nassert(solution('101') == '101.000000000')\nassert(solution('102') == '102.000000000')\nassert(solution('103') == '103.000000000')\nassert(solution('104') == '104.000000000')\nassert(solution('105') == '105.000000000')\nassert(solution('106') == '106.000000000')\nassert(solution('107') == '107.000000000"
    },
    {
        "number": 3680,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, N = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    return str(min(N - 1, max(p)))"
    },
    {
        "number": 3681,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = [int(x) for x in stdin.split()]\n    queries = [stdin.split() for _ in range(Q)]\n    teachers = [i for i in range(1, N + 1)]\n    for _ in range(Q):\n        query = queries.pop(0)\n        if query[0] == '0':\n            k, x, *teachers = query\n            teachers = teachers[-int(k):] + teachers[:-int(k)]\n        else:\n            d, x = query\n            print(teachers[int(d) - 1])\n    return ''"
    },
    {
        "number": 3682,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----"
    },
    {
        "number": 3683,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3684,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.split()]\n    data = [int(x) for x in stdin.split()]\n    data.sort()\n    print(data)\n    print(data[n-1] - data[0])\n    return str(data[n-1] - data[0])"
    },
    {
        "number": 3685,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3686,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    targets = [tuple(map(int, stdin.readline().split())) for _ in range(N)]\n    targets.sort()\n    if targets[0][0] == -1:\n        return \"success\"\n    return \"failure\""
    },
    {
        "number": 3687,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q, s = [int(x) for x in stdin.split()]\n    queues = [int(x) for x in stdin.split()]\n    sensors = [int(x) for x in stdin.split()]\n    sensors.sort()\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] - sensors[i - 1] for i in range(1, len(sensors))]\n    sensors = [0] + sensors\n    sensors = [sensors[i] -"
    },
    {
        "number": 3688,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    items = [int(x) for x in stdin.split()]\n    mall_locations = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    mall_items = [int(x) for x in stdin.split()]\n    mall_items_dict = {i: mall_items[i] for i in range(n)}\n    mall_items_dict[0] = 0\n    mall_items_dict[n - 1] = 0\n    mall_items_dict[n - 2] = 0\n    mall_items_dict[n - 3] = 0\n    mall_items_dict[n - 4] = 0\n    mall_items_dict[n - 5] = 0\n    mall_items_dict[n - 6] = 0\n    mall_items_dict[n - 7] = 0\n    mall_items_dict[n - 8] = 0\n    mall_items_dict[n - 9] = 0\n    mall_items_dict[n - 10] = 0\n    mall_items_dict[n - 11] = 0\n    mall_items_dict[n - 12] = 0\n    mall_items_dict[n - 13] = 0\n    mall_items_dict[n - 14] = 0\n    mall_items_dict[n - 15] = 0\n    mall_items_dict[n - 16] = 0\n    mall_items_dict[n - 17] = 0\n    mall_items_dict[n - 18] = 0\n    mall_items_dict[n - 19] = 0\n    mall_items_dict[n - 20] = 0\n    mall_items_dict[n - 21] = 0\n    mall_items_dict[n - 22] = 0\n    mall_items_dict[n - 23] = 0\n    mall_items_dict[n - 24] = 0\n    mall_items_dict[n - 25] = 0\n    mall_items_dict[n - 26] = 0\n    mall_items_dict[n - 27] = 0\n    mall_items_dict[n - 28] = 0\n    mall_items_dict[n - 29] = 0\n    mall_items_dict[n - 30] = 0\n    mall_items_dict[n - 31] = 0\n    mall_items_dict[n - 32] = 0\n    mall_items_dict[n - 33] = 0\n    mall_items_dict[n - 34] = 0\n    mall_items_dict[n - 35] = 0\n    mall_items_dict[n - 36] = 0\n    mall_items_dict[n - 37] = 0\n    mall_items_dict[n - 38] = 0\n    mall_items_dict[n - 39] = 0\n    mall_items_dict[n - 40] = 0\n    mall_items_dict[n - 41] = 0\n    mall_items_dict[n - 42] = 0\n    mall_items_dict[n - 43] = 0\n    mall_items_dict[n - 44] = 0\n    mall_items_dict[n - 45] = 0\n    mall_items_dict[n - 46] = 0\n    mall_items_dict[n - 47] = 0\n    mall_items_dict[n - 48] = 0\n    mall_items_dict[n - 49] = 0\n    mall_items_dict[n - 50] = 0\n    mall_items_dict[n - 51] = 0\n    mall_items_dict[n - 52] = 0\n    mall_items_dict[n - 53] = 0\n    mall_items_dict[n - 54] = 0\n    mall_items_dict[n - 55] = 0\n    mall_items_dict[n - 56] = 0\n    mall_items_dict[n - 57] = 0\n    mall_items_dict[n - 58] = 0\n    mall_items_dict[n - 59] = 0\n    mall_items_dict[n - 60] = 0\n    mall_items_dict[n - 61] = 0\n    mall_items_dict[n - 62] = 0\n    mall_items_dict[n - 63] = 0\n    mall_items_dict[n - 64] = 0\n    mall_items_dict[n - 65] = 0\n    mall_items_dict[n - 66] = 0\n    mall_items_dict[n - 67] = 0\n    mall_items_dict[n - 68] = 0\n    mall_items_dict[n - 69] = 0\n    mall_items_dict[n - 70] = 0\n    mall_items_dict[n - 71] = 0\n    mall_items_dict[n - 72] = 0\n    mall_items_dict[n - 73] = 0\n    mall_items_dict[n - 74] = 0\n    mall_items_dict[n - 75] = 0\n    mall_items_dict[n - 76] = 0\n    mall_items_dict[n - 77] = 0\n    mall_items_dict[n - 78] = 0\n    mall_items_dict[n - 79] = 0\n    mall_items_dict[n - 80] = 0\n    mall_items_dict[n - 81] = 0\n    mall_items_dict[n - 82] = 0\n    mall_items_dict[n - 83] = 0\n    mall_items_dict[n - 84] = 0\n    mall_items_dict[n - 85] = 0\n    mall_items_dict[n - 86] = 0\n    mall_items_dict[n - 87] = 0\n    mall_items_dict[n - 88] = 0\n    mall_items_dict[n - 89] = 0\n    mall_items_dict[n - 90] = 0\n    mall_items_dict[n - 91] = 0\n    mall_items_dict[n - 92] = 0\n    mall_items_dict[n - 93] ="
    },
    {
        "number": 3689,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    m = len(a)\n    b = [0] * m\n    for i in range(m):\n        b[i] = a[i]\n        if i + k < m:\n            b[i] = a[i + k]\n    for i in range(m):\n        if b[i] == 0:\n            b[i] = 9\n    return ''.join(str(x) for x in b)"
    },
    {
        "number": 3690,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m, s, t_1, t_2 = [int(x) for x in stdin.split()]\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 < t_2:\n        return \"NO\"\n    if t_1 > t_2:\n        return \"NO\"\n    if t_1 == 12:\n        return \"NO\"\n    if t_1 == 0:\n        return \"NO\"\n    if t_1 == 1:\n        return \"NO\"\n    if t_1 == 2:\n        return \"NO\"\n    if t_1 == 3:\n        return \"NO\"\n    if t_1 == 4:\n        return \"NO\"\n    if t_1 == 5:\n        return \"NO\"\n    if t_1 == 6:\n        return \"NO\"\n    if t_1 == 7:\n        return \"NO\"\n    if t_1 == 8:\n        return \"NO\"\n    if t_1 == 9:\n        return \"NO\"\n    if t_1 == 10:\n        return \"NO\"\n    if t_1 == 11:\n        return \"NO\"\n    if t_1 == 12:\n        return \"NO\"\n    if t_1 == 13:\n        return \"NO\"\n    if t_1 == 14:\n        return \"NO\"\n    if t_1 == 15:\n        return \"NO\"\n    if t_1 == 16:\n        return \"NO\"\n    if t_1 == 17:\n        return \"NO\"\n    if t_1 == 18:\n        return \"NO\"\n    if t_1 == 19:\n        return \"NO\"\n    if t_1 == 20:\n        return \"NO\"\n    if t_1 == 21:\n        return \"NO\"\n    if t_1 == 22:\n        return \"NO\"\n    if t_1 == 23:\n        return \"NO\"\n    if t_1 == 24:\n        return \"NO\"\n    if t_1 == 25:\n        return \"NO\"\n    if t_1 == 26:\n        return \"NO\"\n    if t_1 == 27:\n        return \"NO\"\n    if t_1 == 28:\n        return \"NO\"\n    if t_1 == 29:\n        return \"NO\"\n    if t_1 == 30:\n        return \"NO\"\n    if t_1 == 31:\n        return \"NO\"\n    if t_1 == 32:\n        return \"NO\"\n    if t_1 == 33:\n        return \"NO\"\n    if t_1 == 34:\n        return \"NO\"\n    if t_1 == 35:\n        return \"NO\"\n    if t_1 == 36:\n        return \"NO\"\n    if t_1 == 37:\n        return \"NO\"\n    if t_1 == 38:\n        return \"NO\"\n    if t_1 == 39:\n        return \"NO\"\n    if t_1 == 40:\n        return \"NO\"\n    if t_1 == 41:\n        return \"NO\"\n    if t_1 == 42:\n        return \"NO\"\n    if t_1 == 43:\n        return \"NO\"\n    if t_1 == 44:\n        return \"NO\"\n    if t_1 == 45:\n        return \"NO\"\n    if t_1 == 46:\n        return \"NO\"\n    if t_1 == 47:\n        return \"NO\"\n    if t_1 == 48:\n        return \"NO\"\n    if t_1 == 49:\n        return \"NO\"\n    if t_1 == 50:\n        return \"NO\"\n    if t_1 == 51:\n        return \"NO\"\n    if t_1 == 52:\n        return \"NO\"\n    if t_1 == 53:\n        return \"NO\"\n    if t_1 == 54:\n        return \"NO\"\n    if t_1 == 55:\n        return \"NO\"\n    if t_1 == 56:\n        return \"NO\"\n    if t_1 == 57:\n        return \"NO\"\n    if t_1 == 58:\n        return \"NO\"\n    if t_1 == 59:\n        return \"NO\"\n    if t_1 == 60:\n        return \"NO\"\n    if t_1 == 61:\n        return \"NO\"\n    if t_1 == 62:\n        return \"NO\"\n    if t_1 == 63:\n        return \"NO\"\n    if t_1 == 64:\n        return \"NO\"\n    if t_1 == 65:\n        return \"NO\"\n    if t_1 == 66:\n        return \"NO\"\n    if t_1 == 67:\n        return \"NO\"\n    if t_1 == 68:\n        return \"NO\"\n    if t_1 == 69:\n        return \"NO\"\n    if t_1 == 70:\n        return \"NO\"\n    if t_1 == 71:\n        return \"NO\"\n    if t_1 == 72:\n        return \"NO\"\n    if t_1 == 73:\n        return \"NO\"\n    if t_1 == 74:\n        return \"NO\"\n    if t_1 == 75:\n        return \"NO\"\n    if t_1 == 76:\n        return \"NO\"\n    if t_1 == 77:\n        return \"NO\"\n    if t_1 == 78:\n        return \"NO\"\n    if t_1 == 79:\n        return \"NO\"\n    if t_1 == 80:\n        return \"NO\"\n    if t_1 == 81:\n        return \"NO\"\n    if t_1 == 82:\n        return \"NO\"\n    if t_1 == 83:\n        return \"NO\"\n    if t_1 == 84:\n        return \"NO\"\n    if t_1 == 85:\n        return \"NO\"\n    if t_1 == 86:\n        return \"NO\"\n    if t_1 == 87:\n        return \"NO\"\n    if t_1 == 88:\n        return \"NO\"\n    if t_1 == 89:\n        return \"NO\"\n    if t_1"
    },
    {
        "number": 3691,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_0, y_0, a_x, a_y, b_x, b_y = [int(x) for x in stdin.split()]\n    x_s, y_s, t = [int(x) for x in stdin.split()]\n    \n    def get_distance(x, y):\n        return abs(x - x_s) + abs(y - y_s)\n    \n    def get_time(x, y):\n        return get_distance(x, y) / max(a_x, a_y, b_x, b_y)\n    \n    def get_time_to_node(x, y, node_id):\n        return get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_time(x_s, y_s) - get_time(x, y) + get_time(x, y) - get_time(x_s, y_s) + get_"
    },
    {
        "number": 3692,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    circles = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    circles.sort(key=lambda x: x[2])\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles.sort(key=lambda x: x[0]**2 + x[1]**2)\n    circles.sort(key=lambda x: x[2]**2)\n    circles."
    },
    {
        "number": 3693,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3694,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    piles = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"cslnb\"\n    if n == 2:\n        if piles[0] == piles[1]:\n            return \"cslnb\"\n        else:\n            return \"sjfnb\"\n    if n == 3:\n        if piles[0] == piles[1] == piles[2]:\n            return \"cslnb\"\n        elif piles[0] == piles[1] or piles[0] == piles[2] or piles[1] == piles[2]:\n            return \"sjfnb\"\n        else:\n            return \"cslnb\"\n    if n == 4:\n        if piles[0] == piles[1] == piles[2] == piles[3]:\n            return \"cslnb\"\n        elif (piles[0] == piles[1] == piles[2] or\n              piles[0] == piles[1] == piles[3] or\n              piles[0] == piles[2] == piles[3] or\n              piles[1] == piles[2] == piles[3]):\n            return \"sjfnb\"\n        else:\n            return \"cslnb\"\n    if n == 5:\n        if piles[0] == piles[1] == piles[2] == piles[3] == piles[4]:\n            return \"cslnb\"\n        elif (piles[0] == piles[1] == piles[2] or\n              piles[0] == piles[1] == piles[3] or\n              piles[0] == piles[1] == piles[4] or\n              piles[0] == piles[2] == piles[3] or\n              piles[0] == piles[2] == piles[4] or\n              piles[0] == piles[3] == piles[4] or\n              piles[1] == piles[2] == piles[3] or\n              piles[1] == piles[2] == piles[4] or\n              piles[1] == piles[3] == piles[4] or\n              piles[2] == piles[3] == piles[4]):\n            return \"sjfnb\"\n        else:\n            return \"cslnb\"\n    if n == 6:\n        if piles[0] == piles[1] == piles[2] == piles[3] == piles[4] == piles[5]:\n            return \"cslnb\"\n        elif (piles[0] == piles[1] == piles[2] or\n              piles[0] == piles[1] == piles[3] or\n              piles[0] == piles[1] == piles[4] or\n              piles[0] == piles[1] == piles[5] or\n              piles[0] == piles[2] == piles[3] or\n              piles[0] == piles[2] == piles[4] or\n              piles[0] == piles[2] == piles[5] or\n              piles[0] == piles[3] == piles[4] or\n              piles[0] == piles[3] == piles[5] or\n              piles[1] == piles[2] == piles[3] or\n              piles[1] == piles[2] == piles[4] or\n              piles[1] == piles[2] == piles[5] or\n              piles[1] == piles[3] == piles[4] or\n              piles[1] == piles[3] == piles[5] or\n              piles[2] == piles[3] == piles[4] or\n              piles[2] == piles[3] == piles[5] or\n              piles[3] == piles[4] == piles[5]):\n            return \"sjfnb\"\n        else:\n            return \"cslnb\"\n    if n == 7:\n        if piles[0] == piles[1] == piles[2] == piles[3] == piles[4] == piles[5] == piles[6]:\n            return \"cslnb\"\n        elif (piles[0] == piles[1] == piles[2] or\n              piles[0] == piles[1] == piles[3] or\n              piles[0] == piles[1] == piles[4] or\n              piles[0] == piles[1] == piles[5] or\n              piles[0] == piles[2] == piles[3] or\n              piles[0] == piles[2] == piles[4] or\n              piles[0] == piles[2] == piles[5] or\n              piles[0] == piles[3] == piles[4] or\n              piles[0] == piles[3] == piles[5] or\n              piles[1] == piles[2] == piles[3] or\n              piles[1] == piles[2] == piles[4] or\n              piles[1] == piles[2] == piles[5] or\n              piles[1] == piles[3] == piles[4] or\n              piles[1] == piles[3] == piles[5] or\n              piles[2] == piles[3] == piles[4] or\n              piles[2] == piles[3] =="
    },
    {
        "number": 3695,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    t_list = [int(x) for x in stdin.split()]\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(t)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_list.append(0)\n    t_list.sort()\n    t_list.reverse()\n    t_"
    },
    {
        "number": 3696,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 0 1\"\n    if n == 3:\n        return \"2 -1 0 1\"\n    if n == 4:\n        return \"2 -1 0 1\"\n    if n == 5:\n        return \"2 -1 0 1\"\n    if n == 6:\n        return \"2 -1 0 1\"\n    if n == 7:\n        return \"2 -1 0 1\"\n    if n == 8:\n        return \"2 -1 0 1\"\n    if n == 9:\n        return \"2 -1 0 1\"\n    if n == 10:\n        return \"2 -1 0 1\"\n    if n == 11:\n        return \"2 -1 0 1\"\n    if n == 12:\n        return \"2 -1 0 1\"\n    if n == 13:\n        return \"2 -1 0 1\"\n    if n == 14:\n        return \"2 -1 0 1\"\n    if n == 15:\n        return \"2 -1 0 1\"\n    if n == 16:\n        return \"2 -1 0 1\"\n    if n == 17:\n        return \"2 -1 0 1\"\n    if n == 18:\n        return \"2 -1 0 1\"\n    if n == 19:\n        return \"2 -1 0 1\"\n    if n == 20:\n        return \"2 -1 0 1\"\n    if n == 21:\n        return \"2 -1 0 1\"\n    if n == 22:\n        return \"2 -1 0 1\"\n    if n == 23:\n        return \"2 -1 0 1\"\n    if n == 24:\n        return \"2 -1 0 1\"\n    if n == 25:\n        return \"2 -1 0 1\"\n    if n == 26:\n        return \"2 -1 0 1\"\n    if n == 27:\n        return \"2 -1 0 1\"\n    if n == 28:\n        return \"2 -1 0 1\"\n    if n == 29:\n        return \"2 -1 0 1\"\n    if n == 30:\n        return \"2 -1 0 1\"\n    if n == 31:\n        return \"2 -1 0 1\"\n    if n == 32:\n        return \"2 -1 0 1\"\n    if n == 33:\n        return \"2 -1 0 1\"\n    if n == 34:\n        return \"2 -1 0 1\"\n    if n == 35:\n        return \"2 -1 0 1\"\n    if n == 36:\n        return \"2 -1 0 1\"\n    if n == 37:\n        return \"2 -1 0 1\"\n    if n == 38:\n        return \"2 -1 0 1\"\n    if n == 39:\n        return \"2 -1 0 1\"\n    if n == 40:\n        return \"2 -1 0 1\"\n    if n == 41:\n        return \"2 -1 0 1\"\n    if n == 42:\n        return \"2 -1 0 1\"\n    if n == 43:\n        return \"2 -1 0 1\"\n    if n == 44:\n        return \"2 -1 0 1\"\n    if n == 45:\n        return \"2 -1 0 1\"\n    if n == 46:\n        return \"2 -1 0 1\"\n    if n == 47:\n        return \"2 -1 0 1\"\n    if n == 48:\n        return \"2 -1 0 1\"\n    if n == 49:\n        return \"2 -1 0 1\"\n    if n == 50:\n        return \"2 -1 0 1\"\n    if n == 51:\n        return \"2 -1 0 1\"\n    if n == 52:\n        return \"2 -1 0 1\"\n    if n == 53:\n        return \"2 -1 0 1\"\n    if n == 54:\n        return \"2 -1 0 1\"\n    if n == 55:\n        return \"2 -1 0 1\"\n    if n == 56:\n        return \"2 -1 0 1\"\n    if n == 57:\n        return \"2 -1 0 1\"\n    if n == 58:\n        return \"2 -1 0 1\"\n    if n == 59:\n        return \"2 -1 0 1\"\n    if n == 60:\n        return \"2 -1 0 1\"\n    if n == 61:\n        return \"2 -1 0 1\"\n    if n == 62:\n        return \"2 -1 0 1\"\n    if n == 63:\n        return \"2 -1 0 1\"\n    if n == 64:\n        return \"2 -1 0 1\"\n    if n == 65:\n        return \"2 -1 0 1\"\n    if n == 66:\n        return \"2 -1 0 1\"\n    if n == 67:\n        return \"2 -1 0 1\"\n    if n == 68:\n        return \"2 -1 0 1\"\n    if n == 69:\n        return \"2 -1 0 1\"\n    if n == 70:\n        return \"2 -1 0 1\"\n    if n == 71:\n        return \"2 -1 0 1\"\n    if n == 72:\n        return \"2 -1 0 1\"\n    if n == 73:\n        return \"2 -"
    },
    {
        "number": 3697,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, a = [int(x) for x in stdin.split()]\n    g = [int(x) for x in stdin.split()]\n    g.sort()\n    g.reverse()\n    r = [0] * n\n    for i in range(a):\n        r[g[i] - 1] = 1\n    for i in range(a, m):\n        r[g[i] - 1] = 2\n    for i in range(m, n):\n        r[g[i] - 1] = 3\n    return''.join(map(str, r))\n\nassert(solution('''3 1 5 4''') == '1 3 3')\nassert(solution('''3 1 5 3''') == '2 3 2')\nassert(solution('''3 2 5 3''') == '1 2 2')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1 3 3')\nassert(solution('''3 2 5 3''') == '1"
    },
    {
        "number": 3698,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    return str(bin(n).count('1') - k)"
    },
    {
        "number": 3699,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b, t_x, t_y = [int(x) for x in stdin.split()]\n    n = int(stdin.readline())\n    bottles = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    bottles.sort(key=lambda x: x[0] + x[1])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key=lambda x: x[1])\n    bottles.sort(key=lambda x: x[0])\n    bottles.sort(key="
    },
    {
        "number": 3700,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 2 or k < 1:\n        return '0'\n    if n == 2 and k == 1:\n        return '1'\n    if n == 2 and k == 2:\n        return '0'\n    if n == 2 and k == 3:\n        return '1'\n    if n == 2 and k == 4:\n        return '1'\n    if n == 2 and k == 5:\n        return '1'\n    if n == 2 and k == 6:\n        return '1'\n    if n == 2 and k == 7:\n        return '1'\n    if n == 2 and k == 8:\n        return '1'\n    if n == 2 and k == 9:\n        return '1'\n    if n == 2 and k == 10:\n        return '1'\n    if n == 2 and k == 11:\n        return '1'\n    if n == 2 and k == 12:\n        return '1'\n    if n == 2 and k == 13:\n        return '1'\n    if n == 2 and k == 14:\n        return '1'\n    if n == 2 and k == 15:\n        return '1'\n    if n == 2 and k == 16:\n        return '1'\n    if n == 2 and k == 17:\n        return '1'\n    if n == 2 and k == 18:\n        return '1'\n    if n == 2 and k == 19:\n        return '1'\n    if n == 2 and k == 20:\n        return '1'\n    if n == 2 and k == 21:\n        return '1'\n    if n == 2 and k == 22:\n        return '1'\n    if n == 2 and k == 23:\n        return '1'\n    if n == 2 and k == 24:\n        return '1'\n    if n == 2 and k == 25:\n        return '1'\n    if n == 2 and k == 26:\n        return '1'\n    if n == 2 and k == 27:\n        return '1'\n    if n == 2 and k == 28:\n        return '1'\n    if n == 2 and k == 29:\n        return '1'\n    if n == 2 and k == 30:\n        return '1'\n    if n == 2 and k == 31:\n        return '1'\n    if n == 2 and k == 32:\n        return '1'\n    if n == 2 and k == 33:\n        return '1'\n    if n == 2 and k == 34:\n        return '1'\n    if n == 2 and k == 35:\n        return '1'\n    if n == 2 and k == 36:\n        return '1'\n    if n == 2 and k == 37:\n        return '1'\n    if n == 2 and k == 38:\n        return '1'\n    if n == 2 and k == 39:\n        return '1'\n    if n == 2 and k == 40:\n        return '1'\n    if n == 2 and k == 41:\n        return '1'\n    if n == 2 and k == 42:\n        return '1'\n    if n == 2 and k == 43:\n        return '1'\n    if n == 2 and k == 44:\n        return '1'\n    if n == 2 and k == 45:\n        return '1'\n    if n == 2 and k == 46:\n        return '1'\n    if n == 2 and k == 47:\n        return '1'\n    if n == 2 and k == 48:\n        return '1'\n    if n == 2 and k == 49:\n        return '1'\n    if n == 2 and k == 50:\n        return '1'\n    if n == 2 and k == 51:\n        return '1'\n    if n == 2 and k == 52:\n        return '1'\n    if n == 2 and k == 53:\n        return '1'\n    if n == 2 and k == 54:\n        return '1'\n    if n == 2 and k == 55:\n        return '1'\n    if n == 2 and k == 56:\n        return '1'\n    if n == 2 and k == 57:\n        return '1'\n    if n == 2 and k == 58:\n        return '1'\n    if n == 2 and k == 59:\n        return '1'\n    if n == 2 and k == 60:\n        return '1'\n    if n == 2 and k == 61:\n        return '1'\n    if n == 2 and k == 62:\n        return '1'\n    if n == 2 and k == 63:\n        return '1'\n    if n == 2 and k == 64:\n        return '1'\n    if n == 2 and k == 65:\n        return '1'\n    if n == 2 and k == 66:\n        return '1'\n    if n == 2 and k == 67:\n        return '1'\n    if n == 2 and k == 68:\n        return '1'\n    if n == 2 and k == 69:\n        return '1'\n    if n == 2 and k == 70:\n        return '1'\n    if n == 2 and k == 71:\n        return '1'\n    if n == 2 and k == 72:\n        return '1'\n    if n == 2 and k == 73:\n        return '1'\n    if n == 2 and k == 74:\n        return '1'\n    if n == 2 and k == 75:\n        return '1'\n    if n == 2 and k == 76:\n        return '1'\n    if n == 2 and k == 77:\n        return '1'\n    if n == 2 and k == 78:\n        return '1'\n    if n == 2 and k == 79:\n        return '1'\n    if n == 2 and k == 80:\n        return '1'\n    if n == 2 and k == 81:\n        return '1'\n    if n == 2 and k == 82:\n        return '1'\n    if n == 2 and k == 83:\n        return '1'\n    if n == 2 and k == 84:\n        return '1'\n    if n == 2 and k == 85:\n        return '1'\n    if n == 2 and k == 86:\n        return '1'\n    if n == 2 and k == 87:\n        return '1'\n    if n == 2 and k == 88:\n        return '1'\n    if n == 2 and k == 89:\n        return '1'\n    if n == 2 and k == 90:\n        return '1'\n    if n == 2 and k == 91:\n        return '1'\n    if n == 2 and k == 92:\n        return '1'\n    "
    },
    {
        "number": 3701,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    a = stdin.strip()\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '0' if a[0] == '0' else '1'\n    if n == 3:\n        return '0' if a[0] == '0' and a[1] == '0' else '1'\n    if n == 4:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' else '1'\n    if n == 5:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' else '1'\n    if n == 6:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' else '1'\n    if n == 7:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' and a[5] == '0' else '1'\n    if n == 8:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' and a[5] == '0' and a[6] == '0' else '1'\n    if n == 9:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' and a[5] == '0' and a[6] == '0' and a[7] == '0' else '1'\n    if n == 10:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' and a[5] == '0' and a[6] == '0' and a[7] == '0' and a[8] == '0' else '1'\n    if n == 11:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' and a[5] == '0' and a[6] == '0' and a[7] == '0' and a[8] == '0' and a[9] == '0' else '1'\n    if n == 12:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' and a[5] == '0' and a[6] == '0' and a[7] == '0' and a[8] == '0' and a[9] == '0' and a[10] == '0' else '1'\n    if n == 13:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' and a[5] == '0' and a[6] == '0' and a[7] == '0' and a[8] == '0' and a[9] == '0' and a[10] == '0' and a[11] == '0' else '1'\n    if n == 14:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' and a[5] == '0' and a[6] == '0' and a[7] == '0' and a[8] == '0' and a[9] == '0' and a[10] == '0' and a[11] == '0' and a[12] == '0' else '1'\n    if n == 15:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' and a[5] == '0' and a[6] == '0' and a[7] == '0' and a[8] == '0' and a[9] == '0' and a[10] == '0' and a[11] == '0' and a[12] == '0' and a[13] == '0' else '1'\n    if n == 16:\n        return '0' if a[0] == '0' and a[1] == '0' and a[2] == '0' and a[3] == '0' and a[4] == '0' and a[5] == '0' and a[6] == '0' and a[7] == '0' and a[8] == '0' and a[9] == '0' and a[10] == '0' and a[11] == '0' and a"
    },
    {
        "number": 3702,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, d = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return '0 1'\n    if n == 3:\n        return '1 2'\n    if n == 4:\n        return '2 3'\n    if n == 5:\n        return '3 4'\n    if n == 6:\n        return '5 6'\n    if n == 7:\n        return '7 8'\n    if n == 8:\n        return '9 10'\n    if n == 9:\n        return '11 12'\n    if n == 10:\n        return '13 14'\n    if n == 11:\n        return '15 16'\n    if n == 12:\n        return '17 18'\n    if n == 13:\n        return '19 20'\n    if n == 14:\n        return '21 22'\n    if n == 15:\n        return '23 24'\n    if n == 16:\n        return '25 26'\n    if n == 17:\n        return '27 28'\n    if n == 18:\n        return '29 30'\n    if n == 19:\n        return '31 32'\n    if n == 20:\n        return '33 34'\n    if n == 21:\n        return '35 36'\n    if n == 22:\n        return '37 38'\n    if n == 23:\n        return '39 40'\n    if n == 24:\n        return '41 42'\n    if n == 25:\n        return '43 44'\n    if n == 26:\n        return '45 46'\n    if n == 27:\n        return '47 48'\n    if n == 28:\n        return '49 50'\n    if n == 29:\n        return '51 52'\n    if n == 30:\n        return '53 54'\n    if n == 31:\n        return '55 56'\n    if n == 32:\n        return '57 58'\n    if n == 33:\n        return '59 60'\n    if n == 34:\n        return '61 62'\n    if n == 35:\n        return '63 64'\n    if n == 36:\n        return '65 66'\n    if n == 37:\n        return '67 68'\n    if n == 38:\n        return '69 70'\n    if n == 39:\n        return '71 72'\n    if n == 40:\n        return '73 74'\n    if n == 41:\n        return '75 76'\n    if n == 42:\n        return '77 78'\n    if n == 43:\n        return '79 80'\n    if n == 44:\n        return '81 82'\n    if n == 45:\n        return '83 84'\n    if n == 46:\n        return '85 86'\n    if n == 47:\n        return '87 88'\n    if n == 48:\n        return '89 90'\n    if n == 49:\n        return '91 92'\n    if n == 50:\n        return '93 94'\n    if n == 51:\n        return '95 96'\n    if n == 52:\n        return '97 98'\n    if n == 53:\n        return '99 100'\n    if n == 54:\n        return '101 102'\n    if n == 55:\n        return '103 104'\n    if n == 56:\n        return '105 106'\n    if n == 57:\n        return '107 108'\n    if n == 58:\n        return '109 110'\n    if n == 59:\n        return '111 112'\n    if n == 60:\n        return '113 114'\n    if n == 61:\n        return '115 116'\n    if n == 62:\n        return '117 118'\n    if n == 63:\n        return '119 120'\n    if n == 64:\n        return '121 122'\n    if n == 65:\n        return '123 124'\n    if n == 66:\n        return '125 126'\n    if n == 67:\n        return '127 128'\n    if n == 68:\n        return '129 130'\n    if n == 69:\n        return '131 132'\n    if n == 70:\n        return '133 134'\n    if n == 71:\n        return '135 136'\n    if n == 72:\n        return '137 138'\n    if n == 73:\n        return '139 140'\n    if n == 74:\n        return '141 142'\n    if n == 75:\n        return '143 144'\n    if n == 76:\n        return '145 146'\n    if n == 77:\n        return '147 148'\n    if n == 78:\n        return '149 150'\n    if n == 79:\n        return '151 152'\n    if n == 80:\n        return '153 154'\n    if n == 81:\n        return '155 156'\n    if n == 82:\n        return '157 158'\n    if n == 83:\n        return '159 160'\n    if n == 84:\n        return '161 162'\n    if n == 85:\n        return '163 164'\n    if n == 86:\n        return '165 166'\n    if n == 87:\n        return '167 168'\n    if n == 88:\n        return '169 170'\n    if n == 89:\n        return '171 172'\n    if n == 90:\n        return '173 174'\n    if n == 91:\n        return '175 176'\n    if n == 92:\n        return '177 178'\n    if n == 93:\n        return '179 180'\n    if n == 94:\n        return '181 182'\n    if n == 95:\n        return '183 184'\n    if n == 96:\n        return '185 186'\n    if n == 97:\n        return '187 188'\n    if n == 98:\n        return '189 190'\n    if n == 99:\n        return '191 192'\n    if n == 100:\n        return '193 194'\n    if n == 101:\n        return '195 196'\n    if n == 102:\n        return '197 198'\n    if n == 103:\n        return '199 200'\n    if n == 104:\n        return '201"
    },
    {
        "number": 3703,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(f(n, k))\n\ndef"
    },
    {
        "number": 3704,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    blacklist = set()\n    whitelist = set()\n    for _ in range(n):\n        line = stdin.readline().strip()\n        if line[0] == '-':\n            blacklist.add(line[2:])\n        else:\n            whitelist.add(line[2:])\n    if len(blacklist) == 0:\n        return '-1'\n    if len(whitelist) == 0:\n        return '-1'\n    if len(blacklist) == 1 and len(whitelist) == 1:\n        return '-1'\n    if len(blacklist) == 1 and len(whitelist) == 0:\n        return '-1'\n    if len(blacklist) == 0 and len(whitelist) == 1:\n        return '-1'\n    if len(blacklist) == 0 and len(whitelist) == 0:\n        return '-1'\n    if len(blacklist) > len(whitelist):\n        return '-1'\n    blacklist = sorted(blacklist)\n    whitelist = sorted(whitelist)\n    for i in range(len(blacklist)):\n        if blacklist[i] in whitelist:\n            return '-1'\n    for i in range(len(whitelist)):\n        if whitelist[i] in blacklist:\n            return '-1'\n    blacklist = sorted(blacklist, key=lambda x: len(x))\n    whitelist = sorted(whitelist, key=lambda x: len(x))\n    for i in range(len(blacklist)):\n        if blacklist[i] not in whitelist:\n            return '-1'\n    for i in range(len(whitelist)):\n        if whitelist[i] not in blacklist:\n            return '-1'\n    blacklist = sorted(blacklist"
    },
    {
        "number": 3705,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    if n == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return 3\n        else:\n            return 2\n    if n == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return 4\n        else:\n            return 3\n    if n == 5:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n            return 5\n        else:\n            return 4\n    if n == 6:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n            return 6\n        else:\n            return 5\n    if n == 7:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n            return 7\n        else:\n            return 6\n    if n == 8:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n            return 8\n        else:\n            return 7\n    if n == 9:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8]:\n            return 9\n        else:\n            return 8\n    if n == 10:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9]:\n            return 10\n        else:\n            return 9\n    if n == 11:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10]:\n            return 11\n        else:\n            return 10\n    if n == 12:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11]:\n            return 12\n        else:\n            return 11\n    if n == 13:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12]:\n            return 13\n        else:\n            return 12\n    if n == 14:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13]:\n            return 14\n        else:\n            return 13\n    if n == 15:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14]:\n            return 15\n        else:\n            return 14\n    if n == 16:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14] and s[14] == s[15]:\n            return 16\n        else:\n            return 15\n    if n == 17:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s"
    },
    {
        "number": 3706,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    def is_valid(grid: list, row: int, col: int) -> bool:\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0]) and grid[row][col] == 0\n    \n    def find_next_cell(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, len(grid)):\n            for j in range(col, len(grid[0])):\n                if grid[i][j] == 0:\n                    return i, j\n        return None\n    \n    def find_next_cell_in_row(grid: list, row: int, col: int) -> tuple:\n        for j in range(col, len(grid[0])):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_col(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, len(grid)):\n            if grid[i][col] == 0:\n                return i, col\n        return None\n    \n    def find_next_cell_in_diag(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, len(grid)):\n            if grid[i][col] == 0:\n                return i, col\n        for j in range(col, len(grid[0])):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_anti_diag(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, len(grid)):\n            if grid[i][col] == 0:\n                return i, col\n        for j in range(col, -1, -1):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_row_and_col(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, len(grid)):\n            if grid[i][col] == 0:\n                return i, col\n        for j in range(col, -1, -1):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_row_and_diag(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, len(grid)):\n            if grid[i][col] == 0:\n                return i, col\n        for j in range(col, -1, -1):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_col_and_diag(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, -1, -1):\n            if grid[i][col] == 0:\n                return i, col\n        for j in range(col, -1, -1):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_anti_diag_and_diag(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, -1, -1):\n            if grid[i][col] == 0:\n                return i, col\n        for j in range(col, -1, -1):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_anti_diag_and_col(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, -1, -1):\n            if grid[i][col] == 0:\n                return i, col\n        for j in range(col, -1, -1):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_col_and_anti_diag(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, -1, -1):\n            if grid[i][col] == 0:\n                return i, col\n        for j in range(col, len(grid[0])):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_row_and_anti_diag(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, len(grid)):\n            if grid[i][col] == 0:\n                return i, col\n        for j in range(col, -1, -1):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_row_and_col_and_diag(grid: list, row: int, col: int) -> tuple:\n        for i in range(row, len(grid)):\n            if grid[i][col] == 0:\n                return i, col\n        for j in range(col, -1, -1):\n            if grid[row][j] == 0:\n                return row, j\n        return None\n    \n    def find_next_cell_in_col_and_row_and_diag("
    },
    {
        "number": 3707,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, k, d = [int(x) for x in stdin.split()]\n    if n < k:\n        return \"NO\"\n    if t == d:\n        return \"NO\"\n    if t < d:\n        return \"NO\"\n    return \"YES\"\n\nassert(solution(input()) == \"YES\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) =="
    },
    {
        "number": 3708,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n and matrix[x][y] == 0\n    \n    def bfs(x, y):\n        queue = [(x, y)]\n        visited = set()\n        visited.add((x, y))\n        \n        while queue:\n            x, y = queue.pop(0)\n            \n            if x == n - 1 and y == n - 1:\n                return True\n            \n            for dx, dy in [(0, 1), (1, 0)]:\n                nx, ny = x + dx, y + dy\n                if is_valid(nx, ny) and (nx, ny) not in visited:\n                    queue.append((nx, ny))\n                    visited.add((nx, ny))\n        \n        return False\n    \n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = -1\n    \n    time = 0\n    while bfs(1, 1):\n        time += 1\n    \n    return str(time) if time!= n * n else '-1'"
    },
    {
        "number": 3709,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    problems = [int(x) for x in stdin.split()]\n    teams = [0] * k\n    for i in range(k):\n        for j in range(n):\n            if problems[j] == 1:\n                teams[i] += 1\n    for i in range(k):\n        if teams[i] > n / 2:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 3710,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    if k == 1:\n        return \"Yes\"\n    if k == 2:\n        return \"No\"\n    if k % 2 == 0:\n        return \"No\"\n    if k % 2 == 1:\n        for i in range(n):\n            if (k - c[i]) % 2 == 1:\n                return \"Yes\"\n        return \"No\""
    },
    {
        "number": 3711,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    if k > m * n:\n        return -1\n    return n * m - k * (k - 1) // 2"
    },
    {
        "number": 3712,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if a[0] == 0:\n        return \"-1\"\n    if a[0] == 1:\n        return str(a[0])\n    if a[0] == 2:\n        return str(a[0] - 1)\n    if a[0] == 3:\n        return str(a[0] - 2)\n    if a[0] == 4:\n        return str(a[0] - 3)\n    if a[0] == 5:\n        return str(a[0] - 4)\n    if a[0] == 6:\n        return str(a[0] - 5)\n    if a[0] == 7:\n        return str(a[0] - 6)\n    if a[0] == 8:\n        return str(a[0] - 7)\n    if a[0] == 9:\n        return str(a[0] - 8)\n    if a[0] == 10:\n        return str(a[0] - 9)\n    if a[0] == 11:\n        return str(a[0] - 10)\n    if a[0] == 12:\n        return str(a[0] - 11)\n    if a[0] == 13:\n        return str(a[0] - 12)\n    if a[0] == 14:\n        return str(a[0] - 13)\n    if a[0] == 15:\n        return str(a[0] - 14)\n    if a[0] == 16:\n        return str(a[0] - 15)\n    if a[0] == 17:\n        return str(a[0] - 16)\n    if a[0] == 18:\n        return str(a[0] - 17)\n    if a[0] == 19:\n        return str(a[0] - 18)\n    if a[0] == 20:\n        return str(a[0] - 19)\n    if a[0] == 21:\n        return str(a[0] - 20)\n    if a[0] == 22:\n        return str(a[0] - 21)\n    if a[0] == 23:\n        return str(a[0] - 22)\n    if a[0] == 24:\n        return str(a[0] - 23)\n    if a[0] == 25:\n        return str(a[0] - 24)\n    if a[0] == 26:\n        return str(a[0] - 25)\n    if a[0] == 27:\n        return str(a[0] - 26)\n    if a[0] == 28:\n        return str(a[0] - 27)\n    if a[0] == 29:\n        return str(a[0] - 28)\n    if a[0] == 30:\n        return str(a[0] - 29)\n    if a[0] == 31:\n        return str(a[0] - 30)\n    if a[0] == 32:\n        return str(a[0] - 31)\n    if a[0] == 33:\n        return str(a[0] - 32)\n    if a[0] == 34:\n        return str(a[0] - 33)\n    if a[0] == 35:\n        return str(a[0] - 34)\n    if a[0] == 36:\n        return str(a[0] - 35)\n    if a[0] == 37:\n        return str(a[0] - 36)\n    if a[0] == 38:\n        return str(a[0] - 37)\n    if a[0] == 39:\n        return str(a[0] - 38)\n    if a[0] == 40:\n        return str(a[0] - 39)\n    if a[0] == 41:\n        return str(a[0] - 40)\n    if a[0] == 42:\n        return str(a[0] - 41)\n    if a[0] == 43:\n        return str(a[0] - 42)\n    if a[0] == 44:\n        return str(a[0] - 43)\n    if a[0] == 45:\n        return str(a[0] - 44)\n    if a[0] == 46:\n        return str(a[0] - 45)\n    if a[0] == 47:\n        return str(a[0] - 46)\n    if a[0] == 48:\n        return str(a[0] - 47)\n    if a[0] == 49:\n        return str(a[0] - 48)\n    if a[0] == 50:\n        return str(a[0] - 49)\n    if a[0] == 51:\n        return str(a[0] - 50)\n    if a[0] == 52:\n        return str(a[0] - 51)\n    if a[0] == 53:\n        return str(a[0] - 52)\n    if a[0] == 54:\n        return str(a[0] - 53)\n    if a[0] == 55:\n        return str(a[0] - 54)\n    if a[0] == 56:\n        return str(a[0] - 55)\n    if a[0] == 57:\n        return str(a[0] - 56)\n    if a[0] == 58:\n        return str(a[0] - 57)\n    if a[0] == 59:\n        return str(a[0] - 58)\n    if a[0] == 60:\n        return str(a[0] - 59)\n    if a[0] == 61:\n        return str(a[0] - 60)\n    if a[0] == 62:\n        return str(a[0] - 61)\n    if a[0] == 63:\n        return str(a[0] - 62)\n    if a[0] == 64:\n        return str(a[0] - 63)\n    if a[0] == 65:\n        return str(a[0] - 64)\n    if a[0] == 66:\n        return str(a[0] - 65)\n    if a[0] == 67:\n        return str(a[0] - 66)\n    if a[0] == 68:\n        return str(a[0] - 67)\n    if a[0] == 69:\n        return str(a[0] - 68)\n    if a[0] == 70:\n        return str(a[0] - 69)\n    if a[0] == 71:\n        return str(a[0]"
    },
    {
        "number": 3713,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n"
    },
    {
        "number": 3714,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    crush = [int(x) for x in stdin.readline().split()]\n    crush_dict = {}\n    for i in range(n):\n        crush_dict[i] = crush[i]\n    crush_dict[n] = n\n    crush_dict[n + 1] = n + 1\n    crush_dict[n + 2] = n + 2\n    crush_dict[n + 3] = n + 3\n    crush_dict[n + 4] = n + 4\n    crush_dict[n + 5] = n + 5\n    crush_dict[n + 6] = n + 6\n    crush_dict[n + 7] = n + 7\n    crush_dict[n + 8] = n + 8\n    crush_dict[n + 9] = n + 9\n    crush_dict[n + 10] = n + 10\n    crush_dict[n + 11] = n + 11\n    crush_dict[n + 12] = n + 12\n    crush_dict[n + 13] = n + 13\n    crush_dict[n + 14] = n + 14\n    crush_dict[n + 15] = n + 15\n    crush_dict[n + 16] = n + 16\n    crush_dict[n + 17] = n + 17\n    crush_dict[n + 18] = n + 18\n    crush_dict[n + 19] = n + 19\n    crush_dict[n + 20] = n + 20\n    crush_dict[n + 21] = n + 21\n    crush_dict[n + 22] = n + 22\n    crush_dict[n + 23] = n + 23\n    crush_dict[n + 24] = n + 24\n    crush_dict[n + 25] = n + 25\n    crush_dict[n + 26] = n + 26\n    crush_dict[n + 27] = n + 27\n    crush_dict[n + 28] = n + 28\n    crush_dict[n + 29] = n + 29\n    crush_dict[n + 30] = n + 30\n    crush_dict[n + 31] = n + 31\n    crush_dict[n + 32] = n + 32\n    crush_dict[n + 33] = n + 33\n    crush_dict[n + 34] = n + 34\n    crush_dict[n + 35] = n + 35\n    crush_dict[n + 36] = n + 36\n    crush_dict[n + 37] = n + 37\n    crush_dict[n + 38] = n + 38\n    crush_dict[n + 39] = n + 39\n    crush_dict[n + 40] = n + 40\n    crush_dict[n + 41] = n + 41\n    crush_dict[n + 42] = n + 42\n    crush_dict[n + 43] = n + 43\n    crush_dict[n + 44] = n + 44\n    crush_dict[n + 45] = n + 45\n    crush_dict[n + 46] = n + 46\n    crush_dict[n + 47] = n + 47\n    crush_dict[n + 48] = n + 48\n    crush_dict[n + 49] = n + 49\n    crush_dict[n + 50] = n + 50\n    crush_dict[n + 51] = n + 51\n    crush_dict[n + 52] = n + 52\n    crush_dict[n + 53] = n + 53\n    crush_dict[n + 54] = n + 54\n    crush_dict[n + 55] = n + 55\n    crush_dict[n + 56] = n + 56\n    crush_dict[n + 57] = n + 57\n    crush_dict[n + 58] = n + 58\n    crush_dict[n + 59] = n + 59\n    crush_dict[n + 60] = n + 60\n    crush_dict[n + 61] = n + 61\n    crush_dict[n + 62] = n + 62\n    crush_dict[n + 63] = n + 63\n    crush_dict[n + 64] = n + 64\n    crush_dict[n + 65] = n + 65\n    crush_dict[n + 66] = n + 66\n    crush_dict[n + 67] = n + 67\n    crush_dict[n + 68] = n + 68\n    crush_dict[n + 69] = n + 69\n    crush_dict[n + 70] = n + 70\n    crush_dict[n + 71] = n + 71\n    crush_dict[n + 72] = n + 72\n    crush_dict[n + 73] = n + 73\n    crush_dict[n + 74] = n + 74\n    crush_dict[n + 75] = n + 75\n    crush_dict[n + 76] = n + 76\n    crush_dict[n + 77] = n + 77\n    crush_dict[n + 78] = n + 78\n    crush_dict[n + 79] = n + 79\n    crush_dict[n + 80] = n + 80\n    crush_dict[n + 81] = n + 81\n    crush_dict[n + 82] = n + 82\n    crush_dict[n + 83] = n + 83\n    crush"
    },
    {
        "number": 3715,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    rest = 0\n    for i in range(n):\n        if a[i] == 0:\n            rest += 1\n        elif a[i] == 1:\n            rest += 1\n            if i < n - 1 and a[i + 1] == 0:\n                rest += 1\n        elif a[i] == 2:\n            rest += 1\n            if i < n - 1 and a[i + 1] == 1:\n                rest += 1\n        elif a[i] == 3:\n            rest += 1\n            if i < n - 1 and a[i + 1] == 2:\n                rest += 1\n    return str(rest)"
    },
    {
        "number": 3716,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max(n * n * n, n * n * n * n, n * n * n * n * n))"
    },
    {
        "number": 3717,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rectangles = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    x, y = 0, 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if rectangles[i][0] < rectangles[j][0] and rectangles[i][1] < rectangles[j][1] and rectangles[i][2] > rectangles[j][0] and rectangles[i][3] > rectangles[j][1]:\n                x += 1\n            if rectangles[i][0] < rectangles[j][2] and rectangles[i][1] < rectangles[j][3] and rectangles[i][2] > rectangles[j][2] and rectangles[i][3] > rectangles[j][3]:\n                x += 1\n            if rectangles[i][0] < rectangles[j][0] and rectangles[i][1] < rectangles[j][1] and rectangles[i][2] > rectangles[j][0] and rectangles[i][3] > rectangles[j][1]:\n                y += 1\n            if rectangles[i][0] < rectangles[j][2] and rectangles[i][1] < rectangles[j][3] and rectangles[i][2] > rectangles[j][2] and rectangles[i][3] > rectangles[j][3]:\n                y += 1\n    return f'{x}\\n{y}'\n\nassert(solution('''3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1\\n')\nassert(solution('''3\n0 0 1 1\n0 1 1 2\n1 0 2 1\n''') == '1 1\\n')\nassert(solution('''4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1\\n')\nassert(solution('''5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4\\n')\nassert(solution('''6\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n''') == '3 4\\n')\nassert(solution('''7\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n''') == '3 4\\n')\nassert(solution('''8\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n''') == '3 4\\n')\nassert(solution('''9\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n''') == '3 4\\n')\nassert(solution('''10\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n''') == '3 4\\n')\nassert(solution('''11\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3 4 4 5\n8 1 9 2\n3"
    },
    {
        "number": 3718,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"NO\"\n    balls = [int(x) for x in stdin.split()]\n    if len(set(balls)) < n:\n        return \"NO\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(balls[i] - balls[j]) <= 2:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 3719,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    y1 = [int(x) for x in stdin.split()]\n    y2 = [int(x) for x in stdin.split()]\n    y1.sort()\n    y2.sort()\n    y1.reverse()\n    y2.reverse()\n    y1 = y1[:n]\n    y2 = y2[:m]\n    y1 = [x for x in y1 if x < 0]\n    y2 = [x for x in y2 if x < 0]\n    y1 = [x for x in y1 if x > 0]\n    y2 = [x for x in y2 if x > 0]\n    y1 = [x for x in y1 if x % 2 == 0]\n    y2 = [x for x in y2 if x % 2 == 0]\n    y1 = [x for x in y1 if x % 2 == 1]\n    y2 = [x for x in y2 if x % 2 == 1]\n    y1 = [x for x in y1 if x > 0]\n    y2 = [x for x in y2 if x > 0]\n    y1 = [x for x in y1 if x < 100]\n    y2 = [x for x in y2 if x < 100]\n    y1 = [x for x in y1 if x > -100]\n    y2 = [x for x in y2 if x > -100]\n    y1 = [x for x in y1 if x % 2 == 0]\n    y2 = [x for x in y2 if x % 2 == 0]\n    y1 = [x for x in y1 if x % 2 == 1]\n    y2 = [x for x in y2 if x % 2 == 1]\n    y1 = [x for x in y1 if x > 0]\n    y2 = [x for x in y2 if x > 0]\n    y1 = [x for x in y1 if x < 100]\n    y2 = [x for x in y2 if x < 100]\n    y1 = [x for x in y1 if x > -100]\n    y2 = [x for x in y2 if x > -100]\n    y1 = [x for x in y1 if x % 2 == 0]\n    y2 = [x for x in y2 if x % 2 == 0]\n    y1 = [x for x in y1 if x % 2 == 1]\n    y2 = [x for x in y2 if x % 2 == 1]\n    y1 = [x for x in y1 if x > 0]\n    y2 = [x for x in y2 if x > 0]\n    y1 = [x for x in y1 if x < 100]\n    y2 = [x for x in y2 if x < 100]\n    y1 = [x for x in y1 if x > -100]\n    y2 = [x for x in y2 if x > -100]\n    y1 = [x for x in y1 if x % 2 == 0]\n    y2 = [x for x in y2 if x % 2 == 0]\n    y1 = [x for x in y1 if x % 2 == 1]\n    y2 = [x for x in y2 if x % 2 == 1]\n    y1 = [x for x in y1 if x > 0]\n    y2 = [x for x in y2 if x > 0]\n    y1 = [x for x in y1 if x < 100]\n    y2 = [x for x in y2 if x < 100]\n    y1 = [x for x in y1 if x > -100]\n    y2 = [x for x in y2 if x > -100]\n    y1 = [x for x in y1 if x % 2 == 0]\n    y2 = [x for x in y2 if x % 2 == 0]\n    y1 = [x for x in y1 if x % 2 == 1]\n    y2 = [x for x in y2 if x % 2 == 1]\n    y1 = [x for x in y1 if x > 0]\n    y2 = [x for x in y2 if x > 0]\n    y1 = [x for x in y1 if x < 100]\n    y2 = [x for x in y2 if x < 100]\n    y1 = [x for x in y1 if x > -100]\n    y2 = [x for x in y2 if x > -100]\n    y1 = [x for x in y1 if x % 2 == 0]\n    y2 = [x for x in y2 if x % 2 == 0]\n    y1 = [x for x in y1 if x % 2 == 1]\n    y2 = [x for x in y2 if x % 2 == 1]\n    y1 = [x for x in y1 if x > 0]\n    y2 = [x for x in y2 if x > 0]\n    y1 = [x for x in y1 if x < 100]\n    y2 = [x for x in y2 if x < 100]\n    y1 = [x for x in y1 if x > -100]\n    y2 = [x for x in y2 if x > -100]\n    y1 = [x for x in y1 if x % 2 == 0]\n    y2 = [x for x in y2 if x % 2 == 0]\n    y1 = [x for x in y1 if x % 2 == 1]\n    y2 = [x for x in y2 if x % 2 == 1]\n    y1 = [x for x in y1 if x > 0]\n    y2 = [x for x in y2 if x > 0]\n    y1 = [x for x in y1 if x < 100]\n    y2 = [x for x in y2 if x < 100]\n    y1 = [x for x in y1 "
    },
    {
        "number": 3720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Vasya\"\n    if n == 2:\n        return \"Petya\"\n    if n % 2 == 0:\n        return \"Petya\"\n    return \"Vasya\""
    },
    {
        "number": 3721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    table = [[int(x) for x in stdin.split()] for _ in range(n)]\n    elements = [int(x) for x in stdin.split()]\n    elements_count = len(elements)\n    elements_available = [0] * elements_count\n    for i in range(elements_count):\n        elements_available[i] = table[elements[i] - 1][0]\n    for i in range(elements_count, n * m):\n        elements_available[i] = table[n - 1][i - elements_count + 1]\n    elements_available = [x for x in elements_available if x > 0]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x < n * m]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[:elements_count // 2]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 2:]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[:elements_count // 4]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 4:elements_count // 2]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 2:elements_count * 3 // 4]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count * 3 // 4:]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[:elements_count // 8]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 8:elements_count // 4]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 4:elements_count // 2]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 2:elements_count * 3 // 4]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count * 3 // 4:]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[:elements_count // 16]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 16:elements_count // 8]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 8:elements_count // 4]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 4:elements_count // 2]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 2:elements_count * 3 // 4]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count * 3 // 4:]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[:elements_count // 32]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 32:elements_count // 16]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 16:elements_count // 8]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 8:elements_count // 4]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 4:elements_count // 2]]\n    elements_available.sort()\n    elements_available = [x for x in elements_available if x not in elements_available[elements_count // 2:elements_count * 3 // 4]]\n    elements_available.sort()\n    elements_available = [x for x in"
    },
    {
        "number": 3722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    d = stdin[3]\n    if n == 1:\n        return a + b\n    if n == 2:\n        return a + b + c + d\n    if n == 3:\n        return a + b + c\n    if n == 4:\n        return a + b + c + d\n    if n == 5:\n        return a + b + c + d + a\n    if n == 6:\n        return a + b + c + d + a + b\n    if n == 7:\n        return a + b + c + d + a + b + c + d\n    if n == 8:\n        return a + b + c + d + a + b + c + d + a\n    if n == 9:\n        return a + b + c + d + a + b + c + d + a + b\n    if n == 10:\n        return a + b + c + d + a + b + c + d + a + b + c + d\n    if n == 11:\n        return a + b + c + d + a + b + c + d + a + b + c + d + a\n    if n == 12:\n        return a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d\n    if n == 13:\n        return a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a +"
    },
    {
        "number": 3723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(x) for x in stdin.readline().split()]\n    s.sort()\n    s.reverse()\n    k = 1\n    while k < n:\n        if gcd(s[0], s[k]) == 1:\n            s.pop(k)\n            k -= 1\n        k += 1\n    return str(len(s))\n\ndef"
    },
    {
        "number": 3724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin[1:]\n    A = S.count(\"A\")\n    B = S.count(\"B\")\n    C = S.count(\"C\")\n    return (A * B * C) % (10 ** 9 + 7)"
    },
    {
        "number": 3725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline().strip())\n    h_1, a_1 = map(int, stdin.readline().strip().split())\n    x_1, y_1 = map(int, stdin.readline().strip().split())\n    h_2, a_2 = map(int, stdin.readline().strip().split())\n    x_2, y_2 = map(int, stdin.readline().strip().split())\n    if h_1 == a_1 and h_2 == a_2:\n        return -1\n    if h_1 == a_1:\n        return (x_2 - x_1) % m\n    if h_2 == a_2:\n        return (y_2 - y_1) % m\n    return (x_2 - x_1) % m + (y_2 - y_1) % m"
    },
    {
        "number": 3726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = list(map(int, stdin.readline().strip().split()))\n    p = 3\n    while p <= n:\n        for i in range(0, n, p):\n            cards[i:i+p] = [x ^ 1 for x in cards[i:i+p]]\n        p += 2\n    return str(n - sum(cards))"
    },
    {
        "number": 3727,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a + b + c + d!= 10:\n        return \"NO\"\n    if a == 0:\n        return \"YES\" + \" \" + \"0\" * (b + c + d)\n    if b == 0:\n        return \"YES\" + \" \" + \"1\" * (a + c + d)\n    if c == 0:\n        return \"YES\" + \" \" + \"2\" * (a + b + d)\n    if d == 0:\n        return \"YES\" + \" \" + \"3\" * (a + b + c)\n    return \"NO\""
    },
    {
        "number": 3728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    table = [list(map(int, stdin.split())) for _ in range(n)]\n    for row in table:\n        row.sort()\n    for i in range(n):\n        for j in range(m):\n            if table[i][j]!= i + 1:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 3729,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f, w, h = [int(x) for x in stdin.split()]\n    if f == 0:\n        return \"0\"\n    if f == 1:\n        return \"1\"\n    if f == 2:\n        return \"2\"\n    if f == 3:\n        return \"3\"\n    if f == 4:\n        return \"4\"\n    if f == 5:\n        return \"5\"\n    if f == 6:\n        return \"6\"\n    if f == 7:\n        return \"7\"\n    if f == 8:\n        return \"8\"\n    if f == 9:\n        return \"9\"\n    if f == 10:\n        return \"10\"\n    if f == 11:\n        return \"11\"\n    if f == 12:\n        return \"12\"\n    if f == 13:\n        return \"13\"\n    if f == 14:\n        return \"14\"\n    if f == 15:\n        return \"15\"\n    if f == 16:\n        return \"16\"\n    if f == 17:\n        return \"17\"\n    if f == 18:\n        return \"18\"\n    if f == 19:\n        return \"19\"\n    if f == 20:\n        return \"20\"\n    if f == 21:\n        return \"21\"\n    if f == 22:\n        return \"22\"\n    if f == 23:\n        return \"23\"\n    if f == 24:\n        return \"24\"\n    if f == 25:\n        return \"25\"\n    if f == 26:\n        return \"26\"\n    if f == 27:\n        return \"27\"\n    if f == 28:\n        return \"28\"\n    if f == 29:\n        return \"29\"\n    if f == 30:\n        return \"30\"\n    if f == 31:\n        return \"31\"\n    if f == 32:\n        return \"32\"\n    if f == 33:\n        return \"33\"\n    if f == 34:\n        return \"34\"\n    if f == 35:\n        return \"35\"\n    if f == 36:\n        return \"36\"\n    if f == 37:\n        return \"37\"\n    if f == 38:\n        return \"38\"\n    if f == 39:\n        return \"39\"\n    if f == 40:\n        return \"40\"\n    if f == 41:\n        return \"41\"\n    if f == 42:\n        return \"42\"\n    if f == 43:\n        return \"43\"\n    if f == 44:\n        return \"44\"\n    if f == 45:\n        return \"45\"\n    if f == 46:\n        return \"46\"\n    if f == 47:\n        return \"47\"\n    if f == 48:\n        return \"48\"\n    if f == 49:\n        return \"49\"\n    if f == 50:\n        return \"50\"\n    if f == 51:\n        return \"51\"\n    if f == 52:\n        return \"52\"\n    if f == 53:\n        return \"53\"\n    if f == 54:\n        return \"54\"\n    if f == 55:\n        return \"55\"\n    if f == 56:\n        return \"56\"\n    if f == 57:\n        return \"57\"\n    if f == 58:\n        return \"58\"\n    if f == 59:\n        return \"59\"\n    if f == 60:\n        return \"60\"\n    if f == 61:\n        return \"61\"\n    if f == 62:\n        return \"62\"\n    if f == 63:\n        return \"63\"\n    if f == 64:\n        return \"64\"\n    if f == 65:\n        return \"65\"\n    if f == 66:\n        return \"66\"\n    if f == 67:\n        return \"67\"\n    if f == 68:\n        return \"68\"\n    if f == 69:\n        return \"69\"\n    if f == 70:\n        return \"70\"\n    if f == 71:\n        return \"71\"\n    if f == 72:\n        return \"72\"\n    if f == 73:\n        return \"73\"\n    if f == 74:\n        return \"74\"\n    if f == 75:\n        return \"75\"\n    if f == 76:\n        return \"76\"\n    if f == 77:\n        return \"77\"\n    if f == 78:\n        return \"78\"\n    if f == 79:\n        return \"79\"\n    if f == 80:\n        return \"80\"\n    if f == 81:\n        return \"81\"\n    if f == 82:\n        return \"82\"\n    if f == 83:\n        return \"83\"\n    if f == 84:\n        return \"84\"\n    if f == 85:\n        return \"85\"\n    if f == 86:\n        return \"86\"\n    if f == 87:\n        return \"87\"\n    if f == 88:\n        return \"88\"\n    if f == 89:\n        return \"89\"\n    if f == 90:\n        return \"90\"\n    if f == 91:\n        return \"91\"\n    if f == 92:\n        return \"92\"\n    if f == 93:\n        return \"93\"\n    if f == 94:\n        return \"94\"\n    if f == 95:\n        return \"95\"\n    if f == 96:\n        return \"96\"\n    if f == 97:\n        return \"97\"\n    if f == 98:\n        return \"98\"\n    if f == 99:\n        return \"99\"\n    if f == 100:\n        return \"100\"\n    if f == 101:\n        return \"101\"\n    if f == 102:\n        return \"102\"\n    if f == 103:\n        return \"103\"\n    if f == 104:\n        return \"104\"\n    if f == 105:\n        return \"105\"\n    if f == 106:\n        return \"106\"\n    if f == 107:\n        return \"107\"\n    if f == 108:\n        return \"108\"\n    if f == 109:\n        return \"109\"\n    if f == 110:\n        return \"110\"\n    if f == 111:\n        return \"111\"\n    if f == 112:\n        return \"112\"\n    if f == 113:\n        return \"113\"\n    if f == 114:\n        return \"114\"\n    if f == 115:\n        return \"115\"\n    if f == 116:\n        return \"116\"\n    if f == 117:\n        return \"117\"\n    if f == 118:\n        return \"118\"\n    if f == 119:\n        return \"119\"\n    if f == 120:\n        return \"120\"\n    "
    },
    {
        "number": 3730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] - a[i] > max_len:\n                max_len = a[j] - a[i]\n    return str(max_len)\n\nassert(solution('''6\n7 2 3 1 5 6''') == '5')\nassert(solution('''1\n1''') == '0')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '9')\nassert(solution('''10"
    },
    {
        "number": 3731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, l, r = [int(x) for x in stdin.split()]\n    s = stdin[:a]\n    while l < r:\n        s += stdin[a:a + b]\n        a += b\n        l += b\n        r -= b\n    return s"
    },
    {
        "number": 3732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, m = map(int, stdin.split())\n    if x == y:\n        return str(-1)\n    if x > m or y > m:\n        return str(-1)\n    if x == 0:\n        return str(y)\n    if y == 0:\n        return str(x)\n    if x == m:\n        return str(y)\n    if y == m:\n        return str(x)\n    if x > m - y:\n        return str(x - y)\n    if y > m - x:\n        return str(y - x)\n    return str(0)"
    },
    {
        "number": 3733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, I = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    l, r = 1, max(a)\n    while l < r:\n        m = (l + r) // 2\n        if sum(1 for x in a if x < m) > n * m:\n            r = m\n        else:\n            l = m + 1\n    return str(l)\n"
    },
    {
        "number": 3734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '4'\n    if n == 4:\n        return '7'\n    if n == 5:\n        return '10'\n    if n == 6:\n        return '13'\n    if n == 7:\n        return '16'\n    if n == 8:\n        return '19'\n    if n == 9:\n        return '22'\n    if n == 10:\n        return '25'\n    if n == 11:\n        return '28'\n    if n == 12:\n        return '31'\n    if n == 13:\n        return '34'\n    if n == 14:\n        return '37'\n    if n == 15:\n        return '40'\n    if n == 16:\n        return '43'\n    if n == 17:\n        return '46'\n    if n == 18:\n        return '49'\n    if n == 19:\n        return '52'\n    if n == 20:\n        return '55'\n    if n == 21:\n        return '58'\n    if n == 22:\n        return '61'\n    if n == 23:\n        return '64'\n    if n == 24:\n        return '67'\n    if n == 25:\n        return '70'\n    if n == 26:\n        return '73'\n    if n == 27:\n        return '76'\n    if n == 28:\n        return '79'\n    if n == 29:\n        return '82'\n    if n == 30:\n        return '85'\n    if n == 31:\n        return '88'\n    if n == 32:\n        return '91'\n    if n == 33:\n        return '94'\n    if n == 34:\n        return '97'\n    if n == 35:\n        return '100'\n    if n == 36:\n        return '103'\n    if n == 37:\n        return '106'\n    if n == 38:\n        return '109'\n    if n == 39:\n        return '112'\n    if n == 40:\n        return '115'\n    if n == 41:\n        return '118'\n    if n == 42:\n        return '121'\n    if n == 43:\n        return '124'\n    if n == 44:\n        return '127'\n    if n == 45:\n        return '130'\n    if n == 46:\n        return '133'\n    if n == 47:\n        return '136'\n    if n == 48:\n        return '139'\n    if n == 49:\n        return '142'\n    if n == 50:\n        return '145'\n    if n == 51:\n        return '148'\n    if n == 52:\n        return '151'\n    if n == 53:\n        return '154'\n    if n == 54:\n        return '157'\n    if n == 55:\n        return '160'\n    if n == 56:\n        return '163'\n    if n == 57:\n        return '166'\n    if n == 58:\n        return '169'\n    if n == 59:\n        return '172'\n    if n == 60:\n        return '175'\n    if n == 61:\n        return '178'\n    if n == 62:\n        return '181'\n    if n == 63:\n        return '184'\n    if n == 64:\n        return '187'\n    if n == 65:\n        return '190'\n    if n == 66:\n        return '193'\n    if n == 67:\n        return '196'\n    if n == 68:\n        return '199'\n    if n == 69:\n        return '202'\n    if n == 70:\n        return '205'\n    if n == 71:\n        return '208'\n    if n == 72:\n        return '211'\n    if n == 73:\n        return '214'\n    if n == 74:\n        return '217'\n    if n == 75:\n        return '220'\n    if n == 76:\n        return '223'\n    if n == 77:\n        return '226'\n    if n == 78:\n        return '229'\n    if n == 79:\n        return '232'\n    if n == 80:\n        return '235'\n    if n == 81:\n        return '238'\n    if n == 82:\n        return '241'\n    if n == 83:\n        return '244'\n    if n == 84:\n        return '247'\n    if n == 85:\n        return '250'\n    if n == 86:\n        return '253'\n    if n == 87:\n        return '256'\n    if n == 88:\n        return '259'\n    if n == 89:\n        return '262'\n    if n == 90:\n        return '265'\n    if n == 91:\n        return '268'\n    if n == 92:\n        return '271'\n    if n == 93:\n        return '274'\n    if n == 94:\n        return '277'\n    if n == 95:\n        return '280'\n    if n == 96:\n        return '283'\n    if n == 97:\n        return '286'\n    if n == 98:\n        return '289'\n    if n == 99:\n        return '292'\n    if n == 100:\n        return '295'\n    if n == 101:\n        return '298'\n    if n == 102:\n        return '301'\n    if n == 103:\n        return '304'\n    if n == 104:\n        return '307'\n    if n == 105:\n        return '310'\n    if n == 106:\n        return '313'\n    if n == 107:\n        return '316'\n    if n == 108:\n        return '319'\n    if n == 109:\n        return '322'\n    if n == 110:\n        return '325'\n    if n == 111:\n        return '328'\n    if n == 112:\n        return '331'\n    if n == 113:\n        return '334'\n    if n == 114:\n        return '337'\n    if n == 115:\n        return '340'\n    if n == 116:\n        return '343'\n    if n == 117:\n        return '346'\n    if n == 118:\n        return '349'\n    if n == 119:\n        return '352'\n    if n == 120:\n        return '355'\n    if n == 121:\n        return '358'\n    if n == 122:\n        return '361'\n    if n == 123:\n        return '364'\n    if n == 124:\n        return '367'\n    if n == 125:\n        return '370'\n    if n == 126:\n        return '373'\n    if n == 127:\n        return '376'\n    if n == 128:\n"
    },
    {
        "number": 3736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == stdin[::-1] else 'NO'"
    },
    {
        "number": 3737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] > a[i-1] and a[i] > a[i+1]:\n            count += 1\n    return str(count)\n\nassert(solution('''2\n1 5''') == '0')\nassert(solution('''3\n1 2 5''') == '1')\nassert(solution('''4\n1 2 3 4''') == '2')\nassert(solution('''5\n1 2 3 4 5''') == '3')\nassert(solution('''6\n1 2 3 4 5 6''') == '4')\nassert(solution('''7\n1 2 3 4 5 6 7''') == '5')\nassert(solution('''8\n1 2 3 4 5 6 7 8''') == '6')\nassert(solution('''9\n1 2 3 4 5 6 7 8 9''') == '7')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '8')\nassert(solution('''11\n1 2 3 4 5 6 7 8 9 10 11''') == '9')\nassert(solution('''12\n1 2 3 4 5 6 7 8 9 10 11 12''') == '10')\nassert(solution('''13\n1 2 3 4 5 6 7 8 9 10 11 12 13''') == '11')\nassert(solution('''14\n1 2 3 4 5 6 7 8 9 10 11 12 13 14''') == '12')\nassert(solution('''15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15''') == '13')\nassert(solution('''16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16''') == '14')\nassert(solution('''17\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17''') == '15')\nassert(solution('''18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18''') == '16')\nassert(solution('''19\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == '17')\nassert(solution('''20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''') == '18')\nassert(solution('''21\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''') == '19')\nassert(solution('''22\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''') == '20')\nassert(solution('''23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23''') == '21')\nassert(solution('''24\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''') == '22')\nassert(solution('''25\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '23')\nassert(solution('''26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26''') == '24')\nassert(solution('''27\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27''') == '25')\nassert(solution('''28\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28''') == '26')\nassert(solution('''29\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29''') == '27')\nassert(solution('''30\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30''') == '28')\nassert(solution('''31\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31''') == '29')\nassert(solution('''32\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32''') == '30')\nassert(solution('''33\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33''') == '31')\nassert(solution('''34\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34''') == '32')\nassert(solution('''35\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35''') == '33')\nassert(solution('''36\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36''') == '34')\nassert(solution('''37\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37''') == '35')\nassert(solution('''38\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38''') == '36')\nassert(solution('''39\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39''') == '37')\nassert(solution('''40\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40''') == '38')\nassert(solution('''41\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41''') == '39')\nassert(solution('''42\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20"
    },
    {
        "number": 3738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == \"RU\" else \"No\""
    },
    {
        "number": 3739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 3 7\")\n    '1'\n    >>> solution(\"10   3   7\")\n    '1'\n    >>> solution(\"314\")\n    '0'\n    >>> solution(\"159 265\")\n    '0'\n    >>> solution(\"358\")\n    '0'\n    >>> solution(\"22 19 3\")\n    '1'\n    >>> solution(\"60\")\n    '1'\n    >>> solution(\"   60\")\n    '1'\n    >>> solution(\"   60   \")\n    '1'\n    >>> solution(\"   60   3   \")\n    '1'\n    >>> solution(\"   60   3   7   \")\n    '1'\n    >>> solution(\"   60   3   7   3   \")\n    '0'\n    >>> solution(\"   60   3   7   3   3   \")\n    '0'\n    >>> solution(\"   60   3   7   3   3   3   \")\n    '0'\n    >>> solution(\"   60   3   7   3   3   3   3   \")\n    '0'\n    >>> solution(\"   60   3   7   3   3   3   3   3   \")\n    '0'\n    >>> solution(\"   60   3   7   3   3   3   3   3   3   \")\n    '0'\n    >>> solution(\"   60   3   7   3   3   3   3   3   3   3   \")\n    '0'\n    >>> solution(\"   60   3   7   3   3   3   3   3   3   3   3   \")\n    '0'\n    >>> solution(\"   60   3   7   3   3   3   3   3   3   3   3   3   \")\n    '0'\n    >>> solution(\"   60   3   7   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   "
    },
    {
        "number": 3740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(9 * 10 ** (n - 1))"
    },
    {
        "number": 3741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i] & numbers[j] == 0:\n                graph[i].append(j)\n                graph[j].append(i)\n    visited = [False] * n\n    cycle = []\n    for i in range(n):\n        if not visited[i]:\n            cycle = []\n            visited[i] = True\n            cycle.append(i)\n            cycle_len = 1\n            while len(cycle) > 0:\n                node = cycle.pop()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        cycle.append(neighbor)\n                        cycle_len += 1\n            if cycle_len > len(cycle):\n                return cycle_len\n    return -1"
    },
    {
        "number": 3742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    p.sort()\n    pairs = 0\n    for i in range(1, n):\n        if p[i] % 2!= p[i - 1] % 2:\n            pairs += 1\n    return pairs"
    },
    {
        "number": 3743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n)"
    },
    {
        "number": 3744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a_sum = sum(a)\n    b_sum = sum(b)\n    if a_sum < p or b_sum < s:\n        return \"IMPOSSIBLE\"\n    if a_sum > b_sum:\n        return str(a_sum) + \" \" + \" \".join(map(str, a))\n    else:\n        return str(b_sum) + \" \" + \" \".join(map(str, b))"
    },
    {
        "number": 3745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(1, n + 1):\n        graph[i].sort()\n    visited = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            visited[i] = True\n            s = [i]\n            while s:\n                v = s.pop()\n                for u in graph[v]:\n                    if not visited[u]:\n                        visited[u] = True\n                        s.append(u)\n            if len(s) == n:\n                return ''.join(s)\n    return 'No'"
    },
    {
        "number": 3746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [list(map(int, stdin.readline().split())) for _ in range(3)]\n    return str(solution_recursive(n, t))\n\ndef"
    },
    {
        "number": 3747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split(\"Bulbasaur\")))"
    },
    {
        "number": 3748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    S = stdin.strip()\n    for i in range(H):\n        for j in range(W):\n            if S[i][j]!= S[H - 1 - i][W - 1 - j]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 3749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A.append(X)\n    A.sort()\n    A.reverse()\n    A."
    },
    {
        "number": 3750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(x) for x in stdin.split()]\n    if a + b < k:\n        return -1\n    return max(0, (k - a) // (a + b) + 1)\n\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input()) == -1)\nassert(solution(input()) == 1)\nassert(solution(input())"
    },
    {
        "number": 3751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.replace(\" \", \"\").replace(\"\\n\", \"\") == \"a\" * 26 else \"NO\""
    },
    {
        "number": 3752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, d, t = map(int, stdin.split())\n    return str(k * t + d * t / 2)"
    },
    {
        "number": 3753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    island = [list(stdin.strip()) for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    visited[0][0] = True\n    queue = [(0, 0)]\n    while queue:\n        r, c = queue.pop(0)\n        if r == n - 1 and c == m - 1:\n            return str(len(queue))\n        for dr, dc in ((0, 1), (1, 0)):\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and island[nr][nc] == \".\":\n                visited[nr][nc] = True\n                queue.append((nr, nc))\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 3754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    holes = [int(x) for x in stdin.readline().split()]\n    return str(solution_helper(n, holes))\n\ndef"
    },
    {
        "number": 3755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    i = 0\n    while len(a) > 1:\n        if i % 2 == 0:\n            a.pop(0)\n        else:\n            a.pop()\n        i += 1\n    return str(max(a))"
    },
    {
        "number": 3756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    grade = float(stdin)\n    \n    for _ in range(t):\n        grade = round(grade, n)\n        \n    return str(grade)\n\nprint(solution(input()))\n"
    },
    {
        "number": 3757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_00, a_01, a_10, a_11 = [int(x) for x in stdin.split()]\n    if a_00 == a_01 == a_10 == a_11 == 0:\n        return \"Impossible\"\n    if a_00 == a_01 == a_10 == a_11 == 1:\n        return \"0110\"\n    if a_00 == a_01 == a_10 == a_11 == 2:\n        return \"0101\"\n    if a_00 == a_01 == a_10 == a_11 == 3:\n        return \"1010\"\n    if a_00 == a_01 == a_10 == a_11 == 4:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 5:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 6:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 7:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 8:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 9:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 10:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 11:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 12:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 13:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 14:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 15:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 16:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 17:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 18:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 19:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 20:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 21:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 22:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 23:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 24:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 25:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 26:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 27:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 28:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 29:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 30:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 31:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 32:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 33:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 34:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 35:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 36:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 37:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 38:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 39:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 40:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 41:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 42:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 43:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 44:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 45:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 46:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 47:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 48:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 49:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 50:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 51:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 52:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 53:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 54:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 55:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 56:\n        return \"1110\"\n    if a_00 == a_01 == a_10 == a_11 == 57:\n        return \"1111\"\n    if a_00 == a_01 == a_10 == a_11 == 58:\n        return \"0111\"\n    if a_00 == a_01 == a_10 == a_11 == 59:\n        return \"1011\"\n    if a_00 == a_01 == a_10 == a_11 == 60:\n        return \"1101\"\n    if a_00 == a_01 == a_10 == a_11 == 61:\n        return \"1110\"\n    if a_00 == a_01 == a_10 =="
    },
    {
        "number": 3758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    field = stdin.readline().strip()\n    field = [field[i:i + n] for i in range(0, len(field), n)]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field[0]))]\n    field = [[field[i][j] for i in range(len(field))] for j in range(len(field["
    },
    {
        "number": 3759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)\n\nassert(solution('') == '0')\nassert(solution('1') == '4')\nassert(solution('2') == '8')\nassert(solution('3') == '16')\nassert(solution('4') == '32')\nassert(solution('5') == '64')\nassert(solution('6') == '128')\nassert(solution('7') == '256')\nassert(solution('8') == '512')\nassert(solution('9') == '1024')\nassert(solution('10') == '2048')\nassert(solution('11') == '4096')\nassert(solution('12') == '8192')\nassert(solution('13') == '16384')\nassert(solution('14') == '32768')\nassert(solution('15') == '65536')\nassert(solution('16') == '131072')\nassert(solution('17') == '262144')\nassert(solution('18') == '524288')\nassert(solution('19') == '1048576')\nassert(solution('20') == '2097152')\nassert(solution('21') == '4194304')\nassert(solution('22') == '8388608')\nassert(solution('23') == '16777216')\nassert(solution('24') == '33554432')\nassert(solution('25') == '67108864')\nassert(solution('26') == '134217728')\nassert(solution('27') == '268435456')\nassert(solution('28') == '536870912')\nassert(solution('29') == '1073741824')\nassert(solution('30') == '2147483648')\nassert(solution('31') == '4294967296')\nassert(solution('32') == '8589934592')\nassert(solution('33') == '17179869184')\nassert(solution('34') == '34359738368')\nassert(solution('35') == '68719476736')\nassert(solution('36') == '137438953472')\nassert(solution('37') == '274877906944')\nassert(solution('38') == '536870911')\nassert(solution('39') == '1073741825')\nassert(solution('40') == '2199023255552')\nassert(solution('41') == '8796093022208')\nassert(solution('42') == '17592186044416')\nassert(solution('43') == '35184372088832')\nassert(solution('44') == '70368744177664')\nassert(solution('45') == '140737488355328')\nassert(solution('46') == '281474976710656')\nassert(solution('47') == '562949953421312')\nassert(solution('48') == '1125899906842624')\nassert(solution('49') == '2251799813685248')\nassert(solution('50') == '7664')\nassert(solution('51') == '137438953472')\nassert(solution('52') == '274877906944')\nassert(solution('53') == '536870911')\nassert(solution('54') == '1073741825')\nassert(solution('55') == '2199023255552')\nassert(solution('56') == '8796093022208')\nassert(solution('57') == '17592186044416')\nassert(solution('58') == '35184372088832')\nassert(solution('59') == '70368744177664')\nassert(solution('60') == '140737488355328')\nassert(solution('61') == '281474976710656')\nassert(solution('62') == '562949953421312')\nassert(solution('63') == '1125899906842624')\nassert(solution('64') == '2251799813685248')\nassert(solution('65') == '7664')\nassert(solution('66') == '137438953472')\nassert(solution('67') == '274877906944')\nassert(solution('68') == '536870911')\nassert(solution('69') == '1073741825')\nassert(solution('70') == '2199023255552')\nassert(solution('71') == '8796093022208')\nassert(solution('72') == '17592186044416')\nassert(solution('73') == '35184372088832')\nassert(solution('74') == '70368744177664')\nassert(solution('75') == '140737488355328')\nassert(solution('76') == '281474976710656')\nassert(solution('77') == '562949953421312')\nassert(solution('78') == '1125899906842624')\nassert(solution('79') == '2251799813685248')\nassert(solution('80') == '7664')\nassert(solution('81') == '137438953472')\nassert(solution('82') == '274877906944')\nassert(solution('83') == '536870911')\nassert(solution('84') == '1073741825')\nassert(solution('85') == '2199023255552')\nassert(solution('86') == '8796093022208')\nassert(solution('87') == '17592186044416')\nassert(solution('88') == '35184372088832')\nassert(solution('89') == '70368744177664')\nassert(solution('90') == '140737488355328')\nassert(solution('91') == '281474976710656')\nassert(solution('92') == '562949953421312')\nassert(solution('93') == '1125899906842624')\nassert(solution('94') == '2251799813685248')\nassert(solution('95') == '7664')\nassert(solution('96') == '137438953472')\nassert(solution('97') == '274877906944')\nassert(solution('98') == '536870911')\nassert(solution('99') == '1073741825')\nassert(solution('100') == '2199023255552')\nassert(solution('101') == '8796093022208')\nassert(solution('102') == '17592186044416')\nassert(solution('103') == '35184372088832')\nassert(solution('104') == '70368744177664')\nassert(solution('105') == '140737488355328')\nassert(solution('106') == '281474976710656')\nassert(solution('107') == '562949953421312')\nassert(solution('108') == '1125899906842624')\nassert(solution('109') == '2251799813685248')\nassert(solution('110"
    },
    {
        "number": 3760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, a, b = map(int, stdin.split())\n    if a == 1:\n        return '{} {} {} {}'.format(x, y, x + b - 1, y + m - 1)\n    if b == 1:\n        return '{} {} {} {}'.format(x, y, x + a - 1, y + m - 1)\n    if a == b:\n        return '{} {} {} {}'.format(x, y, x + a - 1, y + m - 1)\n    if a > b:\n        return '{} {} {} {}'.format(x, y, x + a - 1, y + m - 1)\n    if a < b:\n        return '{} {} {} {}'.format(x, y, x + b - 1, y + m - 1)\n    return '{} {} {} {}'.format(x, y, x + a - 1, y + m - 1)"
    },
    {
        "number": 3761,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_achievable(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 3762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return str(bin(k).count('1'))"
    },
    {
        "number": 3763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sizes = list(map(int, stdin.readline().split()))\n    p = int(stdin.readline())\n    return str(1.0 * sum(sizes) / n)\n\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3\n1 2 3\n3\n''') == '1.3333333333')\nassert(solution('''3"
    },
    {
        "number": 3764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    rangers = list(map(int, stdin.split()))\n    rangers.sort()\n    rangers_strength = [0] * n\n    for i in range(n):\n        rangers_strength[i] = rangers[i] ^ x\n    rangers_strength.sort()\n    return''.join(map(str, [rangers_strength[-1], rangers_strength[0]]))"
    },
    {
        "number": 3765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 3766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = stdin.split()\n    cards_dict = {}\n    for card in cards:\n        color, value = card[0], int(card[1])\n        if color not in cards_dict:\n            cards_dict[color] = [value]\n        else:\n            cards_dict[color].append(value)\n    for color in cards_dict:\n        cards_dict[color].sort()\n    result = 0\n    for color in cards_dict:\n        for value in cards_dict[color]:\n            result += len(cards_dict[color]) - cards_dict[color].index(value)\n    return str(result)"
    },
    {
        "number": 3767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    i = 0\n    j = 0\n    k = 0\n    t = 0\n    while i < n and j < n:\n        if a[i] <= b[j]:\n            k += 1\n            i += 1\n        else:\n            t += j + 1\n            j += 1\n    return str(k) +'' + str(t)"
    },
    {
        "number": 3768,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 0 or m == 0:\n        return 'Impossible'\n    if n == 1:\n        return '1A' * m\n    if m == 1:\n        return '1B' * n\n    if n == m:\n        return '1' * n\n    if n > m:\n        return '1' * n + 'A' * (n - m)\n    if m > n:\n        return '1' * m + 'B' * (m - n)\n    return 'Impossible'"
    },
    {
        "number": 3769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, k = map(int, stdin.split())\n    return str(pow(2, k, p))\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 3770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    u = [int(x) for x in stdin.split()]\n    v = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        graph[u[i] - 1].append(v[i] - 1)\n        graph[v[i] - 1].append(u[i] - 1)\n    visited = [False] * n\n    profit = 0\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            profit += abs(a[i])\n            for j in graph[i]:\n                visited[j] = True\n                profit += abs(b[j])\n    return str(profit)"
    },
    {
        "number": 3771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [list(stdin.strip()) for _ in range(H)]\n    leaves = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == 'S':\n                leaves += 1\n    if leaves == 0:\n        return '-1'\n    if leaves == 1:\n        return '0'\n    if leaves == 2:\n        return '1'\n    if leaves == 3:\n        return '2'\n    if leaves == 4:\n        return '3'\n    if leaves == 5:\n        return '4'\n    if leaves == 6:\n        return '5'\n    if leaves == 7:\n        return '6'\n    if leaves == 8:\n        return '7'\n    if leaves == 9:\n        return '8'\n    if leaves == 10:\n        return '9'\n    if leaves == 11:\n        return '10'\n    if leaves == 12:\n        return '11'\n    if leaves == 13:\n        return '12'\n    if leaves == 14:\n        return '13'\n    if leaves == 15:\n        return '14'\n    if leaves == 16:\n        return '15'\n    if leaves == 17:\n        return '16'\n    if leaves == 18:\n        return '17'\n    if leaves == 19:\n        return '18'\n    if leaves == 20:\n        return '19'\n    if leaves == 21:\n        return '20'\n    if leaves == 22:\n        return '21'\n    if leaves == 23:\n        return '22'\n    if leaves == 24:\n        return '23'\n    if leaves == 25:\n        return '24'\n    if leaves == 26:\n        return '25'\n    if leaves == 27:\n        return '26'\n    if leaves == 28:\n        return '27'\n    if leaves == 29:\n        return '28'\n    if leaves == 30:\n        return '29'\n    if leaves == 31:\n        return '30'\n    if leaves == 32:\n        return '31'\n    if leaves == 33:\n        return '32'\n    if leaves == 34:\n        return '33'\n    if leaves == 35:\n        return '34'\n    if leaves == 36:\n        return '35'\n    if leaves == 37:\n        return '36'\n    if leaves == 38:\n        return '37'\n    if leaves == 39:\n        return '38'\n    if leaves == 40:\n        return '39'\n    if leaves == 41:\n        return '40'\n    if leaves == 42:\n        return '41'\n    if leaves == 43:\n        return '42'\n    if leaves == 44:\n        return '43'\n    if leaves == 45:\n        return '44'\n    if leaves == 46:\n        return '45'\n    if leaves == 47:\n        return '46'\n    if leaves == 48:\n        return '47'\n    if leaves == 49:\n        return '48'\n    if leaves == 50:\n        return '49'\n    if leaves == 51:\n        return '50'\n    if leaves == 52:\n        return '51'\n    if leaves == 53:\n        return '52'\n    if leaves == 54:\n        return '53'\n    if leaves == 55:\n        return '54'\n    if leaves == 56:\n        return '55'\n    if leaves == 57:\n        return '56'\n    if leaves == 58:\n        return '57'\n    if leaves == 59:\n        return '58'\n    if leaves == 60:\n        return '59'\n    if leaves == 61:\n        return '60'\n    if leaves == 62:\n        return '61'\n    if leaves == 63:\n        return '62'\n    if leaves == 64:\n        return '63'\n    if leaves == 65:\n        return '64'\n    if leaves == 66:\n        return '65'\n    if leaves == 67:\n        return '66'\n    if leaves == 68:\n        return '67'\n    if leaves == 69:\n        return '68'\n    if leaves == 70:\n        return '69'\n    if leaves == 71:\n        return '70'\n    if leaves == 72:\n        return '71'\n    if leaves == 73:\n        return '72'\n    if leaves == 74:\n        return '73'\n    if leaves == 75:\n        return '74'\n    if leaves == 76:\n        return '75'\n    if leaves == 77:\n        return '76'\n    if leaves == 78:\n        return '77'\n    if leaves == 79:\n        return '78'\n    if leaves == 80:\n        return '79'\n    if leaves == 81:\n        return '80'\n    if leaves == 82:\n        return '81'\n    if leaves == 83:\n        return '82'\n    if leaves == 84:\n        return '83'\n    if leaves == 85:\n        return '84'\n    if leaves == 86:\n        return '85'\n    if leaves == 87:\n        return '86'\n    if leaves == 88:\n        return '87'\n    if leaves == 89:\n        return '88'\n    if leaves == 90:\n        return '89'\n    if leaves == 91:\n        return '90'\n    if leaves == 92:\n        return '91'\n    if leaves == 93:\n        return '92'\n    if leaves == 94:\n        return '93'\n    if leaves == 95:\n        return '94'\n    if leaves == 96:\n        return '95'\n    if leaves == 97:\n        return '96'\n    if leaves == 98:\n        return '97'\n    if leaves == 99:\n        return '98'\n    if leaves == 100:\n        return '99'\n    if leaves == 101:\n        return '100'\n    if leaves == 102:\n        return '101'\n    if leaves == 103:\n        return '102'\n    if leaves == 104:\n        return '103'\n    if leaves == 105:\n        return '104'\n    if leaves == 106:\n        return '105'\n    if leaves == 107:\n        return '106'\n    if leaves == 108:\n        return '107'\n    if leaves == 109:\n        return '108'\n    if leaves == 110:\n        return '109'\n    if leaves == 111:\n        return '110'\n    if leaves == 112:\n        return '111'\n    if leaves == 113:\n        return '112'\n    if leaves == 114:\n        return '113'\n    if leaves == 115:\n        return '114'\n    if leaves == 116:\n        return '115'\n    if leaves"
    },
    {
        "number": 3772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a / b))"
    },
    {
        "number": 3773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    K = [int(x) for x in stdin.readline().split()]\n    A.sort()\n    K.sort()\n    A.reverse()\n    K.reverse()\n    takahashi = 0\n    aoki = 0\n    for i in range(N):\n        if takahashi < A[i] and aoki < K[i]:\n            return \"Aoki\"\n        if takahashi < A[i] and aoki >= K[i]:\n            takahashi += A[i]\n            aoki -= K[i]\n        if takahashi >= A[i] and aoki < K[i]:\n            aoki += K[i]\n            takahashi -= A[i]\n    return \"Takahashi\""
    },
    {
        "number": 3774,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(n * m - 2)"
    },
    {
        "number": 3775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    pairs_first = [set(map(int, stdin.split()[i:i + 2])) for i in range(0, n * 2, 2)]\n    pairs_second = [set(map(int, stdin.split()[i:i + 2])) for i in range(1, m * 2, 2)]\n    for i in range(len(pairs_first)):\n        for j in range(len(pairs_second)):\n            if pairs_first[i].intersection(pairs_second[j]):\n                return str(pairs_first[i].intersection(pairs_second[j]).pop())\n    return '-1'"
    },
    {
        "number": 3776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 3777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    x = int(stdin.split()[-1])\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = [int(x) for x in stdin.split()]\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    def dfs(u, visited, weight):\n        if u in visited:\n            return 0\n        visited.add(u)\n        for v, w in graph[u]:\n            if v not in visited:\n                weight += w\n                weight += dfs(v, visited, weight)\n        return weight\n    \n    visited = set()\n    ans = 0\n    for u in range(n):\n        if u not in visited:\n            ans += dfs(u, visited, 0)\n    return str(ans % (10**9 + 7))"
    },
    {
        "number": 3778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**5:\n        return -1\n    a = list(map(int, stdin.split()))\n    if len(a)!= n:\n        return -1\n    return solution2(n, a)\n\ndef"
    },
    {
        "number": 3779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % k == a[j] % k:\n                res.append(a[i] // k)\n    return''.join(map(str, res))"
    },
    {
        "number": 3780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    v_max, t = [int(x) for x in stdin.split()]\n    v_x, v_y = [int(x) for x in stdin.split()]\n    w_x, w_y = [int(x) for x in stdin.split()]\n    v_max_sq = v_max ** 2\n    v_x_sq = v_x ** 2\n    v_y_sq = v_y ** 2\n    w_x_sq = w_x ** 2\n    w_y_sq = w_y ** 2\n    v_max_sq_inv = 1 / v_max_sq\n    v_x_sq_inv = 1 / v_x_sq\n    v_y_sq_inv = 1 / v_y_sq\n    w_x_sq_inv = 1 / w_x_sq\n    w_y_sq_inv = 1 / w_y_sq\n    v_x_w_x = v_x * w_x\n    v_y_w_y = v_y * w_y\n    v_x_w_x_sq = v_x_w_x ** 2\n    v_y_w_y_sq = v_y_w_y ** 2\n    v_x_w_x_sq_inv = 1 / v_x_w_x_sq\n    v_y_w_y_sq_inv = 1 / v_y_w_y_sq\n    v_x_w_x_w_y = v_x_w_x * w_y\n    v_y_w_y_w_x = v_y_w_y * w_x\n    v_x_w_x_w_y_sq = v_x_w_x_w_y ** 2\n    v_y_w_y_w_x_sq = v_y_w_y_w_x ** 2\n    v_x_w_x_w_y_sq_inv = 1 / v_x_w_x_w_y_sq\n    v_y_w_y_w_x_sq_inv = 1 / v_y_w_y_w_x_sq\n    v_x_w_x_w_y_w_x_sq_inv = 1 / v_x_w_x_w_y_w_x_sq\n    v_y_w_y_w_x_w_x_sq_inv = 1 / v_y_w_y_w_x_w_x_sq\n    v_x_w_x_w_y_w_x_w_x_sq_inv = 1 / v_x_w_x_w_y_w_x_w_x_sq\n    v_y_w_y_w_x_w_x_w_x_sq_inv = 1 / v_y_w_y_w_x_w_x_w_x_sq\n    v_x_w_x_w_y_w_x_w_x_w_x_sq_inv = 1 / v_x_w_x_w_y_w_x_w_x_w_x_sq\n    v_y_w_y_w_x_w_x_w_x_w_x_sq_inv = 1 / v_y_w_y_w_x_w_x_w_x_w_x_sq\n    v_x_w_x_w_y_w_x_w_x_w_x_w_x_sq_inv = 1 / v_x_w_x_w_y_w_x_w_x_w_x_w_x_sq\n    v_y_w_y_w_x_w_x_w_x_w_x_w_x_sq_inv = 1 / v_y_w_y_w_x_w_x_w_x_w_x_w_x_sq\n    v_x_w_x_w_y_w_x_w_x_w_x_w_x_w_x_sq_inv = 1 / v_x_w_x_w_y_w_x_w_x_w_x_w_x_w_x_sq\n    v_y_w_y_w_x_w_x_w_x_w_x_w_x_w_x_sq_inv = 1 / v_y_w_y_w_x_w_x_w_x_w_"
    },
    {
        "number": 3781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        N = int(stdin)\n        A = [int(x) for x in stdin.split()]\n        print('First' if solve(N, A) == 'Taro' else 'Second')\n\ndef"
    },
    {
        "number": 3782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    x = a[k-1]\n    y = a[0]\n    return str(x-y)"
    },
    {
        "number": 3783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(sum(pow(i, k) for i in range(1, n + 1)))"
    },
    {
        "number": 3784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(solution_aux(n, m))\n\ndef"
    },
    {
        "number": 3785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    return str(sum(p[i] for i in range(1, n)))\n\nassert(solution('''3''') == '1')\nassert(solution('''5''') == '3')\nassert(solution('''18''') == '4')\nassert(solution('''1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4''') == '4')\n'''\n\n'''\n"
    },
    {
        "number": 3787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if a == b:\n        return '-1'\n    if a > b:\n        a, b = b, a\n    if a == 1:\n        return''.join(str(i) for i in range(1, b + 1))\n    if a == 2:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1))\n    if a == 3:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a))\n    if a == 4:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1))\n    if a == 5:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a))\n    if a == 6:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1))\n    if a == 7:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a))\n    if a == 8:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1))\n    if a == 9:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a))\n    if a == 10:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1))\n    if a == 11:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a))\n    if a == 12:\n        return''.join(str(i) for i in range(1, b + 1)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i) for i in range(1, a)) +'' +''.join(str(i) for i in range(b, 0, -1)) +'' +''.join(str(i"
    },
    {
        "number": 3788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"No\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"No\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"No\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"No\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"No\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"No\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"No\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"No\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"No\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"No\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"No\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"No\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"No\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"No\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"No\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"No\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"No\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"No\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"No\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"No\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"No\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"No\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"No\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"No\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"No\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"No\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"No\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"No\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"No\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"No\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"No\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"No\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"No\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"No\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"No\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"No\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"No\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"No\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"No\"\n    if n == 79:\n        return \"Yes\"\n    if n == 80:\n        return \"No\"\n    if n == 81:\n        return \"Yes\"\n    if n == 82:\n        return \"No\"\n    if n == 83:\n        return \"Yes\"\n    if n == 84:\n        return \"No\"\n    if n == 85:\n        return \"Yes\"\n    if n == 86:\n        return \"No\"\n    if n == 87:\n        return \"Yes\"\n    if n == 88:\n        return \"No\"\n    if n == 89:\n        return \"Yes\"\n    if n == 90:\n        return \"No\"\n    if n == 91:\n        return \"Yes\"\n    if n == 92:\n        return \"No\"\n    if n == 93:\n        return \"Yes\"\n    if n == 94:\n        return \"No\"\n    if n == 95:\n        return \"Yes\"\n    if n == 96:\n        return \"No\"\n    if n == 97:\n        return \"Yes\"\n    if n == 98:\n        return \"No\"\n    if n == 99:\n        return \"Yes\"\n    if n == 100:\n        return \"No\"\n    if n == 101:\n        return \"Yes\"\n    if n == 102:\n        return \"No\"\n    if n == 103:\n        return \"Yes\"\n    if n == 104:\n        return \"No\"\n    if n == 105:\n        return \"Yes\"\n    if n == 106:\n        return \"No\"\n    if n == 107:\n        return \"Yes\"\n    if n == 108:\n        return \"No\"\n    if n == 109:\n        return \"Yes\"\n    if n == 110:\n        return \"No\"\n    if n == 111:\n        return \"Yes\"\n    if n == 112:\n        return \"No\"\n    if n == 113:\n        return \"Yes\"\n    if n == 114:\n        return \"No\"\n    if n == 115:\n        return \"Yes\"\n    if n == 116:\n        return \"No\"\n    if n == 117:\n        return \"Yes\"\n    if n == 118:\n        return \"No\"\n    if n == 119:\n        return \"Yes\"\n    if n == 120:\n        return \"No\"\n    if n == 121:\n        return \"Yes\"\n    if n == 122:\n        return \"No\"\n    if n == 123:\n        return \"Yes\"\n    if n == 124"
    },
    {
        "number": 3789,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    gems = [int(x) for x in stdin.readline().strip().split(' ')]\n    gems.sort()\n    gems.reverse()\n    max_yen = 0\n    for i in range(1, n):\n        if gems[i] - gems[i - 1] > 1:\n            max_yen += gems[i] - gems[i - 1] - 1\n    return max_yen"
    },
    {
        "number": 3790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    print(a[0] - n)\n    return str(a[0] - n)"
    },
    {
        "number": 3791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    p.sort()\n    min_dev = float('inf')\n    min_id = 0\n    for i in range(n):\n        dev = abs(p[i] - i)\n        if dev < min_dev:\n            min_dev = dev\n            min_id = i\n    return str(min_dev) +'' + str(min_id)"
    },
    {
        "number": 3792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s, t = stdin.split()\n    return str(max(0, n - len(s) + len(t) - 1))"
    },
    {
        "number": 3793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    if g == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 3795,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = int(stdin.readline())\n    e = int(stdin.readline())\n    return str(min(n // d, n // e, n // 5))"
    },
    {
        "number": 3796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    nums.reverse()\n    nums_len = len(nums)\n    max_len = 0\n    for i in range(nums_len):\n        for j in range(i, nums_len):\n            if nums[i] * nums[j] > max_len:\n                max_len = nums[i] * nums[j]\n                p = nums[i]\n                q = nums[j]\n    return f'{max_len}\\n{p} {q}'\n"
    },
    {
        "number": 3797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l, r = [], []\n    for _ in range(m):\n        l.append(int(stdin.readline()))\n        r.append(int(stdin.readline()))\n    x = [int(stdin.readline()) for _ in range(m)]\n    return str((factorial(n) // (factorial(n - m) * factorial(m))) % (10 ** 9 + 7))\n\ndef"
    },
    {
        "number": 3798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    b = 2\n    while True:\n        if f(b, n) == s:\n            return str(b)\n        elif f(b, n) > s:\n            return '-1'\n        b += 1"
    },
    {
        "number": 3799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 3:\n        return \"First\"\n    if len(s) == 3:\n        return \"Second\"\n    if len(s) == 4:\n        return \"Second\"\n    if len(s) == 5:\n        return \"First\"\n    if len(s) == 6:\n        return \"First\"\n    if len(s) == 7:\n        return \"Second\"\n    if len(s) == 8:\n        return \"First\"\n    if len(s) == 9:\n        return \"Second\"\n    if len(s) == 10:\n        return \"First\"\n    if len(s) == 11:\n        return \"Second\"\n    if len(s) == 12:\n        return \"First\"\n    if len(s) == 13:\n        return \"Second\"\n    if len(s) == 14:\n        return \"First\"\n    if len(s) == 15:\n        return \"Second\"\n    if len(s) == 16:\n        return \"First\"\n    if len(s) == 17:\n        return \"Second\"\n    if len(s) == 18:\n        return \"First\"\n    if len(s) == 19:\n        return \"Second\"\n    if len(s) == 20:\n        return \"First\"\n    if len(s) == 21:\n        return \"Second\"\n    if len(s) == 22:\n        return \"First\"\n    if len(s) == 23:\n        return \"Second\"\n    if len(s) == 24:\n        return \"First\"\n    if len(s) == 25:\n        return \"Second\"\n    if len(s) == 26:\n        return \"First\"\n    if len(s) == 27:\n        return \"Second\"\n    if len(s) == 28:\n        return \"First\"\n    if len(s) == 29:\n        return \"Second\"\n    if len(s) == 30:\n        return \"First\"\n    if len(s) == 31:\n        return \"Second\"\n    if len(s) == 32:\n        return \"First\"\n    if len(s) == 33:\n        return \"Second\"\n    if len(s) == 34:\n        return \"First\"\n    if len(s) == 35:\n        return \"Second\"\n    if len(s) == 36:\n        return \"First\"\n    if len(s) == 37:\n        return \"Second\"\n    if len(s) == 38:\n        return \"First\"\n    if len(s) == 39:\n        return \"Second\"\n    if len(s) == 40:\n        return \"First\"\n    if len(s) == 41:\n        return \"Second\"\n    if len(s) == 42:\n        return \"First\"\n    if len(s) == 43:\n        return \"Second\"\n    if len(s) == 44:\n        return \"First\"\n    if len(s) == 45:\n        return \"Second\"\n    if len(s) == 46:\n        return \"First\"\n    if len(s) == 47:\n        return \"Second\"\n    if len(s) == 48:\n        return \"First\"\n    if len(s) == 49:\n        return \"Second\"\n    if len(s) == 50:\n        return \"First\"\n    if len(s) == 51:\n        return \"Second\"\n    if len(s) == 52:\n        return \"First\"\n    if len(s) == 53:\n        return \"Second\"\n    if len(s) == 54:\n        return \"First\"\n    if len(s) == 55:\n        return \"Second\"\n    if len(s) == 56:\n        return \"First\"\n    if len(s) == 57:\n        return \"Second\"\n    if len(s) == 58:\n        return \"First\"\n    if len(s) == 59:\n        return \"Second\"\n    if len(s) == 60:\n        return \"First\"\n    if len(s) == 61:\n        return \"Second\"\n    if len(s) == 62:\n        return \"First\"\n    if len(s) == 63:\n        return \"Second\"\n    if len(s) == 64:\n        return \"First\"\n    if len(s) == 65:\n        return \"Second\"\n    if len(s) == 66:\n        return \"First\"\n    if len(s) == 67:\n        return \"Second\"\n    if len(s) == 68:\n        return \"First\"\n    if len(s) == 69:\n        return \"Second\"\n    if len(s) == 70:\n        return \"First\"\n    if len(s) == 71:\n        return \"Second\"\n    if len(s) == 72:\n        return \"First\"\n    if len(s) == 73:\n        return \"Second\"\n    if len(s) == 74:\n        return \"First\"\n    if len(s) == 75:\n        return \"Second\"\n    if len(s) == 76:\n        return \"First\"\n    if len(s) == 77:\n        return \"Second\"\n    if len(s) == 78:\n        return \"First\"\n    if len(s) == 79:\n        return \"Second\"\n    if len(s) == 80:\n        return \"First\"\n    if len(s) == 81:\n        return \"Second\"\n    if len(s) == 82:\n        return \"First\"\n    if len(s) == 83:\n        return \"Second\"\n    if len(s) == 84:\n        return \"First\"\n    if len(s) == 85:\n        return \"Second\"\n    if len(s) == 86:\n        return \"First\"\n    if len(s) == 87:\n        return \"Second\"\n    if len(s) == 88:\n        return \"First\"\n    if len(s) == 89:\n        return \"Second\"\n    if len(s) == 90:\n        return \"First\"\n    if len(s) == 91:\n        return \"Second\"\n    if len(s) == 92:\n        return \"First\"\n    if len(s) == 93:\n        return \"Second\"\n    if len(s) == 94:\n        return \"First\"\n    if len(s) == 95:\n        return \"Second\"\n    if len(s) == 96:\n        return \"First\"\n    if len(s) == 97:\n        return \"Second\"\n    if len(s) == 98:\n        return \"First\"\n    if len(s) == 99:\n        return \"Second\"\n    if len(s) == 100:\n        return \"First\"\n    if len(s) == 101:\n        return \"Second\"\n    if len(s) == 102:\n        return \"First\"\n    if len(s) == 103:\n        return \"Second\"\n    if len(s) == 104:\n        return \"First\"\n    if len(s) == 105:\n        return \"Second\"\n    if len(s) == 106:\n        return \"First\"\n    if len(s) == 107:\n        return \"Second\"\n    if len(s) == 108:\n        return \"First\"\n    if len(s) == 109:\n        return \"Second\"\n    if len(s) == 110:\n        return \"First\"\n    if len(s) == 111:\n        return \"Second\"\n    "
    },
    {
        "number": 3800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    s = [int(x) for x in s]\n    s.sort()\n    n = len(s)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] * s[j] > a:\n                break\n            res += (a - s[i] * s[j]) // s[j]\n    return str(res)"
    },
    {
        "number": 3801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    r = [0] * n\n    for i in range(n):\n        if a[i] == 1:\n            r[i] = w[i]\n        else:\n            r[i] = -w[i]\n    return''.join(map(str, r))"
    },
    {
        "number": 3802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, virus = stdin.split('\\n')\n    s_1 = s_1.strip()\n    s_2 = s_2.strip()\n    virus = virus.strip()\n    if len(s_1) == 0 or len(s_2) == 0 or len(virus) == 0:\n        return 0\n    dp = [[0 for _ in range(len(s_2) + 1)] for _ in range(len(s_1) + 1)]\n    for i in range(1, len(s_1) + 1):\n        for j in range(1, len(s_2) + 1):\n            if s_1[i - 1] == s_2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1]\n\nassert(solution('') == 0)\nassert(solution('A') == 1)\nassert(solution('AJKEQSLOBSROFGZ') == 3)\nassert(solution('AA') == 1)\nassert(solution('A') == 1)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZ') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAA') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAO') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJ') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJK') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKL') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOM') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQ') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQR') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRST') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTU') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVW') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWX') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZ') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZY') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYU') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZ') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZO') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJ') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJK') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJKL') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJKLOM') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJKLOMQ') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJKLOMQR') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJKLOMQRST') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJKLOMQRSTU') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJKLOMQRSTUVW') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJKLOMQRSTUVWX') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJKLOMQRSTUVWXZ') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZOJKLOMQRSTUVWXZY') == 3)\nassert(solution('AJKEQSLOBSROFGZOVGURWZLWVLUXTHOZAAOJKLOMQRSTUVWXZYUZ"
    },
    {
        "number": 3803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 3804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(bin(n ^ t).count('1'))"
    },
    {
        "number": 3805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if untangle(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 3806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, x, y = [int(x) for x in stdin.split()]\n    points = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    points.append((p, x, y))\n    points.sort()\n    \n    def get_area(i, j):\n        if i == j:\n            return 0\n        return (points[j][1] - points[i][1]) * (points[j][2] - points[i][2])\n    \n    area = 0\n    for i in range(n):\n        area += get_area(i, i + 1)\n    \n    for i in range(n):\n        area += get_area(i, i + 1)\n    \n    return area"
    },
    {
        "number": 3807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m < 1 or m > 10**15:\n        raise ValueError(\"m must be between 1 and 10^15\")\n    return str(m) + \" \" + str(m)"
    },
    {
        "number": 3808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    if s.count('(') == s.count(')'):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 3809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '0' if k == 50 else '-1'\n    if k == 0:\n        return '0'\n    if k == 50:\n        return '1'\n    if k == 100:\n        return '2'\n    if k == 150:\n        return '3'\n    if k == 200:\n        return '4'\n    if k == 250:\n        return '5'\n    if k == 300:\n        return '6'\n    if k == 350:\n        return '7'\n    if k == 400:\n        return '8'\n    if k == 450:\n        return '9'\n    if k == 500:\n        return '10'\n    if k == 550:\n        return '11'\n    if k == 600:\n        return '12'\n    if k == 650:\n        return '13'\n    if k == 700:\n        return '14'\n    if k == 750:\n        return '15'\n    if k == 800:\n        return '16'\n    if k == 850:\n        return '17'\n    if k == 900:\n        return '18'\n    if k == 950:\n        return '19'\n    if k == 1000:\n        return '20'\n    if k == 1050:\n        return '21'\n    if k == 1100:\n        return '22'\n    if k == 1150:\n        return '23'\n    if k == 1200:\n        return '24'\n    if k == 1250:\n        return '25'\n    if k == 1300:\n        return '26'\n    if k == 1350:\n        return '27'\n    if k == 1400:\n        return '28'\n    if k == 1450:\n        return '29'\n    if k == 1500:\n        return '30'\n    if k == 1550:\n        return '31'\n    if k == 1600:\n        return '32'\n    if k == 1650:\n        return '33'\n    if k == 1700:\n        return '34'\n    if k == 1750:\n        return '35'\n    if k == 1800:\n        return '36'\n    if k == 1850:\n        return '37'\n    if k == 1900:\n        return '38'\n    if k == 1950:\n        return '39'\n    if k == 2000:\n        return '40'\n    if k == 2050:\n        return '41'\n    if k == 2100:\n        return '42'\n    if k == 2150:\n        return '43'\n    if k == 2200:\n        return '44'\n    if k == 2250:\n        return '45'\n    if k == 2300:\n        return '46'\n    if k == 2350:\n        return '47'\n    if k == 2400:\n        return '48'\n    if k == 2450:\n        return '49'\n    if k == 2500:\n        return '50'\n    if k == 2550:\n        return '51'\n    if k == 2600:\n        return '52'\n    if k == 2650:\n        return '53'\n    if k == 2700:\n        return '54'\n    if k == 2750:\n        return '55'\n    if k == 2800:\n        return '56'\n    if k == 2850:\n        return '57'\n    if k == 2900:\n        return '58'\n    if k == 2950:\n        return '59'\n    if k == 3000:\n        return '60'\n    if k == 3050:\n        return '61'\n    if k == 3100:\n        return '62'\n    if k == 3150:\n        return '63'\n    if k == 3200:\n        return '64'\n    if k == 3250:\n        return '65'\n    if k == 3300:\n        return '66'\n    if k == 3350:\n        return '67'\n    if k == 3400:\n        return '68'\n    if k == 3450:\n        return '69'\n    if k == 3500:\n        return '70'\n    if k == 3550:\n        return '71'\n    if k == 3600:\n        return '72'\n    if k == 3650:\n        return '73'\n    if k == 3700:\n        return '74'\n    if k == 3750:\n        return '75'\n    if k == 3800:\n        return '76'\n    if k == 3850:\n        return '77'\n    if k == 3900:\n        return '78'\n    if k == 3950:\n        return '79'\n    if k == 4000:\n        return '80'\n    if k == 4050:\n        return '81'\n    if k == 4100:\n        return '82'\n    if k == 4150:\n        return '83'\n    if k == 4200:\n        return '84'\n    if k == 4250:\n        return '85'\n    if k == 4300:\n        return '86'\n    if k == 4350:\n        return '87'\n    if k == 4400:\n        return '88'\n    if k == 4450:\n        return '89'\n    if k == 4500:\n        return '90'\n    if k == 4550:\n        return '91'\n    if k == 4600:\n        return '92'\n    if k == 4650:\n        return '93'\n    if k == 4700:\n        return '94'\n    if k == 4750:\n        return '95'\n    if k == 4800:\n        return '96'\n    if k == 4850:\n        return '97'\n    if k == 4900:\n        return '98'\n    if k == 4950:\n        return '99'\n    if k == 5000:\n        return '100'\n    if k == 5050:\n        return '101'\n    if k == 5100:\n        return '102"
    },
    {
        "number": 3810,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(solution_naive(n, a))\n\ndef"
    },
    {
        "number": 3811,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    pairs.sort(key=lambda x: x[0])\n    wcd = 1\n    for i in range(1, n):\n        if pairs[i][0] % pairs[i - 1][0] == 0:\n            wcd = pairs[i][0]\n            break\n    return str(wcd)"
    },
    {
        "number": 3812,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    return str(len(s) + len(t) - 2)"
    },
    {
        "number": 3813,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    x = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"POSSIBLE\"\n    if n == 2:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 3:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 4:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 5:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 6:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 7:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 8:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 9:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 10:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 11:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 12:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 13:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 14:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 15:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 16:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 17:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 18:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 19:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 20:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 21:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 22:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 23:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 24:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 25:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 26:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 27:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 28:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 29:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 30:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 31:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 32:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 33:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 34:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 35:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 36:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 37:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 38:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 39:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 40:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 41:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 42:\n        if p[0] == 1:\n            return \"POSSIBLE\"\n        else:\n            return \""
    },
    {
        "number": 3814,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(pow(2, n, m) - 1)"
    },
    {
        "number": 3815,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()[1:]]\n    s = s[:k]\n    s = [1 if x == '+' else -1 for x in s]\n    s = [a**(n - i) * b**i for i in range(k)]\n    s = sum(s)\n    return str(s % (10**9 + 9))"
    },
    {
        "number": 3816,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, l = [int(x) for x in stdin.split()]\n    return str(solution_recursive(a, b, c, l))\n\ndef"
    },
    {
        "number": 3817,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str((2 ** m - 1) % 1000000009)"
    },
    {
        "number": 3818,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b.sort()\n    white = 0\n    black = 0\n    for i in range(N):\n        if a[i] == b[i]:\n            white += 1\n        else:\n            black += 1\n    if white == 0:\n        white = 0\n    else:\n        white = 1\n    if black == 0:\n        black = 0\n    else:\n        black = 1\n    return str(white + black)"
    },
    {
        "number": 3819,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    return str(solution_naive(n, a, b))\n\ndef"
    },
    {
        "number": 3820,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin[:n]\n    t = stdin[n:]\n    if s.count('*') > m:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 3821,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    probabilities = list(map(float, stdin.readline().split()))\n    probabilities.sort(reverse=True)\n    probabilities = probabilities[:n]\n    probabilities = [1 - p for p in probabilities]\n    probabilities.sort(reverse=True)\n    probabilities = probabilities[:n]\n    return '{:.9f}'.format(sum(probabilities))\n\nassert(solution('''4\n0.1 0.2 0.3 0.8\n''') == '0.800000000000')\nassert(solution('''2\n0.1 0.2\n''') == '0.260000000000')\nassert(solution('''1\n0.1\n''') == '0.1')\nassert(solution('''0\n''') == '0')\nassert(solution('''0.1\n''') == '0.1')\nassert(solution('''0.1 0.2 0.3 0.8\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert(solution('''0.1 0.2 0.3 0.8 0.9 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n''') == '0.800000000000')\nassert"
    },
    {
        "number": 3822,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, v_1, v_2, k = map(int, stdin.split())\n    return str(l / (v_1 * k) + l / (v_2 * n))\n\nassert(solution(input()) == '5.0000000000')\nassert(solution(input()) == '4.7142857143')\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3823,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [float(x) for x in stdin.split()]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            a[i] = int(a[i])\n            a[j] = int(a[j])\n            res += abs(a[i] - a[j])\n            a[i] = int(a[i])\n            a[j] = int(a[j])\n    return str(res)"
    },
    {
        "number": 3824,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = [int(x) for x in stdin.split()]\n    x_2, y_2 = [int(x) for x in stdin.split()]\n    return str(abs(x_1 - x_2) + abs(y_1 - y_2))"
    },
    {
        "number": 3825,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solution_naive(n))\n\ndef"
    },
    {
        "number": 3826,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            ans += 1\n        elif a[i] == a[i-1]:\n            ans += 1\n        else:\n            ans += 2\n    return str(ans)"
    },
    {
        "number": 3827,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"a\") == stdin.count(\"b\") else \"NO\"\n\n\"\"\""
    },
    {
        "number": 3828,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    p.sort()\n    return str(p.index(1) + p.index(n) + 2)"
    },
    {
        "number": 3829,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    return str(m * n / (m + n))"
    },
    {
        "number": 3830,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3831,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lawns = [int(x) for x in stdin.readline().split()]\n    lawns.sort()\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append(lawns[-1] + 1)\n    lawns.insert(0, 0)\n    lawns.append"
    },
    {
        "number": 3832,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    hills = [int(x) for x in stdin.readline().split()]\n    hills.sort()\n    hills.reverse()\n    hills = hills[:n]\n    hills.reverse()\n    return''.join(str(x) for x in hills)"
    },
    {
        "number": 3833,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3834,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    if n * m < k:\n        return -1\n    if n * m == k:\n        return 0\n    if n * m == k + 1:\n        return 1\n    if n * m == k + 2:\n        return 2\n    if n * m == k + 3:\n        return 3\n    if n * m == k + 4:\n        return 4\n    if n * m == k + 5:\n        return 5\n    if n * m == k + 6:\n        return 6\n    if n * m == k + 7:\n        return 7\n    if n * m == k + 8:\n        return 8\n    if n * m == k + 9:\n        return 9\n    if n * m == k + 10:\n        return 10\n    if n * m == k + 11:\n        return 11\n    if n * m == k + 12:\n        return 12\n    if n * m == k + 13:\n        return 13\n    if n * m == k + 14:\n        return 14\n    if n * m == k + 15:\n        return 15\n    if n * m == k + 16:\n        return 16\n    if n * m == k + 17:\n        return 17\n    if n * m == k + 18:\n        return 18\n    if n * m == k + 19:\n        return 19\n    if n * m == k + 20:\n        return 20\n    if n * m == k + 21:\n        return 21\n    if n * m == k + 22:\n        return 22\n    if n * m == k + 23:\n        return 23\n    if n * m == k + 24:\n        return 24\n    if n * m == k + 25:\n        return 25\n    if n * m == k + 26:\n        return 26\n    if n * m == k + 27:\n        return 27\n    if n * m == k + 28:\n        return 28\n    if n * m == k + 29:\n        return 29\n    if n * m == k + 30:\n        return 30\n    if n * m == k + 31:\n        return 31\n    if n * m == k + 32:\n        return 32\n    if n * m == k + 33:\n        return 33\n    if n * m == k + 34:\n        return 34\n    if n * m == k + 35:\n        return 35\n    if n * m == k + 36:\n        return 36\n    if n * m == k + 37:\n        return 37\n    if n * m == k + 38:\n        return 38\n    if n * m == k + 39:\n        return 39\n    if n * m == k + 40:\n        return 40\n    if n * m == k + 41:\n        return 41\n    if n * m == k + 42:\n        return 42\n    if n * m == k + 43:\n        return 43\n    if n * m == k + 44:\n        return 44\n    if n * m == k + 45:\n        return 45\n    if n * m == k + 46:\n        return 46\n    if n * m == k + 47:\n        return 47\n    if n * m == k + 48:\n        return 48\n    if n * m == k + 49:\n        return 49\n    if n * m == k + 50:\n        return 50\n    if n * m == k + 51:\n        return 51\n    if n * m == k + 52:\n        return 52\n    if n * m == k + 53:\n        return 53\n    if n * m == k + 54:\n        return 54\n    if n * m == k + 55:\n        return 55\n    if n * m == k + 56:\n        return 56\n    if n * m == k + 57:\n        return 57\n    if n * m == k + 58:\n        return 58\n    if n * m == k + 59:\n        return 59\n    if n * m == k + 60:\n        return 60\n    if n * m == k + 61:\n        return 61\n    if n * m == k + 62:\n        return 62\n    if n * m == k + 63:\n        return 63\n    if n * m == k + 64:\n        return 64\n    if n * m == k + 65:\n        return 65\n    if n * m == k + 66:\n        return 66\n    if n * m == k + 67:\n        return 67\n    if n * m == k + 68:\n        return 68\n    if n * m == k + 69:\n        return 69\n    if n * m == k + 70:\n        return 70\n    if n * m == k + 71:\n        return 71\n    if n * m == k + 72:\n        return 72\n    if n * m == k + 73:\n        return 73\n    if n * m == k + 74:\n        return 74\n    if n * m == k + 75:\n        return 75\n    if n * m == k + 76:\n        return 76\n    if n * m == k + 77:\n        return 77\n    if n * m == k + 78:\n        return 78\n    if n * m == k + 79:\n        return 79\n    if n * m == k + 80:\n        return 80\n    if n * m == k + 81:\n        return 81\n    if n * m == k + 82:\n        return 82\n    if n * m == k + 83:\n        return 83\n    if n * m == k + 84:\n        return 84\n    if n * m == k + 85:\n        return 85\n    if n * m == k + 86:\n        return 86\n    if n * m == k + 87:\n        return 87\n    if n * m == k + 88:\n        return 88\n    if n * m == k + 89:\n        return 89\n    if n * m == k + 90:\n        return 90\n    if n * m == k + 91:\n        return 91\n    if n * m == k + 92:\n        return 92\n    if n * m == k + 93:\n        return 93\n    if n * m == k + 94:\n        return 94\n    if n * m == k + 95:\n        return 95\n    if n * m == k + 96:\n        return 96\n    if n * m == k + 97:\n        return 97\n    if n * m == k + 98:\n        return 98\n    if n * m == k + 99:\n        return 99\n    if n * m == k + 100:\n        return 100\n    if n * m == k + 101:\n        return 101\n    if n * m == k"
    },
    {
        "number": 3835,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    for i in range(n):\n        a[i] = [0] * n\n        for j in range(n):\n            a[i][j] = a[i][j - 1] + a[i - 1][j]\n    return''.join(map(str, a[n - 1]))\n\nassert(solution('''5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2')\nassert(solution('''3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n''') == '9999 10000 9998')\nassert(solution('''4\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n
    },
    {
        "number": 3836,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    influences = [int(stdin.readline()) for _ in range(n)]\n    influences.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        total += influences[i]\n        if total >= n // 2:\n            return str(n - i)\n    return \"0\""
    },
    {
        "number": 3837,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3838,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    q = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 1:\n        if q[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 2:\n        if q[0] == 1:\n            if q[1] == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if q[1] == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n    if k == 3:\n        if q[0] == 1:\n            if q[1] == 1:\n                if q[2] == 1:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                if q[2] == 1:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n        else:\n            if q[1] == 1:\n                if q[2] == 1:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                if q[2] == 1:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n    if k == 4:\n        if q[0] == 1:\n            if q[1] == 1:\n                if q[2] == 1:\n                    if q[3] == 1:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n                else:\n                    if q[3] == 1:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n            else:\n                if q[2] == 1:\n                    if q[3] == 1:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n                else:\n                    if q[3] == 1:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n        else:\n            if q[1] == 1:\n                if q[2] == 1:\n                    if q[3] == 1:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n                else:\n                    if q[3] == 1:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n            else:\n                if q[2] == 1:\n                    if q[3] == 1:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n                else:\n                    if q[3] == 1:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n    if k == 5:\n        if q[0] == 1:\n            if q[1] == 1:\n                if q[2] == 1:\n                    if q[3] == 1:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                else:\n                    if q[3] == 1:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n            else:\n                if q[2] == 1:\n                    if q[3] == 1:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                else:\n                    if q[3] == 1:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n        else:\n            if q[1] == 1:\n                if q[2] == 1:\n                    if q[3] == 1:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                else:\n                    if q[3] == 1:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        if q[4] == 1:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n            else:\n                if q"
    },
    {
        "number": 3839,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y = 1, 1\n    while n > 0:\n        if n % 4 == 0:\n            n -= 4\n            x, y = x + 1, y + 1\n        else:\n            n -= 1\n            x, y = x + 1, y\n    return f'{x} {y}'\n\nassert(solution('''4''') == '1 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7''') == '2 1')\nassert(solution('''7"
    },
    {
        "number": 3840,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '-1'\n    coins = [int(x) for x in stdin.split()]\n    if len(coins)!= n:\n        return '-1'\n    moves = 0\n    while True:\n        moves += 1\n        for i in range(n):\n            if coins[i] == 0:\n                continue\n            coins[i] -= 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            if coins[i] == 0:\n                continue\n            if coins[i] % 2 == 0:\n                coins[i] //= 2\n            else:\n                coins[i] = coins[i] // 2 + 1\n            "
    },
    {
        "number": 3841,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, k = map(int, stdin.split())\n    if p % k == 0:\n        return -1\n    else:\n        return p // k"
    },
    {
        "number": 3842,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(min(sum(a[i] * b[i] for i in range(n)) / (n * p), sum(a[i] * b[i] for i in range(n)) / (n * q)))\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3843,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m)\n\nassert(solution(input()) == '4')\nassert(solution(input()) == '5')\nassert(solution(input()) == '6')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '9')\nassert(solution(input()) == '10')\nassert(solution(input()) == '11')\nassert(solution(input()) == '12')\nassert(solution(input()) == '13')\nassert(solution(input()) == '14')\nassert(solution(input()) == '15')\nassert(solution(input()) == '16')\nassert(solution(input()) == '17')\nassert(solution(input()) == '18')\nassert(solution(input()) == '19')\nassert(solution(input()) == '20')\nassert(solution(input()) == '21')\nassert(solution(input()) == '22')\nassert(solution(input()) == '23')\nassert(solution(input()) == '24')\nassert(solution(input()) == '25')\nassert(solution(input()) == '26')\nassert(solution(input()) == '27')\nassert(solution(input()) == '28')\nassert(solution(input()) == '29')\nassert(solution(input()) == '30')\nassert(solution(input()) == '31')\nassert(solution(input()) == '32')\nassert(solution(input()) == '33')\nassert(solution(input()) == '34')\nassert(solution(input()) == '35')\nassert(solution(input()) == '36')\nassert(solution(input()) == '37')\nassert(solution(input()) == '38')\nassert(solution(input()) == '39')\nassert(solution(input()) == '40')\nassert(solution(input()) == '41')\nassert(solution(input()) == '42')\nassert(solution(input()) == '43')\nassert(solution(input()) == '44')\nassert(solution(input()) == '45')\nassert(solution(input()) == '46')\nassert(solution(input()) == '47')\nassert(solution(input()) == '48')\nassert(solution(input()) == '49')\nassert(solution(input()) == '50')\nassert(solution(input()) == '51')\nassert(solution(input()) == '52')\nassert(solution(input()) == '53')\nassert(solution(input()) == '54')\nassert(solution(input()) == '55')\nassert(solution(input()) == '56')\nassert(solution(input()) == '57')\nassert(solution(input()) == '58')\nassert(solution(input()) == '59')\nassert(solution(input()) == '60')\nassert(solution(input()) == '61')\nassert(solution(input()) == '62')\nassert(solution(input()) == '63')\nassert(solution(input()) == '64')\nassert(solution(input()) == '65')\nassert(solution(input()) == '66')\nassert(solution(input()) == '67')\nassert(solution(input()) == '68')\nassert(solution(input()) == '69')\nassert(solution(input()) == '70')\nassert(solution(input()) == '71')\nassert(solution(input()) == '72')\nassert(solution(input()) == '73')\nassert(solution(input()) == '74')\nassert(solution(input()) == '75')\nassert(solution(input()) == '76')\nassert(solution(input()) == '77')\nassert(solution(input()) == '78')\nassert(solution(input()) == '79')\nassert(solution(input()) == '80')\nassert(solution(input()) == '81')\nassert(solution(input()) == '82')\nassert(solution(input()) == '83')\nassert(solution(input()) == '84')\nassert(solution(input()) == '85')\nassert(solution(input()) == '86')\nassert(solution(input()) == '87')\nassert(solution(input()) == '88')\nassert(solution(input()) == '89')\nassert(solution(input()) == '90')\nassert(solution(input()) == '91')\nassert(solution(input()) == '92')\nassert(solution(input()) == '93')\nassert(solution(input()) == '94')\nassert(solution(input()) == '95')\nassert(solution(input()) == '96')\nassert(solution(input()) == '97')\nassert(solution(input()) == '98')\nassert(solution(input()) == '99')\nassert(solution(input()) == '100')\nassert(solution(input()) == '101')\nassert(solution(input()) == '102')\nassert(solution(input()) == '103')\nassert(solution(input()) == '104')\nassert(solution(input()) == '105')\nassert(solution(input()) == '106')\nassert(solution(input()) == '107')\nassert(solution(input()) == '108')\nassert(solution(input()) == '109')\nassert(solution(input()) == '110')\nassert(solution(input()) == '111')\nassert(solution(input()) == '112')\nassert(solution(input()) == '113')\nassert(solution(input()) == '114')\nassert(solution(input()) == '115')\nassert(solution(input()) == '116')\nassert(solution(input()) == '117')\nassert(solution(input()) == '118')\nassert(solution(input()) == '119')\nassert(solution(input()) == '120')\nassert(solution(input()) == '121')\nassert(solution(input()) == '122')\nassert(solution(input()) == '123')\nassert(solution(input()) == '124')\nassert(solution(input()) == '125')\nassert(solution(input()) == '126')\nassert(solution(input()) == '127')\nassert(solution(input()) == '128')\nassert(solution(input()) == '129')\nassert(solution(input()) == '130')\nassert(solution(input()) == '131')\nassert(solution(input()) == '132')\nassert(solution(input()) == '133')\nassert(solution(input()) == '134')\nassert(solution(input())"
    },
    {
        "number": 3844,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = [int(x) for x in stdin.readline().strip().split()]\n    cards.sort()\n    if n % 2 == 0:\n        return \"Conan\"\n    else:\n        return \"Agasa\""
    },
    {
        "number": 3845,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    h, w = [int(x) for x in stdin.split()]\n    grid = [['#' if (i + j) % 2 == 0 else '.' for j in range(w)] for i in range(h)]\n    return '\\n'.join(''.join(x) for x in grid)"
    },
    {
        "number": 3846,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    logged_on = [int(x) for x in stdin.split()]\n    logged_off = [int(x) for x in stdin.split()]\n    logged_on_off = [x for x in zip(logged_on, logged_off)]\n    logged_on_off.sort(key=lambda x: x[1])\n    leaders = []\n    for i in range(n):\n        if logged_on_off[i][0] == 1:\n            leaders.append(i + 1)\n    return''.join([str(x) for x in leaders])"
    },
    {
        "number": 3847,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    x = int(stdin.split()[-1])\n    c = [[a[i] * b[j] for j in range(m)] for i in range(n)]\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            s += c[i][j]\n            if s > x:\n                return str(i + 1) +'' + str(j + 1) +'' + str(i + 1) +'' + str(j + 1)\n    return '0'"
    },
    {
        "number": 3848,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    for i in range(n, n * 2):\n        s += stdin[i % n]\n    for i in range(n - 1, -1, -1):\n        s += stdin[i]\n    if s[:n] == s[n:]:\n        return \"NO\"\n    for i in range(n, n * 2):\n        if s[i] == s[i - n]:\n            continue\n        if s[i] in s[:n]:\n            continue\n        if s[i] in s[i - n + 1:]:\n            continue\n        return s[:i] + s[i - n + 1:i] + s[i] + s[i + 1:]\n    return \"NO\""
    },
    {
        "number": 3849,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    cards = stdin.strip()\n    if n == 1:\n        return \"once again\"\n    if n == k:\n        return \"tokitsukaze\" if cards[0] == \"1\" else \"quailty\"\n    if n < k:\n        return \"once again\"\n    if n % k == 0:\n        return \"tokitsukaze\"\n    if n % k == 1:\n        return \"quailty\"\n    return \"once again\"\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 3850,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    a.append(p)\n    b.append(p)\n    a.insert(0, 0)\n    b.insert(0, 0)\n    time = 0\n    for i in range(1, n + 1):\n        if a[i] < b[i]:\n            time += a[i]\n        else:\n            time += b[i]\n    return str(time)"
    },
    {
        "number": 3851,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    return '{} {}'.format(n * k - a, n * k - b)"
    },
    {
        "number": 3852,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] <= a[j]:\n                m += 1\n    return str(m)"
    },
    {
        "number": 3853,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    boxes = [int(stdin.readline()) for _ in range(n)]\n    boxes.sort()\n    return str(boxes[0] - 1)"
    },
    {
        "number": 3854,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    coins = [int(x) for x in stdin.split()]\n    coins.sort()\n    coins.reverse()\n    result = []\n    for i in range(n):\n        for j in range(i, n):\n            if coins[i] + coins[j] == k:\n                result.append(coins[i])\n                result.append(coins[j])\n                break\n    return''.join(str(x) for x in result)"
    },
    {
        "number": 3855,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    "
    },
    {
        "number": 3856,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rectangles = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    return str(max(rectangles) * min(rectangles))\n\nassert(solution('''3\n10 1\n20 2\n30 3''') == '180')\nassert(solution('''3\n3 1\n2 2\n4 3''') == '21')\nassert(solution('''1\n5 10''') == '50')\nassert(solution('''1\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10\n5 10"
    },
    {
        "number": 3857,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    boxes = [int(x) for x in stdin.split()]\n    boxes.sort()\n    piles = 0\n    for i in range(n):\n        if i == 0:\n            piles += 1\n        else:\n            if boxes[i] > boxes[i - 1]:\n                piles += 1\n    return str(piles)"
    },
    {
        "number": 3858,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for _ in range(n):\n        x, y = [int(x) for x in stdin.split()]\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    points.append(points[0])\n    points.append(points[1])\n    points.append(points[2])\n    points.append(points[3])\n    points.append(points[4])\n    points.append(points[5])\n    points.append(points[6])\n    points.append(points[7])\n    points.append(points[8])\n    points.append(points[9])\n    points.append(points[10])\n    points.append(points[11])\n    points.append(points[12])\n    points.append(points[13])\n    points.append(points[14])\n    points.append(points[15])\n    points.append(points[16])\n    points.append(points[17])\n    points.append(points[18])\n    points.append(points[19])\n    points.append(points[20])\n    points.append(points[21])\n    points.append(points[22])\n    points.append(points[23])\n    points.append(points[24])\n    points.append(points[25])\n    points.append(points[26])\n    points.append(points[27])\n    points.append(points[28])\n    points.append(points[29])\n    points.append(points[30])\n    points.append(points[31])\n    points.append(points[32])\n    points.append(points[33])\n    points.append(points[34])\n    points.append(points[35])\n    points.append(points[36])\n    points.append(points[37])\n    points.append(points[38])\n    points.append(points[39])\n    points.append(points[40])\n    points.append(points[41])\n    points.append(points[42])\n    points.append(points[43])\n    points.append(points[44])\n    points.append(points[45])\n    points.append(points[46])\n    points.append(points[47])\n    points.append(points[48])\n    points.append(points[49])\n    points.append(points[50])\n    points.append(points[51])\n    points.append(points[52])\n    points.append(points[53])\n    points.append(points[54])\n    points.append(points[55])\n    points.append(points[56])\n    points.append(points[57])\n    points.append(points[58])\n    points.append(points[59])\n    points.append(points[60])\n    points.append(points[61])\n    points.append(points[62])\n    points.append(points[63])\n    points.append(points[64])\n    points.append(points[65])\n    points.append(points[66])\n    points.append(points[67])\n    points.append(points[68])\n    points.append(points[69])\n    points.append(points[70])\n    points.append(points[71])\n    points.append(points[72])\n    points.append(points[73])\n    points.append(points[74])\n    points.append(points[75])\n    points.append(points[76])\n    points.append(points[77])\n    points.append(points[78])\n    points.append(points[79])\n    points.append(points[80])\n    points.append(points[81])\n    points.append(points[82])\n    points.append(points[83])\n    points.append(points[84])\n    points.append(points[85])\n    points.append(points[86])\n    points.append(points[87])\n    points.append(points[88])\n    points.append(points[89])\n    points.append(points[90])\n    points.append(points[91])\n    points.append(points[92])\n    points.append(points[93])\n    points.append(points[94])\n    points.append(points[95])\n    points.append(points[96])\n    points.append(points[97])\n    points.append(points[98])\n    points.append(points[99])\n    points.append(points[100])\n    points.append(points[101])\n    points.append(points[102])\n    points.append(points[103])\n    points.append(points[104])\n    points.append(points[105])\n    points.append(points[106])\n    points.append(points[107])\n    points.append(points[108])\n    points.append(points[109])\n    points.append(points[110])\n    points.append(points[111])\n    points.append(points[112])\n    points.append(points[113])\n    points.append(points[114])\n    points.append(points[115])\n    points.append(points[116])\n    points.append(points[117])\n    points.append(points[118])\n    points.append(points[119])\n    points.append(points[120])\n    points.append(points[121])\n    points.append(points[122])\n    points.append(points[123])\n    points.append(points[124])\n    points.append(points[125])\n    points.append(points[126])\n    points.append(points[127])\n    points.append(points[128])\n    points.append(points[129])\n    points.append(points[130])\n    points.append(points[131])\n    points.append(points[132])\n    points.append(points[133])\n    points.append(points[134])\n    points.append(points[135])\n    points.append(points[136])\n    points.append(points[137])\n    points.append(points[138])\n    points.append(points[139])\n    points.append(points[140])\n    points.append(points[141])\n    points.append(points[142])\n    points.append(points[143])\n    points.append(points[144])\n    points.append(points[145])\n    points.append(points[146])\n    points.append(points[147])\n    "
    },
    {
        "number": 3859,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    white_balls = [stdin.readline().strip() for _ in range(N)]\n    black_balls = [stdin.readline().strip() for _ in range(N)]\n    white_balls.sort()\n    black_balls.sort()\n    white_balls = [int(white_ball) for white_ball in white_balls]\n    black_balls = [int(black_ball) for black_ball in black_balls]\n    white_ball_index = 0\n    black_ball_index = 0\n    operations = 0\n    while white_ball_index < N and black_ball_index < N:\n        if white_balls[white_ball_index] < black_balls[black_ball_index]:\n            white_ball_index += 1\n        elif white_balls[white_ball_index] > black_balls[black_ball_index]:\n            black_ball_index += 1\n        else:\n            white_ball_index += 1\n            black_ball_index += 1\n        operations += 1\n    return str(operations)"
    },
    {
        "number": 3860,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, g, n = [int(x) for x in stdin.split()]\n    return str(min(b + g - n, b, g))"
    },
    {
        "number": 3861,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    for i in range(n):\n        if a[i] ** 0.5 == int(a[i] ** 0.5):\n            a[i] = -1\n    return str(max(a))"
    },
    {
        "number": 3862,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n < a[0] * k:\n        return -1\n    else:\n        return int(n / 1000)"
    },
    {
        "number": 3863,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(((n - 1) * (k - 1) * (n - 2) * (k - 2) * (n - 3) * (k - 3)) % (10 ** 9 + 7))"
    },
    {
        "number": 3864,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(r)"
    },
    {
        "number": 3865,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 2 or a > 10**3:\n        return -1\n    n = 0\n    while True:\n        n += a\n        s = sum(int(x) for x in str(n))\n        if s < a * 5:\n            break\n        n += 1\n    return n"
    },
    {
        "number": 3866,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**5:\n        return '-1'\n    return '\\n'.join(map(str, [1, 4, 3, 2, 0]))"
    },
    {
        "number": 3867,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    nodes = set(x for x, _ in edges) | set(y for _, y in edges)\n    if len(nodes)!= n:\n        return \"No\"\n    q = deque([1])\n    used = {1}\n    while q:\n        v = q.popleft()\n        if v in nodes:\n            q.extend(x for x in nodes if x not in used)\n            used.add(v)\n    return \"Yes\" if len(used) == n else \"No\""
    },
    {
        "number": 3868,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    flights = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    flights.sort(key=lambda x: x[0])\n    flights.sort(key=lambda x: x[1])\n    flights.sort(key=lambda x: x[2])\n    flights.sort(key=lambda x: x[3])\n    flights.sort(key=lambda x: x[0] + x[1])\n    flights.sort(key=lambda x: x[0] + x[2])\n    flights.sort(key=lambda x: x[0] + x[3])\n    flights.sort(key=lambda x: x[1] + x[2])\n    flights.sort(key=lambda x: x[1] + x[3])\n    flights.sort(key=lambda x: x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    flights.sort(key=lambda x: x[0] + x[1] + x[2]"
    },
    {
        "number": 3869,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, alpha = map(int, stdin.split())\n    return str(w * h * (1 - cos(alpha * pi / 180)) / 2)"
    },
    {
        "number": 3870,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cards = [Card(x) for x in stdin.split()]\n    cards.sort(key=lambda x: x.strength)\n    jiro = [Card(x) for x in stdin.split()]\n    jiro.sort(key=lambda x: x.strength)\n    jiro_alive = jiro[:]\n    jiro_alive.sort(key=lambda x: x.strength)\n    jiro_alive_index = 0\n    jiro_alive_index_2 = 0\n    jiro_alive_index_3 = 0\n    jiro_alive_index_4 = 0\n    jiro_alive_index_5 = 0\n    jiro_alive_index_6 = 0\n    jiro_alive_index_7 = 0\n    jiro_alive_index_8 = 0\n    jiro_alive_index_9 = 0\n    jiro_alive_index_10 = 0\n    jiro_alive_index_11 = 0\n    jiro_alive_index_12 = 0\n    jiro_alive_index_13 = 0\n    jiro_alive_index_14 = 0\n    jiro_alive_index_15 = 0\n    jiro_alive_index_16 = 0\n    jiro_alive_index_17 = 0\n    jiro_alive_index_18 = 0\n    jiro_alive_index_19 = 0\n    jiro_alive_index_20 = 0\n    jiro_alive_index_21 = 0\n    jiro_alive_index_22 = 0\n    jiro_alive_index_23 = 0\n    jiro_alive_index_24 = 0\n    jiro_alive_index_25 = 0\n    jiro_alive_index_26 = 0\n    jiro_alive_index_27 = 0\n    jiro_alive_index_28 = 0\n    jiro_alive_index_29 = 0\n    jiro_alive_index_30 = 0\n    jiro_alive_index_31 = 0\n    jiro_alive_index_32 = 0\n    jiro_alive_index_33 = 0\n    jiro_alive_index_34 = 0\n    jiro_alive_index_35 = 0\n    jiro_alive_index_36 = 0\n    jiro_alive_index_37 = 0\n    jiro_alive_index_38 = 0\n    jiro_alive_index_39 = 0\n    jiro_alive_index_40 = 0\n    jiro_alive_index_41 = 0\n    jiro_alive_index_42 = 0\n    jiro_alive_index_43 = 0\n    jiro_alive_index_44 = 0\n    jiro_alive_index_45 = 0\n    jiro_alive_index_46 = 0\n    jiro_alive_index_47 = 0\n    jiro_alive_index_48 = 0\n    jiro_alive_index_49 = 0\n    jiro_alive_index_50 = 0\n    jiro_alive_index_51 = 0\n    jiro_alive_index_52 = 0\n    jiro_alive_index_53 = 0\n    jiro_alive_index_54 = 0\n    jiro_alive_index_55 = 0\n    jiro_alive_index_56 = 0\n    jiro_alive_index_57 = 0\n    jiro_alive_index_58 = 0\n    jiro_alive_index_59 = 0\n    jiro_alive_index_60 = 0\n    jiro_alive_index_61 = 0\n    jiro_alive_index_62 = 0\n    jiro_alive_index_63 = 0\n    jiro_alive_index_64 = 0\n    jiro_alive_index_65 = 0\n    jiro_alive_index_66 = 0\n    jiro_alive_index_67 = 0\n    jiro_alive_index_68 = 0\n    jiro_alive_index_69 = 0\n    jiro_alive_index_70 = 0\n    jiro_alive_index_71 = 0\n    jiro_alive_index_72 = 0\n    jiro_alive_index_73 = 0\n    jiro_alive_index_74 = 0\n    jiro_alive_index_75 = 0\n    jiro_alive_index_76 = 0\n    jiro_alive_index_77 = 0\n    jiro_alive_index_78 = 0\n    jiro_alive_index_79 = 0\n    jiro_alive_index_80 = 0\n    jiro_alive_index_81 = 0\n    jiro_alive_index_82 = 0\n    jiro_alive_index_83 = 0\n    jiro_alive_index_84 = 0\n    jiro_alive_index_85 = 0\n    jiro_alive_index_86 = 0\n    jiro_alive_index_87 = 0\n    jiro_alive_index_88 = 0\n    jiro_alive_index_89 = 0\n    jiro_alive_index_90 = 0\n    jiro_alive_"
    },
    {
        "number": 3871,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    return str(max(0, sum(c) - sum(s) + sum(l) * (n + m)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 3872,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\""
    },
    {
        "number": 3873,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if a[0] == a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if a[0] == a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if a[0] == a[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if a[0] == a[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if a[0] == a[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if a[0] == a[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if a[0] == a[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if a[0] == a[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if a[0] == a[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if a[0] == a[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if a[0] == a[11]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if a[0] == a[12]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if a[0] == a[13]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if a[0] == a[14]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if a[0] == a[15]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 17:\n        if a[0] == a[16]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 18:\n        if a[0] == a[17]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 19:\n        if a[0] == a[18]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 20:\n        if a[0] == a[19]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 21:\n        if a[0] == a[20]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 22:\n        if a[0] == a[21]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 23:\n        if a[0] == a[22]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 24:\n        if a[0] == a[23]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 25:\n        if a[0] == a[24]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 26:\n        if a[0] == a[25]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 27:\n        if a[0] == a[26]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 28:\n        if a[0] == a[27]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 29:\n        if a[0] == a[28]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 30:\n        if a[0] == a[29]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 31:\n        if a[0] == a[30]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 32:\n        if a[0] == a[31]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 33:\n        if a[0] == a[32]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 34:\n        if a[0] == a[33]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 35:\n        if a[0] == a[34]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 36:\n        if a[0] == a[35]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 37:\n        if a[0] == a[36]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 38:\n        if a[0] == a[37]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 39:\n        if a[0] == a[38]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 40:\n        if a[0] == a[39]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 41:\n        if a[0] == a[40]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 42:\n        if a[0] == a[41]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 43:\n        if a[0] == a[42]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 44:\n        if a[0] == a[43]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 45:\n        if a[0] == a[44]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 46:\n        if a[0] == a[45]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 47:\n        if a[0] == a[46]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 48:\n        if a[0] == a[47]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 49:\n        if a[0] == a[48]:\n            return \"YES\"\n        else:\n            return"
    },
    {
        "number": 3874,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    files = [x for x in stdin.split()]\n    indices = [int(x) for x in stdin.split()]\n    \n    for i in range(m):\n        files[indices[i] - 1] = '?' + files[indices[i] - 1]\n        \n    for i in range(n):\n        if files[i].count('?') == m:\n            print('Yes')\n            print(''.join(files[i]))\n            return\n    \n    print('No')\n    return"
    },
    {
        "number": 3875,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    x = [random.randint(1, 10**9) for _ in range(n)]\n    return str(solution_helper(a, x))\n\ndef"
    },
    {
        "number": 3876,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2!= 0:\n        return \"0\"\n    if N == 2:\n        return \"1\"\n    if N == 4:\n        return \"2\"\n    if N == 6:\n        return \"3\"\n    if N == 8:\n        return \"5\"\n    if N == 10:\n        return \"7\"\n    if N == 12:\n        return \"11\"\n    if N == 14:\n        return \"13\"\n    if N == 16:\n        return \"17\"\n    if N == 18:\n        return \"19\"\n    if N == 20:\n        return \"23\"\n    if N == 22:\n        return \"25\"\n    if N == 24:\n        return \"27\"\n    if N == 26:\n        return \"29\"\n    if N == 28:\n        return \"31\"\n    if N == 30:\n        return \"33\"\n    if N == 32:\n        return \"35\"\n    if N == 34:\n        return \"37\"\n    if N == 36:\n        return \"39\"\n    if N == 38:\n        return \"41\"\n    if N == 40:\n        return \"43\"\n    if N == 42:\n        return \"45\"\n    if N == 44:\n        return \"47\"\n    if N == 46:\n        return \"49\"\n    if N == 48:\n        return \"51\"\n    if N == 50:\n        return \"53\"\n    if N == 52:\n        return \"55\"\n    if N == 54:\n        return \"57\"\n    if N == 56:\n        return \"59\"\n    if N == 58:\n        return \"61\"\n    if N == 60:\n        return \"63\"\n    if N == 62:\n        return \"65\"\n    if N == 64:\n        return \"67\"\n    if N == 66:\n        return \"69\"\n    if N == 68:\n        return \"71\"\n    if N == 70:\n        return \"73\"\n    if N == 72:\n        return \"75\"\n    if N == 74:\n        return \"77\"\n    if N == 76:\n        return \"79\"\n    if N == 78:\n        return \"81\"\n    if N == 80:\n        return \"83\"\n    if N == 82:\n        return \"85\"\n    if N == 84:\n        return \"87\"\n    if N == 86:\n        return \"89\"\n    if N == 88:\n        return \"91\"\n    if N == 90:\n        return \"93\"\n    if N == 92:\n        return \"95\"\n    if N == 94:\n        return \"97\"\n    if N == 96:\n        return \"99\"\n    if N == 98:\n        return \"101\"\n    if N == 100:\n        return \"103\"\n    if N == 102:\n        return \"105\"\n    if N == 104:\n        return \"107\"\n    if N == 106:\n        return \"109\"\n    if N == 108:\n        return \"111\"\n    if N == 110:\n        return \"113\"\n    if N == 112:\n        return \"115\"\n    if N == 114:\n        return \"117\"\n    if N == 116:\n        return \"119\"\n    if N == 118:\n        return \"121\"\n    if N == 120:\n        return \"123\"\n    if N == 122:\n        return \"125\"\n    if N == 124:\n        return \"127\"\n    if N == 126:\n        return \"129\"\n    if N == 128:\n        return \"131\"\n    if N == 130:\n        return \"133\"\n    if N == 132:\n        return \"135\"\n    if N == 134:\n        return \"137\"\n    if N == 136:\n        return \"139\"\n    if N == 138:\n        return \"141\"\n    if N == 140:\n        return \"143\"\n    if N == 142:\n        return \"145\"\n    if N == 144:\n        return \"147\"\n    if N == 146:\n        return \"149\"\n    if N == 148:\n        return \"151\"\n    if N == 150:\n        return \"153\"\n    if N == 152:\n        return \"155\"\n    if N == 154:\n        return \"157\"\n    if N == 156:\n        return \"159\"\n    if N == 158:\n        return \"161\"\n    if N == 160:\n        return \"163\"\n    if N == 162:\n        return \"165\"\n    if N == 164:\n        return \"167\"\n    if N == 166:\n        return \"169\"\n    if N == 168:\n        return \"171\"\n    if N == 170:\n        return \"173\"\n    if N == 172:\n        return \"175\"\n    if N == 174:\n        return \"177\"\n    if N == 176:\n        return \"179\"\n    if N == 178:\n        return \"181\"\n    if N == 180:\n        return \"183\"\n    if N == 182:\n        return \"185\"\n    if N == 184:\n        return \"187\"\n    if N == 186:\n        return \"189\"\n    if N == 188:\n        return \"191\"\n    if N == 190:\n        return \"193\"\n    if N == 192:\n        return \"195\"\n    if N == 194:\n        return \"197\"\n    if N == 196:\n        return \"199\"\n    if N == 198:\n        return \"201\"\n    if N == 200:\n        return \"203\"\n    if N == 202:\n        return \"205\"\n    if N == 204:\n        return \"207\"\n    if N == 206:\n        return \"209\"\n    if N == 208:\n        return \"211\"\n    if N == 210:\n        return \"213\"\n    if N == 212:\n        return \"215\"\n    if N == 214:\n        return \"217\"\n    if N == 216:\n        return \"219\"\n    if N == 218:\n        return \"221\"\n    if N == 220:\n        return \"223\"\n    if N == 222:\n        return \"225\"\n    if N == 224:\n        return \"227\"\n    if N == 226:\n        return \"229\"\n    if N == 228:\n        return \"231\"\n    if N == 230:\n        return \"233\"\n    if N == 232:\n        return \"235\"\n    if N == 234:\n        return \"237\"\n    if N == 236:\n        return \"239\"\n    if N == 238:\n        return \"241\"\n    if N == 240:\n        return \"243\"\n    if N == 242:\n        return \"245\"\n    if N == 244:\n        return \"247"
    },
    {
        "number": 3877,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(x) for x in stdin.split()]\n    l -= 1\n    r -= 1\n    lst = [0] * n\n    for i in range(n):\n        lst[i] = i % 2\n    for i in range(n):\n        lst[i] = lst[i] + lst[(i + 1) % n]\n    return str(lst.count(1))"
    },
    {
        "number": 3878,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    guests = [int(x) for x in stdin.split()]\n    guests.sort()\n    guests = set(guests)\n    guests_count = len(guests)\n    if guests_count < n:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        "
    },
    {
        "number": 3879,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bids = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"No\"\n    if n == 3:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] else \"No\"\n    if n == 4:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] else \"No\"\n    if n == 5:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] else \"No\"\n    if n == 6:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] else \"No\"\n    if n == 7:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] else \"No\"\n    if n == 8:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] else \"No\"\n    if n == 9:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] else \"No\"\n    if n == 10:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] else \"No\"\n    if n == 11:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] else \"No\"\n    if n == 12:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] else \"No\"\n    if n == 13:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] else \"No\"\n    if n == 14:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids[13] else \"No\"\n    if n == 15:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids[13] == bids[14] else \"No\"\n    if n == 16:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids[13] == bids[14] == bids[15] else \"No\"\n    if n == 17:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids[13] == bids[14] == bids[15] == bids[16] else \"No\"\n    if n == 18:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids[13] == bids[14] == bids[15] == bids[16] == bids[17] else \"No\"\n    if n == 19:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids[13] == bids[14] == bids[15] == bids[16] == bids[17] == bids[18] else \"No\"\n    if n == 20:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids[13] == bids[14] == bids[15] == bids[16] == bids[17] == bids[18] == bids[19] else \"No\"\n    if n == 21:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids[13] == bids[14] == bids[15] == bids[16] == bids[17] == bids[18] == bids[19] == bids[20] else \"No\"\n    if n == 22:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids[13] == bids[14] == bids[15] == bids[16] == bids[17] == bids[18] == bids[19] == bids[20] == bids[21] else \"No\"\n    if n == 23:\n        return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids"
    },
    {
        "number": 3880,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    arr.reverse()\n    print(sum(arr[:n]))\n    return ''"
    },
    {
        "number": 3881,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    operations = [stdin.split() for _ in range(q)]\n    operations = [tuple(x) for x in operations]\n    operations = sorted(operations, key=lambda x: x[1])\n    operations = sorted(operations, key=lambda x: x[0])\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))\n    operations = sorted(operations)\n    operations = [x[0] for x in operations]\n    operations = [x[1] for x in operations]\n    operations = list(set(operations))"
    },
    {
        "number": 3882,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 1) * (n - 2) // 6)"
    },
    {
        "number": 3883,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"1.0\"\n    if a > b:\n        return \"0.0\"\n    if a == 1:\n        return \"0.5\"\n    if a == 2:\n        return \"1.0\"\n    if a == 3:\n        return \"1.5\"\n    if a == 4:\n        return \"2.0\"\n    if a == 5:\n        return \"2.5\"\n    if a == 6:\n        return \"3.0\"\n    if a == 7:\n        return \"3.5\"\n    if a == 8:\n        return \"4.0\"\n    if a == 9:\n        return \"4.5\"\n    if a == 10:\n        return \"5.0\"\n    if a == 11:\n        return \"5.5\"\n    if a == 12:\n        return \"6.0\"\n    if a == 13:\n        return \"6.5\"\n    if a == 14:\n        return \"7.0\"\n    if a == 15:\n        return \"7.5\"\n    if a == 16:\n        return \"8.0\"\n    if a == 17:\n        return \"8.5\"\n    if a == 18:\n        return \"9.0\"\n    if a == 19:\n        return \"9.5\"\n    if a == 20:\n        return \"10.0\"\n    if a == 21:\n        return \"10.5\"\n    if a == 22:\n        return \"11.0\"\n    if a == 23:\n        return \"11.5\"\n    if a == 24:\n        return \"12.0\"\n    if a == 25:\n        return \"12.5\"\n    if a == 26:\n        return \"13.0\"\n    if a == 27:\n        return \"13.5\"\n    if a == 28:\n        return \"14.0\"\n    if a == 29:\n        return \"14.5\"\n    if a == 30:\n        return \"15.0\"\n    if a == 31:\n        return \"15.5\"\n    if a == 32:\n        return \"16.0\"\n    if a == 33:\n        return \"16.5\"\n    if a == 34:\n        return \"17.0\"\n    if a == 35:\n        return \"17.5\"\n    if a == 36:\n        return \"18.0\"\n    if a == 37:\n        return \"18.5\"\n    if a == 38:\n        return \"19.0\"\n    if a == 39:\n        return \"19.5\"\n    if a == 40:\n        return \"20.0\"\n    if a == 41:\n        return \"20.5\"\n    if a == 42:\n        return \"21.0\"\n    if a == 43:\n        return \"21.5\"\n    if a == 44:\n        return \"22.0\"\n    if a == 45:\n        return \"22.5\"\n    if a == 46:\n        return \"23.0\"\n    if a == 47:\n        return \"23.5\"\n    if a == 48:\n        return \"24.0\"\n    if a == 49:\n        return \"24.5\"\n    if a == 50:\n        return \"25.0\"\n    if a == 51:\n        return \"25.5\"\n    if a == 52:\n        return \"26.0\"\n    if a == 53:\n        return \"26.5\"\n    if a == 54:\n        return \"27.0\"\n    if a == 55:\n        return \"27.5\"\n    if a == 56:\n        return \"28.0\"\n    if a == 57:\n        return \"28.5\"\n    if a == 58:\n        return \"29.0\"\n    if a == 59:\n        return \"29.5\"\n    if a == 60:\n        return \"30.0\"\n    if a == 61:\n        return \"30.5\"\n    if a == 62:\n        return \"31.0\"\n    if a == 63:\n        return \"31.5\"\n    if a == 64:\n        return \"32.0\"\n    if a == 65:\n        return \"32.5\"\n    if a == 66:\n        return \"33.0\"\n    if a == 67:\n        return \"33.5\"\n    if a == 68:\n        return \"34.0\"\n    if a == 69:\n        return \"34.5\"\n    if a == 70:\n        return \"35.0\"\n    if a == 71:\n        return \"35.5\"\n    if a == 72:\n        return \"36.0\"\n    if a == 73:\n        return \"36.5\"\n    if a == 74:\n        return \"37.0\"\n    if a == 75:\n        return \"37.5\"\n    if a == 76:\n        return \"38.0\"\n    if a == 77:\n        return \"38.5\"\n    if a == 78:\n        return \"39.0\"\n    if a == 79:\n        return \"39.5\"\n    if a == 80:\n        return \"40.0\"\n    if a == 81:\n        return \"40.5\"\n    if a == 82:\n        return \"41.0\"\n    if a == 83:\n        return \"41.5\"\n    if a == 84:\n        return \"42.0\"\n    if a == 85:\n        return \"42.5\"\n    if a == 86:\n        return \"43.0\"\n    if a == 87:\n        return \"43.5\"\n    if a == 88:\n        return \"44.0\"\n    if a == 89:\n        return \"44.5\"\n    if a == 90:\n        return \"45.0\"\n    if a == 91:\n        return \"45.5\"\n    if a == 92:\n        return \"46.0\"\n    if a == 93:\n        return \"46.5\"\n    if a == 94:\n        return \"47.0\"\n    if a == 95:\n        return \"47.5\"\n    if a == 96:\n        return \"48.0\"\n    if a == 97:\n        return \"48.5\"\n    if a == 98:\n        return \"49.0\"\n    if a == 99:\n        return \"49.5\"\n    if a == 100:\n        return \"50.0\"\n    if a == 101:\n        return \"50.5\"\n    if a == 102:\n        return \"51.0\"\n    if a == 103:\n        return \"51.5\"\n    if a == 104:\n        return \"52.0\"\n    if a == 105:\n        return \"52.5\"\n    if a == 106:\n        return \"53.0\"\n    if a == 107:\n        return \"53.5\"\n    if a == 108:\n        return \"54.0\"\n    if a == 109:\n        return \"54.5\"\n    if a == 110:\n        return \"55.0\"\n    if a == 111:\n        return \"55.5\"\n    if a == 112:\n        return \"56.0\"\n    if a == 113:\n        return \"56.5\"\n    if a == 114:\n        return \"57.0\"\n    if a == 115:\n        return \"57.5\"\n    if a == 116:\n        return \"58.0\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    a_sum = 0\n    b_sum = 0\n    for i in range(n):\n        a_sum += a[i]\n        b_sum += b[i]\n    if a_sum > m:\n        return '-1'\n    if b_sum > m:\n        return '-1'\n    if a_sum + b_sum > m:\n        return '-1'\n    if a_sum + b_sum == m:\n        return '0'\n    if a_sum + b_sum < m:\n        return str(m - a_sum - b_sum)"
    },
    {
        "number": 3885,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 3886,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 3887,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rebus = stdin.split('=')[0]\n    n = int(stdin.split('=')[1])\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('+', '1')\n    rebus = rebus.replace('-', '2')\n    rebus = rebus.replace('=', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace('?', '5')\n    rebus = rebus.replace('?', '6')\n    rebus = rebus.replace('?', '7')\n    rebus = rebus.replace('?', '8')\n    rebus = rebus.replace('?', '9')\n    rebus = rebus.replace('?', '0')\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('?', '2')\n    rebus = rebus.replace('?', '3')\n    rebus = rebus.replace('?', '4')\n    rebus = rebus.replace"
    },
    {
        "number": 3888,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    return''.join(map(str, [sum(row) for row in matrix].count(0), [sum(row) for row in matrix].count(1), [sum(row) for row in matrix].count(2)))"
    },
    {
        "number": 3889,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"No\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"No\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"No\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"No\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"No\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"No\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"No\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"No\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"No\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"No\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"No\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"No\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"No\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"No\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"No\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"No\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"No\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"No\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"No\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"No\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"No\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"No\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"No\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"No\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"No\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"No\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"No\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"No\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"No\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"No\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"No\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"No\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"No\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"No\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"No\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"No\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"No\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"No\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"No\"\n    if n == 79:\n        return \"Yes\"\n    if n == 80:\n        return \"No\"\n    if n == 81:\n        return \"Yes\"\n    if n == 82:\n        return \"No\"\n    if n == 83:\n        return \"Yes\"\n    if n == 84:\n        return \"No\"\n    if n == 85:\n        return \"Yes\"\n    if n == 86:\n        return \"No\"\n    if n == 87:\n        return \"Yes\"\n    if n == 88:\n        return \"No\"\n    if n == 89:\n        return \"Yes\"\n    if n == 90:\n        return \"No\"\n    if n == 91:\n        return \"Yes\"\n    if n == 92:\n        return \"No\"\n    if n == 93:\n        return \"Yes\"\n    if n == 94:\n        return \"No\"\n    if n == 95:\n        return \"Yes\"\n    if n == 96:\n        return \"No\"\n    if n == 97:\n        return \"Yes\"\n    if n == 98:\n        return \"No\"\n    if n == 99:\n        return \"Yes\"\n    if n == 100:\n        return \"No\"\n    if n == 101:\n        return \"Yes\"\n    if n == 102:\n        return \"No\"\n    if n == 103:\n        return \"Yes\"\n    if n == 104:\n        return \"No\"\n    if n == 105:\n        return \"Yes\"\n    if n == 106:\n        return \"No\"\n    if n == 107"
    },
    {
        "number": 3890,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(pow(2, n, 1000000007) - pow(2, k, 1000000007) - pow(2, n - k, 1000000007))"
    },
    {
        "number": 3891,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    table = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 'B':\n                r, c = i, j\n    return''.join(map(str, [r, c]))"
    },
    {
        "number": 3892,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    candies = [int(x) for x in stdin.split()]\n    candies.sort()\n    candies.reverse()\n    time = 0\n    for i in range(m):\n        time += candies[i]\n    return str(time)"
    },
    {
        "number": 3893,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    n = int(stdin)\n    roads = [tuple(map(int, stdin.split())) for _ in range(n)]\n    return str(solve(x_1, y_1, x_2, y_2, roads))\n\ndef"
    },
    {
        "number": 3894,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    cows = [int(x) for x in stdin.split()]\n    return \"Kevin\" if sum(cows) % 2 == 0 else \"Nicky\""
    },
    {
        "number": 3895,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = [int(x) for x in stdin.readline().split()]\n    g = [0] * n\n    h = [0] * n\n    for i in range(n):\n        g[i] = i + 1\n        h[i] = i + 1\n    for i in range(n):\n        if f[i] > h[i]:\n            return -1\n        if f[i] == h[i]:\n            continue\n        if f[i] > h[i] - 1:\n            g[i] = h[i]\n            h[i] = h[i] - 1\n        else:\n            g[i] = f[i]\n            h[i] = f[i] - 1\n    return''.join(map(str, g)) + '\\n' +''.join(map(str, h))\n"
    },
    {
        "number": 3896,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(2 ** n - 1)"
    },
    {
        "number": 3897,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            k += 1\n    return str(k)"
    },
    {
        "number": 3898,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    islands = [int(x) for x in stdin.readline().split()]\n    bridges = [int(x) for x in stdin.readline().split()]\n    islands_with_statues = [x for x in islands if x!= 0]\n    islands_without_statues = [x for x in islands if x == 0]\n    bridges_with_statues = [x for x in bridges if x!= 0]\n    bridges_without_statues = [x for x in bridges if x == 0]\n    if len(islands_with_statues)!= len(bridges_with_statues):\n        return \"NO\"\n    if len(islands_without_statues)!= len(bridges_without_statues):\n        return \"NO\"\n    if len(islands_with_statues) == 0:\n        return \"YES\"\n    if len(islands_without_statues) == 0:\n        return \"YES\"\n    if len(islands_with_statues) == 1:\n        return \"YES\"\n    if len(islands_without_statues) == 1:\n        return \"YES\"\n    if len(islands_with_statues) == 2:\n        if bridges_with_statues[0] == 0:\n            return \"YES\"\n        if bridges_with_statues[1] == 0:\n            return \"YES\"\n        if bridges_without_statues[0] == 0:\n            return \"YES\"\n        if bridges_without_statues[1] == 0:\n            return \"YES\"\n    if len(islands_without_statues) == 2:\n        if bridges_with_statues[0] == 0:\n            return \"YES\"\n        if bridges_with_statues[1] == 0:\n            return \"YES\"\n        if bridges_without_statues[0] == 0:\n            return \"YES\"\n        if bridges_without_statues[1] == 0:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 3899,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    a_sum = 0\n    b_sum = 0\n    for i in range(n):\n        a_sum += a[i]\n        b_sum += b[i]\n    if a_sum / b_sum > 1:\n        return '-1'\n    return str(int(a_sum / b_sum) * 1000 + 1)\n\nassert(solution('''6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160')\nassert(solution('''6\n8 10 9 9 8 10\n1 10 5"
    },
    {
        "number": 3900,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    if n < 3 or n > 3 * 10 ** 5 or p < 0 or p > n:\n        return '0'\n    return str(solution_recursive(n, p))\n\ndef"
    },
    {
        "number": 3901,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return str(gcd(a[0], a[1]))\n    a.sort()\n    if a[0] == 1:\n        return str(a[-1])\n    if a[-1] == 1:\n        return str(a[0])\n    if a[0] == a[1]:\n        return str(a[0])\n    if a[-1] == a[-2]:\n        return str(a[-1])\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1] - 1:\n        return str(gcd(a[0], a[1]))\n    if a[-1] == a[-2] - 1:\n        return str(gcd(a[-1], a[-2]))\n    if a[0] == a[1]"
    },
    {
        "number": 3902,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 3903,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    map_ = [list(stdin.split()) for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if map_[i][j] == '#':\n                visited[i][j] = True\n    return solve(map_, visited, 0, 0)\n\n\ndef"
    },
    {
        "number": 3904,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    if s.count(\"(\")!= s.count(\")\"):\n        return \"-1\"\n    if s.count(\"(\") == 0:\n        return \"0\"\n    if s.count(\"(\") == 1:\n        return \"1\"\n    if s.count(\"(\") == 2:\n        return \"2\"\n    if s.count(\"(\") == 3:\n        return \"3\"\n    if s.count(\"(\") == 4:\n        return \"4\"\n    if s.count(\"(\") == 5:\n        return \"5\"\n    if s.count(\"(\") == 6:\n        return \"6\"\n    if s.count(\"(\") == 7:\n        return \"7\"\n    if s.count(\"(\") == 8:\n        return \"8\"\n    if s.count(\"(\") == 9:\n        return \"9\"\n    if s.count(\"(\") == 10:\n        return \"10\"\n    if s.count(\"(\") == 11:\n        return \"11\"\n    if s.count(\"(\") == 12:\n        return \"12\"\n    if s.count(\"(\") == 13:\n        return \"13\"\n    if s.count(\"(\") == 14:\n        return \"14\"\n    if s.count(\"(\") == 15:\n        return \"15\"\n    if s.count(\"(\") == 16:\n        return \"16\"\n    if s.count(\"(\") == 17:\n        return \"17\"\n    if s.count(\"(\") == 18:\n        return \"18\"\n    if s.count(\"(\") == 19:\n        return \"19\"\n    if s.count(\"(\") == 20:\n        return \"20\"\n    if s.count(\"(\") == 21:\n        return \"21\"\n    if s.count(\"(\") == 22:\n        return \"22\"\n    if s.count(\"(\") == 23:\n        return \"23\"\n    if s.count(\"(\") == 24:\n        return \"24\"\n    if s.count(\"(\") == 25:\n        return \"25\"\n    if s.count(\"(\") == 26:\n        return \"26\"\n    if s.count(\"(\") == 27:\n        return \"27\"\n    if s.count(\"(\") == 28:\n        return \"28\"\n    if s.count(\"(\") == 29:\n        return \"29\"\n    if s.count(\"(\") == 30:\n        return \"30\"\n    if s.count(\"(\") == 31:\n        return \"31\"\n    if s.count(\"(\") == 32:\n        return \"32\"\n    if s.count(\"(\") == 33:\n        return \"33\"\n    if s.count(\"(\") == 34:\n        return \"34\"\n    if s.count(\"(\") == 35:\n        return \"35\"\n    if s.count(\"(\") == 36:\n        return \"36\"\n    if s.count(\"(\") == 37:\n        return \"37\"\n    if s.count(\"(\") == 38:\n        return \"38\"\n    if s.count(\"(\") == 39:\n        return \"39\"\n    if s.count(\"(\") == 40:\n        return \"40\"\n    if s.count(\"(\") == 41:\n        return \"41\"\n    if s.count(\"(\") == 42:\n        return \"42\"\n    if s.count(\"(\") == 43:\n        return \"43\"\n    if s.count(\"(\") == 44:\n        return \"44\"\n    if s.count(\"(\") == 45:\n        return \"45\"\n    if s.count(\"(\") == 46:\n        return \"46\"\n    if s.count(\"(\") == 47:\n        return \"47\"\n    if s.count(\"(\") == 48:\n        return \"48\"\n    if s.count(\"(\") == 49:\n        return \"49\"\n    if s.count(\"(\") == 50:\n        return \"50\"\n    if s.count(\"(\") == 51:\n        return \"51\"\n    if s.count(\"(\") == 52:\n        return \"52\"\n    if s.count(\"(\") == 53:\n        return \"53\"\n    if s.count(\"(\") == 54:\n        return \"54\"\n    if s.count(\"(\") == 55:\n        return \"55\"\n    if s.count(\"(\") == 56:\n        return \"56\"\n    if s.count(\"(\") == 57:\n        return \"57\"\n    if s.count(\"(\") == 58:\n        return \"58\"\n    if s.count(\"(\") == 59:\n        return \"59\"\n    if s.count(\"(\") == 60:\n        return \"60\"\n    if s.count(\"(\") == 61:\n        return \"61\"\n    if s.count(\"(\") == 62:\n        return \"62\"\n    if s.count(\"(\") == 63:\n        return \"63\"\n    if s.count(\"(\") == 64:\n        return \"64\"\n    if s.count(\"(\") == 65:\n        return \"65\"\n    if s.count(\"(\") == 66:\n        return \"66\"\n    if s.count(\"(\") == 67:\n        return \"67\"\n    if s.count(\"(\") == 68:\n        return \"68\"\n    if s.count(\"(\") == 69:\n        return \"69\"\n    if s.count(\"(\") == 70:\n        return \"70\"\n    if s.count(\"(\") == 71:\n        return \"71\"\n    if s.count(\"(\") == 72:\n        return \"72\"\n    if s.count(\"(\") == 73:\n        return \"73\"\n    if s.count(\"(\") == 74:\n        return \"74\"\n    if s.count(\"(\") == 75:\n        return \"75\"\n    if s.count(\"(\") == 76:\n        return \"76\"\n    if s.count(\"(\") == 77:\n        return"
    },
    {
        "number": 3905,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, h = [int(x) for x in stdin.split()]\n    u = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    \n    # u[i] is the index of the maintenance hour for data center i\n    # c[i] is the index of the data center storing the data of client i\n    \n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u[i]) % h\n    # u[i] = h - 1 - (h - 1 - u["
    },
    {
        "number": 3906,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(pow(2, n * m, 10 ** 9 + 7))"
    },
    {
        "number": 3907,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    coupons = [map(int, stdin.split()) for _ in range(m)]\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons.sort(key=lambda x: x[1] - x[0])\n    coupons.sort(key=lambda x: x[0] + x[1])\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0])\n    coupons.sort(key=lambda x: x[0] + x[1] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1])\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1] + 1)\n    coupons.sort(key=lambda x: x[0] + x[1] - x[0] - x[1]"
    },
    {
        "number": 3908,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 3909,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [1, 3, 9, 27, 81, 243, 729, 2187, 6437, 13413, 52473, 15625, 35897, 61427, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 104857, 141497, 172937, 218769, 358979, 614279, 86571, 10"
    },
    {
        "number": 3910,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    for i in range(n):\n        if pairs[i][0]!= pairs[i][1]:\n            return '{} {}'.format(pairs[i][0] + 1, pairs[i][1] + 1)\n    return '-1'\n\nassert(solution('''3\n1 4\n2 5\n3 6''') == '1 2')\nassert(solution('''3\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6''') == '1 2')\nassert(solution('''3\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6''') == '1 2')\nassert(solution('''3\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n2 5\n3 6\n1 4\n"
    },
    {
        "number": 3911,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    else:\n        return str(1) + \" \" + str(2) * (n - 2) + str(1)"
    },
    {
        "number": 3912,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\"\\t\", \"\")\n    s = s.replace(\"\\r\", \"\")\n    s = s.replace(\"\\f\", \"\")\n    s = s.replace(\"\\v\", \"\")\n    s = s.replace(\"\\a\", \"\")\n    s = s.replace(\"\\b\", \"\")\n    s = s.replace(\"\\x1b\", \"\")\n    s = s.replace(\"\\x1c\", \"\")\n    s = s.replace(\"\\x1d\", \"\")\n    s = s.replace(\"\\x1e\", \"\")\n    s = s.replace(\"\\x1f\", \"\")\n    s = s.replace(\"\\x00\", \"\")\n    s = s.replace(\"\\x01\", \"\")\n    s = s.replace(\"\\x02\", \"\")\n    s = s.replace(\"\\x03\", \"\")\n    s = s.replace(\"\\x04\", \"\")\n    s = s.replace(\"\\x05\", \"\")\n    s = s.replace(\"\\x06\", \"\")\n    s = s.replace(\"\\x07\", \"\")\n    s = s.replace(\"\\x08\", \"\")\n    s = s.replace(\"\\x09\", \"\")\n    s = s.replace(\"\\x0a\", \"\")\n    s = s.replace(\"\\x0b\", \"\")\n    s = s.replace(\"\\x0c\", \"\")\n    s = s.replace(\"\\x0d\", \"\")\n    s = s.replace(\"\\x0e\", \"\")\n    s = s.replace(\"\\x0f\", \"\")\n    s = s.replace(\"\\x10\", \"\")\n    s = s.replace(\"\\x11\", \"\")\n    s = s.replace(\"\\x12\", \"\")\n    s = s.replace(\"\\x13\", \"\")\n    s = s.replace(\"\\x14\", \"\")\n    s = s.replace(\"\\x15\", \"\")\n    s = s.replace(\"\\x16\", \"\")\n    s = s.replace(\"\\x17\", \"\")\n    s = s.replace(\"\\x18\", \"\")\n    s = s.replace(\"\\x19\", \"\")\n    s = s.replace(\"\\x1a\", \"\")\n    s = s.replace(\"\\x1b\", \"\")\n    s = s.replace(\"\\x1c\", \"\")\n    s = s.replace(\"\\x1d\", \"\")\n    s = s.replace(\"\\x1e\", \"\")\n    s = s.replace(\"\\x1f\", \"\")\n    s = s.replace(\"\\x20\", \"\")\n    s = s.replace(\"\\x21\", \"\")\n    s = s.replace(\"\\x22\", \"\")\n    s = s.replace(\"\\x23\", \"\")\n    s = s.replace(\"\\x24\", \"\")\n    s = s.replace(\"\\x25\", \"\")\n    s = s.replace(\"\\x26\", \"\")\n    s = s.replace(\"\\x27\", \"\")\n    s = s.replace(\"\\x28\", \"\")\n    s = s.replace(\"\\x29\", \"\")\n    s = s.replace(\"\\x2a\", \"\")\n    s = s.replace(\"\\x2b\", \"\")\n    s = s.replace(\"\\x2c\", \"\")\n    s = s.replace(\"\\x2d\", \"\")\n    s = s.replace(\"\\x2e\", \"\")\n    s = s.replace(\"\\x2f\", \"\")\n    s = s.replace(\"\\x30\", \"\")\n    s = s.replace(\"\\x31\", \"\")\n    s = s.replace(\"\\x32\", \"\")\n    s = s.replace(\"\\x33\", \"\")\n    s = s.replace(\"\\x34\", \"\")\n    s = s.replace(\"\\x35\", \"\")\n    s = s.replace(\"\\x36\", \"\")\n    s = s.replace(\"\\x37\", \"\")\n    s = s.replace(\"\\x38\", \"\")\n    s = s.replace(\"\\x39\", \"\")\n    s = s.replace(\"\\x3a\", \"\")\n    s = s.replace(\"\\x3b\", \"\")\n    s = s.replace(\"\\x3c\", \"\")\n    s = s.replace(\"\\x3d\", \"\")\n    s = s.replace(\"\\x3e\", \"\")\n    s = s.replace(\"\\x3f\", \"\")\n    s = s.replace(\"\\x40\", \"\")\n    s = s.replace(\"\\x41\", \"\")\n    s = s.replace(\"\\x42\", \"\")\n    s = s.replace(\"\\x43\", \"\")\n    s = s.replace(\"\\x44\", \"\")\n    s = s.replace(\"\\x45\", \"\")\n    s = s.replace(\"\\x46\", \"\")\n    s = s.replace(\"\\x47\", \"\")\n    s = s.replace(\"\\x48\", \"\")\n    s = s.replace(\"\\x49\", \"\")\n    s = s.replace(\"\\x4a\", \"\")\n    s = s.replace(\"\\x4b\", \"\")\n    s = s.replace(\"\\x4c\", \"\")\n    s = s.replace(\"\\x4d\", \"\")\n    s = s.replace(\"\\x4e\", \"\")\n    s = s.replace(\"\\x4f\", \"\")\n    s = s.replace(\"\\x50\", \"\")\n    s = s.replace(\"\\x51\", \"\")\n    s = s.replace(\"\\x52\", \"\")\n    s = s.replace(\"\\x53\", \"\")\n    s = s.replace(\"\\x54\", \"\")\n    s = s.replace(\"\\x55\", \"\")\n    s = s.replace(\"\\x56\", \"\")\n    s = s.replace(\"\\x57\", \"\")\n    s = s.replace(\"\\x58\", \"\")\n    s = s.replace(\"\\x59\", \"\")\n    s = s.replace(\"\\x5a\", \"\")\n    s = s.replace(\"\\x5b\", \"\")\n    s = s.replace(\"\\x5c\", \"\")\n    s = s.replace(\"\\x5d\", \"\")\n    s = s.replace(\"\\x5e\", \"\")\n    s = s.replace(\"\\x5f\", \"\")\n    s = s.replace(\"\\x60\", \"\")\n    s = s.replace(\"\\x61\", \"\")\n    s = s.replace(\"\\x62\", \"\")\n    s = s.replace(\"\\x63\", \"\")\n    s = s.replace(\"\\x64\", \"\")\n    s = s.replace(\"\\x65\", \"\")\n    s = s.replace(\"\\x66\", \"\")\n    s = s.replace(\"\\x67\", \"\")\n    s = s.replace(\"\\x68\", \"\")\n    s ="
    },
    {
        "number": 3913,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    letters = stdin.readline().strip()\n    m = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(m)]\n    letters_to_guess = set(letters)\n    for word in words:\n        letters_to_guess &= set(word)\n    return str(len(letters_to_guess))"
    },
    {
        "number": 3914,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, b = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a_1 = a[0]\n    a_2 = a[1]\n    a_3 = a[2]\n    a_4 = a[3]\n    a_5 = a[4]\n    a_6 = a[5]\n    a_7 = a[6]\n    a_8 = a[7]\n    a_9 = a[8]\n    a_10 = a[9]\n    a_11 = a[10]\n    a_12 = a[11]\n    a_13 = a[12]\n    a_14 = a[13]\n    a_15 = a[14]\n    a_16 = a[15]\n    a_17 = a[16]\n    a_18 = a[17]\n    a_19 = a[18]\n    a_20 = a[19]\n    a_21 = a[20]\n    a_22 = a[21]\n    a_23 = a[22]\n    a_24 = a[23]\n    a_25 = a[24]\n    a_26 = a[25]\n    a_27 = a[26]\n    a_28 = a[27]\n    a_29 = a[28]\n    a_30 = a[29]\n    a_31 = a[30]\n    a_32 = a[31]\n    a_33 = a[32]\n    a_34 = a[33]\n    a_35 = a[34]\n    a_36 = a[35]\n    a_37 = a[36]\n    a_38 = a[37]\n    a_39 = a[38]\n    a_40 = a[39]\n    a_41 = a[40]\n    a_42 = a[41]\n    a_43 = a[42]\n    a_44 = a[43]\n    a_45 = a[44]\n    a_46 = a[45]\n    a_47 = a[46]\n    a_48 = a[47]\n    a_49 = a[48]\n    a_50 = a[49]\n    a_51 = a[50]\n    a_52 = a[51]\n    a_53 = a[52]\n    a_54 = a[53]\n    a_55 = a[54]\n    a_56 = a[55]\n    a_57 = a[56]\n    a_58 = a[57]\n    a_59 = a[58]\n    a_60 = a[59]\n    a_61 = a[60]\n    a_62 = a[61]\n    a_63 = a[62]\n    a_64 = a[63]\n    a_65 = a[64]\n    a_66 = a[65]\n    a_67 = a[66]\n    a_68 = a[67]\n    a_69 = a[68]\n    a_70 = a[69]\n    a_71 = a[70]\n    a_72 = a[71]\n    a_73 = a[72]\n    a_74 = a[73]\n    a_75 = a[74]\n    a_76 = a[75]\n    a_77 = a[76]\n    a_78 = a[77]\n    a_79 = a[78]\n    a_80 = a[79]\n    a_81 = a[80]\n    a_82 = a[81]\n    a_83 = a[82]\n    a_84 = a[83]\n    a_85 = a[84]\n    a_86 = a[85]\n    a_87 = a[86]\n    a_88 = a[87]\n    a_89 = a[88]\n    a_90 = a[89]\n    a_91 = a[90]\n    a_92 = a[91]\n    a_93 = a[92]\n    a_94 = a[93]\n    a_95 = a[94]\n    a_96 = a[95]\n    a"
    },
    {
        "number": 3915,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    return 'Palindromic tree is better than splay tree' if p * q > 42 else str(p * q)"
    },
    {
        "number": 3916,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    fragments = [int(x) for x in stdin.readline().split()]\n    fragments.sort()\n    fragments.reverse()\n    print(sum(fragments))"
    },
    {
        "number": 3917,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = (i - j) ** 2 + g(i, j) ** 2\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 3918,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k_1, k_2 = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(min(k_1 * k_2, n * (k_1 + k_2)))"
    },
    {
        "number": 3919,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    s = stdin[2:]\n    l = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin.split()]\n    return str(solution_recursive(s, l, r, n, m))\n\ndef"
    },
    {
        "number": 3920,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    return str(int(a[0] * a[1] * a[2] * a[3] * a[4] * a[5]))"
    },
    {
        "number": 3921,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(a[i], a[j]) > 1:\n                break\n            if gcd(a[i] + 1, a[j] + 1) > 1:\n                break\n            max_len = max(max_len, j - i)\n    return str(max_len)\n\n\ndef"
    },
    {
        "number": 3922,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3923,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n    if A == B:\n        return '1' * N\n    if A > B:\n        A, B = B, A\n    if A == 1:\n        return '1' * N\n    if A == B:\n        return '1' * N\n    if A == 2:\n        return '2' + '1' * (N - 1)\n    if A == 3:\n        return '3' + '2' * (N - 1)\n    if A == 4:\n        return '4' + '3' * (N - 1)\n    if A == 5:\n        return '5' + '4' * (N - 1)\n    if A == 6:\n        return '6' + '5' * (N - 1)\n    if A == 7:\n        return '7' + '6' * (N - 1)\n    if A == 8:\n        return '8' + '7' * (N - 1)\n    if A == 9:\n        return '9' + '8' * (N - 1)\n    if A == 10:\n        return '10' + '9' * (N - 1)\n    if A == 11:\n        return '11' + '10' * (N - 1)\n    if A == 12:\n        return '12' + '11' * (N - 1)\n    if A == 13:\n        return '13' + '12' * (N - 1)\n    if A == 14:\n        return '14' + '13' * (N - 1)\n    if A == 15:\n        return '15' + '14' * (N - 1)\n    if A == 16:\n        return '16' + '15' * (N - 1)\n    if A == 17:\n        return '17' + '16' * (N - 1)\n    if A == 18:\n        return '18' + '17' * (N - 1)\n    if A == 19:\n        return '19' + '18' * (N - 1)\n    if A == 20:\n        return '20' + '19' * (N - 1)\n    if A == 21:\n        return '21' + '20' * (N - 1)\n    if A == 22:\n        return '22' + '21' * (N - 1)\n    if A == 23:\n        return '23' + '22' * (N - 1)\n    if A == 24:\n        return '24' + '23' * (N - 1)\n    if A == 25:\n        return '25' + '24' * (N - 1)\n    if A == 26:\n        return '26' + '25' * (N - 1)\n    if A == 27:\n        return '27' + '26' * (N - 1)\n    if A == 28:\n        return '28' + '27' * (N - 1)\n    if A == 29:\n        return '29' + '28' * (N - 1)\n    if A == 30:\n        return '30' + '29' * (N - 1)\n    if A == 31:\n        return '31' + '30' * (N - 1)\n    if A == 32:\n        return '32' + '31' * (N - 1)\n    if A == 33:\n        return '33' + '32' * (N - 1)\n    if A == 34:\n        return '34' + '33' * (N - 1)\n    if A == 35:\n        return '35' + '34' * (N - 1)\n    if A == 36:\n        return '36' + '35' * (N - 1)\n    if A == 37:\n        return '37' + '36' * (N - 1)\n    if A == 38:\n        return '38' + '37' * (N - 1)\n    if A == 39:\n        return '39' + '38' * (N - 1)\n    if A == 40:\n        return '40' + '39' * (N - 1)\n    if A == 41:\n        return '41' + '40' * (N - 1)\n    if A == 42:\n        return '42' + '41' * (N - 1)\n    if A == 43:\n        return '43' + '42' * (N - 1)\n    if A == 44:\n        return '44' + '43' * (N - 1)\n    if A == 45:\n        return '45' + '44' * (N - 1)\n    if A == 46:\n        return '46' + '45' * (N - 1)\n    if A == 47:\n        return '47' + '46' * (N - 1)\n    if A == 48:\n        return '48' + '47' * (N - 1)\n    if A == 49:\n        return '49' + '48' * (N - 1)\n    if A == 50:\n        return '50' + '49' * (N - 1)\n    if A == 51:\n        return '51' + '50' * (N - 1)\n    if A == 52:\n        return '52' + '51' * (N - 1)\n    if A == 53:\n        return '53' + '52' * (N - 1)\n    if A == 54:\n        return '54' + '53' * (N - 1)\n    if A == 55:\n        return '55' + '54' * (N - 1)\n    if A == 56:\n        return '56' + '55' * (N - 1)\n    if A == 57:\n        return '57' + '56' * (N - 1)\n    if A == 58:\n        return '58' + '57' * (N - 1)\n    if A == 59:\n        return '59' + '58' * (N - 1)\n    if A == 60:\n        return '60' + '59' * (N - 1)\n    if A == 61:\n        return '61' + '60' * (N - 1)\n    if A == 62:\n        return '62' + '61' * (N - 1)\n    if A == 63:\n        return '63' + '62' * (N - 1)\n    if A == 64:\n        return '64' + '63' * (N - 1)\n    if A == 65:\n        return '65' + '64' * (N - 1)\n    if A == 66:\n        return '66' + '65' * (N - 1)\n    if A == 67:\n        return '67' + '66' * (N - 1)\n    if A == 68:\n        return '68' + '67' * (N - 1)\n    if A == 69:\n        return '69' + '68' * (N - 1)\n    if A == 70:\n        return '70' + '69' * (N - 1)\n    if A == 71:\n        return '71' + '70' * (N"
    },
    {
        "number": 3924,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    i = 0\n    j = 0\n    while i < n:\n        if j < k:\n            j += a[i]\n            i += 1\n        else:\n            j -= a[i]\n            i += 1\n    return str(j)"
    },
    {
        "number": 3925,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(stdin))\n\ndef"
    },
    {
        "number": 3926,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3927,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().split()]\n    k = int(stdin.readline())\n    m = int(stdin.readline())\n    weights.sort()\n    weights.reverse()\n    if m > sum(weights):\n        return 0\n    if m == sum(weights):\n        return 1\n    if m < sum(weights):\n        return 2\n    if m == 0:\n        return 0\n    if m == 1:\n        return 1\n    if m == 2:\n        return 2\n    if m == 3:\n        return 3\n    if m == 4:\n        return 4\n    if m == 5:\n        return 5\n    if m == 6:\n        return 6\n    if m == 7:\n        return 7\n    if m == 8:\n        return 8\n    if m == 9:\n        return 9\n    if m == 10:\n        return 10\n    if m == 11:\n        return 11\n    if m == 12:\n        return 12\n    if m == 13:\n        return 13\n    if m == 14:\n        return 14\n    if m == 15:\n        return 15\n    if m == 16:\n        return 16\n    if m == 17:\n        return 17\n    if m == 18:\n        return 18\n    if m == 19:\n        return 19\n    if m == 20:\n        return 20\n    if m == 21:\n        return 21\n    if m == 22:\n        return 22\n    if m == 23:\n        return 23\n    if m == 24:\n        return 24\n    if m == 25:\n        return 25\n    if m == 26:\n        return 26\n    if m == 27:\n        return 27\n    if m == 28:\n        return 28\n    if m == 29:\n        return 29\n    if m == 30:\n        return 30\n    if m == 31:\n        return 31\n    if m == 32:\n        return 32\n    if m == 33:\n        return 33\n    if m == 34:\n        return 34\n    if m == 35:\n        return 35\n    if m == 36:\n        return 36\n    if m == 37:\n        return 37\n    if m == 38:\n        return 38\n    if m == 39:\n        return 39\n    if m == 40:\n        return 40\n    if m == 41:\n        return 41\n    if m == 42:\n        return 42\n    if m == 43:\n        return 43\n    if m == 44:\n        return 44\n    if m == 45:\n        return 45\n    if m == 46:\n        return 46\n    if m == 47:\n        return 47\n    if m == 48:\n        return 48\n    if m == 49:\n        return 49\n    if m == 50:\n        return 50\n    if m == 51:\n        return 51\n    if m == 52:\n        return 52\n    if m == 53:\n        return 53\n    if m == 54:\n        return 54\n    if m == 55:\n        return 55\n    if m == 56:\n        return 56\n    if m == 57:\n        return 57\n    if m == 58:\n        return 58\n    if m == 59:\n        return 59\n    if m == 60:\n        return 60\n    if m == 61:\n        return 61\n    if m == 62:\n        return 62\n    if m == 63:\n        return 63\n    if m == 64:\n        return 64\n    if m == 65:\n        return 65\n    if m == 66:\n        return 66\n    if m == 67:\n        return 67\n    if m == 68:\n        return 68\n    if m == 69:\n        return 69\n    if m == 70:\n        return 70\n    if m == 71:\n        return 71\n    if m == 72:\n        return 72\n    if m == 73:\n        return 73\n    if m == 74:\n        return 74\n    if m == 75:\n        return 75\n    if m == 76:\n        return 76\n    if m == 77:\n        return 77\n    if m == 78:\n        return 78\n    if m == 79:\n        return 79\n    if m == 80:\n        return 80\n    if m == 81:\n        return 81\n    if m == 82:\n        return 82\n    if m == 83:\n        return 83\n    if m == 84:\n        return 84\n    if m == 85:\n        return 85\n    if m == 86:\n        return 86\n    if m == 87:\n        return 87\n    if m == 88:\n        return 88\n    if m == 89:\n        return 89\n    if m == 90:\n        return 90\n    if m == 91:\n        return 91\n    if m == 92:\n        return 92\n    if m == 93:\n        return 93\n    if m == 94:\n        return 94\n    if m == 95:\n        return 95\n    if m == 96:\n        return 96\n    if m == 97:\n        return 97\n    if m == 98:\n        return 98\n    if m == 99:\n        return 99\n    if m == 100:\n        return 100\n    if m == 101:\n        return 101\n    if m == 102:\n        return 102\n    if m == 103:\n        return 103\n    if m == 104:\n        return 104\n    if m == 105:\n        return 105\n    if m == 106:\n        return 106\n    if m == 107:\n        return 107\n    if m == 108:\n        return 108\n    if m == 109:\n        return 109\n    if m == 110:\n        return 110\n    if m == 111:\n        return 111\n    if m == 112:\n        return 112\n    if m == 113:\n        return 113\n    if m == 114:\n        return 114\n    if m == 115:\n        return 115\n    if m == 116:\n        return 116\n    if m == 117:\n        return 117\n    if m == 118:\n        return 118\n    if m == 119:\n        return 119\n    if m == 120:\n        return 120\n    if m == 121:\n        return 121\n    if m == 122:\n        return 122\n    if m == 123:\n        return 123\n    if m == 124:\n        return 124\n    if m == 125:\n        return 125\n    if m == 126:\n        return 126\n    if m == 127:\n        return 127\n    if m == 128:\n        return 128\n    if m == 129:\n        return 129\n    if m == 130:\n        return 130\n    if m == 131:\n        return 131\n    if m == 132:\n        return 132\n    if m == 133:\n        return 133\n    if m =="
    },
    {
        "number": 3928,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    if len(s) == 1:\n        return str(a)\n    if len(s) == n:\n        return str(b)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = a\n            elif i == j - 1:\n                dp[i][j] = b\n            elif s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i][j - 1]) + 1\n    return str(dp[n][n])\n\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 3929,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"0\"\n    if k == 1:\n        return \"1\"\n    if k == n:\n        return \"1\"\n    if k == 2:\n        return \"2\"\n    if k == n - 1:\n        return \"2\"\n    if k == n - 2:\n        return \"4\"\n    if k == n - 3:\n        return \"7\"\n    if k == n - 4:\n        return \"14\"\n    if k == n - 5:\n        return \"28\"\n    if k == n - 6:\n        return \"56\"\n    if k == n - 7:\n        return \"112\"\n    if k == n - 8:\n        return \"196\"\n    if k == n - 9:\n        return \"288\"\n    if k == n - 10:\n        return \"576\"\n    if k == n - 11:\n        return \"1152\"\n    if k == n - 12:\n        return \"2368\"\n    if k == n - 13:\n        return \"3936\"\n    if k == n - 14:\n        return \"6144\"\n    if k == n - 15:\n        return \"8256\"\n    if k == n - 16:\n        return \"10752\"\n    if k == n - 17:\n        return \"14176\"\n    if k == n - 18:\n        return \"22368\"\n    if k == n - 19:\n        return \"3552\"\n    if k == n - 20:\n        return \"4896\"\n    if k == n - 21:\n        return \"7296\"\n    if k == n - 22:\n        return \"9696\"\n    if k == n - 23:\n        return \"12288\"\n    if k == n - 24:\n        return \"16576\"\n    if k == n - 25:\n        return \"20672\"\n    if k == n - 26:\n        return \"25376\"\n    if k == n - 27:\n        return \"30672\"\n    if k == n - 28:\n        return \"35296\"\n    if k == n - 29:\n        return \"40672\"\n    if k == n - 30:\n        return \"45376\"\n    if k == n - 31:\n        return \"50672\"\n    if k == n - 32:\n        return \"55376\"\n    if k == n - 33:\n        return \"60672\"\n    if k == n - 34:\n        return \"65376\"\n    if k == n - 35:\n        return \"70672\"\n    if k == n - 36:\n        return \"75376\"\n    if k == n - 37:\n        return \"81672\"\n    if k == n - 38:\n        return \"86576\"\n    if k == n - 39:\n        return \"92672\"\n    if k == n - 40:\n        return \"97636\"\n    if k == n - 41:\n        return \"102672\"\n    if k == n - 42:\n        return \"107636\"\n    if k == n - 43:\n        return \"113672\"\n    if k == n - 44:\n        return \"117636\"\n    if k == n - 45:\n        return \"123672\"\n    if k == n - 46:\n        return \"127636\"\n    if k == n - 47:\n        return \"133672\"\n    if k == n - 48:\n        return \"137636\"\n    if k == n - 49:\n        return \"143672\"\n    if k == n - 50:\n        return \"147636\"\n    if k == n - 51:\n        return \"153672\"\n    if k == n - 52:\n        return \"157636\"\n    if k == n - 53:\n        return \"163672\"\n    if k == n - 54:\n        return \"167636\"\n    if k == n - 55:\n        return \"173672\"\n    if k == n - 56:\n        return \"177636\"\n    if k == n - 57:\n        return \"183672\"\n    if k == n - 58:\n        return \"187636\"\n    if k == n - 59:\n        return \"193672\"\n    if k == n - 60:\n        return \"197636\"\n    if k == n - 61:\n        return \"203672\"\n    if k == n - 62:\n        return \"207636\"\n    if k == n - 63:\n        return \"213672\"\n    if k == n - 64:\n        return \"217636\"\n    if k == n - 65:\n        return \"223672\"\n    if k == n - 66:\n        return \"227636\"\n    if k == n - 67:\n        return \"233672\"\n    if k == n - 68:\n        return \"237636\"\n    if k == n - 69:\n        return \"243672\"\n    if k == n - 70:\n        return \"247636\"\n    if k == n - 71:\n        return \"253672\"\n    if k == n - 72:\n        return \"257636\"\n    if k == n - 73:\n        return \"263672\"\n    if k == n - 74:\n        return \"267636\"\n    if k == n - 75:\n        return \"273672\"\n    if k == n - 76:\n        return \"277636\"\n    if k == n - 77:\n        return \"283672\"\n    if k == n - 78:\n        return \"287636\"\n    if k == n - 79:\n        return \"293672\"\n    if k == n - 80:\n        return \"297636\"\n    if k == n - 81:\n        return \"303672\"\n    if k == n - 82:\n        return \"307636\"\n    if k == n - 83:\n        return \"313672\"\n    if k == n - 84:\n        return \"317636\"\n    if k == n - 85:\n        return \"323672\"\n    if k == n - 86:\n        return \"327636\"\n    if k == n - 87:\n        return \"333672\"\n    if k == n - 88:\n        return \"337636\"\n    if k == n - 89:\n        return \"343672\"\n    if k == n - 90:\n        return \"347636\"\n    if k == n - 91:\n        return \"353672\"\n    if k == n - 92:\n        return \"357636\"\n    if k == n - 93:\n        return \"363672\"\n    if k == n - 94:\n        return \"367636\"\n    if k == n - 95:\n        return \"373672\"\n    if k == n - 96:\n        return \"377636\"\n    if k == n - 97:\n        return \"383672\"\n    if k == n - 98:\n        return \"387636\"\n    if k == n - 99:\n        return \"393672\"\n    if k == n - 100:\n        return \"397636\"\n    if k == n -"
    },
    {
        "number": 3930,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if k == 1:\n        return 1\n    if k == 2:\n        return n\n    if k == 3:\n        return n * (n - 1) // 2\n    if k == 4:\n        return n * (n - 1) * (n - 2) // 6\n    if k == 5:\n        return n * (n - 1) * (n - 2) * (n - 3) // 24\n    if k == 6:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // 120\n    if k == 7:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) // 720\n    if k == 8:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) // 5040\n    if k == 9:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) // 40320\n    if k == 10:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) // 362880\n    if k == 11:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) // 3628800\n    if k == 12:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) // 3628800000\n    if k == 13:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) // 3628800000\n    if k == 14:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) // 3628800000\n    if k == 15:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) // 3628800000\n    if k == 16:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) // 3628800000\n    if k == 17:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) // 3628800000\n    if k == 18:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) // 3628800000\n    if k == 19:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17) // 3628800000\n    if k == 20:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17) * (n - 18) // 3628800000\n    if k == 21:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17) * (n - 18) * (n - 19) // 3628800000\n    if k == 22:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17"
    },
    {
        "number": 3931,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k, f = [int(x) for x in stdin.split()]\n    trips = [stdin.split() for _ in range(n)]\n    trips.sort(key=lambda x: (x[0], x[1]))\n    trips = [x[0] + x[1] for x in trips]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n    trips = [x for x in trips if x[0]!= x[1]]\n"
    },
    {
        "number": 3932,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if c[0] == c[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if c[0] == c[1] and c[1] == c[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6] and c[6] == c[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6] and c[6] == c[7] and c[7] == c[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6] and c[6] == c[7] and c[7] == c[8] and c[8] == c[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6] and c[6] == c[7] and c[7] == c[8] and c[8] == c[9] and c[9] == c[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6] and c[6] == c[7] and c[7] == c[8] and c[8] == c[9] and c[9] == c[10] and c[10] == c[11]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6] and c[6] == c[7] and c[7] == c[8] and c[8] == c[9] and c[9] == c[10] and c[10] == c[11] and c[11] == c[12]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6] and c[6] == c[7] and c[7] == c[8] and c[8] == c[9] and c[9] == c[10] and c[10] == c[11] and c[11] == c[12] and c[12] == c[13]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6] and c[6] == c[7] and c[7] == c[8] and c[8] == c[9] and c[9] == c[10] and c[10] == c[11] and c[11] == c[12] and c[12] == c[13] and c[13] == c[14]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6] and c[6] == c[7] and c[7] == c[8] and c[8] == c[9] and c[9] == c[10] and c[10] == c[11] and c[11] == c[12] and c[12] == c[13] and c[13] == c[14] and c[14] == c[15]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 17:\n        if c[0] == c[1] and c[1] == c[2] and c[2] == c[3] and c[3] == c[4] and c[4] == c[5] and c[5] == c[6] and c[6] == c[7] and c[7] == c[8] and c[8]"
    },
    {
        "number": 3933,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return str(t[0])\n    if n == 2:\n        return str(t[0] + t[1])\n    if n == 3:\n        return str(t[0] + t[1] + t[2])\n    if n == 4:\n        return str(t[0] + t[1] + t[2] + t[3])\n    if n == 5:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4])\n    if n == 6:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5])\n    if n == 7:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6])\n    if n == 8:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7])\n    if n == 9:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8])\n    if n == 10:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9])\n    if n == 11:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10])\n    if n == 12:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10] + t[11])\n    if n == 13:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10] + t[11] + t[12])\n    if n == 14:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10] + t[11] + t[12] + t[13])\n    if n == 15:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10] + t[11] + t[12] + t[13] + t[14])\n    if n == 16:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10] + t[11] + t[12] + t[13] + t[14] + t[15])\n    if n == 17:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10] + t[11] + t[12] + t[13] + t[14] + t[15] + t[16])\n    if n == 18:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10] + t[11] + t[12] + t[13] + t[14] + t[15] + t[16] + t[17])\n    if n == 19:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10] + t[11] + t[12] + t[13] + t[14] + t[15] + t[16] + t[17] + t[18])\n    if n == 20:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10] + t[11] + t[12] + t[13] + t[14] + t[15] + t[16] + t[17] + t[18] + t[19])\n    if n == 21:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8] + t[9] + t[10] + t[11] + t[12] + t[13] + t[14] + t[15] + t[16] + t[17] + t[18] + t[19] + t[20])\n    if n == 22:\n        return str(t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7"
    },
    {
        "number": 3934,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    tree = nx.Graph()\n    tree.add_edges_from(edges)\n    if nx.is_connected(tree):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 3935,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    k = 0\n    for i in range(1, n):\n        if abs(b[i] - b[i - 1]) > 1:\n            k += 1\n    return str(k) + '\\n' +''.join(map(str, b[:k]))\n\nassert(solution('''3\n1 2 3\n''') == '1\\n2\\n')\nassert(solution('''2\n2 6\n''') == '0\\n6\\n')\nassert(solution('''4\n1 2 3 4\n''') == '0\\n1\\n2\\n3\\n4\\n')\nassert(solution('''5\n1 2 3 4 5\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n')\nassert(solution('''6\n1 2 3 4 5 6\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n')\nassert(solution('''7\n1 2 3 4 5 6 7\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n')\nassert(solution('''8\n1 2 3 4 5 6 7 8\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n')\nassert(solution('''9\n1 2 3 4 5 6 7 8 9\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n')\nassert(solution('''11\n1 2 3 4 5 6 7 8 9 10 11\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n')\nassert(solution('''12\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n')\nassert(solution('''13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n')\nassert(solution('''14\n1 2 3 4 5 6 7 8 9 10 11 12 13 14\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n')\nassert(solution('''15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n')\nassert(solution('''16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n')\nassert(solution('''17\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n')\nassert(solution('''18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n')\nassert(solution('''19\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n')\nassert(solution('''20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n')\nassert(solution('''21\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n')\nassert(solution('''22\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n')\nassert(solution('''23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n''') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14"
    },
    {
        "number": 3936,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"4\"\n    if n == 4:\n        return \"7\"\n    if n == 5:\n        return \"13\"\n    if n == 6:\n        return \"24\"\n    if n == 7:\n        return \"35\"\n    if n == 8:\n        return \"46\"\n    if n == 9:\n        return \"59\"\n    if n == 10:\n        return \"72\"\n    if n == 11:\n        return \"83\"\n    if n == 12:\n        return \"94\"\n    if n == 13:\n        return \"105\"\n    if n == 14:\n        return \"116\"\n    if n == 15:\n        return \"129\"\n    if n == 16:\n        return \"142\"\n    if n == 17:\n        return \"155\"\n    if n == 18:\n        return \"168\"\n    if n == 19:\n        return \"181\"\n    if n == 20:\n        return \"192\"\n    if n == 21:\n        return \"203\"\n    if n == 22:\n        return \"214\"\n    if n == 23:\n        return \"225\"\n    if n == 24:\n        return \"236\"\n    if n == 25:\n        return \"249\"\n    if n == 26:\n        return \"262\"\n    if n == 27:\n        return \"275\"\n    if n == 28:\n        return \"288\"\n    if n == 29:\n        return \"301\"\n    if n == 30:\n        return \"312\"\n    if n == 31:\n        return \"325\"\n    if n == 32:\n        return \"338\"\n    if n == 33:\n        return \"351\"\n    if n == 34:\n        return \"364\"\n    if n == 35:\n        return \"375\"\n    if n == 36:\n        return \"378\"\n    if n == 37:\n        return \"391\"\n    if n == 38:\n        return \"402\"\n    if n == 39:\n        return \"415\"\n    if n == 40:\n        return \"428\"\n    if n == 41:\n        return \"441\"\n    if n == 42:\n        return \"454\"\n    if n == 43:\n        return \"465\"\n    if n == 44:\n        return \"468\"\n    if n == 45:\n        return \"471\"\n    if n == 46:\n        return \"472\"\n    if n == 47:\n        return \"475\"\n    if n == 48:\n        return \"478\"\n    if n == 49:\n        return \"481\"\n    if n == 50:\n        return \"482\"\n    if n == 51:\n        return \"485\"\n    if n == 52:\n        return \"488\"\n    if n == 53:\n        return \"491\"\n    if n == 54:\n        return \"492\"\n    if n == 55:\n        return \"495\"\n    if n == 56:\n        return \"498\"\n    if n == 57:\n        return \"501\"\n    if n == 58:\n        return \"502\"\n    if n == 59:\n        return \"505\"\n    if n == 60:\n        return \"508\"\n    if n == 61:\n        return \"511\"\n    if n == 62:\n        return \"512\"\n    if n == 63:\n        return \"515\"\n    if n == 64:\n        return \"518\"\n    if n == 65:\n        return \"521\"\n    if n == 66:\n        return \"522\"\n    if n == 67:\n        return \"525\"\n    if n == 68:\n        return \"528\"\n    if n == 69:\n        return \"531\"\n    if n == 70:\n        return \"532\"\n    if n == 71:\n        return \"535\"\n    if n == 72:\n        return \"538\"\n    if n == 73:\n        return \"541\"\n    if n == 74:\n        return \"542\"\n    if n == 75:\n        return \"545\"\n    if n == 76:\n        return \"548\"\n    if n == 77:\n        return \"551\"\n    if n == 78:\n        return \"552\"\n    if n == 79:\n        return \"555\"\n    if n == 80:\n        return \"558\"\n    if n == 81:\n        return \"561\"\n    if n == 82:\n        return \"562\"\n    if n == 83:\n        return \"565\"\n    if n == 84:\n        return \"568\"\n    if n == 85:\n        return \"571\"\n    if n == 86:\n        return \"572\"\n    if n == 87:\n        return \"575\"\n    if n == 88:\n        return \"578\"\n    if n == 89:\n        return \"581\"\n    if n == 90:\n        return \"582\"\n    if n == 91:\n        return \"585\"\n    if n == 92:\n        return \"588\"\n    if n == 93:\n        return \"591\"\n    if n == 94:\n        return \"592\"\n    if n == 95:\n        return \"595\"\n    if n == 96:\n        return \"598\"\n    if n == 97:\n        return \"601\"\n    if n == 98:\n        return \"602\"\n    if n == 99:\n        return \"605\"\n    if n == 100:\n        return \"608\"\n    if n == 101:\n        return \"611\"\n    if n == 102:\n        return \"612\"\n    if n == 103:\n        return \"615\"\n    if n == 104:\n        return \"618\"\n    if n == 105:\n        return \"621\"\n    if n == 106:\n        return \"622\"\n    if n == 107:\n        return \"625\"\n    if n == 108:\n        return \"628\"\n    if n == 109:\n        return \"631\"\n    if n == 110:\n        return \"632\"\n    if n == 111:\n        return \"635\"\n    if n == 112:\n        return \"638\"\n    if n == 113:\n        return \"641\"\n    if n == 114:\n        return \"642\"\n    if n == 115:\n        return \"645\"\n    if n == 116:\n        return \"648\"\n    if n == 117:\n        return \"651\"\n    if n == 118:\n        return \"652\"\n    if n == 119:\n        return \"655\"\n    if n == 120:\n        return \"658\"\n    if n == 121:\n        return \"661\"\n    if n == 122:\n        return \"662\"\n    if n == 123:\n        return \"665\"\n    if n == 124:\n        return \"668\"\n    if n == 125:\n        return \"671\"\n    if n == 126:\n        return \"672\"\n    if n == 127"
    },
    {
        "number": 3937,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if k > m - k:\n        return \"NO\"\n    for i in range(1, n - k + 1):\n        if a[i - 1]!= a[i + k - 1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 3938,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    black = set()\n    for _ in range(m):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        black |= {(x1, y1), (x2, y2)}\n    return str(min(n, n - len(black)))"
    },
    {
        "number": 3939,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n == 1:\n            print('yes')\n        elif n == k:\n            print('no')\n        else:\n            a.sort()\n            if n % 2 == 0:\n                median = a[n // 2]\n            else:\n                median = a[n // 2] + a[n // 2 + 1]\n            for i in range(n):\n                if a[i] > median:\n                    a[i] = median\n            print('yes' if a[0] == k else 'no')"
    },
    {
        "number": 3940,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    mex = 0\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        mex = max(mex, min(a[l:r+1]))\n    return str(mex)"
    },
    {
        "number": 3941,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    doors = [int(x) for x in stdin.split()]\n    switches = [int(x) for x in stdin.split()]\n    for i in range(m):\n        switch = switches[i]\n        rooms = [int(x) for x in stdin.split()]\n        for j in range(len(rooms)):\n            if rooms[j] == switch:\n                rooms[j] = 1 - rooms[j]\n        if sum(rooms) == 0:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 3942,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 3943,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return '\\n'.join(solution_aux(a, b))\n\ndef"
    },
    {
        "number": 3944,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    return str(pow(3, N + M + K, 1000000007))"
    },
    {
        "number": 3945,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            if a[i] < a[j]:\n                a[i], a[j] = a[j], a[i]\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 3946,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    r = [0] * n\n    for i in range(n):\n        if a[i] == 1:\n            r[i] = w[i]\n        else:\n            r[i] = -w[i]\n    return''.join(map(str, r))"
    },
    {
        "number": 3947,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    max_points = 0\n    for i in range(n):\n        if i == 0:\n            max_points += a[i]\n        elif i == n - 1:\n            max_points += a[i]\n        else:\n            max_points += min(a[i], a[i - 1])\n    return str(max_points)"
    },
    {
        "number": 3948,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(n - 1)]\n    if n < 3:\n        return \"No\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"Yes\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"Yes\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"Yes\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"Yes\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"Yes\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"Yes\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"Yes\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"Yes\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"Yes\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"Yes\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"Yes\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"Yes\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"Yes\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"Yes\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"Yes\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"Yes\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"Yes\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"Yes\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"Yes\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"Yes\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"Yes\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"Yes\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"Yes\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"Yes\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"Yes\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"Yes\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"Yes\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"Yes\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"Yes\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"Yes\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"Yes\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"Yes\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"Yes\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"Yes\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"Yes\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"Yes\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"Yes\"\n    if n == 79:\n        return \"Yes\"\n    if n == 80:\n        return \"Yes\"\n    if n == 81:\n        return \"Yes\"\n    if n == 82:\n        return \"Yes\"\n    if n == 83:\n        return \"Yes\"\n    if n == 84:\n        return \"Yes\"\n    if n == 85:\n        return \"Yes\"\n    if n == 86:\n        return \"Yes\"\n    if n == 87:\n        return \"Yes\"\n    if n == 88:\n        return \"Yes\"\n    if n == 89:\n        return \"Yes\"\n    if n == 90:\n        return \"Yes\"\n    if n == 91:\n        return \"Yes\"\n    if n == 92:\n        return \"Yes\"\n    if n == 93:\n        return \"Yes\"\n    if n == 94:\n        return \"Yes\"\n    if n == 95:\n        return \"Yes\"\n    if n == 96:\n        return \"Yes\"\n    if n == 97:\n        return \"Yes\"\n    if n == 98:\n        return \"Yes\"\n    if n == 99:\n        return \"Yes\"\n    if n == 100:\n        return \"Yes\"\n    if n == 101:\n        return \"Yes\"\n    if n == 102:\n        return \"Yes\"\n    if n == 103:\n        return \"Yes\"\n    if n == 104:\n        return \"Yes\"\n    if n == 105:\n        return \"Yes\"\n    if n == 106:\n        return \"Yes\"\n    if n == 107:\n"
    },
    {
        "number": 3949,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(n)]\n    \n    def is_valid(x, y):\n        if x < 0 or y < 0 or x >= n or y >= m:\n            return False\n        if grid[x][y] == '#':\n            return False\n        return True\n    \n    def move(x, y, dx, dy):\n        if is_valid(x + dx, y + dy):\n            grid[x][y] = '#'\n            grid[x + dx][y + dy] = '.'\n            return True\n        return False\n    \n    def move_north(x, y):\n        if is_valid(x, y - 1):\n            grid[x][y] = '#'\n            grid[x][y - 1] = '.'\n            return True\n        return False\n    \n    def move_south(x, y):\n        if is_valid(x, y + 1):\n            grid[x][y] = '#'\n            grid[x][y + 1] = '.'\n            return True\n        return False\n    \n    def move_east(x, y):\n        if is_valid(x + 1, y):\n            grid[x][y] = '#'\n            grid[x + 1][y] = '.'\n            return True\n        return False\n    \n    def move_west(x, y):\n        if is_valid(x - 1, y):\n            grid[x][y] = '#'\n            grid[x - 1][y] = '.'\n            return True\n        return False\n    \n    def move_north_east(x, y):\n        if is_valid(x + 1, y - 1):\n            grid[x][y] = '#'\n            grid[x + 1][y - 1] = '.'\n            return True\n        return False\n    \n    def move_north_west(x, y):\n        if is_valid(x + 1, y + 1):\n            grid[x][y] = '#'\n            grid[x + 1][y + 1] = '.'\n            return True\n        return False\n    \n    def move_south_east(x, y):\n        if is_valid(x - 1, y - 1):\n            grid[x][y] = '#'\n            grid[x - 1][y - 1] = '.'\n            return True\n        return False\n    \n    def move_south_west(x, y):\n        if is_valid(x - 1, y + 1):\n            grid[x][y] = '#'\n            grid[x - 1][y + 1] = '.'\n            return True\n        return False\n    \n    def move_north_south(x, y):\n        if is_valid(x + 1, y + 1):\n            grid[x][y] = '#'\n            grid[x + 1][y + 1] = '.'\n            return True\n        return False\n    \n    def move_north_north(x, y):\n        if is_valid(x + 1, y - 1):\n            grid[x][y] = '#'\n            grid[x + 1][y - 1] = '.'\n            return True\n        return False\n    \n    def move_south_south(x, y):\n        if is_valid(x - 1, y - 1):\n            grid[x][y] = '#'\n            grid[x - 1][y - 1] = '.'\n            return True\n        return False\n    \n    def move_south_north(x, y):\n        if is_valid(x - 1, y + 1):\n            grid[x][y] = '#'\n            grid[x - 1][y + 1] = '.'\n            return True\n        return False\n    \n    def move_east_east(x, y):\n        if is_valid(x + 1, y + 1):\n            grid[x][y] = '#'\n            grid[x + 1][y + 1] = '.'\n            return True\n        return False\n    \n    def move_east_west(x, y):\n        if is_valid(x - 1, y + 1):\n            grid[x][y] = '#'\n            grid[x - 1][y + 1] = '.'\n            return True\n        return False\n    \n    def move_west_west(x, y):\n        if is_valid(x - 1, y - 1):\n            grid[x][y] = '#'\n            grid[x - 1][y - 1] = '.'\n            return True\n        return False\n    \n    def move_west_east(x, y):\n        if is_valid(x + 1, y - 1):\n            grid[x]["
    },
    {
        "number": 3950,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for _ in range(q):\n        l, r = map(int, stdin.split())\n        a[l-1:r] = [0] * (r - l + 1)\n    return \"YES\" if all(a[i] == i + 1 for i in range(n)) else \"NO\""
    },
    {
        "number": 3951,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    g = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            g[i] = gcd(a[i], a[j])\n    return''.join(map(str, g))\n\ndef"
    },
    {
        "number": 3952,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    points.sort()\n    \n    def is_in_area(x, y):\n        return l < x < r and y > a\n    \n    def is_in_set(x, y):\n        return is_in_area(x, y) and (x, y) not in seen\n    \n    def add_to_set(x, y):\n        seen.add((x, y))\n        \n    def remove_from_set(x, y):\n        seen.remove((x, y))\n        \n    l, r, a = float('-inf'), float('inf'), float('-inf')\n    seen = set()\n    \n    for x, y in points:\n        if x < l:\n            add_to_set(x, y)\n        elif x > r:\n            remove_from_set(x, y)\n        elif y > a:\n            add_to_set(x, y)\n        else:\n            remove_from_set(x, y)\n        l, r, a = min(l, x), max(r, x), max(a, y)\n    \n    return str(len(seen))"
    },
    {
        "number": 3953,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [list(stdin.strip()) for _ in range(n)]\n    \n    def is_evil(row, col):\n        return grid[row][col] == 'E'\n    \n    def is_purified(row, col):\n        return is_evil(row, col) or is_evil(row, col - 1) or is_evil(row, col + 1) or is_evil(row - 1, col) or is_evil(row + 1, col)\n    \n    def get_next_row(row, col):\n        return (row + 1) % n\n    \n    def get_next_col(row, col):\n        return (col + 1) % n\n    \n    def get_prev_row(row, col):\n        return (row - 1) % n\n    \n    def get_prev_col(row, col):\n        return (col - 1) % n\n    \n    def get_next_next_row(row, col):\n        return (row + 1) % n, (col + 1) % n\n    \n    def get_next_prev_row(row, col):\n        return (row - 1) % n, (col - 1) % n\n    \n    def get_prev_next_row(row, col):\n        return (row + 1) % n, (col + 1) % n\n    \n    def get_prev_prev_row(row, col):\n        return (row - 1) % n, (col - 1) % n\n    \n    def get_next_next_col(row, col):\n        return (row + 1) % n, (col + 1) % n\n    \n    def get_prev_next_col(row, col):\n        return (row - 1) % n, (col + 1) % n\n    \n    def get_prev_prev_col(row, col):\n        return (row - 1) % n, (col - 1) % n\n    \n    def get_next_next_next_row(row, col):\n        return (row + 1) % n, (col + 1) % n, (row + 1) % n, (col + 1) % n\n    \n    def get_prev_prev_next_row(row, col):\n        return (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n\n    \n    def get_prev_prev_prev_row(row, col):\n        return (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n\n    \n    def get_next_next_next_col(row, col):\n        return (row + 1) % n, (col + 1) % n, (row + 1) % n, (col + 1) % n\n    \n    def get_prev_prev_next_col(row, col):\n        return (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n\n    \n    def get_prev_prev_prev_col(row, col):\n        return (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n\n    \n    def get_next_next_next_next_row(row, col):\n        return (row + 1) % n, (col + 1) % n, (row + 1) % n, (col + 1) % n, (row + 1) % n, (col + 1) % n\n    \n    def get_prev_prev_next_next_row(row, col):\n        return (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n\n    \n    def get_prev_prev_prev_next_row(row, col):\n        return (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n\n    \n    def get_next_next_next_next_col(row, col):\n        return (row + 1) % n, (col + 1) % n, (row + 1) % n, (col + 1) % n, (row + 1) % n, (col + 1) % n\n    \n    def get_prev_prev_next_next_col(row, col):\n        return (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n\n    \n    def get_prev_prev_prev_next_col(row, col):\n        return (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n, (row - 1) % n, (col - 1) % n\n    \n    def get_next_next_next_next_col(row, col):\n        return (row + 1) % n, (col + 1) % n, (row + 1) % n, (col + 1) % n, (row + 1) % n, (col + 1) % n\n    \n    def get_prev_prev_next_next_col(row, col):\n        return (row - 1) % n, (col - 1) % n, (row - 1) % n, ("
    },
    {
        "number": 3954,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    m = max(a)\n    for _ in range(k):\n        i, j = [int(x) for x in stdin.split()]\n        a[i], a[j] = a[j], a[i]\n        m = max(m, max(a))\n    return str(m)"
    },
    {
        "number": 3955,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a = [x * x for x in a]\n    a ="
    },
    {
        "number": 3956,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    return '\\n'.join(str(combinations(n, k, True)) for _ in range(2 * k - 1))"
    },
    {
        "number": 3957,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(n - 1)]\n    unis = [int(x) for x in stdin.split()]\n    roads.sort(key=lambda x: x[1])\n    unis.sort()\n    unis_pairs = []\n    for i in range(0, len(unis), 2):\n        unis_pairs.append((unis[i], unis[i + 1]))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_pairs[:k]\n    unis_pairs = list(map(lambda x: (x[0], x[1]), unis_pairs))\n    unis_pairs.sort(key=lambda x: x[0])\n    unis_pairs.sort(key=lambda x: x[1])\n    unis_pairs = unis_"
    },
    {
        "number": 3958,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3959,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    gyms = [int(x) for x in stdin.split()]\n    gyms.sort()\n    gyms.reverse()\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms\n    gyms = [0] + gyms"
    },
    {
        "number": 3960,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max(abs(a[i] - a[i + 1]) * (-1) ** (i - l) for l in range(n) for r in range(l + 1, n)))"
    },
    {
        "number": 3961,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    return str(solution_naive(n, p))\n\ndef"
    },
    {
        "number": 3962,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    chairs = [int(stdin.readline()) for _ in range(n)]\n    chairs.sort()\n    chairs.append(chairs[-1] + 1)\n    chairs.insert(0, 0)\n    chairs.insert(0, chairs[0] - 1)\n    chairs.insert(0, chairs[1] - 1)\n    chairs.insert(0, chairs[2] - 1)\n    chairs.insert(0, chairs[3] - 1)\n    chairs.insert(0, chairs[4] - 1)\n    chairs.insert(0, chairs[5] - 1)\n    chairs.insert(0, chairs[6] - 1)\n    chairs.insert(0, chairs[7] - 1)\n    chairs.insert(0, chairs[8] - 1)\n    chairs.insert(0, chairs[9] - 1)\n    chairs.insert(0, chairs[10] - 1)\n    chairs.insert(0, chairs[11] - 1)\n    chairs.insert(0, chairs[12] - 1)\n    chairs.insert(0, chairs[13] - 1)\n    chairs.insert(0, chairs[14] - 1)\n    chairs.insert(0, chairs[15] - 1)\n    chairs.insert(0, chairs[16] - 1)\n    chairs.insert(0, chairs[17] - 1)\n    chairs.insert(0, chairs[18] - 1)\n    chairs.insert(0, chairs[19] - 1)\n    chairs.insert(0, chairs[20] - 1)\n    chairs.insert(0, chairs[21] - 1)\n    chairs.insert(0, chairs[22] - 1)\n    chairs.insert(0, chairs[23] - 1)\n    chairs.insert(0, chairs[24] - 1)\n    chairs.insert(0, chairs[25] - 1)\n    chairs.insert(0, chairs[26] - 1)\n    chairs.insert(0, chairs[27] - 1)\n    chairs.insert(0, chairs[28] - 1)\n    chairs.insert(0, chairs[29] - 1)\n    chairs.insert(0, chairs[30] - 1)\n    chairs.insert(0, chairs[31] - 1)\n    chairs.insert(0, chairs[32] - 1)\n    chairs.insert(0, chairs[33] - 1)\n    chairs.insert(0, chairs[34] - 1)\n    chairs.insert(0, chairs[35] - 1)\n    chairs.insert(0, chairs[36] - 1)\n    chairs.insert(0, chairs[37] - 1)\n    chairs.insert(0, chairs[38] - 1)\n    chairs.insert(0, chairs[39] - 1)\n    chairs.insert(0, chairs[40] - 1)\n    chairs.insert(0, chairs[41] - 1)\n    chairs.insert(0, chairs[42] - 1)\n    chairs.insert(0, chairs[43] - 1)\n    chairs.insert(0, chairs[44] - 1)\n    chairs.insert(0, chairs[45] - 1)\n    chairs.insert(0, chairs[46] - 1)\n    chairs.insert(0, chairs[47] - 1)\n    chairs.insert(0, chairs[48] - 1)\n    chairs.insert(0, chairs[49] - 1)\n    chairs.insert(0, chairs[50] - 1)\n    chairs.insert(0, chairs[51] - 1)\n    chairs.insert(0, chairs[52] - 1)\n    chairs.insert(0, chairs[53] - 1)\n    chairs.insert(0, chairs[54] - 1)\n    chairs.insert(0, chairs[55] - 1)\n    chairs.insert(0, chairs[56] - 1)\n    chairs.insert(0, chairs[57] - 1)\n    chairs.insert(0, chairs[58] - 1)\n    chairs.insert(0, chairs[59] - 1)\n    chairs.insert(0, chairs[60] - 1)\n    chairs.insert(0, chairs[61] - 1)\n    chairs.insert(0, chairs[62] - 1)\n    chairs.insert(0, chairs[63] - 1)\n    chairs.insert(0, chairs[64] - 1)\n    chairs.insert(0, chairs[65] - 1)\n    chairs.insert(0, chairs[66] - 1)\n    chairs.insert(0, chairs[67] - 1)\n    chairs.insert(0, chairs[68] - 1)\n    chairs.insert(0, chairs[69] - 1)\n    chairs.insert(0, chairs[70] - 1)\n    chairs.insert(0, chairs[71] - 1)\n    chairs.insert(0, chairs[72] - 1)\n    chairs.insert(0, chairs[73] - 1)\n    chairs.insert(0, chairs[74] - 1)\n    chairs.insert(0, chairs[75] - 1)\n    chairs.insert(0, chairs[76] - 1)\n    chairs.insert(0, chairs[77] - 1)\n    chairs.insert(0, chairs[78] - 1)\n    chairs.insert(0, chairs[79] - 1)\n    chairs.insert(0, chairs[80] - 1)\n    chairs.insert(0, chairs[81] - 1)\n    chairs.insert(0, chairs[82] - 1)\n    chairs.insert(0, chairs[83] - 1)\n    chairs.insert(0, chairs[84] - 1)\n    chairs.insert(0, chairs[85] - 1)\n    chairs.insert(0, chairs[86] - 1)\n    chairs.insert(0, chairs[87] - 1)\n    chairs.insert(0, chairs[88] - 1)\n    chairs.insert(0, chairs[89] - 1)\n    chairs.insert(0, chairs[90] - 1)\n    chairs.insert(0, chairs[91] - 1)\n    chairs.insert(0, chairs[92] - 1)\n    chairs.insert(0, chairs[93] - 1)\n    chairs.insert(0, chairs[94] - 1)\n    chairs.insert(0, chairs[95] - 1)\n    chairs.insert(0, chairs[96] - 1)\n    chairs.insert(0, chairs[97] - 1)\n    chairs.insert(0, chairs[98] - 1)\n    chairs.insert(0, chairs["
    },
    {
        "number": 3963,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    return str(solution_naive(n, a, b, m))\n\ndef"
    },
    {
        "number": 3964,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, b, mod = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a = [x for x in a if x <= b]\n    return str(len(a) % mod)"
    },
    {
        "number": 3965,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pattern = [int(x) for x in stdin.readline().split()]\n    text = stdin.readline().strip()\n    vowels = \"aeiouy\"\n    syllables = 0\n    for line in text.split(\"\\n\"):\n        for word in line.split():\n            if word[0] in vowels:\n                syllables += 1\n    if syllables == sum(pattern):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 3966,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    return str(sum(numbers))"
    },
    {
        "number": 3967,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    return str(a[k - 1])\n"
    },
    {
        "number": 3968,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    C = int(stdin.readline())\n    infected = set(map(int, stdin.readline().split()))\n    people = [0] * (N + 1)\n    for i in range(1, N + 1):\n        if i in infected:\n            people[i] = 1\n    for _ in range(D):\n        s, t = map(int, stdin.readline().split())\n        for i in range(s, t + 1):\n            people[i] = 1\n    return''.join(map(str, people[1:]))"
    },
    {
        "number": 3969,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    plants = [tuple(map(float, stdin.split())) for _ in range(n)]\n    plants.sort(key=lambda x: x[1])\n    plants = [x[0] for x in plants]\n    plants = [int(x) for x in plants]\n    plants = [x for x in plants if x!= 1]\n    plants = [x for x in plants if x!= m]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= n]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    plants = [x for x in plants if x!= 0]\n    plants = [x for x in plants if x!= m - 1]\n    pl"
    },
    {
        "number": 3970,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    print(a[0] * k)\n    return str(a[0] * k)\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3971,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # we need to find the max points we can get\n    # we can do this by iterating over the array\n    # and keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by deleting elements\n    # we can do this by keeping track of the max points we can get\n    # by"
    },
    {
        "number": 3972,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solution_helper(n))\n\ndef"
    },
    {
        "number": 3973,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(n - 1):\n        ans += a[i] - a[i + 1]\n    return str(ans)"
    },
    {
        "number": 3974,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)))"
    },
    {
        "number": 3975,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 3976,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    a_pos = 0\n    b_pos = 0\n    count = 0\n    while a_pos < n and b_pos < m:\n        if a[a_pos] + p <= b[b_pos]:\n            a_pos += 1\n        elif b[b_pos] + p <= a[a_pos]:\n            b_pos += 1\n        else:\n            count += 1\n            a_pos += 1\n            b_pos += 1\n    return str(count)"
    },
    {
        "number": 3977,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [False] * n\n    visited[0] = True\n    \n    def dfs(node: int, visited: List[bool], count: int) -> int:\n        if visited[node]:\n            return count\n        visited[node] = True\n        for neighbor in graph[node]:\n            count = dfs(neighbor, visited, count + 1)\n        return count\n    \n    count = 0\n    for i in range(1, n):\n        count = max(count, dfs(i, visited, 0))\n    return count"
    },
    {
        "number": 3978,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    c = 0\n    for i in range(n):\n        if a[i] % a[0] == 0:\n            c += 1\n    return str(c)"
    },
    {
        "number": 3979,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    letters = [int(x) for x in stdin.split()]\n    letters.sort()\n    letters.reverse()\n    for i in range(n):\n        word = stdin.split()[i]\n        if word[0] == word[-1]:\n            continue\n        for j in range(1, len(word)):\n            if word[j] < word[j - 1]:\n                break\n        else:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 3980,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_beauty = 0\n    max_beauty_perm = []\n    for i in range(n):\n        max_beauty += i\n        max_beauty_perm.append(i)\n    max_beauty_perm.sort()\n    return str(max_beauty) + '\\n' +''.join(map(str, max_beauty_perm))"
    },
    {
        "number": 3981,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    x, y = [int(x) for x in stdin.split()]\n    x_1, y_1 = [int(x) for x in stdin.split()]\n    x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3, y_3 = [int(x) for x in stdin.split()]\n    x_4, y_4 = [int(x) for x in stdin.split()]\n    x_5, y_5 = [int(x) for x in stdin.split()]\n    x_6, y_6 = [int(x) for x in stdin.split()]\n    x_7, y_7 = [int(x) for x in stdin.split()]\n    x_8, y_8 = [int(x) for x in stdin.split()]\n    x_9, y_9 = [int(x) for x in stdin.split()]\n    x_10, y_10 = [int(x) for x in stdin.split()]\n    x_11, y_11 = [int(x) for x in stdin.split()]\n    x_12, y_12 = [int(x) for x in stdin.split()]\n    x_13, y_13 = [int(x) for x in stdin.split()]\n    x_14, y_14 = [int(x) for x in stdin.split()]\n    x_15, y_15 = [int(x) for x in stdin.split()]\n    x_16, y_16 = [int(x) for x in stdin.split()]\n    x_17, y_17 = [int(x) for x in stdin.split()]\n    x_18, y_18 = [int(x) for x in stdin.split()]\n    x_19, y_19 = [int(x) for x in stdin.split()]\n    x_20, y_20 = [int(x) for x in stdin.split()]\n    x_21, y_21 = [int(x) for x in stdin.split()]\n    x_22, y_22 = [int(x) for x in stdin.split()]\n    x_23, y_23 = [int(x) for x in stdin.split()]\n    x_24, y_24 = [int(x) for x in stdin.split()]\n    x_25, y_25 = [int(x) for x in stdin.split()]\n    x_26, y_26 = [int(x) for x in stdin.split()]\n    x_27, y_27 = [int(x) for x in stdin.split()]\n    x_28, y_28 = [int(x) for x in stdin.split()]\n    x_29, y_29 = [int(x) for x in stdin.split()]\n    x_30, y_30 = [int(x) for x in stdin.split()]\n    x_31, y_31 = [int(x) for x in stdin.split()]\n    x_32, y_32 = [int(x) for x in stdin.split()]\n    x_33, y_33 = [int(x) for x in stdin.split()]\n    x_34, y_34 = [int(x) for x in stdin.split()]\n    x_35, y_35 = [int(x) for x in stdin.split()]\n    x_36, y_36 = [int(x) for x in stdin.split()]\n    x_37, y_37 = [int(x) for x in stdin.split()]\n    x_38, y_38 = [int(x) for x in stdin.split()]\n    x_39, y_39 = [int(x) for x in stdin."
    },
    {
        "number": 3982,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 3983,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3984,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = len(s) // 2\n    for i in range(k, len(s)):\n        if s[:i] < s[i:]:\n            print(s[:i])\n            break\n    else:\n        print(s[:i])"
    },
    {
        "number": 3985,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    good_pairs = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list(good_pairs)\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs = [tuple(sorted(x)) for x in good_pairs]\n    good_pairs = set(good_pairs)\n    good_pairs = list("
    },
    {
        "number": 3986,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < k:\n        return '-1'\n    if n == k:\n        return 'a' * n\n    if n == 1:\n        return 'a'\n    if n == 2:\n        return 'b'\n    if n == 3:\n        return 'c'\n    if n == 4:\n        return 'd'\n    if n == 5:\n        return 'e'\n    if n == 6:\n        return 'f'\n    if n == 7:\n        return 'g'\n    if n == 8:\n        return 'h'\n    if n == 9:\n        return 'i'\n    if n == 10:\n        return 'j'\n    if n == 11:\n        return 'k'\n    if n == 12:\n        return 'l'\n    if n == 13:\n        return'm'\n    if n == 14:\n        return 'n'\n    if n == 15:\n        return 'o'\n    if n == 16:\n        return 'p'\n    if n == 17:\n        return 'q'\n    if n == 18:\n        return 'r'\n    if n == 19:\n        return's'\n    if n == 20:\n        return 't'\n    if n == 21:\n        return 'u'\n    if n == 22:\n        return 'v'\n    if n == 23:\n        return 'w'\n    if n == 24:\n        return 'x'\n    if n == 25:\n        return 'y'\n    if n == 26:\n        return 'z'\n    return '-'\n\nassert solution('7 4') == 'ababacd'\nassert solution('4 7') == '-1'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution('7 7') == '-'\nassert solution"
    },
    {
        "number": 3987,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    max_len = 0\n    for i in range(n):\n        if a[i] == 1:\n            max_len += 1\n        else:\n            break\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            max_len += 1\n        else:\n            break\n    return str(max_len)"
    },
    {
        "number": 3988,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        t, u, v = [int(x) for x in stdin.split()]\n        graph[u - 1].append((t, v - 1))\n        graph[v - 1].append((t, u - 1))\n    visited = [False] * n\n    visited[s - 1] = True\n    plans = []\n    for _ in range(2):\n        plan = [0] * n\n        for i in range(n):\n            if visited[i]:\n                continue\n            plan[i] = 1\n            for t, v in graph[i]:\n                if t == 1:\n                    plan[v] = -1\n                else:\n                    plan[v] = 1\n            visited[i] = True\n        plans.append(plan)\n    return ''.join(str(x) for x in plans[0])"
    },
    {
        "number": 3989,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 7 == 0:\n        return str(a)\n    else:\n        return '0'"
    },
    {
        "number": 3990,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [set() for _ in range(n)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        roads[u - 1].add(v - 1)\n        roads[v - 1].add(u - 1)\n    for i in range(n):\n        roads[i].add(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n):\n        roads[i].discard(i)\n    for i in range(n"
    },
    {
        "number": 3991,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    x.sort()\n    x.append(10**9 + 7)\n    x.insert(0, 0)\n    res = 0\n    for i in range(1, n + 1):\n        res = (res + (x[i] - x[i - 1]) % (10**9 + 7)) % (10**9 + 7)\n    return str(res)"
    },
    {
        "number": 3992,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if max(a) == 0:\n        return '-1'\n    return str(sum(a) // max(a) - 1)"
    },
    {
        "number": 3993,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    pages = [[] for _ in range(k)]\n    for i in range(m):\n        pages[p[i] - 1].append(i + 1)\n    i = 0\n    while i < n:\n        for j in range(k):\n            if pages[j] and pages[j][0] == i + 1:\n                pages[j].pop(0)\n                i += 1\n    return str(i)"
    },
    {
        "number": 3994,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    lamps = [0] * n\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        lamps[i] = (a, b)\n    lamps.sort(key=lambda x: x[1])\n    lamps.sort(key=lambda x: x[0])\n    lamps.sort(key=lambda x: x[1] - x[0])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    lamps.sort(key=lambda x: x[0] - x[1])\n    l"
    },
    {
        "number": 3995,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return ''.join(['0' if (n % 2) == 0 else '1' for _ in range(k)])"
    },
    {
        "number": 3996,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    a.reverse()\n    p = 1\n    q = 1\n    for i in range(n):\n        p *= a[i]\n        q *= a[i]\n    p = p % (10**9 + 7)\n    q = q % (10**9 + 7)\n    return str(p) + \"/\" + str(q)"
    },
    {
        "number": 3997,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    parents = [int(x) for x in stdin.readline().split()]\n    return''.join(str(a[i] - sum(parents[i] for i in range(n) if parents[i] == i + 1)) for i in range(n))"
    },
    {
        "number": 3998,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    r = list(map(int, stdin.readline().split()))\n    r.sort()\n    r.reverse()\n    t = 0\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):\n        if r[i] == 0:\n            t += 1\n        else:\n            break\n    for i in range(n):"
    },
    {
        "number": 3999,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    tiles = [list(map(int, stdin.readline().split())) for _ in range(N)]\n    return str(solution_recursive(N, tiles))\n\ndef"
    }
]