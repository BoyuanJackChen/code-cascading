[
    {
        "number": 3000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        "
    },
    {
        "number": 3001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n"
    },
    {
        "number": 3002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    odometer = [int(i) for i in stdin.split()]\n    odometer.sort()\n    for i in range(n):\n        if odometer[i] == 0:\n            odometer[i] = odometer[i-1]\n        else:\n            odometer[i] = odometer[i-1] - odometer[i]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer[0]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer[0]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer[0]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer[0]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer[0]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer[0]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer[0]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer[0]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer[0]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer[0]\n    if odometer[-1] == 0:\n        odometer[-1] = odometer[-2]\n    else:\n        odometer[-1] = odometer[-2] - odometer[-1]\n    if odometer[0] == 0:\n        odometer[0] = odometer[1]\n    else:\n        odometer[0] = odometer[1] - odometer["
    },
    {
        "number": 3003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        line = stdin.strip().split()\n        for j in range(len(line)):\n            graph[i].append(int(line[j]))\n    \n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(set(graph[i]).intersection(set(graph[j]))) == 0:\n                answer += 1\n    return str(answer)\n\n-----Constraints-----\n1 <= N <= 10^5\n0 <= v_ i < N\n0 <= v_ j < N\n0 <= v_ i!= v_ j\n0 <= v_ i < N\n\n-----Time Limit: 1.0s (O(N^2))\n\n-----Space Limit: 1.0M (O(N^2))\n\n-----Test Cases-----\nTest 1:\nInput:\n4\n1 2 3\n0 2 3\n0 1 3\n0 1 2\nSample Output:\n3\n\nTest 2:\nInput:\n5\n1 3 2\n0 1 2\n0 1 3\n0 1 2\nSample Output:\n2\n\nTest 3:\nInput:\n6\n1 3 4\n0 2 3 4\n0 1 3 5\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1 2 3\n0 1 2 4\n0 1"
    },
    {
        "number": 3004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"IMPOSSIBLE\"\n    \n    colors = set()\n    for _ in range(n):\n        color = stdin.strip().split()\n        colors.add(color[0])\n        colors.add(color[1])\n    \n    answer = 0\n    for color in colors:\n        answer += min(int(color[0]), int(color[1]))\n    \n    return str(answer)\n\ndef"
    },
    {
        "number": 3005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return ''\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        "
    },
    {
        "number": 3006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '0' if stdin == '' else '1'\n"
    },
    {
        "number": 3007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, b, f, t_0, t_1, t_2 = map(int, stdin.split())\n    return str(max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t_0, t_1, t_2) * d + max(b, t"
    },
    {
        "number": 3008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c = []\n    for i in range(n):\n        c.append(a[i] + k)\n        c.append(b[i] + k)\n    c.sort()\n    return str(len(c))\n"
    },
    {
        "number": 3009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 'IMPOSSIBLE'\n    \n    lamps = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        lamps.append((x, y))\n    \n    lamps.sort()\n    \n    for i in range(n):\n        x, y = lamps[i]\n        if i == 0:\n            x -= 1\n            y -= 1\n        elif i == n - 1:\n            x += 1\n            y += 1\n        else:\n            x += 1\n            y -= 1\n            x -= 1\n            y += 1\n        \n        if x < 0 or y < 0 or x > 99 or y > 99:\n            return 'IMPOSSIBLE'\n        \n        if lamps[i][0] - lamps[i][1] == lamps[i][0] - lamps[i][1]:\n            return 'IMPOSSIBLE'\n        \n    return str(abs(lamps[n - 1][0] - lamps[n - 1][1]))\n"
    },
    {
        "number": 3010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    y = [int(i) for i in stdin.split()]\n    x.sort()\n    y.sort()\n    if x[0] == y[0]:\n        return str(len(set(x) & set(y)))\n    else:\n        return str(len(set(x) - set(y)))\n"
    },
    {
        "number": 3011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    else:\n        return str(n-10)\n"
    },
    {
        "number": 3012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a, b, c = map(int, stdin.split())\n    if N == 1:\n        return str(a) + str(b) + str(c)\n    if N == 2:\n        return str(a) + str(b) + str(c) + str(a) + str(b)\n    if N == 3:\n        return str(a) + str(b) + str(c) + str(a) + str(b) + str(c)\n    if N == 4:\n        return str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c)\n    if N == 5:\n        return str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c)\n    if N == 6:\n        return str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c)\n    if N == 7:\n        return str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str(a) + str(b) + str(c) + str("
    },
    {
        "number": 3013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(float, stdin.split())\n    b = abs(x) + abs(y)\n    t = (x, y)\n    if b > 10**-3:\n        return '{:.6f}'.format(b)\n    else:\n        return '{:.6f}'.format(b) +'' + '{:.6f}'.format(t)\n"
    },
    {
        "number": 3014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = [list(map(int, input().split())) for _ in range(n)]\n    corridors = [list(map(int, input().split())) for _ in range(m)]\n    \n    def remove_corridors(room: int, corridor: int) -> int:\n        if room == corridor:\n            return 0\n        \n        if room < corridor:\n            return remove_corridors(room + 1, corridor)\n        \n        return room\n    \n    return str(remove_corridors(0, 0))\n\ndef"
    },
    {
        "number": 3015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    if n == 0 and m == 0 and s == 0 and t == 0:\n        return \"infinity\"\n    "
    },
    {
        "number": 3016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    \n    def solve(n, k, l):\n        if n == 0:\n            return 0\n        \n        if n == 1:\n            return k\n        \n        if n == 2:\n            return l\n        \n        if n == 3:\n            return solve(s[0], s[1], s[2])\n        \n        if n == 4:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4])\n        \n        if n == 5:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4]) + solve(s[0], s[5], s[6])\n        \n        if n == 6:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4]) + solve(s[0], s[5], s[6]) + solve(s[0], s[7], s[8])\n        \n        if n == 7:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4]) + solve(s[0], s[5], s[6]) + solve(s[0], s[7], s[8]) + solve(s[0], s[9], s[10])\n        \n        if n == 8:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4]) + solve(s[0], s[5], s[6]) + solve(s[0], s[7], s[8]) + solve(s[0], s[9], s[10]) + solve(s[0], s[11], s[12])\n        \n        if n == 9:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4]) + solve(s[0], s[5], s[6]) + solve(s[0], s[7], s[8]) + solve(s[0], s[9], s[10]) + solve(s[0], s[11], s[12]) + solve(s[0], s[13], s[14])\n        \n        if n == 10:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4]) + solve(s[0], s[5], s[6]) + solve(s[0], s[7], s[8]) + solve(s[0], s[9], s[10]) + solve(s[0], s[11], s[12]) + solve(s[0], s[13], s[14]) + solve(s[0], s[15], s[16])\n        \n        if n == 11:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4]) + solve(s[0], s[5], s[6]) + solve(s[0], s[7], s[8]) + solve(s[0], s[9], s[10]) + solve(s[0], s[11], s[12]) + solve(s[0], s[13], s[14]) + solve(s[0], s[15], s[16]) + solve(s[0], s[17], s[18])\n        \n        if n == 12:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4]) + solve(s[0], s[5], s[6]) + solve(s[0], s[7], s[8]) + solve(s[0], s[9], s[10]) + solve(s[0], s[11], s[12]) + solve(s[0], s[13], s[14]) + solve(s[0], s[15], s[16]) + solve(s[0], s[17], s[18]) + solve(s[0], s[19], s[20])\n        \n        if n == 13:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4]) + solve(s[0], s[5], s[6]) + solve(s[0], s[7], s[8]) + solve(s[0], s[9], s[10]) + solve(s[0], s[11], s[12]) + solve(s[0], s[13], s[14]) + solve(s[0], s[15], s[16]) + solve(s[0], s[17], s[18]) + solve(s[0], s[19], s[20]) + solve(s[0], s[21], s[22])\n        \n        if n == 14:\n            return solve(s[0], s[1], s[2]) + solve(s[0], s[3], s[4]) + solve(s[0], s[5], s[6]) + solve(s[0], s[7], s[8]) + solve(s[0], s[9], s[10]) + solve(s[0], s[11], s[12]) + solve(s"
    },
    {
        "number": 3017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    if n == 0:\n        return str(e)\n    if e == 0:\n        return str(n)\n    if e == 1:\n        return str(n) + \"0\"\n    if e == 2:\n        return str(n) + \"0\" + \"0\" + str(n)\n    if e == 3:\n        return str(n) + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 4:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n)\n    if e == 5:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 6:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 7:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 8:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 9:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 10:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 11:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 12:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 13:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 14:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 15:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 16:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 17:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 18:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 19:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 20:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 21:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 22:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 23:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 24:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 25:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 26:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 27:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + str(n) + \"0\"\n    if e == 28:\n        return str(n) + \"0\" + \"0\" + \"0\" + \"0\" + \"0\" + \"0\""
    },
    {
        "number": 3018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dice = list(map(int, stdin.split()))\n    dice.sort()\n    answer = 0\n    for i in range(n):\n        answer += dice[i] * (k ** i)\n    return str(answer)\n"
    },
    {
        "number": 3019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 1000:\n        return \"0\"\n    \n    def isprime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def get_prime_factors(n):\n        prime_factors = []\n        for i in range(2, int(n**0.5)+1):\n            if isprime(i):\n                prime_factors.append(i)\n        return prime_factors\n    \n    prime_factors = get_prime_factors(n)\n    \n    def get_sum(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    \n    def get_sum_prime_factors(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_2(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_3(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_4(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_5(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_6(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_7(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_8(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_9(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_10(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_11(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_12(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_13(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_14(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_15(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_16(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_17(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_18(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_19(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_20(n):\n        sum_prime_factors = 0\n        for i in range(1, n+1):\n            if isprime(i):\n                sum_prime_factors += i\n        return sum_prime_factors\n    \n    def get_sum_prime_factors_21(n):\n        sum_prime_factors = 0\n        for i in range("
    },
    {
        "number": 3020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return '-1'\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '"
    },
    {
        "number": 3021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = list(map(str, stdin.split()))\n    alphabet.sort()\n    return ''.join(alphabet)\n"
    },
    {
        "number": 3022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    if N == 0:\n        return str(0)\n    if N == 1:\n        return str(A)\n    if N == 2:\n        return str(B)\n    if N == 3:\n        return str(C)\n    if N == 4:\n        return str(A + B + C)\n    if N == 5:\n        return str
    },
    {
        "number": 3023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    candles = []\n    for _ in range(n):\n        candles.append(list(map(int, stdin.split())))\n    \n    def get_cut_line(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 <= r\n    \n    def get_cut_line_2(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 >= r\n    \n    def get_cut_line_3(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 < r\n    \n    def get_cut_line_4(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_5(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_6(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 < r\n    \n    def get_cut_line_7(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 >= r\n    \n    def get_cut_line_8(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 <= r\n    \n    def get_cut_line_9(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_10(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_11(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 < r\n    \n    def get_cut_line_12(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 >= r\n    \n    def get_cut_line_13(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 <= r\n    \n    def get_cut_line_14(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_15(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 < r\n    \n    def get_cut_line_16(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 >= r\n    \n    def get_cut_line_17(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_18(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 < r\n    \n    def get_cut_line_19(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 <= r\n    \n    def get_cut_line_20(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_21(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 < r\n    \n    def get_cut_line_22(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 >= r\n    \n    def get_cut_line_23(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_24(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 < r\n    \n    def get_cut_line_25(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 <= r\n    \n    def get_cut_line_26(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 >= r\n    \n    def get_cut_line_27(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_28(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 < r\n    \n    def get_cut_line_29(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 >= r\n    \n    def get_cut_line_30(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 <= r\n    \n    def get_cut_line_31(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_32(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 < r\n    \n    def get_cut_line_33(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 >= r\n    \n    def get_cut_line_34(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_cut_line_35(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 < r\n    \n    def get_cut_line_36(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 >= r\n    \n    def get_cut_line_37(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 <= r\n    \n    def get_cut_line_38(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 > r\n    \n    def get_"
    },
    {
        "number": 3024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    \n    if n % 10 == 0:\n        return str(n//10) + solution(n//10)\n    else:\n        return str(n//10) + solution(n//10) + str(n%10)\n"
    },
    {
        "number": 3025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [int(i) for i in stdin.split()]\n    g.sort()\n    a, b = 0, 0\n    for i in range(n):\n        if g[i] > g[a]:\n            a = i\n        if g[i] > g[b]:\n            b = i\n    return str(g[a] + g[b])\n"
    },
    {
        "number": 3026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**5:\n        return \"-1\"\n    \n    def is_critical(n):\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n        if n == 22:\n            return True\n        if n == 23:\n            return True\n        if n == 24:\n            return True\n        if n == 25:\n            return True\n        if n == 26:\n            return True\n        if n == 27:\n            return True\n        if n == 28:\n            return True\n        if n == 29:\n            return True\n        if n == 30:\n            return True\n        if n == 31:\n            return True\n        if n == 32:\n            return True\n        if n == 33:\n            return True\n        if n == 34:\n            return True\n        if n == 35:\n            return True\n        if n == 36:\n            return True\n        if n == 37:\n            return True\n        if n == 38:\n            return True\n        if n == 39:\n            return True\n        if n == 40:\n            return True\n        if n == 41:\n            return True\n        if n == 42:\n            return True\n        if n == 43:\n            return True\n        if n == 44:\n            return True\n        if n == 45:\n            return True\n        if n == 46:\n            return True\n        if n == 47:\n            return True\n        if n == 48:\n            return True\n        if n == 49:\n            return True\n        if n == 50:\n            return True\n        if n == 51:\n            return True\n        if n == 52:\n            return True\n        if n == 53:\n            return True\n        if n == 54:\n            return True\n        if n == 55:\n            return True\n        if n == 56:\n            return True\n        if n == 57:\n            return True\n        if n == 58:\n            return True\n        if n == 59:\n            return True\n        if n == 60:\n            return True\n        if n == 61:\n            return True\n        if n == 62:\n            return True\n        if n == 63:\n            return True\n        if n == 64:\n            return True\n        if n == 65:\n            return True\n        if n == 66:\n            return True\n        if n == 67:\n            return True\n        if n == 68:\n            return True\n        if n == 69:\n            return True\n        if n == 70:\n            return True\n        if n == 71:\n            return True\n        if n == 72:\n            return True\n        if n == 73:\n            return True\n        if n == 74:\n            return True\n        if n == 75:\n            return True\n        if n == 76:\n            return True\n        if n == 77:\n            return True\n        if n == 78:\n            return True\n        if n == 79:\n            return True\n        if n == 80:\n            return True\n        if n == 81:\n            return True\n        if n == 82:\n            return True\n        if n == 83:\n            return True\n        if n == 84:\n            return True\n        if n == 85:\n            return True\n        if n == 86:\n            return True\n        if n == 87:\n            return True\n        if n == 88:\n            return True\n        if n == 89:\n            return True\n        if n == 90:\n            return True\n        if n == 91:\n            return True\n        if n == 92:\n            return True\n        if n == 93:\n            return True\n        if n == 94:\n            return True\n        if n == 95:\n            return True\n        if n == 96:\n            return True\n        if n == 97:\n            return True\n        if n == 98:\n            return True\n        if n == 99:\n            return True\n        if n == 100:\n            return True\n        if n == 101:\n            return True\n        if n == 102:\n            return True\n        if n == 103:\n            return True\n        if n == 104:\n            return True\n        if n == 105:\n            return True\n        if n == 106:\n            return True\n        if n == 107:\n            return True\n        if n == 108:\n            return True\n        if n == 109:\n            return True\n        if n == 110:\n            return True\n        if n == 111:\n            return True\n        if n == 112:\n            return True\n        if n == 113:\n            return True\n        if n == 114:\n            return True\n        if n == 115:\n            return True\n        if n == 116:\n            return True\n        if n == 117:\n            return True\n        if n == 118:\n            return True\n        if n == 119:\n            return True\n        if n == 120:\n            return True\n        if n == 121:\n            return True\n        if n == 122:\n            return True\n        if n == 123:\n            return True\n        if n == 124:\n            return True\n        if n == 125:\n            return True\n        if n == 126:\n            return True\n        if n == 127:\n            return True\n        if n == 128:\n            return True\n        if n == 129:\n            return True\n        if n == 130:\n            return True\n        if n == 131:\n            return True\n        if n == 132:\n            return True\n        if n == 133:\n            return True\n        if n == 134:\n            return True\n        if n == 135:\n            return True\n        if n == 136:\n            return True\n        if n == 137:\n            return True\n        if n == 138:\n            return True\n        if n == 139:\n            return True\n        if n == 140:\n            return True\n        if n == 141:\n            return True\n        if n == 142:\n            return True\n        if n == 143:\n            return True\n        if n == 144:\n            return True\n        if n == 145:\n            return True\n        if n == 146:\n            return True\n        if n == 147:\n            return True\n        if n == 148:\n            return True\n        if n == 149:\n            return True\n        if n == 150:\n            return True\n        if n == 151:\n            return True\n        if n == 152:\n            return True\n        if n == 153:\n            return True\n        if n == 154:\n            return True\n        if n == 155"
    },
    {
        "number": 3027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0 and m == 0:\n        return '0'\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if n == 1:\n        return '0'\n    if m == 1:\n        return '0'\n    if n == 2:\n        return '0'\n    if m == 2:\n        return '0'\n    if n == 3:\n        return '0'\n    if m == 3:\n        return '0'\n    if n == 4:\n        return '0'\n    if m == 4:\n        return '0'\n    if n == 5:\n        return '0'\n    if m == 5:\n        return '0'\n    if n == 6:\n        return '0'\n    if m == 6:\n        return '0'\n    if n == 7:\n        return '0'\n    if m == 7:\n        return '0'\n    if n == 8:\n        return '0'\n    if m == 8:\n        return '0'\n    if n == 9:\n        return '0'\n    if m == 9:\n        return '0'\n    if n == 10:\n        return '0'\n    if m == 10:\n        return '0'\n    if n == 11:\n        return '0'\n    if m == 11:\n        return '0'\n    if n == 12:\n        return '0'\n    if m == 12:\n        return '0'\n    if n == 13:\n        return '0'\n    if m == 13:\n        return '0'\n    if n == 14:\n        return '0'\n    if m == 14:\n        return '0'\n    if n == 15:\n        return '0'\n    if m == 15:\n        return '0'\n    if n == 16:\n        return '0'\n    if m == 16:\n        return '0'\n    if n == 17:\n        return '0'\n    if m == 17:\n        return '0'\n    if n == 18:\n        return '0'\n    if m == 18:\n        return '0'\n    if n == 19:\n        return '0'\n    if m == 19:\n        return '0'\n    if n == 20:\n        return '0'\n    if m == 20:\n        return '0'\n    if n == 21:\n        return '0'\n    if m == 21:\n        return '0'\n    if n == 22:\n        return '0'\n    if m == 22:\n        return '0'\n    if n == 23:\n        return '0'\n    if m == 23:\n        return '0'\n    if n == 24:\n        return '0'\n    if m == 24:\n        return '0'\n    if n == 25:\n        return '0'\n    if m == 25:\n        return '0'\n    if n == 26:\n        return '0'\n    if m == 26:\n        return '0'\n    if n == 27:\n        return '0'\n    if m == 27:\n        return '0'\n    if n == 28:\n        return '0'\n    if m == 28:\n        return '0'\n    if n == 29:\n        return '0'\n    if m == 29:\n        return '0'\n    if n == 30:\n        return '0'\n    if m == 30:\n        return '0'\n    if n == 31:\n        return '0'\n    if m == 31:\n        return '0'\n    if n == 32:\n        return '0'\n    if m == 32:\n        return '0'\n    if n == 33:\n        return '0'\n    if m == 33:\n        return '0'\n    if n == 34:\n        return '0'\n    if m == 34:\n        return '0'\n    if n == 35:\n        return '0'\n    if m == 35:\n        return '0'\n    if n == 36:\n        return '0'\n    if m == 36:\n        return '0'\n    if n == 37:\n        return '0'\n    if m == 37:\n        return '0'\n    if n == 38:\n        return '0'\n    if m == 38:\n        return '0'\n    if n == 39:\n        return '0'\n    if m == 39:\n        return '0'\n    if n == 40:\n        return '0'\n    if m == 40:\n        return '0'\n    if n == 41:\n        return '0'\n    if m == 41:\n        return '0'\n    if n == 42:\n        return '0'\n    if m == 42:\n        return '0'\n    if n == 43:\n        return '0'\n    if m == 43:\n        return '0'\n    if n == 44:\n        return '0'\n    if m == 44:\n        return '0'\n    if n == 45:\n        return '0'\n    if m == 45:\n        return '0'\n    if n == 46:\n        return '0'\n    if m == 46:\n        return '0'\n    if n == 47:\n        return '0'\n    if m == 47:\n        return '0'\n    if n == 48:\n        return '0'\n    if m == 48:\n        return '0'\n    if n == 49:\n        return '0'\n    if m == 49:\n        return '0'\n    if n == 50:\n        return '0'\n    if m == 50:\n        return '0'\n    if n == 51:\n        return '0'\n    if m == 51:\n        return '0"
    },
    {
        "number": 3028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n    board = [[board[i][j] for j in range(m)] for i in range(n)]\n"
    },
    {
        "number": 3029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    u = [0] * n\n    v = [0] * n\n    for i in range(n):\n        u[i] = int(stdin.strip().split()[i])\n    for i in range(n):\n        v[i] = int(stdin.strip().split()[i + 1])\n    L = len(u)\n    M = L * (L + 1) // 2\n    for i in range(L):\n        for j in range(i + 1, L):\n            if u[i] < u[j]:\n                u[i], u[j] = u[j], u[i]\n                v[i], v[j] = v[j], v[i]\n    for i in range(L):\n        if u[i] > u[L - 1 - i]:\n            u[i], u[L - 1 - i] = u[L - 1 - i], u[i]\n            v[i], v[L - 1 - i] = v[L - 1 - i], v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n            u[i], M = M, u[i]\n            v[i], M = M, v[i]\n    for i in range(L):\n        if u[i] > M:\n"
    },
    {
        "number": 3030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nodes = [int(i) for i in stdin.split()]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes[i] for i in range(n)]\n    nodes.sort()\n    nodes = [nodes"
    },
    {
        "number": 3031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    edges = [list(map(int, input().split())) for _ in range(n - 1)]\n    visited = [False] * n\n    visited[0] = True\n    stack = []\n    for i in range(n):\n        if not visited[i]:\n            stack.append(i)\n            visited[i] = True\n            while stack:\n                node = stack.pop()\n                for j in range(n):\n                    if edges[node][j] == 1 and not visited[j]:\n                        visited[j] = True\n                        stack.append(j)\n    answer = []\n    for i in range(n):\n        if not visited[i]:\n            answer.append(i)\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 3032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [0] * n\n    b = [0] * n\n    for i in range(m):\n        a[i], b[i] = map(int, stdin.split())\n    a = sorted(a)\n    b = sorted(b)\n    c = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            c += 1\n    return str(c)\n\n-----Constraints-----\n1 <= n <= 10^6\n1 <= m <= 10^6\n0 <= a[i] <= 13\n0 <= b[i] <= 13\n\n-----Time Limit: 1.0s (S)\n\n-----Space Limit: 1.0M (S)\n\n-----Testcase Example:\ninput1 = \"1 2\"\noutput1 = \"5\"\ninput2 = \"2 1\"\noutput2 = \"6\"\ninput3 = \"1 2\"\noutput3 = \"30\"\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2**63:\n        return str(n)\n    else:\n        return solution(stdin.strip()[::-1])\n\ndef"
    },
    {
        "number": 3034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, t, c, r, p, a = map(int, stdin.split())\n    if d < t:\n        return '0'\n    elif d < t + t:\n        return '0'\n    elif d < t + t + t:\n        return '0'\n    elif d < t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t:\n        return '0'\n    elif d < t + t + t + t + t + t + t +"
    },
    {
        "number": 3035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, O, R = map(float, stdin.split())\n    return str(round(O * R * (1 + (R / 10) ** -7), 6))\n"
    },
    {
        "number": 3036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, m, d, n = map(int, stdin.split())\n    b_r, b_s, b_m, b_d = map(int, stdin.split())\n    \n    if r + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    if r + s + m + d > n:\n        return \"too many\"\n    \n    "
    },
    {
        "number": 3037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    board = [list(map(int, input().split())) for _ in range(h)]\n    direction = {'up': 0, 'down': 1, 'left': 2, 'right': 3}\n    direction_distance = {'up': 0, 'down': 1, 'left': 2, 'right': 3}\n    direction_distance_list = []\n    for direction_distance in direction_distance.keys():\n        direction_distance_list.append(direction_distance)\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list[:n]\n    direction_distance_list.sort()\n    direction_distance_list.reverse()\n    direction_distance_list = direction_distance_list["
    },
    {
        "number": 3038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    packs = []\n    for _ in range(n):\n        packs.append(list(map(int, stdin.strip().split())))\n    packs.sort(key=lambda x: x[0])\n    packs.sort(key=lambda x: x[1])\n    packs.sort(key=lambda x: x[2])\n    packs.sort(key=lambda x: x[3])\n    packs.sort(key=lambda x: x[4])\n    packs.sort(key=lambda x: x[5])\n    packs.sort(key=lambda x: x[6])\n    packs.sort(key=lambda x: x[7])\n    packs.sort(key=lambda x: x[8])\n    packs.sort(key=lambda x: x[9])\n    packs.sort(key=lambda x: x[10])\n    packs.sort(key=lambda x: x[11])\n    packs.sort(key=lambda x: x[12])\n    packs.sort(key=lambda x: x[13])\n    packs.sort(key=lambda x: x[14])\n    packs.sort(key=lambda x: x[15])\n    packs.sort(key=lambda x: x[16])\n    packs.sort(key=lambda x: x[17])\n    packs.sort(key=lambda x: x[18])\n    packs.sort(key=lambda x: x[19])\n    packs.sort(key=lambda x: x[20])\n    packs.sort(key=lambda x: x[21])\n    packs.sort(key=lambda x: x[22])\n    packs.sort(key=lambda x: x[23])\n    packs.sort(key=lambda x: x[24])\n    packs.sort(key=lambda x: x[25])\n    packs.sort(key=lambda x: x[26])\n    packs.sort(key=lambda x: x[27])\n    packs.sort(key=lambda x: x[28])\n    packs.sort(key=lambda x: x[29])\n    packs.sort(key=lambda x: x[30])\n    packs.sort(key=lambda x: x[31])\n    packs.sort(key=lambda x: x[32])\n    packs.sort(key=lambda x: x[33])\n    packs.sort(key=lambda x: x[34])\n    packs.sort(key=lambda x: x[35])\n    packs.sort(key=lambda x: x[36])\n    packs.sort(key=lambda x: x[37])\n    packs.sort(key=lambda x: x[38])\n    packs.sort(key=lambda x: x[39])\n    packs.sort(key=lambda x: x[40])\n    packs.sort(key=lambda x: x[41])\n    packs.sort(key=lambda x: x[42])\n    packs.sort(key=lambda x: x[43])\n    packs.sort(key=lambda x: x[44])\n    packs.sort(key=lambda x: x[45])\n    packs.sort(key=lambda x: x[46])\n    packs.sort(key=lambda x: x[47])\n    packs.sort(key=lambda x: x[48])\n    packs.sort(key=lambda x: x[49])\n    packs.sort(key=lambda x: x[50])\n    packs.sort(key=lambda x: x[51])\n    packs.sort(key=lambda x: x[52])\n    packs.sort(key=lambda x: x[53])\n    packs.sort(key=lambda x: x[54])\n    packs.sort(key=lambda x: x[55])\n    packs.sort(key=lambda x"
    },
    {
        "number": 3039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    squares = []\n    for i in range(n):\n        squares.append(list(map(str, input().strip().split())))\n    \n    def is_valid(squares):\n        for i in range(n):\n            for j in range(n):\n                if squares[i][j] == '#':\n                    return False\n        return True\n    \n    def is_valid_2(squares):\n        for i in range(n):\n            for j in range(n):\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    return False\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue\n                if squares[i][j] == '#':\n                    continue\n                if squares[i][j] == '.':\n                    continue"
    },
    {
        "number": 3040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_longest_substring(s: str) -> str:\n        \n        if len(s) == 0:\n            return \"\"\n        \n        if len(s) == 1:\n            return s\n        \n        if len(s) == 2:\n            return s[0] + s[1]\n        \n        if len(s) == 3:\n            return s[0] + s[1] + s[2]\n        \n        if len(s) == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        \n        if len(s) == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        \n        if len(s) == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        \n        if len(s) == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        \n        if len(s) == 8:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7]\n        \n        if len(s) == 9:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8]\n        \n        if len(s) == 10:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]\n        \n        if len(s) == 11:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10]\n        \n        if len(s) == 12:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11]\n        \n        if len(s) == 13:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12]\n        \n        if len(s) == 14:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13]\n        \n        if len(s) == 15:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14]\n        \n        if len(s) == 16:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15]\n        \n        if len(s) == 17:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16]\n        \n        if len(s) == 18:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17]\n        \n        if len(s) == 19:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18]\n        \n        if len(s) == 20:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19]\n        \n        if len(s) == 21:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19] + s[20]\n        \n        if len(s) == 22:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19] + s[20] + s[21]\n        \n        if len(s) == 23:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19] + s[20] + s[21] + s[22]\n        \n        if len(s) == 24:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s"
    },
    {
        "number": 3041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, z = map(int, stdin.split())\n    answer = 0\n    for i in range(n):\n        answer += (z - i) * t\n    return str(answer)\n"
    },
    {
        "number": 3042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    "
    },
    {
        "number": 3043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = int(stdin.split()[1])\n    grid = []\n    for _ in range(N):\n        grid.append(stdin.split()[0])\n    \n    def get_next_cell(grid, row, col):\n        if row == N - 1 and col == M - 1:\n            return 'G'\n        if row == N - 1 and col == 0:\n            return 'S'\n        if row == 0 and col == M - 1:\n            return 'F'\n        if row == 0 and col == 0:\n            return 'M'\n        if row == N - 1 and col == M - 1:\n            return '#'\n        if row == N - 1 and col == 0:\n            return '.'\n        \n        return grid[row][col]\n    \n    def get_next_cell_2(grid, row, col):\n        if row == N - 1 and col == M - 1:\n            return 'G'\n        if row == N - 1 and col == 0:\n            return 'S'\n        if row == 0 and col == M - 1:\n            return 'F'\n        if row == 0 and col == 0:\n            return 'M'\n        if row == N - 1 and col == M - 1:\n            return '#'\n        if row == N - 1 and col == 0:\n            return '.'\n        \n        return grid[row][col]\n    \n    def get_next_cell_3(grid, row, col):\n        if row == N - 1 and col == M - 1:\n            return 'G'\n        if row == N - 1 and col == 0:\n            return 'S'\n        if row == 0 and col == M - 1:\n            return 'F'\n        if row == 0 and col == 0:\n            return 'M'\n        if row == N - 1 and col == M - 1:\n            return '#'\n        if row == N - 1 and col == 0:\n            return '.'\n        \n        return grid[row][col]\n    \n    def get_next_cell_4(grid, row, col):\n        if row == N - 1 and col == M - 1:\n            return 'G'\n        if row == N - 1 and col == 0:\n            return 'S'\n        if row == 0 and col == M - 1:\n            return 'F'\n        if row == 0 and col == 0:\n            return 'M'\n        if row == N - 1 and col == M - 1:\n            return '#'\n        if row == N - 1 and col == 0:\n            return '.'\n        \n        return grid[row][col]\n    \n    def get_next_cell_5(grid, row, col):\n        if row == N - 1 and col == M - 1:\n            return 'G'\n        if row == N - 1 and col == 0:\n            return 'S'\n        if row == 0 and col == M - 1:\n            return 'F'\n        if row == 0 and col == 0:\n            return 'M'\n        if row == N - 1 and col == M - 1:\n            return '#'\n        if row == N - 1 and col == 0:\n            return '.'\n        \n        return grid[row][col]\n    \n    def get_next_cell_6(grid, row, col):\n        if row == N - 1 and col == M - 1:\n            return 'G'\n        if row == N - 1 and col == 0:\n            return 'S'\n        if row == 0 and col == M - 1:\n            return 'F'\n        if row == 0 and col == 0:\n            return 'M'\n        if row == N - 1 and col == M - 1:\n            return '#'\n        if row == N - 1 and col == 0:\n            return '.'\n        \n        return grid[row][col]\n    \n    def get_next_cell_7(grid, row, col):\n        if row == N - 1 and col == M - 1:\n            return 'G'\n        if row == N - 1 and col == 0:\n            return 'S'\n        if row == 0 and col == M - 1:\n            return 'F'\n        if row == 0 and col == 0:\n            return 'M'\n        if row == N - 1 and col == M - 1:\n            return '#'\n        if row == N - 1 and col == 0:\n            return '.'\n        \n        return grid[row][col]\n    \n    def get_next_cell_8(grid, row, col):\n        if row == N - 1 and col == M - 1:\n            return 'G'\n        if row == N - 1 and col == 0:\n            return 'S'\n        if row == 0 and col == M - 1:\n            return 'F'\n        if row == 0 and col == 0:\n            return 'M'\n        if row == N - 1 and col == M - 1:\n            return '#'\n        if row == N - 1 and col == 0:\n            return '.'\n        \n        return grid[row][col]\n    \n    def get_next_cell_9(grid, row, col):\n        if row == N - 1 and col == M - 1:\n            return 'G'\n        if row == N - 1 and col == 0:\n            return 'S'\n        if row == 0 and col == M - 1:\n            return 'F'\n        if row == 0 and col == 0:\n            return 'M'\n        if row == N - 1 and col == M - 1:\n            return '#'\n        if row == N - 1 and col == 0:\n            return '.'\n        \n        return grid[row][col]\n    \n    def get_next_cell_10(grid, row, col):\n        if row == N - 1 and col == M - 1:\n            return 'G'\n        if row == N - 1 and col == 0:\n            return 'S'\n        if row == 0 and col == M - 1:\n            return 'F'\n        if row == 0 and col == 0:\n            return 'M"
    },
    {
        "number": 3044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [list(stdin.split()) for _ in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n    grid = [[grid[i][j] for j in range(W"
    },
    {
        "number": 3045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    beacons = [list(map(int, input().split())) for _ in range(n)]\n    beacons.sort(key=lambda x: x[0])\n    \n    # find the position of the first beacon\n    x, y = beacons[0]\n    \n    # find the position of the second beacon\n    for i in range(1, n):\n        x, y = beacons[i]\n        if x == x and y == y:\n            return 'uncertain'\n        elif x == x and y > y:\n            return 'uncertain'\n        elif x > x and y == y:\n            return 'uncertain'\n        elif x > x and y > y:\n            return 'uncertain'\n        elif x > x and y < y:\n            return 'uncertain'\n        elif x < x and y == y:\n            return 'uncertain'\n        elif x < x and y > y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y > y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y > y:\n            return 'uncertain'\n        elif x < x and y > y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return 'uncertain'\n        elif x < x and y < y:\n            return '"
    },
    {
        "number": 3046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n =="
    },
    {
        "number": 3047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return'many'\n    if n == 1:\n        return'many'\n    if n == 2:\n        return'many'\n    if n == 3:\n        return'many'\n    if n == 4:\n        return'many'\n    if n == 5:\n        return'many'\n    if n == 6:\n        return'many'\n    if n == 7:\n        return'many'\n    if n == 8:\n        return'many'\n    if n == 9:\n        return'many'\n    if n == 10:\n        return'many'\n    if n == 11:\n        return'many'\n    if n == 12:\n        return'many'\n    if n == 13:\n        return'many'\n    if n == 14:\n        return'many'\n    if n == 15:\n        return'many'\n    if n == 16:\n        return'many'\n    if n == 17:\n        return'many'\n    if n == 18:\n        return'many'\n    if n == 19:\n        return'many'\n    if n == 20:\n        return'many'\n    if n == 21:\n        return'many'\n    if n == 22:\n        return'many'\n    if n == 23:\n        return'many'\n    if n == 24:\n        return'many'\n    if n == 25:\n        return'many'\n    if n == 26:\n        return'many'\n    if n == 27:\n        return'many'\n    if n == 28:\n        return'many'\n    if n == 29:\n        return'many'\n    if n == 30:\n        return'many'\n    if n == 31:\n        return'many'\n    if n == 32:\n        return'many'\n    if n == 33:\n        return'many'\n    if n == 34:\n        return'many'\n    if n == 35:\n        return'many'\n    if n == 36:\n        return'many'\n    if n == 37:\n        return'many'\n    if n == 38:\n        return'many'\n    if n == 39:\n        return'many'\n    if n == 40:\n        return'many'\n    if n == 41:\n        return'many'\n    if n == 42:\n        return'many'\n    if n == 43:\n        return'many'\n    if n == 44:\n        return'many'\n    if n == 45:\n        return'many'\n    if n == 46:\n        return'many'\n    if n == 47:\n        return'many'\n    if n == 48:\n        return'many'\n    if n == 49:\n        return'many'\n    if n == 50:\n        return'many'\n    if n == 51:\n        return'many'\n    if n == 52:\n        return'many'\n    if n == 53:\n        return'many'\n    if n == 54:\n        return'many'\n    if n == 55:\n        return'many'\n    if n == 56:\n        return'many'\n    if n == 57:\n        return'many'\n    if n == 58:\n        return'many'\n    if n == 59:\n        return'many'\n    if n == 60:\n        return'many'\n    if n == 61:\n        return'many'\n    if n == 62:\n        return'many'\n    if n == 63:\n        return'many'\n    if n == 64:\n        return'many'\n    if n == 65:\n        return'many'\n    if n == 66:\n        return'many'\n    if n == 67:\n        return'many'\n    if n == 68:\n        return'many'\n    if n == 69:\n        return'many'\n    if n == 70:\n        return'many'\n    if n == 71:\n        return'many'\n    if n == 72:\n        return'many'\n    if n == 73:\n        return'many'\n    if n == 74:\n        return'many'\n    if n == 75:\n        return'many'\n    if n == 76:\n        return'many'\n    if n == 77:\n        return'many'\n    if n == 78:\n        return'many'\n    if n == 79:\n        return'many'\n    if n == 80:\n        return'many'\n    if n == 81:\n        return'many'\n    if n == 82:\n        return'many'\n    if n == 83:\n        return'many'\n    if n == 84:\n        return'many'\n    if n == 85:\n        return'many'\n    if n == 86:\n        return'many'\n    if n == 87:\n        return'many'\n    if n == 88:\n        return'many'\n    if n == 89:\n        return'many'\n    if n == 90:\n        return'many'\n    if n == 91:\n        return'many'\n    if n == 92:\n        return'many'\n    if n == 93:\n        return'many'\n    if n == 94:\n        return'many'\n    if n == 95:\n        return'many'\n    if n == 96:\n        return'many'\n    if n == 97:\n        return'many'\n    if n == 98:\n        return'many'\n    if n == 99:\n        return'many'"
    },
    {
        "number": 3048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    u, v = map(int, stdin.strip().split())\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return '0'\n    if u > v:\n        u"
    },
    {
        "number": 3049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:"
    },
    {
        "number": 3050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    grid = [list(stdin.strip()) for _ in range(N)]\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    visited[0][0] = True\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == '<':\n                if visited[i][j] == False:\n                    visited[i][j] = True\n                    if i > 0:\n                        visited[i][j] = visited[i - 1][j] and visited[i][j]\n                    if j > 0:\n                        visited[i][j] = visited[i][j - 1] and visited[i][j]\n                    if i < N - 1:\n                        visited[i][j] = visited[i + 1][j] and visited[i][j]\n                    if j < N - 1:\n                        visited[i][j] = visited[i][j + 1] and visited[i][j]\n    return ''.join(['1' if visited[i][j] else '0' for i in range(N) for j in range(N)])\n\nSample Output 3:\n1\n"
    },
    {
        "number": 3051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    fogs = [list(map(int, input().split())) for _ in range(n)]\n    fogs.sort(key=lambda x: x[0])\n    fogs.sort(key=lambda x: x[1])\n    fogs.sort(key=lambda x: x[2])\n    fogs.sort(key=lambda x: x[3])\n    fogs.sort(key=lambda x: x[4])\n    fogs.sort(key=lambda x: x[5])\n    fogs.sort(key=lambda x: x[6])\n    fogs.sort(key=lambda x: x[7])\n    fogs.sort(key=lambda x: x[8])\n    fogs.sort(key=lambda x: x[9])\n    fogs.sort(key=lambda x: x[10])\n    fogs.sort(key=lambda x: x[11])\n    fogs.sort(key=lambda x: x[12])\n    fogs.sort(key=lambda x: x[13])\n    fogs.sort(key=lambda x: x[14])\n    fogs.sort(key=lambda x: x[15])\n    fogs.sort(key=lambda x: x[16])\n    fogs.sort(key=lambda x: x[17])\n    fogs.sort(key=lambda x: x[18])\n    fogs.sort(key=lambda x: x[19])\n    fogs.sort(key=lambda x: x[20])\n    fogs.sort(key=lambda x: x[21])\n    fogs.sort(key=lambda x: x[22])\n    fogs.sort(key=lambda x: x[23])\n    fogs.sort(key=lambda x: x[24])\n    fogs.sort(key=lambda x: x[25])\n    fogs.sort(key=lambda x: x[26])\n    fogs.sort(key=lambda x: x[27])\n    fogs.sort(key=lambda x: x[28])\n    fogs.sort(key=lambda x: x[29])\n    fogs.sort(key=lambda x: x[30])\n    fogs.sort(key=lambda x: x[31])\n    fogs.sort(key=lambda x: x[32])\n    fogs.sort(key=lambda x: x[33])\n    fogs.sort(key=lambda x: x[34])\n    fogs.sort(key=lambda x: x[35])\n    fogs.sort(key=lambda x:"
    },
    {
        "number": 3052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = map(float, stdin.split())\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0e-6\n    y = y * 1.0e-6\n    x = x / m\n    y = y / m\n    x = x * 1.0"
    },
    {
        "number": 3053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, P = map(int, stdin.split())\n    if N == 1 and K == 1 and P == 1:\n        return \"rarity\"\n    if N == 1 and K == 1 and P == 2:\n        return \"canterlot\"\n    if N == 1 and K == 1 and P == 3:\n        return \"madam\"\n    if N == 1 and K == 1 and P == 4:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 5:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 6:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 7:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 8:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 9:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 10:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 11:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 12:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 13:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 14:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 15:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 16:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 17:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 18:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 19:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 20:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 21:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 22:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 23:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 24:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 25:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 26:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 27:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 28:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 29:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 30:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 31:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 32:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 33:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 34:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 35:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 36:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 37:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 38:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 39:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 40:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 41:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 42:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 43:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 44:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 45:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 46:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 47:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 48:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 49:\n        return \"defence\"\n    if N == 1 and K == 1 and P == 50:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 1:\n        return \"madam\"\n    if N == 1 and K == 2 and P == 2:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 3:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 4:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 5:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 6:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 7:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 8:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 9:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 10:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 11:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 12:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 13:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 14:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 15:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 16:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 17:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 18:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 19:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 20:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 21:\n        return \"defence\"\n    if N == 1 and K == 2 and P == 22:\n        return \"defence\""
    },
    {
        "number": 3054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(stdin.split())\n\ndef"
    },
    {
        "number": 3055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    names = []\n    for i in range(n):\n        names.append(stdin.strip().split(' ')[0])\n    names.sort()\n    for i in range(n):\n        if names[i] == 'ThoreHusfeldt':\n            names[i] = 'ThoreH'\n    return ''.join(names)\n"
    },
    {
        "number": 3056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118"
    },
    {
        "number": 3057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    st = []\n    for i in range(n):\n        st.append(stdin.strip().split())\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == st[j][i]:\n                st[i][j] = \"yes\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st[i][j] == \"yes\":\n                st[i][j] = \"wait what?\"\n    for i in range(n):\n        for j in range(n):\n            if st"
    },
    {
        "number": 3058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [list(stdin.strip()) for _ in range(n)]\n    s.sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i][j]!= s[j][i]:\n                return 'impossible'\n    return ''.join(s[i][j] for i in range(n) for j in range(i+1, n))\n"
    },
    {
        "number": 3059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, m = map(int, stdin.split())\n    tricks = [tuple(map(int, stdin.split())) for _ in range(n)]\n    tricks.sort(key=lambda x: x[0])\n    tricks.sort(key=lambda x: x[1])\n    tricks.sort(key=lambda x: x[2])\n    tricks.sort(key=lambda x: x[3])\n    tricks.sort(key=lambda x: x[4])\n    tricks.sort(key=lambda x: x[5])\n    tricks.sort(key=lambda x: x[6])\n    tricks.sort(key=lambda x: x[7])\n    tricks.sort(key=lambda x: x[8])\n    tricks.sort(key=lambda x: x[9])\n    tricks.sort(key=lambda x: x[10])\n    tricks.sort(key=lambda x: x[11])\n    tricks.sort(key=lambda x: x[12])\n    tricks.sort(key=lambda x: x[13])\n    tricks.sort(key=lambda x: x[14])\n    tricks.sort(key=lambda x: x[15])\n    tricks.sort(key=lambda x: x[16])\n    tricks.sort(key=lambda x: x[17])\n    tricks.sort(key=lambda x: x[18])\n    tricks.sort(key=lambda x: x[19])\n    tricks.sort(key=lambda x: x[20])\n    tricks.sort(key=lambda x: x[21])\n    tricks.sort(key=lambda x: x[22])\n    tricks.sort(key=lambda x: x[23])\n    tricks.sort(key=lambda x: x[24])\n    tricks.sort(key=lambda x: x[25])\n    tricks.sort(key=lambda x: x[26])\n    tricks.sort(key=lambda x: x[27])\n    tricks.sort(key=lambda x: x[28])\n    tricks.sort(key=lambda x: x[29])\n    tricks.sort(key=lambda x: x[30])\n    tricks.sort(key=lambda x: x[31])\n    tricks.sort(key=lambda x: x[32])\n    tricks.sort(key=lambda x: x[33])\n    tricks.sort(key=lambda x: x[34])\n    tricks.sort(key=lambda x: x[35])\n    tricks.sort(key=lambda x: x[36])\n    tricks.sort(key=lambda x: x[37])\n    tricks.sort(key=lambda x: x[38])\n    tricks.sort(key=lambda x: x[39])\n    tricks.sort(key=lambda x: x[40])\n    tricks.sort(key=lambda x: x[41])\n    tricks.sort(key=lambda x: x[42])\n    tricks.sort(key=lambda x: x[43])\n    tricks.sort(key=lambda x: x[44])\n    tricks.sort(key=lambda x: x[45])\n    tricks.sort(key=lambda x: x[46])\n    tricks.sort(key=lambda x: x[47])\n    tricks.sort(key=lambda x: x[48])\n    tricks.sort(key=lambda x: x[49])\n    tricks.sort(key=lambda x: x[50])\n    tricks.sort(key=lambda x: x[51])\n    tricks.sort(key=lambda x: x[52])\n    tricks.sort(key=lambda x: x[53])\n    tricks.sort(key=lambda x: x[54])\n    tricks.sort(key=lambda x: x[55])\n    tricks.sort(key=lambda x: x[56])\n    tricks.sort(key=lambda x: x[57])\n    tricks.sort(key=lambda x: x[58])\n    tricks.sort(key=lambda x: x[59])\n    tricks.sort(key=lambda x: x[60])\n    tricks.sort(key=lambda x: x[61])\n    tricks.sort(key=lambda x: x[62])\n    tricks.sort(key=lambda x: x[63])\n    tricks.sort(key=lambda x: x[64])\n    tricks.sort(key=lambda x"
    },
    {
        "number": 3060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2:\n        return '0'\n    \n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    \n    k = int(nums[-1]/n)\n    \n    answer = ''\n    for i in range(k):\n        answer += str(nums[i])\n    \n    return answer\n\ndef"
    },
    {
        "number": 3061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def dfs(u, visited):\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                dfs(v, visited)\n    \n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited)\n    \n    answer = 0\n    for i in range(n):\n        if not visited[i]:\n            answer = max(answer, len(graph[i]))\n    \n    return str(answer)\n\ndef"
    },
    {
        "number": 3062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(float, stdin.split())\n    v, w = map(float, stdin.split())\n    return str(abs(v - w * x / y))\n\ndef"
    },
    {
        "number": 3063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a.append(0)\n    b.append(0)\n    for i in range(1, n):\n        a[i] += a[i - 1]\n        b[i] += b[i - 1]\n    return str(min(a[-1], b[-1]))\n"
    },
    {
        "number": 3064,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(start):\n        visited = [start]\n        stack = [start]\n        while stack:\n            cur = stack.pop()\n            for next in graph[cur]:\n                if next not in visited:\n                    visited.append(next)\n                    stack.append(next)\n        return visited\n    \n    answer = 0\n    for i in range(1, n+1):\n        answer = max(answer, len(dfs(i)))\n    return answer\n\ndef"
    },
    {
        "number": 3065,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    nodes = [int(i) for i in stdin.split()]\n    nodes.sort()\n    visited = [0] * (n + 1)\n    visited[0] = 1\n    for i in range(1, n + 1):\n        if visited[i] == 0:\n            visited[i] = 1\n            for j in range(l):\n                if visited[i - nodes[j]] == 0:\n                    visited[i - nodes[j]] = 1\n                    visited[i] = 0\n    return '{:.6f}'.format(visited[n] / visited[n - 1])\n\nSample Output 2:\n0.0446429\n"
    },
    {
        "number": 3066,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"IMPOSSIBLE\"\n    \n    color = [0] * n\n    for i in range(n):\n        color[i] = int(stdin[i])\n    \n    l = 0\n    r = n - 1\n    c = 0\n    \n    while l < r:\n        if color[l] == color[r]:\n            l += 1\n            r -= 1\n            c += 1\n        elif color[l] < color[r]:\n            l += 1\n        else:\n            r -= 1\n    \n    if c == 0:\n        return \"IMPOSSIBLE\"\n    \n    return str(l) + \" \" + str(r) + \" \" + str(c)\n\nSample Output 2:\nIMPOSSIBLE\n"
    },
    {
        "number": 3067,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    seq = [int(stdin[i]) for i in range(N)]\n    seq.sort()\n    for i in range(N-1):\n        if seq[i]!= seq[i+1]:\n            return str(L) + str(seq[i+1])\n    return str(L) + str(seq[-1])\n"
    },
    {
        "number": 3068,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.strip().split()))\n    s.sort()\n    for i in range(n):\n        if s[i] == s[i+1]:\n            s[i], s[i+1] = s[i+1], s[i]\n        else:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 3069,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"possible\"\n    if n == 1:\n        return \"impossible\"\n    if n == 2:\n        return \"impossible\"\n    if n == 3:\n        return \"possible\"\n    if n == 4:\n        return \"possible\"\n    if n == 5:\n        return \"possible\"\n    if n == 6:\n        return \"possible\"\n    if n == 7:\n        return \"possible\"\n    if n == 8:\n        return \"possible\"\n    if n == 9:\n        return \"possible\"\n    if n == 10:\n        return \"possible\"\n    if n == 11:\n        return \"possible\"\n    if n == 12:\n        return \"possible\"\n    if n == 13:\n        return \"possible\"\n    if n == 14:\n        return \"possible\"\n    if n == 15:\n        return \"possible\"\n    if n == 16:\n        return \"possible\"\n    if n == 17:\n        return \"possible\"\n    if n == 18:\n        return \"possible\"\n    if n == 19:\n        return \"possible\"\n    if n == 20:\n        return \"possible\"\n    if n == 21:\n        return \"possible\"\n    if n == 22:\n        return \"possible\"\n    if n == 23:\n        return \"possible\"\n    if n == 24:\n        return \"possible\"\n    if n == 25:\n        return \"possible\"\n    if n == 26:\n        return \"possible\"\n    if n == 27:\n        return \"possible\"\n    if n == 28:\n        return \"possible\"\n    if n == 29:\n        return \"possible\"\n    if n == 30:\n        return \"possible\"\n    if n == 31:\n        return \"possible\"\n    if n == 32:\n        return \"possible\"\n    if n == 33:\n        return \"possible\"\n    if n == 34:\n        return \"possible\"\n    if n == 35:\n        return \"possible\"\n    if n == 36:\n        return \"possible\"\n    if n == 37:\n        return \"possible\"\n    if n == 38:\n        return \"possible\"\n    if n == 39:\n        return \"possible\"\n    if n == 40:\n        return \"possible\"\n    if n == 41:\n        return \"possible\"\n    if n == 42:\n        return \"possible\"\n    if n == 43:\n        return \"possible\"\n    if n == 44:\n        return \"possible\"\n    if n == 45:\n        return \"possible\"\n    if n == 46:\n        return \"possible\"\n    if n == 47:\n        return \"possible\"\n    if n == 48:\n        return \"possible\"\n    if n == 49:\n        return \"possible\"\n    if n == 50:\n        return \"possible\"\n    if n == 51:\n        return \"possible\"\n    if n == 52:\n        return \"possible\"\n    if n == 53:\n        return \"possible\"\n    if n == 54:\n        return \"possible\"\n    if n == 55:\n        return \"possible\"\n    if n == 56:\n        return \"possible\"\n    if n == 57:\n        return \"possible\"\n    if n == 58:\n        return \"possible\"\n    if n == 59:\n        return \"possible\"\n    if n == 60:\n        return \"possible\"\n    if n == 61:\n        return \"possible\"\n    if n == 62:\n        return \"possible\"\n    if n == 63:\n        return \"possible\"\n    if n == 64:\n        return \"possible\"\n    if n == 65:\n        return \"possible\"\n    if n == 66:\n        return \"possible\"\n    if n == 67:\n        return \"possible\"\n    if n == 68:\n        return \"possible\"\n    if n == 69:\n        return \"possible\"\n    if n == 70:\n        return \"possible\"\n    if n == 71:\n        return \"possible\"\n    if n == 72:\n        return \"possible\"\n    if n == 73:\n        return \"possible\"\n    if n == 74:\n        return \"possible\"\n    if n == 75:\n        return \"possible\"\n    if n == 76:\n        return \"possible\"\n    if n == 77:\n        return \"possible\"\n    if n == 78:\n        return \"possible\"\n    if n == 79:\n        return \"possible\"\n    if n == 80:\n        return \"possible\"\n    if n == 81:\n        return \"possible\"\n    if n == 82:\n        return \"possible\"\n    if n == 83:\n        return \"possible\"\n    if n == 84:\n        return \"possible\"\n    if n == 85:\n        return \"possible\"\n    if n == 86:\n        return \"possible\"\n    if n == 87:\n        return \"possible\"\n    if n == 88:\n        return \"possible\"\n    if n == 89:\n        return \"possible\"\n    if n == 90:\n        return \"possible\"\n    if n == 91:\n        return \"possible\"\n    if n == 92:\n        return \"possible\"\n    if n == 93:\n        return \"possible\"\n    if n == 94:\n        return \"possible\"\n    if n == 95:\n        return \"possible\"\n    if n == 96:\n        return \"possible\"\n    if n == 97:\n        return \"possible\"\n    if n == 98:\n        return \"possible\"\n    if n == 99:\n        return \"possible\"\n    if n == 100:\n        return \"possible\"\n    if n == 101:\n        return \"possible\"\n    if n == 102:\n        return \"possible\"\n    if n == 103:\n        return \"possible\"\n    if n == 104:\n        return \"possible\"\n    if n == 105:\n        return \"possible\"\n    if n == 106:\n        return \"possible\"\n    if n == 107:\n        return \"possible\"\n    if n == 108:\n        return \"possible\"\n    if n == 109:\n        return \"possible\"\n    if n =="
    },
    {
        "number": 3070,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, S, T, L = map(int, stdin.split())\n    if N == 1:\n        return str(X)\n    if M == 1:\n        return str(S)\n    if M == 2:\n        return str(T)\n    if M == 3:\n        return str(L)\n    if M == 4:\n        return str(S) + str(T) + str(L)\n    if M == 5:\n        return str(S) + str(T) + str(L) + str(S)\n    if M == 6:\n        return str(S) + str(T) + str(L) + str(S) + str(T)\n    if M == 7:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 8:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S)\n    if M == 9:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T)\n    if M == 10:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 11:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S)\n    if M == 12:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T)\n    if M == 13:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 14:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 15:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 16:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 17:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 18:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 19:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 20:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 21:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 22:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 23:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 24:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 25:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 26:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 27:\n        return str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L) + str(S) + str(T) + str(L)\n    if M == 28:\n"
    },
    {
        "number": 3071,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > 25 or m > 25:\n        return 'A1-B2 B1-A2 A3-B3'\n    if n == 1:\n        return 'A1-B1 A2-C2 B2-C1'\n    if m == 1:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1 A2-C2 B2-C1'\n    if n == m:\n        return 'A1-B1"
    },
    {
        "number": 3072,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    table = [list(map(str, input().split())) for _ in range(R)]\n    table = [[0] * C for _ in range(R)]\n    for i in range(R):\n        for j in range(C):\n            if table[i][j] == '.':\n                table[i][j] = 0\n            elif table[i][j] == 'X':\n                table[i][j] = 0\n            else:\n                table[i][j] = 1\n    for i in range(R):\n        for j in range(C):\n            if table[i][j] == 1:\n                table[i][j] = 0\n            elif table[i][j] == 0:\n                table[i][j] = 1\n    return str(sum(table))\n"
    },
    {
        "number": 3073,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    knight = [list(map(int, input().split())) for _ in range(n)]\n    \n    def get_tarot_card(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot_card_pos_pos_pos_pos(r, c, a, b, p):\n        return (r + a) * 10 + c + b * 10 + p\n    \n    def get_tarot"
    },
    {
        "number": 3074,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.strip().split()))\n    s.sort()\n    s = [str(i) for i in s]\n    s = ''.join(s)\n    s = int(s)\n    if s % 3!= 0:\n        return str(s % 3)\n    else:\n        return str(s % 3) + '0' * (3 - s % 3)\n\ndef"
    },
    {
        "number": 3075,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, g = map(int, stdin.split())\n    if n == 1:\n        return str(g)\n    if n == 2:\n        return str(g * 2)\n    if n == 3:\n        return str(g * 3)\n    if n == 4:\n        return str(g * 4)\n    if n == 5:\n        return str(g * 5)\n    if n == 6:\n        return str(g * 6)\n    if n == 7:\n        return str(g * 7)\n    if n == 8:\n        return str(g * 8)\n    if n == 9:\n        return str(g * 9)\n    if n == 10:\n        return str(g * 10)\n    if n == 11:\n        return str(g * 11)\n    if n == 12:\n        return str(g * 12)\n    if n == 13:\n        return str(g * 13)\n    if n == 14:\n        return str(g * 14)\n    if n == 15:\n        return str(g * 15)\n    if n == 16:\n        return str(g * 16)\n    if n == 17:\n        return str(g * 17)\n    if n == 18:\n        return str(g * 18)\n    if n == 19:\n        return str(g * 19)\n    if n == 20:\n        return str(g * 20)\n    if n == 21:\n        return str(g * 21)\n    if n == 22:\n        return str(g * 22)\n    if n == 23:\n        return str(g * 23)\n    if n == 24:\n        return str(g * 24)\n    if n == 25:\n        return str(g * 25)\n    if n == 26:\n        return str(g * 26)\n    if n == 27:\n        return str(g * 27)\n    if n == 28:\n        return str(g * 28)\n    if n == 29:\n        return str(g * 29)\n    if n == 30:\n        return str(g * 30)\n    if n == 31:\n        return str(g * 31)\n    if n == 32:\n        return str(g * 32)\n    if n == 33:\n        return str(g * 33)\n    if n == 34:\n        return str(g * 34)\n    if n == 35:\n        return str(g * 35)\n    if n == 36:\n        return str(g * 36)\n    if n == 37:\n        return str(g * 37)\n    if n == 38:\n        return str(g * 38)\n    if n == 39:\n        return str(g * 39)\n    if n == 40:\n        return str(g * 40)\n    if n == 41:\n        return str(g * 41)\n    if n == 42:\n        return str(g * 42)\n    if n == 43:\n        return str(g * 43)\n    if n == 44:\n        return str(g * 44)\n    if n == 45:\n        return str(g * 45)\n    if n == 46:\n        return str(g * 46)\n    if n == 47:\n        return str(g * 47)\n    if n == 48:\n        return str(g * 48)\n    if n == 49:\n        return str(g * 49)\n    if n == 50:\n        return str(g * 50)\n    if n == 51:\n        return str(g * 51)\n    if n == 52:\n        return str(g * 52)\n    if n == 53:\n        return str(g * 53)\n    if n == 54:\n        return str(g * 54)\n    if n == 55:\n        return str(g * 55)\n    if n == 56:\n        return str(g * 56)\n    if n == 57:\n        return str(g * 57)\n    if n == 58:\n        return str(g * 58)\n    if n == 59:\n        return str(g * 59)\n    if n == 60:\n        return str(g * 60)\n    if n == 61:\n        return str(g * 61)\n    if n == 62:\n        return str(g * 62)\n    if n == 63:\n        return str(g * 63)\n    if n == 64:\n        return str(g * 64)\n    if n == 65:\n        return str(g * 65)\n    if n == 66:\n        return str(g * 66)\n    if n == 67:\n        return str(g * 67)\n    if n == 68:\n        return str(g * 68)\n    if n == 69:\n        return str(g * 69)\n    if n == 70:\n        return str(g * 70)\n    if n == 71:\n        return str(g * 71)\n    if n == 72:\n        return str(g * 72)\n    if n == 73:\n        return str(g * 73)\n    if n == 74:\n        return str(g * 74)\n    if n == 75:\n        return str(g * 75)\n    if n == 76:\n        return str(g * 76)\n    if n == 77:\n        return str(g * 77)\n    if n == 78:\n        return str(g * 78)\n    if n == 79:\n        return str(g * 79)\n    if n == 80:\n        return str(g * 80)\n    if n == 81:\n        return str(g * 81)\n    if n == 82:\n        return str(g * 82)\n    if n == 83:\n        return str(g * 83)\n    if n == 84:\n        return str(g * 84)\n    if n == 85:\n        return str(g * 85)\n    if n == 86:\n        return str(g * 86)\n    if n == 87:\n        return str(g * 87)\n    if n == 88:\n        return str(g * 88)\n    if n == 89:\n        return str(g * 89)\n    if n == 90:\n        return str(g * 90)\n    if n == 91:\n        return str(g * 91)\n    if n == 92:\n        return str(g * 92)\n    if n == 93:\n        return str(g * 93)\n    if n == 94:\n        return str(g * 94)\n    if n == 95:\n        return str(g * 95)\n    if n == 96:\n        return str(g * 96)\n    if n == 97:\n        return str(g * 97)\n    if n == 98:\n        return str(g * 98)\n    if n == 99:\n        return str"
    },
    {
        "number": 3076,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    jewels = list(map(int, stdin.split()))\n    jewels.sort()\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0] + jewels\n    jewels = [0]"
    },
    {
        "number": 3077,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    vx, vy, vr = map(int, stdin.split())\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r or vr > r:\n        return 0\n    \n    if vx > r or vy > r"
    },
    {
        "number": 3078,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    i = 0\n    while i < len(A):\n        if A[i] + A[i+1] > s:\n            break\n        i += 1\n    if i == len(A):\n        return 0\n    else:\n        return len(A[i:])\n"
    },
    {
        "number": 3079,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return 'NE'\n    if n == 1:\n        return 'DA'\n    if n == 2:\n        return 'DA'\n    if n == 3:\n        return 'DA'\n    if n == 4:\n        return 'DA'\n    if n == 5:\n        return 'DA'\n    if n == 6:\n        return 'DA'\n    if n == 7:\n        return 'DA'\n    if n == 8:\n        return 'DA'\n    if n == 9:\n        return 'DA'\n    if n == 10:\n        return 'DA'\n    if n == 11:\n        return 'DA'\n    if n == 12:\n        return 'DA'\n    if n == 13:\n        return 'DA'\n    if n == 14:\n        return 'DA'\n    if n == 15:\n        return 'DA'\n    if n == 16:\n        return 'DA'\n    if n == 17:\n        return 'DA'\n    if n == 18:\n        return 'DA'\n    if n == 19:\n        return 'DA'\n    if n == 20:\n        return 'DA'\n    if n == 21:\n        return 'DA'\n    if n == 22:\n        return 'DA'\n    if n == 23:\n        return 'DA'\n    if n == 24:\n        return 'DA'\n    if n == 25:\n        return 'DA'\n    if n == 26:\n        return 'DA'\n    if n == 27:\n        return 'DA'\n    if n == 28:\n        return 'DA'\n    if n == 29:\n        return 'DA'\n    if n == 30:\n        return 'DA'\n    if n == 31:\n        return 'DA'\n    if n == 32:\n        return 'DA'\n    if n == 33:\n        return 'DA'\n    if n == 34:\n        return 'DA'\n    if n == 35:\n        return 'DA'\n    if n == 36:\n        return 'DA'\n    if n == 37:\n        return 'DA'\n    if n == 38:\n        return 'DA'\n    if n == 39:\n        return 'DA'\n    if n == 40:\n        return 'DA'\n    if n == 41:\n        return 'DA'\n    if n == 42:\n        return 'DA'\n    if n == 43:\n        return 'DA'\n    if n == 44:\n        return 'DA'\n    if n == 45:\n        return 'DA'\n    if n == 46:\n        return 'DA'\n    if n == 47:\n        return 'DA'\n    if n == 48:\n        return 'DA'\n    if n == 49:\n        return 'DA'\n    if n == 50:\n        return 'DA'\n    if n == 51:\n        return 'DA'\n    if n == 52:\n        return 'DA'\n    if n == 53:\n        return 'DA'\n    if n == 54:\n        return 'DA'\n    if n == 55:\n        return 'DA'\n    if n == 56:\n        return 'DA'\n    if n == 57:\n        return 'DA'\n    if n == 58:\n        return 'DA'\n    if n == 59:\n        return 'DA'\n    if n == 60:\n        return 'DA'\n    if n == 61:\n        return 'DA'\n    if n == 62:\n        return 'DA'\n    if n == 63:\n        return 'DA'\n    if n == 64:\n        return 'DA'\n    if n == 65:\n        return 'DA'\n    if n == 66:\n        return 'DA'\n    if n == 67:\n        return 'DA'\n    if n == 68:\n        return 'DA'\n    if n == 69:\n        return 'DA'\n    if n == 70:\n        return 'DA'\n    if n == 71:\n        return 'DA'\n    if n == 72:\n        return 'DA'\n    if n == 73:\n        return 'DA'\n    if n == 74:\n        return 'DA'\n    if n == 75:\n        return 'DA'\n    if n == 76:\n        return 'DA'\n    if n == 77:\n        return 'DA'\n    if n == 78:\n        return 'DA'\n    if n == 79:\n        return 'DA'\n    if n == 80:\n        return 'DA'\n    if n == 81:\n        return 'DA'\n    if n == 82:\n        return 'DA'\n    if n == 83:\n        return 'DA'\n    if n == 84:\n        return 'DA'\n    if n == 85:\n        return 'DA'\n    if n == 86:\n        return 'DA'\n    if n == 87:\n        return 'DA'\n    if n == 88:\n        return 'DA'\n    if n == 89:\n        return 'DA'\n    if n == 90:\n        return 'DA'\n    if n == 91:\n        return 'DA'\n    if n == 92:\n        return 'DA'\n    if n == 93:\n        return 'DA'\n    if n == 94:\n        return 'DA'\n    if n == 95:\n        return 'DA'\n    if n == 96:\n        return 'DA'\n    if n == 97:\n        return 'DA'\n    if n == 98:\n        return 'DA'\n    if n == 99:\n        return 'DA'\n    if n == 100:\n        return 'DA'\n    if n == 101:\n        return 'DA'\n    if n == 102:\n        return 'DA'\n    if n == 103:\n        return 'DA'\n    if n == 104:\n        return 'DA'\n    if n == 105:\n        return 'DA'\n    if n == 106:\n        return 'DA'\n    if n == 107:\n        return 'DA'\n    if n == 108:\n        return 'DA'\n    if n == 109:\n        return 'DA'\n    if n == 110:\n        return 'DA'\n    if n == 111:\n        return 'DA'\n    if n == 112:\n        return 'DA'\n    if n == 113:\n        return 'DA'\n    if n == 114:\n        return 'DA'\n    if n == 115:\n        return 'DA'\n    if n == 116:\n        return 'DA'\n    if n == 117:\n        return 'DA'\n    if n == 118:\n        return 'DA'\n    if n == 119:\n        return 'DA'\n    if n == 120:\n        return 'DA'\n    if n == 121:\n        return 'DA'\n    if n == 122:\n        return 'DA'\n    if n == 123:\n        return 'DA'\n    if n == 124:\n        return 'DA'\n    if n == 125:\n        return 'DA'\n    if n == 126:\n        return 'DA"
    },
    {
        "number": 3080,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(m):\n        a.sort()\n        for j in range(q):\n            if a[j] == a[j+1]:\n                a[j] = a[j+1]\n                a[j+1] = a[j]\n    return''.join(map(str, a))\n"
    },
    {
        "number": 3081,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    airports = list(map(int, stdin.split()))\n    airports.sort()\n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if airports[i] < airports[j]:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 3082,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, w = map(int, stdin.split())\n    d_list = list(map(int, stdin.split()))\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    d_list = [0] + d_list\n    d_list.sort()\n    "
    },
    {
        "number": 3083,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, input().split())))\n    songs.sort(key=lambda x: x[0])\n    answer = []\n    for i in range(n):\n        if i == 0:\n            answer.append(songs[i][0])\n        else:\n            if songs[i][0] == songs[i-1][0]:\n                answer.append(songs[i][0])\n            else:\n                answer.append(songs[i][0])\n                answer.append(songs[i-1][0])\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 3084,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(':'))\n    h = h % 24\n    m = m % 60\n    return str(h) + ':' + str(m)\n\nSample Input 3:\n00:00\n01:01\nSample Output 3:\n00:00\n01:00\n01:01\n\nSample Input 4:\n00:00\n01:01\nSample Output 4:\n00:00\n01:00\n01:01\n\nSample Input 5:\n00:00\n01:01\nSample Output 5:\n00:00\n01:00\n01:01\n\nSample Input 6:\n00:00\n01:01\nSample Output 6:\n00:00\n01:00\n01:01\n\nSample Input 7:\n00:00\n01:01\nSample Output 7:\n00:00\n01:00\n01:01\n\nSample Input 8:\n00:00\n01:01\nSample Output 8:\n00:00\n01:00\n01:01\n\nSample Input 9:\n00:00\n01:01\nSample Output 9:\n00:00\n01:00\n01:01\n\nSample Input 10:\n00:00\n01:01\nSample Output 10:\n00:00\n01:00\n01:01\n\nSample Input 11:\n00:00\n01:01\nSample Output 11:\n00:00\n01:00\n01:01\n\nSample Input 12:\n00:00\n01:01\nSample Output 12:\n00:00\n01:00\n01:01\n\nSample Input 13:\n00:00\n01:01\nSample Output 13:\n00:00\n01:00\n01:01\n\nSample Input 14:\n00:00\n01:01\nSample Output 14:\n00:00\n01:00\n01:01\n\nSample Input 15:\n00:00\n01:01\nSample Output 15:\n00:00\n01:00\n01:01\n\nSample Input 16:\n00:00\n01:01\nSample Output 16:\n00:00\n01:00\n01:01\n\nSample Input 17:\n00:00\n01:01\nSample Output 17:\n00:00\n01:00\n01:01\n\nSample Input 18:\n00:00\n01:01\nSample Output 18:\n00:00\n01:00\n01:01\n\nSample Input 19:\n00:00\n01:01\nSample Output 19:\n00:00\n01:00\n01:01\n\nSample Input 20:\n00:00\n01:01\nSample Output 20:\n00:00\n01:00\n01:01\n\nSample Input 21:\n00:00\n01:01\nSample Output 21:\n00:00\n01:00\n01:01\n\nSample Input 22:\n00:00\n01:01\nSample Output 22:\n00:00\n01:00\n01:01\n\nSample Input 23:\n00:00\n01:01\nSample Output 23:\n00:00\n01:00\n01:01\n\nSample Input 24:\n00:00\n01:01\nSample Output 24:\n00:00\n01:00\n01:01\n\nSample Input 25:\n00:00\n01:01\nSample Output 25:\n00:00\n01:00\n01:01\n\nSample Input 26:\n00:00\n01:01\nSample Output 26:\n00:00\n01:00\n01:01\n\nSample Input 27:\n00:00\n01:01\nSample Output 27:\n00:00\n01:00\n01:01\n\nSample Input 28:\n00:00\n01:01\nSample Output 28:\n00:00\n01:00\n01:01\n\nSample Input 29:\n00:00\n01:01\nSample Output 29:\n00:00\n01:00\n01:01\n\nSample Input 30:\n00:00\n01:01\nSample Output 30:\n00:00\n01:00\n01:01\n\nSample Input 31:\n00:00\n01:01\nSample Output 31:\n00:00\n01:00\n01:01\n\nSample Input 32:\n00:00\n01:01\nSample Output 32:\n00:00\n01:00\n01:01\n\nSample Input 33:\n00:00\n01:01\nSample Output 33:\n00:00\n01:00\n01:01\n\nSample Input 34:\n00:00\n01:01\nSample Output 34:\n00:00\n01:00\n01:01\n\nSample Input 35:\n00:00\n01:01\nSample Output 35:\n00:00\n01:00\n01:01\n\nSample Input 36:\n00:00\n01:01\nSample Output 36:\n00:00\n01:00\n01:01\n\nSample Input 37:\n00:00\n01:01\nSample Output 37:\n00:00\n01:00\n01:01\n\nSample Input 38:\n00:00\n01:01\nSample Output 38:\n00:00\n01:00\n01:01\n\nSample Input 39:\n00:00\n01:01\nSample Output 39:\n00:00\n01:00\n01:01\n\nSample Input 40:\n00:00\n01:01\nSample Output 40:\n00:00\n01:00\n01:01\n\nSample Input 41:\n00:00\n01:01\nSample Output 41:\n00:00\n01:00\n01:01\n\nSample Input 42:\n00:00\n01:01\nSample Output 42:\n00:00\n01:00\n01:01\n\nSample Input 43:\n00:00\n01:01\nSample Output 43:\n00:00\n01:00\n01:01\n\nSample Input 44:\n00:00\n01:01\nSample Output 44:\n00:00\n01:00\n01:01\n\nSample Input 45:\n00:00\n01:01\nSample Output 45:\n00:00\n01:00\n01:01\n\nSample Input 46:\n00:00\n01:01\nSample Output 46:\n00:00\n01:00\n01:01\n\nSample Input 47:\n00:00\n01:01\nSample Output 47:\n00:00\n01:00\n01:01\n\nSample Input 48:\n00:00\n01:01\nSample Output 48:\n00:00\n01:00\n01:01\n\nSample"
    },
    {
        "number": 3085,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(len(stdin)):\n        if stdin[i] == '(':\n            answer += ')'\n        elif stdin[i] == ')':\n            answer += '('\n        else:\n            answer += ')'\n    return answer\n\nSample Input 3:\n(())\nSample Output 3:\n4,8:8,8:\n\nSample Input 4:\n()\nSample Output 4:\n4,4:\ndef"
    },
    {
        "number": 3086,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = [0] * (n + 1)\n    for i in range(m):\n        d[i + 1] = int(stdin[i])\n    for i in range(n):\n        d[i + 1] += d[i]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -1):\n        d[i] += d[i + 1]\n    for i in range(n - 1, -1, -"
    },
    {
        "number": 3087,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return str(arr.index(k)+1)\n"
    },
    {
        "number": 3088,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    for i in range(k):\n        nums[i], nums[-i-1] = nums[-i-1], nums[i]\n    return str(sum(nums))\n\nSample Input 3:\n2\nSample Output 3:\n2\n\nSample Input 4:\n1\nSample Output 4:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 18\n\n-----Time Limit: 1 sec\n-----Sample Runtime: 0.1\n\"\"\"\n\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums.sort()\n        for i in range(len(nums)):\n            if i == 0:\n                nums[i] = str(nums[i])\n            else:\n                nums[i] = str(nums[i] * 10 + nums[i-1])\n        return str(int(''.join(nums)))\n"
    },
    {
        "number": 3089,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    y = [int(i) for i in stdin.split()]\n    y.sort()\n    x_1 = x[0]\n    y_1 = y[0]\n    x_2 = x[1]\n    y_2 = y[1]\n    x_3 = x[2]\n    y_3 = y[2]\n    x_4 = x[3]\n    y_4 = y[3]\n    x_5 = x[4]\n    y_5 = y[4]\n    x_6 = x[5]\n    y_6 = y[5]\n    x_7 = x[6]\n    y_7 = y[6]\n    x_8 = x[7]\n    y_8 = y[7]\n    x_9 = x[8]\n    y_9 = y[8]\n    x_10 = x[9]\n    y_10 = y[9]\n    x_11 = x[10]\n    y_11 = y[10]\n    x_12 = x[11]\n    y_12 = y[11]\n    x_13 = x[12]\n    y_13 = y[12]\n    x_14 = x[13]\n    y_14 = y[13]\n    x_15 = x[14]\n    y_15 = y[14]\n    x_16 = x[15]\n    y_16 = y[15]\n    x_17 = x[16]\n    y_17 = y[16]\n    x_18 = x[17]\n    y_18 = y[17]\n    x_19 = x[18]\n    y_19 = y[18]\n    x_20 = x[19]\n    y_20 = y[19]\n    x_21 = x[20]\n    y_21 = y[20]\n    x_22 = x[21]\n    y_22 = y[21]\n    x_23 = x[22]\n    y_23 = y[22]\n    x_24 = x[23]\n    y_24 = y[23]\n    x_25 = x[24]\n    y_25 = y[24]\n    x_26 = x[25]\n    y_26 = y[25]\n    x_27 = x[26]\n    y_27 = y[26]\n    x_28 = x[27]\n    y_28 = y[27]\n    x_29 = x[28]\n    y_29 = y[28]\n    x_30 = x[29]\n    y_30 = y[29]\n    x_31 = x[30]\n    y_31 = y[30]\n    x_32 = x[31]\n    y_32 = y[31]\n    x_33 = x[32]\n    y_33 = y[32]\n    x_34 = x[33]\n    y_34 = y[33]\n    x_35 = x[34]\n    y_35 = y[34]\n    x_36 = x[35]\n    y_36 = y[35]\n    x_37 = x[36]\n    y_37 = y[36]\n    x_38 = x[37]\n    y_38 = y[37]\n    x_39 = x[38]\n    y_39 = y[38]\n    x_40 = x[39]\n    y_40 = y[39]\n    x_41 = x[40]\n    y_41 = y[40]\n    x_42 = x[41]\n    y_42 = y[41]\n    x_43 = x[42]\n    y_43 = y[42]\n    x_44 = x[43]\n    y_44 = y[43]\n    x_45 = x[44]\n    y_45 = y[44]\n    x_46 = x[45]\n    y_46 = y[45]\n    x_47 = x[46]\n    y_47 = y[46]\n    x_48 = x[47]\n    y_48 = y[47]\n    x_49 = x[48]\n    y_49 = y[48]\n    x_50 = x[49]\n    y_50 = y[49]\n    x_51 = x[50]\n    y_51 = y[50]\n    x_52 = x[51]\n    y_52 = y[51]\n    x_53 = x[52]\n    y_53 = y[52]\n    x_54 = x[53]\n    y_54 = y[53]\n    x_55 = x[54]\n    y_55 = y[54]\n    x_56 = x[55]\n    y_56 = y[55]\n    x_57 = x[56]\n    y_57 = y[56]\n    x_58 = x[57]\n    y_58 = y[57]\n    x_59 = x[58]\n    y_59 = y[58]\n    x_60 = x[59]\n    y_60 = y[59]\n    x_61 = x[60]\n    y_61 = y[60]\n    x_62 = x[61]\n    y_62 = y[61]\n    x_63 = x[62]\n    y_63 = y[62]\n    x_64 = x[63]\n    y_64 = y[63]\n    x_65 = x[64]\n    y_65 = y[64]\n    x_66 = x[65]\n    y_66 = y[65]\n    x_67 = x[66]\n    y_67 = y[66]\n    x_68 = x[67]\n    y_68 = y[67]\n    x_69 = x[68]\n    y_69 = y[68]\n    x_70 = x[69]\n    y_70 = y[69]\n    x_71 = x[70]\n    y_71 = y[70]\n    x_72 = x[71]\n    y_72 = y[71]\n    x_73 = x[72]\n    y_73 = y[72]\n    x_74 = x[73]\n    y_74 = y[73]\n    x_75 = x[74]\n    y_75 = y[74]\n    x_76 = x[75]\n    y_76 = y[75]\n    x_77 = x[76]\n    y_77 = y[76]\n    x_78 = x[77]\n    y_78 = y[77]\n    x_"
    },
    {
        "number": 3090,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = int(stdin.split()[0])\n    \n    def get_cost(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_2(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_3(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_4(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_5(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_6(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_7(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_8(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_9(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_10(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_11(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_12(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_13(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_14(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_15(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_16(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_17(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_18(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_19(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_20(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_21(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_22(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_23(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_24(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_25(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_26(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_27(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_28(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_29(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_30(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_31(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_32(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_33(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_34(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_35(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_36(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_37(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_38(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_39(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_40(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_41(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_42(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_43(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_44(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_45(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_46(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_47(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_48(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_49(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_50(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_51(i, j):\n        return int(stdin.split()[i+j])\n    \n    def get_cost_52"
    },
    {
        "number": 3091,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t = map(int, stdin.split())\n    op = stdin.split()[1]\n    if op == \"+\":\n        op = \"*\"\n    elif op == \"-\":\n        op = \"/\"\n    else:\n        op = \"+\"\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == t:\n                if op == \"+\":\n                    grid[i][j] += 1\n                elif op == \"-\":\n                    grid[i][j] -= 1\n                elif op == \"*\":\n                    grid[i][j] *= 2\n                elif op == \"/\":\n                    grid[i][j] /= 2\n    return str(grid[n - 1][m - 1])\n\ndef"
    },
    {
        "number": 3092,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, stdin.split())))\n    \n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if roads[i][0] == roads[j][0] and roads[i][1] == roads[j][1]:\n                answer += 1\n    return str(answer)\n\n-----Examples-----\nInput 1:\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\nOutput 1:\n3\n4\n3\n2\n\nInput 2:\n4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\nOutput 2:\n2\n3\n2\n1\n\n-----Constraints-----\n1 <= N <= 100\n1 <= M <= 100\n1 <= O <= 100\n1 <= D, L <= 10000\n\n-----Time Limit: 1 second\n-----Memory Limit: 1GB\n-----Test Example:\nTest case 1:\nInput:\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\nOutput:\n3\n4\n3\n2\n\"\"\"\n\nclass Solution:\n    def shortestPath(self, n: int, m: int, roads: List[List[int]], start: int, end: int) -> int:\n        \n        graph = collections.defaultdict(list)\n        for u, v, w in roads:\n            graph[u].append((v, w))\n            graph[v].append((u, w))\n        \n        def dfs(start, end):\n            visited = set()\n            queue = collections.deque([(start, 0)])\n            while queue:\n                cur, dist = queue.popleft()\n                if cur == end:\n                    return dist\n                for next, w in graph[cur]:\n                    if next not in visited:\n                        visited.add(next)\n                        queue.append((next, dist+1))\n            return -1\n        \n        return dfs(start, end)\n"
    },
    {
        "number": 3093,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(k)\n    if n == 2:\n        return str(k * (k - 1))\n    if n == 3:\n        return str(k * (k - 1) * (k - 2))\n    if n == 4:\n        return str(k * (k - 1) * (k - 2) * (k - 3))\n    if n == 5:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4))\n    if n == 6:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5))\n    if n == 7:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6))\n    if n == 8:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7))\n    if n == 9:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8))\n    if n == 10:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9))\n    if n == 11:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10))\n    if n == 12:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11))\n    if n == 13:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12))\n    if n == 14:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13))\n    if n == 15:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14))\n    if n == 16:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14) * (k - 15))\n    if n == 17:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14) * (k - 15) * (k - 16))\n    if n == 18:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14) * (k - 15) * (k - 16) * (k - 17))\n    if n == 19:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14) * (k - 15) * (k - 16) * (k - 17) * (k - 18))\n    if n == 20:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14) * (k - 15) * (k - 16) * (k - 17) * (k - 18) * (k - 19))\n    if n == 21:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14) * (k - 15) * (k - 16) * (k - 17) * (k - 18) * (k - 19) * (k - 20))\n    if n == 22:\n        return str(k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) * (k - 9) * (k - 10) * (k - 11) * (k - 12) * (k - 13) * (k - 14) * (k - 15) * (k -"
    },
    {
        "number": 3094,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [int(i) for i in stdin.split()]\n    s.sort()\n    \n    def count_ways(s, i):\n        if i == n:\n            return 1\n        \n        if s[i] == s[i+1]:\n            return count_ways(s, i+1)\n        \n        return count_ways(s, i+1) + count_ways(s, i+2)\n    \n    return str(count_ways(s, 0))\n\nSample Input 3:\n5\n1 2 3 4 5\nSample Output 3:\n1\n\nSample Input 4:\n5\n1 2 3 4 5\nSample Output 4:\n1\n\nSample Input 5:\n5\n1 2 3 4 5\nSample Output 5:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 1:\nInput:\n2\n1 2\nSample Output:\n2\n\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 2:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 3:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 4:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 5:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 6:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 7:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 8:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 9:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 10:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 11:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 12:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 13:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 14:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 15:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 16:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 17:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 18:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 19:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 20:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 21:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 22:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 23:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i <= n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 24:\nInput:\n5\n1 2 3 4 5\nSample Output:\n1"
    },
    {
        "number": 3095,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    A = [[int(i) for i in input().split()] for _ in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in range(R)]\n    A = [[A[i][j] for j in range(S)] for i in"
    },
    {
        "number": 3096,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    nums.sort()\n    answer = 0\n    for i in range(n):\n        if nums[i] == nums[i+1]:\n            answer += 1\n        else:\n            answer += 1\n            answer += 1\n            answer += 1\n    return str(answer)\n\ndef"
    },
    {
        "number": 3097,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    c = []\n    for i in range(n):\n        c.append(a[i] * b[i])\n    return str(sum(c))\n\nSample Output 2:\n265\n25\n10\n\nSample Input 3:\n3\n1 10\n5 8\nSample Output 3:\n18\n8\n\nSample Input 4:\n3\n1 10\n5 8\nSample Output 4:\n18\n8\n\nSample Input 5:\n3\n1 10\n5 8\nSample Output 5:\n18\n8\n\nSample Input 6:\n3\n1 10\n5 8\nSample Output 6:\n18\n8\n\nSample Input 7:\n3\n1 10\n5 8\nSample Output 7:\n18\n8\n\nSample Input 8:\n3\n1 10\n5 8\nSample Output 8:\n18\n8\n\nSample Input 9:\n3\n1 10\n5 8\nSample Output 9:\n18\n8\n\nSample Input 10:\n3\n1 10\n5 8\nSample Output 10:\n18\n8\n\nSample Input 11:\n3\n1 10\n5 8\nSample Output 11:\n18\n8\n\nSample Input 12:\n3\n1 10\n5 8\nSample Output 12:\n18\n8\n\nSample Input 13:\n3\n1 10\n5 8\nSample Output 13:\n18\n8\n\nSample Input 14:\n3\n1 10\n5 8\nSample Output 14:\n18\n8\n\nSample Input 15:\n3\n1 10\n5 8\nSample Output 15:\n18\n8\n\nSample Input 16:\n3\n1 10\n5 8\nSample Output 16:\n18\n8\n\nSample Input 17:\n3\n1 10\n5 8\nSample Output 17:\n18\n8\n\nSample Input 18:\n3\n1 10\n5 8\nSample Output 18:\n18\n8\n\nSample Input 19:\n3\n1 10\n5 8\nSample Output 19:\n18\n8\n\nSample Input 20:\n3\n1 10\n5 8\nSample Output 20:\n18\n8\n\nSample Input 21:\n3\n1 10\n5 8\nSample Output 21:\n18\n8\n\nSample Input 22:\n3\n1 10\n5 8\nSample Output 22:\n18\n8\n\nSample Input 23:\n3\n1 10\n5 8\nSample Output 23:\n18\n8\n\nSample Input 24:\n3\n1 10\n5 8\nSample Output 24:\n18\n8\n\nSample Input 25:\n3\n1 10\n5 8\nSample Output 25:\n18\n8\n\nSample Input 26:\n3\n1 10\n5 8\nSample Output 26:\n18\n8\n\nSample Input 27:\n3\n1 10\n5 8\nSample Output 27:\n18\n8\n\nSample Input 28:\n3\n1 10\n5 8\nSample Output 28:\n18\n8\n\nSample Input 29:\n3\n1 10\n5 8\nSample Output 29:\n18\n8\n\nSample Input 30:\n3\n1 10\n5 8\nSample Output 30:\n18\n8\n\nSample Input 31:\n3\n1 10\n5 8\nSample Output 31:\n18\n8\n\nSample Input 32:\n3\n1 10\n5 8\nSample Output 32:\n18\n8\n\nSample Input 33:\n3\n1 10\n5 8\nSample Output 33:\n18\n8\n\nSample Input 34:\n3\n1 10\n5 8\nSample Output 34:\n18\n8\n\nSample Input 35:\n3\n1 10\n5 8\nSample Output 35:\n18\n8\n\nSample Input 36:\n3\n1 10\n5 8\nSample Output 36:\n18\n8\n\nSample Input 37:\n3\n1 10\n5 8\nSample Output 37:\n18\n8\n\nSample Input 38:\n3\n1 10\n5 8\nSample Output 38:\n18\n8\n\nSample Input 39:\n3\n1 10\n5 8\nSample Output 39:\n18\n8\n\nSample Input 40:\n3\n1 10\n5 8\nSample Output 40:\n18\n8\n\nSample Input 41:\n3\n1 10\n5 8\nSample Output 41:\n18\n8\n\nSample Input 42:\n3\n1 10\n5 8\nSample Output 42:\n18\n8\n\nSample Input 43:\n3\n1 10\n5 8\nSample Output 43:\n18\n8\n\nSample Input 44:\n3\n1 10\n5 8\nSample Output 44:\n18\n8\n\nSample Input 45:\n3\n1 10\n5 8\nSample Output 45:\n18\n8\n\nSample Input 46:\n3\n1 10\n5 8\nSample Output 46:\n18\n8\n\nSample Input 47:\n3\n1 10\n5 8\nSample Output 47:\n18\n8\n\nSample Input 48:\n3\n1 10\n5 8\nSample Output 48:\n18\n8\n\nSample Input 49:\n3\n1 10\n5 8\nSample Output 49:\n18\n8\n\nSample Input 50:\n3\n1 10\n5 8\nSample Output 50:\n18\n8\n\nSample"
    },
    {
        "number": 3098,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    \n    def is_collinear(x, y):\n        return (x - y) % (k - 1) == 0\n    \n    def is_convex(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0\n    \n    def is_convex_polygon(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y)\n    \n    def is_convex_polygon_area(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_2(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_3(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_4(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_5(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_6(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_7(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_8(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_9(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_10(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_11(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_12(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_13(x, y):\n        return (x - y) % (k - 1) == 0 and (y - x) % (k - 1) == 0 and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y) and is_convex(x, y)\n    \n    def is_convex_polygon_area_14(x, y):\n        return (x - y) % (k - 1) == 0 and"
    },
    {
        "number": 3099,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    \n    def find(x):\n        if x == 0:\n            return 0\n        return find(s[x-1]) + 1\n    \n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x < y:\n            s[x] = s[y]\n        else:\n            s[y] = s[x]\n        return s[x]\n    \n    def find_s(x):\n        if x == 0:\n            return 0\n        return find_s(s[x-1]) + 1\n    \n    def find_e(x):\n        if x == 0:\n            return 0\n        return find_e(s[x-1])\n    \n    def find_c(x):\n        if x == 0:\n            return 0\n        return find_c(s[x-1]) + 1\n    \n    def find_e_s(x):\n        if x == 0:\n            return 0\n        return find_e_s(s[x-1]) + 1\n    \n    def find_e_c(x):\n        if x == 0:\n            return 0\n        return find_e_c(s[x-1]) + 1\n    \n    def find_e_c_s(x):\n        if x == 0:\n            return 0\n        return find_e_c_s(s[x-1]) + 1\n    \n    def find_e_c_s_e(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_s(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s_e(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s_e_s(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s_e_s_e(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s_e_c_s_e_s(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s_e_c_s_e_s_e(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s_e_c_s_e_c_s_e_s_e(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_s_e_s_e(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_s_e_s_e(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_s_e_s_e(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_c_s_e_s_e(x):\n        if x == 0:\n            return 0\n        return find_e_c_s_e(s[x-1]) + 1\n    \n    def find_e_c_s_e_c_s"
    },
    {
        "number": 3100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    "
    },
    {
        "number": 3101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    b = []\n    for i in range(n):\n        if a[i] == 0:\n            b.append(a[i])\n        else:\n            b.append(a[i] - 1)\n    return str(b)\n\nSample Input 3:\n1\n1\nSample Output 3:\n1\n\nSample Input 4:\n1\n1\nSample Output 4:\n1\n\nSample Input 5:\n1\n1\nSample Output 5:\n1\n\nSample Input 6:\n1\n1\nSample Output 6:\n1\n\nSample Input 7:\n1\n1\nSample Output 7:\n1\n\nSample Input 8:\n1\n1\nSample Output 8:\n1\n\nSample Input 9:\n1\n1\nSample Output 9:\n1\n\nSample Input 10:\n1\n1\nSample Output 10:\n1\n\nSample Input 11:\n1\n1\nSample Output 11:\n1\n\nSample Input 12:\n1\n1\nSample Output 12:\n1\n\nSample Input 13:\n1\n1\nSample Output 13:\n1\n\nSample Input 14:\n1\n1\nSample Output 14:\n1\n\nSample Input 15:\n1\n1\nSample Output 15:\n1\n\nSample Input 16:\n1\n1\nSample Output 16:\n1\n\nSample Input 17:\n1\n1\nSample Output 17:\n1\n\nSample Input 18:\n1\n1\nSample Output 18:\n1\n\nSample Input 19:\n1\n1\nSample Output 19:\n1\n\nSample Input 20:\n1\n1\nSample Output 20:\n1\n\nSample Input 21:\n1\n1\nSample Output 21:\n1\n\nSample Input 22:\n1\n1\nSample Output 22:\n1\n\nSample Input 23:\n1\n1\nSample Output 23:\n1\n\nSample Input 24:\n1\n1\nSample Output 24:\n1\n\nSample Input 25:\n1\n1\nSample Output 25:\n1\n\nSample Input 26:\n1\n1\nSample Output 26:\n1\n\nSample Input 27:\n1\n1\nSample Output 27:\n1\n\nSample Input 28:\n1\n1\nSample Output 28:\n1\n\nSample Input 29:\n1\n1\nSample Output 29:\n1\n\nSample Input 30:\n1\n1\nSample Output 30:\n1\n\nSample Input 31:\n1\n1\nSample Output 31:\n1\n\nSample Input 32:\n1\n1\nSample Output 32:\n1\n\nSample Input 33:\n1\n1\nSample Output 33:\n1\n\nSample Input 34:\n1\n1\nSample Output 34:\n1\n\nSample Input 35:\n1\n1\nSample Output 35:\n1\n\nSample Input 36:\n1\n1\nSample Output 36:\n1\n\nSample Input 37:\n1\n1\nSample Output 37:\n1\n\nSample Input 38:\n1\n1\nSample Output 38:\n1\n\nSample Input 39:\n1\n1\nSample Output 39:\n1\n\nSample Input 40:\n1\n1\nSample Output 40:\n1\n\nSample Input 41:\n1\n1\nSample Output 41:\n1\n\nSample Input 42:\n1\n1\nSample Output 42:\n1\n\nSample Input 43:\n1\n1\nSample Output 43:\n1\n\nSample Input 44:\n1\n1\nSample Output 44:\n1\n\nSample Input 45:\n1\n1\nSample Output 45:\n1\n\nSample Input 46:\n1\n1\nSample Output 46:\n1\n\nSample Input 47:\n1\n1\nSample Output 47:\n1\n\nSample Input 48:\n1\n1\nSample Output 48:\n1\n\nSample Input 49:\n1\n1\nSample Output 49:\n1\n\nSample Input 50:\n1\n1\nSample Output 50:\n1\n\nSample Input 51:\n1\n1\nSample Output 51:\n1\n\nSample Input 52:\n1\n1\nSample Output 52:\n1\n\nSample Input 53:\n1\n1\nSample Output 53:\n1\n\nSample Input 54:\n1\n1\nSample Output 54:\n1\n\nSample Input 55:\n1\n1\nSample Output 55:\n1\n\nSample Input 56:\n1\n1\nSample Output 56:\n1\n\nSample Input 57:\n1\n1\nSample Output 57:\n1\n\nSample Input 58:\n1\n1\nSample Output 58:\n1\n\nSample Input 59:\n1\n1\nSample Output 59:\n1\n\nSample Input 60:\n1\n1\nSample Output 60:\n1\n\nSample Input 61:\n1\n1\nSample Output 61:\n1\n\nSample Input 62:\n1\n1\nSample Output 62:\n1\n\nSample Input 63:\n1\n1\nSample Output 63:\n1\n\nSample Input 64:\n1\n1\nSample Output 64:\n1\n\nSample Input 65:\n1\n1\nSample Output 65:\n1\n\nSample Input 66:\n1\n1\nSample Output 66:\n1\n\nSample Input 67:\n1\n1\nSample Output 67:\n1\n\nSample Input 68:\n1\n1\nSample Output 68:\n1\n\nSample Input 69:\n1\n1\nSample Output 69:\n1\n\nSample Input 70:\n1\n1\nSample Output 70:\n1\n\nSample Input 71:\n1\n1\nSample Output 71:\n1\n\nSample Input 72:\n1\n1\nSample Output 72:\n1\n\nSample Input 73:\n1\n1\nSample Output 73:\n1\n\nSample Input 74:\n1\n1\nSample Output 74:\n1\n\nSample Input 75:\n1\n1\nSample Output 75:\n1\n\nSample Input 76:\n1\n1\nSample Output 76:\n1\n\nSample Input 77:\n1\n1\nSample Output 77:\n1\n\nSample Input 78:\n1\n1\nSample Output 78:\n1\n\nSample Input 79:\n1\n1\nSample Output 79:\n1\n\nSample Input 80:\n1\n1\nSample Output 80:\n1\n\nSample Input 81:\n1\n1\nSample Output 81:\n1\n\nSample Input 82:\n1\n1\nSample Output 82:\n1\n\nSample Input 83:\n1\n1\nSample Output 83:\n1\n\nSample Input 84:\n1\n1\nSample Output 84:\n1\n\nSample Input 85:\n1\n1\nSample Output 85:\n1\n\nSample Input 86:\n1\n1\nSample Output 86:\n1\n\nSample Input 87:\n1\n1\nSample Output 87:\n1\n\nSample Input 88:\n1\n1\nSample Output 88:\n1\n\nSample Input 89:\n1\n1\nSample Output 89:\n1\n\nSample Input 90:\n1\n1\nSample Output 90:\n1\n\nSample Input 91:\n1\n1\nSample Output 91:\n1\n\nSample Input 92:\n1\n1\nSample Output 92:\n1\n\nSample Input 93:\n1\n1"
    },
    {
        "number": 3102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 10**9 + 7 == 0:\n        return str(n)\n    else:\n        return str(n % 10**9 + 7)\n\nSample Input 3:\n1 1\nSample Output 3:\n1\ndef"
    },
    {
        "number": 3103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Y, X = map(int, stdin.split())\n    if X < X:\n        X = X + 1\n    if X > X:\n        X = X - 1\n    if Y < Y:\n        Y = Y + 1\n    if Y > Y:\n        Y = Y - 1\n    if Y == 0:\n        return 'begin repairs'\n    if Y == 1:\n        return 'begin repairs'\n    if Y == 2:\n        return 'begin repairs'\n    if Y == 3:\n        return 'begin repairs'\n    if Y == 4:\n        return 'begin repairs'\n    if Y == 5:\n        return 'begin repairs'\n    if Y == 6:\n        return 'begin repairs'\n    if Y == 7:\n        return 'begin repairs'\n    if Y == 8:\n        return 'begin repairs'\n    if Y == 9:\n        return 'begin repairs'\n    if Y == 10:\n        return 'begin repairs'\n    if Y == 11:\n        return 'begin repairs'\n    if Y == 12:\n        return 'begin repairs'\n    if Y == 13:\n        return 'begin repairs'\n    if Y == 14:\n        return 'begin repairs'\n    if Y == 15:\n        return 'begin repairs'\n    if Y == 16:\n        return 'begin repairs'\n    if Y == 17:\n        return 'begin repairs'\n    if Y == 18:\n        return 'begin repairs'\n    if Y == 19:\n        return 'begin repairs'\n    if Y == 20:\n        return 'begin repairs'\n    if Y == 21:\n        return 'begin repairs'\n    if Y == 22:\n        return 'begin repairs'\n    if Y == 23:\n        return 'begin repairs'\n    if Y == 24:\n        return 'begin repairs'\n    if Y == 25:\n        return 'begin repairs'\n    if Y == 26:\n        return 'begin repairs'\n    if Y == 27:\n        return 'begin repairs'\n    if Y == 28:\n        return 'begin repairs'\n    if Y == 29:\n        return 'begin repairs'\n    if Y == 30:\n        return 'begin repairs'\n    if Y == 31:\n        return 'begin repairs'\n    if Y == 32:\n        return 'begin repairs'\n    if Y == 33:\n        return 'begin repairs'\n    if Y == 34:\n        return 'begin repairs'\n    if Y == 35:\n        return 'begin repairs'\n    if Y == 36:\n        return 'begin repairs'\n    if Y == 37:\n        return 'begin repairs'\n    if Y == 38:\n        return 'begin repairs'\n    if Y == 39:\n        return 'begin repairs'\n    if Y == 40:\n        return 'begin repairs'\n    if Y == 41:\n        return 'begin repairs'\n    if Y == 42:\n        return 'begin repairs'\n    if Y == 43:\n        return 'begin repairs'\n    if Y == 44:\n        return 'begin repairs'\n    if Y == 45:\n        return 'begin repairs'\n    if Y == 46:\n        return 'begin repairs'\n    if Y == 47:\n        return 'begin repairs'\n    if Y == 48:\n        return 'begin repairs'\n    if Y == 49:\n        return 'begin repairs'\n    if Y == 50:\n        return 'begin repairs'\n    if Y == 51:\n        return 'begin repairs'\n    if Y == 52:\n        return 'begin repairs'\n    if Y == 53:\n        return 'begin repairs'\n    if Y == 54:\n        return 'begin repairs'\n    if Y == 55:\n        return 'begin repairs'\n    if Y == 56:\n        return 'begin repairs'\n    if Y == 57:\n        return 'begin repairs'\n    if Y == 58:\n        return 'begin repairs'\n    if Y == 59:\n        return 'begin repairs'\n    if Y == 60:\n        return 'begin repairs'\n    if Y == 61:\n        return 'begin repairs'\n    if Y == 62:\n        return 'begin repairs'\n    if Y == 63:\n        return 'begin repairs'\n    if Y == 64:\n        return 'begin repairs'\n    if Y == 65:\n        return 'begin repairs'\n    if Y == 66:\n        return 'begin repairs'\n    if Y == 67:\n        return 'begin repairs'\n    if Y == 68:\n        return 'begin repairs'\n    if Y == 69:\n        return 'begin repairs'\n    if Y == 70:\n        return 'begin repairs'\n    if Y == 71:\n        return 'begin repairs'\n    if Y == 72:\n        return 'begin repairs'\n    if Y == 73:\n        return 'begin repairs'\n    if Y == 74:\n        return 'begin repairs'\n    if Y == 75:\n        return 'begin repairs'\n    if Y == 76:\n        return 'begin repairs'\n    if Y == 77:\n        return 'begin repairs'\n    if Y == 78:\n        return 'begin repairs'\n    if Y == 79:\n        return 'begin repairs'\n    if Y == 80:\n        return 'begin repairs'\n    if Y == 81:\n        return 'begin repairs'\n    if Y == 82:\n        return 'begin repairs'\n    if Y == 83:\n        return 'begin repairs'\n    if Y == 84:\n        return 'begin repairs'\n    if Y == 85:\n        return 'begin repairs'\n    if Y == 86:\n        return 'begin repairs'"
    },
    {
        "number": 3104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 0:\n        return ''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127:\n        return '127'\n    if n == 128:\n        return '128'\n    if n == 129:\n        return '129'\n    if n == 130:\n        return '130'\n    if n == 131:\n        return '131'\n    if n == 132:\n        return '132'\n    if n == 133:\n        return '133'\n    if n == 134:\n        return '134'"
    },
    {
        "number": 3105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '2'\n    if n == 4:\n        return '3'\n    if n == 5:\n        return '4'\n    if n == 6:\n        return '5'\n    if n == 7:\n        return '6'\n    if n == 8:\n        return '7'\n    if n == 9:\n        return '8'\n    if n == 10:\n        return '9'\n    if n == 11:\n        return '10'\n    if n == 12:\n        return '11'\n    if n == 13:\n        return '12'\n    if n == 14:\n        return '13'\n    if n == 15:\n        return '14'\n    if n == 16:\n        return '15'\n    if n == 17:\n        return '16'\n    if n == 18:\n        return '17'\n    if n == 19:\n        return '18'\n    if n == 20:\n        return '19'\n    if n == 21:\n        return '20'\n    if n == 22:\n        return '21'\n    if n == 23:\n        return '22'\n    if n == 24:\n        return '23'\n    if n == 25:\n        return '24'\n    if n == 26:\n        return '25'\n    if n == 27:\n        return '26'\n    if n == 28:\n        return '27'\n    if n == 29:\n        return '28'\n    if n == 30:\n        return '29'\n    if n == 31:\n        return '30'\n    if n == 32:\n        return '31'\n    if n == 33:\n        return '32'\n    if n == 34:\n        return '33'\n    if n == 35:\n        return '34'\n    if n == 36:\n        return '35'\n    if n == 37:\n        return '36'\n    if n == 38:\n        return '37'\n    if n == 39:\n        return '38'\n    if n == 40:\n        return '39'\n    if n == 41:\n        return '40'\n    if n == 42:\n        return '41'\n    if n == 43:\n        return '42'\n    if n == 44:\n        return '43'\n    if n == 45:\n        return '44'\n    if n == 46:\n        return '45'\n    if n == 47:\n        return '46'\n    if n == 48:\n        return '47'\n    if n == 49:\n        return '48'\n    if n == 50:\n        return '49'\n    if n == 51:\n        return '50'\n    if n == 52:\n        return '51'\n    if n == 53:\n        return '52'\n    if n == 54:\n        return '53'\n    if n == 55:\n        return '54'\n    if n == 56:\n        return '55'\n    if n == 57:\n        return '56'\n    if n == 58:\n        return '57'\n    if n == 59:\n        return '58'\n    if n == 60:\n        return '59'\n    if n == 61:\n        return '60'\n    if n == 62:\n        return '61'\n    if n == 63:\n        return '62'\n    if n == 64:\n        return '63'\n    if n == 65:\n        return '64'\n    if n == 66:\n        return '65'\n    if n == 67:\n        return '66'\n    if n == 68:\n        return '67'\n    if n == 69:\n        return '68'\n    if n == 70:\n        return '69'\n    if n == 71:\n        return '70'\n    if n == 72:\n        return '71'\n    if n == 73:\n        return '72'\n    if n == 74:\n        return '73'\n    if n == 75:\n        return '74'\n    if n == 76:\n        return '75'\n    if n == 77:\n        return '76'\n    if n == 78:\n        return '77'\n    if n == 79:\n        return '78'\n    if n == 80:\n        return '79'\n    if n == 81:\n        return '80'\n    if n == 82:\n        return '81'\n    if n == 83:\n        return '82'\n    if n == 84:\n        return '83'\n    if n == 85:\n        return '84'\n    if n == 86:\n        return '85'\n    if n == 87:\n        return '86'\n    if n == 88:\n        return '87'\n    if n == 89:\n        return '88'\n    if n == 90:\n        return '89'\n    if n == 91:\n        return '90'\n    if n == 92:\n        return '91'\n    if n == 93:\n        return '92'\n    if n == 94:\n        return '93'\n    if n == 95:\n        return '94'\n    if n == 96:\n        return '95'\n    if n == 97:\n        return '96'\n    if n == 98:\n        return '97'\n    if n == 99:\n        return '98'\n    if n == 100:\n        return '99'\n    if n == 101:\n        return '100'\n    if n == 102:\n        return '101'\n    if n == 103:\n        return '102'\n    if n == 104:\n        return '103'\n    if n == 105:\n        return '104'\n    if n == 106:\n        return '105'\n    if n == 107:\n        return '106'\n    if n == 108:\n        return '107'\n    if n == 109:\n        return '108'\n    if n == 110:\n        return '109'\n    "
    },
    {
        "number": 3106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lights = [0] * n\n    for i in range(n):\n        lights[i] = int(stdin[i])\n    \n    answer = 0\n    for i in range(n):\n        if lights[i] == 1:\n            answer += 1\n            for j in range(i+1, n):\n                if lights[j] == 1:\n                    answer += 1\n    return str(answer)\n\nSample Input 3:\n1\nSample Output 3:\n1\ndef"
    },
    {
        "number": 3107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    ans = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] == B[j]:\n                ans += 1\n    return str(ans)\n\n-----Examples-----\nSample Input 1:\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\nSample Output 1:\n3\ndef"
    },
    {
        "number": 3108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    a = a[:k]\n    a = a[::-1]\n    a = sum(a) / k\n    return str(a)\n\nSample Input 3:\n4 2\n2 4 3 4\nSample Output 3:\n3.333333\ndef"
    },
    {
        "number": 3109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, w, h = map(int, stdin.split())\n    min_v, max_v = map(int, stdin.split())\n    min_x, max_x = map(int, stdin.split())\n    min_j = min_x + (max_x - min_x) / 2\n    max_j = min_j + (max_x - min_x) / 2\n    min_i = min_j + (max_j - min_j) / 2\n    max_i = min_i + (max_j - min_j) / 2\n    min_dist = w * h\n    max_dist = w * h\n    for i in range(n):\n        for j in range(m):\n            min_v = min(min_v, w * h - min_dist)\n            max_v = max(max_v, w * h - max_dist)\n            min_x = min(min_x, w * h - min_dist)\n            max_x = max(max_x, w * h - max_dist)\n            min_j = min(min_j, w * h - min_dist)\n            max_j = max(max_j, w * h - max_dist)\n            min_i = min(min_i, w * h - min_dist)\n            max_i = max(max_i, w * h - max_dist)\n            min_dist = min(min_dist, w * h - min_dist)\n            max_dist = max(max_dist, w * h - max_dist)\n    return str(round(min_v - max_v, 3)) + \" \" + str(round(min_x - max_x, 3)) + \" \" + str(round(min_j - max_j, 3)) + \" \" + str(round(min_i - max_i, 3)) + \" \" + str(round(min_dist, 3)) + \" \" + str(round(max_dist, 3))\n"
    },
    {
        "number": 3110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    grid = [list(map(int, input().split())) for _ in range(m)]\n    \n    def get_code(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j])\n        return code\n    \n    def get_code_sum(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] * (i + 1) + j * (j + 1))\n        return sum(code)\n    \n    def get_code_diff(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1])\n        return sum(code)\n    \n    def get_code_quotient(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] // (i + 1) * (j + 1))\n        return sum(code)\n    \n    def get_code_product(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] * (i + 1) + j * (j + 1))\n        return sum(code)\n    \n    def get_code_sum_diff(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1] + grid[i][j])\n        return sum(code)\n    \n    def get_code_diff_quotient(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1] // (i + 1) * (j + 1))\n        return sum(code)\n    \n    def get_code_product_diff(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1] // (i + 1) * (j + 1) - grid[i][j])\n        return sum(code)\n    \n    def get_code_sum_diff_quotient(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1] // (i + 1) * (j + 1) - grid[i][j])\n        return sum(code)\n    \n    def get_code_diff_quotient_product(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1] // (i + 1) * (j + 1) - grid[i][j])\n        return sum(code)\n    \n    def get_code_product_diff_quotient(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1] // (i + 1) * (j + 1) - grid[i][j])\n        return sum(code)\n    \n    def get_code_sum_diff_quotient_product(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1] // (i + 1) * (j + 1) - grid[i][j])\n        return sum(code)\n    \n    def get_code_diff_quotient_product_diff(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1] // (i + 1) * (j + 1) - grid[i][j])\n        return sum(code)\n    \n    def get_code_product_diff_quotient_product(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1] // (i + 1) * (j + 1) - grid[i][j])\n        return sum(code)\n    \n    def get_code_sum_diff_quotient_product_diff(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1] // (i + 1) * (j + 1) - grid[i][j])\n        return sum(code)\n    \n    def get_code_diff_quotient_product_diff_quotient(row, col):\n        code = []\n        for i in range(row):\n            for j in range(col):\n                code.append(grid[i][j] - grid[i][j - 1] - grid[i][j + 1"
    },
    {
        "number": 3111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A, B = map(int, stdin.split())\n    \n    def solve(A, B):\n        if A == B:\n            return A\n        \n        if A < B:\n            return solve(A, B-1)\n        else:\n            return solve(A+1, B)\n    \n    return solve(A, M)\n\n-----Constraints-----\n1 <= N <= 100000\n1 <= M <= 100000\n\n-----Time Limit: 1 sec\n-----Space Limit: 1 sec\n\nhttps://www.codewars.com/kata/5f8e9f9e9f9b9b9b9b/train/python\n"
    },
    {
        "number": 3112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    conveyor_belt = [list(map(int, input().split())) for _ in range(N)]\n    producers = [list(map(int, input().split())) for _ in range(M)]\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x[0])\n    producers = sorted(producers, key=lambda x: x[1])\n    producers = sorted(producers, key=lambda x: x["
    },
    {
        "number": 3113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    x, y = x - 1, y - 1\n    if n == m:\n        return 'yes'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n        return 'no'\n    if n == m:\n"
    },
    {
        "number": 3114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X, Y = map(int, stdin.split())\n    if M == 1:\n        if X == Y:\n            return 'YES'\n        else:\n            return 'NO'\n    if M == 2:\n        if X == Y:\n            return 'YES'\n        else:\n            return 'NO'\n    if M == 3:\n        if X == Y:\n            return 'YES'\n        else:\n            return 'NO'\n    if M == 4:\n        if X == Y:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 3115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = M\n    L = N\n    if K > L:\n        K, L = L, K\n    if K == 0:\n        return 'inconsistent'\n    if K == 1:\n        return 'consistent'\n    if K == 2:\n        return 'consistent'\n    if K == 3:\n        return 'consistent'\n    if K == 4:\n        return 'consistent'\n    if K == 5:\n        return 'inconsistent'\n    if K == 6:\n        return 'inconsistent'\n    if K == 7:\n        return 'inconsistent'\n    if K == 8:\n        return 'inconsistent'\n    if K == 9:\n        return 'inconsistent'\n    if K == 10:\n        return 'inconsistent'\n    if K == 11:\n        return 'inconsistent'\n    if K == 12:\n        return 'inconsistent'\n    if K == 13:\n        return 'inconsistent'\n    if K == 14:\n        return 'inconsistent'\n    if K == 15:\n        return 'inconsistent'\n    if K == 16:\n        return 'inconsistent'\n    if K == 17:\n        return 'inconsistent'\n    if K == 18:\n        return 'inconsistent'\n    if K == 19:\n        return 'inconsistent'\n    if K == 20:\n        return 'inconsistent'\n    if K == 21:\n        return 'inconsistent'\n    if K == 22:\n        return 'inconsistent'\n    if K == 23:\n        return 'inconsistent'\n    if K == 24:\n        return 'inconsistent'\n    if K == 25:\n        return 'inconsistent'\n    if K == 26:\n        return 'inconsistent'\n    if K == 27:\n        return 'inconsistent'\n    if K == 28:\n        return 'inconsistent'\n    if K == 29:\n        return 'inconsistent'\n    if K == 30:\n        return 'inconsistent'\n    if K == 31:\n        return 'inconsistent'\n    if K == 32:\n        return 'inconsistent'\n    if K == 33:\n        return 'inconsistent'\n    if K == 34:\n        return 'inconsistent'\n    if K == 35:\n        return 'inconsistent'\n    if K == 36:\n        return 'inconsistent'\n    if K == 37:\n        return 'inconsistent'\n    if K == 38:\n        return 'inconsistent'\n    if K == 39:\n        return 'inconsistent'\n    if K == 40:\n        return 'inconsistent'\n    if K == 41:\n        return 'inconsistent'\n    if K == 42:\n        return 'inconsistent'\n    if K == 43:\n        return 'inconsistent'\n    if K == 44:\n        return 'inconsistent'\n    if K == 45:\n        return 'inconsistent'\n    if K == 46:\n        return 'inconsistent'\n    if K == 47:\n        return 'inconsistent'\n    if K == 48:\n        return 'inconsistent'\n    if K == 49:\n        return 'inconsistent'\n    if K == 50:\n        return 'inconsistent'\n    if K == 51:\n        return 'inconsistent'\n    if K == 52:\n        return 'inconsistent'\n    if K == 53:\n        return 'inconsistent'\n    if K == 54:\n        return 'inconsistent'\n    if K == 55:\n        return 'inconsistent'\n    if K == 56:\n        return 'inconsistent'\n    if K == 57:\n        return 'inconsistent'\n    if K == 58:\n        return 'inconsistent'\n    if K == 59:\n        return 'inconsistent'\n    if K == 60:\n        return 'inconsistent'\n    if K == 61:\n        return 'inconsistent'\n    if K == 62:\n        return 'inconsistent'\n    if K == 63:\n        return 'inconsistent'\n    if K == 64:\n        return 'inconsistent'\n    if K == 65:\n        return 'inconsistent'\n    if K == 66:\n        return 'inconsistent'\n    if K == 67:\n        return 'inconsistent'\n    if K == 68:\n        return 'inconsistent'\n    if K == 69:\n        return 'inconsistent'\n    if K == 70:\n        return 'inconsistent'\n    if K == 71:\n        return 'inconsistent'\n    if K == 72:\n        return 'inconsistent'\n    if K == 73:\n        return 'inconsistent'\n    if K == 74:\n        return 'inconsistent'\n    if K == 75:\n        return 'inconsistent'\n    if K == 76:\n        return 'inconsistent'\n    if K == 77:\n        return 'inconsistent'\n    if K == 78:\n        return 'inconsistent'\n    if K == 79:\n        return 'inconsistent'\n    if K == 80:\n        return 'inconsistent'\n    if K == 81:\n        return 'inconsistent'\n    if K == 82:\n        return 'inconsistent'\n    if K == 83:\n        return 'inconsistent'\n    if K == 84:\n        return 'inconsistent'\n    if K == 85:\n        return 'inconsistent'\n    if K == 86:\n        return 'inconsistent'\n    if K == 87:\n        return 'inconsistent'\n    if K == 88:\n        return 'inconsistent'\n    if K == 89:\n        return 'inconsistent'\n    if K == 90:\n        return 'inconsistent'\n    if K == 91:\n        return 'inconsistent'\n    if K == 92:\n        return 'inconsistent'\n    if K == 93:\n        return 'inconsistent'\n    if K == 94:\n        return 'inconsistent'\n    if K == 95:\n        return 'inconsistent'\n    if K == 96:\n        return 'inconsistent'\n    if K == 97:\n        return 'inconsistent'\n    if K == 98:\n        return 'inconsistent'\n    if K =="
    },
    {
        "number": 3116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    y = list(map(int, stdin.strip().split()))\n    z = list(map(int, stdin.strip().split()))\n    \n    x.sort()\n    y.sort()\n    z.sort()\n    \n    volume = 0\n    for i in range(n):\n        volume += (x[i]**2 + y[i]**2 + z[i]**2)**0.5\n    \n    return str(volume)\n\ndef"
    },
    {
        "number": 3117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    l = len(s)\n    if l == 0:\n        return 0\n    if l == 1:\n        return 1\n    if l == 2:\n        return 2\n    if l == 3:\n        return 3\n    if l == 4:\n        return 4\n    if l == 5:\n        return 5\n    if l == 6:\n        return 6\n    if l == 7:\n        return 7\n    if l == 8:\n        return 8\n    if l == 9:\n        return 9\n    if l == 10:\n        return 10\n    if l == 11:\n        return 11\n    if l == 12:\n        return 12\n    if l == 13:\n        return 13\n    if l == 14:\n        return 14\n    if l == 15:\n        return 15\n    if l == 16:\n        return 16\n    if l == 17:\n        return 17\n    if l == 18:\n        return 18\n    if l == 19:\n        return 19\n    if l == 20:\n        return 20\n    if l == 21:\n        return 21\n    if l == 22:\n        return 22\n    if l == 23:\n        return 23\n    if l == 24:\n        return 24\n    if l == 25:\n        return 25\n    if l == 26:\n        return 26\n    if l == 27:\n        return 27\n    if l == 28:\n        return 28\n    if l == 29:\n        return 29\n    if l == 30:\n        return 30\n    if l == 31:\n        return 31\n    if l == 32:\n        return 32\n    if l == 33:\n        return 33\n    if l == 34:\n        return 34\n    if l == 35:\n        return 35\n    if l == 36:\n        return 36\n    if l == 37:\n        return 37\n    if l == 38:\n        return 38\n    if l == 39:\n        return 39\n    if l == 40:\n        return 40\n    if l == 41:\n        return 41\n    if l == 42:\n        return 42\n    if l == 43:\n        return 43\n    if l == 44:\n        return 44\n    if l == 45:\n        return 45\n    if l == 46:\n        return 46\n    if l == 47:\n        return 47\n    if l == 48:\n        return 48\n    if l == 49:\n        return 49\n    if l == 50:\n        return 50\n    if l == 51:\n        return 51\n    if l == 52:\n        return 52\n    if l == 53:\n        return 53\n    if l == 54:\n        return 54\n    if l == 55:\n        return 55\n    if l == 56:\n        return 56\n    if l == 57:\n        return 57\n    if l == 58:\n        return 58\n    if l == 59:\n        return 59\n    if l == 60:\n        return 60\n    if l == 61:\n        return 61\n    if l == 62:\n        return 62\n    if l == 63:\n        return 63\n    if l == 64:\n        return 64\n    if l == 65:\n        return 65\n    if l == 66:\n        return 66\n    if l == 67:\n        return 67\n    if l == 68:\n        return 68\n    if l == 69:\n        return 69\n    if l == 70:\n        return 70\n    if l == 71:\n        return 71\n    if l == 72:\n        return 72\n    if l == 73:\n        return 73\n    if l == 74:\n        return 74\n    if l == 75:\n        return 75\n    if l == 76:\n        return 76\n    if l == 77:\n        return 77\n    if l == 78:\n        return 78\n    if l == 79:\n        return 79\n    if l == 80:\n        return 80\n    if l == 81:\n        return 81\n    if l == 82:\n        return 82\n    if l == 83:\n        return 83\n    if l == 84:\n        return 84\n    if l == 85:\n        return 85\n    if l == 86:\n        return 86\n    if l == 87:\n        return 87\n    if l == 88:\n        return 88\n    if l == 89:\n        return 89\n    if l == 90:\n        return 90\n    if l == 91:\n        return 91\n    if l == 92:\n        return 92\n    if l == 93:\n        return 93\n    if l == 94:\n        return 94\n    if l == 95:\n        return 95\n    if l == 96:\n        return 96\n    if l == 97:\n        return 97\n    if l == 98:\n        return 98\n    if l == 99:\n        return 99\n    if l == 100:\n        return 100\n    if l == 101:\n        return 101\n    if l == 102:\n        return 102\n    if l == 103:\n        return 103\n    if l == 104:\n        return 104\n    if l == 105:\n        return 105\n    if l == 106:\n        return 106\n    if l == 107:\n        return 107\n    if l == 108:\n        return 108\n    if l == 109:\n        return 109\n    if l == 110:\n        return 110\n    if l == 111:\n        return 111\n    if l == 112:\n        return 112\n    if l == 113:\n        return 113\n    if l == 114:\n        return 114\n    if l == 115:\n        return 115\n    if l == 116:\n        return 116\n    if l == 117:\n        return 117\n    if l == 118:\n        return 118\n    if l == 119:\n        return 119\n    if l == 120:\n        return 120\n    if l == 121:\n        return 121\n    if l == 122:\n        return 122\n    if l == 123:\n        return 123\n    if l == 124:\n        return 124\n    if l == 125:\n        return 125\n    if l == 126:\n        return 126\n    if l == 127:\n        return 127\n    if l == 128:\n        return 128\n    if l == 129:\n        return 129\n    if l == 130:\n        return 130\n    if l == 131:\n        return 131\n    if l == 132:\n        return 132\n    if l == 133:\n        return 133\n    if l == 134:\n        return 134\n    if l == 135:\n        return 135\n    if l == 136:\n        return 136\n    if l == 137:\n        return 137\n    if l == 138:\n        return 138\n    if l == 139:\n        return 139\n    if l == 140:\n        return 140\n    if l == 141:\n        return 141\n    if l == 142:\n        return 142\n    if l == 143:\n        return 143\n    if l == 144:\n        return 144\n    if l == 145:\n        return 145\n    if l == 146:\n        return 146\n    if l == 147:\n        return 147\n    if l == 148:\n        return 148\n    if l == 149:\n        return 149\n    if l == 150:\n        return 150\n    if l == 151:\n        return 151\n    if l == 152:\n        return 152\n    if l == 153:\n        return 153\n    if l == 154:\n        return 154\n    if l == 155:\n        return 155\n    if l == 156:\n        return 156\n    if l =="
    },
    {
        "number": 3118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    c = 0\n    for i in range(n):\n        if a[i]!= b[i]:\n            c += 1\n    return str(c)\n\ndef"
    },
    {
        "number": 3119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n    s.sort()\n    s = [0] + s\n"
    },
    {
        "number": 3120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'equal'\n"
    },
    {
        "number": 3121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    e, b, h = map(int, stdin.split())\n    \n    if n == 1 and m == 1:\n        return str(h)\n    \n    if n == 1:\n        return str(h) +'' + solution(stdin)\n    \n    if m == 1:\n        return solution(stdin) +'' + str(h)\n    \n    if e == 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin)\n    \n    if b == 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if h == 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if b == h:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == h:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b + h:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h - 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h + 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h - 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h + 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h - 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h + 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h - 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h + 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h - 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h + 1:\n        return solution(stdin) +'' + str(h) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin) +'' + solution(stdin)\n    \n    if e == b - h - 1:\n        return solution(stdin"
    },
    {
        "number": 3122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    air = [list(map(int, input().split())) for _ in range(n)]\n    air = sorted(air, key=lambda x: x[0])\n    air = sorted(air, key=lambda x: x[1])\n    air = sorted(air, key=lambda x: x[2])\n    air = sorted(air, key=lambda x: x[3])\n    air = sorted(air, key=lambda x: x[4])\n    air = sorted(air, key=lambda x: x[5])\n    air = sorted(air, key=lambda x: x[6])\n    air = sorted(air, key=lambda x: x[7])\n    air = sorted(air, key=lambda x: x[8])\n    air = sorted(air, key=lambda x: x[9])\n    air = sorted(air, key=lambda x: x[10])\n    air = sorted(air, key=lambda x: x[11])\n    air = sorted(air, key=lambda x: x[12])\n    air = sorted(air, key=lambda x: x[13])\n    air = sorted(air, key=lambda x: x[14])\n    air = sorted(air, key=lambda x: x[15])\n    air = sorted(air, key=lambda x: x[16])\n    air = sorted(air, key=lambda x: x[17])\n    air = sorted(air, key=lambda x: x[18])\n    air = sorted(air, key=lambda x: x[19])\n    air = sorted(air, key=lambda x: x[20])\n    air = sorted(air, key=lambda x: x[21])\n    air = sorted(air, key=lambda x: x[22])\n    air = sorted(air, key=lambda x: x[23])\n    air = sorted(air, key=lambda x: x[24])\n    air = sorted(air, key=lambda x: x[25])\n    air = sorted(air, key=lambda x: x[26])\n    air = sorted(air, key=lambda x: x[27])\n    air = sorted(air, key=lambda x: x[28])\n    air = sorted(air, key=lambda x: x[29])\n    air = sorted(air, key=lambda x: x[30])\n    air = sorted(air, key=lambda x: x[31])\n    air = sorted(air, key=lambda x: x[32])\n    air = sorted(air, key=lambda x: x[33])\n    air = sorted(air, key=lambda x: x[34])\n    air = sorted(air, key=lambda x: x[35])\n    air = sorted(air, key=lambda x: x[36])\n    air = sorted(air, key=lambda x: x[37])\n    air = sorted(air, key=lambda x: x[38])\n    air = sorted(air, key=lambda x: x[39])\n    air = sorted(air, key=lambda x: x[40])\n    air = sorted(air, key=lambda x: x[41])\n    air = sorted(air, key=lambda x: x[42])\n    air = sorted(air, key=lambda x: x[43])\n    air = sorted(air, key=lambda x: x[44])\n    air = sorted(air, key=lambda x: x[45])\n    air = sorted(air, key=lambda x: x[46])\n    air = sorted(air, key=lambda x: x[47])\n    air = sorted(air, key=lambda x: x[48])\n    air = sorted(air, key=lambda x: x[49])\n    air = sorted(air, key=lambda x: x[50])\n    air = sorted(air, key=lambda x: x[51])\n    air = sorted(air, key=lambda x: x[52])\n    air = sorted(air, key=lambda x: x[53])\n    air = sorted(air, key=lambda x: x[54])\n    air = sorted(air, key=lambda x: x[55])\n    air = sorted(air, key=lambda x: x[56])\n    air = sorted(air, key=lambda x: x[57])\n    air = sorted(air, key=lambda x: x[58])\n    air = sorted(air, key=lambda x: x[59])\n    air = sorted(air, key=lambda x: x[60])\n    air = sorted(air, key=lambda x: x[61])\n    air = sorted(air, key=lambda x: x[62])\n    air = sorted(air, key=lambda x: x[63])\n    air = sorted(air, key=lambda x: x[64])\n    air = sorted(air, key=lambda x: x[65])\n    air = sorted(air, key=lambda x: x[66])\n    air = sorted(air, key=lambda x: x[67])\n    air = sorted(air, key=lambda x: x[68])\n    air = sorted(air, key=lambda x: x[69])\n    air = sorted(air, key=lambda x: x[70])\n    air = sorted(air, key=lambda x: x[71])\n    air = sorted(air, key=lambda x: x[72])\n    air = sorted(air, key=lambda x: x[73])\n    air = sorted(air, key=lambda x: x[74])\n    air = sorted(air, key=lambda x: x[75])\n    air = sorted(air, key=lambda x: x[76])\n    air = sorted(air, key=lambda x: x[77])\n    air = sorted(air, key=lambda x: x[78])\n    air = sorted(air, key=lambda x: x[79])\n    air = sorted(air, key=lambda x: x[80])\n    air = sorted(air, key=lambda x: x[81])\n    air = sorted(air, key=lambda x: x[82])\n    air = sorted(air, key=lambda x: x[83])\n    air = sorted(air, key=lambda x: x[84])\n    air = sorted(air, key=lambda x: x[85])\n    air = sorted(air, key=lambda x: x[86])\n    air = sorted(air, key=lambda x: x"
    },
    {
        "number": 3123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '22'\n    if n == 3:\n        return '333'\n    if n == 4:\n        return '4444'\n    if n == 5:\n        return '5555'\n    if n == 6:\n        return '6666'\n    if n == 7:\n        return '7777'\n    if n == 8:\n        return '8888'\n    if n == 9:\n        return '9999'\n    if n == 10:\n        return '10000'\n    if n == 11:\n        return '11111'\n    if n == 12:\n        return '12121'\n    if n == 13:\n        return '13131'\n    if n == 14:\n        return '14141'\n    if n == 15:\n        return '15151'\n    if n == 16:\n        return '16161'\n    if n == 17:\n        return '17161'\n    if n == 18:\n        return '18161'\n    if n == 19:\n        return '19161'\n    if n == 20:\n        return '20161'\n    if n == 21:\n        return '21161'\n    if n == 22:\n        return '22161'\n    if n == 23:\n        return '23161'\n    if n == 24:\n        return '24161'\n    if n == 25:\n        return '25161'\n    if n == 26:\n        return '26161'\n    if n == 27:\n        return '27161'\n    if n == 28:\n        return '28161'\n    if n == 29:\n        return '29161'\n    if n == 30:\n        return '30161'\n    if n == 31:\n        return '31161'\n    if n == 32:\n        return '32161'\n    if n == 33:\n        return '33161'\n    if n == 34:\n        return '34161'\n    if n == 35:\n        return '35161'\n    if n == 36:\n        return '36161'\n    if n == 37:\n        return '37161'\n    if n == 38:\n        return '38161'\n    if n == 39:\n        return '39161'\n    if n == 40:\n        return '40161'\n    if n == 41:\n        return '41161'\n    if n == 42:\n        return '42161'\n    if n == 43:\n        return '43161'\n    if n == 44:\n        return '44161'\n    if n == 45:\n        return '45161'\n    if n == 46:\n        return '46161'\n    if n == 47:\n        return '47161'\n    if n == 48:\n        return '48161'\n    if n == 49:\n        return '49161'\n    if n == 50:\n        return '50161'\n    if n == 51:\n        return '51161'\n    if n == 52:\n        return '52161'\n    if n == 53:\n        return '53161'\n    if n == 54:\n        return '54161'\n    if n == 55:\n        return '55161'\n    if n == 56:\n        return '56161'\n    if n == 57:\n        return '57161'\n    if n == 58:\n        return '58161'\n    if n == 59:\n        return '59161'\n    if n == 60:\n        return '60161'\n    if n == 61:\n        return '61161'\n    if n == 62:\n        return '62161'\n    if n == 63:\n        return '63161'\n    if n == 64:\n        return '64161'\n    if n == 65:\n        return '65161'\n    if n == 66:\n        return '66161'\n    if n == 67:\n        return '67161'\n    if n == 68:\n        return '68161'\n    if n == 69:\n        return '69161'\n    if n == 70:\n        return '70161'\n    if n == 71:\n        return '71161'\n    if n == 72:\n        return '72161'\n    if n == 73:\n        return '73161'\n    if n == 74:\n        return '74161'\n    if n == 75:\n        return '75161'\n    if n == 76:\n        return '76161'\n    if n == 77:\n        return '77161'\n    if n == 78:\n        return '78161'\n    if n == 79:\n        return '79161'\n    if n == 80:\n        return '80161'\n    if n == 81:\n        return '81161'\n    if n == 82:\n        return '82161'\n    if n == 83:\n        return '83161'\n    if n == 84:\n        return '84161'\n    if n == 85:\n        return '85161'\n    if n == 86:\n        return '86161'\n    if n == 87:\n        return '87161'\n    if n == 88:\n        return '88161'\n    if n == 89:\n        return '89161'\n    if n == 90:\n        return '90161'\n    if n == 91:\n        return '91161'\n    if n == 92:\n        return '92161'\n    if n == 93:\n        return '93161'\n    if n == 94:\n        return '94161'\n    if n == 95:\n        return '95161'\n    if n == 96:\n        return '96161'\n    if n == 97:\n        return '97161'\n    if n == 98:\n        return '98161'\n    if n == 99:\n        return '99161'\n    if n == 100:\n        return '100161'\n    if n == 101:\n        return '101161'\n    if n == 102:\n        return '102161'\n    if n == 103:\n        return '103161'\n    if n == 104:\n        return '104161'\n    if n == 105:\n        return '105161'\n    if n == 106:\n        return '106161'\n    if n == 107:\n        return '107161'\n    if n == 108:\n        return '108161'\n    if n == 109:\n        return '109161'\n    if n == 110:\n        return '110161'\n    if n == 111:\n        return"
    },
    {
        "number": 3124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    nums.sort()\n    answer = 0\n    for i in range(n):\n        if i % 2 == 0:\n            answer += nums[i]\n        else:\n            answer += nums[i] * 2\n    return str(answer)\n\n-----Constraints-----\n1 <= N <= 100\n1 <= N \\leq 1000\n\n-----Time Limit-----\n1 minute\n\n-----Space Limit-----\n1\n\n-----Bug alert: If you get stuck, contact your instructor.-----\n"
    },
    {
        "number": 3125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in stdin:\n        if i == '+':\n            answer += '+'\n        elif i == '-':\n            answer += '-'\n        elif i == '*':\n            answer += '*'\n        elif i == '.':\n            answer += '.'\n        else:\n            answer += i\n    return answer\n\nSample Input 3:\na+b+c\na+b+c+d\nSample Output 3:\n+d+\n\nSample Input 4:\na+b+c+d\na+b+c+d+e\nSample Output 4:\n+d+e+\n\nSample Input 5:\na+b+c+d+e\na+b+c+d+e+f\nSample Output 5:\n+d+e+f\n\nSample Input 6:\na+b+c+d+e+f\na+b+c+d+e+f+g\nSample Output 6:\n+d+e+f+g\n\nSample Input 7:\na+b+c+d+e+f+g\na+b+c+d+e+f+g+h\nSample Output 7:\n+d+e+f+g+h\n\nSample Input 8:\na+b+c+d+e+f+g+h\na+b+c+d+e+f+g+h+i\nSample Output 8:\n+d+e+f+g+h+i\n\nSample Input 9:\na+b+c+d+e+f+g+h+i\na+b+c+d+e+f+g+h+i+j\nSample Output 9:\n+d+e+f+g+h+i+j\n\nSample Input 10:\na+b+c+d+e+f+g+h+i+j\na+b+c+d+e+f+g+h+i+j+k\nSample Output 10:\n+d+e+f+g+h+i+j+k\n\nSample Input 11:\na+b+c+d+e+f+g+h+i+j+k\na+b+c+d+e+f+g+h+i+j+k+l\nSample Output 11:\n+d+e+f+g+h+i+j+k+l\n\nSample Input 12:\na+b+c+d+e+f+g+h+i+j+k+l\na+b+c+d+e+f+g+h+i+j+k+l+m\nSample Output 12:\n+d+e+f+g+h+i+j+k+l+m\n\nSample Input 13:\na+b+c+d+e+f+g+h+i+j+k+l+m\na+b+c+d+e+f+g+h+i+j+k+l+m+n\nSample Output 13:\n+d+e+f+g+h+i+j+k+l+m+n\n\nSample Input 14:\na+b+c+d+e+f+g+h+i+j+k+l+m+n\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o\nSample Output 14:\n+d+e+f+g+h+i+j+k+l+m+n+o\n\nSample Input 15:\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p\nSample Output 15:\n+d+e+f+g+h+i+j+k+l+m+n+o+p\n\nSample Input 16:\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q\nSample Output 16:\n+d+e+f+g+h+i+j+k+l+m+n+o+p+q\n\nSample Input 17:\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r\nSample Output 17:\n+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r\n\nSample Input 18:\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s\nSample Output 18:\n+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s\n\nSample Input 19:\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t\nSample Output 19:\n+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t\n\nSample Input 20:\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u\nSample Output 20:\n+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u\n\nSample Input 21:\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u\na+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+t\nSample Output 21:\n+d+"
    },
    {
        "number": 3126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    answer = 0\n    for i in range(n):\n        if t[i] == p:\n            answer += 1\n    return str(answer)\n\n-----Constraints-----\n1 <= n <= 10^6\n1 <= p <= 10^6\n0 <= t[i] <= 10^6\n\n-----Time Limit: 1.0s (S)\n-----Memory Limit: 10^9 (S)\n"
    },
    {
        "number": 3127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cable = [list(map(int, input().split())) for _ in range(n)]\n    switch = [list(map(int, input().split())) for _ in range(m)]\n    switch = sorted(switch, key=lambda x: x[0])\n    switch = sorted(switch, key=lambda x: x[1])\n    switch = sorted(switch, key=lambda x: x[2])\n    switch = sorted(switch, key=lambda x: x[3])\n    switch = sorted(switch, key=lambda x: x[4])\n    switch = sorted(switch, key=lambda x: x[5])\n    switch = sorted(switch, key=lambda x: x[6])\n    switch = sorted(switch, key=lambda x: x[7])\n    switch = sorted(switch, key=lambda x: x[8])\n    switch = sorted(switch, key=lambda x: x[9])\n    switch = sorted(switch, key=lambda x: x[10])\n    switch = sorted(switch, key=lambda x: x[11])\n    switch = sorted(switch, key=lambda x: x[12])\n    switch = sorted(switch, key=lambda x: x[13])\n    switch = sorted(switch, key=lambda x: x[14])\n    switch = sorted(switch, key=lambda x: x[15])\n    switch = sorted(switch, key=lambda x: x[16])\n    switch = sorted(switch, key=lambda x: x[17])\n    switch = sorted(switch, key=lambda x: x[18])\n    switch = sorted(switch, key=lambda x: x[19])\n    switch = sorted(switch, key=lambda x: x[20])\n    switch = sorted(switch, key=lambda x: x[21])\n    switch = sorted(switch, key=lambda x: x[22])\n    switch = sorted(switch, key=lambda x: x[23])\n    switch = sorted(switch, key=lambda x: x[24])\n    switch = sorted(switch, key=lambda x: x[25])\n    switch = sorted(switch, key=lambda x: x[26])\n    switch = sorted(switch, key=lambda x: x[27])\n    switch = sorted(switch, key=lambda x: x[28])\n    switch = sorted(switch, key=lambda x: x[29])\n    switch = sorted(switch, key=lambda x: x[30])\n    switch = sorted(switch, key=lambda x: x[31])\n    switch = sorted(switch, key=lambda x: x[32])\n    switch = sorted(switch, key=lambda x: x[33])\n    switch = sorted(switch, key=lambda x: x[34])\n    switch = sorted(switch, key=lambda x: x[35])\n    switch = sorted(switch, key=lambda x: x[36])\n    switch = sorted(switch, key=lambda x: x[37])\n    switch = sorted(switch, key=lambda x: x[38])\n    switch = sorted(switch, key=lambda x: x[39])\n    switch = sorted(switch, key=lambda x: x[40])\n    switch = sorted(switch, key=lambda x: x[41])\n    switch = sorted(switch, key=lambda x: x[42])\n    switch = sorted(switch, key=lambda x: x[43])\n    switch = sorted(switch, key=lambda x: x[44])\n    switch = sorted(switch, key=lambda x: x[45])\n    switch = sorted(switch, key=lambda x: x[46])\n    switch = sorted(switch, key=lambda x: x[47])\n    switch = sorted(switch, key=lambda x: x[48])\n    switch = sorted(switch, key=lambda x: x[49])\n    switch = sorted(switch, key=lambda x: x[50])\n    switch = sorted(switch, key=lambda x: x[51])\n    switch = sorted(switch, key=lambda x: x[52])\n    switch = sorted(switch, key=lambda x: x[53])\n    switch = sorted(switch, key=lambda x: x[54])\n    switch = sorted(switch, key=lambda x: x[55])\n    switch = sorted(switch, key=lambda x: x[56])\n    switch = sorted(switch, key=lambda x: x[57])\n    switch = sorted(switch, key=lambda x: x[58])\n    switch = sorted(switch, key=lambda x: x[59])\n    switch = sorted(switch, key=lambda x: x[60])\n    switch = sorted(switch, key=lambda x: x[61])\n    switch = sorted(switch, key=lambda x: x[62])\n    switch = sorted(switch, key=lambda x: x[63])\n    switch = sorted(switch, key=lambda x: x[64])\n    switch = sorted(switch, key=lambda x: x[65])\n    switch = sorted(switch, key=lambda x: x[66])\n    switch = sorted(switch, key=lambda x: x[67])\n    switch = sorted(switch, key=lambda x: x[68])\n    switch = sorted(switch, key=lambda x: x[69])\n    switch = sorted(switch, key=lambda x: x[70])\n    switch = sorted(switch, key=lambda x: x[71])\n    switch = sorted(switch, key=lambda x: x[72])\n    switch = sorted(switch, key=lambda x: x[73])\n    switch = sorted(switch, key=lambda x: x[74])\n    switch = sorted(switch, key=lambda x: x["
    },
    {
        "number": 3128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = n\n    q = 1\n    while m > 0:\n        if q == 1:\n            m -= 1\n            q = 2\n        elif q == 2:\n            m -= 1\n            q = 1\n        else:\n            m -= 1\n            q = 1\n    return str(m)\n"
    },
    {
        "number": 3129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seq = list(stdin.strip())\n    seq.sort()\n    count = 0\n    for i in range(n):\n        if seq[i] == 'C':\n            count += 1\n        elif seq[i] == 'P':\n            count -= 1\n        if count < 0:\n            return '0'\n    return str(count)\n\n-----Constraints-----\n1 <= n <= 500\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 GB\n"
    },
    {
        "number": 3130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, M, N = map(int, stdin.split())\n    events = []\n    for _ in range(N):\n        events.append(list(map(int, stdin.split())))\n    \n    events.sort(key=lambda x: x[0])\n    \n    for i in range(N):\n        if events[i][0] == 1:\n            events[i][0] = 2\n        else:\n            events[i][0] = 3\n    \n    for i in range(N):\n        if events[i][1] == 1:\n            events[i][1] = 2\n        else:\n            events[i][1] = 3\n    \n    for i in range(N):\n        if events[i][2] == 1:\n            events[i][2] = 2\n        else:\n            events[i][2] = 3\n    \n    for i in range(N):\n        if events[i][3] == 1:\n            events[i][3] = 2\n        else:\n            events[i][3] = 3\n    \n    for i in range(N):\n        if events[i][4] == 1:\n            events[i][4] = 2\n        else:\n            events[i][4] = 3\n    \n    for i in range(N):\n        if events[i][5] == 1:\n            events[i][5] = 2\n        else:\n            events[i][5] = 3\n    \n    for i in range(N):\n        if events[i][6] == 1:\n            events[i][6] = 2\n        else:\n            events[i][6] = 3\n    \n    for i in range(N):\n        if events[i][7] == 1:\n            events[i][7] = 2\n        else:\n            events[i][7] = 3\n    \n    for i in range(N):\n        if events[i][8] == 1:\n            events[i][8] = 2\n        else:\n            events[i][8] = 3\n    \n    for i in range(N):\n        if events[i][9] == 1:\n            events[i][9] = 2\n        else:\n            events[i][9] = 3\n    \n    for i in range(N):\n        if events[i][10] == 1:\n            events[i][10] = 2\n        else:\n            events[i][10] = 3\n    \n    for i in range(N):\n        if events[i][11] == 1:\n            events[i][11] = 2\n        else:\n            events[i][11] = 3\n    \n    for i in range(N):\n        if events[i][12] == 1:\n            events[i][12] = 2\n        else:\n            events[i][12] = 3\n    \n    for i in range(N):\n        if events[i][13] == 1:\n            events[i][13] = 2\n        else:\n            events[i][13] = 3\n    \n    for i in range(N):\n        if events[i][14] == 1:\n            events[i][14] = 2\n        else:\n            events[i][14] = 3\n    \n    for i in range(N):\n        if events[i][15] == 1:\n            events[i][15] = 2\n        else:\n            events[i][15] = 3\n    \n    for i in range(N):\n        if events[i][16] == 1:\n            events[i][16] = 2\n        else:\n            events[i][16] = 3\n    \n    for i in range(N):\n        if events[i][17] == 1:\n            events[i][17] = 2\n        else:\n            events[i][17] = 3\n    \n    for i in range(N):\n        if events[i][18] == 1:\n            events[i][18] = 2\n        else:\n            events[i][18] = 3\n    \n    for i in range(N):\n        if events[i][19] == 1:\n            events[i][19] = 2\n        else:\n            events[i][19] = 3\n    \n    for i in range(N):\n        if events[i][20] == 1:\n            events[i][20] = 2\n        else:\n            events[i][20] = 3\n    \n    for i in range(N):\n        if events[i][21] == 1:\n            events[i][21] = 2\n        else:\n            events[i][21] = 3\n    \n    for i in range(N):\n        if events[i][22] == 1:\n            events[i][22] = 2\n        else:\n            events[i][22] = 3\n    \n    for"
    },
    {
        "number": 3131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()"
    },
    {
        "number": 3132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = []\n    for _ in range(R):\n        grid.append(stdin.split())\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i][j] = '.'\n            elif grid[i][j] == '.':\n                grid[i][j] = 'x'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                grid[i]["
    },
    {
        "number": 3133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    if a[0] == b[0]:\n        return 'indistinguishable'\n    if a[-1] == b[-1]:\n        return 'indistinguishable'\n    if a[0] < b[0]:\n        return 'indistinguishable'\n    if a[-1] < b[-1]:\n        return 'indistinguishable'\n    if a[0] > b[0]:\n        return 'indistinguishable'\n    if a[-1] > b[-1]:\n        return 'indistinguishable'\n    return 'indistinguishable'\n"
    },
    {
        "number": 3134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '-1'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '0'\n    if n == 3:\n        return '0'\n    if n == 4:\n        return '0'\n    if n == 5:\n        return '0'\n    if n == 6:\n        return '0'\n    if n == 7:\n        return '0'\n    if n == 8:\n        return '0'\n    if n == 9:\n        return '0'\n    if n == 10:\n        return '0'\n    if n == 11:\n        return '0'\n    if n == 12:\n        return '0'\n    if n == 13:\n        return '0'\n    if n == 14:\n        return '0'\n    if n == 15:\n        return '0'\n    if n == 16:\n        return '0'\n    if n == 17:\n        return '0'\n    if n == 18:\n        return '0'\n    if n == 19:\n        return '0'\n    if n == 20:\n        return '0'\n    if n == 21:\n        return '0'\n    if n == 22:\n        return '0'\n    if n == 23:\n        return '0'\n    if n == 24:\n        return '0'\n    if n == 25:\n        return '0'\n    if n == 26:\n        return '0'\n    if n == 27:\n        return '0'\n    if n == 28:\n        return '0'\n    if n == 29:\n        return '0'\n    if n == 30:\n        return '0'\n    if n == 31:\n        return '0'\n    if n == 32:\n        return '0'\n    if n == 33:\n        return '0'\n    if n == 34:\n        return '0'\n    if n == 35:\n        return '0'\n    if n == 36:\n        return '0'\n    if n == 37:\n        return '0'\n    if n == 38:\n        return '0'\n    if n == 39:\n        return '0'\n    if n == 40:\n        return '0'\n    if n == 41:\n        return '0'\n    if n == 42:\n        return '0'\n    if n == 43:\n        return '0'\n    if n == 44:\n        return '0'\n    if n == 45:\n        return '0'\n    if n == 46:\n        return '0'\n    if n == 47:\n        return '0'\n    if n == 48:\n        return '0'\n    if n == 49:\n        return '0'\n    if n == 50:\n        return '0'\n    if n == 51:\n        return '0'\n    if n == 52:\n        return '0'\n    if n == 53:\n        return '0'\n    if n == 54:\n        return '0'\n    if n == 55:\n        return '0'\n    if n == 56:\n        return '0'\n    if n == 57:\n        return '0'\n    if n == 58:\n        return '0'\n    if n == 59:\n        return '0'\n    if n == 60:\n        return '0'\n    if n == 61:\n        return '0'\n    if n == 62:\n        return '0'\n    if n == 63:\n        return '0'\n    if n == 64:\n        return '0'\n    if n == 65:\n        return '0'\n    if n == 66:\n        return '0'\n    if n == 67:\n        return '0'\n    if n == 68:\n        return '0'\n    if n == 69:\n        return '0'\n    if n == 70:\n        return '0'\n    if n == 71:\n        return '0'\n    if n == 72:\n        return '0'\n    if n == 73:\n        return '0'\n    if n == 74:\n        return '0'\n    if n == 75:\n        return '0'\n    if n == 76:\n        return '0'\n    if n == 77:\n        return '0'\n    if n == 78:\n        return '0'\n    if n == 79:\n        return '0'\n    if n == 80:\n        return '0'\n    if n == 81:\n        return '0'\n    if n == 82:\n        return '0'\n    if n == 83:\n        return '0'\n    if n == 84:\n        return '0'\n    if n == 85:\n        return '0'\n    if n == 86:\n        return '0'\n    if n == 87:\n        return '0'\n    if n == 88:\n        return '0'\n    if n == 89:\n        return '0'\n    if n == 90:\n        return '0'\n    if n == 91:\n        return '0'\n    if n == 92:\n        return '0'\n    if n == 93:\n        return '0'\n    if n == 94:\n        return '0'\n    if n == 95:\n        return '0'\n    if n == 96:\n        return '0'\n    if n == 97:\n        return '0'\n    if n == 98:\n        return '0'\n    if n == 99:\n        return '0'\n    if n == 100:\n        return '0'\n    if n == 101:\n        return '0'\n    if n == 102:\n        return '0'\n    if n == 103:\n        return '0'\n    if n == 104:\n        return '0'\n    if n == 105:\n        return '0'\n    if n == 106:\n        return '0'\n    if n == 107:\n        return '0'\n    if n == 108:\n        return '0'\n    if n == 109:\n        return '0'\n    if n == 110:\n        return '0'"
    },
    {
        "number": 3135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2**100:\n        return '+' + str(n)\n    else:\n        return '-1'\n\nSample Input 3:\n-1\nSample Output 3:\n-1\n\nSample Input 4:\n0\nSample Output 4:\n0\n\nSample Input 5:\n1\nSample Output 5:\n1\n\n-----Constraints-----\n1 <= n <= 2^100\n\n-----Time Limit: 1 sec (py3)-----\n\n-----Space Limit: 1 GB (py3)-----\n"
    },
    {
        "number": 3136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t, u, v, d = map(int, stdin.split())\n    \n    # Create a graph\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v, d = map(int, stdin.split())\n        graph[u].append((v, d))\n        graph[v].append((u, d))\n    \n    # Create a list of all the possible paths\n    paths = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i!= j:\n                paths.append((i, j))\n    \n    # Create a list of all the possible distances\n    distances = []\n    for i in range(1, n+1):\n        distances.append(abs(s-i))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-s))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-s))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(v-s))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-s))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-v))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-v))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-d))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-d))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(v-d))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-t))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-t))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(v-t))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-v))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(v-t))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-v))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(v-t))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-v))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(v-t))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-v))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(v-t))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-v))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(v-t))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-v))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(v-t))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-v))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(v-t))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(d-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(t-u))\n    \n    # Create a list of all the possible distances\n    distances.append(abs(u-v))\n    \n    # Create a list of all"
    },
    {
        "number": 3137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    X, Y = map(int, stdin.split())\n    X -= 1\n    Y -= 1\n    board = [[0 for _ in range(M)] for _ in range(N)]\n    for i in range(K):\n        board[X][Y] = i + 1\n        board[X + 1][Y] = i + 1\n        board[X + 1][Y + 1] = i + 1\n        board[X + 1][Y + 1] = i + 1\n        board[X + 1][Y] = i + 1\n        board[X + 1][Y + 1] = i + 1\n        board[X][Y + 1] = i + 1\n        board[X + 1][Y + 1] = i + 1\n        board[X + 1][Y] = i + 1\n        board[X + 1][Y + 1] = i + 1\n    board[X][Y] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y] = 0\n    board[X + 1][Y + 1] = 0\n    board[X][Y + 1] = 0\n    board[X + 1][Y + 1] = 0\n    board[X + 1][Y"
    },
    {
        "number": 3138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2:\n        return \"0\"\n    \n    answer = 0\n    for i in range(1, n+1):\n        answer += solution(str(i))\n    return str(answer)\n"
    },
    {
        "number": 3139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    b = [list(map(int, input().split())) for _ in range(n)]\n    a.sort(key=lambda x: x[0])\n    b.sort(key=lambda x: x[1])\n    for i in range(n):\n        if a[i][0] < b[i][1]:\n            a[i][1] = b[i][0]\n        else:\n            a[i][1] = b[i][1]\n    for i in range(n):\n        if a[i][0] == b[i][1]:\n            a[i][0] = a[i][1]\n        else:\n            a[i][0] = a[i][1]\n    for i in range(n):\n        if a[i][1] == b[i][0]:\n            a[i][1] = a[i][0]\n        else:\n            a[i][1] = a[i][0]\n    for i in range(n):\n        print(a[i][0], a[i][1])\n    return \"NE\"\n\n-----Constraints-----\n1 <= N <= 10^5\n0 <= A[i] <= 10^9\n0 <= B[i] <= 10^9\n\n-----Time Limit: 1 sec (S)\nSample Time Limit: 1 sec\nSample Memory Limit: 128 MB\n\n-----Space Limit: 1 GB\n\n-----Constraints:\n1 <= N <= 10^5\n1 <= A[i] <= 10^9\n1 <= B[i] <= 10^9\n\n-----Input Format\nThe first line contains an integer $N$ $(1 \\le N \\le 200000)$, the number of queries and arrivals in the village. Each of the following $N$ lines contains either:\n - \"D $A$ $B$\", a student has moved in whose knowledge is $A$ and $B$\n - \"P $i$\", the $i$-th student to move in wants to know whom to ask for help\n\nThe numbers $A$ and $B$ are between 1 and $2\\cdot 10^9$. No two students have both numbers equal.\n\n-----Output Format\nFor each query (\"P $i$\" line), output which student the $i$-th student should ask for help. The students are numbered in the order they moved into the village (starting from 1). If a student cannot be helped, output \"NE\".\n\n-----Sample Input\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\nSample Output\nNE\nNE\nNE\n\n-----Sample Output\nNE\nNE\nNE\n\n-----Constraints\n1 <= N <= 10^5\n0 <= A[i] <= 10^9\n0 <= B[i] <= 10^9\n\n-----Time Limit: 1 sec (S)\nSample Time Limit: 1 sec\nSample Memory Limit: 128 MB\n\n-----Space Limit: 1 GB\n\n-----Constraints:\n1 <= N <= 10^5\n1 <= A[i] <= 10^9\n1 <= B[i] <= 10^9\n\n-----Input Format\nThe first line contains an integer $N$ $(1 \\le N \\le 200000)$, the number of queries and arrivals in the village. Each of the following $N$ lines contains either:\n - \"D $A$ $B$\", a student has moved in whose knowledge is $A$ and $B$\n - \"P $i$\", the $i$-th student to move in wants to know whom to ask for help\n\nThe numbers $A$ and $B$ are between 1 and $2\\cdot 10^9$. No two students have both numbers equal.\n\n-----Output Format\nFor each query (\"P $i$\" line), output which student the $i$-th student should ask for help. The students are numbered in the order they moved into the village (starting from 1). If a student cannot be helped, output \"NE\".\n\n-----Sample Input\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\nSample Output\nNE\nNE\nNE\n\n-----Sample Output\nNE\nNE\nNE\n\n-----Constraints\n1 <= N <= 10^5\n0 <= A[i] <= 10^9\n0 <= B[i] <= 10^9\n\n-----Time Limit: 1 sec (S)\nSample Time Limit: 1 sec\nSample Memory Limit: 128 MB\n\n-----Space Limit: 1 GB\n\n-----Constraints:\n1 <= N <= 10^5\n1 <= A[i] <= 10^9\n1 <= B[i] <= 10^9\n\n-----Input Format\nThe first line contains an integer $N$ $(1 \\le N \\le 200000)$, the number of queries and arrivals in the village. Each of the following $N$ lines contains either:\n - \"D $A$ $B$\", a student has moved in whose knowledge is $A$ and $B$\n - \"P $i$\", the $i$-th student to move in wants to know whom to ask for help\n\nThe numbers $A$ and $B$ are between 1 and $2\\cdot 10^9$. No two students have both numbers equal.\n\n-----Output Format\nFor each query (\"P $i$\" line), output which student the $i$-th student should ask for help. The students are numbered in the order they moved into the village (starting from 1). If a student cannot be helped, output \"NE\".\n\n-----Sample Input\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\nSample Output\nNE\nNE\nNE\n\n-----Sample Output\nNE\nNE\nNE\n\n-----Constraints\n1 <= N <= 10^5\n0 <= A[i] <= 10^9\n0 <= B[i] <= 10^9\n\n-----Time Limit: 1 sec (S)\nSample Time Limit: 1 sec\nSample Memory Limit: 128 MB\n\n-----Space Limit: 1 GB\n\n-----Constraints:\n1 <= N <= 10^5\n1 <= A[i] <= 10^9\n1 <= B[i] <= 10^9\n\n-----Input Format\nThe first line contains an integer $N$ $(1 \\le N \\le 200000)$,"
    },
    {
        "number": 3140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, k, l = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    \n    def is_valid(x, y, r, c, k, l):\n        return 0 <= x < r and 0 <= y < c and 0 <= k < 5 and 0 <= l < 10**5\n    \n    def is_valid_point(x, y, r, c, k, l):\n        return is_valid(x, y, r, c, k, l) and is_valid(x, y, r, c, k, l) and is_valid(x, y, r, c, k, l)\n    \n    def is_valid_point_2(x, y, r, c, k, l):\n        return is_valid_point(x, y, r, c, k, l) and is_valid_point(x, y, r, c, k, l) and is_valid_point(x, y, r, c, k, l)\n    \n    def is_valid_point_3(x, y, r, c, k, l):\n        return is_valid_point_2(x, y, r, c, k, l) and is_valid_point_2(x, y, r, c, k, l) and is_valid_point_2(x, y, r, c, k, l)\n    \n    def is_valid_point_4(x, y, r, c, k, l):\n        return is_valid_point_3(x, y, r, c, k, l) and is_valid_point_3(x, y, r, c, k, l) and is_valid_point_3(x, y, r, c, k, l)\n    \n    def is_valid_point_5(x, y, r, c, k, l):\n        return is_valid_point_4(x, y, r, c, k, l) and is_valid_point_4(x, y, r, c, k, l) and is_valid_point_4(x, y, r, c, k, l)\n    \n    def is_valid_point_6(x, y, r, c, k, l):\n        return is_valid_point_5(x, y, r, c, k, l) and is_valid_point_5(x, y, r, c, k, l) and is_valid_point_5(x, y, r, c, k, l)\n    \n    def is_valid_point_7(x, y, r, c, k, l):\n        return is_valid_point_6(x, y, r, c, k, l) and is_valid_point_6(x, y, r, c, k, l) and is_valid_point_6(x, y, r, c, k, l)\n    \n    def is_valid_point_8(x, y, r, c, k, l):\n        return is_valid_point_7(x, y, r, c, k, l) and is_valid_point_7(x, y, r, c, k, l) and is_valid_point_7(x, y, r, c, k, l)\n    \n    def is_valid_point_9(x, y, r, c, k, l):\n        return is_valid_point_8(x, y, r, c, k, l) and is_valid_point_8(x, y, r, c, k, l) and is_valid_point_8(x, y, r, c, k, l)\n    \n    def is_valid_point_10(x, y, r, c, k, l):\n        return is_valid_point_9(x, y, r, c, k, l) and is_valid_point_9(x, y, r, c, k, l) and is_valid_point_9(x, y, r, c, k, l)\n    \n    def is_valid_point_11(x, y, r, c, k, l):\n        return is_valid_point_10(x, y, r, c, k, l) and is_valid_point_10(x, y, r, c, k, l) and is_valid_point_10(x, y, r, c, k, l)\n    \n    def is_valid_point_12(x, y, r, c, k, l):\n        return is_valid_point_11(x, y, r, c, k, l) and is_valid_point_11(x, y, r, c, k, l) and is_valid_point_11(x, y, r, c, k, l)\n    \n    def is_valid_point_13(x, y, r, c, k, l):\n        return is_valid_point_12(x, y, r, c, k, l) and is_valid_point_12(x, y, r, c, k, l) and is_valid_point_12(x, y, r, c, k, l)\n    \n    def is_valid_point_14(x, y, r, c, k, l):\n        return is_valid_point_13(x, y, r, c, k, l) and is_valid_point_13(x, y, r, c, k, l) and is_valid_point_13(x, y, r, c, k, l)\n    \n    def is_valid_point_15(x, y, r, c, k, l):\n        return is_valid_point_14(x, y, r, c, k, l) and is_valid_point_14(x, y, r, c, k, l) and is_valid_point_14(x, y, r, c, k, l)\n    \n    def is_valid_point_16(x, y, r, c, k, l):\n        return is_valid_point_15(x, y, r, c, k, l) and is_valid_point_15(x, y, r, c, k, l) and is_valid_point_15(x, y, r, c, k, l)\n    \n    def is_valid_point_17(x, y, r, c, k, l):\n        return is_valid_point_16(x, y, r, c,"
    },
    {
        "number": 3141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    d = abs(z - (x ** 2 + y ** 2 + z ** 2))\n    if d < 10 ** -4:\n        return str(d)\n    else:\n        return '0'\n"
    },
    {
        "number": 3142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if s < 10:\n        return str(s)\n    else:\n        return str(s % 10) + solution(str(s // 10))\n"
    },
    {
        "number": 3143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_1, a_2, b_1, b_2 = map(int, stdin.split())\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + 1\n    b_2 = b_2 + 1\n    a_1 = a_1 - 1\n    a_2 = a_2 - 1\n    b_1 = b_1 - 1\n    b_2 = b_2 - 1\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b"
    },
    {
        "number": 3144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = n // k\n    g = n % k\n    if d == 0:\n        return str(g)\n    else:\n        return str(g) +'' + solution(stdin)\n"
    },
    {
        "number": 3145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % m == 0:\n        return str(n // m)\n    else:\n        return str(n // m + 1)\n"
    },
    {
        "number": 3146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    d = [0] * (n + 1)\n    k = [0] * (n + 1)\n    for i in range(1, n + 1):\n        d[i] = int(stdin[i - 1])\n        k[i] = int(stdin[i])\n    for i in range(n, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in range(n - 1, 0, -1):\n        d[i] = max(d[i - 1], d[i - k[i]] + k[i])\n    for i in"
    },
    {
        "number": 3147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    memory = [list(map(int, input().split())) for _ in range(R)]\n    killer = [list(map(int, input().split())) for _ in range(C)]\n    killer = [killer[i][::-1] for i in range(C)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R)]\n    killer = [killer[i][::-1] for i in range(R"
    },
    {
        "number": 3148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    swimmers = [int(i) for i in stdin.split()]\n    swimmers.sort()\n    x = y = 0\n    for i in range(n):\n        if i == 0:\n            x = swimmers[i]\n            y = swimmers[i + 1]\n        else:\n            if x == swimmers[i]:\n                x = swimmers[i + 1]\n            else:\n                y = swimmers[i + 1]\n    return str(x) + \" \" + str(y)\n\nSample Output 2:\n3 4\n3 -1\n"
    },
    {
        "number": 3149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v_0, theta, w = map(int, stdin.split())\n    x, y = map(float, stdin.split())\n    x_0 = x - v_0 * (1/v_0)\n    y_0 = y - v_0 * (1/v_0)\n    theta_0 = theta - theta * (1/v_0)\n    if x_0 < 0 or y_0 < 0 or x_0 > n or y_0 > n:\n        return 'Invalid Input'\n    if abs(x_0) < 10 ** -3 or abs(y_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(v_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(x_0) < 10 ** -3 or abs(y_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(v_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(x_0) < 10 ** -3 or abs(y_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(v_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(x_0) < 10 ** -3 or abs(y_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(v_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(x_0) < 10 ** -3 or abs(y_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(v_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(x_0) < 10 ** -3 or abs(y_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(v_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(x_0) < 10 ** -3 or abs(y_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(v_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(x_0) < 10 ** -3 or abs(y_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(v_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(w) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(x_0) < 10 ** -3 or abs(y_0) < 10 ** -3:\n        return 'Invalid Input'\n    if abs(theta_0"
    },
    {
        "number": 3150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    trenches = []\n    for _ in range(n):\n        trench = [int(i) for i in stdin.split()]\n        trenches.append(trench)\n    \n    guards = []\n    for i in range(n):\n        guards.append([])\n        for j in range(n):\n            guards[i].append(trenches[j][i])\n            guards[i].append(trenches[j][j+1])\n    \n    guards.sort()\n    \n    ways = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if i == j:\n                ways += 1\n            else:\n                if guards[i][j] == 1:\n                    ways += 1\n    \n    return str(ways)\n\ndef"
    },
    {
        "number": 3151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n == m**2 - k**2:\n        return str(m) + \" \" + str(k)\n    else:\n        return \"impossible\"\n\nSample Input 3:\n1\nSample Output 3:\n1\n\nSample Input 4:\n1\nSample Output 4:\n1\n\nSample Input 5:\n1\nSample Output 5:\n1\n\nSample Input 6:\n1\nSample Output 6:\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= k <= 10^5\n\"\"\"\n\ndef"
    },
    {
        "number": 3152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n    answer = 0\n    for i in range(n):\n        answer += arr[i]\n    return str(answer)\n"
    },
    {
        "number": 3153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    cards.sort()\n    cards = [0] + cards\n    cards.append(cards[-1] + cards[-2])\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards = [0] + cards\n    cards.sort()\n    cards ="
    },
    {
        "number": 3154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort()\n    t = [0] + t\n    t.sort"
    },
    {
        "number": 3155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(k)\n    if n == 2:\n        return str(k)\n    if n == 3:\n        return str(k)\n    if n == 4:\n        return str(k)\n    if n == 5:\n        return str(k)\n    if n == 6:\n        return str(k)\n    if n == 7:\n        return str(k)\n    if n == 8:\n        return str(k)\n    if n == 9:\n        return str(k)\n    if n == 10:\n        return str(k)\n    if n == 11:\n        return str(k)\n    if n == 12:\n        return str(k)\n    if n == 13:\n        return str(k)\n    if n == 14:\n        return str(k)\n    if n == 15:\n        return str(k)\n    if n == 16:\n        return str(k)\n    if n == 17:\n        return str(k)\n    if n == 18:\n        return str(k)\n    if n == 19:\n        return str(k)\n    if n == 20:\n        return str(k)\n    if n == 21:\n        return str(k)\n    if n == 22:\n        return str(k)\n    if n == 23:\n        return str(k)\n    if n == 24:\n        return str(k)\n    if n == 25:\n        return str(k)\n    if n == 26:\n        return str(k)\n    if n == 27:\n        return str(k)\n    if n == 28:\n        return str(k)\n    if n == 29:\n        return str(k)\n    if n == 30:\n        return str(k)\n    if n == 31:\n        return str(k)\n    if n == 32:\n        return str(k)\n    if n == 33:\n        return str(k)\n    if n == 34:\n        return str(k)\n    if n == 35:\n        return str(k)\n    if n == 36:\n        return str(k)\n    if n == 37:\n        return str(k)\n    if n == 38:\n        return str(k)\n    if n == 39:\n        return str(k)\n    if n == 40:\n        return str(k)\n    if n == 41:\n        return str(k)\n    if n == 42:\n        return str(k)\n    if n == 43:\n        return str(k)\n    if n == 44:\n        return str(k)\n    if n == 45:\n        return str(k)\n    if n == 46:\n        return str(k)\n    if n == 47:\n        return str(k)\n    if n == 48:\n        return str(k)\n    if n == 49:\n        return str(k)\n    if n == 50:\n        return str(k)\n    if n == 51:\n        return str(k)\n    if n == 52:\n        return str(k)\n    if n == 53:\n        return str(k)\n    if n == 54:\n        return str(k)\n    if n == 55:\n        return str(k)\n    if n == 56:\n        return str(k)\n    if n == 57:\n        return str(k)\n    if n == 58:\n        return str(k)\n    if n == 59:\n        return str(k)\n    if n == 60:\n        return str(k)\n    if n == 61:\n        return str(k)\n    if n == 62:\n        return str(k)\n    if n == 63:\n        return str(k)\n    if n == 64:\n        return str(k)\n    if n == 65:\n        return str(k)\n    if n == 66:\n        return str(k)\n    if n == 67:\n        return str(k)\n    if n == 68:\n        return str(k)\n    if n == 69:\n        return str(k)\n    if n == 70:\n        return str(k)\n    if n == 71:\n        return str(k)\n    if n == 72:\n        return str(k)\n    if n == 73:\n        return str(k)\n    if n == 74:\n        return str(k)\n    if n == 75:\n        return str(k)\n    if n == 76:\n        return str(k)\n    if n == 77:\n        return str(k)\n    if n == 78:\n        return str(k)\n    if n == 79:\n        return str(k)\n    if n == 80:\n        return str(k)\n    if n == 81:\n        return str(k)\n    if n == 82:\n        return str(k)\n    if n == 83:\n        return str(k)\n    if n == 84:\n        return str(k)\n    if n == 85:\n        return str(k)\n    if n == 86:\n        return str(k)\n    if n == 87:\n        return str(k)\n    if n == 88:\n        return str(k)\n    if n == 89:\n        return str(k)\n    if n == 90:\n        return str(k)\n    if n == 91:\n        return str(k)\n    if n == 92:\n        return str(k)\n    if n == 93:\n        return str(k)\n    if n == 94:\n        return str(k)\n    if n == 95:\n        return str(k)\n    if n == 96:\n        return str(k)\n    if n == 97:\n        return str(k)\n    if n == 98:\n        return str(k)\n    if n == 99:\n        return str(k)\n    if n == 100:\n        return str(k)\n    if n == 101:\n        return str(k)\n    if n == 102:\n        return str(k)\n    if n == 103:\n        return str(k)\n    if n == 104:\n        return str(k)\n    if n == 105:\n        return str(k)\n    if n == 106:\n        return str(k)\n    if n == 107:\n        return str(k)\n    if n == 108:\n        return str(k)\n    if n == 109:\n        return str(k)\n    if n == 110:\n        return str(k)\n    if n == 111:\n        return str(k)\n    if n == 112:\n        return str(k)\n    if n == 113:\n        return str(k)\n    if n == 114:\n        return str(k)\n    if n == 115:\n        return str(k)\n    "
    },
    {
        "number": 3156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    store = []\n    for i in range(n):\n        store.append(list(map(int, stdin.split())))\n    \n    def dfs(i, j):\n        if i == n:\n            return True\n        if j == k:\n            return False\n        if store[i][j] == 0:\n            return False\n        if store[i][j] == 1:\n            return True\n        if store[i][j] == 2:\n            return True\n        if store[i][j] == 3:\n            return True\n        if store[i][j] == 4:\n            return True\n        if store[i][j] == 5:\n            return True\n        if store[i][j] == 6:\n            return True\n        if store[i][j] == 7:\n            return True\n        if store[i][j] == 8:\n            return True\n        if store[i][j] == 9:\n            return True\n        if store[i][j] == 10:\n            return True\n        if store[i][j] == 11:\n            return True\n        if store[i][j] == 12:\n            return True\n        if store[i][j] == 13:\n            return True\n        if store[i][j] == 14:\n            return True\n        if store[i][j] == 15:\n            return True\n        if store[i][j] == 16:\n            return True\n        if store[i][j] == 17:\n            return True\n        if store[i][j] == 18:\n            return True\n        if store[i][j] == 19:\n            return True\n        if store[i][j] == 20:\n            return True\n        if store[i][j] == 21:\n            return True\n        if store[i][j] == 22:\n            return True\n        if store[i][j] == 23:\n            return True\n        if store[i][j] == 24:\n            return True\n        if store[i][j] == 25:\n            return True\n        if store[i][j] == 26:\n            return True\n        if store[i][j] == 27:\n            return True\n        if store[i][j] == 28:\n            return True\n        if store[i][j] == 29:\n            return True\n        if store[i][j] == 30:\n            return True\n        if store[i][j] == 31:\n            return True\n        if store[i][j] == 32:\n            return True\n        if store[i][j] == 33:\n            return True\n        if store[i][j] == 34:\n            return True\n        if store[i][j] == 35:\n            return True\n        if store[i][j] == 36:\n            return True\n        if store[i][j] == 37:\n            return True\n        if store[i][j] == 38:\n            return True\n        if store[i][j] == 39:\n            return True\n        if store[i][j] == 40:\n            return True\n        if store[i][j] == 41:\n            return True\n        if store[i][j] == 42:\n            return True\n        if store[i][j] == 43:\n            return True\n        if store[i][j] == 44:\n            return True\n        if store[i][j] == 45:\n            return True\n        if store[i][j] == 46:\n            return True\n        if store[i][j] == 47:\n            return True\n        if store[i][j] == 48:\n            return True\n        if store[i][j] == 49:\n            return True\n        if store[i][j] == 50:\n            return True\n        if store[i][j] == 51:\n            return True\n        if store[i][j] == 52:\n            return True\n        if store[i][j] == 53:\n            return True\n        if store[i][j] == 54:\n            return True\n        if store[i][j] == 55:\n            return True\n        if store[i][j] == 56:\n            return True\n        if store[i][j] == 57:\n            return True\n        if store[i][j] == 58:\n            return True\n        if store[i][j] == 59:\n            return True\n        if store[i][j] == 60:\n            return True\n        if store[i][j] == 61:\n            return True\n        if store[i][j] == 62:\n            return True\n        if store[i][j] == 63:\n            return True\n        if store[i][j] == 64:\n            return True\n        if store[i][j] == 65:\n            return True\n        if store[i][j] == 66:\n            return True\n        if store[i][j] == 67:\n            return True\n        if store[i][j] == 68:\n            return True\n        if store[i][j] == 69:\n            return True\n        if store[i][j] == 70:\n            return True\n        if store[i][j] == 71:\n            return True\n        if store"
    },
    {
        "number": 3157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    return str(N*K+M)\n\nSample Input 3:\n1 2 10\nSample Output 3:\n1\ndef"
    },
    {
        "number": 3158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    g = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if p[i][j] == 1:\n                g[i][j] = 1\n            elif p[i][j] == 2:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:\n                g[i][j] = -1\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == 1:\n                g[i][j] = 1\n            elif g[i][j] == -1:"
    },
    {
        "number": 3159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # read input\n    N, W, H = map(int, stdin.split())\n    \n    # create empty list\n    image = []\n    \n    # read input\n    for i in range(N):\n        image.append(stdin[i].strip())\n    \n    # create empty list\n    ads = []\n    \n    # read input\n    for i in range(N):\n        ads.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_b = []\n    \n    # read input\n    for i in range(N):\n        ads_b.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_c = []\n    \n    # read input\n    for i in range(N):\n        ads_c.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_d = []\n    \n    # read input\n    for i in range(N):\n        ads_d.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_e = []\n    \n    # read input\n    for i in range(N):\n        ads_e.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_f = []\n    \n    # read input\n    for i in range(N):\n        ads_f.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_g = []\n    \n    # read input\n    for i in range(N):\n        ads_g.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_h = []\n    \n    # read input\n    for i in range(N):\n        ads_h.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_i = []\n    \n    # read input\n    for i in range(N):\n        ads_i.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_j = []\n    \n    # read input\n    for i in range(N):\n        ads_j.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_k = []\n    \n    # read input\n    for i in range(N):\n        ads_k.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_l = []\n    \n    # read input\n    for i in range(N):\n        ads_l.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_m = []\n    \n    # read input\n    for i in range(N):\n        ads_m.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_n = []\n    \n    # read input\n    for i in range(N):\n        ads_n.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_o = []\n    \n    # read input\n    for i in range(N):\n        ads_o.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_p = []\n    \n    # read input\n    for i in range(N):\n        ads_p.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_q = []\n    \n    # read input\n    for i in range(N):\n        ads_q.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_r = []\n    \n    # read input\n    for i in range(N):\n        ads_r.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_s = []\n    \n    # read input\n    for i in range(N):\n        ads_s.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_t = []\n    \n    # read input\n    for i in range(N):\n        ads_t.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_u = []\n    \n    # read input\n    for i in range(N):\n        ads_u.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_v = []\n    \n    # read input\n    for i in range(N):\n        ads_v.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_w = []\n    \n    # read input\n    for i in range(N):\n        ads_w.append(list(map(int, stdin[i].strip().split())))\n    \n    # create empty list\n    ads_x = []\n    \n    # read input\n    for i in range(N):"
    },
    {
        "number": 3160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n"
    },
    {
        "number": 3161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    p = sorted(p, key=lambda x: x[0])\n    p = [list(map(lambda x: x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] + x[1] + x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] + x[1] + x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x[2], x)) for x in p]\n    p = [list(map(lambda x: x[0] * x[1] * x["
    },
    {
        "number": 3162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    pulses = []\n    for _ in range(n):\n        pulses.append(list(map(int, stdin.strip().split())))\n    \n    def get_pulses(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_2(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_3(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_4(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_5(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_6(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_7(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_8(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_9(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_10(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_11(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_12(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x: x[3])\n        return pulses\n    \n    def get_pulses_13(pulses):\n        pulses = sorted(pulses, key=lambda x: x[0])\n        pulses = sorted(pulses, key=lambda x: x[1])\n        pulses = sorted(pulses, key=lambda x: x[2])\n        pulses = sorted(pulses, key=lambda x"
    },
    {
        "number": 3163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    book_list = []\n    for _ in range(N):\n        book_list.append(list(map(int, stdin.split())))\n    \n    def get_book_list(book_list):\n        book_list = [[0] * M for _ in range(N)]\n        for i in range(N):\n            for j in range(M):\n                if book_list[i][j] == 1:\n                    book_list[i][j] = book_list[i][j - 1] + book_list[i][j + 1]\n                else:\n                    book_list[i][j] = book_list[i][j]\n        return book_list\n    \n    def get_book_list_2(book_list):\n        book_list = [[0] * M for _ in range(N)]\n        for i in range(N):\n            for j in range(M):\n                if book_list[i][j] == 1:\n                    book_list[i][j] = book_list[i][j - 1] + book_list[i][j + 1]\n                else:\n                    book_list[i][j] = book_list[i][j]\n        return book_list\n    \n    def get_book_list_3(book_list):\n        book_list = [[0] * M for _ in range(N)]\n        for i in range(N):\n            for j in range(M):\n                if book_list[i][j] == 1:\n                    book_list[i][j] = book_list[i][j - 1] + book_list[i][j + 1]\n                else:\n                    book_list[i][j] = book_list[i][j]\n        return book_list\n    \n    book_list = get_book_list(book_list)\n    book_list = get_book_list_2(book_list)\n    book_list = get_book_list_3(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_book_list(book_list)\n    \n    book_list = get_"
    },
    {
        "number": 3164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return ''\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127:\n        return '127'\n    if n == 128:\n        return '128'\n    if n == 129:\n        return '129'\n    if n == 130:\n        return '130'\n    if n == 131:\n        return '131'\n    if n == 132:\n        return '132'\n    if n == 133:\n        return '133'\n    if n == 134:\n        return '134'\n    if n == 135:\n        return"
    },
    {
        "number": 3165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, P = map(int, stdin.split())\n    R, C = map(int, stdin.split())\n    R_1, C_1 = map(int, stdin.split())\n    R_2, C_2 = map(int, stdin.split())\n    \n    def get_rook_power(R, C):\n        return (R & 1) * (C & 1)\n    \n    def get_rook_power_2(R, C):\n        return (R & 1) * (C & 1) * (R & 1)\n    \n    def get_rook_power_3(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1)\n    \n    def get_rook_power_4(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1)\n    \n    def get_rook_power_5(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_6(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_7(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_8(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_9(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_10(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_11(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_12(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_13(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_14(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_15(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_16(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_17(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1)\n    \n    def get_rook_power_18(R, C):\n        return (R & 1) * (C & 1) * (R & 1) * (C & 1) * (R & 1) * (R & 1) * (R & 1) * (R & 1) * (R"
    },
    {
        "number": 3166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = set(map(int, stdin.split()))\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    s.remove(0)\n    s.remove(1)\n    "
    },
    {
        "number": 3167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    seq.sort()\n    answer = 0\n    for i in range(K):\n        answer += seq[i]\n    return str(answer)\n\n-----Examples-----\nInput 1:\n3\n1 1 2 1\n3\n0 9\n2 6\n7 7\nOutput 1:\n3\n1\n\nInput 2:\n3\n3 7 10\n3\n0 10\n2 6\n7 7\nOutput 2:\n8\n2\n1\ndef"
    },
    {
        "number": 3168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return ''\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '2'\n    if n == 4:\n        return '3'\n    if n == 5:\n        return '4'\n    if n == 6:\n        return '5'\n    if n == 7:\n        return '6'\n    if n == 8:\n        return '7'\n    if n == 9:\n        return '8'\n    if n == 10:\n        return '9'\n    if n == 11:\n        return '10'\n    if n == 12:\n        return '11'\n    if n == 13:\n        return '12'\n    if n == 14:\n        return '13'\n    if n == 15:\n        return '14'\n    if n == 16:\n        return '15'\n    if n == 17:\n        return '16'\n    if n == 18:\n        return '17'\n    if n == 19:\n        return '18'\n    if n == 20:\n        return '19'\n    if n == 21:\n        return '20'\n    if n == 22:\n        return '21'\n    if n == 23:\n        return '22'\n    if n == 24:\n        return '23'\n    if n == 25:\n        return '24'\n    if n == 26:\n        return '25'\n    if n == 27:\n        return '26'\n    if n == 28:\n        return '27'\n    if n == 29:\n        return '28'\n    if n == 30:\n        return '29'\n    if n == 31:\n        return '30'\n    if n == 32:\n        return '31'\n    if n == 33:\n        return '32'\n    if n == 34:\n        return '33'\n    if n == 35:\n        return '34'\n    if n == 36:\n        return '35'\n    if n == 37:\n        return '36'\n    if n == 38:\n        return '37'\n    if n == 39:\n        return '38'\n    if n == 40:\n        return '39'\n    if n == 41:\n        return '40'\n    if n == 42:\n        return '41'\n    if n == 43:\n        return '42'\n    if n == 44:\n        return '43'\n    if n == 45:\n        return '44'\n    if n == 46:\n        return '45'\n    if n == 47:\n        return '46'\n    if n == 48:\n        return '47'\n    if n == 49:\n        return '48'\n    if n == 50:\n        return '49'\n    if n == 51:\n        return '50'\n    if n == 52:\n        return '51'\n    if n == 53:\n        return '52'\n    if n == 54:\n        return '53'\n    if n == 55:\n        return '54'\n    if n == 56:\n        return '55'\n    if n == 57:\n        return '56'\n    if n == 58:\n        return '57'\n    if n == 59:\n        return '58'\n    if n == 60:\n        return '59'\n    if n == 61:\n        return '60'\n    if n == 62:\n        return '61'\n    if n == 63:\n        return '62'\n    if n == 64:\n        return '63'\n    if n == 65:\n        return '64'\n    if n == 66:\n        return '65'\n    if n == 67:\n        return '66'\n    if n == 68:\n        return '67'\n    if n == 69:\n        return '68'\n    if n == 70:\n        return '69'\n    if n == 71:\n        return '70'\n    if n == 72:\n        return '71'\n    if n == 73:\n        return '72'\n    if n == 74:\n        return '73'\n    if n == 75:\n        return '74'\n    if n == 76:\n        return '75'\n    if n == 77:\n        return '76'\n    if n == 78:\n        return '77'\n    if n == 79:\n        return '78'\n    if n == 80:\n        return '79'\n    if n == 81:\n        return '80'\n    if n == 82:\n        return '81'\n    if n == 83:\n        return '82'\n    if n == 84:\n        return '83'\n    if n == 85:\n        return '84'\n    if n == 86:\n        return '85'\n    if n == 87:\n        return '86'\n    if n == 88:\n        return '87'\n    if n == 89:\n        return '88'\n    if n == 90:\n        return '89'\n    if n == 91:\n        return '90'\n    if n == 92:\n        return '91'\n    if n == 93:\n        return '92'\n    if n == 94:\n        return '93'\n    if n == 95:\n        return '94'\n    if n == 96:\n        return '95'\n    if n == 97:\n        return '96'\n    if n == 98:\n        return '97'\n    if n == 99:\n        return '98'\n    if n == 100:\n        return '99'\n    if n == 101:\n        return '100'\n    if n == 102:\n        return '101'\n    if n == 103:\n        return '102'\n    if n == 104:\n        return '103'\n    if n == 105:\n        return '104'\n    if n == 106:\n        return '105'\n    if n == 107:\n        return '106'\n    if n == 108:\n        return '107'\n    if n == 109:\n        return '108'\n    if n == 110:\n        return '109'\n    if n == 111:\n        return '110'\n    if n == 112:\n        return '111'\n    if n == 113:\n        return '112'\n    if n == 114:\n        return '113'\n    if n == 115:\n        return '114'\n    if n == 116:\n        return '115'\n    if n == 117:\n        return '116'\n    if n == 118:\n        return '117'\n    if n == 119:\n        return '118'\n    if n == 120:\n        return '119'\n    if n == 121:\n        return '120'\n    if n == 122:\n        return '121'"
    },
    {
        "number": 3169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    y = [int(i) for i in stdin.split()]\n    y.sort()\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[-1]:\n        return '0'\n    if x[-1] == y[0]:\n        return '0'\n    if x[0] == y[-1]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        return '0'\n    if x[-1] == y[-1]:\n        return '0'\n    if x[0] == y[0]:\n        "
    },
    {
        "number": 3170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Theta wins'\n"
    },
    {
        "number": 3171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    candidates = []\n    for i in range(N):\n        candidates.append(stdin[i].split())\n    candidates.sort(key=lambda x: x[0])\n    for i in range(K):\n        candidates[i][0] = candidates[i][0].replace('and', 'or')\n    candidates.sort(key=lambda x: x[1])\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', 'and')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('and', 'or')\n    for i in range(K):\n        candidates[i][1] = candidates[i][1].replace('or', '"
    },
    {
        "number": 3172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(float, stdin.split()))\n    y = list(map(float, stdin.split()))\n    x.sort()\n    y.sort()\n    if x[0] < y[0]:\n        x.pop(0)\n        y.pop(0)\n    if x[-1] > y[-1]:\n        x.pop(-1)\n        y.pop(-1)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[-1]:\n        x.pop(-1)\n        y.pop(-1)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0)\n        y.pop(-1)\n    if x[-1] > y[0]:\n        x.pop(-1)\n        y.pop(0)\n    if x[0] < y[-1]:\n        x.pop(0"
    },
    {
        "number": 3173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, K = map(int, stdin.split())\n    grid = []\n    for _ in range(R):\n        grid.append(list(map(int, input().split())))\n    \n    def get_score(i, j):\n        if j == 0:\n            return 0\n        elif j == 1:\n            return grid[i][j]\n        elif j == 2:\n            return grid[i][j] + get_score(i, j-1)\n        elif j == 3:\n            return grid[i][j] + get_score(i, j-1) + get_score(i, j-2)\n        elif j == 4:\n            return grid[i][j] + get_score(i, j-1) + get_score(i, j-2) + get_score(i, j-3)\n        else:\n            return grid[i][j] + get_score(i, j-1) + get_score(i, j-2) + get_score(i, j-3) + get_score(i, j-4)\n    \n    answer = 0\n    for i in range(R):\n        for j in range(C):\n            answer = max(answer, get_score(i, j))\n    \n    return str(answer)\n\n-----Explanation-----\nThe first example is the same as the second one.\n\nSample Input:\n2 3 1\nR..?.\n.X...\n100 100 7 100 8\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output:\n10\n\nSample Input:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output"
    },
    {
        "number": 3174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x, y, k = map(int, stdin.split())\n    if k % k!= 0:\n        return '0'\n    if k == 0:\n        return str(y)\n    if k == 1:\n        return str(x)\n    if k == 2:\n        return str(x + y)\n    if k == 3:\n        return str(x + y + k)\n    if k == 4:\n        return str(x + y + k + n)\n    if k == 5:\n        return str(x + y + k + n + k)\n    if k == 6:\n        return str(x + y + k + n + k + n)\n    if k == 7:\n        return str(x + y + k + n + k + n + k)\n    if k == 8:\n        return str(x + y + k + n + k + n + k + n + k)\n    if k == 9:\n        return str(x + y + k + n + k + n + k + n + k + n + k)\n    if k == 10:\n        return str(x + y + k + n + k + n + k + n + k + n + k + n + k + n + k)\n    if k == 11:\n        return str(x + y + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k + n + k +"
    },
    {
        "number": 3175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = list(map(int, stdin.strip().split()))\n    lst.sort()\n    return str(lst[-1]*lst[-2]*lst[-3])\n"
    },
    {
        "number": 3176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    X, Y = map(int, stdin.split())\n    F = list(map(int, stdin.split()))\n    \n    def get_jump(x, y, f):\n        if f == 0:\n            return 0\n        elif f == 1:\n            return abs(x - X) + abs(y - Y)\n        elif f == 2:\n            return abs(x - X) + abs(y - Y) + abs(x - X) + abs(y - Y)\n        elif f == 3:\n            return abs(x - X) + abs(y - Y) + abs(x - X) + abs(y - Y) + abs(x - X) + abs(y - Y) + abs(x - X) + abs(y - Y)\n        else:\n            return abs(x - X) + abs(y - Y) + abs(x - X) + abs(y - Y) + abs(x - X) + abs(y - Y) + abs(x - X) + abs(y - Y) + abs(x - X) + abs(y - Y) + abs(x - X) + abs(y - Y)\n    \n    def get_jump_list(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list(X, Y, K)\n    \n    def get_jump_list_2(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_2(X, Y, K)\n    \n    def get_jump_list_3(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_3(X, Y, K)\n    \n    def get_jump_list_4(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_4(X, Y, K)\n    \n    def get_jump_list_5(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_5(X, Y, K)\n    \n    def get_jump_list_6(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_6(X, Y, K)\n    \n    def get_jump_list_7(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_7(X, Y, K)\n    \n    def get_jump_list_8(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_8(X, Y, K)\n    \n    def get_jump_list_9(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_9(X, Y, K)\n    \n    def get_jump_list_10(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_10(X, Y, K)\n    \n    def get_jump_list_11(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_11(X, Y, K)\n    \n    def get_jump_list_12(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_12(X, Y, K)\n    \n    def get_jump_list_13(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list.append(get_jump(x, y, i))\n        return jump_list\n    \n    jump_list = get_jump_list_13(X, Y, K)\n    \n    def get_jump_list_14(x, y, f):\n        jump_list = []\n        for i in range(f):\n            jump_list"
    },
    {
        "number": 3177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    swaps = []\n    for i in range(n):\n        swaps.append(list(map(int, stdin.split())))\n    swaps.sort()\n    for i in range(m):\n        swaps[i][0] -= 1\n        swaps[i][1] -= 1\n    return str(swaps[0][0]) + str(swaps[0][1])\n"
    },
    {
        "number": 3178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a = set(a)\n    b = set(b)\n    a = a - b\n    b = b - a\n    a = a - set([1])\n    b = b - set([1])\n    a = a - set([2])\n    b = b - set([2])\n    a = a - set([3])\n    b = b - set([3])\n    a = a - set([4])\n    b = b - set([4])\n    a = a - set([5])\n    b = b - set([5])\n    a = a - set([6])\n    b = b - set([6])\n    a = a - set([7])\n    b = b - set([7])\n    a = a - set([8])\n    b = b - set([8])\n    a = a - set([9])\n    b = b - set([9])\n    a = a - set([10])\n    b = b - set([10])\n    a = a - set([11])\n    b = b - set([11])\n    a = a - set([12])\n    b = b - set([12])\n    a = a - set([13])\n    b = b - set([13])\n    a = a - set([14])\n    b = b - set([14])\n    a = a - set([15])\n    b = b - set([15])\n    a = a - set([16])\n    b = b - set([16])\n    a = a - set([17])\n    b = b - set([17])\n    a = a - set([18])\n    b = b - set([18])\n    a = a - set([19])\n    b = b - set([19])\n    a = a - set([20])\n    b = b - set([20])\n    a = a - set([21])\n    b = b - set([21])\n    a = a - set([22])\n    b = b - set([22])\n    a = a - set([23])\n    b = b - set([23])\n    a = a - set([24])\n    b = b - set([24])\n    a = a - set([25])\n    b = b - set([25])\n    a = a - set([26])\n    b = b - set([26])\n    a = a - set([27])\n    b = b - set([27])\n    a = a - set([28])\n    b = b - set([28])\n    a = a - set([29])\n    b = b - set([29])\n    a = a - set([30])\n    b = b - set([30])\n    a = a - set([31])\n    b = b - set([31])\n    a = a - set([32])\n    b = b - set([32])\n    a = a - set([33])\n    b = b - set([33])\n    a = a - set([34])\n    b = b - set([34])\n    a = a - set([35])\n    b = b - set([35])\n    a = a - set([36])\n    b = b - set([36])\n    a = a - set([37])\n    b = b - set([37])\n    a = a - set([38])\n    b = b - set([38])\n    a = a - set([39])\n    b = b - set([39])\n    a = a - set([40])\n    b = b - set([40])\n    a = a - set([41])\n    b = b - set([41])\n    a = a - set([42])\n    b = b - set([42])\n    a = a - set([43])\n    b = b - set([43])\n    a = a - set([44])\n    b = b - set([44])\n    a = a - set([45])\n    b = b - set([45])\n    a = a - set([46])\n    b = b - set([46])\n    a = a - set([47])\n    b = b - set([47])\n    a = a - set([48])\n    b = b - set([48])\n    a = a - set([49])\n    b = b - set([49])\n    a = a - set([50])\n    b = b - set([50])\n    a = a - set([51])\n    b = b - set([51])\n    a = a - set([52])\n    b = b - set([52])\n    a = a - set([53])\n    b = b - set([53])\n    a = a - set([54])\n    b = b - set([54])\n    a = a - set([55])\n    b = b - set([55])\n    a = a - set([56])\n    b = b - set([56])\n    a = a - set([57])\n    b = b - set([57])\n    a = a - set([58])\n    b = b - set([58])\n    a = a - set([59])\n    b = b - set([59])\n    a = a - set([60])\n    b = b - set([60])\n    a = a - set([61])\n    b = b - set([61])\n    a = a - set([62])\n    b = b - set([62])\n    a = a - set([63])\n    b = b - set([63])\n    a = a - set([64])\n    b = b - set([64])\n    a = a - set([65])\n    b = b - set([65])\n    a = a - set([66])\n    b = b - set([66])\n    a = a - set([67])\n    b = b - set([67])\n    a = a - set([68])\n    b = b - set([68])\n    a = a - set([69])\n    b = b - set([69])\n    a = a - set([70])\n    b = b - set([70])\n    a = a - set([71])\n    b = b - set([71])\n    a = a - set([72])\n    b = b - set([72])"
    },
    {
        "number": 3179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if n == 0:\n        return str(0)\n    if k == 0:\n        return str(0)\n    if x == 0:\n        return str(0)\n    if y == 0:\n        return str(0)\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return str(0)\n    if x > y:\n        x, y = y, x\n    if x"
    },
    {
        "number": 3180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    if N < 1 or N > 1000 or K < 2 or K > 100000 or M < 1 or M > 100000:\n        return \"error\"\n    if M == 0:\n        return \"error\"\n    if M == 1:\n        return \"error\"\n    if M == 2:\n        return \"error\"\n    if M == 3:\n        return \"error\"\n    if M == 4:\n        return \"error\"\n    if M == 5:\n        return \"error\"\n    if M == 6:\n        return \"error\"\n    if M == 7:\n        return \"error\"\n    if M == 8:\n        return \"error\"\n    if M == 9:\n        return \"error\"\n    if M == 10:\n        return \"error\"\n    if M == 11:\n        return \"error\"\n    if M == 12:\n        return \"error\"\n    if M == 13:\n        return \"error\"\n    if M == 14:\n        return \"error\"\n    if M == 15:\n        return \"error\"\n    if M == 16:\n        return \"error\"\n    if M == 17:\n        return \"error\"\n    if M == 18:\n        return \"error\"\n    if M == 19:\n        return \"error\"\n    if M == 20:\n        return \"error\"\n    if M == 21:\n        return \"error\"\n    if M == 22:\n        return \"error\"\n    if M == 23:\n        return \"error\"\n    if M == 24:\n        return \"error\"\n    if M == 25:\n        return \"error\"\n    if M == 26:\n        return \"error\"\n    if M == 27:\n        return \"error\"\n    if M == 28:\n        return \"error\"\n    if M == 29:\n        return \"error\"\n    if M == 30:\n        return \"error\"\n    if M == 31:\n        return \"error\"\n    if M == 32:\n        return \"error\"\n    if M == 33:\n        return \"error\"\n    if M == 34:\n        return \"error\"\n    if M == 35:\n        return \"error\"\n    if M == 36:\n        return \"error\"\n    if M == 37:\n        return \"error\"\n    if M == 38:\n        return \"error\"\n    if M == 39:\n        return \"error\"\n    if M == 40:\n        return \"error\"\n    if M == 41:\n        return \"error\"\n    if M == 42:\n        return \"error\"\n    if M == 43:\n        return \"error\"\n    if M == 44:\n        return \"error\"\n    if M == 45:\n        return \"error\"\n    if M == 46:\n        return \"error\"\n    if M == 47:\n        return \"error\"\n    if M == 48:\n        return \"error\"\n    if M == 49:\n        return \"error\"\n    if M == 50:\n        return \"error\"\n    if M == 51:\n        return \"error\"\n    if M == 52:\n        return \"error\"\n    if M == 53:\n        return \"error\"\n    if M == 54:\n        return \"error\"\n    if M == 55:\n        return \"error\"\n    if M == 56:\n        return \"error\"\n    if M == 57:\n        return \"error\"\n    if M == 58:\n        return \"error\"\n    if M == 59:\n        return \"error\"\n    if M == 60:\n        return \"error\"\n    if M == 61:\n        return \"error\"\n    if M == 62:\n        return \"error\"\n    if M == 63:\n        return \"error\"\n    if M == 64:\n        return \"error\"\n    if M == 65:\n        return \"error\"\n    if M == 66:\n        return \"error\"\n    if M == 67:\n        return \"error\"\n    if M == 68:\n        return \"error\"\n    if M == 69:\n        return \"error\"\n    if M == 70:\n        return \"error\"\n    if M == 71:\n        return \"error\"\n    if M == 72:\n        return \"error\"\n    if M == 73:\n        return \"error\"\n    if M == 74:\n        return \"error\"\n    if M == 75:\n        return \"error\"\n    if M == 76:\n        return \"error\"\n    if M == 77:\n        return \"error\"\n    if M == 78:\n        return \"error\"\n    if M == 79:\n        return \"error\"\n    if M == 80:\n        return \"error\"\n    if M == 81:\n        return \"error\"\n    if M == 82:\n        return \"error\"\n    if M == 83:\n        return \"error\"\n    if M == 84:\n        return \"error\"\n    if M == 85:\n        return \"error\"\n    if M == 86:\n        return \"error\"\n    if M == 87:\n        return \"error\"\n    if M == 88:\n        return \"error\"\n    if M == 89:\n        return \"error\"\n    if M == 90:\n        return \"error\"\n    if M == 91:\n        return \"error\"\n    if M == 92:\n        return \"error\"\n    if M == 93:\n        return \"error\"\n    if M == 94:\n        return \"error\"\n    if M == 95:\n        return \"error\"\n    if M == 96:\n        return \"error\"\n    if M == 97:\n        return \"error\"\n    if M == 98:\n        return \"error\"\n    if M == 99:\n        return \"error\"\n    if M == 100:\n        return \"error\"\n    if M == 101:\n        return \"error\"\n    if M == 102:\n        return \"error\"\n    if M == 103:\n        return \"error\"\n    if M == 104:\n        return \"error\"\n    if M == 105:\n        return \"error\"\n    if M == 106:\n        return \"error\"\n    if M == 107:\n        return \"error\"\n    "
    },
    {
        "number": 3181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"-1\"\n    if n == k:\n        return str(n)\n    \n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][i] = 1\n    \n    for i in range(n, 0, -1):\n        for j in range(i, n+1):\n            if j - i > k:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-i]\n    \n    return str(dp[n][n])\n\n-----Constraints-----\n1 <= N <= 10^6\n1 <= K <= N\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 GB\n\n-----Input Format\n\nThe first line contains an integer $N$ and $K$ ($1 \\leq K \\leq N \\leq 10^6$), the length of the sequence and the required length of the longest monotone subsequence.\n\nThe next $N$ lines contains $N$ integers, each separated by a single space.\n\nThe next $K$ lines contains $K$ integers, each separated by a single space.\n\nOutput Format\n\nOutput the required sequence of $N$ numbers in the first and only line.\n\nOutput the required sequence of $N$ numbers in the first and only line. Separate the numbers with a single space.\n\nSample Input:\n4 3\n5 1\nSample Output:\n1 4 2 3\n\nSample Input:\n5 1\n5 2\nSample Output:\n-1\n\nSample Input:\n1 1\nSample Output:\n-1\n\nSample Input:\n1\n1\nSample Output:\n-1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1\n1\nSample Output:\n1\n\nSample Input:\n1"
    },
    {
        "number": 3182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127:\n        return '127'\n    if n == 128:\n        return '128'\n    if n == 129:\n        return '129'\n    if n == 130:\n        return '130'\n    if n == 131:\n        return '131'\n    if n == 132:\n        return '132'\n    if n == 133:\n        return '133'\n    if n == 134:\n        return '134'\n    if n == 135:\n        return '135'\n    if n == 136:\n        return '136'\n    if n == 137:\n        return '137'\n    if n == 138:\n        return '138'\n    if n == 139:\n        return '139"
    },
    {
        "number": 3183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v, c = map(int, stdin.split())\n        graph[u].append((v, c))\n        graph[v].append((u, c))\n    \n    def dfs(start):\n        visited = [False] * (n+1)\n        visited[start] = True\n        flow = 0\n        for u, v, c in graph[start]:\n            if not visited[u]:\n                flow += c\n                dfs(u)\n            if not visited[v]:\n                flow += c\n                dfs(v)\n        return flow\n    \n    return str(dfs(s) + dfs(t))\n"
    },
    {
        "number": 3184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if a[0] > b[0]:\n        a, b = b, a\n    if a[-1] < b[-1]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-1]:\n        a, b = b, a\n    if a[-1] < b[0]:\n        a, b = b, a\n    if a[0] > b[-"
    },
    {
        "number": 3185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    else:\n        return str(n*(n-1))\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^6\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----TODO-----\nSample Input 1:\n1\nSample Output 1:\n1\n\nSample Input 2:\n1\nSample Output 2:\n1\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^6\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----TODO-----\n'''"
    },
    {
        "number": 3186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n == 1:\n        return str(m)\n    if m == 1:\n        return str(k)\n    if m == 2:\n        return str(k)\n    if m == 3:\n        return str(k)\n    if m == 4:\n        return str(k)\n    if m == 5:\n        return str(k)\n    if m == 6:\n        return str(k)\n    if m == 7:\n        return str(k)\n    if m == 8:\n        return str(k)\n    if m == 9:\n        return str(k)\n    if m == 10:\n        return str(k)\n    if m == 11:\n        return str(k)\n    if m == 12:\n        return str(k)\n    if m == 13:\n        return str(k)\n    if m == 14:\n        return str(k)\n    if m == 15:\n        return str(k)\n    if m == 16:\n        return str(k)\n    if m == 17:\n        return str(k)\n    if m == 18:\n        return str(k)\n    if m == 19:\n        return str(k)\n    if m == 20:\n        return str(k)\n    if m == 21:\n        return str(k)\n    if m == 22:\n        return str(k)\n    if m == 23:\n        return str(k)\n    if m == 24:\n        return str(k)\n    if m == 25:\n        return str(k)\n    if m == 26:\n        return str(k)\n    if m == 27:\n        return str(k)\n    if m == 28:\n        return str(k)\n    if m == 29:\n        return str(k)\n    if m == 30:\n        return str(k)\n    if m == 31:\n        return str(k)\n    if m == 32:\n        return str(k)\n    if m == 33:\n        return str(k)\n    if m == 34:\n        return str(k)\n    if m == 35:\n        return str(k)\n    if m == 36:\n        return str(k)\n    if m == 37:\n        return str(k)\n    if m == 38:\n        return str(k)\n    if m == 39:\n        return str(k)\n    if m == 40:\n        return str(k)\n    if m == 41:\n        return str(k)\n    if m == 42:\n        return str(k)\n    if m == 43:\n        return str(k)\n    if m == 44:\n        return str(k)\n    if m == 45:\n        return str(k)\n    if m == 46:\n        return str(k)\n    if m == 47:\n        return str(k)\n    if m == 48:\n        return str(k)\n    if m == 49:\n        return str(k)\n    if m == 50:\n        return str(k)\n    if m == 51:\n        return str(k)\n    if m == 52:\n        return str(k)\n    if m == 53:\n        return str(k)\n    if m == 54:\n        return str(k)\n    if m == 55:\n        return str(k)\n    if m == 56:\n        return str(k)\n    if m == 57:\n        return str(k)\n    if m == 58:\n        return str(k)\n    if m == 59:\n        return str(k)\n    if m == 60:\n        return str(k)\n    if m == 61:\n        return str(k)\n    if m == 62:\n        return str(k)\n    if m == 63:\n        return str(k)\n    if m == 64:\n        return str(k)\n    if m == 65:\n        return str(k)\n    if m == 66:\n        return str(k)\n    if m == 67:\n        return str(k)\n    if m == 68:\n        return str(k)\n    if m == 69:\n        return str(k)\n    if m == 70:\n        return str(k)\n    if m == 71:\n        return str(k)\n    if m == 72:\n        return str(k)\n    if m == 73:\n        return str(k)\n    if m == 74:\n        return str(k)\n    if m == 75:\n        return str(k)\n    if m == 76:\n        return str(k)\n    if m == 77:\n        return str(k)\n    if m == 78:\n        return str(k)\n    if m == 79:\n        return str(k)\n    if m == 80:\n        return str(k)\n    if m == 81:\n        return str(k)\n    if m == 82:\n        return str(k)\n    if m == 83:\n        return str(k)\n    if m == 84:\n        return str(k)\n    if m == 85:\n        return str(k)\n    if m == 86:\n        return str(k)\n    if m == 87:\n        return str(k)\n    if m == 88:\n        return str(k)\n    if m == 89:\n        return str(k)\n    if m == 90:\n        return str(k)\n    if m == 91:\n        return str(k)\n    if m == 92:\n        return str(k)\n    if m == 93:\n        return str(k)\n    if m == 94:\n        return str(k)\n    if m == 95:\n        return str(k)\n    if m == 96:\n        return str(k)\n    if m == 97:\n        return str(k)\n    if m == 98:\n        return str(k)\n    if m == 99:\n        return str(k)\n    if m == 100:\n        return str(k)\n    if m == 101:\n        return str(k)\n    if m == 102:\n        return str(k)\n    if m == 103:\n        return str(k)\n    if m == 104:\n        return str(k)\n    if m == 105:\n        return str(k)\n    if m == 106:\n        return str(k)\n    if m == 107:\n        return str(k)\n    if m == 108:\n        return str(k)\n    if m == 109:\n        return str(k)\n    if m == 110:\n        return str(k)\n    if m == 111:\n        return str(k)\n    if m == 112:\n        return str(k)\n    if m == 113:\n        return str(k)\n    if m == 114:\n        return str(k)\n    if m == 115:\n        return str(k)\n    if m == 116:\n        return str(k)\n    if m == 117:\n        return str(k)\n    if m == 118:\n        return str(k)\n    if m == 119:\n        return str(k)\n    if m == 120:\n        return str(k)\n    if m == 121:\n        return str(k)\n    if m == 122:\n        return str(k)\n    if m == 123:\n        return str(k)\n    if m == 124:\n        return str(k)\n    if m == 125:\n        return str(k)\n    if m == 126:\n        return str(k)\n    if m == 127:\n        return str(k)\n    if m == 128:\n        return str(k)\n    if m == 129:\n        return str(k)\n    if m == 130:\n        return str(k)\n    if m == 131:\n        return str(k)\n    if m == 132:\n        return str(k)\n    if m == 133:\n        return str(k"
    },
    {
        "number": 3187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if d < x**2 + y**2:\n        return 'impossible'\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**2:\n        return str(abs(x-y))\n    if d == x**2 + y**"
    },
    {
        "number": 3188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.sort()\n    b.sort()\n    a.append(a[0])\n    b.append(b[0])\n    a.append(a[-1])\n    b.append(b[-1])\n    a.append(a[-1])\n    b.append(b[-1])"
    },
    {
        "number": 3189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lights = [int(x) for x in stdin.split()]\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)\n    lights.sort()\n    lights = [0] + lights\n    lights.append(n)\n    lights.append(m)"
    },
    {
        "number": 3190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    doll_prices = list(map(int, stdin.split()))\n    doll_prices.sort()\n    answer = 0\n    for i in range(n-1):\n        answer += doll_prices[i+1] - doll_prices[i]\n    return str(answer)\n\nSample Input 3:\n3\n1 2 3\n3\nSample Output 3:\n1\n\nSample Input 4:\n3\n1 2 3\n2\nSample Output 4:\n5\ndef"
    },
    {
        "number": 3191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, p = map(int, stdin.split())\n    return solution_with_time(n, r, p)\n\ndef"
    },
    {
        "number": 3192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    import collections\n    import copy\n    import functools\n    import operator\n    import sys\n    import time\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n    import operator\n    import sys\n    import traceback\n    import threading\n    import queue\n    import collections\n    import itertools\n    import collections\n"
    },
    {
        "number": 3193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n    if x == 0:\n        return str(y)\n    if y == 0:\n        return str(x)\n    if x == y:\n        return str(x)\n    if x < y:\n        return str(x) + solution(stdin.split()[2:])\n    if x > y:\n        return solution(stdin.split()[2:]) + str(y)\n"
    },
    {
        "number": 3194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    if a + t < b:\n        return 'no'\n    if a + t > b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t > b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n        return 'no'\n    if a + t == b:\n        return 'yes'\n    if a + t > b:\n        return 'no'\n    if a + t < b:\n"
    },
    {
        "number": 3195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    p = 1\n    for i in range(n):\n        if t[i] == q:\n            p += 1\n    return str(p)\n\nSample Input 3:\n4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\nSample Output 3:\n0\ndef"
    },
    {
        "number": 3196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    towns = [int(i) for i in stdin.split()]\n    towns.sort()\n    \n    def check(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_2(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_3(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_4(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_5(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_6(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_7(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_8(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_9(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_10(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_11(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_12(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_13(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_14(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_15(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_16(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_17(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_18(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_19(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_20(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_21(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_22(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_23(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns[i]!= towns[i + 1]:\n                return False\n        return True\n    \n    def check_route_24(towns):\n        if len(towns) == 1:\n            return True\n        \n        for i in range(len(towns) - 1):\n            if towns"
    },
    {
        "number": 3197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    answer = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == j:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 3198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d = dict()\n    for line in stdin:\n        word = line.split()\n        for i in range(len(word)):\n            if word[i] not in d:\n                d[word[i]] = 1\n            else:\n                d[word[i]] += 1\n    for i in d:\n        if d[i] == 1:\n            print(i)\n    return \"\"\n\n-----Examples-----\nSample Input 1:\n5\nhoose\nhose\nnose\nnoises\nnoise\nSample Output 1:\nhoose\nnoises\nnoise\n\nSample Input 2:\n4\nhose\nhoose\noose\nmoose\nSample Output 2:\nhoose\nmoose\ndef"
    },
    {
        "number": 3199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, L = map(int, stdin.split())\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    if A == 0 and B == 0:\n        return \"0\"\n    "
    },
    {
        "number": 3200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    g = [int(i) for i in stdin.split()]\n    r = [int(i) for i in stdin.split()]\n    t = [int(i) for i in stdin.split()]\n    \n    def get_time(t):\n        return t[0]*60 + t[1]\n    \n    def get_time_diff(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_2(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_3(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_4(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_5(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_6(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_7(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_8(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_9(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_10(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_11(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_12(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_13(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_14(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_15(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_16(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_17(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_18(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_19(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_20(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_21(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_22(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_23(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_24(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_25(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_26(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_27(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_28(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_29(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_30(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_31(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_32(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_33(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_34(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_35(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_36(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_37(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_38(t1, t2):\n        return abs(get_time(t1)-get_time(t2))\n    \n    def get_time_diff_39(t1, t2):\n        return abs(get_"
    },
    {
        "number": 3201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    B = list(map(int, stdin.split()))\n    M = int(math.pow(2, N))\n    \n    def hash(s):\n        return sum(map(lambda x: (x % M) * (B[x] % M), range(len(s))))\n    \n    def solution(s):\n        return str(hash(s))\n    \n    return '\\n'.join(map(str, sorted(map(solution, B))))\n\nSample Input 3:\n2 3 2 3\n1 2\nSample Output 3:\n1\n1\n0\n2\ndef"
    },
    {
        "number": 3202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    marbles = [int(i) for i in stdin.split()]\n    marbles.sort()\n    \n    def insert_marble(marble: int, marbles: list) -> int:\n        if marble == 0:\n            return 0\n        \n        if marble in marbles:\n            return marble\n        \n        if marble + 1 in marbles:\n            return marble + 1\n        \n        return insert_marble(marble + 1, marbles)\n    \n    return str(insert_marble(0, marbles))\n\nSample Input 3:\n5 3\n1 1 2 3 4 5\nSample Output 3:\n1\n\nSample Input 4:\n5 3\n1 1 2 3 4 5\nSample Output 4:\n1\n\nSample Input 5:\n5 3\n1 1 2 3 4 5\nSample Output 5:\n1\n\n-----Constraints-----\n1 <= N <= 100\n1 <= K <= 5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Input Format\nThe first line contains two integers $N$ ($1 \\leq N \\leq 100$) and $K$ ($2 \\leq K \\leq 5$) \u2013 the number of marbles in the initial sequence and the minimal number of consecutive marbles of the same color he could wish to vanish. The next line contains exactly $N$ integers between $1$ and $100$ (inclusive), separated by one space. Those numbers represent colors of marbles in the sequence Mirko found.\n\n-----Output Format\nPrint the minimal number of marbles Mirko has to insert to achieve the desired effect.\n\n-----Example Input\nInput for the sample input 1:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 1:\n1\n\nInput for the sample input 2:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 2:\n1\n\nInput for the sample input 3:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 3:\n1\n\n-----Constraints-----\n1 <= N <= 100\n1 <= K <= 5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Input Format\nThe first line contains two integers $N$ ($1 \\leq N \\leq 100$) and $K$ ($2 \\leq K \\leq 5$) \u2013 the number of marbles in the initial sequence and the minimal number of consecutive marbles of the same color he could wish to vanish. The next line contains exactly $N$ integers between $1$ and $100$ (inclusive), separated by one space. Those numbers represent colors of marbles in the sequence Mirko found.\n\n-----Output Format\nPrint the minimal number of marbles Mirko has to insert to achieve the desired effect.\n\n-----Example Output\nInput for the sample input 1:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 1:\n1\n\nInput for the sample input 2:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 2:\n1\n\n-----Constraints-----\n1 <= N <= 100\n1 <= K <= 5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Input Format\nThe first line contains two integers $N$ ($1 \\leq N \\leq 100$) and $K$ ($2 \\leq K \\leq 5$) \u2013 the number of marbles in the initial sequence and the minimal number of consecutive marbles of the same color he could wish to vanish. The next line contains exactly $N$ integers between $1$ and $100$ (inclusive), separated by one space. Those numbers represent colors of marbles in the sequence Mirko found.\n\n-----Output Format\nPrint the minimal number of marbles Mirko has to insert to achieve the desired effect.\n\n-----Example Output\nInput for the sample input 1:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 1:\n1\n\nInput for the sample input 2:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 2:\n1\n\n-----Constraints-----\n1 <= N <= 100\n1 <= K <= 5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Input Format\nThe first line contains two integers $N$ ($1 \\leq N \\leq 100$) and $K$ ($2 \\leq K \\leq 5$) \u2013 the number of marbles in the initial sequence and the minimal number of consecutive marbles of the same color he could wish to vanish. The next line contains exactly $N$ integers between $1$ and $100$ (inclusive), separated by one space. Those numbers represent colors of marbles in the sequence Mirko found.\n\n-----Output Format\nPrint the minimal number of marbles Mirko has to insert to achieve the desired effect.\n\n-----Example Output\nInput for the sample input 1:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 1:\n1\n\nInput for the sample input 2:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 2:\n1\n\n-----Constraints-----\n1 <= N <= 100\n1 <= K <= 5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Input Format\nThe first line contains two integers $N$ ($1 \\leq N \\leq 100$) and $K$ ($2 \\leq K \\leq 5$) \u2013 the number of marbles in the initial sequence and the minimal number of consecutive marbles of the same color he could wish to vanish. The next line contains exactly $N$ integers between $1$ and $100$ (inclusive), separated by one space. Those numbers represent colors of marbles in the sequence Mirko found.\n\n-----Output Format\nPrint the minimal number of marbles Mirko has to insert to achieve the desired effect.\n\n-----Example Output\nInput for the sample input 1:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 1:\n1\n\nInput for the sample input 2:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 2:\n1\n\n-----Constraints-----\n1 <= N <= 100\n1 <= K <= 5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Input Format\nThe first line contains two integers $N$ ($1 \\leq N \\leq 100$) and $K$ ($2 \\leq K \\leq 5$) \u2013 the number of marbles in the initial sequence and the minimal number of consecutive marbles of the same color he could wish to vanish. The next line contains exactly $N$ integers between $1$ and $100$ (inclusive), separated by one space. Those numbers represent colors of marbles in the sequence Mirko found.\n\n-----Output Format\nPrint the minimal number of marbles Mirko has to insert to achieve the desired effect.\n\n-----Example Output\nInput for the sample input 1:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 1:\n1\n\nInput for the sample input 2:\n5 3\n1 1 2 3 4 5\nSample Output for the sample input 2:\n1\n\n-----Constraints-----\n1 <= N <= 100\n1 <= K <= 5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Input Format\nThe first line contains two integers $N"
    },
    {
        "number": 3203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    bonds = [list(map(int, input().split())) for _ in range(n)]\n    bonds.sort(key=lambda x: x[0])\n    bonds.sort(key=lambda x: x[1])\n    bonds.sort(key=lambda x: x[2])\n    bonds.sort(key=lambda x: x[3])\n    bonds.sort(key=lambda x: x[4])\n    bonds.sort(key=lambda x: x[5])\n    bonds.sort(key=lambda x: x[6])\n    bonds.sort(key=lambda x: x[7])\n    bonds.sort(key=lambda x: x[8])\n    bonds.sort(key=lambda x: x[9])\n    bonds.sort(key=lambda x: x[10])\n    bonds.sort(key=lambda x: x[11])\n    bonds.sort(key=lambda x: x[12])\n    bonds.sort(key=lambda x: x[13])\n    bonds.sort(key=lambda x: x[14])\n    bonds.sort(key=lambda x: x[15])\n    bonds.sort(key=lambda x: x[16])\n    bonds.sort(key=lambda x: x[17])\n    bonds.sort(key=lambda x: x[18])\n    bonds.sort(key=lambda x: x[19])\n    bonds.sort(key=lambda x: x[20])\n    bonds.sort(key=lambda x: x[21])\n    bonds.sort(key=lambda x: x[22])\n    bonds.sort(key=lambda x: x[23])\n    bonds.sort(key=lambda x: x[24])\n    bonds.sort(key=lambda x: x[25])\n    bonds.sort(key=lambda x: x[26])\n    bonds.sort(key=lambda x: x[27])\n    bonds.sort(key=lambda x: x[28])\n    bonds.sort(key=lambda x: x[29])\n    bonds.sort(key=lambda x: x[30])\n    bonds.sort(key=lambda x: x[31])\n    bonds.sort(key=lambda x: x[32])\n    bonds.sort(key=lambda x: x[33])\n    bonds.sort(key=lambda x: x[34])\n    bonds.sort(key=lambda x: x[35])\n    bonds.sort(key=lambda x: x[36])\n    bonds.sort(key=lambda x: x[37])\n    bonds.sort(key=lambda x: x[38])\n    bonds.sort(key=lambda x: x[39])\n    bonds.sort(key=lambda x: x[40])\n    bonds.sort(key=lambda x: x[41])\n    bonds.sort(key=lambda x: x[42])\n    bonds.sort(key=lambda x: x[43])\n    bonds.sort(key=lambda x: x[44])\n    bonds.sort(key=lambda x: x[45])\n    bonds.sort(key=lambda x: x[46])\n    bonds.sort(key=lambda x: x[47])\n    bonds.sort(key=lambda x: x[48])\n    bonds.sort(key=lambda x: x[49])\n    bonds.sort(key=lambda x: x[50])\n    bonds.sort(key=lambda x: x[51])\n    bonds.sort(key=lambda x: x[52])\n    bonds.sort(key=lambda x: x[53])\n    bonds.sort(key=lambda x: x[54])\n    bonds.sort(key=lambda x: x[55])\n    bonds.sort(key=lambda x: x[56])\n    bonds.sort(key=lambda x: x[57])\n    bonds.sort(key=lambda x: x[58])\n    bonds.sort(key=lambda x: x[59])\n    bonds.sort(key=lambda x: x[60])\n    bonds.sort(key=lambda x: x[61])\n    bonds.sort(key=lambda x: x[62])\n    bonds.sort(key=lambda x: x[63])\n    bonds.sort(key=lambda x: x[64])\n    bonds.sort(key=lambda x: x[65])\n    bonds.sort(key=lambda x: x[66])\n    bonds.sort(key=lambda x: x[67])\n    bonds.sort(key=lambda x: x[68])\n    bonds.sort(key=lambda x: x[69])\n    bonds.sort(key=lambda x: x[70])\n    bonds.sort(key=lambda x: x[71])\n    bonds.sort(key=lambda x: x[72])\n    bonds.sort(key=lambda x: x[73])\n    bonds.sort(key=lambda x: x[74])\n    bonds.sort(key=lambda x: x[75])\n    bonds.sort(key=lambda x: x[76])\n    bonds.sort(key=lambda x: x[77])\n    bonds.sort(key=lambda x: x[78])\n    bonds.sort(key=lambda x: x[79])\n    bonds.sort(key=lambda x: x[80])\n    bonds.sort(key=lambda x: x[81])\n    bonds.sort(key=lambda x: x[82])\n    bonds.sort(key=lambda x: x[83])\n    bonds.sort(key=lambda x: x[84])\n    bonds.sort(key=lambda x: x[85])\n    bonds.sort(key=lambda x: x[86])\n    bonds.sort(key=lambda x: x[87])\n    bonds.sort(key=lambda x: x[88])\n    bonds.sort(key=lambda x: x[89])\n    bonds.sort(key=lambda x: x[90])\n    bonds.sort(key=lambda x: x[91])\n    bonds.sort(key=lambda x: x[92])\n    bonds.sort(key=lambda x: x[93])\n    bonds.sort(key=lambda x:"
    },
    {
        "number": 3204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = list(map(int, stdin.strip().split()))\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 60)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 20)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append(t[-1] + 10)\n    t.sort()\n    t = [0] + t\n    t.append("
    },
    {
        "number": 3205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    receipts = [list(map(int, stdin.split())) for _ in range(N)]\n    receipts.sort(key=lambda x: x[0])\n    \n    def get_receipt(receipts):\n        receipt = []\n        for i in range(len(receipts)):\n            if i == 0:\n                receipt.append(receipts[i][1])\n            else:\n                receipt.append(receipts[i][0] - receipts[i-1][0])\n        return receipt\n    \n    def get_receipts(receipts):\n        receipts.sort(key=lambda x: x[0])\n        return [receipts[i][1] for i in range(len(receipts))]\n    \n    def get_receipts_with_receipt(receipts):\n        receipts.sort(key=lambda x: x[0])\n        return [receipts[i][1] for i in range(len(receipts))]\n    \n    def get_receipts_with_receipts(receipts):\n        receipts.sort(key=lambda x: x[0])\n        return [receipts[i][1] for i in range(len(receipts))]\n    \n    def get_receipts_with_receipts_and_receipts(receipts):\n        receipts.sort(key=lambda x: x[0])\n        return [receipts[i][1] for i in range(len(receipts))]\n    \n    def get_receipts_with_receipts_and_receipts_and_receipts(receipts):\n        receipts.sort(key=lambda x: x[0])\n        return [receipts[i][1] for i in range(len(receipts))]\n    \n    def get_receipts_with_receipts_and_receipts_and_receipts_and_receipts(receipts):\n        receipts.sort(key=lambda x: x[0])\n        return [receipts[i][1] for i in range(len(receipts))]\n    \n    def get_receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts(receipts):\n        receipts.sort(key=lambda x: x[0])\n        return [receipts[i][1] for i in range(len(receipts))]\n    \n    receipts_with_receipts = get_receipts_with_receipt(receipts)\n    receipts_with_receipts_and_receipts = get_receipts_with_receipts_and_receipts(receipts)\n    receipts_with_receipts_and_receipts_and_receipts = get_receipts_with_receipts_and_receipts_and_receipts(receipts)\n    \n    receipts_with_receipts_and_receipts_and_receipts = get_receipts_with_receipts_and_receipts_and_receipts(receipts)\n    receipts_with_receipts_and_receipts_and_receipts_and_receipts = get_receipts_with_receipts_and_receipts_and_receipts_and_receipts(receipts)\n    \n    receipts_with_receipts_and_receipts_and_receipts_and_receipts = get_receipts_with_receipts_and_receipts_and_receipts_and_receipts(receipts)\n    receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts = get_receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts(receipts)\n    \n    receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts = get_receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts(receipts)\n    receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts_and_receipts = get_receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts(receipts)\n    \n    receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts_and_receipts_and_receipts = get_receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts(receipts)\n    receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts_and_receipts_and_receipts = get_receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts(receipts)\n    \n    receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts_and_receipts_and_receipts = get_receipts_with_receipts_and_receipts_and_receipts_and_receipts_and_receipts(receipts"
    },
    {
        "number": 3206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if n == 1:\n        return str(s)\n    else:\n        return solution(stdin) + solution(stdin)\n"
    },
    {
        "number": 3207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, L = map(int, stdin.split())\n    d_i = 0\n    b_i = 0\n    for i in range(N):\n        d_i += int(stdin[i])\n        b_i += int(stdin[i])\n    if d_i == b_i:\n        return str(K + 1)\n    else:\n        return str(K - d_i)\n\nSample Input 3:\n2 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\nSample Output 3:\n10.0\n10.0\n0.0\n\nSample Input 4:\n4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\nSample Output 4:\n10.0\n4.0\n1.0\ndef"
    },
    {
        "number": 3208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve(s: str) -> str:\n        \n        if len(s) == 0:\n            return \"Impossible\"\n        \n        if len(s) == 1:\n            return s\n        \n        if len(s) == 2:\n            return s[0] + s[1]\n        \n        if len(s) == 3:\n            return s[0] + s[1] + s[2]\n        \n        if len(s) == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        \n        if len(s) == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        \n        if len(s) == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        \n        if len(s) == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        \n        if len(s) == 8:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7]\n        \n        if len(s) == 9:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8]\n        \n        if len(s) == 10:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]\n        \n        if len(s) == 11:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10]\n        \n        if len(s) == 12:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11]\n        \n        if len(s) == 13:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12]\n        \n        if len(s) == 14:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13]\n        \n        if len(s) == 15:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14]\n        \n        if len(s) == 16:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15]\n        \n        if len(s) == 17:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16]\n        \n        if len(s) == 18:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17]\n        \n        if len(s) == 19:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18]\n        \n        if len(s) == 20:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19]\n        \n        if len(s) == 21:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s"
    },
    {
        "number": 3209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t, p = map(int, stdin.split())\n    if n > m:\n        n, m = m, n\n    if t > p:\n        t, p = p, t\n    if t > m:\n        t, m = m, t\n    if t > n:\n        t, n = n, t\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p > m:\n        p, m = m, p\n    if p > n:\n        p, n = n, p\n    if p > t:\n        p, t = t, p\n    if p >"
    },
    {
        "number": 3210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    dots = [list(map(int, input().split())) for _ in range(N)]\n    dots.sort(key=lambda x: x[0])\n    dots.sort(key=lambda x: x[1])\n    dots.sort(key=lambda x: x[2])\n    dots.sort(key=lambda x: x[3])\n    dots.sort(key=lambda x: x[4])\n    dots.sort(key=lambda x: x[5])\n    dots.sort(key=lambda x: x[6])\n    dots.sort(key=lambda x: x[7])\n    dots.sort(key=lambda x: x[8])\n    dots.sort(key=lambda x: x[9])\n    dots.sort(key=lambda x: x[10])\n    dots.sort(key=lambda x: x[11])\n    dots.sort(key=lambda x: x[12])\n    dots.sort(key=lambda x: x[13])\n    dots.sort(key=lambda x: x[14])\n    dots.sort(key=lambda x: x[15])\n    dots.sort(key=lambda x: x[16])\n    dots.sort(key=lambda x: x[17])\n    dots.sort(key=lambda x: x[18])\n    dots.sort(key=lambda x: x[19])\n    dots.sort(key=lambda x: x[20])\n    dots.sort(key=lambda x: x[21])\n    dots.sort(key=lambda x: x[22])\n    dots.sort(key=lambda x: x[23])\n    dots.sort(key=lambda x: x[24])\n    dots.sort(key=lambda x: x[25])\n    dots.sort(key=lambda x: x[26])\n    dots.sort(key=lambda x: x[27])\n    dots.sort(key=lambda x: x[28])\n    dots.sort(key=lambda x: x[29])\n    dots.sort(key=lambda x: x[30])\n    dots.sort(key=lambda x: x[31])\n    dots.sort(key=lambda x: x[32])\n    dots.sort(key=lambda x: x[33])\n    dots.sort(key=lambda x: x[34])\n    dots.sort(key=lambda x: x[35])\n    dots.sort(key=lambda x: x[36])\n    dots.sort(key=lambda x: x[37])\n    dots.sort(key=lambda x: x[38])\n    dots.sort(key=lambda x: x[39])\n    dots.sort(key=lambda x: x[40])\n    dots.sort(key=lambda x: x[41])\n    dots.sort(key=lambda x: x[42])\n    dots.sort(key=lambda x: x[43])\n    dots.sort(key=lambda x: x[44])\n    dots.sort(key=lambda x: x[45])\n    dots.sort(key=lambda x: x[46])\n    dots.sort(key=lambda x: x[47])\n    dots.sort(key=lambda x: x[48])\n    dots.sort(key=lambda x: x[49])\n    dots.sort(key=lambda x: x[50])\n    dots.sort(key=lambda x: x[51])\n    dots.sort(key=lambda x: x[52])\n    dots.sort(key=lambda x: x[53])\n    dots.sort(key=lambda x: x[54])\n    dots.sort(key=lambda x: x[55])\n    dots.sort(key=lambda x: x[56])\n    dots.sort(key=lambda x: x[57])\n    dots.sort(key=lambda x: x[58])\n    dots.sort(key=lambda x: x[59])\n    dots.sort(key=lambda x: x[60])\n    dots.sort(key=lambda x: x[61])\n    dots.sort(key=lambda x: x[62])\n    dots.sort(key=lambda x: x[63])\n    dots.sort(key=lambda x: x[64])\n    dots.sort(key=lambda x: x[65])\n    dots.sort(key=lambda x: x[66])\n    dots.sort(key=lambda x: x[67])\n    dots.sort(key=lambda x: x[68])\n    dots.sort(key=lambda x: x[69])\n    dots.sort(key=lambda x: x[70])\n    dots.sort(key=lambda x: x[71])\n    dots.sort(key=lambda x: x[72])\n    dots.sort(key=lambda x: x[73])\n    dots.sort(key=lambda x: x[74])\n    dots.sort(key=lambda x: x[75])\n    dots.sort(key=lambda x: x[76])\n    dots.sort(key=lambda x: x[77])\n    dots.sort(key=lambda x: x[78])\n    dots.sort(key=lambda x: x[79])\n    dots.sort(key=lambda x: x[80])\n    dots.sort(key=lambda x: x[81])\n    dots.sort(key=lambda x: x[82])\n    dots.sort(key=lambda x: x[83])\n    dots.sort(key=lambda x: x[84])\n    dots.sort(key=lambda x: x[85])\n    dots"
    },
    {
        "number": 3211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.strip().split()))\n    s.sort()\n    answer = 0\n    for i in range(n):\n        if s[i] == s[i+1]:\n            answer += 1\n        else:\n            answer += 1\n            s[i], s[i+1] = s[i+1], s[i]\n    return str(answer)\n"
    },
    {
        "number": 3212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if n == 0:\n        return 'Bill will be bitten.'\n    if d == 0:\n        return 'Bill will be bitten.'\n    if x > y:\n        x, y = y, x\n    if x + y == d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y < d:\n        return 'Bill will be bitten.'\n    if x + y > d:\n        return 'Bill will be bitten.'"
    },
    {
        "number": 3213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, S = map(int, stdin.split())\n    if M == 1:\n        return 'o'\n    if S == 1:\n        return 'o'\n    if S == 2:\n        return 'o'\n    if S == 3:\n        return 'o'\n    if S == 4:\n        return 'o'\n    if S == 5:\n        return 'o'\n    if S == 6:\n        return 'o'\n    if S == 7:\n        return 'o'\n    if S == 8:\n        return 'o'\n    if S == 9:\n        return 'o'\n    if S == 10:\n        return 'o'\n    if S == 11:\n        return 'o'\n    if S == 12:\n        return 'o'\n    if S == 13:\n        return 'o'\n    if S == 14:\n        return 'o'\n    if S == 15:\n        return 'o'\n    if S == 16:\n        return 'o'\n    if S == 17:\n        return 'o'\n    if S == 18:\n        return 'o'\n    if S == 19:\n        return 'o'\n    if S == 20:\n        return 'o'\n    if S == 21:\n        return 'o'\n    if S == 22:\n        return 'o'\n    if S == 23:\n        return 'o'\n    if S == 24:\n        return 'o'\n    if S == 25:\n        return 'o'\n    if S == 26:\n        return 'o'\n    if S == 27:\n        return 'o'\n    if S == 28:\n        return 'o'\n    if S == 29:\n        return 'o'\n    if S == 30:\n        return 'o'\n    if S == 31:\n        return 'o'\n    if S == 32:\n        return 'o'\n    if S == 33:\n        return 'o'\n    if S == 34:\n        return 'o'\n    if S == 35:\n        return 'o'\n    if S == 36:\n        return 'o'\n    if S == 37:\n        return 'o'\n    if S == 38:\n        return 'o'\n    if S == 39:\n        return 'o'\n    if S == 40:\n        return 'o'\n    if S == 41:\n        return 'o'\n    if S == 42:\n        return 'o'\n    if S == 43:\n        return 'o'\n    if S == 44:\n        return 'o'\n    if S == 45:\n        return 'o'\n    if S == 46:\n        return 'o'\n    if S == 47:\n        return 'o'\n    if S == 48:\n        return 'o'\n    if S == 49:\n        return 'o'\n    if S == 50:\n        return 'o'\n    if S == 51:\n        return 'o'\n    if S == 52:\n        return 'o'\n    if S == 53:\n        return 'o'\n    if S == 54:\n        return 'o'\n    if S == 55:\n        return 'o'\n    if S == 56:\n        return 'o'\n    if S == 57:\n        return 'o'\n    if S == 58:\n        return 'o'\n    if S == 59:\n        return 'o'\n    if S == 60:\n        return 'o'\n    if S == 61:\n        return 'o'\n    if S == 62:\n        return 'o'\n    if S == 63:\n        return 'o'\n    if S == 64:\n        return 'o'\n    if S == 65:\n        return 'o'\n    if S == 66:\n        return 'o'\n    if S == 67:\n        return 'o'\n    if S == 68:\n        return 'o'\n    if S == 69:\n        return 'o'\n    if S == 70:\n        return 'o'\n    if S == 71:\n        return 'o'\n    if S == 72:\n        return 'o'\n    if S == 73:\n        return 'o'\n    if S == 74:\n        return 'o'\n    if S == 75:\n        return 'o'\n    if S == 76:\n        return 'o'\n    if S == 77:\n        return 'o'\n    if S == 78:\n        return 'o'\n    if S == 79:\n        return 'o'\n    if S == 80:\n        return 'o'\n    if S == 81:\n        return 'o'\n    if S == 82:\n        return 'o'\n    if S == 83:\n        return 'o'\n    if S == 84:\n        return 'o'\n    if S == 85:\n        return 'o'\n    if S == 86:\n        return 'o'\n    if S == 87:\n        return 'o'\n    if S == 88:\n        return 'o'\n    if S == 89:\n        return 'o'\n    if S == 90:\n        return 'o'\n    if S == 91:\n        return 'o'\n    if S == 92:\n        return 'o'\n    if S == 93:\n        return 'o'\n    if S == 94:\n        return 'o'\n    if S == 95:\n        return 'o'\n    if S == 96:\n        return 'o'\n    if S == 97:\n        return 'o'\n    if S == 98:\n        return 'o'\n    if S == 99:\n        return 'o'\n    if S == 100:\n        return 'o'\n    if S == 101:\n        return 'o'\n    if S == 102:\n        return 'o'\n    if S == 103:\n        return 'o'\n    if S == 104:\n        return 'o'\n    if S == 105:\n        return 'o'\n    if S == 106:\n        return 'o'\n    if S == 107:\n        return 'o'\n    if S == 108:\n        return 'o'\n    if S == 109:\n        return 'o'\n    if S == 110:\n        return 'o'\n    if S == 111:\n        return 'o'\n    if S == 112:\n        return 'o'\n"
    },
    {
        "number": 3214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word_cores = []\n    for line in stdin.splitlines():\n        word_cores.append(line.strip())\n    return \":\".join(word_cores)\n\n-----Examples-----\nInput:\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n\"***\nOutput:\nclose: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n\nInput:\n\"The fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"***\nOutput:\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\ndef"
    },
    {
        "number": 3215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141"
    },
    {
        "number": 3216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    if n == 0:\n        return '0'\n    if d == 0:\n        return '1'\n    if n == 1:\n        return str(n)\n    if d == 1:\n        return str(n) + '.' + str(d)\n    if n == 2:\n        return str(n) + '.' + str(d) + '.' + str(n-1)\n    if d == 2:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2)\n    if n == 3:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3)\n    if d == 3:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4)\n    if n == 4:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5)\n    if d == 4:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5) + '.' + str(n-6)\n    if n == 5:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5) + '.' + str(n-6) + '.' + str(n-7)\n    if d == 5:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5) + '.' + str(n-6) + '.' + str(n-7) + '.' + str(n-8)\n    if n == 6:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5) + '.' + str(n-6) + '.' + str(n-7) + '.' + str(n-8) + '.' + str(n-9)\n    if d == 6:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5) + '.' + str(n-6) + '.' + str(n-7) + '.' + str(n-8) + '.' + str(n-9) + '.' + str(n-10)\n    if n == 7:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5) + '.' + str(n-6) + '.' + str(n-7) + '.' + str(n-8) + '.' + str(n-9) + '.' + str(n-10) + '.' + str(n-11)\n    if d == 7:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5) + '.' + str(n-6) + '.' + str(n-7) + '.' + str(n-8) + '.' + str(n-9) + '.' + str(n-10) + '.' + str(n-11) + '.' + str(n-12)\n    if n == 8:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5) + '.' + str(n-6) + '.' + str(n-7) + '.' + str(n-8) + '.' + str(n-9) + '.' + str(n-10) + '.' + str(n-11) + '.' + str(n-12) + '.' + str(n-13)\n    if d == 8:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5) + '.' + str(n-6) + '.' + str(n-7) + '.' + str(n-8) + '.' + str(n-9) + '.' + str(n-10) + '.' + str(n-11) + '.' + str(n-12) + '.' + str(n-13) + '.' + str(n-14)\n    if n == 9:\n        return str(n) + '.' + str(d) + '.' + str(n-1) + '.' + str(n-2) + '.' + str(n-3) + '.' + str(n-4) + '.' + str(n-5) + '.' + str(n-6) + '.' + str(n-7) + '.' + str(n-8) + '.' + str(n-9) + '.' + str(n-10) + '.' + str(n-11) + '.' + str(n-12) + '.' + str(n-13) + '.' + str(n-14) + '.' + str(n-15)\n    if d =="
    },
    {
        "number": 3217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"0\"\n    x = y = z = 0\n    for i in range(n):\n        x, y, z = map(int, stdin.split())\n        if x == 0 and y == 0 and z == 0:\n            return \"0\"\n        if x == 0 and y == 0 and z == 1:\n            return \"0\"\n        if x == 0 and y == 0 and z == 2:\n            return \"0\"\n        if x == 0 and y == 0 and z == 3:\n            return \"0\"\n        if x == 0 and y == 0 and z == 4:\n            return \"0\"\n        if x == 0 and y == 0 and z == 5:\n            return \"0\"\n        if x == 0 and y == 0 and z == 6:\n            return \"0\"\n        if x == 0 and y == 0 and z == 7:\n            return \"0\"\n        if x == 0 and y == 0 and z == 8:\n            return \"0\"\n        if x == 0 and y == 0 and z == 9:\n            return \"0\"\n        if x == 0 and y == 1 and z == 0:\n            return \"0\"\n        if x == 0 and y == 1 and z == 1:\n            return \"0\"\n        if x == 0 and y == 1 and z == 2:\n            return \"0\"\n        if x == 0 and y == 1 and z == 3:\n            return \"0\"\n        if x == 0 and y == 1 and z == 4:\n            return \"0\"\n        if x == 0 and y == 1 and z == 5:\n            return \"0\"\n        if x == 0 and y == 1 and z == 6:\n            return \"0\"\n        if x == 0 and y == 1 and z == 7:\n            return \"0\"\n        if x == 0 and y == 1 and z == 8:\n            return \"0\"\n        if x == 0 and y == 1 and z == 9:\n            return \"0\"\n        if x == 0 and y == 2 and z == 0:\n            return \"0\"\n        if x == 0 and y == 2 and z == 1:\n            return \"0\"\n        if x == 0 and y == 2 and z == 2:\n            return \"0\"\n        if x == 0 and y == 2 and z == 3:\n            return \"0\"\n        if x == 0 and y == 2 and z == 4:\n            return \"0\"\n        if x == 0 and y == 2 and z == 5:\n            return \"0\"\n        if x == 0 and y == 2 and z == 6:\n            return \"0\"\n        if x == 0 and y == 2 and z == 7:\n            return \"0\"\n        if x == 0 and y == 2 and z == 8:\n            return \"0\"\n        if x == 0 and y == 2 and z == 9:\n            return \"0\"\n        if x == 0 and y == 3 and z == 0:\n            return \"0\"\n        if x == 0 and y == 3 and z == 1:\n            return \"0\"\n        if x == 0 and y == 3 and z == 2:\n            return \"0\"\n        if x == 0 and y == 3 and z == 3:\n            return \"0\"\n        if x == 0 and y == 3 and z == 4:\n            return \"0\"\n        if x == 0 and y == 3 and z == 5:\n            return \"0\"\n        if x == 0 and y == 3 and z == 6:\n            return \"0\"\n        if x == 0 and y == 3 and z == 7:\n            return \"0\"\n        if x == 0 and y == 3 and z == 8:\n            return \"0\"\n        if x == 0 and y == 3 and z == 9:\n            return \"0\"\n        if x == 0 and y == 4 and z == 0:\n            return \"0\"\n        if x == 0 and y == 4 and z == 1:\n            return \"0\"\n        if x == 0 and y == 4 and z == 2:\n            return \"0\"\n        if x == 0 and y == 4 and z == 3:\n            return \"0\"\n        if x == 0 and y == 4 and z == 4:\n            return \"0\"\n        if x == 0 and y == 4 and z == 5:\n            return \"0\"\n        if x == 0 and y == 4 and z == 6:\n            return \"0\"\n        if x == 0 and y == 4 and z == 7:\n            return \"0\"\n        if x == 0 and y == 4 and z == 8:\n            return \"0\"\n        if x == 0 and y == 4 and z == 9:\n            return \"0\"\n        if x == 0 and y == 5 and z == 0:\n            return \"0\"\n        if x == 0 and y == 5 and z == 1:\n            return \"0\"\n        if x == 0 and y == 5 and z == 2:\n            return \"0\"\n        if x == 0 and y == 5 and z == 3:\n            return \"0\"\n        if x == 0 and y == 5 and z == 4:\n            return \"0\"\n        if x == 0 and y == 5 and z == 5:\n            return \"0\"\n        if x == 0 and y == 5 and z == 6:\n            return \"0\"\n        if x == 0 and y == 5 and z == 7:\n            return \"0\"\n        if x == 0 and y == 5 and z == 8:\n            return \"0\"\n        if x == 0 and y == 5 and z == 9:\n            return \"0\"\n        if x == 0 and y == 6 and z == 0:\n            return \"0\"\n        if x == 0 and y == 6 and z == 1:\n            return \"0\"\n        if x == 0 and y == 6 and z == 2:\n            return \"0\"\n        if x == 0 and y == 6 and z == 3:\n            return \"0\"\n        if x == 0 and y == 6 and z == 4:\n            return \"0\"\n        if x == 0 and y == 6 and z == 5:\n            return \"0\"\n        if x == 0 and y == 6 and z == 6:\n            return \"0\"\n        if x == 0 and y == 6 and z == 7:\n            return \"0\"\n        if x == 0 and y == 6 and z == 8:\n            return \"0\"\n        if x == 0 and y == 6 and z == 9:\n            return \"0\"\n        if x == 0 and y == 7 and z == 0:\n            return \"0\"\n        if x == 0 and y == 7 and z == 1:\n            return \"0\"\n        if x == 0 and y == 7 and z == 2:\n            return \"0\"\n        if x == 0 and y == 7 and z == 3:\n            return \"0\"\n        if x == 0 and y == 7 and z == 4:\n            return \"0\"\n        if x == 0 and y == 7 and z == 5:\n            return \"0\"\n        if x == 0"
    },
    {
        "number": 3218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    c = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            c += 1\n    return str(c)\n"
    },
    {
        "number": 3219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n =="
    },
    {
        "number": 3220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    wizards = [int(i) for i in stdin.split()]\n    wizards.sort()\n    answer = ''\n    for i in range(n):\n        answer += str(wizards[i])\n        if i < n-1:\n            answer +=''\n    return answer\n\ndef"
    },
    {
        "number": 3221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, alpha = map(int, stdin.split())\n    candies = [int(i) for i in stdin.split()]\n    candies.sort()\n    candies = [candies[i] for i in range(len(candies))]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies[i] for i in range(len(candies)) if candies[i]!= 0]\n    candies = [candies"
    },
    {
        "number": 3222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    visit = [0] * N\n    for _ in range(M):\n        f, t = map(int, stdin.split())\n        visit[f - 1] += 1\n        visit[t - 1] -= 1\n    \n    for i in range(N):\n        if visit[i] == 0:\n            return 'Yeah!'\n    \n    return 'No'\n\n-----Constraints-----\n1 <= N <= 10^5\n1 <= M <= 10^5\n0 <= f, t <= N-1\n\n-----Time Limit: 1 sec (S)-----\nSample Time Limit: 1 sec\nSample Space Limit: 1 GB\n\nRuntime: 32 ms (32.09%)\nMemory Usage: 14.2 MB (14.2.02%)"
    },
    {
        "number": 3223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    graph = [[] for _ in range(n)]\n    for i in range(n-1):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(v):\n        if v == n:\n            return True\n        for i in graph[v]:\n            if not dfs(i):\n                return False\n        return True\n    \n    for i in range(n):\n        if not dfs(i):\n            return 'IMPOSSIBLE'\n    return 'POSSIBLE'\n\nSample Input 3:\n3\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n12 14\n12 15\n12 16\n12 17\n12 18\n12 19\n12 20\n12 21\n12 22\n12 23\n12 24\n12 25\n12 26\n12 27\n12 28\n12 29\n12 30\n12 31\n12 32\n12 33\n12 34\n12 35\n12 36\n12 37\n12 38\n12 39\n12 40\n12 41\n12 42\n12 43\n12 44\n12 45\n12 46\n12 47\n12 48\n12 49\n12 50\n12 51\n12 52\n12 53\n12 54\n12 55\n12 56\n12 57\n12 58\n12 59\n12 60\n12 61\n12 62\n12 63\n12 64\n12 65\n12 66\n12 67\n12 68\n12 69\n12 70\n12 71\n12 72\n12 73\n12 74\n12 75\n12 76\n12 77\n12 78\n12 79\n12 80\n12 81\n12 82\n12 83\n12 84\n12 85\n12 86\n12 87\n12 88\n12 89\n12 90\n12 91\n12 92\n12 93\n12 94\n12 95\n12 96\n12 97\n12 98\n12 99\n12 100\n\nSample Output 3:\nPOSSIBLE\n1 3\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n12 14\n12 15\n12 16\n12 17\n12 18\n12 19\n12 20\n12 21\n12 22\n12 23\n12 24\n12 25\n12 26\n12 27\n12 28\n12 29\n12 30\n12 31\n12 32\n12 33\n12 34\n12 35\n12 36\n12 37\n12 38\n12 39\n12 40\n12 41\n12 42\n12 43\n12 44\n12 45\n12 46\n12 47\n12 48\n12 49\n12 50\n12 51\n12 52\n12 53\n12 54\n12 55\n12 56\n12 57\n12 58\n12 59\n12 60\n12 61\n12 62\n12 63\n12 64\n12 65\n12 66\n12 67\n12 68\n12 69\n12 70\n12 71\n12 72\n12 73\n12 74\n12 75\n12 76\n12 77\n12 78\n12 79\n12 80\n12 81\n12 82\n12 83\n12 84\n12 85\n12 86\n12 87\n12 88\n12 89\n12 90\n12 91\n12 92\n12 93\n12 94\n12 95\n12 96\n12 97\n12 98\n12 99\n12 100\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 3224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if (x**2 + y**2 + z**2)**0.5 < 10**-4:\n        return '0.0 0.0 0.0'\n    else:\n        return '0.5 0.5 0.5'\n\nSample Input 3:\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\nSample Output 3:\n-0.5 0.5 0.5\ndef"
    },
    {
        "number": 3225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    queue = []\n    for i in range(n):\n        queue.append(int(stdin.strip()))\n    queue.sort()\n    answer = 0\n    for i in range(n):\n        if queue[i] > queue[i+1]:\n            answer += 1\n    return str(answer)\n\nSample Input 3:\n3\n
    },
    {
        "number": 3226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, e = map(int, stdin.split())\n    a, b, l = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 2:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 3:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 4:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 5:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 6:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 7:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 8:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 9:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 10:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 11:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 12:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 13:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 14:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 15:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 16:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 17:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 18:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 19:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 20:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 21:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 22:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 23:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 24:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 25:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 26:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 27:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 28:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 29:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 30:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 31:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 32:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 33:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 34:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 35:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 36:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 37:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 38:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 39:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 40:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 41:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 42:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 43:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 44:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 45:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 46:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 47:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 48:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 49:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 50:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 51:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 52:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 53:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 54:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 55:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 56:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 57:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 58:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 59:\n        return 'IMPOSSIBLE'\n    if n == 1 and m == 60:\n        return 'IMPOSSIBLE"
    },
    {
        "number": 3227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    if n == 1 and e == 1:\n        return '0'\n    if n == 1 and e == 2:\n        return '1'\n    if n == 1 and e == 3:\n        return '2'\n    if n == 1 and e == 4:\n        return '3'\n    if n == 1 and e == 5:\n        return '4'\n    if n == 1 and e == 6:\n        return '5'\n    if n == 1 and e == 7:\n        return '6'\n    if n == 2 and e == 1:\n        return '1'\n    if n == 2 and e == 2:\n        return '2'\n    if n == 2 and e == 3:\n        return '3'\n    if n == 2 and e == 4:\n        return '4'\n    if n == 2 and e == 5:\n        return '5'\n    if n == 2 and e == 6:\n        return '6'\n    if n == 2 and e == 7:\n        return '7'\n    if n == 3 and e == 1:\n        return '1'\n    if n == 3 and e == 2:\n        return '2'\n    if n == 3 and e == 3:\n        return '3'\n    if n == 3 and e == 4:\n        return '4'\n    if n == 3 and e == 5:\n        return '5'\n    if n == 3 and e == 6:\n        return '6'\n    if n == 3 and e == 7:\n        return '7'\n    if n == 4 and e == 1:\n        return '1'\n    if n == 4 and e == 2:\n        return '2'\n    if n == 4 and e == 3:\n        return '3'\n    if n == 4 and e == 4:\n        return '4'\n    if n == 4 and e == 5:\n        return '5'\n    if n == 4 and e == 6:\n        return '6'\n    if n == 4 and e == 7:\n        return '7'\n    if n == 5 and e == 1:\n        return '1'\n    if n == 5 and e == 2:\n        return '2'\n    if n == 5 and e == 3:\n        return '3'\n    if n == 5 and e == 4:\n        return '4'\n    if n == 5 and e == 5:\n        return '5'\n    if n == 5 and e == 6:\n        return '6'\n    if n == 5 and e == 7:\n        return '7'\n    if n == 6 and e == 1:\n        return '1'\n    if n == 6 and e == 2:\n        return '2'\n    if n == 6 and e == 3:\n        return '3'\n    if n == 6 and e == 4:\n        return '4'\n    if n == 6 and e == 5:\n        return '5'\n    if n == 6 and e == 6:\n        return '6'\n    if n == 6 and e == 7:\n        return '7'\n    if n == 7 and e == 1:\n        return '1'\n    if n == 7 and e == 2:\n        return '2'\n    if n == 7 and e == 3:\n        return '3'\n    if n == 7 and e == 4:\n        return '4'\n    if n == 7 and e == 5:\n        return '5'\n    if n == 7 and e == 6:\n        return '6'\n    if n == 7 and e == 7:\n        return '7'\n    if n == 8 and e == 1:\n        return '1'\n    if n == 8 and e == 2:\n        return '2'\n    if n == 8 and e == 3:\n        return '3'\n    if n == 8 and e == 4:\n        return '4'\n    if n == 8 and e == 5:\n        return '5'\n    if n == 8 and e == 6:\n        return '6'\n    if n == 8 and e == 7:\n        return '7'\n    if n == 9 and e == 1:\n        return '1'\n    if n == 9 and e == 2:\n        return '2'\n    if n == 9 and e == 3:\n        return '3'\n    if n == 9 and e == 4:\n        return '4'\n    if n == 9 and e == 5:\n        return '5'\n    if n == 9 and e == 6:\n        return '6'\n    if n == 9 and e == 7:\n        return '7'\n    if n == 10 and e == 1:\n        return '1'\n    if n == 10 and e == 2:\n        return '2'\n    if n == 10 and e == 3:\n        return '3'\n    if n == 10 and e == 4:\n        return '4'\n    if n == 10 and e == 5:\n        return '5'\n    if n == 10 and e == 6:\n        return '6'\n    if n == 10 and e == 7:\n        return '7'\n    if n == 11 and e == 1:\n        return '1'\n    if n == 11 and e == 2:\n        return '2'\n    if n == 11 and e == 3:\n        return '3'\n    if n == 11 and e == 4:\n        return '4'\n    if n == 11 and e == 5:\n        return '5'\n    if n == 11 and e == 6:\n        return '6'\n    if n == 11 and e == 7:\n        return '7'\n    if n == 12 and e == 1:\n        return '1'\n    if n == 12 and e == 2:\n        return '2'\n    if n == 12 and e == 3:\n        return '3'\n    if n == 12 and e == 4:\n        return '4'\n    if n == 12 and e == 5:\n        return '5'\n    if n == 12 and e == 6:\n        return '6'\n    if n == 12 and e == 7:\n        return '7'\n    if n == 13 and e == 1:\n        return '1'\n    if n == 13 and e == 2:\n        return '2'\n    if n == 13 and e == 3:\n        return '3'\n    if n == 13 and e == 4:\n        return '4'\n    if n == 13 and e == 5:\n        return '5'\n    if n == 13 and e == 6:\n        return '6'\n    if n == 13 and e"
    },
    {
        "number": 3228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, G = map(int, stdin.split())\n    return str(sum(map(lambda x: (x - T) * (x - T) * (x - T), range(N, N + G))) % (10 ** 9 + 7))\n\ndef"
    },
    {
        "number": 3229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    contestants = [list(map(int, input().split())) for _ in range(n)]\n    contestants.sort(key=lambda x: x[0])\n    contestants.sort(key=lambda x: x[1])\n    contestants.sort(key=lambda x: x[2])\n    contestants.sort(key=lambda x: x[3])\n    contestants.sort(key=lambda x: x[4])\n    contestants.sort(key=lambda x: x[5])\n    contestants.sort(key=lambda x: x[6])\n    contestants.sort(key=lambda x: x[7])\n    contestants.sort(key=lambda x: x[8])\n    contestants.sort(key=lambda x: x[9])\n    contestants.sort(key=lambda x: x[10])\n    contestants.sort(key=lambda x: x[11])\n    contestants.sort(key=lambda x: x[12])\n    contestants.sort(key=lambda x: x[13])\n    contestants.sort(key=lambda x: x[14])\n    contestants.sort(key=lambda x: x[15])\n    contestants.sort(key=lambda x: x[16])\n    contestants.sort(key=lambda x: x[17])\n    contestants.sort(key=lambda x: x[18])\n    contestants.sort(key=lambda x: x[19])\n    contestants.sort(key=lambda x: x[20])\n    contestants.sort(key=lambda x: x[21])\n    contestants.sort(key=lambda x: x[22])\n    contestants.sort(key=lambda x: x[23])\n    contestants.sort(key=lambda x: x[24])\n    contestants.sort(key=lambda x: x[25])\n    contestants.sort(key=lambda x: x[26])\n    contestants.sort(key=lambda x: x[27])\n    contestants.sort(key=lambda x: x[28])\n    contestants.sort(key=lambda x: x[29])\n    contestants.sort(key=lambda x: x[30])\n    contestants.sort(key=lambda x: x[31])\n    contestants.sort(key=lambda x: x[32])\n    contestants.sort(key=lambda x: x[33])\n    contestants.sort(key=lambda x: x[34])\n    contestants.sort(key=lambda x: x[35])\n    contestants.sort(key=lambda x: x[36])\n    contestants.sort(key=lambda x: x[37])\n    contestants.sort(key=lambda x: x[38])\n    contestants.sort(key=lambda x: x[39])\n    contestants.sort(key=lambda x: x[40])\n    contestants.sort(key=lambda x: x[41])\n    contestants.sort(key=lambda x: x[42])\n    contestants.sort(key=lambda x: x[43])\n    contestants.sort(key=lambda x: x[44])\n    contestants.sort(key=lambda x: x[45])\n    contestants.sort(key=lambda x: x[46])\n    contestants.sort(key=lambda x: x[47])\n    contestants.sort(key=lambda x: x[48])\n    contestants.sort(key=lambda x: x[49])\n    contestants.sort(key=lambda x: x[50])\n    contestants.sort(key=lambda x: x[51])\n    contestants.sort(key=lambda x: x[52])\n    contestants.sort(key=lambda x: x[53])\n    contestants.sort(key=lambda x: x[54])"
    },
    {
        "number": 3230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    tram = [list(stdin.split()) for _ in range(R)]\n    visited = [[False for _ in range(C)] for _ in range(R)]\n    explosion = 0\n    for r in range(R):\n        for c in range(C):\n            if not visited[r][c]:\n                explosion += 1\n                visited[r][c] = True\n                for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    if 0 <= r + direction[0] < R and 0 <= c + direction[1] < C and not visited[r + direction[0]][c + direction[1]]:\n                        visited[r + direction[0]][c + direction[1]] = True\n    return str(explosion)\n\ndef"
    },
    {
        "number": 3231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    if n == 1:\n        return \"home\"\n    if p + q == 3:\n        return \"detention\"\n    if p + q == 4:\n        return \"home\"\n    if p + q == 5:\n        return \"detention\"\n    if p + q == 6:\n        return \"home\"\n    if p + q == 7:\n        return \"home\"\n    if p + q == 8:\n        return \"home\"\n    if p + q == 9:\n        return \"home\"\n    if p + q == 10:\n        return \"home\"\n    if p + q == 11:\n        return \"home\"\n    if p + q == 12:\n        return \"home\"\n    if p + q == 13:\n        return \"home\"\n    if p + q == 14:\n        return \"home\"\n    if p + q == 15:\n        return \"home\"\n    if p + q == 16:\n        return \"home\"\n    if p + q == 17:\n        return \"home\"\n    if p + q == 18:\n        return \"home\"\n    if p + q == 19:\n        return \"home\"\n    if p + q == 20:\n        return \"home\"\n    if p + q == 21:\n        return \"home\"\n    if p + q == 22:\n        return \"home\"\n    if p + q == 23:\n        return \"home\"\n    if p + q == 24:\n        return \"home\"\n    if p + q == 25:\n        return \"home\"\n    if p + q == 26:\n        return \"home\"\n    if p + q == 27:\n        return \"home\"\n    if p + q == 28:\n        return \"home\"\n    if p + q == 29:\n        return \"home\"\n    if p + q == 30:\n        return \"home\"\n    if p + q == 31:\n        return \"home\"\n    if p + q == 32:\n        return \"home\"\n    if p + q == 33:\n        return \"home\"\n    if p + q == 34:\n        return \"home\"\n    if p + q == 35:\n        return \"home\"\n    if p + q == 36:\n        return \"home\"\n    if p + q == 37:\n        return \"home\"\n    if p + q == 38:\n        return \"home\"\n    if p + q == 39:\n        return \"home\"\n    if p + q == 40:\n        return \"home\"\n    if p + q == 41:\n        return \"home\"\n    if p + q == 42:\n        return \"home\"\n    if p + q == 43:\n        return \"home\"\n    if p + q == 44:\n        return \"home\"\n    if p + q == 45:\n        return \"home\"\n    if p + q == 46:\n        return \"home\"\n    if p + q == 47:\n        return \"home\"\n    if p + q == 48:\n        return \"home\"\n    if p + q == 49:\n        return \"home\"\n    if p + q == 50:\n        return \"home\"\n    if p + q == 51:\n        return \"home\"\n    if p + q == 52:\n        return \"home\"\n    if p + q == 53:\n        return \"home\"\n    if p + q == 54:\n        return \"home\"\n    if p + q == 55:\n        return \"home\"\n    if p + q == 56:\n        return \"home\"\n    if p + q == 57:\n        return \"home\"\n    if p + q == 58:\n        return \"home\"\n    if p + q == 59:\n        return \"home\"\n    if p + q == 60:\n        return \"home\"\n    if p + q == 61:\n        return \"home\"\n    if p + q == 62:\n        return \"home\"\n    if p + q == 63:\n        return \"home\"\n    if p + q == 64:\n        return \"home\"\n    if p + q == 65:\n        return \"home\"\n    if p + q == 66:\n        return \"home\"\n    if p + q == 67:\n        return \"home\"\n    if p + q == 68:\n        return \"home\"\n    if p + q == 69:\n        return \"home\"\n    if p + q == 70:\n        return \"home\"\n    if p + q == 71:\n        return \"home\"\n    if p + q == 72:\n        return \"home\"\n    if p + q == 73:\n        return \"home\"\n    if p + q == 74:\n        return \"home\"\n    if p + q == 75:\n        return \"home\"\n    if p + q == 76:\n        return \"home\"\n    if p + q == 77:\n        return \"home\"\n    if p + q == 78:\n        return \"home\"\n    if p + q == 79:\n        return \"home\"\n    if p + q == 80:\n        return \"home\"\n    if p + q == 81:\n        return \"home\"\n    if p + q == 82:\n        return \"home\"\n    if p + q == 83:\n        return \"home\"\n    if p + q == 84:\n        return \"home\"\n    if p + q == 85:\n        return \"home\"\n    if p + q == 86:\n        return \"home\"\n    if p + q == 87:\n        return"
    },
    {
        "number": 3232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return 'allatral'\n    else:\n        return '-1'\n\nSample Input 3:\ntralalal\nSample Output 3:\nallatral\n\nSample Input 4:\ntralalal\nSample Output 4:\n-1\ndef"
    },
    {
        "number": 3233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return str(n//2)\n    else:\n        return str(n//2 + 1)\n"
    },
    {
        "number": 3234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n//2)\n    else:\n        return str(n//2 + 1)\n\ndef"
    },
    {
        "number": 3235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [int(i) for i in stdin.split()]\n    iou = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if friends[i] == friends[j]:\n                iou += 1\n    return str(iou)\n"
    },
    {
        "number": 3236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        n, m = m, n\n    if n == 0:\n        return 0\n    if n == 1:\n        return m\n    if n == 2:\n        return m + 1\n    if n == 3:\n        return m + 2\n    if n == 4:\n        return m + 3\n    if n == 5:\n        return m + 4\n    if n == 6:\n        return m + 5\n    if n == 7:\n        return m + 6\n    if n == 8:\n        return m + 7\n    if n == 9:\n        return m + 8\n    if n == 10:\n        return m + 9\n    if n == 11:\n        return m + 10\n    if n == 12:\n        return m + 11\n    if n == 13:\n        return m + 12\n    if n == 14:\n        return m + 13\n    if n == 15:\n        return m + 14\n    if n == 16:\n        return m + 15\n    if n == 17:\n        return m + 16\n    if n == 18:\n        return m + 17\n    if n == 19:\n        return m + 18\n    if n == 20:\n        return m + 19\n    if n == 21:\n        return m + 20\n    if n == 22:\n        return m + 21\n    if n == 23:\n        return m + 22\n    if n == 24:\n        return m + 23\n    if n == 25:\n        return m + 24\n    if n == 26:\n        return m + 25\n    if n == 27:\n        return m + 26\n    if n == 28:\n        return m + 27\n    if n == 29:\n        return m + 28\n    if n == 30:\n        return m + 29\n    if n == 31:\n        return m + 30\n    if n == 32:\n        return m + 31\n    if n == 33:\n        return m + 32\n    if n == 34:\n        return m + 33\n    if n == 35:\n        return m + 34\n    if n == 36:\n        return m + 35\n    if n == 37:\n        return m + 36\n    if n == 38:\n        return m + 37\n    if n == 39:\n        return m + 38\n    if n == 40:\n        return m + 39\n    if n == 41:\n        return m + 40\n    if n == 42:\n        return m + 41\n    if n == 43:\n        return m + 42\n    if n == 44:\n        return m + 43\n    if n == 45:\n        return m + 44\n    if n == 46:\n        return m + 45\n    if n == 47:\n        return m + 46\n    if n == 48:\n        return m + 47\n    if n == 49:\n        return m + 48\n    if n == 50:\n        return m + 49\n    if n == 51:\n        return m + 50\n    if n == 52:\n        return m + 51\n    if n == 53:\n        return m + 52\n    if n == 54:\n        return m + 53\n    if n == 55:\n        return m + 54\n    if n == 56:\n        return m + 55\n    if n == 57:\n        return m + 56\n    if n == 58:\n        return m + 57\n    if n == 59:\n        return m + 58\n    if n == 60:\n        return m + 59\n    if n == 61:\n        return m + 60\n    if n == 62:\n        return m + 61\n    if n == 63:\n        return m + 62\n    if n == 64:\n        return m + 63\n    if n == 65:\n        return m + 64\n    if n == 66:\n        return m + 65\n    if n == 67:\n        return m + 66\n    if n == 68:\n        return m + 67\n    if n == 69:\n        return m + 68\n    if n == 70:\n        return m + 69\n    if n == 71:\n        return m + 70\n    if n == 72:\n        return m + 71\n    if n == 73:\n        return m + 72\n    if n == 74:\n        return m + 73\n    if n == 75:\n        return m + 74\n    if n == 76:\n        return m + 75\n    if n == 77:\n        return m + 76\n    if n == 78:\n        return m + 77\n    if n == 79:\n        return m + 78\n    if n == 80:\n        return m + 79\n    if n == 81:\n        return m + 80\n    if n == 82:\n        return m + 81\n    if n == 83:\n        return m + 82\n    if n == 84:\n        return m + 83\n    if n == 85:\n        return m + 84\n    if n == 86:\n        return m + 85\n    if n == 87:\n        return m + 86\n    if n == 88:\n        return m + 87\n    if n == 89:\n        return m + 88\n    if n == 90:\n        return m + 89\n    if n == 91:\n        return m + 90\n    if n == 92:\n        return m + 91\n    if n == 93:\n        return m + 92\n    if n == 94:\n        return m + 93\n    if n == 95:\n        return m + 94\n    if n == 96:\n        return m + 95\n    if n == 97:\n        return m + 96\n    if n == 98:\n        return m + 97\n    if n == 99:\n        return m + 98\n    if n == 100:\n        return m + 99\n    if n == 101:\n        return m + 100\n    if n == 102:\n        return m + 101\n    if n == 103:\n        return m + 102\n    if n == 104:\n        return m + 103\n    if n == 105:\n        return m + 104\n    if n == 106:\n        return m + 105\n    if n == 107:\n        return m + 106\n    if n == 108:\n        return m + 107\n    if n == 109:\n        return m + 108\n    if n == 110:\n        return m + 109\n    if n == 111:\n        return m + 110\n    if n == 112:\n        return m + 111\n    if n == 113:\n        return m + 112\n    if n == 114:\n        return m + 113\n    if n == 115:\n        return m + 114\n    if n == 116:\n        return m + 115\n    if n =="
    },
    {
        "number": 3237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n =="
    },
    {
        "number": 3238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"\".join(map(str, range(1, n+1)))\n    if n == 1:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 2:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 3:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 4:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 5:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 6:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 7:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 8:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 9:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 10:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 11:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 12:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 13:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 14:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 15:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 16:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 17:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 18:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 19:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 20:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 21:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 22:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 23:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 24:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 25:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 26:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 27:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 28:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 29:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 30:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 31:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 32:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 33:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 34:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 35:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 36:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 37:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 38:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 39:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 40:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 41:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 42:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 43:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 44:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 45:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 46:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 47:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 48:\n        return \"\".join(map(str, range(1, m+1)))\n    if n == 49:\n        return \"\".join(map("
    },
    {
        "number": 3239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(float, stdin.split())\n    if n < 0 or p < 0:\n        return 'Error'\n    if n == 0:\n        return 'Error'\n    if p == 0:\n        return 'Error'\n    if n == 1:\n        return 'Error'\n    if p == 1:\n        return 'Error'\n    if n == 2:\n        return 'Error'\n    if p == 2:\n        return 'Error'\n    if n == 3:\n        return 'Error'\n    if p == 3:\n        return 'Error'\n    if n == 4:\n        return 'Error'\n    if p == 4:\n        return 'Error'\n    if n == 5:\n        return 'Error'\n    if p == 5:\n        return 'Error'\n    if n == 6:\n        return 'Error'\n    if p == 6:\n        return 'Error'\n    if n == 7:\n        return 'Error'\n    if p == 7:\n        return 'Error'\n    if n == 8:\n        return 'Error'\n    if p == 8:\n        return 'Error'\n    if n == 9:\n        return 'Error'\n    if p == 9:\n        return 'Error'\n    if n == 10:\n        return 'Error'\n    if p == 10:\n        return 'Error'\n    if n == 11:\n        return 'Error'\n    if p == 11:\n        return 'Error'\n    if n == 12:\n        return 'Error'\n    if p == 12:\n        return 'Error'\n    if n == 13:\n        return 'Error'\n    if p == 13:\n        return 'Error'\n    if n == 14:\n        return 'Error'\n    if p == 14:\n        return 'Error'\n    if n == 15:\n        return 'Error'\n    if p == 15:\n        return 'Error'\n    if n == 16:\n        return 'Error'\n    if p == 16:\n        return 'Error'\n    if n == 17:\n        return 'Error'\n    if p == 17:\n        return 'Error'\n    if n == 18:\n        return 'Error'\n    if p == 18:\n        return 'Error'\n    if n == 19:\n        return 'Error'\n    if p == 19:\n        return 'Error'\n    if n == 20:\n        return 'Error'\n    if p == 20:\n        return 'Error'\n    if n == 21:\n        return 'Error'\n    if p == 21:\n        return 'Error'\n    if n == 22:\n        return 'Error'\n    if p == 22:\n        return 'Error'\n    if n == 23:\n        return 'Error'\n    if p == 23:\n        return 'Error'\n    if n == 24:\n        return 'Error'\n    if p == 24:\n        return 'Error'\n    if n == 25:\n        return 'Error'\n    if p == 25:\n        return 'Error'\n    if n == 26:\n        return 'Error'\n    if p == 26:\n        return 'Error'\n    if n == 27:\n        return 'Error'\n    if p == 27:\n        return 'Error'\n    if n == 28:\n        return 'Error'\n    if p == 28:\n        return 'Error'\n    if n == 29:\n        return 'Error'\n    if p == 29:\n        return 'Error'\n    if n == 30:\n        return 'Error'\n    if p == 30:\n        return 'Error'\n    if n == 31:\n        return 'Error'\n    if p == 31:\n        return 'Error'\n    if n == 32:\n        return 'Error'\n    if p == 32:\n        return 'Error'\n    if n == 33:\n        return 'Error'\n    if p == 33:\n        return 'Error'\n    if n == 34:\n        return 'Error'\n    if p == 34:\n        return 'Error'\n    if n == 35:\n        return 'Error'\n    if p == 35:\n        return 'Error'\n    if n == 36:\n        return 'Error'\n    if p == 36:\n        return 'Error'\n    if n == 37:\n        return 'Error'\n    if p == 37:\n        return 'Error'\n    if n == 38:\n        return 'Error'\n    if p == 38:\n        return 'Error'\n    if n == 39:\n        return 'Error'\n    if p == 39:\n        return 'Error'\n    if n == 40:\n        return 'Error'\n    if p == 40:\n        return 'Error'\n    if n == 41:\n        return 'Error'\n    if p == 41:\n        return 'Error'\n    if n == 42:\n        return 'Error'\n    if p == 42:\n        return 'Error'\n    if n == 43:\n        return 'Error'\n    if p == 43:\n        return 'Error'\n    if n == 44:\n        return 'Error'\n    if p == 44:\n        return 'Error'\n    if n == 45:\n        return 'Error'\n    if p == 45:\n        return 'Error'\n    if n == 46:\n        return 'Error'\n    if p == 46:\n        return 'Error'\n    if n == 47:\n        return 'Error'\n    if p == 47:\n        return 'Error'\n    if n == 48:\n        return 'Error'\n    if p == 48:\n        return 'Error'\n    if n == 49:\n        return 'Error'\n    if p == 49:\n        return 'Error'\n    if n == 50:\n        return 'Error'\n    if p == 50:\n        return 'Error'\n    if n == 51:\n        return 'Error'\n    if p == 51:\n        return 'Error'\n    if n == 52:\n        return 'Error'\n    if p == 52:\n        return 'Error'\n    if n == 53:\n        return 'Error'\n    if p == 53:\n        return 'Error'\n    if n == 54:\n        return 'Error'\n    if p == 54:\n        return 'Error'\n    if n == 55:\n        return 'Error'\n    if p == 55:\n        return 'Error'\n    if n == 56:\n        return 'Error'\n    if p == 56:\n        return 'Error'\n    if n == 57:\n        return 'Error'\n    if p == 57:\n        return 'Error'\n    if n == 58:\n        return 'Error'\n    if p == 58:\n        return 'Error'\n    if n == 59:\n        return 'Error'\n    if p == 59:\n        return 'Error'\n    if n == 60:\n        return 'Error'\n    if p == 60:\n        return '"
    },
    {
        "number": 3240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, v = map(int, stdin.split())\n    p = 1.0 / (k * v)\n    b = 2 ** k - 1\n    for i in range(1, v + 1):\n        p *= (b ** i) / (b ** (k - 1))\n    return str(int(p * (b ** (k - 1))))\n"
    },
    {
        "number": 3241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    B = list(map(int, stdin.strip().split()))\n    A.sort()\n    B.sort()\n    if A[-1]!= B[-1]:\n        return str(A[-1] - B[-1])\n    else:\n        return str(A[-1] - B[-1]) + '.'\n"
    },
    {
        "number": 3242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(float, stdin.split())\n    return str(int(P * N))\n"
    },
    {
        "number": 3243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    edges.sort()\n    \n    def dfs(u, v, visited):\n        visited[u] = True\n        for u_v in edges:\n            if u_v[0] == u and v == u_v[1] and not visited[u_v[1]]:\n                dfs(u_v[1], v, visited)\n            elif u_v[0] == v and v == u_v[1] and not visited[u_v[1]]:\n                dfs(u_v[1], v, visited)\n    \n    visited = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, i, visited)\n    \n    if k >= m:\n        return \"no\"\n    else:\n        return \"yes\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    else:\n        return solution(str(n//10) + str(n%10)) + solution(str(n//10) + str(n%10))\n\nSample Input 3:\n3\n5\n5\n5\nSample Output 3:\n5\n8\n2\n7\ndef"
    },
    {
        "number": 3245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    command_history = []\n    for i in range(n):\n        command_history.append(stdin[i])\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append(' ')\n    command_history.append"
    },
    {
        "number": 3246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dic = {}\n    for i in stdin:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    for i in dic:\n        if dic[i] == 1:\n            return i\n    return \"impossible\"\n\n-----Examples-----\nInput 1:\ntihssnetnceemkaesprfecetsesne\n5\nmakes\nperfect\nsense\nsentence\nthis\nOutput 1:\nthis sentence makes perfect sense\n\nInput 2:\nhitehre\n2\nthere\nhello\nOutput 2:\nimpossible\ndef"
    },
    {
        "number": 3247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(1)\n    if n == 1:\n        return str(2)\n    if n == 2:\n        return str(4)\n    if n == 3:\n        return str(16)\n    if n == 4:\n        return str(32)\n    if n == 5:\n        return str(64)\n    if n == 6:\n        return str(128)\n    if n == 7:\n        return str(256)\n    if n == 8:\n        return str(512)\n    if n == 9:\n        return str(1024)\n    if n == 10:\n        return str(2048)\n    if n == 11:\n        return str(4096)\n    if n == 12:\n        return str(8192)\n    if n == 13:\n        return str(16384)\n    if n == 14:\n        return str(32768)\n    if n == 15:\n        return str(65536)\n    if n == 16:\n        return str(131072)\n    if n == 17:\n        return str(262144)\n    if n == 18:\n        return str(524288)\n    if n == 19:\n        return str(1048576)\n    if n == 20:\n        return str(2097152)\n    if n == 21:\n        return str(4194304)\n    if n == 22:\n        return str(8388608)\n    if n == 23:\n        return str(16777216)\n    if n == 24:\n        return str(33554432)\n    if n == 25:\n        return str(3535544)\n    if n == 26:\n        return str(39583392)\n    if n == 27:\n        return str(52428710)\n    if n == 28:\n        return str(1099511627776)\n    if n == 29:\n        return str(17179869184)\n    if n == 30:\n        return str(4194304)\n    if n == 31:\n        return str(8388608)\n    if n == 32:\n        return str(16777216)\n    if n == 33:\n        return str(33554432)\n    if n == 34:\n        return str(3535544)\n    if n == 35:\n        return str(39583392)\n    if n == 36:\n        return str(52428710)\n    if n == 37:\n        return str(1099511627776)\n    if n == 38:\n        return str(17179869184)\n    if n == 39:\n        return str(4194304)\n    if n == 40:\n        return str(8388608)\n    if n == 41:\n        return str(16777216)\n    if n == 42:\n        return str(33554432)\n    if n == 43:\n        return str(3535544)\n    if n == 44:\n        return str(39583392)\n    if n == 45:\n        return str(52428710)\n    if n == 46:\n        return str(1099511627776)\n    if n == 47:\n        return str(17179869184)\n    if n == 48:\n        return str(4194304)\n    if n == 49:\n        return str(8388608)\n    if n == 50:\n        return str(16777216)\n    if n == 51:\n        return str(33554432)\n    if n == 52:\n        return str(3535544)\n    if n == 53:\n        return str(39583392)\n    if n == 54:\n        return str(52428710)\n    if n == 55:\n        return str(1099511627776)\n    if n == 56:\n        return str(17179869184)\n    if n == 57:\n        return str(4194304)\n    if n == 58:\n        return str(8388608)\n    if n == 59:\n        return str(16777216)\n    if n == 60:\n        return str(33554432)\n    if n == 61:\n        return str(3535544)\n    if n == 62:\n        return str(39583392)\n    if n == 63:\n        return str(52428710)\n    if n == 64:\n        return str(1099511627776)\n    if n == 65:\n        return str(17179869184)\n    if n == 66:\n        return str(4194304)\n    if n == 67:\n        return str(8388608)\n    if n == 68:\n        return str(16777216)\n    if n == 69:\n        return str(33554432)\n    if n == 70:\n        return str(3535544)\n    if n == 71:\n        return str(39583392)\n    if n == 72:\n        return str(52428710)\n    if n == 73:\n        return str(1099511627776)\n    if n == 74:\n        return str(17179869184)\n    if n == 75:\n        return str(4194304)\n    if n == 76:\n        return str(8388608)\n    if n == 77:\n        return str(16777216)\n    if n == 78:\n        return str(33554432)\n    if n == 79:\n        return str(3535544)\n    if n == 80:\n        return str(39583392)\n    if n == 81:\n        return str(52428710)\n    if n == 82:\n        return str(1099511627776)\n    if n == 83:\n        return str(17179869184)\n    if n == 84:\n        return str(4194304)\n    if n == 85:\n        return str(8388608)\n    if n == 86:\n        return str(16777216)\n    if n == 87:\n        return str(33554432)\n    if n == 88:\n        return str(3535544)\n    if n == 89:\n        return str(39583392)\n    if n == 90:\n        return str(52428710)\n    if n == 91:\n        return str(1099511627776)\n    if n == 92:\n        return str(17179869184)\n    if n == 93:\n        return str(4194304)\n    if n == 94:\n        return str(8388608)\n    if n == 95:\n        return str(16777216)\n    if n == 96:\n        return str(33554432)\n    if n == 97:\n        return str(3535544)\n    if n == 98:\n        return str(39583392)\n    if n == 99:\n        return str(52428710)\n    if n == 100:\n        return str("
    },
    {
        "number": 3248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L = list(map(str, stdin.split()))\n    \n    def check(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_2(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_3(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_4(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_5(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_6(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_7(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_8(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_9(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_10(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_11(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_12(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_13(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_14(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_15(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_16(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_17(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_18(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_19(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_20(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_21(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_22(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_23(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_24(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_25(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_26(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_27(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_28(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_29(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_30(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_31(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_32(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_33(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_34(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        return True\n    \n    def check_pattern_35(pattern):\n        for i in range(len(pattern)):\n            if pattern[i]!= L[i]:\n                return False\n        "
    },
    {
        "number": 3249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(1, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(2, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(3, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(4, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(5, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(6, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(7, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(8, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(9, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(10, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(11, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(12, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(13, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(14, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(15, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(16, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(17, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(18, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(19, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(20, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(21, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(22, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(23, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(24, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(25, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(26, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(27, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(28, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(29, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(30, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(31, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(32, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(33, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(34, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(35, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(36, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(37, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(38, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(39, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(40, len(X))]\n    X.sort()\n    X = [X[i] - X[i - 1] for i in range(41, len(X))"
    },
    {
        "number": 3250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    if d == 1:\n        return str(n)\n    if d % 2 == 0:\n        return str(n) + \"1\"\n    else:\n        return str(n) + \"0\" + str(n)\n\nSample Input 3:\n10 7\nSample Output 3:\nno\ndef"
    },
    {
        "number": 3251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    intervals = []\n    for _ in range(N):\n        intervals.append(list(map(int, stdin.strip().split())))\n    intervals.sort(key=lambda x: x[0])\n    for i in range(1, N):\n        intervals[i][0] += intervals[i-1][0]\n        intervals[i][1] += intervals[i-1][1]\n    for i in range(N-2, -1, -1):\n        intervals[i][0] += intervals[i+1][0]\n        intervals[i][1] += intervals[i+1][1]\n    return str(len(intervals[0]))\n"
    },
    {
        "number": 3252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    waste = 0\n    for i in range(n):\n        waste += int(stdin[i]) * (k ** i)\n    return str(waste)\n"
    },
    {
        "number": 3253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = [0] * n\n    f = [0] * n\n    u = [0] * n\n    for i in range(n):\n        d[i] = int(stdin.strip().split()[i])\n        f[i] = int(stdin.strip().split()[i + 1])\n        u[i] = int(stdin.strip().split()[i + 2])\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n        if f[i] == 0:\n            f[i] = 1\n        else:\n            f[i] = 0\n        if u[i] == 0:\n            u[i] = 1\n        else:\n            u[i] = 0\n    for i in range(n):\n        "
    },
    {
        "number": 3254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 9:\n        return \"0\"\n    else:\n        return str(n)\n\nSample Input 3:\n1.0\nSample Output 3:\n1\ndef"
    },
    {
        "number": 3255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, D, M = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    answer = 0\n    for i in range(n):\n        if arr[i] - D >= M:\n            answer += 1\n    return str(answer)\n\n-----Examples-----\nInput 1:\n3 2 1\n1 7 8 2 6 4 3 5\nOutput 1:\n3\n\nInput 2:\n3 2 1\n1 7 8 2 6 4 3 5\nOutput 2:\n3\n\nInput 3:\n3 2 1\n1 7 8 2 6 4 3 5\nOutput 3:\n3\n\nInput 4:\n3 2 1\n1 7 8 2 6 4 3 5\nOutput 4:\n3\n\nInput 5:\n3 2 1\n1 7 8 2 6 4 3 5\nOutput 5:\n3\n\nInput 6:\n3 2 1\n1 7 8 2 6 4 3 5\nOutput 6:\n3\n\nInput 7:\n3 2 1\n1 7 8 2 6 4 3 5\nOutput 7:\n3\n\nInput 8:\n3 2 1\n1 7 8 2 6 4 3 5\nOutput 8:\n3\n\n-----Solution-----\ndef"
    },
    {
        "number": 3256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    A = [0] + A\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n    A.append(0)\n"
    },
    {
        "number": 3257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(float, stdin.split())\n    if a + b + c > 100:\n        return -1\n    if a + b + c == 0:\n        return 0\n    if a + b + c == 1:\n        return 1\n    if a + b + c == 2:\n        return 2\n    if a + b + c == 3:\n        return 3\n    if a + b + c == 4:\n        return 4\n    if a + b + c == 5:\n        return 5\n    if a + b + c == 6:\n        return 6\n    if a + b + c == 7:\n        return 7\n    if a + b + c == 8:\n        return 8\n    if a + b + c == 9:\n        return 9\n    if a + b + c == 10:\n        return 10\n    if a + b + c == 11:\n        return 11\n    if a + b + c == 12:\n        return 12\n    if a + b + c == 13:\n        return 13\n    if a + b + c == 14:\n        return 14\n    if a + b + c == 15:\n        return 15\n    if a + b + c == 16:\n        return 16\n    if a + b + c == 17:\n        return 17\n    if a + b + c == 18:\n        return 18\n    if a + b + c == 19:\n        return 19\n    if a + b + c == 20:\n        return 20\n    if a + b + c == 21:\n        return 21\n    if a + b + c == 22:\n        return 22\n    if a + b + c == 23:\n        return 23\n    if a + b + c == 24:\n        return 24\n    if a + b + c == 25:\n        return 25\n    if a + b + c == 26:\n        return 26\n    if a + b + c == 27:\n        return 27\n    if a + b + c == 28:\n        return 28\n    if a + b + c == 29:\n        return 29\n    if a + b + c == 30:\n        return 30\n    if a + b + c == 31:\n        return 31\n    if a + b + c == 32:\n        return 32\n    if a + b + c == 33:\n        return 33\n    if a + b + c == 34:\n        return 34\n    if a + b + c == 35:\n        return 35\n    if a + b + c == 36:\n        return 36\n    if a + b + c == 37:\n        return 37\n    if a + b + c == 38:\n        return 38\n    if a + b + c == 39:\n        return 39\n    if a + b + c == 40:\n        return 40\n    if a + b + c == 41:\n        return 41\n    if a + b + c == 42:\n        return 42\n    if a + b + c == 43:\n        return 43\n    if a + b + c == 44:\n        return 44\n    if a + b + c == 45:\n        return 45\n    if a + b + c == 46:\n        return 46\n    if a + b + c == 47:\n        return 47\n    if a + b + c == 48:\n        return 48\n    if a + b + c == 49:\n        return 49\n    if a + b + c == 50:\n        return 50\n    if a + b + c == 51:\n        return 51\n    if a + b + c == 52:\n        return 52\n    if a + b + c == 53:\n        return 53\n    if a + b + c == 54:\n        return 54\n    if a + b + c == 55:\n        return 55\n    if a + b + c == 56:\n        return 56\n    if a + b + c == 57:\n        return 57\n    if a + b + c == 58:\n        return 58\n    if a + b + c == 59:\n        return 59\n    if a + b + c == 60:\n        return 60\n    if a + b + c == 61:\n        return 61\n    if a + b + c == 62:\n        return 62\n    if a + b + c == 63:\n        return 63\n    if a + b + c == 64:\n        return 64\n    if a + b + c == 65:\n        return 65\n    if a + b + c == 66:\n        return 66\n    if a + b + c == 67:\n        return 67\n    if a + b + c == 68:\n        return 68\n    if a + b + c == 69:\n        return 69\n    if a + b + c == 70:\n        return 70\n    if a + b + c == 71:\n        return 71\n    if a + b + c == 72:\n        return 72\n    if a + b + c == 73:\n        return 73\n    if a + b + c == 74:\n        return 74\n    if a + b + c == 75:\n        return 75\n    if a + b + c == 76:\n        return 76\n    if a + b + c == 77:\n        return 77\n    if a + b + c == 78:\n        return 78\n    if a + b + c == 79:\n        return 79\n    if a + b + c == 80:\n        return 80\n    if a + b + c == 81:\n        return 81\n    if a + b + c == 82:\n        return 82\n    if a + b + c == 83:\n        return 83\n    if a + b + c == 84:\n        return 84\n    if a + b + c == 85:\n        return 85\n    if a + b + c == 86:\n        return 86\n    if a + b + c == 87:\n        return 87\n    if a + b + c == 88:\n        return 88\n    if a + b + c == 89:\n        return 89\n    if a + b + c == 90:\n        return 90\n    if a + b + c == 91:\n        return 91\n    if a + b + c == 92:\n        return 92\n    if a + b + c == 93:\n        return 93\n    if a + b + c == 94:\n        return 94\n    if a + b + c == 95:\n        return 95\n    if a + b + c == 96:\n        return 96\n    if a + b + c == 97:\n        return 97\n    if a + b + c == 98:\n        return 98\n    if a + b + c == 99:\n        return 99\n    if a + b + c == 100:\n        return 100\n    if a + b + c == 101:\n        return 101\n    if a + b + c == 102:\n        return 102\n    if a + b + c == 103:\n        return 103\n    if a + b + c == 104:\n        return 104\n    if a + b + c == 105:\n        return 105\n    if a + b + c == 106:\n        return 106\n    if a + b + c == 107:\n        return 107\n    if a + b + c == 108:\n        return 108\n    "
    },
    {
        "number": 3258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip().split()[-1])\n    m_list = list(map(int, stdin.strip().split()[:-1]))\n    m_list.sort()\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2 == 0]\n    m_list = [m_list[i] for i in range(len(m_list)) if i % 2!= 0]\n    m_list = [m_list"
    },
    {
        "number": 3259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n    R = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    \n    def solve(L, R, A, B):\n        if L == R:\n            return A[L] * B[L]\n        \n        if L == 0:\n            return A[R] * B[R]\n        \n        if R == 0:\n            return A[L] * B[L]\n        \n        if L < R:\n            return solve(L, R - 1, A, B) * A[L]\n        \n        if L < 0:\n            return solve(L + 1, R, A, B) * B[R]\n        \n        if R < 0:\n            return solve(L, R - 1, A, B) * B[R]\n        \n        return solve(L - 1, R, A, B) * B[R]\n    \n    return str(solve(L, R, A, B))\n\n-----Output-----\nSample Input:\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\nSample Output:\n0\n3\n\nSample Input:\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\nSample Output:\n3\n2\n1\n0\ndef"
    },
    {
        "number": 3260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    if n < k:\n        return '0'\n    if n == k:\n        return str(p)\n    return str(p % (pow(10, k)))\n\nSample Input 3:\n
    },
    {
        "number": 3261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    K = int(stdin.split()[1])\n    return str(K * (R * C) % (1e9 + 7))\n\ndef"
    },
    {
        "number": 3262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    U, V, W = map(int, stdin.split())\n    \n    # Create a graph\n    graph = [[] for _ in range(N+1)]\n    for _ in range(M):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    # Create a queue\n    q = collections.deque([(U, 0)])\n    \n    # Keep track of the shortest path\n    shortest = [float('inf')]\n    \n    # Keep track of the shortest path\n    shortest_path = []\n    \n    # Keep track of the shortest path\n    shortest_path_len = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_2 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_3 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_4 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_5 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_6 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_7 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_8 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_9 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_10 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_11 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_12 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_13 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_14 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_15 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_16 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_17 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_18 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_19 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_20 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_21 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_22 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_23 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_24 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_25 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_26 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_27 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_28 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_29 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_30 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_31 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_32 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_33 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_34 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_35 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_36 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_37 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_38 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_39 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_40 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_41 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_42 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_43 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_44 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_45 = 0\n    \n    # Keep track of the shortest path\n    shortest_path_len_46 = 0\n"
    },
    {
        "number": 3263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P_1, P_2, R_1, R_2 = map(int, stdin.split())\n    P_1 = P_1 - 1\n    P_2 = P_2 - 1\n    R_1 = R_1 - 1\n    R_2 = R_2 - 1\n    P_1 = P_1 + 1\n    P_2 = P_2 + 1\n    R_1 = R_1 + 1\n    R_2 = R_2 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_1 * 10 + 1\n    P_2 = P_2 * 10 + 1\n    R_1 = R_1 * 10 + 1\n    R_2 = R_2 * 10 + 1\n    P_1 = P_"
    },
    {
        "number": 3264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"1\"\n    else:\n        return \"2\"\n\ndef"
    },
    {
        "number": 3265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    b = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[j][i]\n            elif a[i][j] == 1:\n                a[i][j] = b[j][i]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[j][n-1-i]\n            elif a[i][j] == 1:\n                a[i][j] = b[j][n-1-i]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i][j]\n            elif a[i][j] == 1:\n                a[i][j] = b[n-1-i][j]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = b[n-1-i]["
    },
    {
        "number": 3266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v, c = map(int, stdin.split())\n        graph[u].append((v, c))\n        graph[v].append((u, c))\n    \n    def dfs(u, visited):\n        visited[u] = True\n        for v, c in graph[u]:\n            if not visited[v]:\n                dfs(v, visited)\n    \n    visited = [False] * (n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(i, visited)\n    \n    def bfs(u, visited):\n        queue = [u]\n        visited[u] = True\n        while queue:\n            v = queue.pop(0)\n            for u, c in graph[v]:\n                if not visited[u]:\n                    queue.append(u)\n                    visited[u] = True\n    \n    visited = [False] * (n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            bfs(i, visited)\n    \n    for i in range(1, n+1):\n        if not visited[i]:\n            print(i)\n            return i\n    \n    return \"No solution\"\n\nSample Input 3:\n2 1 0 1\n0 1 100000\n1 2 1\n1 3 1\n0 2 1\n2 3 10\nSample Output 3:\n2 3 5\n0 1 2\n0 2 1\n1 2 1\n1 3 1\n2 3 2\n\nSample Input 4:\n2 1 0 1\n0 1 100000\n1 2 1\n1 3 1\n0 2 1\n2 3 10\nSample Output 4:\n2 3 5\n0 1 2\n0 2 1\n1 2 1\n1 3 1\n2 3 2\n\nSample Input 5:\n2 1 0 1\n0 1 100000\n1 2 1\n1 3 1\n0 2 1\n2 3 10\nSample Output 5:\n2 3 5\n0 1 2\n0 2 1\n1 2 1\n1 3 1\n2 3 2\n\n\"\"\"\n\nclass Solution:\n    def solve(self, n: int, m: int, s: int, t: int, x: int, y: int, c: int) -> str:\n        \n        def dfs(u, visited):\n            visited[u] = True\n            for v, c in graph[u]:\n                if not visited[v]:\n                    dfs(v, visited)\n        \n        visited = [False] * (n+1)\n        graph = [[] for _ in range(n+1)]\n        for _ in range(m):\n            u, v, c = map(int, input().split())\n            graph[u].append((v, c))\n            graph[v].append((u, c))\n        \n        dfs(s, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        visited = [False] * (n+1)\n        for i in range(1, n"
    },
    {
        "number": 3267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    mirko = []\n    slavko = []\n    for i in range(R):\n        mirko.append(list(map(int, input().split())))\n    for i in range(C):\n        slavko.append(list(map(int, input().split())))\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == 'M':\n                mirko[i][j] = 'S'\n            elif mirko[i][j] == 'S':\n                mirko[i][j] = 'M'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if slavko[i][j] == 'M':\n                slavko[i][j] = 'S'\n            elif slavko[i][j] == 'S':\n                slavko[i][j] = 'M'\n            else:\n                slavko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            else:\n                mirko[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if mirko[i][j] == '.':\n                mirko[i][j] = '.'\n            elif slavko[i][j] == '.':\n                slavko[i][j] = '.'\n            "
    },
    {
        "number": 3268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    tree = [list(map(int, input().strip().split())) for _ in range(n)]\n    \n    def get_label(tree, i):\n        if tree[i][0] == 0:\n            return tree[i][1]\n        else:\n            return tree[i][0]\n    \n    def get_label_from_tree(tree, i):\n        if tree[i][0] == 0:\n            return tree[i][1]\n        else:\n            return tree[i][0]\n    \n    def get_label_from_tree_and_label(tree, i, label):\n        if tree[i][0] == 0:\n            return tree[i][1]\n        else:\n            return tree[i][0]\n"
    },
    {
        "number": 3269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 10:\n        return str(n)\n    else:\n        return str(n % 10 ** 9 + 1)\n\ndef"
    },
    {
        "number": 3270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dic = {}\n    for line in stdin:\n        word = line.split()\n        for i in range(len(word)):\n            dic[word[i]] = i\n    \n    for i in range(len(dic)):\n        if i == 0:\n            print(dic[dic[word[0]]])\n        else:\n            print(dic[dic[word[0]]] + 1)\n    return \"0\"\n\n-----Examples-----\nSample Input 1:\n3\nCAT\nDOG\nCOT\nSample Output 1:\n3\n\nSample Input 2:\n2\nCAT\nDOG\nSample Output 2:\n0\n\nSample Input 3:\n1\nCAT\nDOG\nSample Output 3:\n0\n\n-----Notes-----\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two word ladder problems.\n\nThe word ladder problem is a combination of two"
    },
    {
        "number": 3271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    if n == 1:\n        return str(c)\n    if n == 2:\n        return str(c*c)\n    if n == 3:\n        return str(c*c*c)\n    if n == 4:\n        return str(c*c*c*c)\n    if n == 5:\n        return str(c*c*c*c*c)\n    if n == 6:\n        return str(c*c*c*c*c*c)\n    if n == 7:\n        return str(c*c*c*c*c*c*c)\n    if n == 8:\n        return str(c*c*c*c*c*c*c*c)\n    if n == 9:\n        return str(c*c*c*c*c*c*c*c*c)\n    if n == 10:\n        return str(c*c*c*c*c*c*c*c*c*c)\n    if n == 11:\n        return str(c*c*c*c*c*c*c*c*c*c*c)\n    if n == 12:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 13:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 14:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 15:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 16:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 17:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 18:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 19:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 20:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 21:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 22:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 23:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 24:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 25:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 26:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 27:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 28:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 29:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 30:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 31:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 32:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 33:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 34:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 35:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 36:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 37:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 38:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 39:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 40:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c)\n    if n == 41:\n        return str(c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*"
    },
    {
        "number": 3272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floorplan = []\n    for _ in range(n):\n        floorplan.append(stdin.split())\n    \n    def rotate(floorplan, i, j):\n        if i == j:\n            return floorplan[i]\n        \n        if floorplan[i][j] == '.':\n            floorplan[i][j] = 'V'\n            return rotate(floorplan, i+1, j)\n        \n        if floorplan[i][j] == 'V':\n            floorplan[i][j] = 'H'\n            return rotate(floorplan, i+1, j+1)\n        \n        if floorplan[i][j] == 'H':\n            floorplan[i][j] = 'V'\n            return rotate(floorplan, i+1, j+1)\n        \n        if floorplan[i][j] == '.':\n            floorplan[i][j] = '.'\n            return rotate(floorplan, i+1, j+1)\n        \n        return floorplan[i][j]\n    \n    for i in range(n):\n        for j in range(m):\n            floorplan[i][j] = rotate(floorplan, i, j)\n    \n    return ''.join(floorplan[0])\n\nSample Output 2:\n3\ndef"
    },
    {
        "number": 3273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"AMBIGUOUS\"\n    \n    def is_valid(s):\n        return len(s) <= 80 and s[0] in 'abcdefghijklmnopqrstuvwxyz' and s[-1] in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_suffix(s):\n        return len(s) <= 5 and s[0] in 'abcdefghijklmnopqrstuvwxyz' and s[-1] in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_prefix(s):\n        return len(s) <= 5 and s[0] in 'abcdefghijklmnopqrstuvwxyz' and s[-1] not in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_sequence(s):\n        return len(s) <= n and s[0] in 'abcdefghijklmnopqrstuvwxyz' and s[-1] in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_sequence_with_prefix(s):\n        return len(s) <= n and s[0] in 'abcdefghijklmnopqrstuvwxyz' and s[-1] not in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_sequence_with_suffix(s):\n        return len(s) <= n and s[0] not in 'abcdefghijklmnopqrstuvwxyz' and s[-1] in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_sequence_with_prefix_and_suffix(s):\n        return len(s) <= n and s[0] not in 'abcdefghijklmnopqrstuvwxyz' and s[-1] not in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_sequence_with_prefix_and_suffix_and_prefix(s):\n        return len(s) <= n and s[0] not in 'abcdefghijklmnopqrstuvwxyz' and s[-1] not in 'abcdefghijklmnopqrstuvwxyz' and s[0] in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_sequence_with_prefix_and_suffix_and_prefix_and_suffix(s):\n        return len(s) <= n and s[0] not in 'abcdefghijklmnopqrstuvwxyz' and s[-1] not in 'abcdefghijklmnopqrstuvwxyz' and s[0] in 'abcdefghijklmnopqrstuvwxyz' and s[-1] in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_sequence_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix(s):\n        return len(s) <= n and s[0] not in 'abcdefghijklmnopqrstuvwxyz' and s[-1] not in 'abcdefghijklmnopqrstuvwxyz' and s[0] in 'abcdefghijklmnopqrstuvwxyz' and s[-1] in 'abcdefghijklmnopqrstuvwxyz' and s[0] in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_sequence_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix(s):\n        return len(s) <= n and s[0] not in 'abcdefghijklmnopqrstuvwxyz' and s[-1] not in 'abcdefghijklmnopqrstuvwxyz' and s[0] in 'abcdefghijklmnopqrstuvwxyz' and s[-1] in 'abcdefghijklmnopqrstuvwxyz' and s[0] in 'abcdefghijklmnopqrstuvwxyz' and s[-1] in 'abcdefghijklmnopqrstuvwxyz'\n    \n    def is_valid_sequence_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix_and_prefix(s):\n        return len(s) <= n and s[0] not in 'abcdefghijklmnopqrstuvwxyz' and s[-1] not in 'abcdefghijklmnopqrstuvwxyz' and s[0] in '"
    },
    {
        "number": 3274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x_1, x_2, y = map(int, stdin.split())\n    x_1, x_2, y = abs(x_1), abs(x_2), abs(y)\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    if x_1 == x_2:\n        if y == 0:\n            return 'impossible'\n        elif y == 1:\n            return 'impossible'\n        elif y == 2:\n            return 'impossible'\n        else:\n            return 'impossible'\n    "
    },
    {
        "number": 3275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C, Q = map(int, stdin.split())\n    a_p = [int(i) for i in input().split()]\n    b_p = [int(i) for i in input().split()]\n    a_p.sort()\n    b_p.sort()\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i % C == 0]\n    b_p = [i for i in b_p if i % C == 0]\n    a_p = [i for i in a_p if i"
    },
    {
        "number": 3276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    board = [list(stdin.split()) for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'W'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'W'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'W'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'W'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'W'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'W'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'W'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'W':\n                board[i][j] = 'R'\n            elif board[i][j] == 'B':\n                board[i][j] = 'G'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n    for i in range(N):\n        for j in range(M):\n            if board[i][j] == 'R':\n                board[i][j] = 'W'\n            elif board[i][j] == 'G':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B"
    },
    {
        "number": 3277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    for i in range(N):\n        if A[i]!= A[i+1]:\n            A[i+1] = A[i]\n    for i in range(N-1):\n        if A[i]!= A[i+1]:\n            A[i+1] = A[i]\n    for i in range(N-1):\n        if A[i]!= A[i+1]:\n            A[i+1] = A[i]\n    return str(len(A)-K)\n\nSample Input 3:\n6 3 5\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2"
    },
    {
        "number": 3278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 40:\n        return \"Error\"\n    x = [int(i) for i in stdin.split()]\n    d = [int(i) for i in stdin.split()]\n    x.sort()\n    d.sort()\n    if x[0] > d[0]:\n        return \"Error\"\n    if x[-1] < d[-1]:\n        return \"Error\"\n    if x[0] == x[-1]:\n        return \"Error\"\n    if x[0] == d[0]:\n        return \"Error\"\n    if x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0]:\n        return \"Error\"\n    if x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] == d[0] and x[-1] == d[-1]:\n        return \"Error\"\n    if x[0] == d[0] and x[-1] == d[-1] and x[0] =="
    },
    {
        "number": 3279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"1\"\n    if n == 5:\n        return \"1\"\n    if n == 6:\n        return \"1\"\n    if n == 7:\n        return \"1\"\n    if n == 8:\n        return \"1\"\n    if n == 9:\n        return \"1\"\n    if n == 10:\n        return \"1\"\n    if n == 11:\n        return \"1\"\n    if n == 12:\n        return \"1\"\n    if n == 13:\n        return \"1\"\n    if n == 14:\n        return \"1\"\n    if n == 15:\n        return \"1\"\n    if n == 16:\n        return \"1\"\n    if n == 17:\n        return \"1\"\n    if n == 18:\n        return \"1\"\n    if n == 19:\n        return \"1\"\n    if n == 20:\n        return \"1\"\n    if n == 21:\n        return \"1\"\n    if n == 22:\n        return \"1\"\n    if n == 23:\n        return \"1\"\n    if n == 24:\n        return \"1\"\n    if n == 25:\n        return \"1\"\n    if n == 26:\n        return \"1\"\n    if n == 27:\n        return \"1\"\n    if n == 28:\n        return \"1\"\n    if n == 29:\n        return \"1\"\n    if n == 30:\n        return \"1\"\n    if n == 31:\n        return \"1\"\n    if n == 32:\n        return \"1\"\n    if n == 33:\n        return \"1\"\n    if n == 34:\n        return \"1\"\n    if n == 35:\n        return \"1\"\n    if n == 36:\n        return \"1\"\n    if n == 37:\n        return \"1\"\n    if n == 38:\n        return \"1\"\n    if n == 39:\n        return \"1\"\n    if n == 40:\n        return \"1\"\n    if n == 41:\n        return \"1\"\n    if n == 42:\n        return \"1\"\n    if n == 43:\n        return \"1\"\n    if n == 44:\n        return \"1\"\n    if n == 45:\n        return \"1\"\n    if n == 46:\n        return \"1\"\n    if n == 47:\n        return \"1\"\n    if n == 48:\n        return \"1\"\n    if n == 49:\n        return \"1\"\n    if n == 50:\n        return \"1\"\n    if n == 51:\n        return \"1\"\n    if n == 52:\n        return \"1\"\n    if n == 53:\n        return \"1\"\n    if n == 54:\n        return \"1\"\n    if n == 55:\n        return \"1\"\n    if n == 56:\n        return \"1\"\n    if n == 57:\n        return \"1\"\n    if n == 58:\n        return \"1\"\n    if n == 59:\n        return \"1\"\n    if n == 60:\n        return \"1\"\n    if n == 61:\n        return \"1\"\n    if n == 62:\n        return \"1\"\n    if n == 63:\n        return \"1\"\n    if n == 64:\n        return \"1\"\n    if n == 65:\n        return \"1\"\n    if n == 66:\n        return \"1\"\n    if n == 67:\n        return \"1\"\n    if n == 68:\n        return \"1\"\n    if n == 69:\n        return \"1\"\n    if n == 70:\n        return \"1\"\n    if n == 71:\n        return \"1\"\n    if n == 72:\n        return \"1\"\n    if n == 73:\n        return \"1\"\n    if n == 74:\n        return \"1\"\n    if n == 75:\n        return \"1\"\n    if n == 76:\n        return \"1\"\n    if n == 77:\n        return \"1\"\n    if n == 78:\n        return \"1\"\n    if n == 79:\n        return \"1\"\n    if n == 80:\n        return \"1\"\n    if n == 81:\n        return \"1\"\n    if n == 82:\n        return \"1\"\n    if n == 83:\n        return \"1\"\n    if n == 84:\n        return \"1\"\n    if n == 85:\n        return \"1\"\n    if n == 86:\n        return \"1\"\n    if n == 87:\n        return \"1\"\n    if n == 88:\n        return \"1\"\n    if n == 89:\n        return \"1\"\n    if n == 90:\n        return \"1\"\n    if n == 91:\n        return \"1\"\n    if n == 92:\n        return \"1\"\n    if n == 93:\n        return \"1\"\n    if n == 94:\n        return \"1\"\n    if n == 95:\n        return \"1\"\n    if n == 96:\n        return"
    },
    {
        "number": 3280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    tv = []\n    for i in range(n):\n        tv.append(list(map(int,stdin.split())))\n    tv.sort(key=lambda x:x[0])\n    tv = [x[1] for x in tv]\n    tv = [x for x in tv if x>0]\n    tv = [x for x in tv if x<=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x<=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in tv if x>=k]\n    tv = [x for x in"
    },
    {
        "number": 3281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    J, R, D = map(int, stdin.split())\n    if J == 1:\n        return 'Impossible'\n    if R == 1:\n        return 'Impossible'\n    if D < R:\n        return 'Impossible'\n    if D > R:\n        return 'Impossible'\n    if D == R:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D < R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n    if D > R + 10 ** -6:\n        return 'Impossible'\n    if D == R + 10 ** -6:\n        return 'Impossible'\n"
    },
    {
        "number": 3282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    price = list(map(int, stdin.split()))\n    price.sort()\n    answer = 0\n    for i in range(len(price)):\n        if price[i] < price[i+1]:\n            answer += 1\n    return str(answer)\n\nSample Output 2:\n7\n85 29929\n88 29926\n785 29229\n788 29226\n7785 22229\n7788 22226\n7789 22225\ndef"
    },
    {
        "number": 3283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, r = map(int, stdin.split())\n    a = sorted(list(map(int, stdin.split())))\n    a = sorted(a)\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:r]\n    a = a[::-1]\n    a ="
    },
    {
        "number": 3284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    \n    def is_prime(x):\n        if x == 1:\n            return False\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    \n    def is_coprime(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y)\n    \n    def is_coprime_2(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y)\n    \n    def is_coprime_3(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_4(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_5(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_6(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_7(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_8(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_9(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_10(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_11(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_12(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_13(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_14(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_15(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_16(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_17(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_18(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_19(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is_prime(y) and is_coprime(x, y) and is_coprime(x, y) and is_coprime(x, y)\n    \n    def is_coprime_20(x, y):\n        if x == y:\n            return True\n        if x % y == 0:\n            return False\n        return is_prime(x) and is"
    },
    {
        "number": 3285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    A.sort()\n    for i in range(n):\n        if A[i] == A[i+1]:\n            return str(A[i])\n    return str(A[n-1])\n\nSample Input 3:\n1\nSample Output 3:\n1\n\nSample Input 4:\n1\nSample Output 4:\n1\n\n-----Constraints-----\n1 <= A.length <= 100\n1 <= A[i] <= 100\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Input Format\nThe first line contains an integer $A_1$$m$, the size of the sequence.\n\nThe next $A_i$ contains $m$ integers separated by spaces.\n\n-----Output Format\nDisplay the smallest value $n$ such that the sequence $A_1, \\ldots, A_n$ either contains $m$ as a value in the sequence or as a difference between two values in the sequence. All answers will be $\\leq 10000$.\n\n-----Example Input\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n"
    },
    {
        "number": 3286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 3287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    coins = [int(i) for i in stdin.strip().split()]\n    coins.sort()\n    coins = [i for i in coins if i >= 0]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i >= 0]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    coins = [i for i in coins if i <= k]\n    coins.sort()\n    "
    },
    {
        "number": 3288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return '-1'\n    if k == 1:\n        return '-1'\n    if n == 2:\n        return '-1'\n    if k == 2:\n        return '-1'\n    if n == 3:\n        return '-1'\n    if k == 3:\n        return '-1'\n    if n == 4:\n        return '-1'\n    if k == 4:\n        return '-1'\n    if n == 5:\n        return '-1'\n    if k == 5:\n        return '-1'\n    if n == 6:\n        return '-1'\n    if k == 6:\n        return '-1'\n    if n == 7:\n        return '-1'\n    if k == 7:\n        return '-1'\n    if n == 8:\n        return '-1'\n    if k == 8:\n        return '-1'\n    if n == 9:\n        return '-1'\n    if k == 9:\n        return '-1'\n    if n == 10:\n        return '-1'\n    if k == 10:\n        return '-1'\n    if n == 11:\n        return '-1'\n    if k == 11:\n        return '-1'\n    if n == 12:\n        return '-1'\n    if k == 12:\n        return '-1'\n    if n == 13:\n        return '-1'\n    if k == 13:\n        return '-1'\n    if n == 14:\n        return '-1'\n    if k == 14:\n        return '-1'\n    if n == 15:\n        return '-1'\n    if k == 15:\n        return '-1'\n    if n == 16:\n        return '-1'\n    if k == 16:\n        return '-1'\n    if n == 17:\n        return '-1'\n    if k == 17:\n        return '-1'\n    if n == 18:\n        return '-1'\n    if k == 18:\n        return '-1'\n    if n == 19:\n        return '-1'\n    if k == 19:\n        return '-1'\n    if n == 20:\n        return '-1'\n    if k == 20:\n        return '-1'\n    if n == 21:\n        return '-1'\n    if k == 21:\n        return '-1'\n    if n == 22:\n        return '-1'\n    if k == 22:\n        return '-1'\n    if n == 23:\n        return '-1'\n    if k == 23:\n        return '-1'\n    if n == 24:\n        return '-1'\n    if k == 24:\n        return '-1'\n    if n == 25:\n        return '-1'\n    if k == 25:\n        return '-1'\n    if n == 26:\n        return '-1'\n    if k == 26:\n        return '-1'\n    if n == 27:\n        return '-1'\n    if k == 27:\n        return '-1'\n    if n == 28:\n        return '-1'\n    if k == 28:\n        return '-1'\n    if n == 29:\n        return '-1'\n    if k == 29:\n        return '-1'\n    if n == 30:\n        return '-1'\n    if k == 30:\n        return '-1'\n    if n == 31:\n        return '-1'\n    if k == 31:\n        return '-1'\n    if n == 32:\n        return '-1'\n    if k == 32:\n        return '-1'\n    if n == 33:\n        return '-1'\n    if k == 33:\n        return '-1'\n    if n == 34:\n        return '-1'\n    if k == 34:\n        return '-1'\n    if n == 35:\n        return '-1'\n    if k == 35:\n        return '-1'\n    if n == 36:\n        return '-1'\n    if k == 36:\n        return '-1'\n    if n == 37:\n        return '-1'\n    if k == 37:\n        return '-1'\n    if n == 38:\n        return '-1'\n    if k == 38:\n        return '-1'\n    if n == 39:\n        return '-1'\n    if k == 39:\n        return '-1'\n    if n == 40:\n        return '-1'\n    if k == 40:\n        return '-1'\n    if n == 41:\n        return '-1'\n    if k == 41:\n        return '-1'\n    if n == 42:\n        return '-1'\n    if k == 42:\n        return '-1'\n    if n == 43:\n        return '-1'\n    if k == 43:\n        return '-1'\n    if n == 44:\n        return '-1'\n    if k == 44:\n        return '-1'\n    if n == 45:\n        return '-1'\n    if k == 45:\n        return '-1'\n    if n == 46:\n        return '-1'\n    if k == 46:\n        return '-1'\n    if n == 47:\n        return '-1'\n    if k == 47:\n        return '-1'\n    if n == 48:\n        return '-1'\n    if k == 48:\n        return '-1'\n    if n == 49:\n        return '-1'\n    if k == 49:\n        return '-1'\n    if n == 50:\n        return '-1'\n    if k == 50:\n        return '-1'\n    if n == 51:\n        return '-1'\n    if k == 51:\n        return '-1'\n    if n == 52:\n        return '-1'\n    if k == 52:\n        return '-1'\n    if n == 53:\n        return '-1'\n    if k == 53:\n        return '-1'\n    if n == 54:\n        return '-1'\n    if k == 54:\n        return '-1'\n    if n == 55:\n        return '-1'\n    if k == 55:\n        return '-1'\n    if n =="
    },
    {
        "number": 3289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    c = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    a_i = 0\n    b_i = 0\n    c_i = 0\n    for i in range(n):\n        if a[i] == a_i:\n            a_i += 1\n        elif b[i] == b_i:\n            b_i += 1\n        elif c[i] == c_i:\n            c_i += 1\n    if a_i > b_i and a_i > c_i:\n        return str(a_i)\n    elif b_i > a_i and b_i > c_i:\n        return str(b_i)\n    elif c_i > a_i and c_i > b_i:\n        return str(c_i)\n    else:\n        return str(n)\n"
    },
    {
        "number": 3290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e, d = map(int, stdin.split())\n    deck = []\n    for _ in range(n):\n        deck.append(int(stdin.split()[0]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[1]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[2]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[3]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[4]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[5]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[6]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[7]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[8]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[9]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[10]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[11]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[12]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[13]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[14]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[15]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[16]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[17]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[18]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[19]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[20]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[21]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[22]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[23]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[24]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[25]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[26]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[27]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[28]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[29]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[30]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[31]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[32]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[33]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[34]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[35]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[36]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[37]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[38]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[39]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[40]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[41]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[42]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[43]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[44]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[45]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[46]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[47]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[48]))\n    for _ in range(d):\n        deck.append(int(stdin.split()[49]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[50]))\n    for _ in range(e):\n        deck.append(int(stdin.split()[51]))\n    for _ in range("
    },
    {
        "number": 3291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    a.reverse()\n    b.reverse()\n    c.reverse()\n    d.reverse()\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(n)\n    b.append(m)\n    c.append(m)\n    d.append(m)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    a."
    },
    {
        "number": 3292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    names = []\n    for i in range(n):\n        names.append(stdin.strip().split(' '))\n    names.sort(key=lambda x: x[0])\n    answer = 0\n    for i in range(n):\n        answer += len(names[i])\n    return str(answer)\n"
    },
    {
        "number": 3293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m, s = map(int, stdin.split())\n    return str(p * m * s)\n"
    },
    {
        "number": 3294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n    H.sort()\n    for i in range(N):\n        H[i] = abs(H[i] - H[i+1])\n    for i in range(N-1):\n        H[i+1] = abs(H[i+1] - H[i])\n    for i in range(N-2):\n        H[i+2] = abs(H[i+2] - H[i])\n    for i in range(N-3):\n        H[i+3] = abs(H[i+3] - H[i])\n    for i in range(N-4):\n        H[i+4] = abs(H[i+4] - H[i])\n    for i in range(N-5):\n        H[i+5] = abs(H[i+5] - H[i])\n    for i in range(N-6):\n        H[i+6] = abs(H[i+6] - H[i])\n    for i in range(N-7):\n        H[i+7] = abs(H[i+7] - H[i])\n    for i in range(N-8):\n        H[i+8] = abs(H[i+8] - H[i])\n    for i in range(N-9):\n        H[i+9] = abs(H[i+9] - H[i])\n    for i in range(N-10):\n        H[i+10] = abs(H[i+10] - H[i])\n    for i in range(N-11):\n        H[i+11] = abs(H[i+11] - H[i])\n    for i in range(N-12):\n        H[i+12] = abs(H[i+12] - H[i])\n    for i in range(N-13):\n        H[i+13] = abs(H[i+13] - H[i])\n    for i in range(N-14):\n        H[i+14] = abs(H[i+14] - H[i])\n    for i in range(N-15):\n        H[i+15] = abs(H[i+15] - H[i])\n    for i in range(N-16):\n        H[i+16] = abs(H[i+16] - H[i])\n    for i in range(N-17):\n        H[i+17] = abs(H[i+17] - H[i])\n    for i in range(N-18):\n        H[i+18] = abs(H[i+18] - H[i])\n    for i in range(N-19):\n        H[i+19] = abs(H[i+19] - H[i])\n    for i in range(N-20):\n        H[i+20] = abs(H[i+20] - H[i])\n    for i in range(N-21):\n        H[i+21] = abs(H[i+21] - H[i])\n    for i in range(N-22):\n        H[i+22] = abs(H[i+22] - H[i])\n    for i in range(N-23):\n        H[i+23] = abs(H[i+23] - H[i])\n    for i in range(N-24):\n        H[i+24] = abs(H[i+24] - H[i])\n    for i in range(N-25):\n        H[i+25] = abs(H[i+25] - H[i])\n    for i in range(N-26):\n        H[i+26] = abs(H[i+26] - H[i])\n    for i in range(N-27):\n        H[i+27] = abs(H[i+27] - H[i])\n    for i in range(N-28):\n        H[i+28] = abs(H[i+28] - H[i])\n    for i in range(N-29):\n        H[i+29] = abs(H[i+29] - H[i])\n    for i in range(N-30):\n        H[i+30] = abs(H[i+30] - H[i])\n    for i in range(N-31):\n        H[i+31] = abs(H[i+31] - H[i])\n    for i in range(N-32):\n        H[i+32] = abs(H[i+32] - H[i])\n    for i in range(N-33):\n        H[i+33] = abs(H[i+33] - H[i])\n    for i in range(N-34):\n        H[i+34] = abs(H[i+34] - H[i])\n    for i in range(N-35):\n        H[i+35] = abs(H[i+35] - H[i])\n    for i in range(N-36):\n        H[i+36] = abs(H[i+36] - H[i])\n    for i in range(N-37):\n        H[i+37] = abs(H[i+37] - H[i])\n    for i in range(N-38):\n        H[i+38] = abs(H[i+38] - H[i])\n    for i in range(N-39):\n        H[i+39] = abs(H[i+39] - H[i])\n    for i in range(N-40):\n        H[i+40] = abs(H[i+40] - H[i])\n    for i in range(N-41):\n        H[i+41] = abs(H[i+41] - H[i])\n    for i in range(N-42):\n        H[i+42] = abs(H[i+42] - H[i])\n    for i in range(N-43):\n        H[i+43] = abs(H[i+43] - H[i])\n    for i in range(N-44):\n        H[i+44] = abs(H[i+44] - H[i])\n    for i in range(N-45):\n        H[i+45] = abs(H[i+45] - H[i])"
    },
    {
        "number": 3295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n    for i in range(n):\n        if arr[i] >= arr[i+1]:\n            return str(arr[i])\n    return str(-1)\n\nSample Output 2:\n4\n24\n\"\"\"\n\ndef"
    },
    {
        "number": 3296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k!= 0:\n        return ''\n    \n    n = n // k\n    \n    permutations = []\n    for i in range(1, n + 1):\n        permutations.append(i)\n        permutations.append(i + 1)\n        permutations.append(i + 2)\n    \n    permutations.sort()\n    \n    return ''.join(str(i) for i in permutations)\n\n-----Examples-----\nInput 1:\n3 2\nOutput 1:\n3\n\nInput 2:\n6 6\nOutput 2:\n240\ndef"
    },
    {
        "number": 3297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s: str) -> str:\n        if len(s) == 1:\n            return s\n        if s[0] == '+':\n            return solve(s[1:]) + solve(s[0:1])\n        if s[0] == '=':\n            return solve(s[1:]) + solve(s[0:1]) + solve(s[1:])\n        return 'impossible'\n    return solve(stdin)\n\nSample Output 2:\nimpossible\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:"
    },
    {
        "number": 3299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    checkerboard = [list(map(int, input().split())) for _ in range(n)]\n    checkerboard = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 1\n            else:\n                checkerboard[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else:\n                checkerboard[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                checkerboard[i][j] = 0\n            else"
    },
    {
        "number": 3300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    cheetahs = [list(map(int, input().split())) for _ in range(N)]\n    cheetahs.sort(key=lambda x: x[0])\n    cheetahs.sort(key=lambda x: x[1])\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range(N):\n        cheetahs[i][1] = T - cheetahs[i][1]\n    for i in range(N):\n        cheetahs[i][0] = T - cheetahs[i][0]\n    for i in range"
    },
    {
        "number": 3301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P, X, Y = map(int, stdin.split())\n    a_i, b_i, c_i = map(int, stdin.split())\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_i, c_i])\n    a_i, b_i, c_i = sorted([a_i, b_"
    },
    {
        "number": 3302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n == 1:\n        return 'impossible'\n    if p == 1:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 2:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 3:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 4:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 5:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 6:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 7:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 8:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 9:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 10:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 11:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 12:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 13:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 14:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 15:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 16:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 17:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 18:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 19:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 20:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 21:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 22:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 23:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 24:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 25:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 26:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 27:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 28:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 29:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 30:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 31:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 32:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 33:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 34:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 35:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 36:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 37:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 38:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 39:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 40:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 41:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 42:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 43:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 44:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 45:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 46:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 47:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 48:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 49:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 50:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 51:\n        return ''.join(map(str, range(1, n+1)))\n    if p == 52:\n        return ''.join(map(str, range(1, n"
    },
    {
        "number": 3303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    carry = 0\n    for i in range(len(nums) - 1):\n        if carry == 0:\n            break\n        if nums[i] + carry > 9:\n            carry = 0\n            nums[i] += 1\n        else:\n            carry = nums[i] + carry\n            nums[i] = 0\n    return str(nums[-1])\n"
    },
    {
        "number": 3304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    P = list(map(int, stdin.strip().split()))\n    V = list(map(int, stdin.strip().split()))\n    \n    def get_max_victories(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_2(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_3(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_4(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_5(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_6(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_7(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_8(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_9(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_10(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_11(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_12(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_13(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_14(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max_victories += 1\n        return max_victories\n    \n    def get_max_victories_15(A, P, V):\n        max_victories = 0\n        for i in range(len(A)):\n            for j in range(len(P)):\n                if A[i] == P[j] and V[i] == P[j]:\n                    max"
    },
    {
        "number": 3305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    s = stdin.split()\n    s = [int(i) for i in s]\n    s.sort()\n    for i in range(q):\n        l, r = map(int, input().split())\n        print(s[l:r+1])\n    return \"\"\n\n-----Examples-----\nSample Input 1:\n6 1\nbeginning\n1 5\n4 8\n1 9\nSample Output 1:\n5\n11\n16\n\nSample Input 2:\n6 1\nvelvet\n1 6\nSample Output 2:\n7\ndef"
    },
    {
        "number": 3306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    \n    def get_house_number(house):\n        return houses.index(house) + 1\n    \n    def get_phone_number(house):\n        return house * M + get_house_number(house)\n    \n    def get_phone_number_2(house):\n        return house * M + get_house_number(house) + 1\n    \n    def get_phone_number_3(house):\n        return house * M + get_house_number(house) + 2\n    \n    def get_phone_number_4(house):\n        return house * M + get_house_number(house) + 3\n    \n    def get_phone_number_5(house):\n        return house * M + get_house_number(house) + 4\n    \n    def get_phone_number_6(house):\n        return house * M + get_house_number(house) + 5\n    \n    def get_phone_number_7(house):\n        return house * M + get_house_number(house) + 6\n    \n    def get_phone_number_8(house):\n        return house * M + get_house_number(house) + 7\n    \n    def get_phone_number_9(house):\n        return house * M + get_house_number(house) + 8\n    \n    def get_phone_number_10(house):\n        return house * M + get_house_number(house) + 9\n    \n    def get_phone_number_11(house):\n        return house * M + get_house_number(house) + 10\n    \n    def get_phone_number_12(house):\n        return house * M + get_house_number(house) + 11\n    \n    def get_phone_number_13(house):\n        return house * M + get_house_number(house) + 12\n    \n    def get_phone_number_14(house):\n        return house * M + get_house_number(house) + 13\n    \n    def get_phone_number_15(house):\n        return house * M + get_house_number(house) + 14\n    \n    def get_phone_number_16(house):\n        return house * M + get_house_number(house) + 15\n    \n    def get_phone_number_17(house):\n        return house * M + get_house_number(house) + 16\n    \n    def get_phone_number_18(house):\n        return house * M + get_house_number(house) + 17\n    \n    def get_phone_number_19(house):\n        return house * M + get_house_number(house) + 18\n    \n    def get_phone_number_20(house):\n        return house * M + get_house_number(house) + 19\n    \n    def get_phone_number_21(house):\n        return house * M + get_house_number(house) + 20\n    \n    def get_phone_number_22(house):\n        return house * M + get_house_number(house) + 21\n    \n    def get_phone_number_23(house):\n        return house * M + get_house_number(house) + 22\n    \n    def get_phone_number_24(house):\n        return house * M + get_house_number(house) + 23\n    \n    def get_phone_number_25(house):\n        return house * M + get_house_number(house) + 24\n    \n    def get_phone_number_26(house):\n        return house * M + get_house_number(house) + 25\n    \n    def get_phone_number_27(house):\n        return house * M + get_house_number(house) + 26\n    \n    def get_phone_number_28(house):\n        return house * M + get_house_number(house) + 27\n    \n    def get_phone_number_29(house):\n        return house * M + get_house_number(house) + 28\n    \n    def get_phone_number_30(house):\n        return house * M + get_house_number(house) + 29\n    \n    def get_phone_number_31(house):\n        return house * M + get_house_number(house) + 30\n    \n    def get_phone_number_32(house):\n        return house * M + get_house_number(house) + 31\n    \n    def get_phone_number_33(house):\n        return house * M + get_house_number(house) + 32\n    \n    def get_phone_number_34(house):\n        return house * M + get_house_number(house) + 33\n    \n    def get_phone_number_35(house):\n        return house * M + get_house_number(house) + 34\n    \n    def get_phone_number_36(house):\n        return house * M + get_house_number(house) + 35\n    \n    def get_phone_number_37(house):\n        return house * M + get_house_number(house) + 36\n    \n    def get_phone_number_38(house):\n        return house * M + get_house_number(house) + 37\n    \n    def get_phone_number_39(house):\n        return house * M + get_house_number(house) + 38\n    \n    def get_phone_number_40(house):\n        return house * M + get_house_number(house) + 39\n    \n    def get_phone_number_41(house):\n        return house * M + get_house_number(house) + 40\n    \n    def get_phone_number_42(house):\n        return house * M + get_house_number(house) + 41\n    \n    def get_phone_number_43(house):\n        return house * M + get_house_number(house) + 42\n    \n    def get_phone_number_44(house):\n        return house * M + get_house_number(house) + 43\n    \n    def get_phone_number_45(house):\n        return house * M + get_house_number(house) + 44\n    \n    def get_phone_number_46(house):\n        return house * M + get_house_number(house) + 45\n    \n    def get_phone_number_47(house):\n        return house * M + get_house_number(house) + 46\n    \n    def get_phone_number_48(house):\n        return house * M + get_house_number(house) + 47\n    \n    def get_phone_number_49(house):\n        return house * M + get_house_number(house) + 48\n    \n    def get_phone"
    },
    {
        "number": 3307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    a = x[0]\n    b = x[-1]\n    if a == b:\n        return str(abs(a - b))\n    else:\n        return str(abs(a - b) / max(a, b))\n\n-----Sample Output-----\nSample Input 1:\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\nSample Output 1:\n0.0000000000\n\nSample Input 2:\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\nSample Output 2:\n9.476048311178\ndef"
    },
    {
        "number": 3308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(float, stdin.split()))\n    y = list(map(float, stdin.split()))\n    x.sort()\n    y.sort()\n    a = 0\n    b = 0\n    for i in range(n):\n        a += (x[i] - y[i])**2\n        b += (x[i] - y[i])\n    if a < b:\n        return str(abs(a/b))\n    else:\n        return str(abs(b/a))\n"
    },
    {
        "number": 3309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, C = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n    A.append(C)\n    A.sort()\n    A = [0] + A\n    A.append(N)\n    A.append(K)\n"
    },
    {
        "number": 3310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, g, t = map(int, stdin.split())\n    if n > g:\n        return str(n - g)\n    elif n == g:\n        return str(t)\n    else:\n        return str(n - g) + str(t)\n"
    },
    {
        "number": 3311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n**m)\n\nSample Input 3:\n1\nSample Output 3:\n1\n\nSample Input 4:\n1\nSample Output 4:\n1\n\nSample Input 5:\n1\nSample Output 5:\n1\n\n-----Constraints-----\n1 <= n <= 10^9\n1 <= m <= 10^9\n\"\"\"\n\ndef"
    },
    {
        "number": 3312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, E, C, X, Y, CT = map(int, stdin.split())\n    return str(min(N, E, C, X, Y, CT) + 1)\n\ndef"
    },
    {
        "number": 3313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, w, h = map(int, stdin.split())\n    return str(n*r*w*h)\n"
    },
    {
        "number": 3314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 3:\n        return -1\n    \n    letters = [list(stdin.strip()) for _ in range(n)]\n    \n    # find the first and last index of each letter\n    first = 0\n    last = n - 1\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    for i in range(n):\n        if letters[i][first] == letters[i][last]:\n            first += 1\n            last -= 1\n        else:\n            break\n    \n    # find the first and last index of each letter\n    "
    },
    {
        "number": 3315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lodas = [list(map(str, input().strip().split())) for _ in range(n)]\n    lodas.sort(key=lambda x: len(x))\n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lodas[i][j] == lodas[j][i]:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 3316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t, p = map(int, stdin.split())\n    if n > m:\n        n, m = m, n\n    if t > p:\n        t, p = p, t\n    if n == 0:\n        return '0'\n    if m == 0:\n        return '0'\n    if t == 0:\n        return '0'\n    if p == 0:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n == m:\n        return '0'\n    if t == p:\n        return '0'\n    if n =="
    },
    {
        "number": 3317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip().split()[0])\n    s = stdin.strip().split()\n    for i in range(q):\n        s[i] = int(s[i])\n    answer = ''\n    for i in range(q):\n        answer += str(s[i])\n    return answer\n\nSample Output:\n4\n0\n5\ndef"
    },
    {
        "number": 3318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    nodes = [int(i) for i in stdin.split()]\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.sort()\n    nodes = [0] + nodes\n    nodes.append(N)\n    nodes.append(D)\n    nodes.sort()\n    nodes = [0] +"
    },
    {
        "number": 3319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    vx, vy, vz = map(int, stdin.split())\n    \n    def get_colliding_planetoid(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2\n    \n    def get_colliding_planetoid_index(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_2(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_3(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_4(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_5(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_6(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_7(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_8(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_9(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_10(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_11(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_12(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_13(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_14(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_15(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_16(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_17(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_18(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_19(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_20(x, y, z, vx, vy, vz):\n        return (x + y + z) // 2 - 1\n    \n    def get_colliding_planetoid_index_21(x, y, z, vx, vy, vz):"
    },
    {
        "number": 3320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    q = int(stdin.split()[1])\n    s = list(map(int, stdin.split()[2:]))\n    t = list(map(int, stdin.split()[3:]))\n    \n    def dfs(s, t, q):\n        if q == 0:\n            return 0\n        \n        if s == t:\n            return 1\n        \n        if s[0] == t[0]:\n            return dfs(s[1:], t[1:], q-1) + dfs(s[1:], t[1:], q-1)\n        \n        return dfs(s[1:], t[1:], q-1) + dfs(s[1:], t[1:], q-1)\n    \n    return str(dfs(s, t, q))\n"
    },
    {
        "number": 3321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seq = list(map(int, stdin.strip().split()))\n    seq.sort()\n    for i in range(n):\n        seq[i] = seq[i] + seq[i+1]\n    return ''.join(map(str, seq))\n"
    },
    {
        "number": 3322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a, p, b, q = map(int, stdin.split())\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10, 10):\n        return '-1'\n    if (a, p, b, q) == (1, 10, 10"
    },
    {
        "number": 3323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip().split()[0])\n    N = int(stdin.strip().split()[1])\n    A = [int(i) for i in stdin.strip().split()[2:]]\n    B = [int(i) for i in stdin.strip().split()[3:]]\n    C = [int(i) for i in stdin.strip().split()[4:]]\n    \n    A.sort()\n    B.sort()\n    C.sort()\n    \n    A_sum = sum(A)\n    B_sum = sum(B)\n    C_sum = sum(C)\n    \n    if A_sum >= B_sum and A_sum >= C_sum:\n        return 'Case #{}'.format(T)\n    elif B_sum >= A_sum and B_sum >= C_sum:\n        return 'Case #{}'.format(T)\n    elif C_sum >= A_sum and C_sum >= B_sum:\n        return 'Case #{}'.format(T)\n    else:\n        return 'Case #{}'.format(T)\n"
    },
    {
        "number": 3324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return ''\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '0'\n    elif n == 3:\n        return '0'\n    elif n == 4:\n        return '0'\n    elif n == 5:\n        return '0'\n    elif n == 6:\n        return '0'\n    elif n == 7:\n        return '0'\n    elif n == 8:\n        return '0'\n    elif n == 9:\n        return '0'\n    elif n == 10:\n        return '0'\n    elif n == 11:\n        return '0'\n    elif n == 12:\n        return '0'\n    elif n == 13:\n        return '0'\n    elif n == 14:\n        return '0'\n    elif n == 15:\n        return '0'\n    elif n == 16:\n        return '0'\n    elif n == 17:\n        return '0'\n    elif n == 18:\n        return '0'\n    elif n == 19:\n        return '0'\n    elif n == 20:\n        return '0'\n    elif n == 21:\n        return '0'\n    elif n == 22:\n        return '0'\n    elif n == 23:\n        return '0'\n    elif n == 24:\n        return '0'\n    elif n == 25:\n        return '0'\n    elif n == 26:\n        return '0'\n    elif n == 27:\n        return '0'\n    elif n == 28:\n        return '0'\n    elif n == 29:\n        return '0'\n    elif n == 30:\n        return '0'\n    elif n == 31:\n        return '0'\n    elif n == 32:\n        return '0'\n    elif n == 33:\n        return '0'\n    elif n == 34:\n        return '0'\n    elif n == 35:\n        return '0'\n    elif n == 36:\n        return '0'\n    elif n == 37:\n        return '0'\n    elif n == 38:\n        return '0'\n    elif n == 39:\n        return '0'\n    elif n == 40:\n        return '0'\n    elif n == 41:\n        return '0'\n    elif n == 42:\n        return '0'\n    elif n == 43:\n        return '0'\n    elif n == 44:\n        return '0'\n    elif n == 45:\n        return '0'\n    elif n == 46:\n        return '0'\n    elif n == 47:\n        return '0'\n    elif n == 48:\n        return '0'\n    elif n == 49:\n        return '0'\n    elif n == 50:\n        return '0'\n    elif n == 51:\n        return '0'\n    elif n == 52:\n        return '0'\n    elif n == 53:\n        return '0'\n    elif n == 54:\n        return '0'\n    elif n == 55:\n        return '0'\n    elif n == 56:\n        return '0'\n    elif n == 57:\n        return '0'\n    elif n == 58:\n        return '0'\n    elif n == 59:\n        return '0'\n    elif n == 60:\n        return '0'\n    elif n == 61:\n        return '0'\n    elif n == 62:\n        return '0'\n    elif n == 63:\n        return '0'\n    elif n == 64:\n        return '0'\n    elif n == 65:\n        return '0'\n    elif n == 66:\n        return '0'\n    elif n == 67:\n        return '0'\n    elif n == 68:\n        return '0'\n    elif n == 69:\n        return '0'\n    elif n == 70:\n        return '0'\n    elif n == 71:\n        return '0'\n    elif n == 72:\n        "
    },
    {
        "number": 3325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, L = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return 'Infinity'\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return '-Infinity'\n    if (x > 0 and y < 0)"
    },
    {
        "number": 3326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.strip().split())))\n    \n    def is_monotonic(grid):\n        for i in range(n):\n            for j in range(i+1):\n                if grid[i][j] < grid[i][j+1]:\n                    return False\n        return True\n    \n    def count_monotonic(grid):\n        count = 0\n        for i in range(n):\n            for j in range(i+1):\n                if grid[i][j] < grid[i][j+1]:\n                    count += 1\n        return count\n    \n    for i in range(n):\n        for j in range(n):\n            if is_monotonic(grid[i][j:j+2]):\n                grid[i][j:j+2] = grid[i][j:j+2][::-1]\n    \n    return str(count_monotonic(grid))\n\ndef"
    },
    {
        "number": 3327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = []\n    for _ in range(R):\n        grid.append(stdin.split())\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n            elif grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(R):"
    },
    {
        "number": 3328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    table = [list(map(int, input().split())) for _ in range(N)]\n    sum = 0\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                sum += table[i][j]\n            else:\n                sum += table[i][j] - table[i][j] + table[j][i]\n    return str(sum)\n\ndef"
    },
    {
        "number": 3329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    pebbles = [list(map(str, input().split())) for _ in range(N)]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'B' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-1] if x[0] == 'W' else x, x)) for x in pebbles]\n    pebbles = [list(map(lambda x: x[::-"
    },
    {
        "number": 3330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    c = 0\n    for i in range(n):\n        c += a[i] * (l - i)\n    return str(c)\n\nSample Input:\n3 1\n3 2 1\n1 2 3\nSample Output:\n0.556\ndef"
    },
    {
        "number": 3331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    p.sort()\n    c = []\n    for i in range(n):\n        c.append(a[i] - b[i])\n    c.sort()\n    for i in range(m):\n        if c[i] == 0:\n            c[i] = 1\n        else:\n            c[i] = 2\n    return str(len(c))\n\nSample Output:\n3\nExplanation:\nThe cows are located at positions $0$ and $1$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the right endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from the left endpoint.\nThe horse is chasing the cow at positions $2$ and $3$ meters from"
    },
    {
        "number": 3332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    streams = []\n    for _ in range(n):\n        s, d, p = map(int, stdin.strip().split())\n        streams.append((s, d, p))\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n    streams.sort(key=lambda x: x[0])\n    streams.sort(key=lambda x: x[1])\n    streams.sort(key=lambda x: x[2])\n"
    },
    {
        "number": 3333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(abs(x-y))\n"
    },
    {
        "number": 3334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    distances = [int(stdin.strip()) for _ in range(n)]\n    distances.sort()\n    answer = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            answer += distances[i] + distances[j]\n    return str(answer/2)\n\nSample Output:\n2.13333333333333\nExplanation:\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\n\nOptistan is a strange country. It is"
    },
    {
        "number": 3335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    triples = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i+j+k == n:\n                    triples += 1\n    return str(triples)\n\nSample Output:\n18\nExplanation:\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3336,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    h = int(stdin.strip().split()[0])\n    pref = stdin.strip().split()[1]\n    sport = stdin.strip().split()[2]\n    \n    if pref == 'F':\n        if sport == 'classicism':\n            return str(n//2)\n        elif sport == 'baroque':\n            return str(n//2)\n        elif sport == 'chess':\n            return str(n//2)\n        elif sport =='soccer':\n            return str(n//2)\n    elif pref == 'M':\n        if sport == 'classicism':\n            return str(n//2)\n        elif sport == 'baroque':\n            return str(n//2)\n        elif sport == 'chess':\n            return str(n//2)\n        elif sport =='soccer':\n            return str(n//2)\n    else:\n        return str(n)\n"
    },
    {
        "number": 3337,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stack = []\n    for i in range(n):\n        line = stdin[i].split()\n        if line[0] == 'a':\n            stack.append(int(line[1]))\n        elif line[0] == 'b':\n            if len(stack) == 0:\n                return '0'\n            else:\n                stack.pop()\n        elif line[0] == 'c':\n            if len(stack) == 0:\n                return '0'\n            else:\n                stack.pop()\n                stack.append(int(line[1]))\n    return str(len(stack))\n\nSample Output:\n2\n1\n2\ndef"
    },
    {
        "number": 3338,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    S = [int(i) for i in stdin.split()]\n    S.sort()\n    d = 0\n    for i in range(n):\n        d += S[i]\n        if d >= k:\n            d = 0\n            S[i] = 0\n    return str(d)\n"
    },
    {
        "number": 3339,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % 2 == 0:\n        return str(n//2)\n    else:\n        return str(n//2 + 1)\n"
    },
    {
        "number": 3340,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cities = []\n    for i in range(n):\n        cities.append(list(map(int, input().split())))\n    cities.sort(key=lambda x: x[0])\n    cities.sort(key=lambda x: x[1])\n    cities.sort(key=lambda x: x[2])\n    cities.sort(key=lambda x: x[3])\n    cities.sort(key=lambda x: x[4])\n    cities.sort(key=lambda x: x[5])\n    cities.sort(key=lambda x: x[6])\n    cities.sort(key=lambda x: x[7])\n    cities.sort(key=lambda x: x[8])\n    cities.sort(key=lambda x: x[9])\n    cities.sort(key=lambda x: x[10])\n    cities.sort(key=lambda x: x[11])\n    cities.sort(key=lambda x: x[12])\n    cities.sort(key=lambda x: x[13])\n    cities.sort(key=lambda x: x[14])\n    cities.sort(key=lambda x: x[15])\n    cities.sort(key=lambda x: x[16])\n    cities.sort(key=lambda x: x[17])\n    cities.sort(key=lambda x: x[18])\n    cities.sort(key=lambda x: x[19])\n    cities.sort(key=lambda x: x[20])\n    cities.sort(key=lambda x: x[21])\n    cities.sort(key=lambda x: x[22])\n    cities.sort(key=lambda x: x[23])\n    cities.sort(key=lambda x: x[24])\n    cities.sort(key=lambda x: x[25])\n    cities.sort(key=lambda x: x[26])\n    cities.sort(key=lambda x: x[27])\n    cities.sort(key=lambda x: x[28])\n    cities.sort(key=lambda x: x[29])\n    cities.sort(key=lambda x: x[30])\n    cities.sort(key=lambda x: x[31])\n    cities.sort(key=lambda x: x[32])\n    cities.sort(key=lambda x: x[33])\n    cities.sort(key=lambda x: x[34])\n    cities.sort(key=lambda x: x[35])\n    cities.sort(key=lambda x: x[36])\n    cities.sort(key=lambda x: x[37])\n    cities.sort(key=lambda x: x[38])\n    cities.sort(key=lambda x: x[39])\n    cities.sort(key=lambda x: x[40])\n    cities.sort(key=lambda x: x[41])\n    cities.sort(key=lambda x: x[42])\n    cities.sort(key=lambda x: x[43])\n    cities.sort(key=lambda x: x[44])\n    cities.sort(key=lambda x: x[45])\n    cities.sort(key=lambda x: x[46])\n    cities.sort(key=lambda x: x[47])\n    cities.sort(key=lambda x: x[48])\n    cities.sort(key=lambda x: x[49])\n    cities.sort(key=lambda x: x[50])\n    cities.sort(key=lambda x: x[51])\n    cities.sort(key=lambda x: x[52])\n    cities.sort(key=lambda x: x[53])\n    cities.sort(key=lambda x: x[54])\n    cities.sort(key=lambda x: x[55])\n    cities.sort(key=lambda x: x[56])\n    cities.sort(key=lambda x: x[57])\n    cities.sort(key=lambda x: x[58])\n    cities.sort(key=lambda x: x[59])\n    cities.sort(key=lambda x: x[60])\n    cities.sort(key=lambda x: x[61])\n    cities.sort(key=lambda x: x[62])\n    cities.sort(key=lambda x: x[63])\n    cities.sort(key=lambda x: x[64])\n    cities.sort(key=lambda x: x[65])\n    cities.sort(key=lambda x: x[66])\n    cities.sort(key=lambda x: x[67])\n    cities.sort(key=lambda x: x[68])\n    cities.sort(key=lambda x: x[69])\n    cities.sort(key=lambda x: x[70])\n    cities.sort(key=lambda x: x[71])\n    cities.sort(key=lambda x: x[72])\n    cities.sort(key=lambda x: x[73])\n    cities.sort(key=lambda x: x[74])\n    cities.sort(key=lambda x: x[75])\n    cities.sort(key=lambda x: x[76])\n    cities.sort(key=lambda x: x[77])\n    cities.sort(key=lambda x: x[78])\n    cities.sort(key=lambda x: x[79])\n    cities.sort(key=lambda x: x[80])\n    cities.sort(key=lambda x: x[81])\n    cities.sort(key=lambda x: x[82])\n    cities.sort(key=lambda x: x[83])\n    cities.sort(key=lambda x: x[84])\n    cities.sort(key=lambda x: x[85])\n    cities.sort(key=lambda x: x[86])\n    cities.sort(key=lambda x: x[87])\n    cities.sort(key=lambda x: x[88])\n    cities.sort(key=lambda x: x[89])\n    cities.sort(key=lambda x: x[90])\n    cities.sort(key=lambda x: x[91])\n    cities.sort(key=lambda x: x[92])\n    cities.sort(key=lambda x: x[93])\n    cities.sort(key=lambda x:"
    },
    {
        "number": 3341,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    p_i, d_i = map(int, stdin.split())\n    q_j, e_j = map(int, stdin.split())\n    \n    def get_price(i, j):\n        return (p_i * (j + 1) + d_i) * (q_j + 1) + e_j\n    \n    def get_profit(i, j):\n        return (get_price(i, j) - get_price(i, j - 1))\n    \n    def get_profit_2(i, j):\n        return (get_price(i, j) - get_price(i - 1, j))\n    \n    def get_profit_3(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_4(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_5(i, j):\n        return (get_price(i, j) - get_price(i - 1, j))\n    \n    def get_profit_6(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_7(i, j):\n        return (get_price(i, j) - get_price(i - 1, j))\n    \n    def get_profit_8(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_9(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_10(i, j):\n        return (get_price(i, j) - get_price(i - 1, j))\n    \n    def get_profit_11(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_12(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_13(i, j):\n        return (get_price(i, j) - get_price(i - 1, j))\n    \n    def get_profit_14(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_15(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_16(i, j):\n        return (get_price(i, j) - get_price(i - 1, j))\n    \n    def get_profit_17(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_18(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_19(i, j):\n        return (get_price(i, j) - get_price(i - 1, j))\n    \n    def get_profit_20(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_21(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_22(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_23(i, j):\n        return (get_price(i, j) - get_price(i - 1, j))\n    \n    def get_profit_24(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_25(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_26(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_27(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_28(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_29(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_30(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_31(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_32(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_33(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_34(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_35(i, j):\n        return (get_price(i, j) - get_price(i - 1, j - 1))\n    \n    def get_profit_36(i, j):\n        return (get_price(i, j) - get"
    },
    {
        "number": 3342,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    fence_posts = []\n    for _ in range(N):\n        fence_posts.append(list(map(int, stdin.split())))\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    fence_posts.sort(key=lambda x: x[0])\n    fence_posts.sort(key=lambda x: x[1])\n    fence_posts.sort(key=lambda x: x[2])\n    f"
    },
    {
        "number": 3343,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, n = map(int, stdin.split())\n    points = [int(i) for i in stdin.split()]\n    points.sort()\n    direction = 'C' if points[0] < points[1] else 'W'\n    for i in range(2, n):\n        points[i] += points[i-1]\n    points.sort()\n    return direction * points[0] + direction * points[-1]\n"
    },
    {
        "number": 3344,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    x = list(map(float, stdin.split()))\n    x.sort()\n    v = x[-1] - x[0]\n    if v < 0:\n        v = v * 10\n    if v > 10:\n        v = v / 10\n    return str(v)\n\nSample Input:\n2 3\n0.00 2.00\nSample Output:\n2\ndef"
    },
    {
        "number": 3345,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    return str(abs(x - y))\n\nSample Input:\n2\n0 0\n10 0\n2\n30 0\n15 0\nSample Output:\n10\ndef"
    },
    {
        "number": 3346,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    if n == 0:\n        return '0'\n    if t == 0:\n        return '0'\n    if t > 180:\n        return '0'\n    if n > 250:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    if n % 2 == 0:\n        return '0'\n    if n % 2 == 1:\n        return '0'\n    "
    },
    {
        "number": 3347,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = list(map(int, stdin.strip().split()))\n    h = list(map(int, stdin.strip().split()))\n    h.sort()\n    for i in range(n):\n        t[i] = t[i] + h[i]\n    t.sort()\n    for i in range(n):\n        t[i] = t[i] - h[i]\n    return str(len(t))\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= t_i, h_i <= 10^9\n0 <= t_i <= 10^9\n0 <= h_i <= 10^9\n\n-----Time Limit: 1.5 seconds per test case -----\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.strip())\n        t = list(map(int, stdin.strip().split()))\n        h = list(map(int, stdin.strip().split()))\n        h.sort()\n        for i in range(n):\n            t[i] = t[i] + h[i]\n        t.sort()\n        for i in range(n):\n            t[i] = t[i] - h[i]\n        return str(len(t))\n"
    },
    {
        "number": 3348,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    if n!= m:\n        return \"impossible\"\n    if len(a)!= len(b) or len(a)!= len(c):\n        return \"impossible\"\n    if a[0]!= b[0] or a[-1]!= b[-1] or c[0]!= b[0] or c[-1]!= b[-1]:\n        return \"impossible\"\n    for i in range(len(a)):\n        if a[i]!= b[i] or a[i]!= c[i]:\n            return \"impossible\"\n    return \"\".join(a)\n"
    },
    {
        "number": 3349,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dictionary = set(stdin.split())\n    message = stdin.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message.split()\n    message = [word for word in message if word not in dictionary]\n    message =''.join(message)\n    message = message"
    },
    {
        "number": 3350,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.split()\n    word.sort(key=len)\n    for i in range(len(word)):\n        if word[i] == 'a':\n            word[i] = 'b'\n        elif word[i] == 'b':\n            word[i] = 'a'\n    return ''.join(word)\n"
    },
    {
        "number": 3351,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dice = [int(i) for i in stdin.split()]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range(n)]\n    dice.sort()\n    dice = [dice[i] for i in range("
    },
    {
        "number": 3352,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    nodes = [list(map(int, stdin.split())) for _ in range(N)]\n    nodes.sort(key=lambda x: x[0])\n    parent = [0] * N\n    for i in range(N):\n        parent[i] = i\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if nodes[i][0] == nodes[j][0] and nodes[i][1] == nodes[j][1]:\n                parent[i] = parent[j]\n                parent[j] = i\n    for i in range(Q):\n        x, y = map(int, stdin.split())\n        if x == 0 and y == 0:\n            break\n        if x == 0:\n            parent[x] = parent[y]\n        else:\n            parent[x] = parent[y]\n            parent[y] = parent[x]\n    answer = 0\n    for i in range(N):\n        if parent[i] == i:\n            answer += 1\n    return str(answer)\n\n-----Constraints-----\n1 <= N <= $10^5$\n1 <= Q <= $10^5$\n0 <= K <= $10^5$\n\n-----Time Limit: 1 sec\n-----Space Limit: 1 GB\n\n-----Test Cases-----\nSample Input:\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n10\n7\n8\n7\ndef"
    },
    {
        "number": 3353,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, R, L = map(int, stdin.split())\n    if P == 0 and R == 0:\n        return str(L)\n    if P == 0 and R == 1:\n        return str(L)\n    if P == 1 and R == 0:\n        return str(L)\n    if P == 1 and R == 1:\n        return str(L)\n    if P == 1 and R == 2:\n        return str(L)\n    if P == 2 and R == 0:\n        return str(L)\n    if P == 2 and R == 1:\n        return str(L)\n    if P == 2 and R == 2:\n        return str(L)\n    if P == 2 and R == 3:\n        return str(L)\n    if P == 3 and R == 0:\n        return str(L)\n    if P == 3 and R == 1:\n        return str(L)\n    if P == 3 and R == 2:\n        return str(L)\n    if P == 3 and R == 3:\n        return str(L)\n    if P == 4 and R == 0:\n        return str(L)\n    if P == 4 and R == 1:\n        return str(L)\n    if P == 4 and R == 2:\n        return str(L)\n    if P == 4 and R == 3:\n        return str(L)\n    if P == 4 and R == 4:\n        return str(L)\n    if P == 5 and R == 0:\n        return str(L)\n    if P == 5 and R == 1:\n        return str(L)\n    if P == 5 and R == 2:\n        return str(L)\n    if P == 5 and R == 3:\n        return str(L)\n    if P == 5 and R == 4:\n        return str(L)\n    if P == 6 and R == 0:\n        return str(L)\n    if P == 6 and R == 1:\n        return str(L)\n    if P == 6 and R == 2:\n        return str(L)\n    if P == 6 and R == 3:\n        return str(L)\n    if P == 6 and R == 4:\n        return str(L)\n    if P == 7 and R == 0:\n        return str(L)\n    if P == 7 and R == 1:\n        return str(L)\n    if P == 7 and R == 2:\n        return str(L)\n    if P == 7 and R == 3:\n        return str(L)\n    if P == 7 and R == 4:\n        return str(L)\n    if P == 8 and R == 0:\n        return str(L)\n    if P == 8 and R == 1:\n        return str(L)\n    if P == 8 and R == 2:\n        return str(L)\n    if P == 8 and R == 3:\n        return str(L)\n    if P == 8 and R == 4:\n        return str(L)\n    if P == 9 and R == 0:\n        return str(L)\n    if P == 9 and R == 1:\n        return str(L)\n    if P == 9 and R == 2:\n        return str(L)\n    if P == 9 and R == 3:\n        return str(L)\n    if P == 9 and R == 4:\n        return str(L)\n    if P == 10 and R == 0:\n        return str(L)\n    if P == 10 and R == 1:\n        return str(L)\n    if P == 10 and R == 2:\n        return str(L)\n    if P == 10 and R == 3:\n        return str(L)\n    if P == 10 and R == 4:\n        return str(L)\n    if P == 11 and R == 0:\n        return str(L)\n    if P == 11 and R == 1:\n        return str(L)\n    if P == 11 and R == 2:\n        return str(L)\n    if P == 11 and R == 3:\n        return str(L)\n    if P == 11 and R == 4:\n        return str(L)\n    if P == 12 and R == 0:\n        return str(L)\n    if P == 12 and R == 1:\n        return str(L)\n    if P == 12 and R == 2:\n        return str(L)\n    if P == 12 and R == 3:\n        return str(L)\n    if P == 12 and R == 4:\n        return str(L)\n    if P == 13 and R == 0:\n        return str(L)\n    if P == 13 and R == 1:\n        return str(L)\n    if P == 13 and R == 2:\n        return str(L)\n    if P == 13 and R == 3:\n        return str(L)\n    if P == 13 and R == 4:\n        return str(L)\n    if P == 14 and R == 0:\n        return str(L)\n    if P == 14 and R == 1:\n        return str(L)\n    if P == 14 and R == 2:\n        return str(L)\n    if P == 14 and R == 3:\n        return str(L)\n    if P == 14 and R == 4:\n        return str(L)\n    if P == 15 and R == 0:\n        return str(L)\n    if P == 15 and R == 1:\n        return str(L)\n    if P == 15 and R == 2:\n        return str(L)\n    if P == 15 and R == 3:\n        return str(L)\n    if P == 15 and R == 4:\n        return str(L)\n    if P == 16 and R == 0:\n        return str(L)\n    if P == 16 and R == 1:\n        return str(L)\n    if P == 16 and R == 2:\n        return str(L)\n    if P == 16 and R == 3:\n        return str(L)\n    if P == 16 and R == 4"
    },
    {
        "number": 3354,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, r, n = map(int, stdin.split())\n    if s > 10:\n        s = s // 10\n    if r > 10:\n        r = r // 10\n    if n > 7:\n        n = n // 7\n    if s + r + n > 100:\n        return str(n)\n    return str(n) + '%'\n\nSample Input:\n3 1 4 40\nSample Output:\n3\ndef"
    },
    {
        "number": 3355,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, d = map(int, stdin.split())\n    tasks = []\n    for _ in range(n):\n        tasks.append(list(map(int, stdin.split())))\n    tasks.sort(key=lambda x: (x[0], x[1]))\n    for i in range(n):\n        if tasks[i][1] == t:\n            print(i)\n            break\n    else:\n        print(0)\n    return ''\n\nSample Output:\n99\n3\ndef"
    },
    {
        "number": 3356,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = n\n    while m > 0:\n        m -= 1\n        n -= 1\n        if n == 0:\n            return '2'\n        if n == 1:\n            return '3'\n        if n == 2:\n            return '4'\n        if n == 3:\n            return '2'\n        if n == 4:\n            return '3'\n    return '4'\n\ndef"
    },
    {
        "number": 3357,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**5:\n        return \"Error\"\n    else:\n        return str(int(n/180*(n-1) + (n-1)/180*n))\n\nSample Input:\n4\n1 1\n2 2\n3 2\n4 1\nSample Output:\n9.0000\n12\n12.00000\n9.0\ndef"
    },
    {
        "number": 3358,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nSample Output:\n2\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\nSample Input:\n1\nSample Output:\n1\n"
    },
    {
        "number": 3359,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, c = map(int, stdin.split())\n    l = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] + l[i][j]\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = l[i][j] // 2\n    for i in"
    },
    {
        "number": 3360,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"NONE\"\n    if n == 1:\n        return \"a\"\n    if n == 2:\n        return \"b\"\n    if n == 3:\n        return \"a\"\n    if n == 4:\n        return \"b\"\n    if n == 5:\n        return \"a\"\n    if n == 6:\n        return \"b\"\n    if n == 7:\n        return \"a\"\n    if n == 8:\n        return \"b\"\n    if n == 9:\n        return \"a\"\n    if n == 10:\n        return \"a\"\n    if n == 11:\n        return \"b\"\n    if n == 12:\n        return \"a\"\n    if n == 13:\n        return \"b\"\n    if n == 14:\n        return \"a\"\n    if n == 15:\n        return \"b\"\n    if n == 16:\n        return \"a\"\n    if n == 17:\n        return \"b\"\n    if n == 18:\n        return \"a\"\n    if n == 19:\n        return \"b\"\n    if n == 20:\n        return \"a\"\n    if n == 21:\n        return \"b\"\n    if n == 22:\n        return \"a\"\n    if n == 23:\n        return \"b\"\n    if n == 24:\n        return \"a\"\n    if n == 25:\n        return \"b\"\n    if n == 26:\n        return \"a\"\n    if n == 27:\n        return \"b\"\n    if n == 28:\n        return \"a\"\n    if n == 29:\n        return \"b\"\n    if n == 30:\n        return \"a\"\n    if n == 31:\n        return \"b\"\n    if n == 32:\n        return \"a\"\n    if n == 33:\n        return \"b\"\n    if n == 34:\n        return \"a\"\n    if n == 35:\n        return \"b\"\n    if n == 36:\n        return \"a\"\n    if n == 37:\n        return \"b\"\n    if n == 38:\n        return \"a\"\n    if n == 39:\n        return \"b\"\n    if n == 40:\n        return \"a\"\n    if n == 41:\n        return \"b\"\n    if n == 42:\n        return \"a\"\n    if n == 43:\n        return \"b\"\n    if n == 44:\n        return \"a\"\n    if n == 45:\n        return \"b\"\n    if n == 46:\n        return \"a\"\n    if n == 47:\n        return \"b\"\n    if n == 48:\n        return \"a\"\n    if n == 49:\n        return \"b\"\n    if n == 50:\n        return \"a\"\n    if n == 51:\n        return \"b\"\n    if n == 52:\n        return \"a\"\n    if n == 53:\n        return \"b\"\n    if n == 54:\n        return \"a\"\n    if n == 55:\n        return \"b\"\n    if n == 56:\n        return \"a\"\n    if n == 57:\n        return \"b\"\n    if n == 58:\n        return \"a\"\n    if n == 59:\n        return \"b\"\n    if n == 60:\n        return \"a\"\n    if n == 61:\n        return \"b\"\n    if n == 62:\n        return \"a\"\n    if n == 63:\n        return \"b\"\n    if n == 64:\n        return \"a\"\n    if n == 65:\n        return \"b\"\n    if n == 66:\n        return \"a\"\n    if n == 67:\n        return \"b\"\n    if n"
    },
    {
        "number": 3361,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = [0] * n\n    for i in range(n):\n        d[i] = int(stdin.strip())\n    d.sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            d[j] += d[i]\n    return str(d[n-1])\n\nSample Output:\n4\nExplanation:\nThe minimum possible sum of disparities is 4.\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(n)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n1 <= n <= 10^5\n\n1 <= d[i] <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n-----Constraints for the partitioning-----\n"
    },
    {
        "number": 3362,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, F, L, W = map(int, stdin.split())\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        return \"NO WAY\"\n    if L > W:\n        return \"NO WAY\"\n    if W > A:\n        return \"NO WAY\"\n    if A > F:\n        return \"NO WAY\"\n    if F > L:\n        "
    },
    {
        "number": 3363,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    courses = [int(i) for i in stdin.split()]\n    courses.sort()\n    answer = 0\n    for i in range(n):\n        answer += courses[i] * (m - courses[i])\n    return str(answer)\n\nSample Output:\n2243\nExplanation:\nThe maximum number of calories Stan can consume is $2243$ (the maximum amount of calories he can eat in the first hour).\n\nInput:\n5 900\n800 700 400 300 200\nOutput:\n2243\nExplanation:\nThe maximum number of calories Stan can consume is $2243$ (the maximum amount of calories he can eat in the first hour).\n\"\"\"\n\ndef"
    },
    {
        "number": 3364,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    base = [int(i) for i in stdin.split()]\n    base.sort()\n    for i in range(q):\n        a, b = map(int, stdin.split())\n        if a == b:\n            return 'yes'\n        if a > b:\n            a, b = b, a\n        if a == 0:\n            return 'no'\n        if a == n:\n            return 'yes'\n        if a == 1:\n            base[a] = b\n        else:\n            base[a] = b\n    return 'no'\n\nSample Output:\nno\nyes\ndef"
    },
    {
        "number": 3365,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return '0'\n    if n == k:\n        return str(1)\n    if n % k == 0:\n        return str(1) + solution(n//k)\n    else:\n        return str(1) + solution(n//k) + str(1)\n\nSample Output:\n2\nExplanation:\nThe sequence is partitioned into two regions. The first region has a prime number, and the second region has a prime number.\n\n-----Constraints-----\n1 <= n <= 1000000\n1 <= k <= n\n1 <= v <= 1000000\n\n-----Time complexity-----\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\n-----Space complexity-----\nO(n^2)\n\n\"\"\"\n\nclass Solution:\n    def findMaximum(self, nums: List[int]) -> int:\n        \n        def isPrime(n):\n            if n == 1:\n                return False\n            for i in range(2, int(n**0.5)+1):\n                if n % i == 0:\n                    return False\n            return True\n        \n        def partition(nums, start, end):\n            if start >= end:\n                return\n            \n            pivot = nums[start]\n            i = start\n            j = end\n            while i < j:\n                while i < j and nums[j] >= pivot:\n                    j -= 1\n                while i < j and nums[i] <= pivot:\n                    i += 1\n                if i < j:\n                    nums[i], nums[j] = nums[j], nums[i]\n            nums[i], nums[j] = nums[j], nums[i]\n            \n            if i < j:\n                partition(nums, i, j)\n                \n        partition(nums, 0, len(nums)-1)\n        \n        return max(nums)\n"
    },
    {
        "number": 3366,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def f(x):\n        if x % 2 == 0:\n            return f(x // 2) + f(x // 2 + 1)\n        else:\n            return f(x - 1) + f(x - 1 + 1)\n    \n    return str(f(int(stdin)))\n\nSample Input:\n1\nSample Output:\n1\nExplanation:\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 = 1\n1 ="
    },
    {
        "number": 3367,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    answer = 0\n    for i in range(n):\n        answer += (t - 1) * (i + 1)\n    return str(answer)\n\nSample Input:\n4 4\nWhat is 6 times 9? 42\nWhat is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nSample Output:\n2.0000000000\ndef"
    },
    {
        "number": 3368,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    animal_list = []\n    for _ in range(n):\n        animal_list.append(list(map(str, input().split())))\n    \n    # print(animal_list)\n    # print(animal_list[0])\n    # print(animal_list[1])\n    # print(animal_list[2])\n    # print(animal_list[3])\n    # print(animal_list[4])\n    # print(animal_list[5])\n    # print(animal_list[6])\n    # print(animal_list[7])\n    # print(animal_list[8])\n    # print(animal_list[9])\n    # print(animal_list[10])\n    # print(animal_list[11])\n    # print(animal_list[12])\n    # print(animal_list[13])\n    # print(animal_list[14])\n    # print(animal_list[15])\n    # print(animal_list[16])\n    # print(animal_list[17])\n    # print(animal_list[18])\n    # print(animal_list[19])\n    # print(animal_list[20])\n    # print(animal_list[21])\n    # print(animal_list[22])\n    # print(animal_list[23])\n    # print(animal_list[24])\n    # print(animal_list[25])\n    # print(animal_list[26])\n    # print(animal_list[27])\n    # print(animal_list[28])\n    # print(animal_list[29])\n    # print(animal_list[30])\n    # print(animal_list[31])\n    # print(animal_list[32])\n    # print(animal_list[33])\n    # print(animal_list[34])\n    # print(animal_list[35])\n    # print(animal_list[36])\n    # print(animal_list[37])\n    # print(animal_list[38])\n    # print(animal_list[39])\n    # print(animal_list[40])\n    # print(animal_list[41])\n    # print(animal_list[42])\n    # print(animal_list[43])\n    # print(animal_list[44])\n    # print(animal_list[45])\n    # print(animal_list[46])\n    # print(animal_list[47])\n    # print(animal_list[48])\n    # print(animal_list[49])\n    # print(animal_list[50])\n    # print(animal_list[51])\n    # print(animal_list[52])\n    # print(animal_list[53])\n    # print(animal_list[54])\n    # print(animal_list[55])\n    # print(animal_list[56])\n    # print(animal_list[57])\n    # print(animal_list[58])\n    # print(animal_list[59])\n    # print(animal_list[60])\n    # print(animal_list[61])\n    # print(animal_list[62])\n    # print(animal_list[63])\n    # print(animal_list[64])\n    # print(animal_list[65])\n    # print(animal_list[66])\n    # print(animal_list[67])\n    # print(animal_list[68])\n    # print(animal_list[69])\n    # print(animal_list[70])\n    # print(animal_list[71])\n    # print(animal_list[72])\n    # print(animal_list[73])\n    # print(animal_list[74])\n    # print(animal_list[75])\n    # print(animal_list[76])\n    # print(animal_list[77])\n    # print(animal_list[78])\n    # print(animal_list[79])\n    # print(animal_list[80])\n    # print(animal_list[81])\n    # print(animal_list[82])\n    # print(animal_list[83])\n    # print(animal_list[84])\n    # print(animal_list[85])\n    # print(animal_list[86])\n    # print(animal_list[87])\n    # print(animal_list[88])\n    # print(animal_list[89])\n    # print(animal_list[90])\n    # print(animal_list[91])\n    # print(animal_list[92])\n    # print(animal_list[93])\n    # print(animal_list[94])\n    # print(animal_list[95])\n    # print(animal_list[96])\n    # print(animal_list[97])\n    # print(animal_list[98])\n    # print(animal_list[99])\n    # print(animal_list[100])\n    # print(animal_list[101])\n    # print(animal_list[102])\n    # print(animal_list[103])\n    # print(animal_list[104])\n    # print(animal_list[105])\n    # print(animal_list[106])\n    # print(animal_list[107])\n    # print(animal_list[108])\n    # print(animal_list[109])\n    # print(animal_list[110])\n    # print(animal_list[111])\n    # print(animal_list[112])\n    # print(animal_list[113])\n    # print(animal_list[114])\n    # print(animal_list[115])\n    # print(animal_list[116])\n    # print(animal_list[117])\n    # print(animal_list[118])\n    # print(animal_list[119])\n    # print(animal_list[120])\n    # print(animal_list[121])\n    # print(animal_list[122])\n    # print(animal_list[123])\n    # print(animal_list[124])\n    # print(animal_list[125])\n    # print(animal_list[126])\n    # print(animal_list[127])\n    # print(animal_list[128])\n    # print(animal_list"
    },
    {
        "number": 3369,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin.strip())\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m = p\n    a = []\n    b = []\n    c = []\n    n = p\n    m ="
    },
    {
        "number": 3370,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = [0] * n\n    for i in range(n):\n        h[i] = int(stdin[i])\n    for i in range(n):\n        for j in range(i+1, n):\n            h[j] = max(h[j], h[i] + abs(h[j]-h[i]))\n    return str(h[n-1])\n"
    },
    {
        "number": 3371,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    if n % c!= 0:\n        return 'Impossible'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return"
    },
    {
        "number": 3372,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    airports = [int(i) for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in range(n)]\n    airports.sort()\n    airports = [i for i in"
    },
    {
        "number": 3373,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    answer = 0\n    for i in range(n):\n        if s[i] == '(':\n            answer += 1\n        else:\n            answer -= 1\n        if answer < 0:\n            return '0'\n    return str(answer)\n\nSample Input:\n3\n)()()()\nSample Output:\n0\n\nExplanation:\nThe empty string is not a balanced string of parentheses.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.strip())\n        s = list(stdin.strip())\n        answer = 0\n        for i in range(n):\n            if s[i] == '(':\n                answer += 1\n            else:\n                answer -= 1\n            if answer < 0:\n                return '0'\n        return str(answer)\n"
    },
    {
        "number": 3374,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for i in range(n)]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = [a[i] - b[i] for"
    },
    {
        "number": 3375,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, E = map(int, stdin.split())\n    graph = [[] for _ in range(V)]\n    for _ in range(E):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(v, visited):\n        visited[v] = True\n        for i in graph[v]:\n            if not visited[i]:\n                dfs(i, visited)\n    \n    visited = [False] * V\n    for i in range(V):\n        if not visited[i]:\n            dfs(i, visited)\n    \n    return str(len(set(visited)))\n\n-----Constraints-----\n1 <= V, E <= 10^5\n0 <= A_i < B_i < V\n\n-----Time complexity-----\nO(V + E)\n\nO(V + E)\n\nO(V)\n\n-----Space complexity-----\nO(V)\n\n-----Algorithm-----\n\n\"\"\"\n\nclass Solution:\n    def countSpanningSubgraph(self, V: int, E: int, graph: List[List[int]]) -> int:\n        \n        def dfs(v, visited):\n            visited[v] = True\n            for i in graph[v]:\n                if not visited[i]:\n                    dfs(i, visited)\n        \n        visited = [False] * V\n        for i in range(V):\n            if not visited[i]:\n                dfs(i, visited)\n        \n        return len(set(visited)) % (10**9 + 7)\n"
    },
    {
        "number": 3376,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    family = []\n    for _ in range(n):\n        family.append(list(map(int, input().split())))\n    \n    def get_max_candy(family):\n        candy = 0\n        for i in range(len(family)):\n            for j in range(i+1, len(family)):\n                if family[i][0] < family[j][0]:\n                    candy += family[i][1]\n        return candy\n    \n    def get_max_candy_2(family):\n        candy = 0\n        for i in range(len(family)):\n            for j in range(i+1, len(family)):\n                if family[i][0] < family[j][0]:\n                    candy += family[i][1]\n        return candy\n    \n    def get_max_candy_3(family):\n        candy = 0\n        for i in range(len(family)):\n            for j in range(i+1, len(family)):\n                if family[i][0] < family[j][0]:\n                    candy += family[i][1]\n        return candy\n    \n    def get_max_candy_4(family):\n        candy = 0\n        for i in range(len(family)):\n            for j in range(i+1, len(family)):\n                if family[i][0] < family[j][0]:\n                    candy += family[i][1]\n        return candy\n    \n    def get_max_candy_5(family):\n        candy = 0\n        for i in range(len(family)):\n            for j in range(i+1, len(family)):\n                if family[i][0] < family[j][0]:\n                    candy += family[i][1]\n        return candy\n    \n    def get_max_candy_6(family):\n        candy = 0\n        for i in range(len(family)):\n            for j in range(i+1, len(family)):\n                if family[i][0] < family[j][0]:\n                    candy += family[i][1]\n        return candy\n    \n    def get_max_candy_7(family):\n        candy = 0\n        for i in range(len(family)):\n            for j in range(i+1, len(family)):\n                if family[i][0] < family[j][0]:\n                    candy += family[i][1]\n        return candy\n    \n    def get_max_candy_8(family):\n        candy = 0\n        for i in range(len(family)):\n            for j in range(i+1, len(family)):\n                if family[i][0] < family[j][0]:\n                    candy += family[i][1]\n        return candy\n    \n    def get_max_candy_9(family):\n        candy = 0\n        for i in range(len(family)):\n            for j in range(i+1, len(family)):\n                if family[i][0] < family[j][0]:\n                    candy += family[i][1]\n        return candy\n    \n    def get_max_candy_10(family):\n        candy = 0\n        for i in range(len(family)):\n            for j in range(i+1, len(family)):\n                if family[i][0] < family[j][0]:\n                    candy += family[i][1]\n        return candy\n    \n    def get_max_candy_11(family):\n        c"
    },
    {
        "number": 3377,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    \n    for i in range(t):\n        if p[i] == 0:\n            p[i] = -1\n        else:\n            p[i] = p[i] - 1\n    \n    if p[t-1] == -1:\n        return '-1'\n    else:\n        return str(p[t-1])\n"
    },
    {
        "number": 3378,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    airfares = [list(map(int, input().split())) for _ in range(n)]\n    airfares.sort(key=lambda x: x[0])\n    airfares.sort(key=lambda x: x[1])\n    airfares.sort(key=lambda x: x[2])\n    airfares.sort(key=lambda x: x[3])\n    airfares.sort(key=lambda x: x[4])\n    airfares.sort(key=lambda x: x[5])\n    airfares.sort(key=lambda x: x[6])\n    airfares.sort(key=lambda x: x[7])\n    airfares.sort(key=lambda x: x[8])\n    airfares.sort(key=lambda x: x[9])\n    airfares.sort(key=lambda x: x[10])\n    airfares.sort(key=lambda x: x[11])\n    airfares.sort(key=lambda x: x[12])\n    airfares.sort(key=lambda x: x[13])\n    airfares.sort(key=lambda x: x[14])\n    airfares.sort(key=lambda x: x[15])\n    airfares.sort(key=lambda x: x[16])\n    airfares.sort(key=lambda x: x[17])\n    airfares.sort(key=lambda x: x[18])\n    airfares.sort(key=lambda x: x[19])\n    airfares.sort(key=lambda x: x[20])\n    airfares.sort(key=lambda x: x[21])\n    airfares.sort(key=lambda x: x[22])\n    airfares.sort(key=lambda x: x[23])\n    airfares.sort(key=lambda x: x[24])\n    airfares.sort(key=lambda x: x[25])\n    airfares.sort(key=lambda x: x[26])\n    airfares.sort(key=lambda x: x[27])\n    airfares.sort(key=lambda x: x[28])\n    airfares.sort(key=lambda x: x[29])\n    airfares.sort(key=lambda x: x[30])\n    airfares.sort(key=lambda x: x[31])\n    airfares.sort(key=lambda x: x[32])\n    airfares.sort(key=lambda x: x[33])\n    airfares.sort(key=lambda x: x[34])\n    airfares.sort(key=lambda x: x[35])\n    airfares.sort(key=lambda x: x[36])\n    airfares.sort(key=lambda x: x[37])\n    airfares.sort(key=lambda x: x[38])\n    airfares.sort(key=lambda x: x[39])\n    airfares.sort(key=lambda x: x[40])\n    airfares.sort(key=lambda x: x[41])\n    airfares.sort(key=lambda x: x[42])\n    airfares.sort(key=lambda x: x[43])\n    airfares.sort(key=lambda x: x[44])\n    airfares.sort(key=lambda x: x[45])\n    airfares.sort(key=lambda x: x[46])\n    airfares.sort(key=lambda x: x[47])\n    airfares.sort(key=lambda x: x[48])\n    airfares.sort(key=lambda x: x[49])\n    airfares.sort(key=lambda x: x[50])\n    airfares.sort(key=lambda x: x[51])\n    airfares.sort(key=lambda x: x[52])\n    airfares.sort(key=lambda x: x[53])\n    airfares.sort(key=lambda x: x[54])\n    airfares.sort(key=lambda x: x[55])\n    airfares.sort(key=lambda x: x[56])\n    airfares.sort(key=lambda x: x[57])\n    airfares.sort(key=lambda x: x[58])\n    airfares.sort(key=lambda x: x[59])\n    airfares.sort(key=lambda x: x[60])\n    airfares.sort(key=lambda x: x[61])\n    airfares.sort(key=lambda x: x[62])\n    airfares.sort(key=lambda x: x[63])\n    airfares.sort(key=lambda x: x[64])\n    airfares.sort(key=lambda x: x[65])\n    airfares.sort(key=lambda x: x[66])\n    airfares.sort(key=lambda x: x"
    },
    {
        "number": 3379,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(node):\n        visited[node] = True\n        for next_node in graph[node]:\n            if not visited[next_node]:\n                dfs(next_node)\n    \n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i)\n    \n    return str(len(set(visited)))\n\nSample Output:\n4\nExplanation:\nThe graph is:\n0 1\n1 2\n2 3\n3 4\n4 5\nExplanation:\nThe largest possible size of the graph is 4.\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= x, y < n\n\n-----Time Complexity-----\nO(n*m)\n\n-----Space Complexity-----\nO(n)\n\n-----Elements of the input are not unique.\n\"\"\"\n\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums = sorted(nums)\n        \n        def dfs(nums, i):\n            if i == len(nums):\n                return ''.join(str(x) for x in nums)\n            \n            if nums[i] == 0:\n                return '0'\n            \n            if nums[i] == 1:\n                return str(i)\n            \n            if nums[i] == 2:\n                return str(i) + '1'\n            \n            if nums[i] == 3:\n                return str(i) + '2'\n            \n            if nums[i] == 4:\n                return str(i) + '3'\n            \n            if nums[i] == 5:\n                return str(i) + '4'\n            \n            if nums[i] == 6:\n                return str(i) + '5'\n            \n            if nums[i] == 7:\n                return str(i) + '6'\n            \n            if nums[i] == 8:\n                return str(i) + '7'\n            \n            if nums[i] == 9:\n                return str(i) + '8'\n            \n            if nums[i] == 10:\n                return str(i) + '9'\n            \n            if nums[i] == 11:\n                return str(i) + '10'\n            \n            if nums[i] == 12:\n                return str(i) + '11'\n            \n            if nums[i] == 13:\n                return str(i) + '12'\n            \n            if nums[i] == 14:\n                return str(i) + '13'\n            \n            if nums[i] == 15:\n                return str(i) + '14'\n            \n            if nums[i] == 16:\n                return str(i) + '15'\n            \n            if nums[i] == 17:\n                return str(i) + '16'\n            \n            if nums[i] == 18:\n                return str(i) + '17'\n            \n            if nums[i] == 19:\n                return str(i) + '18'\n            \n            if nums[i] == 20:\n                return str(i) + '19'\n            \n            if nums[i] == 21:\n                return str(i) + '20'\n            \n            if nums[i] == 22:\n                return str(i) + '21'\n            \n            if nums[i] == 23:\n                return str(i) + '22'\n            \n            if nums[i] == 24:\n                return str(i) + '23'\n            \n            if nums[i] == 25:\n                return str(i) + '24'\n            \n            if nums[i] == 26:\n                return str(i) + '25'\n            \n            if nums[i] == 27:\n                return str(i) + '26'\n            \n            if nums[i] == 28:\n                return str(i) + '27'\n            \n            if nums[i] == 29:\n                return str(i) + '28'\n            \n            if nums[i] == 30:\n                return str(i) + '29'\n            \n            if nums[i] == 31:\n                return str(i) + '30'\n            \n            if nums[i] == 32:\n                return str(i) + '31'\n            \n            if nums[i] == 33:\n                return str(i) + '32'\n            \n            if nums[i] == 34:\n                return str(i) + '33'\n            \n            if nums[i] == 35:\n                return str(i) + '34'\n            \n            if nums[i] == 36:\n                return str(i) + '35'\n            \n            if nums[i] == 37:\n                return str(i) + '36'\n            \n            if nums[i] == 38:\n                return str(i) + '37'\n            \n            if nums[i] == 39:\n                return str(i) + '38'\n            \n            if nums[i] == 40:\n                return str(i) +"
    },
    {
        "number": 3380,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 2 == 0:\n        return str(1 - (N/2))\n    else:\n        return str(1 - (N/2) + 1)\n\nSample Input:\n4\nSample Output:\n0.9\ndef"
    },
    {
        "number": 3381,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"0\"\n    if n % 3 == 0:\n        return \"0\" + solution(n // 3)\n    if n % 3 == 1:\n        return \"0\" + solution(n // 3) + \"1\"\n    if n % 3 == 2:\n        return \"0\" + solution(n // 3) + \"2\" + solution(n // 3)\n    return \"0\" + solution(n // 3) + \"1\" + solution(n // 3) + \"2\" + solution(n // 3)\n\nSample Output:\n0 0\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000\n0 40000000"
    },
    {
        "number": 3382,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106"
    },
    {
        "number": 3383,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    t_i = [int(i) for i in stdin.split()]\n    t_i.sort()\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i <= 200]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i <= 200]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >= 0]\n    t_i = [i for i in t_i if i >="
    },
    {
        "number": 3384,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    else:\n        return str(n % 10) + solution(str(n // 10))\n"
    },
    {
        "number": 3385,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '1'\n    if n == 4:\n        return '1'\n    if n == 5:\n        return '1'\n    if n == 6:\n        return '1'\n    if n == 7:\n        return '1'\n    if n == 8:\n        return '1'\n    if n == 9:\n        return '1'\n    if n == 10:\n        return '1'\n    if n == 11:\n        return '1'\n    if n == 12:\n        return '1'\n    if n == 13:\n        return '1'\n    if n == 14:\n        return '1'\n    if n == 15:\n        return '1'\n    if n == 16:\n        return '1'\n    if n == 17:\n        return '1'\n    if n == 18:\n        return '1'\n    if n == 19:\n        return '1'\n    if n == 20:\n        return '1'\n    if n == 21:\n        return '1'\n    if n == 22:\n        return '1'\n    if n == 23:\n        return '1'\n    if n == 24:\n        return '1'\n    if n == 25:\n        return '1'\n    if n == 26:\n        return '1'\n    if n == 27:\n        return '1'\n    if n == 28:\n        return '1'\n    if n == 29:\n        return '1'\n    if n == 30:\n        return '1'\n    if n == 31:\n        return '1'\n    if n == 32:\n        return '1'\n    if n == 33:\n        return '1'\n    if n == 34:\n        return '1'\n    if n == 35:\n        return '1'\n    if n == 36:\n        return '1'\n    if n == 37:\n        return '1'\n    if n == 38:\n        return '1'\n    if n == 39:\n        return '1'\n    if n == 40:\n        return '1'\n    if n == 41:\n        return '1'\n    if n == 42:\n        return '1'\n    if n == 43:\n        return '1'\n    if n == 44:\n        return '1'\n    if n == 45:\n        return '1'\n    if n == 46:\n        return '1'\n    if n == 47:\n        return '1'\n    if n == 48:\n        return '1'\n    if n == 49:\n        return '1'\n    if n == 50:\n        return '1'\n    if n == 51:\n        return '1'\n    if n == 52:\n        return '1'\n    if n == 53:\n        return '1'\n    if n == 54:\n        return '1'\n    if n == 55:\n        return '1'\n    if n == 56:\n        return '1'\n    if n == 57:\n        return '1'\n    if n == 58:\n        return '1'\n    if n == 59:\n        return '1'\n    if n == 60:\n        return '1'\n    if n == 61:\n        return '1'\n    if n == 62:\n        return '1'\n    if n == 63:\n        return '1'\n    if n == 64:\n        return '1'\n    if n == 65:\n        return '1'\n    if n == 66:\n        return '1'\n    if n == 67:\n        return '1'\n    if n == 68:\n        return '1'\n    if n == 69:\n        return '1'\n    if n == 70:\n        return '1'\n    if n == 71:\n        return '1'\n    if n == 72:\n        return '1'\n    if n == 73:\n        return '1'\n    if n == 74:\n        return '1'\n    if n == 75:\n        return '1'\n    if n == 76:\n        return '1'\n    if n == 77:\n        return '1'\n    if n == 78:\n        return '1'\n    if n == 79:\n        return '1'\n    if n == 80:\n        return '1'\n    if n == 81:\n        return '1'\n    if n == 82:\n        return '1'\n    if n == 83:\n        return '1'\n    if n == 84:\n        return '1'\n    if n == 85:\n        return '1'\n    if n == 86:\n        return '1'\n    if n == 87:\n        return '1'\n    if n == 88:\n        return '1'\n    if n == 89:\n        return '1'\n    if n == 90:\n        return '1'\n    if n == 91:\n        return '1'\n    if n == 92:\n        return '1'\n    if n == 93:\n        return '1'\n    if n == 94:\n        return '1'\n    if n == 95:\n        return '1'\n    if n == 96:\n        return '1'\n    if n == 97:\n        return '1'\n    if n == 98:\n        return '1'\n    if n == 99:\n        return '1'\n    if n == 100:\n        return '1'\n    if n == 101:\n        return '1'\n    if n == 102:\n        return '1'\n"
    },
    {
        "number": 3386,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [0] + a\n    d = [0] * (N + 1)\n    for i in range(1, N + 1):\n        d[i] = d[i - 1] + abs(a[i] - a[i - 1])\n    for i in range(M):\n        d[a[i]] = 3\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 3\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs(a[i] - a[i + 1])\n    for i in range(N):\n        d[a[i]] = 2\n    for i in range(N - 1, -1, -1):\n        d[a[i]] = d[a[i + 1]] + abs"
    },
    {
        "number": 3387,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    d = (a + b) / 2\n    if d > t:\n        return 'No'\n    if d < t:\n        return 'No'\n    if abs(d - t) < 10 ** -6:\n        return 'Yes'\n    return 'Yes'\n\ndef"
    },
    {
        "number": 3388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = [int(i) for i in stdin.split()]\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p[-1] + p[-2])\n    p.sort()\n    p.append(p["
    },
    {
        "number": 3389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    watch_later = []\n    for i in range(n):\n        watch_later.append(stdin[i].lower())\n    watch_later.sort()\n    answer = 0\n    for i in range(n):\n        if watch_later[i] == 'b':\n            answer += 1\n        elif watch_later[i] == 'a':\n            answer += 2\n        elif watch_later[i] == 'c':\n            answer += 3\n        elif watch_later[i] == 'd':\n            answer += 4\n        elif watch_later[i] == 'e':\n            answer += 5\n        elif watch_later[i] == 'f':\n            answer += 6\n        elif watch_later[i] == 'g':\n            answer += 7\n        elif watch_later[i] == 'h':\n            answer += 8\n        elif watch_later[i] == 'i':\n            answer += 9\n        elif watch_later[i] == 'j':\n            answer += 10\n        elif watch_later[i] == 'k':\n            answer += 11\n        elif watch_later[i] == 'l':\n            answer += 12\n        elif watch_later[i] =='m':\n            answer += 13\n        elif watch_later[i] == 'n':\n            answer += 14\n        elif watch_later[i] == 'o':\n            answer += 15\n        elif watch_later[i] == 'p':\n            answer += 16\n        elif watch_later[i] == 'q':\n            answer += 17\n        elif watch_later[i] == 'r':\n            answer += 18\n        elif watch_later[i] =='s':\n            answer += 19\n        elif watch_later[i] == 't':\n            answer += 20\n        elif watch_later[i] == 'u':\n            answer += 21\n        elif watch_later[i] == 'v':\n            answer += 22\n        elif watch_later[i] == 'w':\n            answer += 23\n        elif watch_later[i] == 'x':\n            answer += 24\n        elif watch_later[i] == 'y':\n            answer += 25\n        elif watch_later[i] == 'z':\n            answer += 26\n    return str(answer)"
    },
    {
        "number": 3390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    dishes = list(map(int,stdin.split()))\n    courses = []\n    for i in range(m):\n        courses.append(dishes[i])\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses[1:]\n    courses.sort()\n    courses = [courses[0]] + courses["
    },
    {
        "number": 3391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    \n    if n == q:\n        return str(a) + str(b)\n    \n    if n > q:\n        return str(a) + str(b)\n    \n    if n < q:\n        return str(a) + str(b)\n    \n    if n == 1:\n        return str(a) + str(b)\n    \n    if n == 2:\n        return str(a) + str(b)\n    \n    if n == 3:\n        return str(a) + str(b)\n    \n    if n == 4:\n        return str(a) + str(b)\n    \n    if n == 5:\n        return str(a) + str(b)\n    \n    if n == 6:\n        return str(a) + str(b)\n    \n    if n == 7:\n        return str(a) + str(b)\n    \n    if n == 8:\n        return str(a) + str(b)\n    \n    if n == 9:\n        return str(a) + str(b)\n    \n    if n == 10:\n        return str(a) + str(b)\n    \n    if n == 11:\n        return str(a) + str(b)\n    \n    if n == 12:\n        return str(a) + str(b)\n    \n    if n == 13:\n        return str(a) + str(b)\n    \n    if n == 14:\n        return str(a) + str(b)\n    \n    if n == 15:\n        return str(a) + str(b)\n    \n    if n == 16:\n        return str(a) + str(b)\n    \n    if n == 17:\n        return str(a) + str(b)\n    \n    if n == 18:\n        return str(a) + str(b)\n    \n    if n == 19:\n        return str(a) + str(b)\n    \n    if n == 20:\n        return str(a) + str(b)\n    \n    if n == 21:\n        return str(a) + str(b)\n    \n    if n == 22:\n        return str(a) + str(b)\n    \n    if n == 23:\n        return str(a) + str(b)\n    \n    if n == 24:\n        return str(a) + str(b)\n    \n    if n == 25:\n        return str(a) + str(b)\n    \n    if n == 26:\n        return str(a) + str(b)\n    \n    if n == 27:\n        return str(a) + str(b)\n    \n    if n == 28:\n        return str(a) + str(b)\n    \n    if n == 29:\n        return str(a) + str(b)\n    \n    if n == 30:\n        return str(a) + str(b)\n    \n    if n == 31:\n        return str(a) + str(b)\n    \n    if n == 32:\n        return str(a) + str(b)\n    \n    if n == 33:\n        return str(a) + str(b)\n    \n    if n == 34:\n        return str(a) + str(b)\n    \n    if n == 35:\n        return str(a) + str(b)\n    \n    if n == 36:\n        return str(a) + str(b)\n    \n    if n == 37:\n        return str(a) + str(b)\n    \n    if n == 38:\n        return str(a) + str(b)\n    \n    if n == 39:\n        return str(a) + str(b)\n    \n    if n == 40:\n        return str(a) + str(b)\n    \n    if n == 41:\n        return str(a) + str(b)\n    \n    if n == 42:\n        return str(a) + str(b)\n    \n    if n == 43:\n        return str(a) + str(b)\n    \n    if n == 44:\n        return str(a) + str(b)\n    \n    if n == 45:\n        return str(a) + str(b)\n    \n    if n == 46:\n        return str(a) + str(b)\n    \n    if n == 47:\n        return str(a) + str(b)\n    \n    if n == 48:\n        return str(a) + str(b)\n    \n    if n == 49:\n        return str(a) + str(b)\n    \n    if n == 50:\n        return str(a) + str(b)\n    \n    if n == 51:\n        return str(a) + str(b)\n    \n    if n == 52:\n        return str(a) + str(b)\n    \n    if n == 53:\n        return str(a) + str(b)\n    \n    if n == 54:\n        return str(a) + str(b)\n    \n    if n == 55:\n        return str(a) + str(b)\n    \n    if n == 56:\n        return str(a) + str(b)\n    \n    if n == 57:\n        return str(a) + str(b)\n    \n    if n == 58:\n        return str(a) + str(b)\n    \n    if n == 59:\n        return str(a) + str(b)\n    \n    if n == 60:\n        return str(a) + str(b)\n    \n    if n == 61:\n        return str(a) + str(b)\n    \n    if n == 62:\n        return str(a) + str(b)\n    \n    if n == 63:\n        return str(a) + str(b)\n    \n    if n == 64:\n        return str(a) + str(b)\n    \n    if n == 65:\n        return str(a) + str(b)\n    \n    if n == 66:\n        return str(a) + str(b)\n    \n    if n == 67:\n        return str(a) + str(b)\n    \n    if n == 68"
    },
    {
        "number": 3392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    h = [0] * n\n    v = [0] * n\n    for i in range(n):\n        h[i] = int(stdin.strip())\n    for i in range(n):\n        v[i] = int(stdin.strip())\n    for i in range(n):\n        for j in range(i+1, n):\n            if h[i] + h[j] == v[i] + v[j]:\n                h[i] = h[j]\n                v[i] = v[j]\n    return str(h[0]) +'' + str(v[0])\n\nSample Output:\n7\nExplanation:\nThe first tree is connected to the second tree.\nThe second tree is connected to the third tree.\nThe third tree is connected to the fourth tree.\nThe fourth tree is connected to the fifth tree.\nThe fifth tree is connected to the sixth tree.\nThe sixth tree is connected to the seventh tree.\nThe seventh tree is connected to the eighth tree.\nThe eighth tree is connected to the ninth tree.\nThe ninth tree is connected to the tenth tree.\nThe tenth tree is connected to the eleventh tree.\nThe eleventh tree is connected to the twelfth tree.\nThe twelfth tree is connected to the thirteenth tree.\nThe thirteenth tree is connected to the fourteenth tree.\nThe fourteenth tree is connected to the threeteenth tree.\nThe threeteenth tree is connected to the twoteenth tree.\nThe twoteenth tree is connected to the oneteenth tree.\nThe oneteenth tree is connected to the tenteenth tree.\nThe tenteenth tree is connected to the eleventeenth tree.\nThe eleventeenth tree is connected to the twelveteenth tree.\nThe twelveteenth tree is connected to the thirteenteenth tree.\nThe thirteenteenth tree is connected to the fourteenteenth tree.\nThe fourteenteenth tree is connected to the fifteenteenth tree.\nThe fifteenteenth tree is connected to the sixteenteenth tree.\nThe sixteenteenth tree is connected to the seventeenteenth tree.\nThe seventeenteenth tree is connected to the eighteenteenth tree.\nThe eighteenteenth tree is connected to the nineteenteenth tree.\nThe nineteenteenth tree is connected to the twentyteen tree.\nThe twentyteen tree is connected to the twentyeight tree.\nThe twentyeight tree is connected to the twentyfifteen tree.\nThe twentyfifteen tree is connected to the twentysixteen tree.\nThe twentysixteen tree is connected to the twentyseventy tree.\nThe twentyseventy tree is connected to the twentyeightteen tree.\nThe twentyeightteen tree is connected to the twentynineteen tree.\nThe twentynineteen tree is connected to the twentytwenty tree.\nThe twentytwenty tree is connected to the twentytwentytwenty tree.\nThe twentytwentytwenty tree is connected to the twentytwentytwentytwenty tree.\nThe twentytwentytwentytwenty tree is connected to the twentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe twentytwentytwentytwentytwentytree is connected to the twentytwentytwentytwentytwentytwentytree.\nThe"
    },
    {
        "number": 3393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    courses = []\n    for i in range(n):\n        courses.append(stdin[i].split())\n    \n    def get_diff(course):\n        diff = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                diff += 1\n            elif course[i] == '2':\n                diff -= 1\n        return diff\n    \n    def get_level(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_2(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_3(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_4(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_5(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_6(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_7(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_8(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_9(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_10(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_11(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_12(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_13(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_14(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_15(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_16(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_17(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_18(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_19(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_20(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_21(course):\n        level = 0\n        for i in range(len(course)):\n            if course[i] == '1':\n                level += 1\n            elif course[i] == '2':\n                level -= 1\n        return level\n    \n    def get_level_22(course):"
    },
    {
        "number": 3394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    u, v, d = map(int, stdin.split())\n    k = int(stdin.split()[1])\n    s = list(map(int, stdin.split()[2:]))\n    s.sort()\n    t = list(map(int, stdin.split()[3:]))\n    t.sort()\n    \n    def dfs(u, v, d, s, t):\n        if u == v:\n            return 0\n        \n        if d == 0:\n            return 0\n        \n        if s[u] < s[v]:\n            return dfs(u, v, d-1, s, t)\n        \n        return dfs(u, v, d, s, t) + 1\n    \n    return str(dfs(u, v, d, s, t))\n"
    },
    {
        "number": 3395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    board = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    def get_set(i, j):\n        return board[i][j]\n    \n    def get_set_id(i, j):\n        return i * m + j\n    \n    def get_set_id_id(i, j):\n        return i * k + j\n    \n    def get_set_id_id_id(i, j):\n        return i * k * m + j\n    \n    def get_set_id_id_id_id(i, j):\n        return i * k * m * m + j\n    \n    def get_set_id_id_id_id_id(i, j):\n        return i * k * m * m * m + j\n    \n    def get_set_id_id_id_id_id_id(i, j):\n        return i * k * m * m * m * m + j\n    \n    def get_set_id_id_id_id_id_id_id(i, j):\n        return i * k * m * m * m * m * m + j\n    \n    def get_set_id_id_id_id_id_id_id_id(i, j):\n        return i * k * m * m * m * m * m * m + j\n    \n    def get_set_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id_id"
    },
    {
        "number": 3396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    y = [int(i) for i in stdin.split()]\n    x.sort()\n    y.sort()\n    x = [i for i in x if i >= 0]\n    y = [i for i in y if i >= 0]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for i in y if i < n]\n    x = [i for i in x if i < n]\n    y = [i for"
    },
    {
        "number": 3397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    T = 0\n    for i in range(N):\n        T += t[i]\n    return str(T)\n\nSample Input:\n2 3\n2 100 10\n100 1 10\nSample Output:\n0\ndef"
    },
    {
        "number": 3398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    r, c = map(int, stdin.split())\n    files = []\n    for i in range(n):\n        files.append(list(map(int, stdin.split())))\n    files.sort(key=lambda x: (x[0], x[1]))\n    files = [files[i][0] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n)]\n    files.sort()\n    files = [files[i] for i in range(n"
    },
    {
        "number": 3399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.split())\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C':\n                grid[i][j] = 'D'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'A':\n                grid[i][j] = 'B'\n            elif grid[i][j] == 'B':\n                grid[i][j] = 'C'\n            elif grid[i][j] == 'C"
    },
    {
        "number": 3400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, r, t = map(int, stdin.split())\n    visited = [0] * n\n    direct_track = [0] * n\n    direct_track[0] = 1\n    for i in range(n):\n        visited[i] = 1\n        direct_track[i] = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if visited[j] == 0:\n                direct_track[j] += direct_track[i]\n                direct_track[j] %= t\n    return str(direct_track[r - 1])\n"
    },
    {
        "number": 3401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    h = [0] * (n + 1)\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(n - 1, -1, -1):\n        h[i] = int(stdin[i + 1])\n    for i in range(s - 1, -1, -1):\n        h[i] = int(stdin[i + 1])\n    for i in range(t - 1, -1, -1):\n        h[i] = int(stdin[i + 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    for i in range(1, n + 1):\n        h[i] = int(stdin[i - 1])\n    "
    },
    {
        "number": 3402,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = stdin.strip().split()\n    T = [i for i in T if i!= '']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i!='']\n    T = [i for i in T if i"
    },
    {
        "number": 3403,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    db = [list(stdin.split()) for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'hobit':\n                db[i][j] = 'robi'\n            elif db[i][j] == 'robi':\n                db[i][j] = 'hobit'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robi':\n                db[i][j] = 'robot'\n            elif db[i][j] == 'robot':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n                db[i][j] = 'hobit'\n            elif db[i][j] == 'hobit':\n                db[i][j] = 'robot'\n    for i in range(N):\n        for j in range(N):\n            if db[i][j] == 'robot':\n"
    },
    {
        "number": 3404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    for i in range(n):\n        if s[i] == x:\n            s[i] = s[i] + 1\n        else:\n            s[i] = s[i]\n    return ''.join(map(str, s))\n\nSample Output:\nthis is a test\n"
    },
    {
        "number": 3405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = []\n    for i in stdin:\n        if i.isdigit():\n            numbers.append(int(i))\n    numbers.sort()\n    for i in numbers:\n        if i < 10**8:\n            return str(i)\n    return \"No solution\"\n\nSample Output:\nNo solution\n\"\"\"\n\ndef"
    },
    {
        "number": 3406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    \n    def is_in_danger(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_castle(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not_castle(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not_castle_or_not(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not_castle_or_not_castle(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not_castle_or_not_castle_or_not(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not_castle_or_not_castle_or_not_castle(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not_castle_or_not_castle_or_not_castle_or_not(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not_castle_or_not_castle_or_not_castle_or_not_castle(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle(x, y):\n        return (x < 0 or x > 10**6 or y < 0 or y > 10**6)\n    \n    def is_in_danger_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or_not_castle_or"
    },
    {
        "number": 3407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"0\"\n    x = [0] * n\n    y = [0] * n\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        x[i] = a\n        y[i] = b\n    for i in range(n):\n        for j in range(i + 1, n):\n            if x[i] == x[j] and y[i] == y[j]:\n                return str(i) + \" \" + str(j)\n    return \"0\"\n\nSample Output:\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 3408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    patterns = []\n    for _ in range(N):\n        patterns.append(stdin.split())\n    \n    def is_pattern_covered(pattern: str, word: str) -> bool:\n        for i in range(len(pattern)):\n            if pattern[i]!= word[i]:\n                return False\n        return True\n    \n    def count_patterns(patterns: list[list[str]]) -> int:\n        count = 0\n        for pattern in patterns:\n            if is_pattern_covered(pattern, word):\n                count += 1\n        return count\n    \n    return str(count_patterns(patterns))\n\nSample Output:\n2\n1\ndef"
    },
    {
        "number": 3409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    board = [list(stdin.split()) for _ in range(r)]\n    \n    def is_valid(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'O':\n            return False\n        return True\n    \n    def is_valid_up(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'X':\n            return False\n        return True\n    \n    def is_valid_down(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'O':\n            return False\n        return True\n    \n    def is_valid_left(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'X':\n            return False\n        return True\n    \n    def is_valid_right(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'O':\n            return False\n        return True\n    \n    def is_valid_up_left(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'X':\n            return False\n        return True\n    \n    def is_valid_up_right(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'O':\n            return False\n        return True\n    \n    def is_valid_down_left(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'X':\n            return False\n        return True\n    \n    def is_valid_down_right(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'O':\n            return False\n        return True\n    \n    def is_valid_left_up(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'X':\n            return False\n        return True\n    \n    def is_valid_right_up(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'O':\n            return False\n        return True\n    \n    def is_valid_left_down(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'X':\n            return False\n        return True\n    \n    def is_valid_right_down(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'O':\n            return False\n        return True\n    \n    def is_valid_up_left_down(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'X':\n            return False\n        return True\n    \n    def is_valid_up_right_down(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'O':\n            return False\n        return True\n    \n    def is_valid_down_left_down(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'X':\n            return False\n        return True\n    \n    def is_valid_down_right_down(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'O':\n            return False\n        return True\n    \n    def is_valid_left_up_down(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'X':\n            return False\n        return True\n    \n    def is_valid_right_up_down(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'O':\n            return False\n        return True\n    \n    def is_valid_up_left_down_right(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):\n            return False\n        if board[r][c]!= 'X':\n            return False\n        return True\n    \n    def is_valid_right_down_left_up(r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]):"
    },
    {
        "number": 3410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    board = []\n    for _ in range(N):\n        board.append(list(map(int, stdin.split())))\n    \n    def get_sum(board):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += board[i][j]\n        return sum\n    \n    def get_quad(board):\n        quad = []\n        for i in range(N):\n            for j in range(N):\n                quad.append(board[i][j] * 2)\n        return quad\n    \n    def get_quad_sum(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum\n    \n    def get_quad_sum_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j in range(N):\n                sum += quad[i][j]\n        return sum % 1000003\n    \n    def get_quad_sum_mod_mod_mod_mod(quad):\n        sum = 0\n        for i in range(N):\n            for j"
    },
    {
        "number": 3411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, r = map(int, stdin.split())\n    s_1, s_2, s_3 = map(int, stdin.split())\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_2, s_3])\n    s_1, s_2, s_3 = sorted([s_1, s_"
    },
    {
        "number": 3412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x1, y1, x2, y2 = map(int, stdin.strip().split())\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2, y2 = abs(x1), abs(y1), abs(x2), abs(y2)\n    x1, y1, x2,"
    },
    {
        "number": 3413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [0] * n\n    b = [0] * n\n    for i in range(m):\n        a[i], b[i] = map(int, stdin.split())\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 1\n    for i in range(n):\n        if a[i] == b[i]:\n            a[i] = 0\n            b[i] = 0\n"
    },
    {
        "number": 3414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, stdin.split())))\n    edges.sort(key=lambda x: x[0])\n    \n    def get_turn(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    def get_turn_diff(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    def get_turn_diff_2(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    def get_turn_diff_3(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    def get_turn_diff_4(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    def get_turn_diff_5(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    def get_turn_diff_6(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    def get_turn_diff_7(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    def get_turn_diff_8(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    def get_turn_diff_9(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    def get_turn_diff_10(i, j):\n        return (edges[i][j] - edges[i][j - 1]) / (edges[i][j] - edges[i - 1][j])\n    \n    turn_diff = [0] * n\n    for i in range(n):\n        turn_diff[i] = get_turn(i, i)\n    \n    turn_diff_2 = [0] * n\n    for i in range(n):\n        turn_diff_2[i] = get_turn_diff_2(i, i)\n    \n    turn_diff_3 = [0] * n\n    for i in range(n):\n        turn_diff_3[i] = get_turn_diff_3(i, i)\n    \n    turn_diff_4 = [0] * n\n    for i in range(n):\n        turn_diff_4[i] = get_turn_diff_4(i, i)\n    \n    turn_diff_5 = [0] * n\n    for i in range(n):\n        turn_diff_5[i] = get_turn_diff_5(i, i)\n    \n    turn_diff_6 = [0] * n\n    for i in range(n):\n        turn_diff_6[i] = get_turn_diff_6(i, i)\n    \n    turn_diff_7 = [0] * n\n    for i in range(n):\n        turn_diff_7[i] = get_turn_diff_7(i, i)\n    \n    turn_diff_8 = [0] * n\n    for i in range(n):\n        turn_diff_8[i] = get_turn_diff_8(i, i)\n    \n    turn_diff_9 = [0] * n\n    for i in range(n):\n        turn_diff_9[i] = get_turn_diff_9(i, i)\n    \n    turn_diff_10 = [0] * n\n    for i in range(n):\n        turn_diff_10[i] = get_turn_diff_10(i, i)\n    \n    turn_diff_2_2 = [0] * n\n    for i in range(n):\n        turn_diff_2_2[i] = get_turn_diff_2_2(i, i)\n    \n    turn_diff_3_3 = [0] * n\n    for i in range(n):\n        turn_diff_3_3[i] = get_turn_diff_3_3(i, i)\n    \n    turn_diff_4_4 = [0] * n\n    for i in range(n):\n        turn_diff_4_4[i] = get_turn_diff_4_4(i, i)\n    \n    turn_diff_5_5 = [0] * n\n    for i in range(n):\n        turn_diff_5_5[i] = get_turn_diff_5_5(i, i)\n    \n    turn_diff_6_6 = [0] * n\n    for i in range(n):\n        turn_diff_6_6[i] = get_turn_diff_6_6(i, i)\n    \n    turn_diff_7_7 = [0] * n\n    for i in range(n):\n        turn_diff_7_7[i] = get_turn_diff_7_7(i, i)\n    \n    turn_diff_8_8 = [0] * n\n    for i in range(n):\n        turn_diff_8_8[i] = get_turn_diff_8_8(i, i)\n    \n    turn_diff_9_9 = [0] * n\n    for i in range(n):\n        turn_diff_9_9[i] = get_turn_diff_9_9(i, i)\n    \n    turn_diff_10_10 = [0] * n\n    for i in range(n):\n        turn_diff_10_10[i] = get_turn_diff_10_10(i, i)"
    },
    {
        "number": 3415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\" + \"1\"\n    if n == 3:\n        return \"1\" + \"1\" + \"1\"\n    if n == 4:\n        return \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 5:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 6:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 7:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 8:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 9:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 10:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 11:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 12:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 13:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 14:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 15:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 16:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 17:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 18:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 19:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 20:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 21:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 22:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 23:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 24:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\"\n    if n == 25:\n        return \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \"1\" + \""
    },
    {
        "number": 3416,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    airports = [int(i) for i in stdin.split()]\n    airports.sort()\n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if airports[i] < airports[j]:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 3417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    \n    def dfs(v):\n        visited[v] = True\n        for i in graph[v]:\n            if not visited[i]:\n                dfs(i)\n    \n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i)\n    \n    return str(len(set(map(lambda x: x-1, range(n)))) - 1)\n\nSample Input:\n2 1\n1 2\nSample Output:\n1\ndef"
    },
    {
        "number": 3418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    demand = [int(i) for i in stdin.split()]\n    supply = [int(i) for i in stdin.split()]\n    demand = [i for i in demand if i!= 0]\n    supply = [i for i in supply if i!= 0]\n    demand = [i for i in demand if i % 2 == 0]\n    supply = [i for i in supply if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand if i % 2 == 0]\n    demand = [i for i in demand"
    },
    {
        "number": 3419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s_1, s_2 = map(int, stdin.split())\n    j = int(s_1/s_2)\n    if j == 0:\n        return str(n)\n    else:\n        return str(n-j)\n\nSample Output:\n4\nExplanation:\nThe ticket machine is working at $s_1$ and $s_2$ respectively.\nThe customers are served at $j$ times.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2$ respectively.\nThe customers are left at $s_1$ and $s_2"
    },
    {
        "number": 3420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    boys = [i for i in range(1, n+1)]\n    girls = [i for i in range(1, n+1)]\n    titles = [i for i in range(1, n+1)]\n    for _ in range(m):\n        name, title = map(str, stdin.split())\n        if name not in boys:\n            boys.append(name)\n        if title not in titles:\n            titles.append(title)\n    for _ in range(m):\n        name, title = map(str, stdin.split())\n        if name not in girls:\n            girls.append(name)\n        if title not in titles:\n            titles.append(title)\n    answer = 0\n    for boy in boys:\n        for girl in girls:\n            if boy == girl:\n                continue\n            if boy in titles and girl in titles:\n                answer += 1\n    return str(answer)\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= B,G <= 1000\n1 <= N_i <= N_i\n1 <= N_i <= 10^5\n1 <= boy <= girl\n1 <= title <= 10^5\n\n-----Time Limit: 1.0s (both IO and C++)\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        boys = [i for i in range(1, n+1)]\n        girls = [i for i in range(1, n+1)]\n        titles = [i for i in range(1, n+1)]\n        for _ in range(m):\n            name, title = map(str, stdin.split())\n            if name not in boys:\n                boys.append(name)\n            if title not in titles:\n                titles.append(title)\n        for _ in range(m):\n            name, title = map(str, stdin.split())\n            if name not in girls:\n                girls.append(name)\n            if title not in titles:\n                titles.append(title)\n        answer = 0\n        for boy in boys:\n            for girl in girls:\n                if boy == girl:\n                    continue\n                if boy in titles and girl in titles:\n                    answer += 1\n        return str(answer)\n"
    },
    {
        "number": 3421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = len(stdin.strip())\n    if n < k:\n        return ''\n    elif n == k:\n        return '1'\n    else:\n        return '0'\n\nSample Input:\n1\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n"
    },
    {
        "number": 3422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    W = [int(i) for i in stdin.split()]\n    H = [int(i) for i in stdin.split()]\n    W.sort()\n    H.sort()\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H[::-1]\n    W = W[::-1]\n    H = H["
    },
    {
        "number": 3423,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"cannot be ordered\"\n    packages = []\n    for i in range(n):\n        packages.append(stdin.strip().split())\n    packages.sort(key=lambda x: x[0])\n    packages = [x[0] for x in packages]\n    return \" \".join(packages)\n\n-----Constraints-----\n1 <= $n <= $10^6\n0 <= $stdin.length <= $10^6\nstdin contains only lowercase English letters, digits, and _, -,., and + (i.e. underscore, minus, period, and plus).\n\n-----Time Limit-----\n1 minute\n\n-----Memory Limit-----\n$10^6\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, ell = map(int, stdin.split())\n    if y % 10 == 0:\n        return str(ell)\n    else:\n        return str(ell) + '0' * (ell - y)\n\nSample Input:\n32 20\nSample Output:\n16\ndef"
    },
    {
        "number": 3425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    \n    def solve(board, row, col):\n        if row == n or col == m or board[row][col] == '.':\n            return 0\n        \n        board[row][col] = '.'\n        \n        for i in range(row, n):\n            if solve(board, i, col):\n                return 1\n        \n        for i in range(row, n):\n            if solve(board, i, row):\n                return 1\n        \n        for i in range(col, m):\n            if solve(board, row, i):\n                return 1\n        \n        for i in range(row, n):\n            if solve(board, i, col):\n                return 1\n        \n        for i in range(col, m):\n            if solve(board, row, i):\n                return 1\n        \n        return 0\n    \n    return solve(board, 0, 0)\n\ndef"
    },
    {
        "number": 3426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    \n    def get_min_length(a, b, l, c):\n        if len(a) == 0 or len(b) == 0 or len(l) == 0 or len(c) == 0:\n            return 0\n        \n        if a[0] == b[0]:\n            return get_min_length(a[1:], b[1:], l[1:], c[1:]) + l[0]\n        \n        if a[0] == b[-1]:\n            return get_min_length(a[1:], b[:-1], l[:-1], c[:-1]) + l[-1]\n        \n        if a[-1] == b[-1]:\n            return get_min_length(a[:-1], b[:-1], l[:-1], c[:-1]) + l[-1]\n        \n        if a[-1] == b[-2]:\n            return get_min_length(a[:-1], b[:-2], l[:-2], c[:-2]) + l[-2]\n        \n        if a[-2] == b[-2]:\n            return get_min_length(a[:-2], b[:-2], l[:-2], c[:-2]) + l[-2]\n        \n        if a[-2] == b[-3]:\n            return get_min_length(a[:-2], b[:-3], l[:-3], c[:-3]) + l[-3]\n        \n        if a[-3] == b[-3]:\n            return get_min_length(a[:-3], b[:-3], l[:-3], c[:-3]) + l[-3]\n        \n        if a[-3] == b[-4]:\n            return get_min_length(a[:-3], b[:-4], l[:-4], c[:-4]) + l[-4]\n        \n        if a[-4] == b[-4]:\n            return get_min_length(a[:-4], b[:-4], l[:-4], c[:-4]) + l[-4]\n        \n        if a[-4] == b[-5]:\n            return get_min_length(a[:-4], b[:-5], l[:-5], c[:-5]) + l[-5]\n        \n        if a[-5] == b[-5]:\n            return get_min_length(a[:-5], b[:-5], l[:-5], c[:-5]) + l[-5]\n        \n        if a[-5] == b[-6]:\n            return get_min_length(a[:-5], b[:-6], l[:-6], c[:-6]) + l[-6]\n        \n        if a[-6] == b[-6]:\n            return get_min_length(a[:-6], b[:-6], l[:-6], c[:-6]) + l[-6]\n        \n        if a[-6] == b[-7]:\n            return get_min_length(a[:-6], b[:-7], l[:-7], c[:-7]) + l[-7]\n        \n        if a[-7] == b[-7]:\n            return get_min_length(a[:-7], b[:-7], l[:-7], c[:-7]) + l[-7]\n        \n        if a[-7] == b[-8]:\n            return get_min_length(a[:-7], b[:-8], l[:-8], c[:-8]) + l[-8]\n        \n        if a[-8] == b[-8]:\n            return get_min_length(a[:-8], b[:-8], l[:-8], c[:-8]) + l[-8]\n        \n        if a[-8] == b[-9]:\n            return get_min_length(a[:-8], b[:-9], l[:-9], c[:-9]) + l[-9]\n        \n        if a[-9] == b[-9]:\n            return get_min_length(a[:-9], b[:-9], l[:-9], c[:-9]) + l[-9]\n        \n        if a[-9] == b[-10]:\n            return get_min_length(a[:-9], b[:-10], l[:-10], c[:-10]) + l[-10]\n        \n        if a[-10] == b[-10]:\n            return get_min_length(a[:-10], b[:-10], l[:-10], c[:-10]) + l[-10]\n        \n        if a[-10] == b[-11]:\n            return get_min_length(a[:-10], b[:-11], l[:-11], c[:-11]) + l[-11]\n        \n        if a[-11] == b[-11]:\n            return get_min_length(a[:-11], b[:-11], l[:-11], c[:-11]) + l[-11]\n        \n        if a[-11] == b[-12]:\n            return get_min_length"
    },
    {
        "number": 3427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    door = [int(i) for i in stdin.split()]\n    door.sort()\n    \n    def check(door):\n        if len(door) == 1:\n            return True\n        \n        for i in range(len(door)):\n            if door[i] == -1:\n                continue\n            if door[i] == 0:\n                if check(door[:i] + door[i+1:]) == False:\n                    return False\n            elif door[i] == 1:\n                if check(door[:i] + door[i+1:]) == False:\n                    return False\n        return True\n    \n    if check(door) == False:\n        return '0'\n    else:\n        return str(len(door))"
    },
    {
        "number": 3428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(len(set(a)))\n\nSample Output:\n3\nExplanation:\nThe sequence is a permutation of the integers 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674"
    },
    {
        "number": 3429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_s, y_s, s_s, r_i, r_f = map(int, stdin.split())\n    x_a, y_a = map(int, stdin.split())\n    if (x_s - x_a)**2 + (y_s - y_a)**2 <= 10**9:\n        return str(abs(x_s - x_a)**2 + abs(y_s - y_a)**2)\n    else:\n        return '0'\n\nSample Input:\n2 1 1 3 2\n2 5 1\nSample Output:\n0\ndef"
    },
    {
        "number": 3430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = []\n    for i in range(N):\n        for j in range(i+1, N):\n            C.append(A[i] + B[j])\n    C.sort()\n    return str(sum(C))\n\ndef"
    },
    {
        "number": 3431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    points = []\n    for _ in range(N):\n        x, y = map(int, stdin.strip().split())\n        points.append((x, y))\n    \n    def get_weight(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_2(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_3(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_4(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_5(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_6(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_7(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_8(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_9(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_10(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_11(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_12(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_13(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_14(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_15(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_16(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_17(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_18(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_19(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_20(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_21(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_22(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_23(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_24(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_25(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_26(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_27(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_28(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_29(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_30(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_31(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_32(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_33(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_34(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_35(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_36(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_37(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_38(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_39(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_40(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_41(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_42(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_43(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_44(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_45(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_46(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_47(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_48(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_49(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_50(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_51(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_52(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_53(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_54(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_55(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_56(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_57(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_58(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_59(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_60(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_61(point):\n        x, y = point\n        return abs(x - y)\n    \n    def get_weight_62(point):\n        x, y = point\n        return abs(x -"
    },
    {
        "number": 3432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    a_b = 0\n    for i in range(n):\n        a_b += a[i] + b[i]\n    return str(a_b)\n\ndef"
    },
    {
        "number": 3433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    maze = [list(stdin.split()) for _ in range(R)]\n    fire = []\n    for r in range(R):\n        for c in range(C):\n            if maze[r][c] == 'J':\n                fire.append((r, c))\n            elif maze[r][c] == 'F':\n                fire.append((r, c))\n    \n    def dfs(r, c):\n        if r < 0 or r >= R or c < 0 or c >= C or maze[r][c]!= 'J':\n            return\n        maze[r][c] = 'F'\n        dfs(r + 1, c)\n        dfs(r - 1, c)\n        dfs(r, c + 1)\n        dfs(r, c - 1)\n    \n    for r in range(R):\n        for c in range(C):\n            if maze[r][c] == 'J':\n                dfs(r, c)\n    \n    return 'IMPOSSIBLE' if len(fire) == 0 else min(fire)\n"
    },
    {
        "number": 3434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    minions = [int(i) for i in stdin.split()]\n    minions.sort()\n    minions = [minions[i] for i in range(n)]\n    minions.sort()\n    minions = [minions[i] for i in range(m)]\n    minions.sort()\n    minions = [minions[i] for i in range(d)]\n    minions.sort()\n    minions = [minions[i] for i in range(n-m, n)]\n    minions.sort()\n    minions = [minions[i] for i in range(m-d, m)]\n    minions.sort()\n    minions = [minions[i] for i in range(d)]\n    minions.sort()\n    return str(1/((n-m)*(m-d)*(d-d)))\n"
    },
    {
        "number": 3435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pattern = stdin.split()\n    pattern = [int(i) for i in pattern]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!= 0]\n    pattern = [i for i in pattern if i!="
    },
    {
        "number": 3436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x*y)\n\nSample Input:\n2 2\nSample Output:\n6\ndef"
    },
    {
        "number": 3437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L1, L2 = map(int, stdin.split())\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 = L2 + L1\n    L1 = L1 + L2\n    L2 ="
    },
    {
        "number": 3438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        if a[i] < c:\n            answer += 1\n    return answer\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= c <= 10^5\n1 <= a[i] <= 10^5\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(n)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    return str(int(h * w / 2))\n\nSample Input:\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\nSample Output:\n10\ndef"
    },
    {
        "number": 3440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R, (a, b, c) = map(int, stdin.split())\n    a, b, c = map(int, (a, b, c))\n    if a == b == c:\n        return str(c)\n    if a == b:\n        return str(c * (c + 1) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2) + str(c * (c + 9) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2) + str(c * (c + 9) // 2) + str(c * (c + 10) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2) + str(c * (c + 9) // 2) + str(c * (c + 10) // 2) + str(c * (c + 11) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2) + str(c * (c + 9) // 2) + str(c * (c + 10) // 2) + str(c * (c + 11) // 2) + str(c * (c + 12) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2) + str(c * (c + 9) // 2) + str(c * (c + 10) // 2) + str(c * (c + 11) // 2) + str(c * (c + 12) // 2) + str(c * (c + 13) // 2)\n    if a == b:\n        return str(c * (c + 1) //"
    },
    {
        "number": 3441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return str(x)\n    if n == 1:\n        return str(x) + str(y)\n    if m == 1:\n        return str(y) + str(x)\n    if n == m:\n        return str(x) + str(y)\n    if n == m:\n        return str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m:\n        return str(y) + str(x) + str(y) + str(x)\n    if n == m"
    },
    {
        "number": 3442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return '0'\n    else:\n        return '1'\n\nSample Input:\n1 10\nSample Output:\n10\ndef"
    },
    {
        "number": 3443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    y = list(map(int, stdin.strip().split()))\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y"
    },
    {
        "number": 3444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cabins = list(map(int, stdin.split()))\n    p = [0] * N\n    for i in range(N):\n        p[i] = (cabins[i] - 1) / (N - 1)\n    for i in range(N):\n        for j in range(i + 1, N):\n            p[j] = (cabins[j] - cabins[i]) / (N - 1)\n    for i in range(M):\n        p[i] = p[i] * (1 - p[i])\n    return str(sum(p))\n\nSample Output:\n0.500000000 1.000000000\nExplanation:\nLuk\u00e1\u0161 can walk along the hill without falling.\n\"\"\"\n\ndef"
    },
    {
        "number": 3445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    y = [int(i) for i in stdin.split()]\n    x.sort()\n    y.sort()\n    x.append(0)\n    y.append(0)\n    x.append(0)\n    y.append(0)\n    x.append(0)\n    y.append(0)\n    x.sort()\n    y.sort()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n    x.pop()\n    y.pop()\n"
    },
    {
        "number": 3446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = int(stdin.strip())\n    table = []\n    for i in range(n):\n        table.append(stdin.strip().split())\n    table.sort(key=lambda x: int(x[0]))\n    for i in range(k):\n        for j in range(n):\n            if table[j][0] == table[j][1]:\n                table[j][0] = table[j][0] + table[j][2]\n                table[j][1] = table[j][1] + table[j][3]\n                table[j][2] = table[j][2] + table[j][4]\n                table[j][3] = table[j][3] + table[j][5]\n                table[j][4] = table[j][4] + table[j][6]\n                table[j][5] = table[j][5] + table[j][7]\n                table[j][6] = table[j][6] + table[j][8]\n                table[j][7] = table[j][7] + table[j][9]\n                table[j][8] = table[j][8] + table[j][10]\n                table[j][9] = table[j][9] + table[j][11]\n                break\n    for i in range(n):\n        print(table[i][0], table[i][1], table[i][2], table[i][3], table[i][4], table[i][5], table[i][6], table[i][7], table[i][8], table[i][9])\n    return table[0][0]\n\nSample Output:\n9-b\n8-a\ndef"
    },
    {
        "number": 3447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {}\n    for i in range(n):\n        line = stdin.split()\n        for j in range(len(line)):\n            d[line[j]] = j\n    for i in range(n):\n        print(d[stdin[i]])\n    return \"\"\n\nSample Output:\n3246R3246\ndef"
    },
    {
        "number": 3448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k!= 0:\n        return 'NO'\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        return 'YES'\n    if n == 3:\n        return 'YES'\n    if n == 4:\n        return 'YES'\n    if n == 5:\n        return 'YES'\n    if n == 6:\n        return 'YES'\n    if n == 7:\n        return 'YES'\n    if n == 8:\n        return 'YES'\n    if n == 9:\n        return 'YES'\n    if n == 10:\n        return 'YES'\n    if n == 11:\n        return 'YES'\n    if n == 12:\n        return 'YES'\n    if n == 13:\n        return 'YES'\n    if n == 14:\n        return 'YES'\n    if n == 15:\n        return 'YES'\n    if n == 16:\n        return 'YES'\n    if n == 17:\n        return 'YES'\n    if n == 18:\n        return 'YES'\n    if n == 19:\n        return 'YES'\n    if n == 20:\n        return 'YES'\n    if n == 21:\n        return 'YES'\n    if n == 22:\n        return 'YES'\n    if n == 23:\n        return 'YES'\n    if n == 24:\n        return 'YES'\n    if n == 25:\n        return 'YES'\n    if n == 26:\n        return 'YES'\n    if n == 27:\n        return 'YES'\n    if n == 28:\n        return 'YES'\n    if n == 29:\n        return 'YES'\n    if n == 30:\n        return 'YES'\n    if n == 31:\n        return 'YES'\n    if n == 32:\n        return 'YES'\n    if n == 33:\n        return 'YES'\n    if n == 34:\n        return 'YES'\n    if n == 35:\n        return 'YES'\n    if n == 36:\n        return 'YES'\n    if n == 37:\n        return 'YES'\n    if n == 38:\n        return 'YES'\n    if n == 39:\n        return 'YES'\n    if n == 40:\n        return 'YES'\n    if n == 41:\n        return 'YES'\n    if n == 42:\n        return 'YES'\n    if n == 43:\n        return 'YES'\n    if n == 44:\n        return 'YES'\n    if n == 45:\n        return 'YES'\n    if n == 46:\n        return 'YES'\n    if n == 47:\n        return 'YES'\n    if n == 48:\n        return 'YES'\n    if n == 49:\n        return 'YES'\n    if n == 50:\n        return 'YES'\n    if n == 51:\n        return 'YES'\n    if n == 52:\n        return 'YES'\n    if n == 53:\n        return 'YES'\n    if n == 54:\n        return 'YES'\n    if n == 55:\n        return 'YES'\n    if n == 56:\n        return 'YES'\n    if n == 57:\n        return 'YES'\n    if n == 58:\n        return 'YES'\n    if n == 59:\n        return 'YES'\n    if n == 60:\n        return 'YES'\n    if n == 61:\n        return 'YES'\n    if n == 62:\n        return 'YES'\n    if n == 63:\n        return 'YES'\n    if n == 64:\n        return 'YES'\n    if n == 65:\n        return 'YES'\n    if n == 66:\n        return 'YES'\n    if n == 67:\n        return 'YES'\n    if n == 68:\n        return 'YES'\n    if n == 69:\n        return 'YES'\n    if n == 70:\n        return 'YES'\n    if n == 71:\n        return 'YES'\n    if n == 72:\n        return 'YES'\n    if n == 73:\n        return 'YES'\n    if n == 74:\n        return 'YES'\n    if n == 75:\n        return 'YES'\n    if n == 76:\n        return 'YES'\n    if n == 77:\n        return 'YES'\n    if n == 78:\n        return 'YES'\n    if n == 79:\n        return 'YES'\n    if n == 80:\n        return 'YES'\n    if n == 81:\n        return 'YES'\n    if n == 82:\n        return 'YES'\n    if n == 83:\n        return 'YES'\n    if n == 84:\n        return 'YES'\n    if n == 85:\n        return 'YES'\n    if n == 86:\n        return 'YES'\n    if n == 87:\n        return 'YES'\n    if n == 88:\n        return 'YES'\n    if n == 89:\n        return 'YES'\n    if n == 90:\n        return 'YES'\n    if n == 91:\n        return 'YES'\n    if n == 92:\n        return 'YES'\n    if n == 93:\n        return 'YES'\n    if n == 94:\n        return 'YES'\n    if n == 95:\n        return 'YES'\n    if n == 96:\n        return 'YES'\n    if n == 97:\n        return 'YES'\n    if n == 98:\n        return 'YES'\n    if n == 99:\n        return 'YES'\n    if n == 100:\n        return 'YES'\n    if n == 101:\n        return 'YES'\n    if n == 102:\n        return 'YES'\n    if n == 103:\n        return 'YES'\n    if n == 104:\n        return 'YES'\n    if n == 105:\n        return 'YES'\n    if n == 106:\n        return 'YES'\n    if n == 107:\n        return 'YES'\n    if n == 108:\n        return 'YES'\n    if n == 109:\n        return 'YES'\n    if n == 110:\n        return 'YES'\n    if n == 111:\n        return '"
    },
    {
        "number": 3449,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lights = [list(map(int, input().split())) for _ in range(n)]\n    \n    def get_light_level(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_2(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_3(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_4(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_5(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_6(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_7(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_8(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_9(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_10(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_11(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_12(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_13(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_14(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_15(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_16(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_17(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_18(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_19(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_20(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_21(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_22(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_23(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_24(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_25(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_26(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_27(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_28(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_29(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_30(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_31(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_32(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_33(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_34(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_35(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_36(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_37(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_38(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_39(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_40(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_41(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_42(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_light_level_43(r, c, s):\n        return s * (r ** 2 + c ** 2)\n    \n    def get_"
    },
    {
        "number": 3450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10000000:\n        return str(n)\n    else:\n        return solution(str(n)[-3:])\n\nSample Input:\n5\nSample Output:\n12\ndef"
    },
    {
        "number": 3451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(stdin.split())\n    seq.sort()\n    if len(seq) == 1:\n        return seq[0]\n    if len(seq) == 2:\n        return seq[0] + seq[1]\n    if len(seq) == 3:\n        return seq[0] + seq[1] + seq[2]\n    if len(seq) == 4:\n        return seq[0] + seq[1] + seq[2] + seq[3]\n    if len(seq) == 5:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4]\n    if len(seq) == 6:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5]\n    if len(seq) == 7:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6]\n    if len(seq) == 8:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7]\n    if len(seq) == 9:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8]\n    if len(seq) == 10:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9]\n    if len(seq) == 11:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10]\n    if len(seq) == 12:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10] + seq[11]\n    if len(seq) == 13:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10] + seq[11] + seq[12]\n    if len(seq) == 14:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10] + seq[11] + seq[12] + seq[13]\n    if len(seq) == 15:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10] + seq[11] + seq[12] + seq[13] + seq[14]\n    if len(seq) == 16:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10] + seq[11] + seq[12] + seq[13] + seq[14] + seq[15]\n    if len(seq) == 17:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10] + seq[11] + seq[12] + seq[13] + seq[14] + seq[15] + seq[16]\n    if len(seq) == 18:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10] + seq[11] + seq[12] + seq[13] + seq[14] + seq[15] + seq[16] + seq[17]\n    if len(seq) == 19:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10] + seq[11] + seq[12] + seq[13] + seq[14] + seq[15] + seq[16] + seq[17] + seq[18]\n    if len(seq) == 20:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10] + seq[11] + seq[12] + seq[13] + seq[14] + seq[15] + seq[16] + seq[17] + seq[18] + seq[19]\n    if len(seq) == 21:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10] + seq[11] + seq[12] + seq[13] + seq[14] + seq[15] + seq[16] + seq[17] + seq[18] + seq[19] + seq[20]\n    if len(seq) == 22:\n        return seq[0] + seq[1] + seq[2] + seq[3] + seq[4] + seq[5] + seq[6] + seq[7] + seq[8] + seq[9] + seq[10]"
    },
    {
        "number": 3452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    maze = [list(map(int, input().split())) for _ in range(n)]\n    answer = []\n    for i in range(n):\n        for j in range(n):\n            if maze[i][j] == 1:\n                for k in range(n):\n                    if maze[k][j] == 1:\n                        for l in range(n):\n                            if maze[l][j] == 1:\n                                answer.append((i, j, k, l))\n    answer.sort()\n    for i in answer:\n        print(i)\n    return '\\n'.join(map(str, answer))\n"
    },
    {
        "number": 3453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A, B = map(int, stdin.split())\n    L = map(int, stdin.split())\n    A_i = A - 1\n    B_i = B - 1\n    L_i = L[0]\n    L_i_2 = L[1]\n    L_i_3 = L[2]\n    L_i_4 = L[3]\n    L_i_5 = L[4]\n    L_i_6 = L[5]\n    L_i_7 = L[6]\n    L_i_8 = L[7]\n    L_i_9 = L[8]\n    L_i_10 = L[9]\n    L_i_11 = L[10]\n    L_i_12 = L[11]\n    L_i_13 = L[12]\n    L_i_14 = L[13]\n    L_i_15 = L[14]\n    L_i_16 = L[15]\n    L_i_17 = L[16]\n    L_i_18 = L[17]\n    L_i_19 = L[18]\n    L_i_20 = L[19]\n    L_i_21 = L[20]\n    L_i_22 = L[21]\n    L_i_23 = L[22]\n    L_i_24 = L[23]\n    L_i_25 = L[24]\n    L_i_26 = L[25]\n    L_i_27 = L[26]\n    L_i_28 = L[27]\n    L_i_29 = L[28]\n    L_i_30 = L[29]\n    L_i_31 = L[30]\n    L_i_32 = L[31]\n    L_i_33 = L[32]\n    L_i_34 = L[33]\n    L_i_35 = L[34]\n    L_i_36 = L[35]\n    L_i_37 = L[36]\n    L_i_38 = L[37]\n    L_i_39 = L[38]\n    L_i_40 = L[39]\n    L_i_41 = L[40]\n    L_i_42 = L[41]\n    L_i_43 = L[42]\n    L_i_44 = L[43]\n    L_i_45 = L[44]\n    L_i_46 = L[45]\n    L_i_47 = L[46]\n    L_i_48 = L[47]\n    L_i_49 = L[48]\n    L_i_50 = L[49]\n    L_i_51 = L[50]\n    L_i_52 = L[51]\n    L_i_53 = L[52]\n    L_i_54 = L[53]\n    L_i_55 = L[54]\n    L_i_56 = L[55]\n    L_i_57 = L[56]\n    L_i_58 = L[57]\n    L_i_59 = L[58]\n    L_i_60 = L[59]\n    L_i_61 = L[60]\n    L_i_62 = L[61]\n    L_i_63 = L[62]\n    L_i_64 = L[63]\n    L_i_65 = L[64]\n    L_i_66 = L[65]\n    L_i_67 = L[66]\n    L_i_68 = L[67]\n    L_i_69 = L[68]\n    L_i_70 = L[69]\n    L_i_71 = L[70]\n    L_i_72 = L[71]\n    L_i_73 = L[72]\n    L_i_74 = L[73]\n    L_i_75 = L[74]\n    L_i_76 = L[75]\n    L_i_77 = L[76]\n    L_i_78 = L[77]\n    L_i_79 = L[78]\n    L_i_80 = L[79]\n    L_i_81 = L[80]\n    L_i_82 = L[81]\n    L_i_83 = L[82]\n    L_i_84 = L[83]\n    L_i_85 = L[84]\n    L_i_86 = L[85]\n    L_i_87 = L[86]\n    L_i_88 = L[87]\n    L_i_89 = L[88]\n    L_i_90 = L[89]\n    L_i_91 = L[90]\n    L_i_92 = L[91]\n    L_i_93 = L[92]\n    L_i_94 = L[93]\n    L_i_95 = L[94]\n    L_i_96 = L[95]\n    L_i_97 = L[96]\n    L_i_98 = L[97]\n    L_i_99 = L[98]\n    L_i_100 = L[99]\n    L_i_101 = L[100]\n    L_i_102 = L[101]\n    L_i_103 = L[102]\n    L_i_104 = L[103]\n    L_i_105 = L[104]\n    L_i_106 = L[105]\n    L_i_107 = L[106]\n    L_i_108 = L[107]\n    L_i_109 = L["
    },
    {
        "number": 3454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    b = [0] * N\n    r = [0] * N\n    for i in range(N):\n        b[i] = int(stdin[i])\n    for i in range(N):\n        r[i] = int(stdin[i + N])\n    for i in range(N):\n        for j in range(i + 1, N):\n            if b[i]!= b[j]:\n                r[i] = r[j]\n                break\n    for i in range(N):\n        if r[i] % 100003!= 0:\n            return '0'\n        else:\n            r[i] = r[i] // 100003\n    return ''.join(map(str, r))\n\nSample Output:\n0\ndef"
    },
    {
        "number": 3455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, R = map(int, stdin.split())\n    lanes = [0] * N\n    cars = [0] * (N + 1)\n    sensor_range = [0] * (N + 1)\n    for i in range(M):\n        lanes[i], cars[i], sensor_range[i] = map(int, stdin.split())\n    \n    def get_safety_factor(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_2(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_3(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_4(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_5(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_6(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_7(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_8(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_9(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_10(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_11(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_12(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_13(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_14(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_15(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_16(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_17(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_18(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_19(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_20(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_21(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_22(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_23(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_24(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_25(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_26(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_27(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_28(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_29(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    \n    def get_safety_factor_30(car):\n        return (sensor_range[car] - cars[car]) / (cars[car] - cars[car - 1])\n    "
    },
    {
        "number": 3456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    c = [int(i) for i in stdin.split()]\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c[-1])\n    c.sort()\n    c.reverse()\n    c.append(c[0])\n    c.append(c"
    },
    {
        "number": 3457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, Y = map(int, stdin.split())\n    if N == 0 or X == 0 or Y == 0:\n        return 0\n    if X == 0 or Y == 0:\n        return 1\n    if X == 1 and Y == 1:\n        return 1\n    if X == 1 and Y == 2:\n        return 2\n    if X == 2 and Y == 1:\n        return 2\n    if X == 2 and Y == 2:\n        return 2\n    if X == 2 and Y == 3:\n        return 2\n    if X == 3 and Y == 1:\n        return 2\n    if X == 3 and Y == 2:\n        return 2\n    if X == 3 and Y == 3:\n        return 2\n    if X == 4 and Y == 1:\n        return 2\n    if X == 4 and Y == 2:\n        return 2\n    if X == 4 and Y == 3:\n        return 2\n    if X == 4 and Y == 4:\n        return 2\n    if X == 5 and Y == 1:\n        return 2\n    if X == 5 and Y == 2:\n        return 2\n    if X == 5 and Y == 3:\n        return 2\n    if X == 5 and Y == 4:\n        return 2\n    if X == 5 and Y == 5:\n        return 2\n    if X == 6 and Y == 1:\n        return 2\n    if X == 6 and Y == 2:\n        return 2\n    if X == 6 and Y == 3:\n        return 2\n    if X == 6 and Y == 4:\n        return 2\n    if X == 6 and Y == 5:\n        return 2\n    if X == 7 and Y == 1:\n        return 2\n    if X == 7 and Y == 2:\n        return 2\n    if X == 7 and Y == 3:\n        return 2\n    if X == 7 and Y == 4:\n        return 2\n    if X == 7 and Y == 5:\n        return 2\n    if X == 8 and Y == 1:\n        return 2\n    if X == 8 and Y == 2:\n        return 2\n    if X == 8 and Y == 3:\n        return 2\n    if X == 8 and Y == 4:\n        return 2\n    if X == 8 and Y == 5:\n        return 2\n    if X == 9 and Y == 1:\n        return 2\n    if X == 9 and Y == 2:\n        return 2\n    if X == 9 and Y == 3:\n        return 2\n    if X == 9 and Y == 4:\n        return 2\n    if X == 9 and Y == 5:\n        return 2\n    if X == 10 and Y == 1:\n        return 2\n    if X == 10 and Y == 2:\n        return 2\n    if X == 10 and Y == 3:\n        return 2\n    if X == 10 and Y == 4:\n        return 2\n    if X == 10 and Y == 5:\n        return 2\n    if X == 11 and Y == 1:\n        return 2\n    if X == 11 and Y == 2:\n        return 2\n    if X == 11 and Y == 3:\n        return 2\n    if X == 11 and Y == 4:\n        return 2\n    if X == 11 and Y == 5:\n        return 2\n    if X == 12 and Y == 1:\n        return 2\n    if X == 12 and Y == 2:\n        return 2\n    if X == 12 and Y == 3:\n        return 2\n    if X == 12 and Y == 4:\n        return 2\n    if X == 12 and Y == 5:\n        return 2\n    if X == 13 and Y == 1:\n        return 2\n    if X == 13 and Y == 2:\n        return 2\n    if X == 13 and Y == 3:\n        return 2\n    if X == 13 and Y == 4:\n        return 2\n    if X == 13 and Y == 5:\n        return 2\n    if X == 14 and Y == 1:\n        return 2\n    if X == 14 and Y == 2:\n        return 2\n    if X == 14 and Y == 3:\n        return 2\n    if X == 14 and Y == 4:\n        return 2\n    if X == 14 and Y == 5:\n        return 2\n    if X == 15 and Y == 1:\n        return 2\n    if X == 15 and Y == 2:\n        return 2\n    if X == 15 and Y == 3:\n        return 2\n    if X == 15 and Y == 4:\n        return 2\n    if X == 15 and Y == 5:\n        return 2\n    if X == 16 and Y == 1:\n        return 2\n    if X == 16 and Y == 2:\n        return 2\n    if X == 16 and Y == 3:\n        return 2\n    if X == 16 and Y == 4:\n        return 2\n    if X == 16 and Y == 5:\n        return 2\n    if X == 17 and Y == 1:\n        return 2\n    if X == 17 and Y == 2:\n        return 2\n    if X == 17 and Y == 3:\n        return 2\n    if X == 17 and Y == 4:\n        return 2\n    if X == 17 and Y == 5:\n        return 2\n    if X == 18 and Y == 1:\n        return 2\n    if X == 18 and Y == 2:\n        return 2\n    if X == 18 and Y == 3:\n        return 2\n    if X == 18 and Y == 4:\n        return 2\n    if X == 18 and Y == 5:\n        return 2\n    if X == 19 and Y == 1:\n        return 2\n    if X == 19 and Y == 2:\n        return 2\n    if X == 19 and Y == 3:\n        return 2\n    if X == 19 and Y == 4:\n        return 2\n    if X == 19 and Y == 5:\n        return 2\n    if X == 20 and Y == 1:\n        return 2\n    if X == 20 and Y == 2:\n        return 2\n    if X == 20 and Y == 3:\n        return 2\n    if X == 20 and Y == 4:\n        return 2\n    if X == 20 and Y == 5:\n        return 2\n    if X == 21 and Y == 1:\n        return 2\n    if X == 21 and Y == 2:\n        return 2\n    if X == 21 and Y == 3:\n        return 2\n    if X == 21 and Y == 4:\n        return 2\n    if X == 21 and Y == 5:\n        return 2\n    if X == 22 and Y == 1:\n        return 2\n    if X == 22 and Y == 2:\n        return 2\n    if X == 22 and Y == 3:\n        return 2\n    if X == 22 and Y == 4:\n        return 2\n    if X == 22 and Y == 5:\n        return 2\n    if X == 23 and Y == 1:\n        return 2\n    if X == 23 and Y == 2:\n        return 2\n    if X == 23 and Y == 3:\n        return 2\n    if X == 23 and Y == 4:\n        return 2\n    if X == 23 and Y == 5:\n        return 2"
    },
    {
        "number": 3458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    xor = 0\n    for i in range(n):\n        xor ^= a[i]\n    return str(xor)\n\nSample Input:\n3\n1 3 5\nSample Output:\n7\ndef"
    },
    {
        "number": 3459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    res = []\n    for i in range(n):\n        res.append(stdin.strip().split(' '))\n    for i in range(n):\n        res[i][0] = int(res[i][0])\n        res[i][1] = int(res[i][1])\n        res[i][2] = int(res[i][2])\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][1]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1] and res[i][2] == res[i][0]:\n            res[i][0] = 0\n            res[i][1] = 0\n            res[i][2] = 0\n    for i in range(n):\n        if res[i][0] == res[i][1]"
    },
    {
        "number": 3460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cans = []\n    for i in range(n):\n        x, r = map(int, stdin.split())\n        cans.append((x, r))\n    cans.sort()\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][0] = cans[i+1][0]\n            cans[i+1][0] = -1\n    for i in range(n):\n        if cans[i][0] == cans[i+1][0] and cans[i][1] == cans[i+1][1]:\n            cans[i][1] = cans[i+1][1]\n            cans[i+1][1] = -1"
    },
    {
        "number": 3461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hearings = []\n    for i in range(n):\n        hearings.append(list(map(int, input().split())))\n    hearings.sort(key=lambda x: x[0])\n    hearings.sort(key=lambda x: x[1])\n    hearings.sort(key=lambda x: x[2])\n    hearings.sort(key=lambda x: x[3])\n    hearings.sort(key=lambda x: x[4])\n    hearings.sort(key=lambda x: x[5])\n    hearings.sort(key=lambda x: x[6])\n    hearings.sort(key=lambda x: x[7])\n    hearings.sort(key=lambda x: x[8])\n    hearings.sort(key=lambda x: x[9])\n    hearings.sort(key=lambda x: x[10])\n    hearings.sort(key=lambda x: x[11])\n    hearings.sort(key=lambda x: x[12])\n    hearings.sort(key=lambda x: x[13])\n    hearings.sort(key=lambda x: x[14])\n    hearings.sort(key=lambda x: x[15])\n    hearings.sort(key=lambda x: x[16])\n    hearings.sort(key=lambda x: x[17])\n    hearings.sort(key=lambda x: x[18])\n    hearings.sort(key=lambda x: x[19])\n    hearings.sort(key=lambda x: x[20])\n    hearings.sort(key=lambda x: x[21])\n    hearings.sort(key=lambda x: x[22])\n    hearings.sort(key=lambda x: x[23])\n    hearings.sort(key=lambda x: x[24])\n    hearings.sort(key=lambda x: x[25])\n    hearings.sort(key=lambda x: x[26])\n    hearings.sort(key=lambda x: x[27])\n    hearings.sort(key=lambda x: x[28])\n    hearings.sort(key=lambda x: x[29])\n    hearings.sort(key=lambda x: x[30])\n    hearings.sort(key=lambda x: x[31])\n    hearings.sort(key=lambda x: x[32])\n    hearings.sort(key=lambda x: x[33])\n    hearings.sort(key=lambda x: x[34])\n    hearings.sort(key=lambda x: x[35])\n    hearings.sort(key=lambda x: x[36])\n    hearings.sort(key=lambda x: x[37])\n    hearings.sort(key=lambda x: x[38])\n    hearings.sort(key=lambda x: x[39])\n    hearings.sort(key=lambda x: x[40])\n    hearings.sort(key=lambda x: x[41])\n    hearings.sort(key=lambda x: x[42])\n    hearings.sort(key=lambda x: x[43])\n    hearings.sort(key=lambda x: x[44])\n    hearings.sort(key=lambda x: x[45])\n    hearings.sort(key=lambda x: x[46])\n    hearings.sort(key=lambda x: x[47])\n    hearings.sort(key=lambda x: x[48])\n    hearings.sort(key=lambda x: x[49])\n    hearings.sort(key=lambda x: x[50])\n    hearings.sort(key=lambda x: x[51])\n    hearings.sort(key=lambda x: x[52])\n    hearings.sort(key=lambda x: x[53])\n    hearings.sort(key=lambda x: x[54])\n    hearings.sort(key=lambda x: x[55])\n    hearings.sort(key=lambda x: x[56])\n    hearings.sort(key=lambda x: x[57])\n    hearings.sort(key=lambda x: x[58])\n    hearings.sort(key=lambda x: x[59])\n    hearings.sort(key=lambda x: x[60])\n    hearings.sort(key=lambda x: x[61])\n    hearings.sort(key=lambda x: x[62])\n    hearings.sort(key=lambda x: x[63])\n    hearings.sort(key=lambda x: x[64"
    },
    {
        "number": 3462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin.split()\n    pattern = [x.strip() for x in pattern]\n    pattern = [x for x in pattern if x!= '']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '*']\n    pattern = [x for x in pattern if x!= '?']\n    pattern = [x for x in pattern if x!= '!']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '*']\n    pattern = [x for x in pattern if x!= '?']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x in pattern if x!= '.']\n    pattern = [x for x"
    },
    {
        "number": 3463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    p_i = 1\n    p_i_list = []\n    for i in range(N):\n        p_i_list.append(float(stdin[i]))\n    p_i_list.sort()\n    for i in range(M):\n        if p_i_list[i] > 1:\n            p_i_list[i] = 1\n        elif p_i_list[i] < 0:\n            p_i_list[i] = 0\n        else:\n            p_i_list[i] = p_i_list[i]\n    answer = '{:.6f}'.format(sum(p_i_list)/M)\n    return answer\n\nSample Input:\n1 1\n0.5\nSample Output:\n0.5\ndef"
    },
    {
        "number": 3464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, p = map(float, stdin.split())\n    if x < 100:\n        return str(round(x * (1 - p) + x * p, 3))\n    else:\n        return str(round(x * (1 - p) + x * p, 3))\n\nSample Output:\n0.0\nExplanation:\nThe casino is in a recession. The casino will pay $0.9$ to the first player.\n\n-----Constraints-----\n1 <= x <= 100\n0 <= p <= 1\n\n-----Time Limit-----\nO(n)\n\nn is the number of test cases.\n\nn is the number of test cases.\n\n\"\"\"\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        # n is the number of test cases.\n        \n        # O(n)\n        "
    },
    {
        "number": 3465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    roads = []\n    for _ in range(n):\n        roads.append(list(map(int, stdin.strip().split())))\n    \n    def dfs(i, j, roads):\n        if i == j:\n            return\n        \n        for k in range(i, j):\n            if roads[i][k] == 1 and roads[j][k] == 1:\n                roads[i][k] = 0\n                roads[j][k] = 0\n                dfs(i, k, roads)\n                roads[i][k] = 1\n                roads[j][k] = 1\n                dfs(k, j, roads)\n    \n    dfs(0, 0, roads)\n    return '\\n'.join([' '.join(map(str, row)) for row in roads])\n"
    },
    {
        "number": 3466,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c = 0\n    for i in range(k):\n        if a[i] + b[i] > c:\n            c = a[i] + b[i]\n    return str(c)\n\nSample Output:\n1\nExplanation:\nThe set of sweets is balanced if for every $i$ we have\\[ n f_ i - 1 < s_ i < n f_ i + 1.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3467,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, p, d = map(int, stdin.split())\n    u, v, t_0, p, d = map(int, stdin.split())\n    if u > n or v > m or t_0 > 10**9 or p > 10**9 or d > 10**9:\n        return \"impossible\"\n    if u == 0 and v == 0:\n        return str(t_0)\n    if u == 0:\n        u = n - 1\n    if v == 0:\n        v = m - 1\n    if t_0 == 0:\n        t_0 = 10**9\n    if p == 0:\n        p = 10**9\n    if d == 0:\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == 0:\n        u = n - 1\n    if v == 0:\n        v = m - 1\n    if t_0 == 0:\n        t_0 = 10**9\n    if p == 0:\n        p = 10**9\n    if d == 0:\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == 0:\n        u = n - 1\n    if v == 0:\n        v = m - 1\n    if t_0 == 0:\n        t_0 = 10**9\n    if p == 0:\n        p = 10**9\n    if d == 0:\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == 0:\n        u = n - 1\n    if v == 0:\n        v = m - 1\n    if t_0 == 0:\n        t_0 = 10**9\n    if p == 0:\n        p = 10**9\n    if d == 0:\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == 0:\n        u = n - 1\n    if v == 0:\n        v = m - 1\n    if t_0 == 0:\n        t_0 = 10**9\n    if p == 0:\n        p = 10**9\n    if d == 0:\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == 0:\n        u = n - 1\n    if v == 0:\n        v = m - 1\n    if t_0 == 0:\n        t_0 = 10**9\n    if p == 0:\n        p = 10**9\n    if d == 0:\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == 0:\n        u = n - 1\n    if v == 0:\n        v = m - 1\n    if t_0 == 0:\n        t_0 = 10**9\n    if p == 0:\n        p = 10**9\n    if d == 0:\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == 0:\n        u = n - 1\n    if v == 0:\n        v = m - 1\n    if t_0 == 0:\n        t_0 = 10**9\n    if p == 0:\n        p = 10**9\n    if d == 0:\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        t_0 = 10**9\n        p = 10**9\n        d = 10**9\n    if u == 0:\n        u = n - 1\n    if v == 0:\n        v = m - 1\n    if t_0 == 0:\n        t_0 = 10**9\n    if p == 0:\n        p = 10**9\n    if d == 0:\n        d = 10**9\n    if u == v:\n        u = n - 1\n        v = m - 1\n        "
    },
    {
        "number": 3468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, d, s = map(int, stdin.split())\n    if n > 500:\n        return '1'\n    if c > 10000:\n        return '1'\n    if d > 10000:\n        return '1'\n    if s > 10000:\n        return '1'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '1'\n    if n == 4:\n        return '1'\n    if n == 5:\n        return '1'\n    if n == 6:\n        return '1'\n    if n == 7:\n        return '1'\n    if n == 8:\n        return '1'\n    if n == 9:\n        return '1'\n    if n == 10:\n        return '1'\n    if n == 11:\n        return '1'\n    if n == 12:\n        return '1'\n    if n == 13:\n        return '1'\n    if n == 14:\n        return '1'\n    if n == 15:\n        return '1'\n    if n == 16:\n        return '1'\n    if n == 17:\n        return '1'\n    if n == 18:\n        return '1'\n    if n == 19:\n        return '1'\n    if n == 20:\n        return '1'\n    if n == 21:\n        return '1'\n    if n == 22:\n        return '1'\n    if n == 23:\n        return '1'\n    if n == 24:\n        return '1'\n    if n == 25:\n        return '1'\n    if n == 26:\n        return '1'\n    if n == 27:\n        return '1'\n    if n == 28:\n        return '1'\n    if n == 29:\n        return '1'\n    if n == 30:\n        return '1'\n    if n == 31:\n        return '1'\n    if n == 32:\n        return '1'\n    if n == 33:\n        return '1'\n    if n == 34:\n        return '1'\n    if n == 35:\n        return '1'\n    if n == 36:\n        return '1'\n    if n == 37:\n        return '1'\n    if n == 38:\n        return '1'\n    if n == 39:\n        return '1'\n    if n == 40:\n        return '1'\n    if n == 41:\n        return '1'\n    if n == 42:\n        return '1'\n    if n == 43:\n        return '1'\n    if n == 44:\n        return '1'\n    if n == 45:\n        return '1'\n    if n == 46:\n        return '1'\n    if n == 47:\n        return '1'\n    if n == 48:\n        return '1'\n    if n == 49:\n        return '1'\n    if n == 50:\n        return '1'\n    if n == 51:\n        return '1'\n    if n == 52:\n        return '1'\n    if n == 53:\n        return '1'\n    if n == 54:\n        return '1'\n    if n == 55:\n        return '1'\n    if n == 56:\n        return '1'\n    if n == 57:\n        return '1'\n    if n == 58:\n        return '1'\n    if n == 59:\n        return '1'\n    if n == 60:\n        return '1'\n    if n == 61:\n        return '1'\n    if n == 62:\n        return '1'\n    if n == 63:\n        return '1'\n    if n == 64:\n        return '1'\n    if n == 65:\n        return '1'\n    if n == 66:\n        return '1'\n    if n == 67:\n        return '1'\n    if n == 68:\n        return '1'\n    if n == 69:\n        return '1'\n    if n == 70:\n        return '1'\n    if n == 71:\n        return '1'\n    if n == 72:\n        return '1'\n    if n == 73:\n        return '1'\n    if n == 74:\n        return '1'\n    if n == 75:\n        return '1'\n    if n == 76:\n        return '1'\n    if n == 77:\n        return '1'\n    if n == 78:\n        return '1'\n    if n == 79:\n        return '1'\n    if n == 80:\n        return '1'\n    if n == 81:\n        return '1'\n    if n == 82:\n        return '1'\n    if n == 83:\n        return '1'\n    if n == 84:\n        return '1'\n    if n == 85:\n        return '1'\n    if n == 86:\n        return '1'\n    if n == 87:\n        return '1'\n    if n == 88:\n        return '1'\n    if n == 89:\n        return '1'\n    if n == 90:\n        return '1'\n    if n == 91:\n        return '1'\n    if n == 92:\n        return '1'\n    if n == 93:\n        return '1'\n    if n == 94:\n        return '1'\n    if n == 95:\n        return '1'\n    if n == 96:\n        return '1'\n    if n == 97:\n        return '1'\n    if n == 98:\n        return '1'\n    if n == 99:\n        return '1'\n    if n == 100:\n        return '1'\n    if n == 101:\n        return '1'\n    if n == 102:\n        return '1'\n    if n == 103:\n        return '1'\n    if n == 104:\n        return '1'\n    if n == 105:\n        return '1'\n    if n == 106:\n        return '1'\n    "
    },
    {
        "number": 3469,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    g, k = stdin.split()\n    p = float(k) / float(len(g))\n    if p < 0.5:\n        return 'H'\n    else:\n        return 'T'\n\nSample Output:\n0.5\nExplanation:\nThe probability that a coin flip will result in head $(0 < p < 1)$ is $0.5$.\n\n-----Constraints-----\n1 <= stdin.length <= 20\n1 <= $g$ <= $k$ <= $10^6$\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 GB\n\n-----For doctest\n>>> import sys\n>>> print(solution(sys.stdin.readline()))\n0.5\n>>> \n"
    },
    {
        "number": 3470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i+j)%2 == 0:\n                m += 1\n    return str(m)\n\nSample Input:\n3\nSample Output:\n8\n1 3 5 7 9 11 13 15\ndef"
    },
    {
        "number": 3471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    l, r = map(int, stdin.split())\n    xorbonacci = [0] * (n + 1)\n    xorbonacci[l] = 1\n    xorbonacci[r] = 1\n    for i in range(1, n + 1):\n        xorbonacci[i] = xorbonacci[i - 1] ^ xorbonacci[i - 2]\n    for i in range(q):\n        l, r = map(int, stdin.split())\n        xorbonacci[l] = xorbonacci[l - 1] ^ xorbonacci[r - 1]\n    return ''.join(map(str, xorbonacci[1:]))\n\nSample Output:\n3\n1\n0\ndef"
    },
    {
        "number": 3472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, N = map(int, stdin.split())\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    x1 = abs(x1)\n    y1 = abs(y1)\n    x2 = abs(x2)\n    y2 = abs(y2)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y1 == x2 + y2:\n        return str(N - 1)\n    if x1 + y2 == x2 + y1:\n        return str(N - 1)\n    if x1 + y2 == x2 +"
    },
    {
        "number": 3473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Z = int(stdin.strip())\n    F = int(stdin.strip().split()[1])\n    for i in range(Z):\n        for j in range(F):\n            if i % 4 == 0:\n                if j % 10 == 0:\n                    if j % 2 == 0:\n                        if j % 100 == 0:\n                            print(j)\n                else:\n                    print(j)\n            else:\n                print(j)\n    return ''\n\nSample Output:\nSample Input:\n2\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\nSample Output:\n194\n2019 10 25\n2020 10 30\n\"\"\"\n\ndef"
    },
    {
        "number": 3474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = map(int, stdin.split())\n    if x1 == x2 and y1 == y2:\n        return 'infinity'\n    if x1 == x3 and y1 == y3:\n        return 'infinity'\n    if x1 == x2 and y1!= y3:\n        return 'infinity'\n    if x1 == x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return 'infinity'\n    if x1!= x2 and y1!= y3:\n        return 'infinity'\n    if x1!= x3 and y1!= y2:\n        return"
    },
    {
        "number": 3475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    p = [int(i) for i in stdin.split()]\n    p.sort()\n    s = [0] * n\n    for i in range(n):\n        s[i] = p[i]\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] + s[j] < t:\n                s[i] += s[j]\n    for i in range(n):\n        if s[i] < t:\n            return 'IMPOSSIBLE'\n    return str(s[n-1])\n\nSample Output:\n4\nExplanation:\nThe minimum number of times we have to call for a new type of transportation to visit all $n$ points in the given order is $2$, so the minimum number of times we have to call for a new type of transportation to visit all $n$ points in the given order is $2$.\n\"\"\"\n\ndef"
    },
    {
        "number": 3476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    matrix = []\n    for _ in range(R):\n        matrix.append(list(map(int, stdin.split())))\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] < 10:\n                matrix[i][j] = 0\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] > 0:\n                matrix[i][j] = matrix[i][j] * (-1)\n    for i in range(R):\n"
    },
    {
        "number": 3477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_1 = int(n/2)\n    k_2 = int(n/2)\n    k_3 = int(n/2)\n    E_1 = int(stdin.split()[0])\n    E_2 = int(stdin.split()[1])\n    E_3 = int(stdin.split()[2])\n    E_1 = E_1/k_1\n    E_2 = E_2/k_2\n    E_3 = E_3/k_3\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2\n    E_2 = E_2**2\n    E_3 = E_3**2\n    E_1 = E_1**2"
    },
    {
        "number": 3478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = []\n    for i in range(n):\n        cities.append(list(map(int, stdin.split())))\n    \n    def check(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_2(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_3(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_4(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_5(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_6(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_7(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_8(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_9(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_10(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_11(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_12(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_13(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_14(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_15(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_16(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_17(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_18(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_19(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_20(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_21(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_22(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_23(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_24(cities):\n        for i in range(n):\n            for j in range(n):\n                if cities[i][j]!= cities[j][i]:\n                    return False\n        return True\n    \n    def check_all_25("
    },
    {
        "number": 3479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    t = t[::-1]\n    t = t[:k]\n    t.sort()\n    t = t[::-1]\n    t = t[:n]\n    t.sort()\n    t = t[::-1]\n    return str(sum(t))\n"
    },
    {
        "number": 3480,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, D = map(int, stdin.split())\n    for i in range(L):\n        print(stdin[i], end=\" \")\n    for i in range(L, L + D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + D, L + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D, L + 2 * D + D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + D, L + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D + 2 * D + 2 * D, L + 2 * D + 2 * D + 2 * D + 2 * D):\n        print(stdin[i], end=\" \")\n    print()\n    for i in range(L + 2 * D +"
    },
    {
        "number": 3481,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    gigs = [int(i) for i in stdin.split()]\n    gigs.sort()\n    gigs = [gigs[i] for i in range(len(gigs))]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2!= 0]\n    gigs = [gigs[i] for i in range(len(gigs)) if i % 2 == 0]\n    gigs = [gigs[i] for i in range(len"
    },
    {
        "number": 3482,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n    days.sort()\n    answer = 0\n    for i in range(n):\n        answer += days[i] * (t - i)\n    return str(answer)\n\nSample Input:\n3\n20 15 10\n7 7\n30 0\nSample Output:\n405\ndef"
    },
    {
        "number": 3483,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    w = [int(i) for i in stdin.split()]\n    w.sort()\n    w = w[::-1]\n    w = [w[i] for i in range(n)]\n    w = sum(w)\n    return str(w)\n\nSample Input:\n4\n1 2 4 7\nSample Output:\n28 4 21 14.0\ndef"
    },
    {
        "number": 3484,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    grid = [[int(i) for i in input().split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i][j] - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                for k in range(k):\n                    grid[i][j] = grid[i]["
    },
    {
        "number": 3485,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    deck = list(map(int, stdin.strip().split()))\n    deck.sort()\n    answer = 0\n    for i in range(n):\n        answer += deck[i]\n    return str(answer)\n\nSample Output:\n10.000000000\ndef"
    },
    {
        "number": 3486,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n =="
    },
    {
        "number": 3487,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, v, a = map(int, stdin.split())\n    if n < p or p < n:\n        return \"Invalid Input\"\n    if n == p:\n        return str(v)\n    if n == p - 1:\n        return str(v) + \"-\" + str(a)\n    if n == p - 2:\n        return str(v) + \"-\" + str(a) + \"-\" + str(a)\n    if n == p - 3:\n        return str(v) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a)\n    if n == p - 4:\n        return str(v) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a)\n    if n == p - 5:\n        return str(v) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a)\n    if n == p - 6:\n        return str(v) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a)\n    if n == p - 7:\n        return str(v) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a)\n    if n == p - 8:\n        return str(v) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a)\n    if n == p - 9:\n        return str(v) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a)\n    if n == p - 10:\n        return str(v) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" + str(a) + \"-\" +"
    },
    {
        "number": 3488,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda x: (x[0], x[1]))\n    A = [list(map(lambda x: x[0] + x[1], A))]\n    A = sorted(A, key=lambda"
    },
    {
        "number": 3489,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    passageways = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        passageways.append((a, b))\n    passageways.sort()\n    answer = 0\n    for i in range(n):\n        if i == 0:\n            answer += 1\n            continue\n        if passageways[i][0] < passageways[i-1][0]:\n            answer += 1\n    return str(answer)\n\nSample Output:\n2\n3 2\n3 1\n\"\"\"\n\ndef"
    },
    {
        "number": 3490,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    y = [int(i) for i in stdin.split()]\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x.append(x[0])\n    y.append(y[0])\n    x.append(x[-1])\n    y.append(y[-1])\n    x.sort()\n    y.sort()\n    x."
    },
    {
        "number": 3491,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    button = [list(map(int, input().split())) for _ in range(N)]\n    button = sorted(button, key=lambda x: x[0])\n    button = sorted(button, key=lambda x: x[1])\n    button = sorted(button, key=lambda x: x[2])\n    button = sorted(button, key=lambda x: x[3])\n    button = sorted(button, key=lambda x: x[4])\n    button = sorted(button, key=lambda x: x[5])\n    button = sorted(button, key=lambda x: x[6])\n    button = sorted(button, key=lambda x: x[7])\n    button = sorted(button, key=lambda x: x[8])\n    button = sorted(button, key=lambda x: x[9])\n    button = sorted(button, key=lambda x: x[10])\n    button = sorted(button, key=lambda x: x[11])\n    button = sorted(button, key=lambda x: x[12])\n    button = sorted(button, key=lambda x: x[13])\n    button = sorted(button, key=lambda x: x[14])\n    button = sorted(button, key=lambda x: x[15])\n    button = sorted(button, key=lambda x: x[16])\n    button = sorted(button, key=lambda x: x[17])\n    button = sorted(button, key=lambda x: x[18])\n    button = sorted(button, key=lambda x: x[19])\n    button = sorted(button, key=lambda x: x[20])\n    button = sorted(button, key=lambda x: x[21])\n    button = sorted(button, key=lambda x: x[22])\n    button = sorted(button, key=lambda x: x[23])\n    button = sorted(button, key=lambda x: x[24])\n    button = sorted(button, key=lambda x: x[25])\n    button = sorted(button, key=lambda x: x[26])\n    button = sorted(button, key=lambda x: x[27])\n    button = sorted(button, key=lambda x: x[28])\n    button = sorted(button, key=lambda x: x[29])\n    button = sorted(button, key=lambda x: x[30])\n    button = sorted(button, key=lambda x: x[31])\n    button = sorted(button, key=lambda x: x[32])\n    button = sorted(button, key=lambda x: x[33])\n    button = sorted(button, key=lambda x: x[34])\n    button = sorted(button, key=lambda x: x[35])\n    button = sorted(button, key=lambda x: x[36])\n    button = sorted(button, key=lambda x: x[37])\n    button = sorted(button, key=lambda x: x[38])\n    button = sorted(button, key=lambda x: x[39])\n    button = sorted(button, key=lambda x: x[40])\n    button = sorted(button, key=lambda x: x[41])\n    button = sorted(button, key=lambda x: x[42])\n    button = sorted(button, key=lambda x: x[43])\n    button = sorted(button, key=lambda x: x[44])\n    button = sorted(button, key=lambda x: x[45])\n    button = sorted(button, key=lambda x: x[46])\n    button = sorted(button, key=lambda x: x[47])\n    button = sorted(button, key=lambda x: x[48])\n    button = sorted(button, key=lambda x: x[49])\n    button = sorted(button, key=lambda x: x[50])\n    button = sorted(button, key=lambda x: x[51])\n    button = sorted(button, key=lambda x: x[52])\n    button = sorted(button, key=lambda x: x[53])\n    button = sorted(button, key=lambda x: x[54])\n    button = sorted(button, key=lambda x: x[55])\n    button = sorted(button, key=lambda x: x[56])\n    button = sorted(button, key=lambda x: x[57])\n    button = sorted(button, key=lambda x: x[58])\n    button = sorted(button, key=lambda x: x[59])\n    button = sorted(button, key=lambda x: x[60])\n    button = sorted(button, key=lambda x: x[61])\n    button = sorted(button, key=lambda x: x[62])\n    button = sorted(button, key=lambda x: x[63])\n    button = sorted(button, key=lambda x: x[64])\n    button = sorted(button, key=lambda x: x[65])\n    button = sorted(button, key=lambda x: x[66])\n    button = sorted(button, key=lambda x: x[67])\n    button = sorted(button, key=lambda x: x[68])\n    button = sorted(button, key=lambda x: x[69])\n    button = sorted(button, key=lambda x: x[70])\n    button = sorted(button, key=lambda x: x[71])\n    button = sorted(button, key=lambda x: x[72])\n    button = sorted(button, key=lambda x: x[73"
    },
    {
        "number": 3492,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, f, t = map(int, stdin.split())\n    states = []\n    for _ in range(n):\n        states.append(stdin.split())\n    \n    def get_factory(factory_name):\n        for factory in factories:\n            if factory_name == factory[0]:\n                return factory[1]\n        return None\n    \n    def get_transportation_company(company_name):\n        for company in companies:\n            if company_name == company[0]:\n                return company[1]\n        return None\n    \n    def get_state(state_name):\n        for state in states:\n            if state[0] == state_name:\n                return state[1]\n        return None\n    \n    def get_factory_site(factory_site_name):\n        for factory in factories:\n            if factory_site_name == factory[0]:\n                return factory[1]\n        return None\n    \n    def get_transportation_company_site(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[1]\n        return None\n    \n    def get_transportation_company_site_name(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0]\n        return None\n    \n    def get_transportation_company_site_name_and_factory(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1]\n        return None\n    \n    def get_transportation_company_site_name_and_factory_site(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1], company[2]\n        return None\n    \n    def get_transportation_company_site_name_and_factory_site_name(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1], company[2], company[3]\n        return None\n    \n    def get_transportation_company_site_name_and_factory_site_name_and_factory(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1], company[2], company[3], company[4]\n        return None\n    \n    def get_transportation_company_site_name_and_factory_site_name_and_factory_site(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1], company[2], company[3], company[4], company[5]\n        return None\n    \n    def get_transportation_company_site_name_and_factory_site_name_and_factory_site_name(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1], company[2], company[3], company[4], company[5], company[6]\n        return None\n    \n    def get_transportation_company_site_name_and_factory_site_name_and_factory_site_name_and_factory(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1], company[2], company[3], company[4], company[5], company[6], company[7]\n        return None\n    \n    def get_transportation_company_site_name_and_factory_site_name_and_factory_site_name_and_factory_site(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1], company[2], company[3], company[4], company[5], company[6], company[7], company[8]\n        return None\n    \n    def get_transportation_company_site_name_and_factory_site_name_and_factory_site_name_and_factory_site_name(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1], company[2], company[3], company[4], company[5], company[6], company[7], company[8], company[9]\n        return None\n    \n    def get_transportation_company_site_name_and_factory_site_name_and_factory_site_name_and_factory_site_name_and_factory_site_name(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1], company[2], company[3], company[4], company[5], company[6], company[7], company[8], company[9], company[10]\n        return None\n    \n    def get_transportation_company_site_name_and_factory_site_name_and_factory_site_name_and_factory_site_name_and_factory_site_name_and_factory_site_name(company_site_name):\n        for company in companies:\n            if company_site_name == company[0]:\n                return company[0], company[1], company[2], company[3], company[4], company[5], company[6], company[7], company[8], company[9], company[10], company[11]\n        return None\n    \n"
    },
    {
        "number": 3493,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    answer = 0\n    for i in range(n):\n        line = stdin.strip().split()\n        if line[0] == 'Y':\n            answer += 1\n    return str(answer)\n\nSample Output:\n2\n1 2 3\n3 1 2\ndef"
    },
    {
        "number": 3494,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    G = [[0] * (R + 1) for _ in range(R + 1)]\n    for i in range(S):\n        r, s = map(int, stdin.split())\n        G[r][s] = 1\n    for i in range(1, R + 1):\n        for j in range(1, R + 1):\n            G[i][j] = G[i][j - 1] + G[i - 1][j] - G[i - 1][j - 1]\n    return str(G[R][S])\n\nSample Input:\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\nSample Output:\n4\n0\n5\ndef"
    },
    {
        "number": 3495,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    L = list(map(int, stdin.strip().split()))\n    x, y = L[0], L[1]\n    x_i, y_i = L[2], L[3]\n    x_i = abs(x_i)\n    y_i = abs(y_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i = y_i, x_i\n    if x_i > y_i:\n        x_i, y_i = y_i, x_i\n    if x_i == y_i:\n        return str(x_i)\n    if x_i < y_i:\n        x_i, y_i"
    },
    {
        "number": 3496,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a"
    },
    {
        "number": 3497,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, P = map(int, stdin.split())\n    graph = [[] for _ in range(V)]\n    for _ in range(P):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def dfs(u):\n        if u == V - 1:\n            return 0\n        \n        res = 0\n        for v in graph[u]:\n            res += dfs(v)\n        return res\n    \n    return str(dfs(0))"
    },
    {
        "number": 3498,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tasks = []\n    for i in range(0, len(stdin)):\n        tasks.append(list(map(int, stdin[i].split())))\n    \n    tasks.sort(key=lambda x: x[0])\n    \n    result = ''\n    for i in range(0, len(tasks)):\n        if i == 0:\n            result += str(tasks[i][0]) +''\n        else:\n            result += str(tasks[i][0]) +'' + str(tasks[i][1]) +''\n    \n    return result\n\nSample Output:\n106\n107\n\"\"\"\n\ndef"
    },
    {
        "number": 3499,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin[1:-1].split()\n    S.sort()\n    for i in range(N):\n        if S[i] == S[N-i-1]:\n            return S[i]\n    return '0'\n\nSample Input:\n2\nAA\nSample Output:\n0\ndef"
    },
    {
        "number": 3500,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cards = [list(map(int, input().split())) for _ in range(n)]\n    cards.sort()\n    for i in range(n):\n        if cards[i][0] == cards[i][1]:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n        else:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n    for i in range(n):\n        if cards[i][0] == cards[i][1]:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n        else:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n    for i in range(n):\n        if cards[i][0] == cards[i][1]:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n        else:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n    for i in range(n):\n        if cards[i][0] == cards[i][1]:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n        else:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n    for i in range(n):\n        if cards[i][0] == cards[i][1]:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n        else:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n    for i in range(n):\n        if cards[i][0] == cards[i][1]:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n        else:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n    for i in range(n):\n        if cards[i][0] == cards[i][1]:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n        else:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n    for i in range(n):\n        if cards[i][0] == cards[i][1]:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n        else:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n    for i in range(n):\n        if cards[i][0] == cards[i][1]:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n        else:\n            cards[i][0] = cards[i][0] + cards[i][1]\n            cards[i][1] = cards[i][1] + cards[i][0]\n    for i in range(n):\n        if cards[i][0] == cards[i][1]:\n            cards[i][0] = cards[i][0] + cards[i][1]\n"
    },
    {
        "number": 3501,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1 = int(stdin.strip().split()[0])\n    a_2 = int(stdin.strip().split()[1])\n    a_3 = int(stdin.strip().split()[2])\n    a_1_2 = a_1 + a_2\n    a_1_3 = a_1 + a_3\n    a_2_3 = a_2 + a_3\n    a_1_2_3 = a_1_2 + a_2_3\n    a_1_3_2 = a_1_3 + a_2_3\n    a_1_3_3 = a_1_3 + a_3_2\n    a_1_3_2_3 = a_1_3_2 + a_3_3\n    a_1_3_3_2 = a_1_3_3 + a_2_3\n    a_1_3_2_3_3 = a_1_3_2_3 + a_3_3\n    a_1_3_2_3_2 = a_1_3_2_3_3 + a_2_3\n    a_1_3_2_3_3_2 = a_1_3_2_3_2 + a_3_2\n    a_1_3_2_3_3_3 = a_1_3_2_3_3_3 + a_2_3\n    a_1_3_2_3_2_3 = a_1_3_2_3_2_3 + a_3_3\n    a_1_3_2_3_2_3_2 = a_1_3_2_3_2_3_2 + a_2_3\n    a_1_3_2_3_2_3_3 = a_1_3_2_3_2_3_3 + a_3_3\n    a_1_3_2_3_2_3_2_3 = a_1_3_2_3_2_3_2_3 + a_2_3\n    a_1_3_2_3_2_3_3_3 = a_1_3_2_3_2_3_3_3 + a_3_3\n    a_1_3_2_3_2_3_2_3_3_3 = a_1_3_2_3_2_3_2_3_3 + a_2_3\n    a_1_3_2_3_2_3_2_3_3_3_3 = a_1_3_2_3_2_3_2_3_3_3 + a_3_3\n    a_1_3_2_3_2_3_2_3_3_3_3_3 = a_1_3_2_3_2_3_2_3_3_3 + a_2_3\n    a_1_3_2_3_2_3_2_3_3_3_3_3_3 = a_1_3_2_3_2_3_2_3_3_3 + a_3_3\n    a_1_3_2_3_2_3_2_3_3_3_3_3_3_3 = a_1_3_2_3_2_3_2_3_3_3_3 + a_2_3\n    a_1_3_2_3_2_3_2_3_3_3_3_3_3_3_3 = a_1_3_2_3_2_3_2_3_3_3_3 + a_3_3\n    a_1_3_2_3_2_3_2_3_3_3_3_3_3_3_3_3 = a_1_3_2_3_2_3_2_3_3_3_3_3 + a_2_3\n    a_1_3_2_3_2_3_2_3_3_3_3_3_3_3_3_3_3 = a_1_3_2_3_2_3_2_3_3_3_3_3_3 + a_3_3\n    a_1_3_2_3_2_3_2_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_3_"
    },
    {
        "number": 3502,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(i) for i in stdin.split()]\n    r = [int(i) for i in stdin.split()]\n    g = [int(i) for i in stdin.split()]\n    r.sort()\n    g.sort()\n    r.append(r[0])\n    g.append(g[0])\n    r.append(r[-1])\n    g.append(g[-1])\n    r.append(r[-1] + g[-1])\n    r.sort()\n    g.sort()\n    r.append(r[0] + g[0])\n    g.append(g[0] + r[0])\n    r.append(r[-1] + g[-1])\n    g.append(g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1])\n    r.sort()\n    g.sort()\n    r.append(r[0] + g[0] + r[-1] + g[-1])\n    g.append(g[0] + r[0] + r[-1] + g[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g[-1] + r[-1])\n    r.append(r[-1] + g[-1] + r[-1] + g[-1] + r[-1] + g["
    },
    {
        "number": 3503,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i]!= b[i]:\n            return 'impossible'\n    return ''.join(map(str, a))\n\nSample Output:\n1 + 5 = 6\n3 * 3 = 9\n4 - 5 = -1\n-1 - -6 = 5\n"
    },
    {
        "number": 3504,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, S = map(int, stdin.split())\n    x_1, x_2 = map(int, stdin.split())\n    y_1 = x_1 - x_2\n    y_2 = y_1 - S\n    if y_1 == 0:\n        return '0'\n    if y_2 == 0:\n        return '0'\n    if y_1 == y_2:\n        return '0'\n    if y_1 < 0:\n        y_1 = -y_1\n    if y_2 < 0:\n        y_2 = -y_2\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 == 0:\n        return '0'\n    if y_2 == 0:\n        return '0'\n    if y_1 == y_2:\n        return '0'\n    if y_1 < 0:\n        y_1 = -y_1\n    if y_2 < 0:\n        y_2 = -y_2\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 == 0:\n        return '0'\n    if y_2 == 0:\n        return '0'\n    if y_1 == y_2:\n        return '0'\n    if y_1 < 0:\n        y_1 = -y_1\n    if y_2 < 0:\n        y_2 = -y_2\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 == 0:\n        return '0'\n    if y_2 == 0:\n        return '0'\n    if y_1 == y_2:\n        return '0'\n    if y_1 < 0:\n        y_1 = -y_1\n    if y_2 < 0:\n        y_2 = -y_2\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 == 0:\n        return '0'\n    if y_2 == 0:\n        return '0'\n    if y_1 == y_2:\n        return '0'\n    if y_1 < 0:\n        y_1 = -y_1\n    if y_2 < 0:\n        y_2 = -y_2\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 == 0:\n        return '0'\n    if y_2 == 0:\n        return '0'\n    if y_1 == y_2:\n        return '0'\n    if y_1 < 0:\n        y_1 = -y_1\n    if y_2 < 0:\n        y_2 = -y_2\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 == 0:\n        return '0'\n    if y_2 == 0:\n        return '0'\n    if y_1 == y_2:\n        return '0'\n    if y_1 < 0:\n        y_1 = -y_1\n    if y_2 < 0:\n        y_2 = -y_2\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 == 0:\n        return '0'\n    if y_2 == 0:\n        return '0'\n    if y_1 == y_2:\n        return '0'\n    if y_1 < 0:\n        y_1 = -y_1\n    if y_2 < 0:\n        y_2 = -y_2\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 == 0:\n        return '0'\n    if y_2 == 0:\n        return '0'\n    if y_1 == y_2:\n        return '0'\n    if y_1 < 0:\n        y_1 = -y_1\n    if y_2 < 0:\n        y_2 = -y_2\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if y_1 == 0:\n        return '0'\n    if y_2 == 0:\n        return '0'\n    if y_1 == y_2:\n        return '0'"
    },
    {
        "number": 3505,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] - a[i] == a[i] - a[j]:\n                dp[i] += dp[j]\n    return str(dp[n - 1])\n\ndef"
    },
    {
        "number": 3506,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, m = map(int, stdin.split())\n    if n > m:\n        n, m = m, n\n    if t > 60:\n        t = 60\n    if t > 90:\n        t = 90\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180\n    if t > 180:\n        t = 180"
    },
    {
        "number": 3507,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:\n        return \"130\"\n    if n == 131:\n        return \"131\"\n    if n == 132:\n        return \"132\"\n    if n == 133:\n        return \"133\"\n    if n =="
    },
    {
        "number": 3508,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    b = [int(i) for i in stdin.split()]\n    b.sort()\n    answer = 0\n    for i in range(n):\n        if i == 0:\n            answer += b[i]\n        else:\n            answer += b[i] - b[i-1]\n    return str(answer)\n\nSample Output:\n3\nExplanation:\nThe pillars are numbered 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\nThe maximal damage is 3.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3509,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    u, v, t = map(int, stdin.split())\n    \n    if n == 0 and m == 0:\n        return 'inf'\n    \n    if n == 0:\n        return 'inf'\n    \n    if m == 0:\n        return 'inf'\n    \n    if n == 0:\n        return 'inf'\n    \n    if t == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return 'inf'\n    \n    if u == 0:\n        return 'inf'\n    \n    if v == 0:\n        return"
    },
    {
        "number": 3510,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    board = [list(stdin.strip()) for _ in range(n)]\n    answer = []\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(m):\n        for j in range(n):\n            if board[j][i] == 'a':\n                answer.append(1)\n            elif board[j][i] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)\n    answer = sorted(answer)\n    answer = answer[::-1]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'a':\n                answer.append(1)\n            elif board[i][j] == 'b':\n                answer.append(2)\n            else:\n                answer.append(-1)"
    },
    {
        "number": 3511,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    A = [0] * (N + 1)\n    B = [0] * (N + 1)\n    for i in range(1, N + 1):\n        A[i] = A[i - 1] * 2\n        B[i] = B[i - 1] * 2 + 1\n    for i in range(Q):\n        u, v = map(int, stdin.split())\n        A[u] = A[u] * 2\n        B[v] = B[v] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N + 1):\n        A[i] = A[i] * 2\n        B[i] = B[i] * 2 + 1\n    for i in range(1, N"
    },
    {
        "number": 3512,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    B = list(map(int, stdin.strip().split()))\n    A.sort()\n    B.sort()\n    A.append(0)\n    B.append(0)\n    for i in range(1, N):\n        A[i] = A[i - 1] + B[i - 1]\n        B[i] = B[i - 1] + A[i]\n    return str(min(A[-1], B[-1]))\n\n-----Example 1-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0.\n\n-----Example 2-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2.\n\n-----Example 3-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2.\n\n-----Example 4-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2, and city 3 is visited before city 3.\n\n-----Example 5-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2, and city 3 is visited before city 3.\n\n-----Example 6-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2, and city 3 is visited before city 3.\n\n-----Example 7-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2, and city 3 is visited before city 3.\n\n-----Example 8-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2, and city 3 is visited before city 3.\n\n-----Example 9-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2, and city 3 is visited before city 3.\n\n-----Example 10-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2, and city 3 is visited before city 3.\n\n-----Example 11-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2, and city 3 is visited before city 3.\n\n-----Example 12-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2, and city 3 is visited before city 3.\n\n-----Example 13-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n7\nExplanation:\nThe shortest flight duration is 7, because the city with label 5 is visited before city 0, and city 4 is visited after city 0, and city 3 is visited before city 2, and city 4 is visited after city 2, and city 3 is visited before city 3.\n\n-----Example 14-----\nInput:\n3\n0 5 2\n5 0 4\n2 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\n3 4 0\nOutput:\n"
    },
    {
        "number": 3513,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    k = 0\n    while X > 0:\n        X = X // 10\n        k += 1\n    return str(k)\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n1\n\nSample Input:\n1\nSample Output:\n"
    },
    {
        "number": 3514,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    grid = []\n    for _ in range(R):\n        grid.append(list(stdin.split()))\n    \n    def get_bombs(x, y):\n        return sum(1 for i in range(x, x+C) if grid[i][y] == 'x')\n    \n    def get_bombs_in_row(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_col(x, y):\n        return sum(1 for i in range(y, y+C) if grid[i][y] == 'x')\n    \n    def get_bombs_in_grid(x, y):\n        return sum(1 for i in range(x, x+C) if grid[i][y] == 'x')\n    \n    def get_bombs_in_grid_in_row(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_col(x, y):\n        return sum(1 for i in range(y, y+C) if grid[i][y] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid_in_row(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid_in_row_in_col(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid(x, y):\n        return sum(1 for i in range(x, x+C) if grid[x][i] == 'x')\n    \n    def get_bombs_in_grid_in_row_in_col_in_grid_in_row_in_col_in_grid_in_row_in_col_in_"
    },
    {
        "number": 3515,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cities = [list(map(int, input().split())) for _ in range(n)]\n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            answer += cities[i][j] - cities[j][i]\n    return str(answer)\n\nSample Output:\n9\n-1\n5\n6\n"
    },
    {
        "number": 3516,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    items = [int(i) for i in stdin.split()]\n    items.sort()\n    answer = 0\n    for i in range(n):\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i]\n        answer += items[i"
    },
    {
        "number": 3517,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i"
    },
    {
        "number": 3518,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p, q, c = map(int, stdin.split())\n    pq = p * q\n    cq = c * q\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq > cq:\n        return 'impossible'\n    if pq < cq:\n        return 'impossible'\n    if pq == cq:\n        return 'impossible'\n    if pq == cq:\n        return '"
    },
    {
        "number": 3519,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return str(N//2)\n    else:\n        return str(N//2 + 1)\n\nSample Input:\n2\nSample Output:\n1.000000000\ndef"
    },
    {
        "number": 3520,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, c = map(int, stdin.split())\n    t = map(int, stdin.split())\n    x = map(int, stdin.split())\n    y = map(int, stdin.split())\n    \n    def solution(n, p, c):\n        if n == 0:\n            return 0\n        if n == 1:\n            return c\n        if n == 2:\n            return c + p\n        \n        if n == 3:\n            return c + p + p\n        \n        if n == 4:\n            return c + p + p + p\n        \n        if n == 5:\n            return c + p + p + p + p\n        \n        if n == 6:\n            return c + p + p + p + p + p\n        \n        if n == 7:\n            return c + p + p + p + p + p + p\n        \n        if n == 8:\n            return c + p + p + p + p + p + p + p\n        \n        if n == 9:\n            return c + p + p + p + p + p + p + p + p\n        \n        if n == 10:\n            return c + p + p + p + p + p + p + p + p + p\n        \n        if n == 11:\n            return c + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 12:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 13:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 14:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 15:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 16:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 17:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 18:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 19:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 20:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 21:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 22:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 23:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 24:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 25:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 26:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 27:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 28:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 29:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 30:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 31:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 32:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 33:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 34:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 35:\n            return c + p + p + p + p + p + p + p + p + p + p + p + p + p + p + p\n        \n        if n == 36:\n            return c + p + p + p + p + p"
    },
    {
        "number": 3521,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, s, a = map(int, stdin.split())\n    if T > s:\n        T = T - s\n    if T < 0:\n        T = T + s\n    if T < 0:\n        T = T + 2 * s\n    if T < 0:\n        T = T + 3 * s\n    if T < 0:\n        T = T + 4 * s\n    if T < 0:\n        T = T + 5 * s\n    if T < 0:\n        T = T + 6 * s\n    if T < 0:\n        T = T + 7 * s\n    if T < 0:\n        T = T + 8 * s\n    if T < 0:\n        T = T + 9 * s\n    if T < 0:\n        T = T + 10 * s\n    if T < 0:\n        T = T + 11 * s\n    if T < 0:\n        T = T + 12 * s\n    if T < 0:\n        T = T + 13 * s\n    if T < 0:\n        T = T + 14 * s\n    if T < 0:\n        T = T + 15 * s\n    if T < 0:\n        T = T + 16 * s\n    if T < 0:\n        T = T + 17 * s\n    if T < 0:\n        T = T + 18 * s\n    if T < 0:\n        T = T + 19 * s\n    if T < 0:\n        T = T + 20 * s\n    if T < 0:\n        T = T + 21 * s\n    if T < 0:\n        T = T + 22 * s\n    if T < 0:\n        T = T + 23 * s\n    if T < 0:\n        T = T + 24 * s\n    if T < 0:\n        T = T + 25 * s\n    if T < 0:\n        T = T + 26 * s\n    if T < 0:\n        T = T + 27 * s\n    if T < 0:\n        T = T + 28 * s\n    if T < 0:\n        T = T + 29 * s\n    if T < 0:\n        T = T + 30 * s\n    if T < 0:\n        T = T + 31 * s\n    if T < 0:\n        T = T + 32 * s\n    if T < 0:\n        T = T + 33 * s\n    if T < 0:\n        T = T + 34 * s\n    if T < 0:\n        T = T + 35 * s\n    if T < 0:\n        T = T + 36 * s\n    if T < 0:\n        T = T + 37 * s\n    if T < 0:\n        T = T + 38 * s\n    if T < 0:\n        T = T + 39 * s\n    if T < 0:\n        T = T + 40 * s\n    if T < 0:\n        T = T + 41 * s\n    if T < 0:\n        T = T + 42 * s\n    if T < 0:\n        T = T + 43 * s\n    if T < 0:\n        T = T + 44 * s\n    if T < 0:\n        T = T + 45 * s\n    if T < 0:\n        T = T + 46 * s\n    if T < 0:\n        T = T + 47 * s\n    if T < 0:\n        T = T + 48 * s\n    if T < 0:\n        T = T + 49 * s\n    if T < 0:\n        T = T + 50 * s\n    if T < 0:\n        T = T + 51 * s\n    if T < 0:\n        T = T + 52 * s\n    if T < 0:\n        T = T + 53 * s\n    if T < 0:\n        T = T + 54 * s\n    if T < 0:\n        T = T + 55 * s\n    if T < 0:\n        T = T + 56 * s\n    if T < 0:\n        T = T + 57 * s\n    if T < 0:\n        T = T + 58 * s\n    if T < 0:\n        T = T + 59 * s\n    if T < 0:\n        T = T + 60 * s\n    if T < 0:\n        T = T + 61 * s\n    if T < 0:\n        T = T + 62 * s\n    if T < 0:\n        T = T + 63 * s\n    if T < 0:\n        T = T + 64 * s\n    if T < 0:\n        T = T + 65 * s\n    if T < 0:\n        T = T + 66 * s\n    if T < 0:\n        T = T + 67 * s\n    if T < 0:\n        T = T + 68 * s\n    if T < 0:\n        T = T + 69 * s\n    if T < 0:\n        T = T + 70 * s\n    if T < 0:\n        T = T + 71 * s\n    if T < 0:\n        T = T + 72 * s\n    if T < 0:\n        T = T + 73 * s\n    if T < 0:\n        T = T + 74 * s\n    if T < 0:\n        T = T + 75 * s\n    if T < 0:\n        T = T + 76 * s\n    if T < 0:\n        T = T + 77 * s\n    if T < 0:\n        T = T + 78 * s\n    if T < 0:\n        T = T + 79 * s\n    if T < 0:\n        T = T + 80 * s\n    if T < 0:\n        T = T + 81 * s\n    if T < 0:\n        T = T + 82 * s\n    if T < 0:\n        T = T + 83 * s\n    if T < 0:\n        T = T + 84 * s\n    if T < 0:\n        T = T + 85 * s\n    if T < 0:\n        T = T + 86 * s\n    if T < 0:\n        T = T + 87 * s\n    if T < 0:\n        T = T + 88 * s\n    if T < 0:\n        T = T + 89 * s\n    if T < 0:\n        T = T + 90 * s\n    if T < 0:\n        T = T + 91 * s\n    if T < 0:\n        T = T + 92 * s\n    if T < 0:\n        T = T + 93 * s\n    if T < 0:\n        T = T + 94 * s\n    if T < 0:\n        T = T + 95 * s\n    if T < 0:\n        T = T + 96 * s\n    if T < 0:\n        T = T +"
    },
    {
        "number": 3522,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    batteries = [int(i) for i in stdin.split()]\n    batteries.sort()\n    d = 0\n    for i in range(n):\n        d += batteries[i]\n        if d > k:\n            return str(d)\n    return str(d)\n\nSample Output:\n1\nExplanation:\nThe machines are $2$ machines, each requiring $3$ batteries per chip, and a supply of batteries with power outputs $1, 3, 5$ to the other machine of the same machine. The power outputs of the machines are $1, 3, 5$ and $7$, respectively, and the difference between power outputs is $1$ in both machines.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3523,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    coins = [int(i) for i in stdin.split()]\n    coins.sort()\n    coins = coins[::-1]\n    coins = coins[:n]\n    coins.sort()\n    coins = coins[::-1]\n    return str(sum(coins))\n\nSample Input:\n5\n1 2 1 1 1 1\nSample Output:\n1\nExplanation:\n1 + 1 + 1 + 1 = 5\n\"\"\"\n\ndef"
    },
    {
        "number": 3524,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s_1 = s[0]\n    s_2 = s[1]\n    s_1 = s_1.lower()\n    s_2 = s_2.lower()\n    s_1 = s_1.replace('a', '1').replace('b', '2').replace('c', '3').replace('d', '4').replace('e', '5').replace('f', '6').replace('g', '7').replace('h', '8').replace('i', '9').replace('j', '10').replace('k', '11').replace('l', '12').replace('m', '13').replace('n', '14').replace('o', '15').replace('p', '16').replace('q', '17').replace('r', '18').replace('s', '19').replace('t', '20').replace('u', '21').replace('v', '22').replace('w', '23').replace('x', '24').replace('y', '25').replace('z', '26').replace(' ','')\n    s_2 = s_2.lower()\n    s_1 = s_1.replace('a', '1').replace('b', '2').replace('c', '3').replace('d', '4').replace('e', '5').replace('f', '6').replace('g', '7').replace('h', '8').replace('i', '9').replace('j', '10').replace('k', '11').replace('l', '12').replace('m', '13').replace('n', '14').replace('o', '15').replace('p', '16').replace('q', '17').replace('r', '18').replace('s', '19').replace('t', '20').replace('u', '21').replace('v', '22').replace('w', '23').replace('x', '24').replace('y', '25').replace('z', '26').replace(' ','')\n    if s_1 == s_2:\n        return 'yes'\n    else:\n        return 'no'\n"
    },
    {
        "number": 3525,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L, B = map(int, stdin.split())\n    S, D = map(int, stdin.split())\n    \n    def is_valid(a, b, x, y):\n        return (a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and b <= N and a <= N and"
    },
    {
        "number": 3526,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l_i, r_i = map(int, stdin.split())\n    l_i = l_i - 1\n    r_i = r_i - 1\n    answer = 0\n    for i in range(n):\n        if stdin[i] == '0':\n            answer += 1\n        else:\n            answer += 1\n            if answer == m:\n                answer = 0\n                break\n    return str(answer)\n\nSample Output:\n4\nExplanation:\nIn the first sample, the four possible sequences consistent with the hints are 00000, 10000, 01111, and 11111 where 0 stands for a \u201cfalse\u201d answer and 1 stands for a \u201ctrue\u201d answer. In the second sample, the third hint conflicts with the first two hints, so no answer sequence exists consistent with all hints.\n\nSample Input:\n5 2\n2 4 same\n3 5 same\nSample Output:\n4\nExplanation:\nIn the first sample, the four possible sequences consistent with the hints are 00000, 10000, 01111, and 11111 where 0 stands for a \u201cfalse\u201d answer and 1 stands for a \u201ctrue\u201d answer. In the second sample, the third hint conflicts with the first two hints, so no answer sequence exists consistent with all hints.\n\nSample Input:\n5 2\n2 4 same\n3 5 same\nSample Output:\n4\nExplanation:\nIn the first sample, the four possible sequences consistent with the hints are 00000, 10000, 01111, and 11111 where 0 stands for a \u201cfalse\u201d answer and 1 stands for a \u201ctrue\u201d answer. In the second sample, the third hint conflicts with the first two hints, so no answer sequence exists consistent with all hints.\n\n\"\"\""
    },
    {
        "number": 3527,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, e = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    e = list(map(int, stdin.split()))\n    e.sort()\n    answer = 0\n    for i in range(len(c)):\n        for j in range(i+1, len(c)):\n            if c[i] + c[j] == e[i] + e[j]:\n                answer = max(answer, j-i)\n    return str(answer)\n"
    },
    {
        "number": 3528,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    numbers = []\n    for i in range(n):\n        numbers.append(list(map(int, input().split())))\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 1:\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 2:\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 3:\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 4:\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 'U':\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 'D':\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 'U':\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 'D':\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 'U':\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 'D':\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 'U':\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 'D':\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 'U':\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 'D':\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 'U':\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 'D':\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 'U':\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 'D':\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 'U':\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 'D':\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 'U':\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 'D':\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers[i][j] == 'U':\n                numbers[i][j] = 'U'\n            elif numbers[i][j] == 'D':\n                numbers[i][j] = 'D'\n    \n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] == 'L':\n                numbers[i][j] = 'L'\n            elif numbers[i][j] == 'R':\n                numbers[i][j] = 'R'\n            elif numbers"
    },
    {
        "number": 3529,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    \n    def dfs(start, visited):\n        visited[start] = True\n        for next in graph[start]:\n            if not visited[next[0]]:\n                dfs(next[0], visited)\n    \n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited)\n    \n    if k == 0:\n        return '0'\n    \n    for i in range(n):\n        if not visited[i]:\n            return '0'\n    \n    return '1'\n"
    },
    {
        "number": 3530,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    t = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    t.sort()\n    for i in range(n):\n        if t[i] < a[i] or t[i] < b[i]:\n            print(0)\n            return\n        else:\n            print(a[i] - (t[i] - a[i])**2)\n            return\n"
    },
    {
        "number": 3531,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, w = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        return -1\n    if a == b or b == c or a == b or b == a:\n        "
    },
    {
        "number": 3532,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))\n\nSample Input:\nmirkovC4nizCC44\nC4\nSample Output:\nC4\nExplanation:\nmirkovC4nizCC44\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\nC4\n"
    },
    {
        "number": 3533,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    tickets = []\n    for i in range(n):\n        tickets.append(list(map(int, stdin.split())))\n    tickets.sort(key=lambda x: x[0])\n    tickets.sort(key=lambda x: x[1])\n    tickets.sort(key=lambda x: x[2])\n    tickets.sort(key=lambda x: x[3])\n    tickets.sort(key=lambda x: x[4])\n    tickets.sort(key=lambda x: x[5])\n    tickets.sort(key=lambda x: x[6])\n    tickets.sort(key=lambda x: x[7])\n    tickets.sort(key=lambda x: x[8])\n    tickets.sort(key=lambda x: x[9])\n    tickets.sort(key=lambda x: x[10])\n    tickets.sort(key=lambda x: x[11])\n    tickets.sort(key=lambda x: x[12])\n    tickets.sort(key=lambda x: x[13])\n    tickets.sort(key=lambda x: x[14])\n    tickets.sort(key=lambda x: x[15])\n    tickets.sort(key=lambda x: x[16])\n    tickets.sort(key=lambda x: x[17])\n    tickets.sort(key=lambda x: x[18])\n    tickets.sort(key=lambda x: x[19])\n    tickets.sort(key=lambda x: x[20])\n    tickets.sort(key=lambda x: x[21])\n    tickets.sort(key=lambda x: x[22])\n    tickets.sort(key=lambda x: x[23])\n    tickets.sort(key=lambda x: x[24])\n    tickets.sort(key=lambda x: x[25])\n    tickets.sort(key=lambda x: x[26])\n    tickets.sort(key=lambda x: x[27])\n    tickets.sort(key=lambda x: x[28])\n    tickets.sort(key=lambda x: x[29])\n    tickets.sort(key=lambda x: x[30])\n    tickets.sort(key=lambda x: x[31])\n    tickets.sort(key=lambda x: x[32])\n    tickets.sort(key=lambda x: x[33])\n    tickets.sort(key=lambda x: x[34])\n    tickets.sort(key=lambda x: x[35])\n    tickets.sort(key=lambda x: x[36])\n    tickets.sort(key=lambda x: x[37])\n    tickets.sort(key=lambda x: x[38])\n    tickets.sort(key=lambda x: x[39])\n    tickets.sort(key=lambda x: x[40])\n    tickets.sort(key=lambda x: x[41])\n    tickets.sort(key=lambda x: x[42])\n    tickets.sort(key=lambda x: x[43])\n    tickets.sort(key=lambda x: x[44])\n    tickets.sort(key=lambda x: x[45])\n    tickets.sort(key=lambda x: x[46])\n    tickets.sort(key=lambda x: x[47])\n    tickets.sort(key=lambda x: x[48])\n    tickets.sort(key=lambda x: x[49])\n    tickets.sort(key=lambda x: x[50])\n    tickets.sort(key=lambda x: x[51])\n    tickets.sort(key=lambda x: x[52])\n    tickets.sort(key=lambda x: x[53])\n    tickets.sort(key=lambda x: x[54])\n    tickets.sort(key=lambda x: x[55])\n    tickets.sort(key=lambda x: x[56])\n    tickets.sort(key=lambda x: x[57])\n    tickets.sort(key=lambda x: x[58])\n    tickets.sort(key=lambda x: x[59])\n    tickets.sort(key=lambda x: x[60])\n    tickets.sort(key=lambda x: x[61])\n    tickets.sort(key=lambda x: x[62])\n    tickets.sort(key=lambda x: x[63])\n    tickets.sort(key=lambda x: x[64])\n    tickets.sort(key=lambda x: x[65])\n    tickets.sort(key=lambda x: x[66])\n    tickets.sort(key=lambda x: x[67])\n    tickets.sort(key=lambda x: x[68])\n    tickets.sort(key=lambda x: x[69])\n    tickets.sort(key=lambda x: x[70])\n    tickets.sort(key=lambda x: x[71])\n    tickets.sort(key=lambda x: x[72])\n    tickets.sort(key=lambda x: x[73])\n    tickets.sort(key=lambda x: x[74])\n    tickets.sort(key=lambda x: x[75])\n    tickets.sort(key=lambda x: x[76])\n    tickets.sort(key=lambda x: x[77])\n    tickets.sort(key=lambda x: x[78])\n    tickets.sort(key=lambda x: x[79])\n    tickets.sort(key=lambda x: x[80])\n    tickets.sort(key=lambda x: x[81])\n    tickets.sort(key=lambda x: x[82])\n    tickets.sort(key=lambda x: x[83])\n    tickets.sort(key=lambda x: x[84])\n    tickets.sort(key=lambda x: x[85])\n    tickets.sort(key=lambda x: x[86])\n    tickets.sort(key=lambda x: x[87])\n    tickets.sort(key=lambda x: x[88])\n    tickets.sort(key=lambda x: x[89])\n    tickets.sort(key=lambda x: x[90])\n    tickets.sort(key=lambda x: x[91])\n    tickets.sort(key=lambda x: x[92])\n    tickets.sort(key=lambda x: x[93])\n    tickets.sort(key=lambda x: x[94])\n    tickets.sort(key=lambda x: x[95])\n    tickets.sort(key=lambda x: x[96])\n    tickets.sort(key=lambda x: x[97])\n    tickets.sort(key=lambda x: x[98])\n    tickets.sort(key=lambda x: x[99])\n    tickets.sort(key=lambda x: x[100])\n    tickets.sort(key=lambda x: x[101])\n    tickets.sort(key=lambda x:"
    },
    {
        "number": 3534,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    multi_keys = list(map(int, stdin.strip().split()))\n    answer = 0\n    for i in range(n):\n        if multi_keys[i] >= 0:\n            answer += 1\n    return str(answer)\n\nSample Output:\n3\nExplanation:\nMirka can play as many correct pitches as possible.\n\"\"\"\n\ndef"
    },
    {
        "number": 3535,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    s = [list(map(int, stdin.split())) for _ in range(N)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(N)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]))\n    s = [s[i][1:] for i in range(M)]\n    s.sort(key=lambda x: (x[0], x[1]"
    },
    {
        "number": 3536,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    b = int(stdin.strip().split()[0])\n    p = int(stdin.strip().split()[1])\n    if n == 0:\n        return str(1)\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(1)\n    if n == 4:\n        return str(1)\n    if n == 5:\n        return str(1)\n    if n == 6:\n        return str(1)\n    if n == 7:\n        return str(1)\n    if n == 8:\n        return str(1)\n    if n == 9:\n        return str(1)\n    if n == 10:\n        return str(1)\n    if n == 11:\n        return str(1)\n    if n == 12:\n        return str(1)\n    if n == 13:\n        return str(1)\n    if n == 14:\n        return str(1)\n    if n == 15:\n        return str(1)\n    if n == 16:\n        return str(1)\n    if n == 17:\n        return str(1)\n    if n == 18:\n        return str(1)\n    if n == 19:\n        return str(1)\n    if n == 20:\n        return str(1)\n    if n == 21:\n        return str(1)\n    if n == 22:\n        return str(1)\n    if n == 23:\n        return str(1)\n    if n == 24:\n        return str(1)\n    if n == 25:\n        return str(1)\n    if n == 26:\n        return str(1)\n    if n == 27:\n        return str(1)\n    if n == 28:\n        return str(1)\n    if n == 29:\n        return str(1)\n    if n == 30:\n        return str(1)\n    if n == 31:\n        return str(1)\n    if n == 32:\n        return str(1)\n    if n == 33:\n        return str(1)\n    if n == 34:\n        return str(1)\n    if n == 35:\n        return str(1)\n    if n == 36:\n        return str(1)\n    if n == 37:\n        return str(1)\n    if n == 38:\n        return str(1)\n    if n == 39:\n        return str(1)\n    if n == 40:\n        return str(1)\n    if n == 41:\n        return str(1)\n    if n == 42:\n        return str(1)\n    if n == 43:\n        return str(1)\n    if n == 44:\n        return str(1)\n    if n == 45:\n        return str(1)\n    if n == 46:\n        return str(1)\n    if n == 47:\n        return str(1)\n    if n == 48:\n        return str(1)\n    if n == 49:\n        return str(1)\n    if n == 50:\n        return str(1)\n    if n == 51:\n        return str(1)\n    if n == 52:\n        return str(1)\n    if n == 53:\n        return str(1)\n    if n == 54:\n        return str(1)\n    if n == 55:\n        return str(1)\n    if n == 56:\n        return str(1)\n    if n == 57:\n        return str(1)\n    if n == 58:\n        return str(1)\n    if n == 59:\n        return str(1)\n    if n == 60:\n        return str(1)\n    if n == 61:\n        return str(1)\n    if n == 62:\n        return str(1)\n    if n == 63:\n        return str(1)\n    if n == 64:\n        return str(1)\n    if n == 65:\n        return str(1)\n    if n == 66:\n        return str(1)\n    if n == 67:\n        return str(1)\n    if n == 68:\n        return str(1)\n    if n == 69:\n        return str(1)\n    if n == 70:\n        return str(1)\n    if n == 71:\n        return str(1)\n    if n == 72:\n        return str(1)\n    if n == 73:\n        return str(1)\n    if n == 74:\n        return str(1)\n    if n == 75:\n        return str(1)\n    if n == 76:\n        return str(1)\n    if n == 77:\n        return str(1)\n    if n == 78:\n        return str(1)\n    if n == 79:\n        return str(1)\n    if n == 80:\n        return str(1)\n    if n == 81:\n        return str(1)\n    if n == 82:\n        return str(1)\n    if n == 83:\n        return str(1)\n    if n == 84:\n        return str(1)\n    if n == 85:\n        return str(1)\n    if n == 86:\n        return str(1)\n    if n == 87:\n        return str(1)\n    if n == 88:\n        return str(1)\n    if n == 89:\n        return str(1)\n    if n == 90:\n        return str(1)\n    if n == 91:\n        return str(1)\n    if n == 92:\n        return str(1)\n    if n == 93:\n        return str(1)\n    if n == 94:\n        return str(1)\n    if n == 95:\n        return str(1)\n    if n == 96:\n        return str(1)\n    if n == 97:\n        return str(1)\n    if n == 98:\n        return str(1)\n    if n == 99:\n        return str(1)\n    if n == 100:\n        return str(1)\n    if n == 101:\n        return str(1)\n    if n == 102:\n        return str(1)\n    if n == 103:"
    },
    {
        "number": 3537,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    e = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    s.sort()\n    e.sort()\n    a_i = 0\n    b_i = 0\n    s_i = 0\n    e_i = 0\n    for i in range(n):\n        if a[i] == a_i:\n            a_i += 1\n        elif b[i] == b_i:\n            b_i += 1\n        elif s[i] == s_i:\n            s_i += 1\n        elif e[i] == e_i:\n            e_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i == b_i:\n        a_i += 1\n    elif s_i == e_i:\n        s_i += 1\n    if a_i =="
    },
    {
        "number": 3538,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    l, w, h = map(int, stdin.split())\n    if l > d:\n        return '0'\n    if l == d:\n        return str(l)\n    if w > h:\n        return '0'\n    if w + h > d:\n        return '0'\n    if w + h > l:\n        return '0'\n    if w + h > l + w:\n        return '0'\n    if w + h > l + w + h:\n        return '0'\n    if w + h > l + w + h + w:\n        return '0'\n    if w + h > l + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w:\n        return '0'\n    if w + h > l + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h + w + h:\n        return '0'\n    if w + h > l + w + h + w + h + w + h + w + h + w + h + w"
    },
    {
        "number": 3539,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \""
    },
    {
        "number": 3540,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(row, col, state):\n        if state == 'R':\n            return row + 1\n        elif state == 'G':\n            return col + 1\n        elif state == 'B':\n            return row - 1\n        elif state == 'Y':\n            return col - 1\n        else:\n            return row - 1\n\n    def solve_2(row, col, state):\n        if state == 'R':\n            return solve(row, col, 'G')\n        elif state == 'G':\n            return solve(row, col, 'B')\n        elif state == 'B':\n            return solve(row, col, 'R')\n        elif state == 'Y':\n            return solve(row, col, 'Y')\n        else:\n            return solve(row, col, 'R') + solve(row, col, 'G') + solve(row, col, 'B') + solve(row, col, 'Y')\n\n    def solve_3(row, col, state):\n        if state == 'R':\n            return solve_2(row, col, 'G')\n        elif state == 'G':\n            return solve_2(row, col, 'B')\n        elif state == 'B':\n            return solve_2(row, col, 'R')\n        elif state == 'Y':\n            return solve_2(row, col, 'Y')\n        else:\n            return solve_2(row, col, 'R') + solve_2(row, col, 'G') + solve_2(row, col, 'B') + solve_2(row, col, 'Y')\n\n    def solve_4(row, col, state):\n        if state == 'R':\n            return solve_3(row, col, 'G')\n        elif state == 'G':\n            return solve_3(row, col, 'B')\n        elif state == 'B':\n            return solve_3(row, col, 'R')\n        elif state == 'Y':\n            return solve_3(row, col, 'Y')\n        else:\n            return solve_3(row, col, 'R') + solve_3(row, col, 'G') + solve_3(row, col, 'B') + solve_3(row, col, 'Y')\n\n    def solve_5(row, col, state):\n        if state == 'R':\n            return solve_4(row, col, 'G')\n        elif state == 'G':\n            return solve_4(row, col, 'B')\n        elif state == 'B':\n            return solve_4(row, col, 'R')\n        elif state == 'Y':\n            return solve_4(row, col, 'Y')\n        else:\n            return solve_4(row, col, 'R') + solve_4(row, col, 'G') + solve_4(row, col, 'B') + solve_4(row, col, 'Y')\n\n    def solve_6(row, col, state):\n        if state == 'R':\n            return solve_5(row, col, 'G')\n        elif state == 'G':\n            return solve_5(row, col, 'B')\n        elif state == 'B':\n            return solve_5(row, col, 'R')\n        elif state == 'Y':\n            return solve_5(row, col, 'Y')\n        else:\n            return solve_5(row, col, 'R') + solve_5(row, col, 'G') + solve_5(row, col, 'B') + solve_5(row, col, 'Y')\n\n    def solve_7(row, col, state):\n        if state == 'R':\n            return solve_6(row, col, 'G')\n        elif state == 'G':\n            return solve_6(row, col, 'B')\n        elif state == 'B':\n            return solve_6(row, col, 'R')\n        elif state == 'Y':\n            return solve_6(row, col, 'Y')\n        else:\n            return solve_6(row, col, 'R') + solve_6(row, col, 'G') + solve_6(row, col, 'B') + solve_6(row, col, 'Y')\n\n    def solve_8(row, col, state):\n        if state == 'R':\n            return solve_7(row, col, 'G')\n        elif state == 'G':\n            return solve_7(row, col, 'B')\n        elif state == 'B':\n            return solve_7(row, col, 'R')\n        elif state == 'Y':\n            return solve_7(row, col, 'Y')\n        else:\n            return solve_7(row, col, 'R') + solve_7(row, col, 'G') + solve_7(row, col, 'B') + solve_7(row, col, 'Y')\n\n    def solve_9(row, col, state):\n        if state == 'R':\n            return solve_8(row, col, 'G')\n        elif state == 'G':\n            return solve_8(row, col, 'B')\n        elif state == 'B':\n            return solve_8(row, col, 'R')\n        elif state == 'Y':\n            return solve_8(row, col, 'Y')\n        else:\n            return solve_8(row, col, 'R') + solve_8(row, col, 'G') + solve_8(row, col, 'B') + solve_8(row, col, 'Y')\n\n    def solve_10(row, col, state):\n        if state == 'R':\n            return solve_9(row, col, 'G')\n        elif state == 'G':\n            return solve_9(row, col, 'B')\n        elif state == 'B':\n            return solve_9(row, col, 'R')\n        elif state == 'Y':\n            return solve_9(row, col, 'Y')\n        else:\n            return solve_9(row, col, 'R') + solve_9(row, col, 'G') + solve_9(row, col, 'B') + solve_9(row, col, 'Y')\n\n    def solve_11(row, col, state):\n        if state == 'R':\n            return solve_10(row, col, 'G')\n        elif state == 'G':\n            return solve_10(row, col, 'B')\n        elif state == 'B':\n            return solve_10(row, col, 'R')\n        elif state == 'Y':\n            return solve_10(row, col, 'Y')\n        else:\n            return solve_10(row, col, 'R') + solve_10(row, col, 'G') + solve_10(row, col, 'B') + solve_10(row, col, 'Y')\n\n    def solve_12("
    },
    {
        "number": 3541,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] > b[i]:\n            a[i], b[i] = b[i], a[i]\n    return ''.join(map(str, a))\n\nSample Output:\nAAAAA\ndef"
    },
    {
        "number": 3542,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    B = [list(map(int, input().split())) for _ in range(M)]\n    \n    def get_intersection(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_2(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_3(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_4(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_5(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_6(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_7(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_8(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_9(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_10(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_11(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_12(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_13(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_14(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_15(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_16(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_17(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_18(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_19(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_20(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_21(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_22(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_23(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return a[i]\n        return -1\n    \n    def get_intersection_point_24(a, b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] =="
    },
    {
        "number": 3543,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dic = {}\n    for line in stdin:\n        word = line.split()\n        for word in word:\n            if word not in dic:\n                dic[word] = 1\n            else:\n                dic[word] += 1\n    \n    for word in dic:\n        if dic[word] == 1:\n            dic[word] = 0\n        else:\n            dic[word] -= 1\n    \n    return str(min(dic.values()))\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= word1, word2, word3 <= $1\n\n-----Time Limit: 1 minute\n-----Space Limit: 1 GB\n\n-----Tip: You can use a dictionary to store the words and their frequencies.\n\n-----Example 1:\nInput:\n3\naustria\nautocorrect\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\nOutput:\n12\n4\n11\n3\n2\ndef"
    },
    {
        "number": 3544,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"3\"\n    elif n == 4:\n        return \"4\"\n    elif n == 5:\n        return \"5\"\n    elif n == 6:\n        return \"6\"\n    elif n == 7:\n        return \"7\"\n    elif n == 8:\n        return \"8\"\n    elif n == 9:\n        return \"9\"\n    elif n == 10:\n        return \"10\"\n    elif n == 11:\n        return \"11\"\n    elif n == 12:\n        return \"12\"\n    elif n == 13:\n        return \"13\"\n    elif n == 14:\n        return \"14\"\n    elif n == 15:\n        return \"15\"\n    elif n == 16:\n        return \"16\"\n    elif n == 17:\n        return \"17\"\n    elif n == 18:\n        return \"18\"\n    elif n == 19:\n        return \"19\"\n    elif n == 20:\n        return \"20\"\n    elif n == 21:\n        return \"21\"\n    elif n == 22:\n        return \"22\"\n    elif n == 23:\n        return \"23\"\n    elif n == 24:\n        return \"24\"\n    elif n == 25:\n        return \"25\"\n    elif n == 26:\n        return \"26\"\n    elif n == 27:\n        return \"27\"\n    elif n == 28:\n        return \"28\"\n    elif n == 29:\n        return \"29\"\n    elif n == 30:\n        return \"30\"\n    elif n == 31:\n        return \"31\"\n    elif n == 32:\n        return \"32\"\n    elif n == 33:\n        return \"33\"\n    elif n == 34:\n        return \"34\"\n    elif n == 35:\n        return \"35\"\n    elif n == 36:\n        return \"36\"\n    elif n == 37:\n        return \"37\"\n    elif n == 38:\n        return \"38\"\n    elif n == 39:\n        return \"39\"\n    elif n == 40:\n        return \"40\"\n    elif n == 41:\n        return \"41\"\n    elif n == 42:\n        return \"42\"\n    elif n == 43:\n        return \"43\"\n    elif n == 44:\n        return \"44\"\n    elif n == 45:\n        return \"45\"\n    elif n == 46:\n        return \"46\"\n    elif n == 47:\n        return \"47\"\n    elif n == 48:\n        return \"48\"\n    elif n == 49:\n        return \"49\"\n    elif n == 50:\n        return \"50\"\n    elif n == 51:\n        return \"51\"\n    elif n == 52:\n        return \"52\"\n    elif n == 53:\n        return \"53\"\n    elif n == 54:\n        return \"54\"\n    elif n == 55:\n        return \"55\"\n    elif n == 56:\n        return \"56\"\n    elif n == 57:\n        return \"57\"\n    elif n == 58:\n        return \"58\"\n    elif n == 59:\n        return \"59\"\n    elif n == 60:\n        return \"60\"\n    elif n == 61:\n        return \"61\"\n    elif n == 62:\n        return \"62\"\n    elif n == 63:\n        return \"63\"\n    elif n == 64:\n        return \"64\"\n    elif n == 65:\n        return \"65\"\n    elif n == 66:\n        return \"66\"\n    elif n == 67:\n        return \"67\"\n    elif n == 68:\n        return \"68\"\n    elif n == 69:\n        return \"69\"\n    elif n == 70:\n        return \"70\"\n    elif n == 71:\n        return \"71\"\n    elif n == 72:\n        return \"72\"\n    elif n == 73:\n        return \"73\"\n    elif n == 74:\n        return \"74\"\n    elif n == 75:\n        return \"75\"\n    elif n == 76:\n        return \"76\"\n    elif n == 77:\n        return \"77\"\n    elif n == 78:\n        return \"78\"\n    elif n == 79:\n        return \"79\"\n    elif n == 80:\n        return \"80\"\n    elif n == 81:\n        return \"81\"\n    elif n == 82:\n        return \"82\"\n    elif n == 83:\n        return \"83\"\n    elif n == 84:\n        return \"84\"\n    elif n == 85:\n        return \"85\"\n    elif n == 86:\n        return \"86\"\n    elif n == 87:\n        return \"87\"\n    elif n == 88:\n        return \"88\"\n    elif n == 89:\n        return \"89\"\n    elif n == 90:\n        return \"90\"\n    elif n == 91:\n        return \"91\"\n    elif n == 92:\n        return \"92\"\n    elif n == 93:\n        return \"93\"\n    elif n == 94:\n        return \"94\"\n    elif n == 95:\n        return \"95\"\n    elif n == 96:\n        return \"96\"\n    elif n == 97:\n        return \"97\"\n    elif n == 98:\n        return \"98\"\n    elif n == 99:\n        return \"99\"\n    elif n == 100:\n        return \"100\"\n    elif n == 101:\n        return \"101\"\n    elif n == 102:\n        return \"102\"\n    elif n == 103:\n        return \"103\"\n    elif n == 104:\n        return \"104\"\n    elif n == 105:\n        return \"105\"\n    elif n == 106:\n        return \"106\"\n    elif n == 107:\n        return \"107\"\n    elif n == 108:\n        return \"108\"\n    elif n == 109:\n        return \"109\"\n    elif n == 110:\n        return \"110\"\n    elif n == 111:\n        return \"111\"\n    elif n == 112:\n        return \"112\"\n    elif n == 113:\n        return \"113\"\n    elif n == 114:\n        return \"114\"\n    elif n == 115:\n        return \"115\"\n    elif n == 116:\n        return \"116\"\n    elif n == 117:\n        return \"117\"\n    el"
    },
    {
        "number": 3545,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def preorder(t):\n        if t == \"\":\n            return\n        print(t, end=\"\")\n        preorder(t[1:])\n        print(t[0], end=\"\")\n    def inorder(t):\n        if t == \"\":\n            return\n        inorder(t[1:])\n        print(t, end=\"\")\n        inorder(t[0])\n    def postorder(t):\n        if t == \"\":\n            return\n        postorder(t[1:])\n        postorder(t[0])\n        print(t, end=\"\")\n    stdin = stdin.split()\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].upper()\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\" \")\n    stdin = \"\".join(stdin)\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i].split(\""
    },
    {
        "number": 3546,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    l = [0] * n\n    k = [0] * (n + 1)\n    d = [0] * (n + 1)\n    for i in range(n):\n        l[i], k[i], d[i] = map(int, stdin.split())\n    for i in range(n):\n        l[i] += k[i]\n        d[i] += d[i - 1]\n    for i in range(n - 1):\n        l[i] += d[i + 1]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range(n - 1):\n        d[i + 1] += d[i]\n    for i in range"
    },
    {
        "number": 3547,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    plots = []\n    for i in range(n):\n        plots.append(list(map(int, stdin.split())))\n    \n    plots.sort(key=lambda x: (x[0], x[1]))\n    \n    total = 0\n    for i in range(n):\n        total += plots[i][2] * plots[i][3]\n    \n    return str(total)\n\ndef"
    },
    {
        "number": 3548,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n == 1:\n        return str(p)\n    if n == 2:\n        return str(p + 1)\n    if n == 3:\n        return str(p + 2)\n    if n == 4:\n        return str(p + 3)\n    if n == 5:\n        return str(p + 4)\n    if n == 6:\n        return str(p + 5)\n    if n == 7:\n        return str(p + 6)\n    if n == 8:\n        return str(p + 7)\n    if n == 9:\n        return str(p + 8)\n    if n == 10:\n        return str(p + 9)\n    if n == 11:\n        return str(p + 10)\n    if n == 12:\n        return str(p + 11)\n    if n == 13:\n        return str(p + 12)\n    if n == 14:\n        return str(p + 13)\n    if n == 15:\n        return str(p + 14)\n    if n == 16:\n        return str(p + 15)\n    if n == 17:\n        return str(p + 16)\n    if n == 18:\n        return str(p + 17)\n    if n == 19:\n        return str(p + 18)\n    if n == 20:\n        return str(p + 19)\n    if n == 21:\n        return str(p + 20)\n    if n == 22:\n        return str(p + 21)\n    if n == 23:\n        return str(p + 22)\n    if n == 24:\n        return str(p + 23)\n    if n == 25:\n        return str(p + 24)\n    if n == 26:\n        return str(p + 25)\n    if n == 27:\n        return str(p + 26)\n    if n == 28:\n        return str(p + 27)\n    if n == 29:\n        return str(p + 28)\n    if n == 30:\n        return str(p + 29)\n    if n == 31:\n        return str(p + 30)\n    if n == 32:\n        return str(p + 31)\n    if n == 33:\n        return str(p + 32)\n    if n == 34:\n        return str(p + 33)\n    if n == 35:\n        return str(p + 34)\n    if n == 36:\n        return str(p + 35)\n    if n == 37:\n        return str(p + 36)\n    if n == 38:\n        return str(p + 37)\n    if n == 39:\n        return str(p + 38)\n    if n == 40:\n        return str(p + 39)\n    if n == 41:\n        return str(p + 40)\n    if n == 42:\n        return str(p + 41)\n    if n == 43:\n        return str(p + 42)\n    if n == 44:\n        return str(p + 43)\n    if n == 45:\n        return str(p + 44)\n    if n == 46:\n        return str(p + 45)\n    if n == 47:\n        return str(p + 46)\n    if n == 48:\n        return str(p + 47)\n    if n == 49:\n        return str(p + 48)\n    if n == 50:\n        return str(p + 49)\n    if n == 51:\n        return str(p + 50)\n    if n == 52:\n        return str(p + 51)\n    if n == 53:\n        return str(p + 52)\n    if n == 54:\n        return str(p + 53)\n    if n == 55:\n        return str(p + 54)\n    if n == 56:\n        return str(p + 55)\n    if n == 57:\n        return str(p + 56)\n    if n == 58:\n        return str(p + 57)\n    if n == 59:\n        return str(p + 58)\n    if n == 60:\n        return str(p + 59)\n    if n == 61:\n        return str(p + 60)\n    if n == 62:\n        return str(p + 61)\n    if n == 63:\n        return str(p + 62)\n    if n == 64:\n        return str(p + 63)\n    if n == 65:\n        return str(p + 64)\n    if n == 66:\n        return str(p + 65)\n    if n == 67:\n        return str(p + 66)\n    if n == 68:\n        return str(p + 67)\n    if n == 69:\n        return str(p + 68)\n    if n == 70:\n        return str(p + 69)\n    if n == 71:\n        return str(p + 70)\n    if n == 72:\n        return str(p + 71)\n    if n == 73:\n        return str(p + 72)\n    if n == 74:\n        return str(p + 73)\n    if n == 75:\n        return str(p + 74)\n    if n == 76:\n        return str(p + 75)\n    if n == 77:\n        return str(p + 76)\n    if n == 78:\n        return str(p + 77)\n    if n == 79:\n        return str(p + 78)\n    if n == 80:\n        return str(p + 79)\n    if n == 81:\n        return str(p + 80)\n    if n == 82:\n        return str(p + 81)\n    if n == 83:\n        return str(p + 82)\n    if n == 84:\n        return str(p + 83)\n    if n == 85:\n        return str(p + 84)\n    if n == 86:\n        return str(p + 85)\n    if n == 87:\n        return str(p + 86)\n    if n == 88:\n        return str(p + 87)\n    if n == 89:\n        return str(p + 88)\n    if n == 90:\n        return str(p + 89)\n    if n == 91:\n        return str(p + 90)\n    if n == 92:\n        return str(p + 91)\n    if n == 93:\n        return str(p + 92)\n    if n == 94:\n        return str(p + 93)\n    if n == 95:\n        return str(p + 94)\n    if n == 96:\n        return str(p + 95)\n    if n == 97:\n        return str(p + 96)\n    "
    },
    {
        "number": 3549,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m_1, m_2, m_3, x_1, x_2, x_3, y_1, y_2, y_3 = map(int, stdin.split())\n    z = 0\n    for i in range(1, m_1 + 1):\n        for j in range(1, m_2 + 1):\n            for k in range(1, m_3 + 1):\n                if (i + j + k) % 10 == 0:\n                    z += 1\n    return str(z)\n"
    },
    {
        "number": 3550,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nSample Input:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\ndef"
    },
    {
        "number": 3551,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    ice = list(map(int, stdin.split()))\n    ice.sort()\n    \n    def dfs(i, j):\n        if i == j:\n            return 0\n        \n        if ice[i] + ice[j] > t:\n            return 0\n        \n        if ice[i] + ice[j] == t:\n            return 1\n        \n        return dfs(i, j - 1) + dfs(i + 1, j) + dfs(i, j + 1)\n    \n    return str(dfs(0, n - 1))\n\nSample Output:\n\"0\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\"\n\"1\""
    },
    {
        "number": 3552,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n > m:\n        n, m = m, n\n    if k > m:\n        k, m = m, k\n    if n > k:\n        n, k = k, n\n    if m > k:\n        m, k = k, m\n    return str(n*m*k)\n\ndef"
    },
    {
        "number": 3553,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    \n    def process(arr, start, end):\n        if start == end:\n            return arr[start]\n        \n        mid = (start + end) // 2\n        \n        if arr[mid] == K:\n            return process(arr, start, mid)\n        elif arr[mid] < K:\n            return process(arr, mid + 1, end)\n        else:\n            return process(arr, start, mid - 1)\n    \n    return str(process(arr, 0, len(arr) - 1))\n\nSample Output:\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3"
    },
    {
        "number": 3554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, W, C = map(int, stdin.split())\n    if W > C:\n        W = C\n    if W > D:\n        W = D\n    return str(W * (W + C) / 2)\n\nSample Input:\n1000 1000\nSample Output:\n0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"
    },
    {
        "number": 3555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    toys = []\n    for _ in range(n):\n        toys.append(list(map(int, stdin.split())))\n    toys.sort(key=lambda x: x[0])\n    toys.sort(key=lambda x: x[1])\n    toys.sort(key=lambda x: x[2])\n    toys.sort(key=lambda x: x[3])\n    toys.sort(key=lambda x: x[4])\n    toys.sort(key=lambda x: x[5])\n    toys.sort(key=lambda x: x[6])\n    toys.sort(key=lambda x: x[7])\n    toys.sort(key=lambda x: x[8])\n    toys.sort(key=lambda x: x[9])\n    toys.sort(key=lambda x: x[10])\n    toys.sort(key=lambda x: x[11])\n    toys.sort(key=lambda x: x[12])\n    toys.sort(key=lambda x: x[13])\n    toys.sort(key=lambda x: x[14])\n    toys.sort(key=lambda x: x[15])\n    toys.sort(key=lambda x: x[16])\n    toys.sort(key=lambda x: x[17])\n    toys.sort(key=lambda x: x[18])\n    toys.sort(key=lambda x: x[19])\n    toys.sort(key=lambda x: x[20])\n    toys.sort(key=lambda x: x[21])\n    toys.sort(key=lambda x: x[22])\n    toys.sort(key=lambda x: x[23])\n    toys.sort(key=lambda x: x[24])\n    toys.sort(key=lambda x: x[25])\n    toys.sort(key=lambda x: x[26])\n    toys.sort(key=lambda x: x[27])\n    toys.sort(key=lambda x: x[28])\n    toys.sort(key=lambda x: x[29])\n    toys.sort(key=lambda x: x[30])\n    toys.sort(key=lambda x: x[31])\n    toys.sort(key=lambda x: x[32])\n    toys.sort(key=lambda x: x[33])\n    toys.sort(key=lambda x: x[34])\n    toys.sort(key=lambda x: x[35])\n    toys.sort(key=lambda x: x[36])\n    toys.sort(key=lambda x: x[37])\n    toys.sort(key=lambda x: x[38])\n    toys.sort(key=lambda x: x[39])\n    toys.sort(key=lambda x: x[40])\n    toys.sort(key=lambda x: x[41])\n    toys.sort(key=lambda x: x[42])\n    toys.sort(key=lambda x: x[43])\n    toys.sort(key=lambda x: x[44])\n    toys.sort(key=lambda x: x[45])\n    toys.sort(key=lambda x: x[46])\n    toys.sort(key=lambda x: x[47])\n    toys.sort(key=lambda x: x[48])\n    toys.sort(key=lambda x: x[49])\n    toys.sort(key=lambda x: x[50])\n    toys.sort(key=lambda x: x[51])\n    toys.sort(key=lambda x: x[52])\n    toys.sort(key=lambda x: x[53])\n    toys.sort(key=lambda x: x[54])\n    toys.sort(key=lambda x: x[55])\n    toys.sort(key=lambda x: x[56])\n    toys.sort(key=lambda x: x[57])\n    toys.sort(key=lambda x: x[58])\n    toys.sort(key=lambda x: x[59])\n    toys.sort(key=lambda x: x[60])\n    toys.sort(key=lambda x: x[61])\n    toys.sort(key=lambda x: x[62])\n    toys.sort(key=lambda x: x[63])\n    toys.sort(key=lambda x: x[64])\n    toys.sort(key=lambda x: x[65])\n    toys.sort(key=lambda x: x[66])\n    toys.sort(key=lambda x: x[67])\n    toys.sort(key=lambda x: x[68])\n    toys.sort(key=lambda x: x[69])\n    toys.sort(key=lambda x: x[70])\n    toys.sort(key=lambda x: x[71])\n    toys.sort(key=lambda x: x[72])\n    toys.sort(key=lambda x: x[73])\n    toys.sort(key=lambda x: x[74])\n    toys.sort(key=lambda x: x[75])\n    toys.sort(key=lambda x: x[76])\n    toys.sort(key=lambda x: x[77])\n    toys.sort(key=lambda x: x[78])\n    toys.sort(key=lambda x: x[79])\n    toys.sort(key=lambda x: x[80])\n    toys.sort(key=lambda x: x[81])\n    toys.sort(key=lambda x: x[82])\n    toys.sort(key=lambda x: x[83])\n    toys.sort(key=lambda x: x[84])\n    toys.sort(key=lambda x: x[85])\n    toys.sort(key=lambda x: x[86])\n    toys.sort(key=lambda x"
    },
    {
        "number": 3556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, q = map(int, stdin.split())\n    employees = [int(i) for i in stdin.split()]\n    employees.sort()\n    employees = [employees[i] for i in range(len(employees)) if i % 3 == 0]\n    employees.sort()\n    employees = [employees[i] for i in range(len(employees)) if i % 3 == 1]\n    employees.sort()\n    employees = [employees[i] for i in range(len(employees)) if i % 3 == 2]\n    employees.sort()\n    employees = [employees[i] for i in range(len(employees)) if i % q == 0]\n    employees.sort()\n    employees = [employees[i] for i in range(len(employees)) if i % q == 1]\n    employees.sort()\n    employees = [employees[i] for i in range(len(employees)) if i % q == 2]\n    employees.sort()\n    return ''.join(employees)\n"
    },
    {
        "number": 3557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    coach = [int(i) for i in stdin.split()]\n    coach.sort()\n    answer = 0\n    for i in range(n):\n        answer += (p - 1) * coach[i]\n    return str(answer)\n\nSample Input:\n5\n3 5 10 2 5\n2 4 5 1 3\nSample Output:\n90\ndef"
    },
    {
        "number": 3558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, h = map(int, stdin.split())\n    if n == 1:\n        return str(d)\n    if n == 2:\n        return str(h)\n    if n == 3:\n        return str(d + h)\n    if n == 4:\n        return str(d + h + d)\n    if n == 5:\n        return str(d + h + d + d)\n    if n == 6:\n        return str(d + h + d + d + d)\n    if n == 7:\n        return str(d + h + d + d + d + d)\n    if n == 8:\n        return str(d + h + d + d + d + d + d)\n    if n == 9:\n        return str(d + h + d + d + d + d + d + d)\n    if n == 10:\n        return str(d + h + d + d + d + d + d + d + d + d)\n    if n == 11:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d)\n    if n == 12:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 13:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 14:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 15:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 16:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 17:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 18:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 19:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 20:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 21:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 22:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 23:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 24:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 25:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 26:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 27:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 28:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 29:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 30:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 31:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d)\n    if n == 32:\n        return str(d + h + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d + d +"
    },
    {
        "number": 3559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, t = map(int, stdin.split())\n    map = [list(map(int, input().split())) for _ in range(N)]\n    for _ in range(t):\n        x, y = map.pop(0)\n        map[x][y] = map[y][x] = 0\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 1:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 2:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        for j in range(N):\n            if map[i][j] == 0:\n                map[i][j] = map[i][j] + 1\n            elif map[i][j] == 1:\n                map[i][j] = map[i][j] - 1\n    for i in range(N):\n        "
    },
    {
        "number": 3560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    Q = int(stdin.strip())\n    T = int(stdin.strip())\n    \n    if T == 1:\n        return '1'\n    \n    if T == 2:\n        return '2'\n    \n    if T == 3:\n        return '3'\n    \n    if T == 4:\n        return '4'\n    \n    if T == 5:\n        return '5'\n    \n    if T == 6:\n        return '6'\n    \n    if T == 7:\n        return '7'\n    \n    if T == 8:\n        return '8'\n    \n    if T == 9:\n        return '9'\n    \n    if T == 10:\n        return '10'\n    \n    if T == 11:\n        return '11'\n    \n    if T == 12:\n        return '12'\n    \n    if T == 13:\n        return '13'\n    \n    if T == 14:\n        return '14'\n    \n    if T == 15:\n        return '15'\n    \n    if T == 16:\n        return '16'\n    \n    if T == 17:\n        return '17'\n    \n    if T == 18:\n        return '18'\n    \n    if T == 19:\n        return '19'\n    \n    if T == 20:\n        return '20'\n    \n    if T == 21:\n        return '21'\n    \n    if T == 22:\n        return '22'\n    \n    if T == 23:\n        return '23'\n    \n    if T == 24:\n        return '24'\n    \n    if T == 25:\n        return '25'\n    \n    if T == 26:\n        return '26'\n    \n    if T == 27:\n        return '27'\n    \n    if T == 28:\n        return '28'\n    \n    if T == 29:\n        return '29'\n    \n    if T == 30:\n        return '30'\n    \n    if T == 31:\n        return '31'\n    \n    if T == 32:\n        return '32'\n    \n    if T == 33:\n        return '33'\n    \n    if T == 34:\n        return '34'\n    \n    if T == 35:\n        return '35'\n    \n    if T == 36:\n        return '36'\n    \n    if T == 37:\n        return '37'\n    \n    if T == 38:\n        return '38'\n    \n    if T == 39:\n        return '39'\n    \n    if T == 40:\n        return '40'\n    \n    if T == 41:\n        return '41'\n    \n    if T == 42:\n        return '42'\n    \n    if T == 43:\n        return '43'\n    \n    if T == 44:\n        return '44'\n    \n    if T == 45:\n        return '45'\n    \n    if T == 46:\n        return '46'\n    \n    if T == 47:\n        return '47'\n    \n    if T == 48:\n        return '48'\n    \n    if T == 49:\n        return '49'\n    \n    if T == 50:\n        return '50'\n    \n    if T == 51:\n        return '51'\n    \n    if T == 52:\n        return '52'\n    \n    if T == 53:\n        return '53'\n    \n    if T == 54:\n        return '54'\n    \n    if T == 55:\n        return '55'\n    \n    if T == 56:\n        return '56'\n    \n    if T == 57:\n        return '57'\n    \n    if T == 58:\n        return '58'\n    \n    if T == 59:\n        return '59'\n    \n    if T == 60:\n        return '60'\n    \n    if T == 61:\n        return '61'\n    \n    if T == 62:\n        return '62'\n    \n    if T == 63:\n        return '63'\n    \n    if T == 64:\n        return '64'\n    \n    if T == 65:\n        return '65'\n    \n    if T == 66:\n        return '66'\n    \n    if T == 67:\n        return '67'\n    \n    if T == 68:\n        return '68'\n    \n    if T == 69:\n        return '69'\n    \n    if T == 70:\n        return '70'\n    \n    if T == 71:\n        return '71'\n    \n    if T == 72:\n        return '72'\n    \n    if T == 73:\n        return '73'\n    \n    if T == 74:\n        return '74'\n    \n    if T == 75:\n        return '75'\n    \n    if T == 76:\n        return '76'\n    \n    if T == 77:\n        return '77'\n    \n    if T == 78:\n        return '78'\n    \n    if T == 79:\n        return '79'\n    \n    if T == 80:\n        return '80'\n    \n    if T == 81:\n        return '81'\n    \n    if T == 82:\n        return '82'\n    \n    if T == 83:\n        return '83'\n    \n    if T == 84:\n        return '84'\n    \n    if T == 85:\n        return '85'\n    \n    if T == 86:\n        return '86'\n    \n    if T == 87:\n        return '87'\n"
    },
    {
        "number": 3561,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, S, C, K = map(int, stdin.split())\n    if W + S + C + K <= 10**6:\n        return 'YES'\n    else:\n        return 'NO'\n\nSample Input:\n1 1 1 1\nSample Output:\nNO\ndef"
    },
    {
        "number": 3562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a, b, c = map(float, stdin.split())\n    f = lambda t: a * t ** 2 + b * t + c\n    return str(max(map(f, range(1, n + 1))))\n\nSample Input:\n2 4\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\nSample Output:\n80.5696000000\ndef"
    },
    {
        "number": 3563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    holes = [list(map(int, input().split())) for _ in range(n)]\n    answer = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                if holes[i][j] == 1:\n                    answer += 1\n            elif j == 0:\n                if holes[i][j] == 1:\n                    answer += 1\n            else:\n                if holes[i][j] == 1:\n                    answer += 1\n    return str(answer)\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 1\nstdin.length == n\n-1000000 <= holes[i][j] <= 1\nholes[i][j] is a valid hole.\n\n-----Time Limit: 1.0s (O(n^2))\n-----Memory Limit: 1.0M (O(n^2))\n"
    },
    {
        "number": 3564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y, r = map(int, stdin.split())\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k):\n        return 'impossible'\n    if n*m*k >= r*r*(n+m+k) or n*m*k >= r*r*(n+m+k) or"
    },
    {
        "number": 3565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = []\n    for _ in range(n):\n        cities.append(stdin.split())\n    \n    def check(city):\n        for i in range(len(cities)):\n            if cities[i][0] == city:\n                return True\n        return False\n    \n    def check_route(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_2(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_3(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_4(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_5(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_6(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_7(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_8(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_9(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_10(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_11(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_12(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_13(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_14(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_15(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_16(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_17(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return True\n        return False\n    \n    def check_route_18(city1, city2):\n        for i in range(len(cities)):\n            if cities[i][0] == city1 and cities[i][1] == city2:\n                return"
    },
    {
        "number": 3566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    huts = [int(i) for i in stdin.split()]\n    huts.sort()\n    for i in range(n):\n        if q == 0:\n            break\n        for j in range(q):\n            if huts[i] == huts[j]:\n                huts[i] += 1\n                huts[j] -= 1\n                q -= 1\n                break\n    if q == 0:\n        return '0'\n    else:\n        return '1'\n"
    },
    {
        "number": 3567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    characters = []\n    for _ in range(n):\n        characters.append(stdin.split()[0])\n    characters.sort()\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i] = characters[i] + '0'\n        else:\n            characters[i] = characters[i] + '1'\n    for i in range(n):\n        if i == 0:\n            characters[i"
    },
    {
        "number": 3568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    f = [list(map(int, input().split())) for _ in range(n)]\n    f.sort(key=lambda x: x[0])\n    f.sort(key=lambda x: x[1])\n    f.sort(key=lambda x: x[2])\n    f.sort(key=lambda x: x[3])\n    f.sort(key=lambda x: x[4])\n    f.sort(key=lambda x: x[5])\n    f.sort(key=lambda x: x[6])\n    f.sort(key=lambda x: x[7])\n    f.sort(key=lambda x: x[8])\n    f.sort(key=lambda x: x[9])\n    f.sort(key=lambda x: x[10])\n    f.sort(key=lambda x: x[11])\n    f.sort(key=lambda x: x[12])\n    f.sort(key=lambda x: x[13])\n    f.sort(key=lambda x: x[14])\n    f.sort(key=lambda x: x[15])\n    f.sort(key=lambda x: x[16])\n    f.sort(key=lambda x: x[17])\n    f.sort(key=lambda x: x[18])\n    f.sort(key=lambda x: x[19])\n    f.sort(key=lambda x: x[20])\n    f.sort(key=lambda x: x[21])\n    f.sort(key=lambda x: x[22])\n    f.sort(key=lambda x: x[23])\n    f.sort(key=lambda x: x[24])\n    f.sort(key=lambda x: x[25])\n    f.sort(key=lambda x: x[26])\n    f.sort(key=lambda x: x[27])\n    f.sort(key=lambda x: x[28])\n    f.sort(key=lambda x: x[29])\n    f.sort(key=lambda x: x[30])\n    f.sort(key=lambda x: x[31])\n    f.sort(key=lambda x: x[32])\n    f.sort(key=lambda x: x[33])\n    f.sort(key=lambda x: x[34])\n    f.sort(key=lambda x: x[35])\n    f.sort(key=lambda x: x[36])\n    f.sort(key=lambda x: x[37])\n    f.sort(key=lambda x: x[38])\n    f.sort(key=lambda x: x[39])\n    f.sort(key=lambda x: x[40])\n    f.sort(key=lambda x: x[41])\n    f.sort(key=lambda x: x[42])\n    f.sort(key=lambda x: x[43])\n    f.sort(key=lambda x: x[44])\n    f.sort(key=lambda x: x[45])\n    f.sort(key=lambda x: x[46])\n    f.sort(key=lambda x: x[47])\n    f.sort(key=lambda x: x[48])\n    f.sort(key=lambda x: x[49])\n    f.sort(key=lambda x: x[50])\n    f.sort(key=lambda x: x[51])\n    f.sort(key=lambda x: x[52])\n    f.sort(key=lambda x: x[53])\n    f.sort(key=lambda x: x[54])\n    f.sort(key=lambda x: x[55])\n    f.sort(key=lambda x: x[56])\n    f.sort(key=lambda x: x[57])\n    f.sort(key=lambda x: x[58])\n    f.sort(key=lambda x: x[59])\n    f.sort(key=lambda x: x[60])\n    f.sort(key=lambda x: x[61])\n    f.sort(key=lambda x: x[62])\n    f.sort(key=lambda x: x[63])\n    f.sort(key=lambda x: x[64])\n    f.sort(key=lambda x: x[65])\n    f.sort(key=lambda x: x[66])\n    f.sort(key=lambda x: x[67])\n    f.sort(key=lambda x: x[68])\n    f.sort(key=lambda x: x[69])\n    f.sort(key=lambda x: x[70])\n    f.sort(key=lambda x: x[71])\n    f.sort(key=lambda x: x[72])\n    f.sort(key=lambda x: x[73])\n    f.sort(key=lambda x: x[74])\n    f.sort(key=lambda x: x[75])\n    f.sort(key=lambda x: x[76])\n    f.sort(key=lambda x: x[77])\n    f.sort(key=lambda x: x[78])\n    f.sort(key=lambda x: x[79])\n    f.sort(key=lambda x: x[80])\n    f.sort(key=lambda x: x[81])\n    f.sort(key=lambda x: x[82])\n    f.sort(key=lambda x: x[83])\n    f.sort(key=lambda x: x[84])\n    f.sort(key=lambda x: x[85])\n"
    },
    {
        "number": 3569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x, y = map(int, stdin.strip().split())\n    r = int(stdin.strip().split()[1])\n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(x-i) <= r and abs(y-j) <= r:\n                answer += 1\n    return str(answer)\n\nSample Output:\n2\ndef"
    },
    {
        "number": 3570,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    events = stdin.split()\n    scenarios = []\n    for event in events:\n        if event[0] == '!':\n            scenarios.append(event[1:])\n        else:\n            scenarios.append(event)\n    scenarios.sort()\n    for scenario in scenarios:\n        if scenario[0] == '!':\n            scenario = scenario[1:]\n        if scenario[0] == 'D':\n            scenario = scenario[1:]\n            if scenario[1:] == '!':\n                scenario = scenario[2:]\n            if scenario[0] == 'S':\n                scenario = scenario[1:]\n                if scenario[1:] == '!':\n                    scenario = scenario[2:]\n                if scenario[0] == '!':\n                    scenario = scenario[1:]\n                scenarios.remove(scenario)\n    for scenario in scenarios:\n        if scenario[0] == '!':\n            scenario = scenario[1:]\n        if scenario[0] == 'D':\n            scenario = scenario[1:]\n            if scenario[1:] == '!':\n                scenario = scenario[2:]\n            if scenario[0] == 'S':\n                scenario = scenario[1:]\n                if scenario[1:] == '!':\n                    scenario = scenario[2:]\n                if scenario[0] == '!':\n                    scenario = scenario[1:]\n                scenarios.remove(scenario)\n    for scenario in scenarios:\n        if scenario[0] == '!':\n            scenario = scenario[1:]\n        if scenario[0] == 'D':\n            scenario = scenario[1:]\n            if scenario[1:] == '!':\n                scenario = scenario[2:]\n            if scenario[0] == 'S':\n                scenario = scenario[1:]\n                if scenario[1:] == '!':\n                    scenario = scenario[2:]\n                if scenario[0] == '!':\n                    scenario = scenario[1:]\n                scenarios.remove(scenario)\n    for scenario in scenarios:\n        if scenario[0] == '!':\n            scenario = scenario[1:]\n        if scenario[0] == 'D':\n            scenario = scenario[1:]\n            if scenario[1:] == '!':\n                scenario = scenario[2:]\n            if scenario[0] == 'S':\n                scenario = scenario[1:]\n                if scenario[1:] == '!':\n                    scenario = scenario[2:]\n                if scenario[0] == '!':\n                    scenario = scenario[1:]\n                scenarios.remove(scenario)\n    for scenario in scenarios:\n        if scenario[0] == '!':\n            scenario = scenario[1:]\n        if scenario[0] == 'D':\n            scenario = scenario[1:]\n            if scenario[1:] == '!':\n                scenario = scenario[2:]\n            if scenario[0] == 'S':\n                scenario = scenario[1:]\n                if scenario[1:] == '!':\n                    scenario = scenario[2:]\n                if scenario[0] == '!':\n                    scenario = scenario[1:]\n                scenarios.remove(scenario)\n    for scenario in scenarios:\n        if scenario[0] == '!':\n            scenario = scenario[1:]\n        if scenario[0] == 'D':\n            scenario = scenario[1:]\n            if scenario[1:] == '!':\n                scenario = scenario[2:]\n            if scenario[0] == 'S':\n                scenario = scenario[1:]\n                if scenario[1:] == '!':\n                    scenario = scenario[2:]\n                if scenario[0] == '!':\n                    scenario = scenario[1:]\n                scenarios.remove(scenario)\n    for scenario in scenarios:\n        if scenario[0] == '!':\n            scenario = scenario[1:]\n        if scenario[0] == 'D':\n            scenario = scenario[1:]\n            if scenario[1:] == '!':\n                scenario = scenario[2:]\n            if scenario[0] == 'S':\n                scenario = scenario[1:]\n                if scenario[1:] == '!':\n                    scenario = scenario[2:]\n                if scenario[0] == '!':\n                    scenario = scenario[1:]\n                scenarios.remove(scenario)\n    for scenario in scenarios:\n        if scenario[0] == '!':\n            scenario = scenario[1:]\n        if scenario[0] == 'D':\n            scenario = scenario[1:]\n            if scenario[1:] == '!':\n                scenario = scenario[2:]"
    },
    {
        "number": 3571,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_lines(text: str) -> list[str]:\n        lines = []\n        for i in range(len(text)):\n            if text[i] =='':\n                lines.append(text[i:i+3])\n            else:\n                lines.append(text[i:i+2])\n        return lines\n\n    def get_words(text: str) -> list[str]:\n        words = []\n        for i in range(len(text)):\n            if text[i] =='':\n                words.append(text[i:i+3])\n            else:\n                words.append(text[i:i+2])\n        return words\n\n    def get_thumb(lines: list[str]) -> str:\n        thumb = ''\n        for line in lines:\n            for word in line:\n                if word =='':\n                    thumb +=''\n                else:\n                    thumb += word\n            thumb +=''\n        return thumb\n\n    def get_words_and_lines(text: str) -> list[str]:\n        words = get_words(text)\n        lines = get_lines(text)\n        thumb = get_thumb(lines)\n        return words, lines, thumb\n\n    def get_words_and_lines_and_thumb(text: str) -> list[str]:\n        words, lines, thumb = get_words_and_lines(text)\n        return words, lines, thumb\n\n    def get_words_and_lines_and_thumb_and_words(text: str) -> list[str]:\n        words, lines, thumb = get_words_and_lines_and_thumb(text)\n        return words, lines, thumb, words\n\n    def get_words_and_lines_and_thumb_and_words_and_lines(text: str) -> list[str]:\n        words, lines, thumb, words, lines = get_words_and_lines_and_thumb_and_words(text)\n        return words, lines, thumb, words, lines\n\n    def get_words_and_lines_and_thumb_and_words_and_lines_and_thumb(text: str) -> list[str]:\n        words, lines, thumb, words, lines, thumb = get_words_and_lines_and_thumb_and_words_and_lines(text)\n        return words, lines, thumb, words, lines, thumb\n\n    def get_words_and_lines_and_thumb_and_words_and_lines_and_thumb_and_words(text: str) -> list[str]:\n        words, lines, thumb, words, lines, thumb = get_words_and_lines_and_thumb_and_words_and_lines_and_thumb(text)\n        return words, lines, thumb, words, lines, thumb\n\n    def get_words_and_lines_and_thumb_and_words_and_lines_and_thumb_and_words_and_lines(text: str) -> list[str]:\n        words, lines, thumb, words, lines, thumb = get_words_and_lines_and_thumb_and_words_and_lines_and_thumb_and_words(text)\n        return words, lines, thumb, words, lines, thumb\n\n    def get_words_and_lines_and_thumb_and_words_and_lines_and_thumb_and_words_and_lines_and_thumb(text: str) -> list[str]:\n        words, lines, thumb, words, lines, thumb = get_words_and_lines_and_thumb_and_words_and_lines_and_thumb_and_words_and_lines(text)\n        return words, lines, thumb, words, lines, thumb\n\n    def get_words_and_lines_and_thumb_and_words_and_lines_and_thumb_and_words_and_lines_and_thumb_and_words(text: str) -> list[str]:\n        words, lines, thumb, words, lines, thumb = get_words_and_lines_and_thumb_and_words_and_lines_and_thumb_and_words"
    },
    {
        "number": 3572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    if n == 0:\n        return \"impossible\"\n    if n == 1:\n        return str(L)\n    if n == 2:\n        return str(L) + \" \" + str(L)\n    if n == 3:\n        return str(L) + \" \" + str(L) + \" \" + str(L)\n    if n == 4:\n        return str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L)\n    if n == 5:\n        return str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L)\n    if n == 6:\n        return str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L)\n    if n == 7:\n        return str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L)\n    if n == 8:\n        return str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L)\n    if n == 9:\n        return str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" + str(L) + \" \" +"
    },
    {
        "number": 3573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, C = map(int, stdin.split())\n    Cesar, Raul = map(int, stdin.split())\n    if N == 1:\n        if C == 1:\n            return str(Cesar + Raul)\n        else:\n            return str(Cesar + Raul) + str(C - 1)\n    else:\n        if C == 1:\n            return str(Cesar + Raul) + str(C - 1)\n        else:\n            return str(Cesar + Raul) + str(C - 1) + str(C - 1)\n\ndef"
    },
    {
        "number": 3574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(Q):\n        L, R = map(int, stdin.split())\n        if L > R:\n            return '0'\n        if L == R:\n            return '0'\n        if L < R:\n            for j in range(L, R+1):\n                if a[j] == a[j-1]:\n                    a[j] = a[j-1]\n                    a[j-1] = 0\n    return ''.join(map(str, a))\n"
    },
    {
        "number": 3575,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    u, v = map(int, stdin.split())\n    s, t = map(int, stdin.split())\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs(s - t))\n    if u == s:\n        return str(abs(s - t))\n    if u == v:\n        return str(abs("
    },
    {
        "number": 3576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, K = map(int, stdin.split())\n    R = R * 10**11 + 3\n    C = C * 10**11 + 3\n    K = K * 10**11 + 3\n    p = 1\n    q = 10**11 + 3\n    for i in range(R):\n        for j in range(C):\n            if i == 0:\n                if j == 0:\n                    p = p * 10**11 + 3\n                else:\n                    p = p * 10**11 + 3\n            elif i == C - 1:\n                if j == 0:\n                    q = q * 10**11 + 3\n                else:\n                    q = q * 10**11 + 3\n            else:\n                if j == 0:\n                    p = p * 10**11 + 3\n                else:\n                    p = p * 10**11 + 3\n                q = q * 10**11 + 3\n    return str(p % q)\n\nSample Output:\n14500000001\nExplanation:\nThe probability of evading capture can be uniquely represented as an irreducible fraction $p/q$.\n\"\"\"\n\ndef"
    },
    {
        "number": 3577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    L = list(map(int, stdin.strip().split()))\n    R = list(map(int, stdin.strip().split()))\n    H = list(map(int, stdin.strip().split()))\n    \n    def check(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_2(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_3(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_4(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_5(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_6(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_7(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_8(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_9(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_10(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_11(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_12(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_13(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_14(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_15(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_16(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_17(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_segment_18(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if L[x] < L[y] or R[x] < R[y]:\n            return False\n        if H[x] < H[y]:\n            return False\n        return True\n    \n    def check_"
    },
    {
        "number": 3578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R, (a, b, c) = map(int, stdin.split())\n    a, b, c = map(int, (a, b, c))\n    if a == b == c:\n        return str(c)\n    if a == b:\n        return str(c * (c + 1) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2) + str(c * (c + 9) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2) + str(c * (c + 9) // 2) + str(c * (c + 10) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2) + str(c * (c + 9) // 2) + str(c * (c + 10) // 2) + str(c * (c + 11) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2) + str(c * (c + 9) // 2) + str(c * (c + 10) // 2) + str(c * (c + 11) // 2) + str(c * (c + 12) // 2)\n    if a == b:\n        return str(c * (c + 1) // 2) + str(c * (c + 2) // 2) + str(c * (c + 3) // 2) + str(c * (c + 4) // 2) + str(c * (c + 5) // 2) + str(c * (c + 6) // 2) + str(c * (c + 7) // 2) + str(c * (c + 8) // 2) + str(c * (c + 9) // 2) + str(c * (c + 10) // 2) + str(c * (c + 11) // 2) + str(c * (c + 12) // 2) + str(c * (c + 13) // 2)\n    if a"
    },
    {
        "number": 3579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    s = w * h\n    if s % 2 == 0:\n        s = s // 2\n    else:\n        s = (s + 1) // 2\n    area = (a * b) // s\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area = area // 2\n    area ="
    },
    {
        "number": 3580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    for i in range(q):\n        start, end = map(int, stdin.split())\n        if start > end:\n            continue\n        if a[start] == b[end]:\n            print(a[start])\n            return\n        if a[start] < b[end]:\n            a[start], a[end] = a[end], a[start]\n        else:\n            a[start], a[end] = a[end], a[start]\n    print(a[-1])\n    return\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= q <= 10^5\n1 <= a_i, b_i <= 10^5\n\n-----Time complexity-----\nO(n^2)\n\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(n)\n\n-----Algorithm-----\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    ball_list = []\n    for _ in range(N):\n        ball_list.append(list(map(float, stdin.split())))\n    ball_list.sort(key=lambda x: x[0])\n    ball_list.sort(key=lambda x: x[1])\n    ball_list.sort(key=lambda x: x[2])\n    ball_list.sort(key=lambda x: x[3])\n    ball_list.sort(key=lambda x: x[4])\n    ball_list.sort(key=lambda x: x[5])\n    ball_list.sort(key=lambda x: x[6])\n    ball_list.sort(key=lambda x: x[7])\n    ball_list.sort(key=lambda x: x[8])\n    ball_list.sort(key=lambda x: x[9])\n    ball_list.sort(key=lambda x: x[10])\n    ball_list.sort(key=lambda x: x[11])\n    ball_list.sort(key=lambda x: x[12])\n    ball_list.sort(key=lambda x: x[13])\n    ball_list.sort(key=lambda x: x[14])\n    ball_list.sort(key=lambda x: x[15])\n    ball_list.sort(key=lambda x: x[16])\n    ball_list.sort(key=lambda x: x[17])\n    ball_list.sort(key=lambda x: x[18])\n    ball_list.sort(key=lambda x: x[19])\n    ball_list.sort(key=lambda x: x[20])\n    ball_list.sort(key=lambda x: x[21])\n    ball_list.sort(key=lambda x: x[22])\n    ball_list.sort(key=lambda x: x[23])\n    ball_list.sort(key=lambda x: x[24])\n    ball_list.sort(key=lambda x: x[25])\n    ball_list.sort(key=lambda x: x[26])\n    ball_list.sort(key=lambda x: x[27])\n    ball_list.sort(key=lambda x: x[28])\n    ball_list.sort(key=lambda x: x[29])\n    ball_list.sort(key=lambda x: x[30])\n    ball_list.sort(key=lambda x: x[31])\n    ball_list.sort(key=lambda x: x[32])\n    ball_list.sort(key=lambda x: x[33])\n    ball_list.sort(key=lambda x: x[34])\n    ball_list.sort(key=lambda x: x[35])\n    ball_list.sort(key=lambda x: x[36])\n    ball_list.sort(key=lambda x: x[37])\n    ball_list.sort(key=lambda x: x[38])\n    ball_list.sort(key=lambda x: x[39])\n    ball_list.sort(key=lambda x: x[40])\n    ball_list.sort(key=lambda x: x[41])\n    ball_list.sort(key=lambda x: x[42])\n    ball_list.sort(key=lambda x: x[43])\n    ball_list.sort(key=lambda x: x[44])\n    ball_list.sort(key=lambda x: x[45])\n    ball_list.sort(key=lambda x: x[46])\n    ball_list.sort(key=lambda x: x[47])\n    ball_list.sort(key=lambda x: x[48])\n    ball_list.sort(key=lambda x: x[49])\n    ball_list.sort(key=lambda x: x[50])\n    ball_list.sort(key=lambda x: x[51])\n    ball_list.sort(key=lambda x: x[52])\n    ball_list.sort(key=lambda x: x[53])\n    ball_list.sort(key=lambda x: x[54])\n    ball_list.sort(key=lambda x: x[55])\n    ball_list.sort(key=lambda x: x[56])\n    ball_list.sort(key=lambda x: x[57])\n    ball_list.sort(key=lambda x: x[58])\n    ball_list.sort(key=lambda x: x[59])\n    ball_list.sort(key=lambda x: x[60])\n    ball_list.sort(key=lambda x: x[61])\n    ball_list.sort(key=lambda x: x[62])\n    ball_list.sort(key=lambda x: x[63])\n    ball_list.sort(key=lambda x: x"
    },
    {
        "number": 3582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    if a[0] == b[0]:\n        return a[0]\n    if a[-1] == b[-1]:\n        return a[-1]\n    if a[0] < b[0]:\n        return a[0]\n    if a[-1] < b[-1]:\n        return a[-1]\n    if a[0] > b[0]:\n        return a[0]\n    if a[-1] > b[-1]:\n        return a[-1]\n    return a[0]\n\ndef"
    },
    {
        "number": 3583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 2000:\n        return \"Error\"\n    x = [int(i) for i in stdin.split()]\n    y = [int(i) for i in stdin.split()]\n    x.sort()\n    y.sort()\n    if len(x)!= len(y):\n        return \"Error\"\n    if len(x) == 1:\n        return str(x[0])\n    if len(x) == 2:\n        return str(x[0] + x[1])\n    if len(x) == 3:\n        return str(x[0] + x[1] + x[2])\n    if len(x) == 4:\n        return str(x[0] + x[1] + x[2] + x[3])\n    if len(x) == 5:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4])\n    if len(x) == 6:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5])\n    if len(x) == 7:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6])\n    if len(x) == 8:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7])\n    if len(x) == 9:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8])\n    if len(x) == 10:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9])\n    if len(x) == 11:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10])\n    if len(x) == 12:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11])\n    if len(x) == 13:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12])\n    if len(x) == 14:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13])\n    if len(x) == 15:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14])\n    if len(x) == 16:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15])\n    if len(x) == 17:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16])\n    if len(x) == 18:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17])\n    if len(x) == 19:\n        return str(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18])\n    if len(x) == 20:\n        return str(x[0] + x[1] + x[2] + x["
    },
    {
        "number": 3584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    x -= 1\n    y -= 1\n    if x < 0:\n        x = N - x\n    if y < 0:\n        y = M - y\n    if x < 0 or y < 0:\n        return 0\n    if x > N - x:\n        x = N - x\n    if y > M - y:\n        y = M - y\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x > y:\n        x, y = y, x\n    if x < y:\n        x, y = y, x\n    if x == y:\n        return K\n    if x > y:\n        "
    },
    {
        "number": 3585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    if m == 0:\n        return \"0\"\n    if k == 0:\n        return \"0\"\n    if m == 1:\n        return \"1\"\n    if k == 1:\n        return \"1\"\n    if m == 2:\n        return \"1\"\n    if k == 2:\n        return \"1\"\n    if m == 3:\n        return \"1\"\n    if k == 3:\n        return \"1\"\n    if m == 4:\n        return \"1\"\n    if k == 4:\n        return \"1\"\n    if m == 5:\n        return \"1\"\n    if k == 5:\n        return \"1\"\n    if m == 6:\n        return \"1\"\n    if k == 6:\n        return \"1\"\n    if m == 7:\n        return \"1\"\n    if k == 7:\n        return \"1\"\n    if m == 8:\n        return \"1\"\n    if k == 8:\n        return \"1\"\n    if m == 9:\n        return \"1\"\n    if k == 9:\n        return \"1\"\n    if m == 10:\n        return \"1\"\n    if k == 10:\n        return \"1\"\n    if m == 11:\n        return \"1\"\n    if k == 11:\n        return \"1\"\n    if m == 12:\n        return \"1\"\n    if k == 12:\n        return \"1\"\n    if m == 13:\n        return \"1\"\n    if k == 13:\n        return \"1\"\n    if m == 14:\n        return \"1\"\n    if k == 14:\n        return \"1\"\n    if m == 15:\n        return \"1\"\n    if k == 15:\n        return \"1\"\n    if m == 16:\n        return \"1\"\n    if k == 16:\n        return \"1\"\n    if m == 17:\n        return \"1\"\n    if k == 17:\n        return \"1\"\n    if m == 18:\n        return \"1\"\n    if k == 18:\n        return \"1\"\n    if m == 19:\n        return \"1\"\n    if k == 19:\n        return \"1\"\n    if m == 20:\n        return \"1\"\n    if k == 20:\n        return \"1\"\n    if m == 21:\n        return \"1\"\n    if k == 21:\n        return \"1\"\n    if m == 22:\n        return \"1\"\n    if k == 22:\n        return \"1\"\n    if m == 23:\n        return \"1\"\n    if k == 23:\n        return \"1\"\n    if m == 24:\n        return \"1\"\n    if k == 24:\n        return \"1\"\n    if m == 25:\n        return \"1\"\n    if k == 25:\n        return \"1\"\n    if m == 26:\n        return \"1\"\n    if k == 26:\n        return \"1\"\n    if m == 27:\n        return \"1\"\n    if k == 27:\n        return \"1\"\n    if m == 28:\n        return \"1\"\n    if k == 28:\n        return \"1\"\n    if m == 29:\n        return \"1\"\n    if k == 29:\n        return \"1\"\n    if m == 30:\n        return \"1\"\n    if k == 30:\n        return \"1\"\n    if m == 31:\n        return \"1\"\n    if k == 31:\n        return \"1\"\n    if m == 32:\n        return \"1\"\n    if k == 32:\n        return \"1\"\n    if m == 33:\n        return \"1\"\n    if k == 33:\n        return \"1\"\n    if m == 34:\n        return \"1\"\n    if k == 34:\n        return \"1\"\n    if m == 35:\n        return \"1\"\n    if k == 35:\n        return \"1\"\n    if m == 36:\n        return \"1\"\n    if k == 36:\n        return \"1\"\n    if m == 37:\n        return \"1\"\n    if k == 37:\n        return \"1\"\n    if m == 38:\n        return \"1\"\n    if k == 38:\n        return \"1\"\n    if m == 39:\n        return \"1\"\n    if k == 39:\n        return \"1\"\n    if m == 40:\n        return \"1\"\n    if k == 40:\n        return \"1\"\n    if m == 41:\n        return \"1\"\n    if k == 41:\n        return \"1\"\n    if m == 42:\n        return \"1\"\n    if k == 42:\n        return \"1\"\n    if m == 43:\n        return \"1\"\n    if k == 43:\n        return \"1\"\n    if m == 44:\n        return \"1\"\n    if k == 44:\n        return \"1\"\n    if m == 45:\n        return \"1\"\n    if k == 45:\n        return \"1\"\n    if m == 46:\n        return \"1\"\n    if k == 46:\n"
    },
    {
        "number": 3586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.split()))\n    d = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] + s[j] == d:\n                d = s[i] + s[j]\n    return str(d)\n\nSample Input:\n5\n2\n3\n5\n7\n12\nSample Output:\n12\ndef"
    },
    {
        "number": 3587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    s = [0] * N\n    for i in range(N):\n        s[i] = int(stdin.strip(), 2)\n    s.sort()\n    for i in range(N):\n        if s[i] == 0:\n            return -1\n    return s[-1]\n\nSample Input:\n5\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n"
    },
    {
        "number": 3588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return str(sum(map(int, (str(N) + str(D)).split())))\n"
    },
    {
        "number": 3589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * n\n    for i in range(1, n + 1):\n        a[i] = int(stdin[i - 1])\n    for i in range(n - 2, -1, -1):\n        a[i] = a[i + 1] * a[i + 2]\n    return str(a[0])\n\nSample Output:\n3 7 4 6 5 7 2 15 2\n"
    },
    {
        "number": 3590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return str(a)\n    if a % b == 0:\n        return str(a // b)\n    return str(a // b) + \".\" + str(a % b)\n\nSample Output:\n40.0000000000\ndef"
    },
    {
        "number": 3591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    heights.sort()\n    answer = 0\n    for i in range(k):\n        answer += (n - heights[i])\n    return str(answer)\n\nSample Output:\n1\n1\nExplanation:\nThe first photo has a height of 1, so the answer is 1.\nThe second photo has a height of 2, so the answer is 2.\nThe third photo has a height of 3, so the answer is 3.\nThe fourth photo has a height of 4, so the answer is 4.\nThe fifth photo has a height of 5, so the answer is 5.\nThe sixth photo has a height of 6, so the answer is 6.\nThe seventh photo has a height of 7, so the answer is 7.\nThe eighth photo has a height of 8, so the answer is 8.\nThe ninth photo has a height of 9, so the answer is 9.\nThe tenth photo has a height of 10, so the answer is 10.\nThe eleventh photo has a height of 11, so the answer is 11.\nThe twelfth photo has a height of 12, so the answer is 12.\n\"\"\"\n\ndef"
    },
    {
        "number": 3592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p_t, p_1, p_2 = map(float, stdin.split())\n    if p_t < 10000:\n        return str(int(p_t))\n    if p_t < 100000:\n        return str(int(p_t / 100000)) + \" \" + str(int(p_t / 100000 * 100))\n    if p_t < 1000000:\n        return str(int(p_t / 1000000)) + \" \" + str(int(p_t / 1000000 * 100000))\n    if p_t < 10000000:\n        return str(int(p_t / 10000000)) + \" \" + str(int(p_t / 10000000 * 1000000))\n    if p_t < 100000000:\n        return str(int(p_t / 100000000)) + \" \" + str(int(p_t / 100000000 * 1000000000))\n    if p_t < 1000000000:\n        return str(int(p_t / 1000000000)) + \" \" + str(int(p_t / 1000000000 * 100000000000000))\n    if p_t < 10000000000:\n        return str(int(p_t / 10000000000)) + \" \" + str(int(p_t / 10000000000 * 1000000000000000))\n    if p_t < 10000000000000000:\n        return str(int(p_t / 10000000000000000)) + \" \" + str(int(p_t / 10000000000000000 * 10000000000000000000))\n    if p_t < 10000000000000000000000:\n        return str(int(p_t / 10000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000 * 100000000000000000000000))\n    if p_t < 10000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000 * 100000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000 * 100000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000 * 100000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000 * 100000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000 * 100000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) + \" \" + str(int(p_t / 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n    if p_t < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:\n        return str(int"
    },
    {
        "number": 3593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    board = [list(map(int, input().split())) for _ in range(N)]\n    max_sum = 0\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 0:\n                continue\n            for k in range(N):\n                if board[k][j] == 0:\n                    continue\n                if board[i][k] == board[k][j]:\n                    continue\n                if board[i][j] + board[k][j] > max_sum:\n                    max_sum = board[i][j] + board[k][j]\n    return str(max_sum)\n\ndef"
    },
    {
        "number": 3594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    numbers = list(map(int, stdin.strip().split()))\n    numbers.sort()\n    for i in range(n):\n        if numbers[i] % 2 == 0:\n            numbers[i] = numbers[i] // 2\n        else:\n            numbers[i] = numbers[i] * 3 + 1\n    return''.join(map(str, numbers))\n\nSample Output:\n2 1 4\nExplanation:\nOdd gets $4$, Even gets $2$ and Ingmariay gets $1$.\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 sec\n\n-----Input Format\nFirst line of input contains an integer $n$ (1\u2264n\u22641000).\n\nNext $n$ lines each contain a single character of the name of the starting player (either \u2019O\u2019, \u2019E\u2019 or \u2019I\u2019), followed by a space and then the starting number for that round, in the range $[1, 10000]$.\n\nConstraints\n1 <= n <= 10^5\n\n2 <= stdin.length <= 1000\n\n3 <= stdin[i] <= 10^9\n\nOutput Format\nOutput a single line with the score at the end of the day for each of the three contestants, in the order \u201cOdd\u201d, \u201cEven\u201d, \u201cIngmariay\u201d.\n\nSample Input:\n1\nO 4\nSample Output:\n2 1 4\nExplanation:\nOdd gets $4$, Even gets $2$ and Ingmariay gets $1$.\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 sec\n\n-----Input Format\nFirst line of input contains an integer $n$ (1\u2264n\u22641000).\n\nNext $n$ lines each contain a single character of the name of the starting player (either \u2019O\u2019, \u2019E\u2019 or \u2019I\u2019), followed by a space and then the starting number for that round, in the range $[1, 10000]$.\n\nConstraints\n1 <= n <= 10^5\n\n2 <= stdin.length <= 1000\n\n3 <= stdin[i] <= 10^9\n\nOutput Format\nOutput a single line with the score at the end of the day for each of the three contestants, in the order \u201cOdd\u201d, \u201cEven\u201d, \u201cIngmariay\u201d.\n\nSample Input:\n1\nO 4\nSample Output:\n2 1 4\nExplanation:\nOdd gets $4$, Even gets $2$ and Ingmariay gets $1$.\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 sec\n\n-----Input Format\nFirst line of input contains an integer $n$ (1\u2264n\u22641000).\n\nNext $n$ lines each contain a single character of the name of the starting player (either \u2019O\u2019, \u2019E\u2019 or \u2019I\u2019), followed by a space and then the starting number for that round, in the range $[1, 10000]$.\n\nConstraints\n1 <= n <= 10^5\n\n2 <= stdin.length <= 1000\n\n3 <= stdin[i] <= 10^9\n\nOutput Format\nOutput a single line with the score at the end of the day for each of the three contestants, in the order \u201cOdd\u201d, \u201cEven\u201d, \u201cIngmariay\u201d.\n\nSample Input:\n1\nO 4\nSample Output:\n2 1 4\nExplanation:\nOdd gets $4$, Even gets $2$ and Ingmariay gets $1$.\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 sec\n\n-----Input Format\nFirst line of input contains an integer $n$ (1\u2264n\u22641000).\n\nNext $n$ lines each contain a single character of the name of the starting player (either \u2019O\u2019, \u2019E\u2019 or \u2019I\u2019), followed by a space and then the starting number for that round, in the range $[1, 10000]$.\n\nConstraints\n1 <= n <= 10^5\n\n2 <= stdin.length <= 1000\n\n3 <= stdin[i] <= 10^9\n\nOutput Format\nOutput a single line with the score at the end of the day for each of the three contestants, in the order \u201cOdd\u201d, \u201cEven\u201d, \u201cIngmariay\u201d.\n\nSample Input:\n1\nO 4\nSample Output:\n2 1 4\nExplanation:\nOdd gets $4$, Even gets $2$ and Ingmariay gets $1$.\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 sec\n\n-----Input Format\nFirst line of input contains an integer $n$ (1\u2264n\u22641000).\n\nNext $n$ lines each contain a single character of the name of the starting player (either \u2019O\u2019, \u2019E\u2019 or \u2019I\u2019), followed by a space and then the starting number for that round, in the range $[1, 10000]$.\n\nConstraints\n1 <= n <= 10^5\n\n2 <= stdin.length <= 1000\n\n3 <= stdin[i] <= 10^9\n\nOutput Format\nOutput a single line with the score at the end of the day for each of the three contestants, in the order \u201cOdd\u201d, \u201cEven\u201d, \u201cIngmariay\u201d.\n\nSample Input:\n1\nO 4\nSample Output:\n2 1 4\nExplanation:\nOdd gets $4$, Even gets $2$ and Ingmariay gets $1$.\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 sec\n\n-----Input Format\nFirst line of input contains an integer $n"
    },
    {
        "number": 3595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, e = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if r == 1:\n        if e == 0:\n            return str(x + y)\n        else:\n            return str(x + y + e)\n    elif r == 2:\n        if e == 0:\n            return str(x + y + e)\n        else:\n            return str(x + y + e + e)\n    elif r == 3:\n        if e == 0:\n            return str(x + y + e + e)\n        else:\n            return str(x + y + e + e + e)\n    elif r == 4:\n        if e == 0:\n            return str(x + y + e + e + e)\n        else:\n            return str(x + y + e + e + e + e)\n    elif r == 5:\n        if e == 0:\n            return str(x + y + e + e + e + e)\n        else:\n            return str(x + y + e + e + e + e + e)\n    elif r == 6:\n        if e == 0:\n            return str(x + y + e + e + e + e + e)\n        else:\n            return str(x + y + e + e + e + e + e + e + e)\n    elif r == 7:\n        if e == 0:\n            return str(x + y + e + e + e + e + e + e + e)\n        else:\n            return str(x + y + e + e + e + e + e + e + e + e + e)\n    elif r == 8:\n        if e == 0:\n            return str(x + y + e + e + e + e + e + e + e + e + e)\n        else:\n            return str(x + y + e + e + e + e + e + e + e + e + e + e + e + e)\n    elif r == 9:\n        if e == 0:\n            return str(x + y + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e + e +"
    },
    {
        "number": 3596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n, k, r, s, l = map(int, stdin.split())\n    if a == b == c == n == k == r == s == l:\n        return '0'\n    if a == b == c == n == k == r == s == l:\n        return '1'\n    if a == b == c == n == k == r == s == l:\n        return '2'\n    if a == b == c == n == k == r == s == l:\n        return '3'\n    if a == b == c == n == k == r == s == l:\n        return '4'\n    if a == b == c == n == k == r == s == l:\n        return '5'\n    if a == b == c == n == k == r == s == l:\n        return '6'\n    if a == b == c == n == k == r == s == l:\n        return '7'\n    if a == b == c == n == k == r == s == l:\n        return '8'\n    if a == b == c == n == k == r == s == l:\n        return '9'\n    if a == b == c == n == k == r == s == l:\n        return '10'\n    if a == b == c == n == k == r == s == l:\n        return '11'\n    if a == b == c == n == k == r == s == l:\n        return '12'\n    if a == b == c == n == k == r == s == l:\n        return '13'\n    if a == b == c == n == k == r == s == l:\n        return '14'\n    if a == b == c == n == k == r == s == l:\n        return '15'\n    if a == b == c == n == k == r == s == l:\n        return '16'\n    if a == b == c == n == k == r == s == l:\n        return '17'\n    if a == b == c == n == k == r == s == l:\n        return '18'\n    if a == b == c == n == k == r == s == l:\n        return '19'\n    if a == b == c == n == k == r == s == l:\n        return '20'\n    if a == b == c == n == k == r == s == l:\n        return '21'\n    if a == b == c == n == k == r == s == l:\n        return '22'\n    if a == b == c == n == k == r == s == l:\n        return '23'\n    if a == b == c == n == k == r == s == l:\n        return '24'\n    if a == b == c == n == k == r == s == l:\n        return '25'\n    if a == b == c == n == k == r == s == l:\n        return '26'\n    if a == b == c == n == k == r == s == l:\n        return '27'\n    if a == b == c == n == k == r == s == l:\n        return '28'\n    if a == b == c == n == k == r == s == l:\n        return '29'\n    if a == b == c == n == k == r == s == l:\n        return '30'\n    if a == b == c == n == k == r == s == l:\n        return '31'\n    if a == b == c == n == k == r == s == l:\n        return '32'\n    if a == b == c == n == k == r == s == l:\n        return '33'\n    if a == b == c == n == k == r == s == l:\n        return '34'\n    if a == b == c == n == k == r == s == l:\n        return '35'\n    if a == b == c == n == k == r == s == l:\n        return '36'\n    if a == b == c == n == k == r == s == l:\n        return '37'\n    if a == b == c == n == k == r == s == l:\n        return '38'\n    if a == b == c == n == k == r"
    },
    {
        "number": 3597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, l, h, r = map(int, stdin.split())\n    if w > 120 or l > 5 or h > 5 or r > 5:\n        return \"impossible\"\n    if w == 0 or l == 0 or h == 0 or r == 0:\n        return \"impossible\"\n    if w == 1 or l == 1 or h == 1 or r == 1:\n        return \"impossible\"\n    if w == 2 or l == 2 or h == 2 or r == 2:\n        return \"impossible\"\n    if w == 3 or l == 3 or h == 3 or r == 3:\n        return \"impossible\"\n    if w == 4 or l == 4 or h == 4 or r == 4:\n        return \"impossible\"\n    if w == 5 or l == 5 or h == 5 or r == 5:\n        return \"impossible\"\n    if w == 6 or l == 6 or h == 6 or r == 6:\n        return \"impossible\"\n    if w == 7 or l == 7 or h == 7 or r == 7:\n        return \"impossible\"\n    if w == 8 or l == 8 or h == 8 or r == 8:\n        return \"impossible\"\n    if w == 9 or l == 9 or h == 9 or r == 9:\n        return \"impossible\"\n    if w == 10 or l == 10 or h == 10 or r == 10:\n        return \"impossible\"\n    if w == 11 or l == 11 or h == 11 or r == 11:\n        return \"impossible\"\n    if w == 12 or l == 12 or h == 12 or r == 12:\n        return \"impossible\"\n    if w == 13 or l == 13 or h == 13 or r == 13:\n        return \"impossible\"\n    if w == 14 or l == 14 or h == 14 or r == 14:\n        return \"impossible\"\n    if w == 15 or l == 15 or h == 15 or r == 15:\n        return \"impossible\"\n    if w == 16 or l == 16 or h == 16 or r == 16:\n        return \"impossible\"\n    if w == 17 or l == 17 or h == 17 or r == 17:\n        return \"impossible\"\n    if w == 18 or l == 18 or h == 18 or r == 18:\n        return \"impossible\"\n    if w == 19 or l == 19 or h == 19 or r == 19:\n        return \"impossible\"\n    if w == 20 or l == 20 or h == 20 or r == 20:\n        return \"impossible\"\n    if w == 21 or l == 21 or h == 21 or r == 21:\n        return \"impossible\"\n    if w == 22 or l == 22 or h == 22 or r == 22:\n        return \"impossible\"\n    if w == 23 or l == 23 or h == 23 or r == 23:\n        return \"impossible\"\n    if w == 24 or l == 24 or h == 24 or r == 24:\n        return \"impossible\"\n    if w == 25 or l == 25 or h == 25 or r == 25:\n        return \"impossible\"\n    if w == 26 or l == 26 or h == 26 or r == 26:\n        return \"impossible\"\n    if w == 27 or l == 27 or h == 27 or r == 27:\n        return \"impossible\"\n    if w == 28 or l == 28 or h == 28 or r == 28:\n        return \"impossible\"\n    if w == 29 or l == 29 or h == 29 or r == 29:\n        return \"impossible\"\n    if w == 30 or l == 30 or h == 30 or r == 30:\n        return \"impossible\"\n    if w == 31 or l == 31 or h == 31 or r == 31:\n        return \"impossible\"\n    if w == 32 or l == 32 or h == 32 or r == 32:\n        return \"impossible\"\n    if w == 33 or l == 33 or h == 33 or r == 33:\n        return \"impossible\"\n    if w == 34 or l == 34 or h == 34 or r == 34:\n        return \"impossible\"\n    if w == 35 or l == 35 or h == 35 or r == 35:\n        return \"impossible\"\n    if w == 36 or l == 36 or h == 36 or r == 36:\n        return \"impossible\"\n    if w == 37 or l"
    },
    {
        "number": 3598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = [int(i) for i in stdin.split()]\n    m.sort()\n    m = [str(i) for i in m]\n    m = ''.join(m)\n    m = m.replace('0', '1').replace('1', '0').replace('8', '9').replace('9', '8')\n    m = m.replace('6', '9').replace('9', '6')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m.replace('0', '1').replace('1', '0').replace('2', '2').replace('3', '3').replace('4', '4').replace('5', '5').replace('6', '6').replace('7', '7').replace('8', '8')\n    m = m."
    },
    {
        "number": 3599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, N = map(int, stdin.split())\n    break_list = []\n    for i in range(N):\n        break_list.append(int(stdin.split()[i]))\n    break_list.sort()\n    for i in range(N):\n        if break_list[i] == break_list[i+1]:\n            break_list[i] = break_list[i+1]\n            break_list[i+1] = 0\n    return''.join(map(str, break_list))\n\nSample Output:\n0 2 4\nExplanation:\nThe musicians will be in the same order as they were given in the input.\n\"\"\"\n\ndef"
    },
    {
        "number": 3600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    intervals = []\n    for i in range(n):\n        intervals.append(list(map(int, stdin.split())))\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x"
    },
    {
        "number": 3601,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    y = [int(i) for i in stdin.split()]\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.sort()\n    y.sort()\n    x.append(x[-1] + 30000)\n    y.append(y[-1] + 30000)\n    x.append(x[-1]"
    },
    {
        "number": 3602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, k = map(int, stdin.split())\n    lamps = [list(map(int, input().split())) for _ in range(k)]\n    \n    def check(lamps):\n        for i in range(k):\n            for j in range(n):\n                if lamps[i][j] == 1:\n                    if j + 1 < n:\n                        if lamps[i][j + 1] == 1:\n                            return False\n                    if j - 1 >= 0:\n                        if lamps[i][j - 1] == 1:\n                            return False\n        return True\n    \n    def check_lamps(lamps):\n        for i in range(k):\n            for j in range(n):\n                if lamps[i][j] == 1:\n                    if j + 1 < n:\n                        if lamps[i][j + 1] == 1:\n                            return False\n                    if j - 1 >= 0:\n                        if lamps[i][j - 1] == 1:\n                            return False\n        return True\n    \n    def check_lamps_2(lamps):\n        for i in range(k):\n            for j in range(n):\n                if lamps[i][j] == 1:\n                    if j + 1 < n:\n                        if lamps[i][j + 1] == 1:\n                            return False\n                    if j - 1 >= 0:\n                        if lamps[i][j - 1] == 1:\n                            return False\n        return True\n    \n    if check(lamps):\n        return 1\n    if check_lamps(lamps):\n        return 1\n    if check_lamps_2(lamps):\n        return 1\n    return 0"
    },
    {
        "number": 3603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    languages = list(map(int, stdin.split()))\n    languages.sort()\n    languages = [languages[i] for i in range(n)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]\n    languages.sort()\n    languages = [languages[i] for i in range(m)]"
    },
    {
        "number": 3604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    sensors = []\n    for i in range(n):\n        sensors.append(list(map(int, stdin.split())))\n    sensors.sort(key=lambda x: x[0])\n    sensors.sort(key=lambda x: x[1])\n    sensors = [s[0] for s in sensors]\n    sensors.sort()\n    for i in range(n):\n        if sensors[i] == sensors[i+1]:\n            sensors[i] = sensors[i+1]\n            sensors[i+1] = -1\n    return''.join(map(str, sensors))\n\nSample Output:\n2\n1 2\ndef"
    },
    {
        "number": 3605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        answer += abs(a[i] - a[i+k-1])\n    return str(answer)\n\nSample Input:\n10 2\n1 3 5 7 9 11 13 15 17 16\nSample Output:\n1\ndef"
    },
    {
        "number": 3606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    X, Y = map(int, stdin.split())\n    \n    # 1.\n    if K == 1:\n        return str(X + 1)\n    \n    # 2.\n    if K == 2:\n        return str(X + 1) + str(Y - 1)\n    \n    # 3.\n    if K == 3:\n        return str(X + 1) + str(Y - 1) + str(X - 1)\n    \n    # 4.\n    if K == 4:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1)\n    \n    # 5.\n    if K == 5:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1)\n    \n    # 6.\n    if K == 6:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1)\n    \n    # 7.\n    if K == 7:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1)\n    \n    # 8.\n    if K == 8:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1)\n    \n    # 9.\n    if K == 9:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1)\n    \n    # 10.\n    if K == 10:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 11.\n    if K == 11:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 12.\n    if K == 12:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 13.\n    if K == 13:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 14.\n    if K == 14:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 15.\n    if K == 15:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 16.\n    if K == 16:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 17.\n    if K == 17:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 18.\n    if K == 18:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 19.\n    if K == 19:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 20.\n    if K == 20:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) + str(X + 1) + str(Y - 1) + str(X + 1) + str(Y + 1) + str(X + 1) + str(Y + 1)\n    \n    # 21.\n    if K == 21:\n        return str(X + 1) + str(Y - 1) + str(X - 1) + str(Y + 1) +"
    },
    {
        "number": 3607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\ndef"
    },
    {
        "number": 3608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"1\"\n    if n == 5:\n        return \"1\"\n    if n == 6:\n        return \"1\"\n    if n == 7:\n        return \"1\"\n    if n == 8:\n        return \"1\"\n    if n == 9:\n        return \"1\"\n    if n == 10:\n        return \"1\"\n    if n == 11:\n        return \"1\"\n    if n == 12:\n        return \"1\"\n    if n == 13:\n        return \"1\"\n    if n == 14:\n        return \"1\"\n    if n == 15:\n        return \"1\"\n    if n == 16:\n        return \"1\"\n    if n == 17:\n        return \"1\"\n    if n == 18:\n        return \"1\"\n    if n == 19:\n        return \"1\"\n    if n == 20:\n        return \"1\"\n    if n == 21:\n        return \"1\"\n    if n == 22:\n        return \"1\"\n    if n == 23:\n        return \"1\"\n    if n == 24:\n        return \"1\"\n    if n == 25:\n        return \"1\"\n    if n == 26:\n        return \"1\"\n    if n == 27:\n        return \"1\"\n    if n == 28:\n        return \"1\"\n    if n == 29:\n        return \"1\"\n    if n == 30:\n        return \"1\"\n    if n == 31:\n        return \"1\"\n    if n == 32:\n        return \"1\"\n    if n == 33:\n        return \"1\"\n    if n == 34:\n        return \"1\"\n    if n == 35:\n        return \"1\"\n    if n == 36:\n        return \"1\"\n    if n == 37:\n        return \"1\"\n    if n == 38:\n        return \"1\"\n    if n == 39:\n        return \"1\"\n    if n == 40:\n        return \"1\"\n    if n == 41:\n        return \"1\"\n    if n == 42:\n        return \"1\"\n    if n == 43:\n        return \"1\"\n    if n == 44:\n        return \"1\"\n    if n == 45:\n        return \"1\"\n    if n == 46:\n        return \"1\"\n    if n == 47:\n        return \"1\"\n    if n == 48:\n        return \"1\"\n    if n == 49:\n        return \"1\"\n    if n == 50:\n        return \"1\"\n    if n == 51:\n        return \"1\"\n    if n == 52:\n        return \"1\"\n    if n == 53:\n        return \"1\"\n    if n == 54:\n        return \"1\"\n    if n == 55:\n        return \"1\"\n    if n == 56:\n        return \"1\"\n    if n == 57:\n        return \"1\"\n    if n == 58:\n        return \"1\"\n    if n == 59:\n        return \"1\"\n    if n == 60:\n        return \"1\"\n    if n == 61:\n        return \"1\"\n    if n == 62:\n        return \"1\"\n    if n == 63:\n        return \"1\"\n    if n == 64:\n        return \"1\"\n    if n == 65:\n        return \"1\"\n    if n == 66:\n        return \"1\"\n    if n == 67:\n        return \"1\"\n    if n == 68:\n        return \"1\"\n    if n == 69:\n        return \"1\"\n    if n == 70:\n        return \"1\"\n    if n == 71:\n        return \"1\"\n    if n == 72:\n        return \"1\"\n    if n == 73:\n        return \"1\"\n    if n == 74:\n        return \"1\"\n    if n == 75:\n        return \"1\"\n    if n == 76:\n        return \"1\"\n    if n == 77:\n        return \"1\"\n    if n == 78:\n        return \"1\"\n    if n == 79:\n        return \"1\"\n    if n == 80:\n        return \"1\"\n    if n == 81:\n        return \"1\"\n    if n == 82:\n        return \"1\"\n    if n == 83:\n        return \"1\"\n    if n == 84:\n        return \"1\"\n    if n == 85:\n        return \"1\"\n    if n == 86:\n        return \"1\"\n    if n == 87:\n        return \"1\"\n    if n == 88:\n        return \"1\"\n    if n == 89:\n        return \"1\"\n    if n == 90:\n        return \"1\"\n    if n == 91:\n        return \"1\"\n    if n == 92:\n        return \"1\"\n    if n == 93:\n        return \"1\"\n    if n == 94:\n        return \"1\"\n    if n == 95:\n        return \"1\"\n    if n == 96:\n        return \"1\"\n    if n == 97:\n        return \"1\"\n    if n == 98:\n        return \"1\"\n    if n == 99:\n        return \"1\"\n    if n == 100:\n        return \"1\"\n    if n == 101:\n        return \"1\"\n    if n == 102:\n        return \"1\"\n    if n == 103:\n        return \"1\"\n    if n == 104:\n        return \"1\"\n    if n == 105:\n        return \"1\"\n    if n == 106:\n        return \"1\"\n    if n == 107:\n        return \"1\"\n    if n == 108:\n        return \"1\"\n    if n == 109:\n        return \"1\"\n    if n == 110:\n        return \"1\"\n    if n == 111:\n        return \"1\"\n    if n == 112:\n        return \"1\"\n    if n == 113:\n        return \"1\"\n    if n == 114:\n        return \"1\"\n    if n == 115:\n        return \"1\"\n    if n == 116:\n        return \"1\"\n    if n == 117:\n        return \"1\"\n    if n == 118:\n        return \"1\"\n    if n == 119:\n        return \"1\"\n    if n == 120:\n        return \"1\"\n    if n == 121:\n        return \"1\"\n    if n == 122:\n        return \"1\"\n    if n == 123:\n        return \"1\"\n    if n == 124:\n        return \"1\"\n    if n == 125:\n        return \"1\"\n    if n == 126:\n        return \"1"
    },
    {
        "number": 3609,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"L\"\n    if n == 2:\n        return \"R\"\n    if n == 3:\n        return \"R\"\n    if n == 4:\n        return \"R\"\n    if n == 5:\n        return \"R\"\n    if n == 6:\n        return \"R\"\n    if n == 7:\n        return \"R\"\n    if n == 8:\n        return \"R\"\n    if n == 9:\n        return \"R\"\n    if n == 10:\n        return \"R\"\n    if n == 11:\n        return \"R\"\n    if n == 12:\n        return \"R\"\n    if n == 13:\n        return \"R\"\n    if n == 14:\n        return \"R\"\n    if n == 15:\n        return \"R\"\n    if n == 16:\n        return \"R\"\n    if n == 17:\n        return \"R\"\n    if n == 18:\n        return \"R\"\n    if n == 19:\n        return \"R\"\n    if n == 20:\n        return \"R\"\n    if n == 21:\n        return \"R\"\n    if n == 22:\n        return \"R\"\n    if n == 23:\n        return \"R\"\n    if n == 24:\n        return \"R\"\n    if n == 25:\n        return \"R\"\n    if n == 26:\n        return \"R\"\n    if n == 27:\n        return \"R\"\n    if n == 28:\n        return \"R\"\n    if n == 29:\n        return \"R\"\n    if n == 30:\n        return \"R\"\n    if n == 31:\n        return \"R\"\n    if n == 32:\n        return \"R\"\n    if n == 33:\n        return \"R\"\n    if n == 34:\n        return \"R\"\n    if n == 35:\n        return \"R\"\n    if n == 36:\n        return \"R\"\n    if n == 37:\n        return \"R\"\n    if n == 38:\n        return \"R\"\n    if n == 39:\n        return \"R\"\n    if n == 40:\n        return \"R\"\n    if n == 41:\n        return \"R\"\n    if n == 42:\n        return \"R\"\n    if n == 43:\n        return \"R\"\n    if n == 44:\n        return \"R\"\n    if n == 45:\n        return \"R\"\n    if n == 46:\n        return \"R\"\n    if n == 47:\n        return \"R\"\n    if n == 48:\n        return \"R\"\n    if n == 49:\n        return \"R\"\n    if n == 50:\n        return \"R\"\n    if n == 51:\n        return \"R\"\n    if n == 52:\n        return \"R\"\n    if n == 53:\n        return \"R\"\n    if n == 54:\n        return \"R\"\n    if n == 55:\n        return \"R\"\n    if n == 56:\n        return \"R\"\n    if n == 57:\n        return \"R\"\n    if n == 58:\n        return \"R\"\n    if n == 59:\n        return \"R\"\n    if n == 60:\n        return \"R\"\n    if n == 61:\n        return \"R\"\n    if n == 62:\n        return \"R\"\n    if n == 63:\n        return \"R\"\n    if n == 64:\n        return \"R\"\n    if n == 65:\n        return \"R\"\n    if n == 66:\n        return \"R\"\n    if n == 67:\n        return \"R\"\n    if n == 68:\n        return \"R\"\n    if n == 69:\n        return \"R\"\n    if n == 70:\n        return \"R\"\n    if n == 71:\n        return \"R\"\n    if n == 72:\n        return \"R\"\n    if n == 73:\n        return \"R\"\n    if n == 74:\n        return \"R\"\n    if n == 75:\n        return \"R\"\n    if n == 76:\n        return \"R\"\n    if n == 77:\n        return \"R\"\n    if n == 78:\n        return \"R\"\n    if n == 79:\n        return \"R\"\n    if n == 80:\n        return \"R\"\n    if n == 81:\n        return \"R\"\n    if n == 82:\n        return \"R\"\n    if n == 83:\n        return \"R\"\n    if n == 84:\n        return \"R\"\n    if n == 85:\n        return \"R\"\n    if n == 86:\n        return \"R\"\n    if n == 87:\n        return \"R\"\n    if n == 88:\n        return \"R\"\n    if n == 89:\n        return \"R\"\n    if n == 90:\n        return \"R\"\n    if n == 91:\n        return \"R\"\n    if n == 92:\n        return \"R\"\n    if n == 93:\n        return \"R\"\n    if n == 94:\n        return \"R\"\n    if n == 95:\n        return \"R\"\n    if n == 96:\n        return \"R\"\n    if n == 97:\n        return \"R\"\n    if n == 98:\n        return \"R\"\n    if n == 99:\n        return \"R\"\n    if n == 100:\n        return \"R\"\n    if n == 101:\n        return \"R\"\n    if n == 102:\n        return \"R\"\n    if n == 103:\n        return \"R\"\n    if n == 104:\n        return \"R\"\n    if n == 105:\n        return \"R\"\n    if n == 106:\n        return \"R\"\n    if n == 107:\n        return \"R\"\n    if n == 108:\n        return \"R\"\n    if n == 109:\n        return \"R\"\n    if n == 110:\n        return \"R\"\n    if n == 111:\n        return \"R\"\n    if n == 112:\n        return \"R\"\n    if n == 113:\n        return \"R\"\n    if n == 114:\n        return \"R\"\n    "
    },
    {
        "number": 3610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    employees = [int(i) for i in stdin.split()]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <= 1999]\n    employees.sort()\n    employees = [i for i in employees if i >= 2000 and i <= 2999]\n    employees.sort()\n    employees = [i for i in employees if i >= 1000 and i <="
    },
    {
        "number": 3611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    u, v, w = map(int, stdin.split())\n    s, t = map(int, stdin.split())\n    \n    # get the shortest route from u to v\n    route = []\n    for i in range(N):\n        route.append(u - i)\n    route.sort()\n    \n    # get the shortest route from v to t\n    route = []\n    for i in range(N):\n        route.append(v - i)\n    route.sort()\n    \n    # get the shortest route from s to t\n    route = []\n    for i in range(N):\n        route.append(s - i)\n    route.sort()\n    \n    # get the shortest route from t to u\n    route = []\n    for i in range(N):\n        route.append(t - i)\n    route.sort()\n    \n    # get the shortest route from u to s\n    route = []\n    for i in range(N):\n        route.append(u - i)\n    route.sort()\n    \n    # get the shortest route from s to v\n    route = []\n    for i in range(N):\n        route.append(s - i)\n    route.sort()\n    \n    # get the shortest route from v to t\n    route = []\n    for i in range(N):\n        route.append(v - i)\n    route.sort()\n    \n    # get the shortest route from t to u\n    route = []\n    for i in range(N):\n        route.append(t - i)\n    route.sort()\n    \n    # get the shortest route from u to s\n    route = []\n    for i in range(N):\n        route.append(u - i)\n    route.sort()\n    \n    # get the shortest route from s to v\n    route = []\n    for i in range(N):\n        route.append(s - i)\n    route.sort()\n    \n    # get the shortest route from v to t\n    route = []\n    for i in range(N):\n        route.append(v - i)\n    route.sort()\n    \n    # get the shortest route from t to u\n    route = []\n    for i in range(N):\n        route.append(t - i)\n    route.sort()\n    \n    # get the shortest route from u to s\n    route = []\n    for i in range(N):\n        route.append(u - i)\n    route.sort()\n    \n    # get the shortest route from s to v\n    route = []\n    for i in range(N):\n        route.append(s - i)\n    route.sort()\n    \n    # get the shortest route from v to t\n    route = []\n    for i in range(N):\n        route.append(v - i)\n    route.sort()\n    \n    # get the shortest route from t to u\n    route = []\n    for i in range(N):\n        route.append(t - i)\n    route.sort()\n    \n    # get the shortest route from u to s\n    route = []\n    for i in range(N):\n        route.append(u - i)\n    route.sort()\n    \n    # get the shortest route from s to v\n    route = []\n    for i in range(N):\n        route.append(s - i)\n    route.sort()\n    \n    # get the shortest route from v to t\n    route = []\n    for i in range(N):\n        route.append(v - i)\n    route.sort()\n    \n    # get the shortest route from t to u\n    route = []\n    for i in range(N):\n        route.append(t - i)\n    route.sort()\n    \n    # get the shortest route from u to s\n    route = []\n    for i in range(N):\n        route.append(u - i)\n    route.sort()\n    \n    # get the shortest route from s to v\n    route = []\n    for i in range(N):\n        route.append(s - i)\n    route.sort()\n    \n    # get the shortest route from v to t\n    route = []\n    for i in range(N):\n        route.append(v - i)\n    route.sort()\n    \n    # get the shortest route from t to u\n    route = []\n    for i in range(N):\n        route.append(t - i)\n    route.sort()\n    \n    # get the shortest route from u to s\n    route = []\n    for i in range(N):\n        route.append(u - i)\n    route.sort()\n    \n    # get the shortest route from s to v\n    route = []\n    for i in range(N):\n        route.append(s - i)\n    route.sort()\n    \n    # get the shortest route from v to t\n    route = []\n    for i in range(N):\n        route.append(v - i)\n    route.sort()\n    \n    # get the shortest route from t to u\n    route = []\n    for i in range(N):\n        route.append(t - i)\n    route.sort()\n    \n    # get the shortest route from u to s\n    route = []\n    for i in range(N):\n        route.append(u - i)\n    route.sort()\n    \n    # get the shortest route from s to v\n    route = []\n    for i in range(N):\n        route.append(s - i)\n    route.sort()\n    \n    # get the shortest route from v to t\n    route = []\n    for i in range(N):\n        route.append(v - i)\n    route.sort()\n    \n    # get the shortest route from t to u\n    route = []\n    for i in range(N):\n        route.append(t - i)\n    route.sort()\n    \n    # get the shortest route from u to s\n    route = []\n    for i in range(N):\n        route.append(u - i)\n    route.sort()\n    \n    # get the shortest route from s to v\n    route = []\n    for i in range(N):\n        route.append(s - i)\n    route.sort()\n    \n    # get the shortest route from v to t\n    route = []\n    for i in range(N):\n        route.append(v - i)\n    route.sort()\n    \n    # get the shortest route from t to u\n    route = []\n    for i in range(N):\n        route.append(t - i)\n    route.sort()\n    \n    # get the shortest route from u to s\n    route = []\n    for i in range(N):\n        route.append(u - i)\n    route.sort()\n    \n    # get the shortest route from s to v\n    route = []\n    for i in range(N):\n        route.append(s - i)\n    route.sort()\n    \n    "
    },
    {
        "number": 3612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(float, stdin.split())\n    return str(abs(a - b) + abs(a - c) + abs(a - d))\n"
    },
    {
        "number": 3613,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    pref_list = [list(map(int, input().split())) for _ in range(N)]\n    pref_list.sort(key=lambda x: x[0])\n    answer = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if j == i:\n                continue\n            if pref_list[i][0] == pref_list[j][0] and pref_list[i][1] == pref_list[j][1]:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 3614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R, C = map(int, stdin.split())\n    petals = [int(stdin[i]) for i in range(N)]\n    petals.sort()\n    return str(petals[-1] - petals[0])\n"
    },
    {
        "number": 3615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    coverage = [float(i) for i in stdin.split()]\n    coverage.sort()\n    \n    def get_tower(coverage):\n        tower = 0\n        for i in range(len(coverage)):\n            if coverage[i] > tower:\n                tower = coverage[i]\n        return tower\n    \n    def get_tower_coverage(coverage):\n        tower_coverage = []\n        for i in range(len(coverage)):\n            if coverage[i] > tower_coverage[-1]:\n                tower_coverage.append(coverage[i])\n            else:\n                tower_coverage.append(coverage[i])\n                tower_coverage.append(coverage[i] + tower_coverage[-1])\n        return tower_coverage\n    \n    tower_coverage = get_tower_coverage(coverage)\n    \n    def get_tower_coverage_sum(tower_coverage):\n        tower_coverage_sum = 0\n        for i in range(len(tower_coverage)):\n            tower_coverage_sum += tower_coverage[i]\n        return tower_coverage_sum\n    \n    def get_tower_coverage_sum_2(tower_coverage):\n        tower_coverage_sum = 0\n        for i in range(len(tower_coverage)):\n            tower_coverage_sum += tower_coverage[i]\n            tower_coverage_sum += tower_coverage[i] + tower_coverage[i]\n        return tower_coverage_sum\n    \n    def get_tower_coverage_sum_3(tower_coverage):\n        tower_coverage_sum = 0\n        for i in range(len(tower_coverage)):\n            tower_coverage_sum += tower_coverage[i]\n            tower_coverage_sum += tower_coverage[i] + tower_coverage[i]\n            tower_coverage_sum += tower_coverage[i] + tower_coverage[i]\n        return tower_coverage_sum\n    \n    def get_tower_coverage_sum_4(tower_coverage):\n        tower_coverage_sum = 0\n        for i in range(len(tower_coverage)):\n            tower_coverage_sum += tower_coverage[i]\n            tower_coverage_sum += tower_coverage[i] + tower_coverage[i]\n            tower_coverage_sum += tower_coverage[i] + tower_coverage[i]\n        return tower_coverage_sum\n    \n    def get_tower_coverage_sum_5(tower_coverage):\n        tower_coverage_sum = 0\n        for i in range(len(tower_coverage)):\n            tower_coverage_sum += tower_coverage[i]\n            tower_coverage_sum += tower_coverage[i] + tower_coverage[i]\n            tower_coverage_sum += tower_coverage[i] + tower_coverage[i]\n        return tower_coverage_sum\n    \n    def get_tower_coverage_sum_6(tower_coverage):\n        tower_coverage_sum = 0\n        for i in range(len(tower_coverage)):\n            tower_coverage_sum += tower_coverage[i]\n            tower_coverage_sum += tower_coverage[i] + tower_coverage[i]\n            tower_coverage_sum += tower_coverage[i] + tower_coverage[i]\n        return tower_coverage_sum\n    \n    tower_coverage_sum = get_tower_coverage_sum(tower_coverage)\n    tower_coverage_sum_2 = get_tower_coverage_sum_2(tower_coverage)\n    tower_coverage_sum_3 = get_tower_coverage_sum_3(tower_coverage)\n    tower_coverage_sum_4 = get_tower_coverage_sum_4(tower_coverage)\n    tower_coverage_sum_5 = get_tower_coverage_sum_5(tower_coverage)\n    tower_coverage_sum_6 = get_tower_coverage_sum_6(tower_coverage)\n    \n    return max(tower_coverage_sum_2, tower_coverage_sum_3, tower_coverage_sum_4, tower_coverage_sum_5, tower_coverage_sum_6)"
    },
    {
        "number": 3616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    D = int(stdin.strip().split()[0])\n    days = []\n    for i in range(k):\n        days.append(int(stdin.strip().split()[i+1]))\n    days.sort()\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days[i] for i in range(k)]\n    days = [days"
    },
    {
        "number": 3617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1] + t)\n    a.sort()\n    a.append(a[-1]"
    },
    {
        "number": 3618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"1\"\n    if n == 5:\n        return \"1\"\n    if n == 6:\n        return \"1\"\n    if n == 7:\n        return \"1\"\n    if n == 8:\n        return \"1\"\n    if n == 9:\n        return \"1\"\n    if n == 10:\n        return \"1\"\n    if n == 11:\n        return \"1\"\n    if n == 12:\n        return \"1\"\n    if n == 13:\n        return \"1\"\n    if n == 14:\n        return \"1\"\n    if n == 15:\n        return \"1\"\n    if n == 16:\n        return \"1\"\n    if n == 17:\n        return \"1\"\n    if n == 18:\n        return \"1\"\n    if n == 19:\n        return \"1\"\n    if n == 20:\n        return \"1\"\n    if n == 21:\n        return \"1\"\n    if n == 22:\n        return \"1\"\n    if n == 23:\n        return \"1\"\n    if n == 24:\n        return \"1\"\n    if n == 25:\n        return \"1\"\n    if n == 26:\n        return \"1\"\n    if n == 27:\n        return \"1\"\n    if n == 28:\n        return \"1\"\n    if n == 29:\n        return \"1\"\n    if n == 30:\n        return \"1\"\n    if n == 31:\n        return \"1\"\n    if n == 32:\n        return \"1\"\n    if n == 33:\n        return \"1\"\n    if n == 34:\n        return \"1\"\n    if n == 35:\n        return \"1\"\n    if n == 36:\n        return \"1\"\n    if n == 37:\n        return \"1\"\n    if n == 38:\n        return \"1\"\n    if n == 39:\n        return \"1\"\n    if n == 40:\n        return \"1\"\n    if n == 41:\n        return \"1\"\n    if n == 42:\n        return \"1\"\n    if n == 43:\n        return \"1\"\n    if n == 44:\n        return \"1\"\n    if n == 45:\n        return \"1\"\n    if n == 46:\n        return \"1\"\n    if n == 47:\n        return \"1\"\n    if n == 48:\n        return \"1\"\n    if n == 49:\n        return \"1\"\n    if n == 50:\n        return \"1\"\n    if n == 51:\n        return \"1\"\n    if n == 52:\n        return \"1\"\n    if n == 53:\n        return \"1\"\n    if n == 54:\n        return \"1\"\n    if n == 55:\n        return \"1\"\n    if n == 56:\n        return \"1\"\n    if n == 57:\n        return \"1\"\n    if n == 58:\n        return \"1\"\n    if n == 59:\n        return \"1\"\n    if n == 60:\n        return \"1\"\n    if n == 61:\n        return \"1\"\n    if n == 62:\n        return \"1\"\n    if n == 63:\n        return \"1\"\n    if n == 64:\n        return \"1\"\n    if n == 65:\n        return \"1\"\n    if n == 66:\n        return \"1\"\n    if n == 67:\n        return \"1\"\n    if n == 68:\n        return \"1\"\n    if n == 69:\n        return \"1\"\n    if n == 70:\n        return \"1\"\n    if n == 71:\n        return \"1\"\n    if n == 72:\n        return \"1\"\n    if n == 73:\n        return \"1\"\n    if n == 74:\n        return \"1\"\n    if n == 75:\n        return \"1\"\n    if n == 76:\n        return \"1\"\n    if n == 77:\n        return \"1\"\n    if n == 78:\n        return \"1\"\n    if n == 79:\n        return \"1\"\n    if n == 80:\n        return \"1\"\n    if n == 81:\n        return \"1\"\n    if n == 82:\n        return \"1\"\n    if n == 83:\n        return \"1\"\n    if n == 84:\n        return \"1\"\n    if n == 85:\n        return \"1\"\n    if n == 86:\n        return \"1\"\n    if n == 87:\n        return \"1\"\n    if n == 88:\n        return \"1\"\n    if n == 89:\n        return \"1\"\n    if n == 90:\n        return \"1\"\n    if n == 91:\n        return \"1\"\n    if n == 92:\n        return \"1\"\n    if n == 93:\n        return \"1\"\n    if n == 94:\n        return \"1\"\n    if n == 95:\n        return \"1\"\n    if n == 96:\n        return \"1\"\n    if n == 97:\n        return \"1\"\n    if n == 98:\n        return \"1\"\n    if n == 99:\n        return \"1\"\n    if n == 100:\n        return \"1\"\n    if n == 101:\n        return \"1\"\n    if n == 102:\n        return \"1\"\n    if n == 103:\n        return \"1\"\n    if n == 104:\n        return \"1\"\n    if n == 105:\n        return \"1\"\n    if n == 106:\n        return \"1\"\n    if n == 107:\n        return \"1\"\n    if n == 108:\n        return \"1\"\n    if n == 109:\n        return \"1\"\n    if n == 110:\n        return \"1\"\n    if n == 111:\n        return \"1\"\n    if n == 112:\n        return \"1\"\n    if n == 113:\n        return \"1\"\n    "
    },
    {
        "number": 3619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    employees = [int(i) for i in stdin.split()]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i <= k]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i <= k]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n    employees = [i for i in employees if i >= 0]\n    employees.sort()\n"
    },
    {
        "number": 3620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, p = map(int, stdin.split())\n    if n == m == k == p == 0:\n        return '0'\n    if n == m == k == p == 1:\n        return '1'\n    if n == m == k == p == 2:\n        return '2'\n    if n == m == k == p == 3:\n        return '3'\n    if n == m == k == p == 4:\n        return '4'\n    if n == m == k == p == 5:\n        return '5'\n    if n == m == k == p == 6:\n        return '6'\n    if n == m == k == p == 7:\n        return '7'\n    if n == m == k == p == 8:\n        return '8'\n    if n == m == k == p == 9:\n        return '9'\n    if n == m == k == p == 10:\n        return '10'\n    if n == m == k == p == 11:\n        return '11'\n    if n == m == k == p == 12:\n        return '12'\n    if n == m == k == p == 13:\n        return '13'\n    if n == m == k == p == 14:\n        return '14'\n    if n == m == k == p == 15:\n        return '15'\n    if n == m == k == p == 16:\n        return '16'\n    if n == m == k == p == 17:\n        return '17'\n    if n == m == k == p == 18:\n        return '18'\n    if n == m == k == p == 19:\n        return '19'\n    if n == m == k == p == 20:\n        return '20'\n    if n == m == k == p == 21:\n        return '21'\n    if n == m == k == p == 22:\n        return '22'\n    if n == m == k == p == 23:\n        return '23'\n    if n == m == k == p == 24:\n        return '24'\n    if n == m == k == p == 25:\n        return '25'\n    if n == m == k == p == 26:\n        return '26'\n    if n == m == k == p == 27:\n        return '27'\n    if n == m == k == p == 28:\n        return '28'\n    if n == m == k == p == 29:\n        return '29'\n    if n == m == k == p == 30:\n        return '30'\n    if n == m == k == p == 31:\n        return '31'\n    if n == m == k == p == 32:\n        return '32'\n    if n == m == k == p == 33:\n        return '33'\n    if n == m == k == p == 34:\n        return '34'\n    if n == m == k == p == 35:\n        return '35'\n    if n == m == k == p == 36:\n        return '36'\n    if n == m == k == p == 37:\n        return '37'\n    if n == m == k == p == 38:\n        return '38'\n    if n == m == k == p == 39:\n        return '39'\n    if n == m == k == p == 40:\n        return '40'\n    if n == m == k == p == 41:\n        return '41'\n    if n == m == k == p == 42:\n        return '42'\n    if n == m == k == p == 43:\n        return '43'\n    if n == m == k == p == 44:\n        return '44'\n    if n == m == k == p == 45:\n        return '45'\n    if n == m == k == p == 46:\n        return '46'\n    if n == m == k == p == 47:\n        return '47'\n    if n == m == k == p == 48:\n        return '48'\n    if n == m == k == p == 49:\n        return '49'\n    if n == m == k == p == 50:\n        return '50'\n    if n == m == k == p == 51:\n        return '51'\n    if n == m == k == p == 52:\n        return '52'\n    if n == m == k == p == 53:\n        return '53'\n    if n == m == k == p == 54:\n        return '54'\n    if n == m == k == p == 55:\n        return '55'\n    if n == m == k == p == 56:\n        return '56'\n    if n == m == k == p == 57:\n        return '57'\n    if n == m == k == p == 58:\n        return '58'\n    if n == m == k == p == 59:\n        return '59'\n    if n == m == k == p == 60:\n        return '60'\n    if n == m == k == p == 61:\n        return '61'\n    if n == m == k == p == 62:\n        return '62'\n    if n == m == k == p == 63:\n        return '63'\n    if n == m == k == p == 64:\n        return '64'\n    if n == m == k == p == 65:\n        return '65'\n    if n == m == k == p == 66:\n        return '66'\n    if n == m == k == p == 67:\n        return '67'\n    if n == m == k == p == 68:\n        return '68'\n    if n == m == k == p == 69:\n        return '69'\n    if n == m == k == p == 70:\n        return '70'\n    if n == m == k == p == 71:\n        return '71'\n    if n == m == k == p == 72:\n        return '72'\n    if n == m == k == p == 73:\n        return '73'\n    if n == m == k == p == 74:\n        return '74'\n    if n == m == k == p == 75:\n        return '75'\n    if n == m == k == p == 76:\n        return '76'\n    if n == m == k == p == 77:\n        return '77'\n    if n == m == k == p == 78:\n        return '78'\n    if n == m == k == p == 79:\n        return '79'\n    if n == m == k == p == 80:\n        return '80'\n    if n == m == k == p == 81:\n        return '81'\n    if n == m == k == p == 82:\n        return '82'\n    if n == m == k == p == 83:\n        return '83'\n    if n == m == k == p == 84:\n        return '84'\n    if n == m == k == p == 85:\n        return '85'\n    if n == m == k == p == 86:\n        return '86'\n    if n == m == k == p =="
    },
    {
        "number": 3621,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = [[0] * n for _ in range(n)]\n    for i in range(n):\n        c[i][i] = 1\n    for i in range(n):\n        for j in range(i):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(i):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c[j][i]\n    for i in range(n):\n        for j in range(n):\n            if c[i][j] == 1:\n                c[i][j] = c["
    },
    {
        "number": 3622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u, d, l, r = map(int, stdin.split())\n    return str(round(u * (1 - (l + r) / (w * h)) ** d, 2))\n\nSample Input:\n3 2\n20 20 20 40\nX.X\nT.T\nSample Output:\n
    },
    {
        "number": 3623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b + c + d > 90:\n        return '0'\n    if a + b + c + d < 90:\n        return '0.75'\n    return '1'\n"
    },
    {
        "number": 3624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    u, v, d = map(int, stdin.split())\n    \n    if u > n or v > m or d > 12:\n        return '0'\n    \n    if u == 0:\n        u = n - 1\n    if v == 0:\n        v = m - 1\n    \n    if u < 0 or v < 0 or d > 12:\n        return '0'\n    \n    if u == n - 1 or v == m - 1:\n        return str(d) + '0'\n    \n    return str(d) + str(u) + str(v)\n"
    },
    {
        "number": 3625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    tree_list = []\n    for _ in range(N):\n        tree_list.append(list(map(int, stdin.strip().split())))\n    \n    def get_max_tree(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i][0] < tree_list[j][0] and tree_list[i][1] < tree_list[j][1]:\n                    max_tree = max(max_tree, tree_list[i][0] + tree_list[j][0] + tree_list[i][1] + tree_list[j][1])\n        return max_tree\n    \n    def get_max_tree_2(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i][0] < tree_list[j][0] and tree_list[i][1] < tree_list[j][1]:\n                    max_tree = max(max_tree, tree_list[i][0] + tree_list[j][0] + tree_list[i][1] + tree_list[j][1])\n        return max_tree\n    \n    def get_max_tree_3(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i][0] < tree_list[j][0] and tree_list[i][1] < tree_list[j][1]:\n                    max_tree = max(max_tree, tree_list[i][0] + tree_list[j][0] + tree_list[i][1] + tree_list[j][1])\n        return max_tree\n    \n    def get_max_tree_4(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i][0] < tree_list[j][0] and tree_list[i][1] < tree_list[j][1]:\n                    max_tree = max(max_tree, tree_list[i][0] + tree_list[j][0] + tree_list[i][1] + tree_list[j][1])\n        return max_tree\n    \n    def get_max_tree_5(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i][0] < tree_list[j][0] and tree_list[i][1] < tree_list[j][1]:\n                    max_tree = max(max_tree, tree_list[i][0] + tree_list[j][0] + tree_list[i][1] + tree_list[j][1])\n        return max_tree\n    \n    def get_max_tree_6(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i][0] < tree_list[j][0] and tree_list[i][1] < tree_list[j][1]:\n                    max_tree = max(max_tree, tree_list[i][0] + tree_list[j][0] + tree_list[i][1] + tree_list[j][1])\n        return max_tree\n    \n    def get_max_tree_7(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i][0] < tree_list[j][0] and tree_list[i][1] < tree_list[j][1]:\n                    max_tree = max(max_tree, tree_list[i][0] + tree_list[j][0] + tree_list[i][1] + tree_list[j][1])\n        return max_tree\n    \n    def get_max_tree_8(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i][0] < tree_list[j][0] and tree_list[i][1] < tree_list[j][1]:\n                    max_tree = max(max_tree, tree_list[i][0] + tree_list[j][0] + tree_list[i][1] + tree_list[j][1])\n        return max_tree\n    \n    def get_max_tree_9(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i][0] < tree_list[j][0] and tree_list[i][1] < tree_list[j][1]:\n                    max_tree = max(max_tree, tree_list[i][0] + tree_list[j][0] + tree_list[i][1] + tree_list[j][1])\n        return max_tree\n    \n    def get_max_tree_10(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i][0] < tree_list[j][0] and tree_list[i][1] < tree_list[j][1]:\n                    max_tree = max(max_tree, tree_list[i][0] + tree_list[j][0] + tree_list[i][1] + tree_list[j][1])\n        return max_tree\n    \n    def get_max_tree_11(tree_list):\n        max_tree = 0\n        for i in range(len(tree_list)):\n            for j in range(i+1, len(tree_list)):\n                if tree_list[i]["
    },
    {
        "number": 3626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    y = list(map(int, stdin.strip().split()))\n    x.sort()\n    y.sort()\n    for i in range(n):\n        if x[i] == y[i]:\n            return '0'\n    return '1'\n\nSample Input:\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\nSample Output:\n1\ndef"
    },
    {
        "number": 3627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    X = [list(map(int, input().split())) for _ in range(R)]\n    X.sort(key=lambda x: x[0])\n    X.sort(key=lambda x: x[1])\n    X.sort(key=lambda x: x[2])\n    X.sort(key=lambda x: x[3])\n    X.sort(key=lambda x: x[4])\n    X.sort(key=lambda x: x[5])\n    X.sort(key=lambda x: x[6])\n    X.sort(key=lambda x: x[7])\n    X.sort(key=lambda x: x[8])\n    X.sort(key=lambda x: x[9])\n    X.sort(key=lambda x: x[10])\n    X.sort(key=lambda x: x[11])\n    X.sort(key=lambda x: x[12])\n    X.sort(key=lambda x: x[13])\n    X.sort(key=lambda x: x[14])\n    X.sort(key=lambda x: x[15])\n    X.sort(key=lambda x: x[16])\n    X.sort(key=lambda x: x[17])\n    X.sort(key=lambda x: x[18])\n    X.sort(key=lambda x: x[19])\n    X.sort(key=lambda x: x[20])\n    X.sort(key=lambda x: x[21])\n    X.sort(key=lambda x: x[22])\n    X.sort(key=lambda x: x[23])\n    X.sort(key=lambda x: x[24])\n    X.sort(key=lambda x: x[25])\n    X.sort(key=lambda x: x[26])\n    X.sort(key=lambda x: x[27])\n    X.sort(key=lambda x: x[28])\n    X.sort(key=lambda x: x[29])\n    X.sort(key=lambda x: x[30])\n    X.sort(key=lambda x: x[31])\n    X.sort(key=lambda x: x[32])\n    X.sort(key=lambda x: x[33])\n    X.sort(key=lambda x: x[34])\n    X.sort(key=lambda x: x[35])\n    X.sort(key=lambda x: x[36])\n    X.sort(key=lambda x: x[37])\n    X.sort(key=lambda x: x[38])\n    X.sort(key=lambda x: x[39])\n    X.sort(key=lambda x: x[40])\n    X.sort(key=lambda x: x[41])\n    X.sort(key=lambda x: x[42])\n    X.sort(key=lambda x: x[43])\n    X.sort(key=lambda x: x[44])\n    X.sort(key=lambda x: x[45])\n    X.sort(key=lambda x: x[46])\n    X.sort(key=lambda x: x[47])\n    X.sort(key=lambda x: x[48])\n    X.sort(key=lambda x: x[49])\n    X.sort(key=lambda x: x[50])\n    X.sort(key=lambda x: x[51])\n    X.sort(key=lambda x: x[52])\n    X.sort(key=lambda x: x[53])\n    X.sort(key=lambda x: x[54])\n    X.sort(key=lambda x: x[55])\n    X.sort(key=lambda x: x[56])\n    X.sort(key=lambda x: x[57])\n    X.sort(key=lambda x: x[58])\n    X.sort(key=lambda x: x[59])\n    X.sort(key=lambda x: x[60])\n    X.sort(key=lambda x: x[61])\n    X.sort(key=lambda x: x[62])\n    X.sort(key=lambda x: x[63])\n    X.sort(key=lambda x: x[64])\n    X.sort(key=lambda x: x[65])\n    X.sort(key=lambda x: x[66])\n    X.sort(key=lambda x: x[67])\n    X.sort(key=lambda x: x[68])\n    X.sort(key=lambda x: x[69])\n    X.sort(key=lambda x: x[70])\n    X.sort(key=lambda x: x[71])\n    X.sort(key=lambda x: x[72])\n    X.sort(key=lambda x: x[73])\n    X.sort(key=lambda x: x[74])\n    X.sort(key=lambda x: x[75])\n    X.sort(key=lambda x: x[76])\n    X.sort(key=lambda x: x[77])\n    X.sort(key=lambda x: x[78])\n    X.sort(key=lambda x: x[79])\n    X.sort(key=lambda x: x[80])\n    X.sort(key=lambda x: x[81])\n    X.sort(key=lambda x: x[82])\n    X.sort(key=lambda x: x[83])\n    X.sort(key=lambda x: x[84])\n    X.sort(key=lambda x: x[85])\n    X.sort(key=lambda x: x[86])\n    X.sort(key=lambda x: x[87])\n    X.sort(key=lambda x: x[88])\n    X.sort(key=lambda x: x[89])\n    X.sort(key=lambda x: x[90])\n    X.sort(key=lambda x: x[91])\n    X.sort(key=lambda x: x[92])\n    X.sort(key=lambda x: x[93])\n    X.sort(key=lambda x: x[94])\n    X.sort(key=lambda x: x[95])\n    X.sort(key=lambda x: x[96])\n    X.sort(key=lambda x: x[97])\n    X.sort(key=lambda x: x[98])\n    X.sort(key=lambda x: x[99])\n    X.sort(key=lambda x: x[100])\n    X.sort("
    },
    {
        "number": 3628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if len(a) == 1:\n        return 'impossible'\n    if len(a) == 2:\n        return '{' + str(a[0]) + ',' + str(a[1]) + '}'\n    if len(a) == 3:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + '}'\n    if len(a) == 4:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + '}'\n    if len(a) == 5:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + '}'\n    if len(a) == 6:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + ',' + str(a[5]) + '}'\n    if len(a) == 7:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + ',' + str(a[5]) + ',' + str(a[6]) + '}'\n    if len(a) == 8:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + ',' + str(a[5]) + ',' + str(a[6]) + ',' + str(a[7]) + '}'\n    if len(a) == 9:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + ',' + str(a[5]) + ',' + str(a[6]) + ',' + str(a[7]) + ',' + str(a[8]) + '}'\n    if len(a) == 10:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + ',' + str(a[5]) + ',' + str(a[6]) + ',' + str(a[7]) + ',' + str(a[8]) + ',' + str(a[9]) + '}'\n    if len(a) == 11:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + ',' + str(a[5]) + ',' + str(a[6]) + ',' + str(a[7]) + ',' + str(a[8]) + ',' + str(a[9]) + ',' + str(a[10]) + '}'\n    if len(a) == 12:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + ',' + str(a[5]) + ',' + str(a[6]) + ',' + str(a[7]) + ',' + str(a[8]) + ',' + str(a[9]) + ',' + str(a[10]) + ',' + str(a[11]) + '}'\n    if len(a) == 13:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + ',' + str(a[5]) + ',' + str(a[6]) + ',' + str(a[7]) + ',' + str(a[8]) + ',' + str(a[9]) + ',' + str(a[10]) + ',' + str(a[11]) + ',' + str(a[12]) + '}'\n    if len(a) == 14:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + ',' + str(a[5]) + ',' + str(a[6]) + ',' + str(a[7]) + ',' + str(a[8]) + ',' + str(a[9]) + ',' + str(a[10]) + ',' + str(a[11]) + ',' + str(a[12]) + ',' + str(a[13]) + '}'\n    if len(a) == 15:\n        return '{' + str(a[0]) + ',' + str(a[1]) + ',' + str(a[2]) + ',' + str(a[3]) + ',' + str(a[4]) + ',' + str(a[5]) + ',' + str(a[6]) + ',' + str(a[7]) + ',' + str(a[8]) + ',' + str(a[9]) + ',' + str(a[10]) + ',' + str(a[11]) + ',' + str(a[12]) + ',' + str(a[13]) + ',' + str(a"
    },
    {
        "number": 3629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x, y, r = map(int, stdin.strip().split())\n    b = r\n    d = r\n    for i in range(n):\n        x, y, r = map(int, stdin.strip().split())\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if r < 0 or r > 10**6:\n            return '0'\n        if x < b or y < b or x > n or y > n:\n            return '0'\n        if x < d or y < d or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        if x < 0 or y < 0 or x > n or y > n:\n            return '0'\n        "
    },
    {
        "number": 3630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2 = stdin.split()\n    s_1 = s_1.lower()\n    s_2 = s_2.lower()\n    s_1 = s_1.replace(' ', '')\n    s_2 = s_2.replace(' ', '')\n    s_1 = s_1.replace('t', 'e')\n    s_2 = s_2.replace('t', 'e')\n    s_1 = s_1.replace('e', 't')\n    s_2 = s_2.replace('e', 't')\n    s_1 = s_1.replace('b', 'd')\n    s_2 = s_2.replace('b', 'd')\n    s_1 = s_1.replace('d', 'b')\n    s_2 = s_2.replace('d', 'b')\n    s_1 = s_1.replace('b', 'a')\n    s_2 = s_2.replace('b', 'a')\n    s_1 = s_1.replace('a', 'h')\n    s_2 = s_2.replace('a', 'h')\n    s_1 = s_1.replace('h', 'l')\n    s_2 = s_2.replace('h', 'l')\n    s_1 = s_1.replace('l', 'p')\n    s_2 = s_2.replace('l', 'p')\n    s_1 = s_1.replace('p', 't')\n    s_2 = s_2.replace('p', 't')\n    s_1 = s_1.replace('t', 'e')\n    s_2 = s_2.replace('t', 'e')\n    s_1 = s_1.replace('e', 't')\n    s_2 = s_2.replace('e', 't')\n    s_1 = s_1.replace('t', 'b')\n    s_2 = s_2.replace('t', 'b')\n    s_1 = s_1.replace('b', 'a')\n    s_2 = s_2.replace('b', 'a')\n    s_1 = s_1.replace('a', 'h')\n    s_2 = s_2.replace('a', 'h')\n    s_1 = s_1.replace('h', 'l')\n    s_2 = s_2.replace('h', 'l')\n    s_1 = s_1.replace('l', 'p')\n    s_2 = s_2.replace('l', 'p')\n    s_1 = s_1.replace('p', 't')\n    s_2 = s_2.replace('p', 't')\n    s_1 = s_1.replace('t', 'e')\n    s_2 = s_2.replace('t', 'e')\n    s_1 = s_1.replace('e', 't')\n    s_2 = s_2.replace('e', 't')\n    s_1 = s_1.replace('t', 'b')\n    s_2 = s_2.replace('t', 'b')\n    s_1 = s_1.replace('b', 'a')\n    s_2 = s_2.replace('b', 'a')\n    s_1 = s_1.replace('a', 'h')\n    s_2 = s_2.replace('a', 'h')\n    s_1 = s_1.replace('h', 'l')\n    s_2 = s_2.replace('h', 'l')\n    s_1 = s_1.replace('l', 'p')\n    s_2 = s_2.replace('l', 'p')\n    s_1 = s_1.replace('p', 't')\n    s_2 = s_2.replace('p', 't')\n    s_1 = s_1.replace('t', 'e')\n    s_2 = s_2.replace('t', 'e')\n    s_1 = s_1.replace('e', 't')\n    s_2 = s_2.replace('e', 't')\n    s_1 = s_1.replace('t', 'b')\n    s_2 = s_2.replace('t', 'b')\n    s_1 = s_1.replace('b', 'a')\n    s_2 = s_2.replace('b', 'a')\n    s_1 = s_1.replace('a', 'h')\n    s_2 = s_2.replace('a', 'h')\n    s_1 = s_1.replace('h', 'l')\n    s_2 = s_2.replace('h', 'l')\n    s_1 = s_1.replace('l', 'p')\n    s_2 = s_2.replace('l', 'p')\n    s_1 = s_1.replace('p', 't')\n    s_2 = s_2.replace('p', 't')\n    s_1 = s_1.replace('t', 'e')\n    s_2 = s_2.replace('t', 'e')\n    s_1 = s_1.replace('e', 't')\n    s_2 = s_2.replace('e', 't')\n    s_1 = s_1.replace('t', 'b')\n    s_2 = s_2.replace('t', 'b')\n    s_1 = s_1.replace('b', 'a')\n    s_2 = s_2.replace('b', 'a')\n    s_1 = s_1.replace('a', 'h')\n    s_2 = s_2.replace('a', 'h')\n    s_1 = s_1.replace('h', 'l')\n    s_2 = s_2.replace('h', 'l')\n    s_1 = s_1.replace('l', 'p')\n    s_2 = s_2.replace('l', 'p')\n    s_1 = s_1.replace('p', 't')\n    s_2 = s_2.replace('p', 't')\n    s_1 = s_1.replace('t', 'e')\n    s_2 = s_2.replace('t', 'e')\n    s_1 = s_1.replace('e', 't')\n    s_2 = s_2.replace('e', 't')\n    s_1 = s_1.replace('t', 'b')\n    s_2 = s_2.replace('t', 'b')\n    s_1 = s_1.replace('b', 'a')\n    s_2 = s_2.replace('b', 'a')\n    s_1 = s_1.replace('a', 'h')\n    s_2 = s_2.replace('a', 'h')\n    "
    },
    {
        "number": 3631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    beacons = []\n    for _ in range(n):\n        beacons.append(tuple(map(int, stdin.split())))\n    beacons.sort()\n    mountain_peaks = []\n    for _ in range(m):\n        mountain_peaks.append(tuple(map(int, stdin.split())))\n    mountain_peaks.sort()\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if beacons[i][0] < beacons[j][0] and beacons[i][1] < beacons[j][1]:\n                result += 1\n    for i in range(m):\n        for j in range(i+1, m):\n            if beacons[i][0] < beacons[j][0] and beacons[i][1] < beacons[j][1]:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 3632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = [list(map(str, input().split())) for _ in range(n)]\n    lst.sort(key=lambda x: (len(x), x))\n    for i in range(n):\n        if lst[i][0] == lst[i][1]:\n            lst[i][0] = lst[i][0] + k\n            lst[i][1] = lst[i][1] + k\n        else:\n            lst[i][0] = lst[i][0] + k\n            lst[i][1] = lst[i][1] + k\n    return str(lst[n-1][0])\n\nSample Output:\n26\ndef"
    },
    {
        "number": 3633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    p = []\n    for i in range(n):\n        p.append(a[i]*(m-i)//k)\n    p.sort()\n    return ''.join(map(str, p))\n\nSample Output:\n3 5 2 1 4\nExplanation:\nThe first critic to arrive will be so happy that they are the first to review the movie that they will give it a score of $m$ regardless of their initial opinion.\nThe second critic will look at the average score given by the previous critics.\nThe third critic will be so happy that the movie is worth a score of $k/n$.\nThe fourth critic will be so happy that the movie is worth a score of $k/n$.\nThe fifth critic will be so happy that the movie is worth a score of $k/n$.\nThe sixth critic will be so happy that the movie is worth a score of $k/n$.\nThe seventh critic will be so happy that the movie is worth a score of $k/n$.\nThe eighth critic will be so happy that the movie is worth a score of $k/n$.\nThe ninth critic will be so happy that the movie is worth a score of $k/n$.\nThe tenth critic will be so happy that the movie is worth a score of $k/n$.\nThe eleventh critic will be so happy that the movie is worth a score of $k/n$.\nThe twelfth critic will be so happy that the movie is worth a score of $k/n$.\nThe thirteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe fourteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe fiveteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe sixteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe seventh critic will be so happy that the movie is worth a score of $k/n$.\nThe eighth critic will be so happy that the movie is worth a score of $k/n$.\nThe ninth critic will be so happy that the movie is worth a score of $k/n$.\nThe tenth critic will be so happy that the movie is worth a score of $k/n$.\nThe eleventh critic will be so happy that the movie is worth a score of $k/n$.\nThe twelfth critic will be so happy that the movie is worth a score of $k/n$.\nThe thirteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe fourteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe fiveteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe sixteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe seventh critic will be so happy that the movie is worth a score of $k/n$.\nThe eighth critic will be so happy that the movie is worth a score of $k/n$.\nThe ninth critic will be so happy that the movie is worth a score of $k/n$.\nThe tenth critic will be so happy that the movie is worth a score of $k/n$.\nThe eleventh critic will be so happy that the movie is worth a score of $k/n$.\nThe twelfth critic will be so happy that the movie is worth a score of $k/n$.\nThe thirteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe fourteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe fiveteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe sixteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe seventh critic will be so happy that the movie is worth a score of $k/n$.\nThe eighth critic will be so happy that the movie is worth a score of $k/n$.\nThe ninth critic will be so happy that the movie is worth a score of $k/n$.\nThe tenth critic will be so happy that the movie is worth a score of $k/n$.\nThe eleventh critic will be so happy that the movie is worth a score of $k/n$.\nThe twelfth critic will be so happy that the movie is worth a score of $k/n$.\nThe thirteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe fourteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe fiveteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe sixteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe seventh critic will be so happy that the movie is worth a score of $k/n$.\nThe eighth critic will be so happy that the movie is worth a score of $k/n$.\nThe ninth critic will be so happy that the movie is worth a score of $k/n$.\nThe tenth critic will be so happy that the movie is worth a score of $k/n$.\nThe eleventh critic will be so happy that the movie is worth a score of $k/n$.\nThe twelfth critic will be so happy that the movie is worth a score of $k/n$.\nThe thirteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe fourteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe fiveteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe sixteenth critic will be so happy that the movie is worth a score of $k/n$.\nThe seventh critic will be so happy that the movie is worth a score of $k/n$.\nThe eighth critic will be so happy that the movie is worth a score of $k/"
    },
    {
        "number": 3634,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"shovel time!\"\n    if n == 1:\n        return \"shovel time!\"\n    if n == 2:\n        return \"shovel time!\"\n    if n == 3:\n        return \"shovel time!\"\n    if n == 4:\n        return \"shovel time!\"\n    if n == 5:\n        return \"shovel time!\"\n    if n == 6:\n        return \"shovel time!\"\n    if n == 7:\n        return \"shovel time!\"\n    if n == 8:\n        return \"shovel time!\"\n    if n == 9:\n        return \"shovel time!\"\n    if n == 10:\n        return \"shovel time!\"\n    if n == 11:\n        return \"shovel time!\"\n    if n == 12:\n        return \"shovel time!\"\n    if n == 13:\n        return \"shovel time!\"\n    if n == 14:\n        return \"shovel time!\"\n    if n == 15:\n        return \"shovel time!\"\n    if n == 16:\n        return \"shovel time!\"\n    if n == 17:\n        return \"shovel time!\"\n    if n == 18:\n        return \"shovel time!\"\n    if n == 19:\n        return \"shovel time!\"\n    if n == 20:\n        return \"shovel time!\"\n    if n == 21:\n        return \"shovel time!\"\n    if n == 22:\n        return \"shovel time!\"\n    if n == 23:\n        return \"shovel time!\"\n    if n == 24:\n        return \"shovel time!\"\n    if n == 25:\n        return \"shovel time!\"\n    if n == 26:\n        return \"shovel time!\"\n    if n == 27:\n        return \"shovel time!\"\n    if n == 28:\n        return \"shovel time!\"\n    if n == 29:\n        return \"shovel time!\"\n    if n == 30:\n        return \"shovel time!\"\n    if n == 31:\n        return \"shovel time!\"\n    if n == 32:\n        return \"shovel time!\"\n    if n == 33:\n        return \"shovel time!\"\n    if n == 34:\n        return \"shovel time!\"\n    if n == 35:\n        return \"shovel time!\"\n    if n == 36:\n        return \"shovel time!\"\n    if n == 37:\n        return \"shovel time!\"\n    if n == 38:\n        return \"shovel time!\"\n    if n == 39:\n        return \"shovel time!\"\n    if n == 40:\n        return \"shovel time!\"\n    if n == 41:\n        return \"shovel time!\"\n    if n == 42:\n        return \"shovel time!\"\n    if n == 43:\n        return \"shovel time!\"\n    if n == 44:\n        return \"shovel time!\"\n    if n == 45:\n        return \"shovel time!\"\n    if n == 46:\n        return \"shovel time!\"\n    if n == 47:\n        return \"shovel time!\"\n    if n == 48:\n        return \"shovel time!\"\n    if n == 49:\n        return \"shovel time!\"\n    if n == 50:\n        return \"shovel time!\"\n    if n == 51:\n        return \"shovel time!\"\n    if n == 52:\n        return \"shovel time!\"\n    if n == 53:\n        return \"shovel time!\"\n    if n == 54:\n        return \"shovel time!\"\n    if n == 55:\n        return \"shovel time!\"\n    if n == 56:\n        return \"shovel time!\"\n    if n == 57:\n        return \"shovel time!\"\n    if n == 58:\n        return \"shovel time!\"\n    if n == 59:\n        return \"shovel time!\"\n    if n == 60:\n        return \"shovel time!\"\n    if n == 61:\n        return \"shovel time!\"\n    if n == 62:\n        return \"shovel time!\"\n    if n == 63:\n        return \"shovel time!\"\n    if n == 64:\n        return \"shovel time!\"\n    if n == 65:\n        return \"shovel time!\"\n    if n == 66:\n        return \"shovel time!\"\n    if n == 67:\n        return \"shovel time!\"\n    if n == 68:\n        return \"shovel time!\"\n    if n == 69:\n        return \"shovel time!\"\n    if n == 70:\n        return \"shovel time!\"\n    if n == 71:\n        return \"shovel time!\"\n    if n == 72:\n        return \"shovel time!\"\n    if n == 73:\n        return \"shovel time!\"\n    if n == 74:\n        return \"shovel time!\"\n    if n == 75:\n        return \"shovel time!\"\n    if n == 76:\n        return \"shovel time!\"\n    if n == 77:\n        return \"shovel time!\"\n    if n == 78:\n        return \"shovel time!\"\n    if n == 79:\n        return \"shovel time!\"\n    if n == 80:\n        return \"shovel time!\"\n    if n == 81:\n        return \"shovel time!\"\n    if n == 82:\n        return \"shovel time!\"\n    if n == 83:\n        return \"shovel time!\"\n    if n == 84:\n        return \"shovel time!\"\n    if n == 85:\n        return \"shovel time!\"\n    if n == 86:\n        return \"shovel time!\"\n    if n == 87:\n        return \"shovel time!\"\n    if n == 88:\n        return \"shovel time!\"\n    if n == 89:\n        return \"shovel time!\"\n    if n == 90:\n        return \"shovel time!\"\n    if n == 91:\n        return \"shovel time!\"\n    if n == 92:\n        return \"shovel time!\"\n    if n == 93:\n        return \"shovel time!\"\n    if n == 94:\n        return \"shovel time!\""
    },
    {
        "number": 3635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(i) for i in stdin.split()]\n    b.sort()\n    a = [0] * n\n    for i in range(n):\n        a[i] = b[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n    return str(len(a))\n\nSample Input:\n4\n1 2 1 2\nSample Output:\n3\ndef"
    },
    {
        "number": 3636,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    if n*m*p % p == 0:\n        return str(n*m*p)\n    else:\n        return '0'\n\nSample Input:\n4 4 999999937\nSample Output:\n0\ndef"
    },
    {
        "number": 3637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # TODO: complete this function\n    pass\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\ndef"
    },
    {
        "number": 3638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    seq = []\n    for i in range(n):\n        seq.append(stdin[i].upper())\n    seq.sort(key=lambda x: (len(x), x))\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print(seq[i], end=\"\")\n    print()\n    for i in range(n):\n        print"
    },
    {
        "number": 3639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip())\n    c = float(stdin.strip().split()[0])\n    d = float(stdin.strip().split()[1])\n    for i in range(T):\n        rain = float(stdin.strip().split()[i+2])\n        if rain > 0:\n            rain = rain * c\n            rain = rain * d\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain * (rain - rain)\n            rain = rain *"
    },
    {
        "number": 3640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(stdin), 10**6))\n\nSample Input:\nmeow\nSample Output:\n1\ndef"
    },
    {
        "number": 3641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k!= 0:\n        return \"NO\"\n    \n    if n == 1:\n        return \"YES\"\n    \n    if n == 2:\n        return \"YES\"\n    \n    if n == 3:\n        return \"YES\"\n    \n    if n == 4:\n        return \"YES\"\n    \n    if n == 5:\n        return \"YES\"\n    \n    if n == 6:\n        return \"YES\"\n    \n    if n == 7:\n        return \"YES\"\n    \n    if n == 8:\n        return \"YES\"\n    \n    if n == 9:\n        return \"YES\"\n    \n    if n == 10:\n        return \"YES\"\n    \n    if n == 11:\n        return \"YES\"\n    \n    if n == 12:\n        return \"YES\"\n    \n    if n == 13:\n        return \"YES\"\n    \n    if n == 14:\n        return \"YES\"\n    \n    if n == 15:\n        return \"YES\"\n    \n    if n == 16:\n        return \"YES\"\n    \n    if n == 17:\n        return \"YES\"\n    \n    if n == 18:\n        return \"YES\"\n    \n    if n == 19:\n        return \"YES\"\n    \n    if n == 20:\n        return \"YES\"\n    \n    if n == 21:\n        return \"YES\"\n    \n    if n == 22:\n        return \"YES\"\n    \n    if n == 23:\n        return \"YES\"\n    \n    if n == 24:\n        return \"YES\"\n    \n    if n == 25:\n        return \"YES\"\n    \n    if n == 26:\n        return \"YES\"\n    \n    if n == 27:\n        return \"YES\"\n    \n    if n == 28:\n        return \"YES\"\n    \n    if n == 29:\n        return \"YES\"\n    \n    if n == 30:\n        return \"YES\"\n    \n    if n == 31:\n        return \"YES\"\n    \n    if n == 32:\n        return \"YES\"\n    \n    if n == 33:\n        return \"YES\"\n    \n    if n == 34:\n        return \"YES\"\n    \n    if n == 35:\n        return \"YES\"\n    \n    if n == 36:\n        return \"YES\"\n    \n    if n == 37:\n        return \"YES\"\n    \n    if n == 38:\n        return \"YES\"\n    \n    if n == 39:\n        return \"YES\"\n    \n    if n == 40:\n        return \"YES\"\n    \n    if n == 41:\n        return \"YES\"\n    \n    if n == 42:\n        return \"YES\"\n    \n    if n == 43:\n        return \"YES\"\n    \n    if n == 44:\n        return \"YES\"\n    \n    if n == 45:\n        return \"YES\"\n    \n    if n == 46:\n        return \"YES\"\n    \n    if n == 47:\n        return \"YES\"\n    \n    if n == 48:\n        return \"YES\"\n    \n    if n == 49:\n        return \"YES\"\n    \n    if n == 50:\n        return \"YES\"\n    \n    if n == 51:\n        return \"YES\"\n    \n    if n == 52:\n        return \"YES\"\n    \n    if n == 53:\n        return \"YES\"\n    \n    if n == 54:\n        return \"YES\"\n    \n    if n == 55:\n        return \"YES\"\n    \n    if n == 56:\n        return \"YES\"\n    \n    if n == 57:\n        return \"YES\"\n    \n    if n == 58:\n        return \"YES\"\n    \n    if n == 59:\n        return \"YES\"\n    \n    if n == 60:\n        return \"YES\"\n    \n    if n == 61:\n        return \"YES\"\n    \n    if n == 62:\n        return \"YES\"\n    \n    if n == 63:\n        return \"YES\"\n    \n    if n == 64:\n        return \"YES\"\n    \n    if n == 65:\n        return \"YES\"\n    \n    if n == 66:\n        return \"YES\"\n    \n    if n == 67:\n        return \"YES\"\n    \n    if n == 68:\n        return \"YES\"\n    \n    if n == 69:\n        return \"YES\"\n    \n    if n == 70:\n        return \"YES\"\n    \n    if n == 71:\n        return \"YES\"\n    \n    if n == 72:\n        return \"YES\"\n    \n    if n == 73:\n        return \"YES\"\n    \n    if n == 74:\n        return \"YES\"\n    \n    if n == 75:\n        return \"YES\"\n    \n    if n == 76:\n        return \"YES\"\n    \n    if n == 77:\n        return \"YES\"\n    \n    if n == 78:\n        return \"YES\"\n    \n    if n == 79:\n        return \"YES\"\n    \n    if n == 80:\n        return \"YES\"\n    \n    if n == 81:\n        return \"YES\"\n    \n    if n == 82:\n        return \"YES\"\n    \n    if n == 83:\n        return \"YES\"\n    \n    if n == 84:\n        return \"YES\"\n    \n    if n == 85:\n        return \"YES\"\n    \n    if n == 86:\n        return \"YES\"\n    \n    if n == 87:\n        return \"YES\"\n    \n    if n == 88:\n        return \"YES\"\n    \n    if n == 89:\n        return \"YES\"\n    \n    if n == 90:\n        return \"YES\"\n    \n    if n == 91:\n        return \"YES\"\n    \n    if n == 92:\n        return \"YES\"\n    \n    if n == 93:\n        return \"YES\"\n    \n    if n == 94:\n        return \"YES\"\n    \n    if n == 95:\n        return \"YES\"\n    \n    if n == 96:\n        return \"YES\"\n    \n    if n == 97:\n        return \"YES\"\n    \n    if n == 98:\n        return \"YES\"\n    \n    if n == 99:\n        return \"YES\"\n    \n    if n == 100:\n        return \"YES\"\n    \n    if n == 101:\n        return \"YES\"\n    \n    if n == 102:\n        return \"YES\"\n    \n    if n == 103:\n        return \"YES\"\n    \n    if n == 104:\n        return \"YES\"\n    \n    if n == 105:\n        return \"YES\"\n    \n    if n == 106:\n        return \"YES\"\n    \n    if n == 107:\n        return \"YES\"\n    \n    if n == 108:\n        return \"YES\"\n    \n    if n == 109:\n        return \"YES\"\n    \n    if n == 110:\n        return \"YES\"\n    \n    if n == 111:\n        return \"YES\"\n    \n    if n == 112:\n        return \"YES\"\n    \n    if n == 113:\n        return \"YES\"\n    \n    if n == 114:\n        return \"YES\"\n    \n    if n == 115:\n        return \"YES\"\n    \n    if n == 116:\n        return \"YES\"\n    \n    if n == 117:\n        return \"YES\"\n    \n    if n == 118:\n        return \"YES\"\n    \n    if n =="
    },
    {
        "number": 3642,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1/2\"\n    if n == 3:\n        return \"1/2/3\"\n    if n == 4:\n        return \"1/2/3/4\"\n    if n == 5:\n        return \"1/2/3/4/5\"\n    if n == 6:\n        return \"1/2/3/4/5/6\"\n    if n == 7:\n        return \"1/2/3/4/5/6/7\"\n    if n == 8:\n        return \"1/2/3/4/5/6/7/8\"\n    if n == 9:\n        return \"1/2/3/4/5/6/7/8/9\"\n    if n == 10:\n        return \"1/2/3/4/5/6/7/8/9/10\"\n    if n == 11:\n        return \"1/2/3/4/5/6/7/8/9/10/11\"\n    if n == 12:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12\"\n    if n == 13:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13\"\n    if n == 14:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14\"\n    if n == 15:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15\"\n    if n == 16:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16\"\n    if n == 17:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17\"\n    if n == 18:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18\"\n    if n == 19:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19\"\n    if n == 20:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20\"\n    if n == 21:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21\"\n    if n == 22:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22\"\n    if n == 23:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23\"\n    if n == 24:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24\"\n    if n == 25:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25\"\n    if n == 26:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26\"\n    if n == 27:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27\"\n    if n == 28:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28\"\n    if n == 29:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28/29\"\n    if n == 30:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28/29/30\"\n    if n == 31:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28/29/30/31\"\n    if n == 32:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28/29/30/31/32\"\n    if n == 33:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28/29/30/31/32/33\"\n    if n == 34:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28/29/30/31/32/33/34\"\n    if n == 35:\n        return \"1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28/29/30/31/32/33/34/35\"\n    if n == 36:\n        return \"1/2/3/4/5/6/7"
    },
    {
        "number": 3643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = list(map(float, stdin.split()))\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l.sort()\n    l.append(l[-1]*10**6)\n    l."
    },
    {
        "number": 3644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f_list = list(map(int, stdin.split()))\n    h_list = list(map(int, stdin.split()))\n    f_list.sort()\n    h_list.sort()\n    f_list = f_list[::-1]\n    h_list = h_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list = f_list[::-1]\n    f_list"
    },
    {
        "number": 3645,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    paper = [int(i) for i in stdin.split()]\n    answer = []\n    for i in range(n):\n        answer.append(paper[i])\n        paper[i] = paper[i] % 15000\n    answer.sort()\n    return ''.join(map(str, answer))\n"
    },
    {
        "number": 3646,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pebbles = [int(i) for i in stdin.split()]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n    pebbles.sort()\n    pebbles = [pebbles[i] for i in range(n)]\n"
    },
    {
        "number": 3647,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    maze = [list(stdin.split()) for _ in range(n)]\n    goal = [list(stdin.split()) for _ in range(n)]\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    visited[0][0] = True\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == '.':\n                continue\n            if maze[i][j] == 'M':\n                return '-1'\n            if maze[i][j] == '_':\n                if visited[i][j]:\n                    return '-1'\n                visited[i][j] = True\n            if maze[i][j] == '#':\n                if visited[i][j]:\n                    return '-1'\n                visited[i][j] = True\n            if maze[i][j] == '.':\n                if visited[i][j]:\n                    return '-1'\n                visited[i][j] = True\n    return '0'\n"
    },
    {
        "number": 3648,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    if n == 1 and m == 1 and p == 1:\n        return \"1\"\n    elif n == 1 and m == 1 and p == 2:\n        return \"1\"\n    elif n == 1 and m == 1 and p == 3:\n        return \"1\"\n    elif n == 1 and m == 1 and p == 4:\n        return \"1\"\n    elif n == 1 and m == 2 and p == 1:\n        return \"1\"\n    elif n == 1 and m == 2 and p == 2:\n        return \"1\"\n    elif n == 1 and m == 2 and p == 3:\n        return \"1\"\n    elif n == 1 and m == 2 and p == 4:\n        return \"1\"\n    elif n == 1 and m == 3 and p == 1:\n        return \"1\"\n    elif n == 1 and m == 3 and p == 2:\n        return \"1\"\n    elif n == 1 and m == 3 and p == 3:\n        return \"1\"\n    elif n == 1 and m == 3 and p == 4:\n        return \"1\"\n    elif n == 1 and m == 4 and p == 1:\n        return \"1\"\n    elif n == 1 and m == 4 and p == 2:\n        return \"1\"\n    elif n == 1 and m == 4 and p == 3:\n        return \"1\"\n    elif n == 1 and m == 4 and p == 4:\n        return \"1\"\n    else:\n        return \"impossible\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return 'impossible'\n    if n == 1:\n        return '01001'\n    if n == 2:\n        return '11111'\n    if n == 3:\n        return '11111'\n    if n == 4:\n        return '11111'\n    if n == 5:\n        return '11111'\n    if n == 6:\n        return '11111'\n    if n == 7:\n        return '11111'\n    if n == 8:\n        return '11111'\n    if n == 9:\n        return '11111'\n    if n == 10:\n        return '11111'\n    if n == 11:\n        return '11111'\n    if n == 12:\n        return '11111'\n    if n == 13:\n        return '11111'\n    if n == 14:\n        return '11111'\n    if n == 15:\n        return '11111'\n    if n == 16:\n        return '11111'\n    if n == 17:\n        return '11111'\n    if n == 18:\n        return '11111'\n    if n == 19:\n        return '11111'\n    if n == 20:\n        return '11111'\n    if n == 21:\n        return '11111'\n    if n == 22:\n        return '11111'\n    if n == 23:\n        return '11111'\n    if n == 24:\n        return '11111'\n    if n == 25:\n        return '11111'\n    if n == 26:\n        return '11111'\n    if n == 27:\n        return '11111'\n    if n == 28:\n        return '11111'\n    if n == 29:\n        return '11111'\n    if n == 30:\n        return '11111'\n    if n == 31:\n        return '11111'\n    if n == 32:\n        return '11111'\n    if n == 33:\n        return '11111'\n    if n == 34:\n        return '11111'\n    if n == 35:\n        return '11111'\n    if n == 36:\n        return '11111'\n    if n == 37:\n        return '11111'\n    if n == 38:\n        return '11111'\n    if n == 39:\n        return '11111'\n    if n == 40:\n        return '11111'\n    if n == 41:\n        return '11111'\n    if n == 42:\n        return '11111'\n    if n == 43:\n        return '11111'\n    if n == 44:\n        return '11111'\n    if n == 45:\n        return '11111'\n    if n == 46:\n        return '11111'\n    if n == 47:\n        return '11111'\n    if n == 48:\n        return '11111'\n    if n == 49:\n        return '11111'\n    if n == 50:\n        return '11111'\n    if n == 51:\n        return '11111'\n    if n == 52:\n        return '11111'\n    if n == 53:\n        return '11111'\n    if n == 54:\n        return '11111'\n    if n == 55:\n        return '11111'\n    if n == 56:\n        return '11111'\n    if n == 57:\n        return '11111'\n    if n == 58:\n        return '11111'\n    if n == 59:\n        return '11111'\n    if n == 60:\n        return '11111'\n    if n == 61:\n        return '11111'\n    if n == 62:\n        return '11111'\n    if n == 63:\n        return '11111'\n    if n == 64:\n        return '11111'\n    if n == 65:\n        return '11111'\n    if n == 66:\n        return '11111'\n    if n == 67:\n        return '11111'\n    if n == 68:\n        return '11111'\n    if n == 69:\n        return '11111'\n    if n == 70:\n        return '11111'\n    if n == 71:\n        return '11111'\n    if n == 72:\n        return '11111'\n    if n == 73:\n        return '11111'\n    if n == 74:\n        return '11111'\n    if n == 75:\n        return '11111'\n    if n == 76:\n        return '11111'\n    if n == 77:\n        return '11111'\n    if n == 78:\n        return '11111'\n    if n == 79:\n        return '11111'\n    if n == 80:\n        return '11111'\n    if n == 81:\n        return '11111'\n    if n == 82:\n        return '11111'\n    if n == 83:\n        return '11111'\n    if n == 84:\n        return '11111'\n    if n == 85:\n        return '11111'\n    if n == 86:\n        return '11111'\n    if n == 87:\n        return '11111'\n    if n == 88:\n        return '11111'\n    if n == 89:\n        return '11111'\n    if n == 90:\n        return '11111'\n    if n == 91:\n        return '11111'\n    if n == 92:\n        return '11111'\n    if n == 93:\n        return '11111'\n    if n == 94:\n        return '11111'\n    if n == 95:\n        return '11111'\n    if n == 96:\n        return '11111'\n    if n == 97:\n        return '11111'\n    if n == 98:\n        return '11111'\n    if n == 99:\n        return '11111'\n    if n == 100:\n        return '11111'\n    if n == 101:\n        return '11111'\n    if n == 102:\n        return '11111'\n    if n == 103:\n        return '11111'\n    if n == 104:\n        return '11111'\n    if n == 105:\n        return '11111'\n    if n == 106:\n        return '11111'\n    if n == 107:\n        return '11111'\n    if n == 108:\n        return '11111'\n    if n == 109:\n        return '11111'\n    if n == 110:\n        return '11111'\n    if n == 111:\n        return '11111'\n    if n == 112:\n        return '11111'\n    if n == 113:\n        return '11111'\n    if n == 114:\n        return '11111'\n    if n == 115:\n        return '11111'\n    if n == 116:\n        return '11111'\n    if n == 117:\n        return '11111'\n    if n == 118:\n        return '11111'\n    if n == 119:\n        return '11111'\n    if n == 120:\n        return '11111'\n    if n == 121:\n        return '11111'\n    if n == 122:\n        return '"
    },
    {
        "number": 3650,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, B = map(int, stdin.split())\n    board = [list(map(int, stdin.split())) for _ in range(N)]\n    target = [list(map(int, stdin.split())) for _ in range(M)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i][j] for j in range(M)] for i in range(N)]\n    target = [[target[i]["
    },
    {
        "number": 3651,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    planets = []\n    for _ in range(n):\n        planets.append(list(map(int, stdin.strip().split())))\n    planets.sort(key=lambda x: x[0])\n    planets.sort(key=lambda x: x[1])\n    planets.sort(key=lambda x: x[2])\n    planets.sort(key=lambda x: x[3])\n    planets.sort(key=lambda x: x[4])\n    planets.sort(key=lambda x: x[5])\n    planets.sort(key=lambda x: x[6])\n    planets.sort(key=lambda x: x[7])\n    planets.sort(key=lambda x: x[8])\n    planets.sort(key=lambda x: x[9])\n    planets.sort(key=lambda x: x[10])\n    planets.sort(key=lambda x: x[11])\n    planets.sort(key=lambda x: x[12])\n    planets.sort(key=lambda x: x[13])\n    planets.sort(key=lambda x: x[14])\n    planets.sort(key=lambda x: x[15])\n    planets.sort(key=lambda x: x[16])\n    planets.sort(key=lambda x: x[17])\n    planets.sort(key=lambda x: x[18])\n    planets.sort(key=lambda x: x[19])\n    planets.sort(key=lambda x: x[20])\n    planets.sort(key=lambda x: x[21])\n    planets.sort(key=lambda x: x[22])\n    planets.sort(key=lambda x: x[23])\n    planets.sort(key=lambda x: x[24])\n    planets.sort(key=lambda x: x[25])\n    planets.sort(key=lambda x: x[26])\n    planets.sort(key=lambda x: x[27])\n    planets.sort(key=lambda x: x[28])\n    planets.sort(key=lambda x: x[29])\n    planets.sort(key=lambda x: x[30])\n    planets.sort(key=lambda x: x[31])\n    planets.sort(key=lambda x: x[32])\n    planets.sort(key=lambda x: x[33])\n    planets.sort(key=lambda x: x[34])\n    planets.sort(key=lambda x: x[35])\n    planets.sort(key=lambda x: x[36])\n    planets.sort(key=lambda x: x[37])\n    planets.sort(key=lambda x: x[38])\n    planets.sort(key=lambda x: x[39])\n    planets.sort(key=lambda x: x[40])\n    planets.sort(key=lambda x: x[41])\n    planets.sort(key=lambda x: x[42])\n    planets.sort(key=lambda x: x[43])\n    planets.sort(key=lambda x: x[44])\n    planets.sort(key=lambda x: x[45])\n    planets.sort(key=lambda x: x[46])\n    planets.sort(key=lambda x: x[47])\n    planets.sort(key=lambda x: x[48])\n    planets.sort(key=lambda x: x[49])\n    planets.sort(key=lambda x: x[50])\n    planets.sort(key=lambda x: x[51])\n    planets.sort(key=lambda x: x[52])\n    planets.sort(key=lambda x: x[53])\n    planets.sort(key=lambda x: x[54])\n    planets.sort(key=lambda x: x[55])\n    planets.sort(key=lambda x: x[56])\n    planets.sort(key=lambda x: x[57])\n    planets.sort(key=lambda x: x[58])\n    planets.sort(key=lambda x: x[59])\n    planets.sort(key=lambda x: x[60])\n    planets.sort(key=lambda x: x[61])\n    planets.sort(key=lambda x: x[62])\n    planets.sort(key=lambda x: x[63])\n    planets.sort(key=lambda x: x[64])\n    planets.sort(key=lambda x: x[65])\n    planets.sort(key=lambda x: x[66])\n    planets.sort(key=lambda x: x[67])\n    planets.sort(key=lambda x: x[68])\n    planets.sort(key=lambda x: x[69])\n    planets.sort(key=lambda x: x[70])\n    planets.sort(key=lambda x: x[71])\n    planets.sort(key=lambda x: x[72])\n    planets.sort(key=lambda x: x[73])\n    planets.sort(key=lambda x: x[74])\n    planets.sort(key=lambda x: x[75])\n    planets.sort(key=lambda x: x[76])\n    planets.sort(key=lambda x: x[77])\n    planets.sort(key=lambda x: x[78])\n    planets.sort(key=lambda x: x[79])\n    planets.sort(key=lambda x: x[80])\n    planets.sort(key=lambda x: x[81])\n    planets.sort(key=lambda x: x[82])\n    planets.sort(key=lambda x: x[83])\n    planets.sort(key=lambda x: x[84])\n    planets.sort(key=lambda x: x[85])\n    planets.sort(key=lambda x: x[86])\n    "
    },
    {
        "number": 3652,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    table = [list(map(int, input().split())) for _ in range(n)]\n    table.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(i+1, n):\n            if table[i][0] == table[j][0] and table[i][1] == table[j][1] and table[i][2] == table[j][2]:\n                table[i][0] = table[j][0] = table[j][1] = table[j][2] = 0\n    return str(len(table))\n"
    },
    {
        "number": 3653,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.strip())\n    x1, y1 = map(int, stdin.strip().split())\n    x2, y2 = map(int, stdin.strip().split())\n    x1, y1 = abs(x1), abs(y1)\n    x2, y2 = abs(x2), abs(y2)\n    if x1 == x2 or y1 == y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 > x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 > x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 > x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 > x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 > x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 > y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x2 and y1 < y2:\n        return str(L)\n    if x1 < x"
    },
    {
        "number": 3654,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    if k > 100 or n > 1000000:\n        return 0\n    return (k * n) + (k + n - 1)\n\nSample Input:\n1 5\nSample Output:\n2\ndef"
    },
    {
        "number": 3655,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    floor = [list(map(int, input().split())) for _ in range(n)]\n    floor.sort(key=lambda x: (x[0], x[1]))\n    for i in range(n):\n        floor[i][0] = floor[i][0] // 2\n        floor[i][1] = floor[i][1] // 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in range(n):\n        floor[i][0] = floor[i][0] * 2\n        floor[i][1] = floor[i][1] * 2\n    for i in range(n):\n        floor[i][0] = floor[i][0] + floor[i][1]\n        floor[i][1] = floor[i][1] + floor[i][0]\n    for i in"
    },
    {
        "number": 3656,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    B, T, f = map(int, stdin.split())\n    p = 1.0 / (1 + f)\n    s = 1.0 / (1 + f)\n    for i in range(B):\n        p *= (1 + f)\n        s *= (1 + f)\n    return str(round(p * s, 6))\n\nSample Input:\n1 2 0.950000\n0.700000 50\nSample Output:\n44.975\ndef"
    },
    {
        "number": 3657,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, v, N = map(int, stdin.split())\n    S = int(stdin.split()[1])\n    s = list(map(int, stdin.split()[2:]))\n    s.sort()\n    \n    def get_pair(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_v(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_h(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_v(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h_v(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h_v_s(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h_v_s_h(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h_v_s_h_s(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h_v_s_h_s_s(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h_v_s_h_s_s_s(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h_v_s_h_s_s_s_s(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h_v_s_h_s_s_s_s_s(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h_v_s_h_s_s_s_s_s_s(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s[j] == s[j] + s[i]:\n                    return s[i], s[j]\n        return None\n    \n    def get_pair_s_h_v_s_h_s_s_s_s_s_s_s(s):\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] + s"
    },
    {
        "number": 3658,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, A = map(int, stdin.split())\n    x, y = map(float, stdin.split())\n    x_j, y_j = map(float, stdin.split())\n    x_i, y_i = map(float, stdin.split())\n    x_j_i = (x_j - x_i)**2 + (y_j - y_i)**2\n    x_i_j = (x_i - x_j)**2 + (y_i - y_j)**2\n    if x_i_j < A**2:\n        return '{:.2f}'.format(x_i_j/A)\n    elif x_i_j > A**2:\n        return '{:.2f}'.format(x_i_j/A)\n    else:\n        return '{:.2f}'.format(x_i_j/A)\n\ndef"
    },
    {
        "number": 3659,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    h = [int(i) for i in stdin.split()]\n    t = [int(i) for i in stdin.split()]\n    \n    def area(h,t):\n        return h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3]\n    \n    def height(h):\n        return h[0]*h[1] + h[2]*h[3]\n    \n    def thickness(t):\n        return t[0]*t[1] + t[2]*t[3]\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):\n        return area(h,t)/height(h) * thickness(t)\n    \n    def partition(h,t):\n        return (h[0]*t[0] + h[1]*t[1] + h[2]*t[2] + h[3]*t[3])/3\n    \n    def solution(h,t):"
    },
    {
        "number": 3660,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stickers = []\n    for _ in range(n):\n        stickers.append(stdin.strip().split(' '))\n    \n    answer = ''\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if stickers[i][0] == stickers[j][0] and stickers[i][1] == stickers[j][1]:\n                    answer += stickers[i][0]\n                    break\n    return answer\n"
    },
    {
        "number": 3661,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S, L = map(int, stdin.split())\n    if R < 1 or S < 1 or L < 1 or L > 2000:\n        return \"NO\"\n    if R == 1 and S == 1 and L == 1:\n        return \"INDV\"\n    if R == 1 and S == 1 and L == 2:\n        return \"CORP\"\n    if R == 1 and S == 1 and L == 3:\n        return \"INDV\"\n    if R == 1 and S == 1 and L == 4:\n        return \"CORP\"\n    if R == 1 and S == 1 and L == 5:\n        return \"INDV\"\n    if R == 2 and S == 1 and L == 1:\n        return \"CORP\"\n    if R == 2 and S == 1 and L == 2:\n        return \"INDV\"\n    if R == 2 and S == 1 and L == 3:\n        return \"CORP\"\n    if R == 2 and S == 1 and L == 4:\n        return \"INDV\"\n    if R == 2 and S == 1 and L == 5:\n        return \"CORP\"\n    if R == 3 and S == 1 and L == 1:\n        return \"CORP\"\n    if R == 3 and S == 1 and L == 2:\n        return \"INDV\"\n    if R == 3 and S == 1 and L == 3:\n        return \"CORP\"\n    if R == 3 and S == 1 and L == 4:\n        return \"INDV\"\n    if R == 3 and S == 1 and L == 5:\n        return \"CORP\"\n    if R == 4 and S == 1 and L == 1:\n        return \"CORP\"\n    if R == 4 and S == 1 and L == 2:\n        return \"INDV\"\n    if R == 4 and S == 1 and L == 3:\n        return \"CORP\"\n    if R == 4 and S == 1 and L == 4:\n        return \"INDV\"\n    if R == 4 and S == 1 and L == 5:\n        return \"CORP\"\n    if R == 5 and S == 1 and L == 1:\n        return \"CORP\"\n    if R == 5 and S == 1 and L == 2:\n        return \"INDV\"\n    if R == 5 and S == 1 and L == 3:\n        return \"CORP\"\n    if R == 5 and S == 1 and L == 4:\n        return \"INDV\"\n    if R == 5 and S == 1 and L == 5:\n        return \"CORP\"\n    if R == 6 and S == 1 and L == 1:\n        return \"CORP\"\n    if R == 6 and S == 1 and L == 2:\n        return \"INDV\"\n    if R == 6 and S == 1 and L == 3:\n        return \"CORP\"\n    if R == 6 and S == 1 and L == 4:\n        return \"INDV\"\n    if R == 6 and S == 1 and L == 5:\n        return \"CORP\"\n    if R == 6 and S == 1 and L == 6:\n        return \"INDV\"\n    if R == 7 and S == 1 and L == 1:\n        return \"CORP\"\n    if R == 7 and S == 1 and L == 2:\n        return \"INDV\"\n    if R == 7 and S == 1 and L == 3:\n        return \"CORP\"\n    if R == 7 and S == 1 and L == 4:\n        return \"INDV\"\n    if R == 7 and S == 1 and L == 5:\n        return \"CORP\"\n    if R == 7 and S == 1 and L == 6:\n        return \"INDV\"\n    if R == 7 and S == 1 and L == 7:\n        return \"CORP\"\n    if R == 8 and S == 1 and L == 1:\n        return \"CORP\"\n    if R == 8 and S == 1 and L == 2:\n        return \"INDV\"\n    if R == 8 and S == 1 and L == 3:\n        return \"CORP\"\n    if R == 8 and S == 1 and L == 4:\n        return \"INDV\"\n    if R == 8 and S == 1 and L == 5:\n        return \"CORP\"\n    if R == 8 and S == 1 and L == 6:\n        return \"INDV\"\n    if R == 8 and S == 1 and L == 7:\n        return \"CORP\"\n    if R == 9 and S == 1 and L == 1:\n        return \"CORP\"\n    if R == 9 and S == 1 and L == 2:\n        return \"INDV\"\n    if R == 9 and S == 1 and L == 3:\n        return \"CORP\"\n    if R == 9 and S == 1 and L == 4:\n        return \"INDV\"\n    if R == 9 and S == 1 and L == 5:\n        return \"CORP\"\n    if R == 9 and S == 1 and L == 6:\n        return \"INDV\"\n    if R == 9 and S == 1 and L == 7:\n        return \"CORP\"\n    if R == 10 and S == 1 and L == 1:\n        return \"CORP\"\n    if R == 10 and S == 1 and L == 2:\n        return \"INDV\"\n    if R == 10 and S == 1 and L == 3:\n        return \"CORP\"\n    if R == 10 and S == 1 and L == 4:\n        return \"INDV\"\n    if R == 10 and S == 1 and L == 5"
    },
    {
        "number": 3662,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L, W = map(int, stdin.split())\n    return str(abs(L - W)) + \".\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    u = [int(i) for i in stdin.split()]\n    v = [int(i) for i in stdin.split()]\n    c = [int(i) for i in stdin.split()]\n    \n    def dfs(u, v, c, i):\n        if i == n:\n            return c[u-1]\n        \n        if u == v:\n            return c[i]\n        \n        if u < v:\n            return max(c[u], c[v] + dfs(u, v, c, i+1))\n        \n        return max(c[u], c[v] + dfs(u, v, c, i+1))\n    \n    return str(dfs(u, v, c, 0))\n"
    },
    {
        "number": 3664,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, i, j, n = map(int, stdin.split())\n    grid = [['.'] * c for _ in range(r)]\n    for _ in range(n):\n        r, c, i, j = map(int, stdin.split())\n        grid[i][j] = '@'\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == '.':\n                grid[i][j] = '@'\n            elif grid[i][j] == '@':\n                grid[i][j] = '.'\n    return '\\n'.join([''.join(row) for row in grid])\n\nSample Output:\n.....\n..BBC\n..A.C\n....C\n@DDDD\ndef"
    },
    {
        "number": 3665,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    for i in range(m):\n        nums[i] = str(nums[i])\n    return ''.join(nums)\n"
    },
    {
        "number": 3666,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    if n % d!= 0:\n        return 'Impossible'\n    \n    front, rear = map(int, stdin.split())\n    if front > rear:\n        return 'Impossible'\n    \n    front_sprocket_sizes = [front]\n    rear_sprocket_sizes = [rear]\n    \n    for i in range(1, n // d + 1):\n        front_sprocket_sizes.append(front_sprocket_sizes[i - 1] + d)\n        rear_sprocket_sizes.append(rear_sprocket_sizes[i - 1] + d)\n    \n    front_sprocket_sizes.sort()\n    rear_sprocket_sizes.sort()\n    \n    for i in range(len(front_sprocket_sizes)):\n        if front_sprocket_sizes[i] + d > rear_sprocket_sizes[i]:\n            return 'Impossible'\n    \n    return ''.join(front_sprocket_sizes[:len(front_sprocket_sizes) - 1] + [str(front_sprocket_sizes[-1] + d)] + rear_sprocket_sizes[:len(rear_sprocket_sizes) - 1])\n"
    },
    {
        "number": 3667,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, p = map(int, stdin.split())\n    if w > 1000 or p > 1000:\n        return \"possible\"\n    if w == 0 or p == 0:\n        return \"impossible\"\n    if w == 1:\n        return \"possible\"\n    if p == 1:\n        return \"possible\"\n    if w == 2:\n        return \"possible\"\n    if p == 2:\n        return \"possible\"\n    if w == 3:\n        return \"possible\"\n    if p == 3:\n        return \"possible\"\n    if w == 4:\n        return \"possible\"\n    if p == 4:\n        return \"possible\"\n    if w == 5:\n        return \"possible\"\n    if p == 5:\n        return \"possible\"\n    if w == 6:\n        return \"possible\"\n    if p == 6:\n        return \"possible\"\n    if w == 7:\n        return \"possible\"\n    if p == 7:\n        return \"possible\"\n    if w == 8:\n        return \"possible\"\n    if p == 8:\n        return \"possible\"\n    if w == 9:\n        return \"possible\"\n    if p == 9:\n        return \"possible\"\n    if w == 10:\n        return \"possible\"\n    if p == 10:\n        return \"possible\"\n    if w == 11:\n        return \"possible\"\n    if p == 11:\n        return \"possible\"\n    if w == 12:\n        return \"possible\"\n    if p == 12:\n        return \"possible\"\n    if w == 13:\n        return \"possible\"\n    if p == 13:\n        return \"possible\"\n    if w == 14:\n        return \"possible\"\n    if p == 14:\n        return \"possible\"\n    if w == 15:\n        return \"possible\"\n    if p == 15:\n        return \"possible\"\n    if w == 16:\n        return \"possible\"\n    if p == 16:\n        return \"possible\"\n    if w == 17:\n        return \"possible\"\n    if p == 17:\n        return \"possible\"\n    if w == 18:\n        return \"possible\"\n    if p == 18:\n        return \"possible\"\n    if w == 19:\n        return \"possible\"\n    if p == 19:\n        return \"possible\"\n    if w == 20:\n        return \"possible\"\n    if p == 20:\n        return \"possible\"\n    if w == 21:\n        return \"possible\"\n    if p == 21:\n        return \"possible\"\n    if w == 22:\n        return \"possible\"\n    if p == 22:\n        return \"possible\"\n    if w == 23:\n        return \"possible\"\n    if p == 23:\n        return \"possible\"\n    if w == 24:\n        return \"possible\"\n    if p == 24:\n        return \"possible\"\n    if w == 25:\n        return \"possible\"\n    if p == 25:\n        return \"possible\"\n    if w == 26:\n        return \"possible\"\n    if p == 26:\n        return \"possible\"\n    if w == 27:\n        return \"possible\"\n    if p == 27:\n        return \"possible\"\n    if w == 28:\n        return \"possible\"\n    if p == 28:\n        return \"possible\"\n    if w == 29:\n        return \"possible\"\n    if p == 29:\n        return \"possible\"\n    if w == 30:\n        return \"possible\"\n    if p == 30:\n        return \"possible\"\n    if w == 31:\n        return \"possible\"\n    if p == 31:\n        return \"possible\"\n    if w == 32:\n        return \"possible\"\n    if p == 32:\n        return \"possible\"\n    if w == 33:\n        return \"possible\"\n    if p == 33:\n        return \"possible\"\n    if w == 34:\n        return \"possible\"\n    if p == 34:\n        return \"possible\"\n    if w == 35:\n        return \"possible\"\n    if p == 35:\n        return \"possible\"\n    if w == 36:\n        return \"possible\"\n    if p == 36:\n        return \"possible\"\n    if w == 37:\n        return \"possible\"\n    if p == 37:\n        return \"possible\"\n    if w == 38:\n        return \"possible\"\n    if p == 38:\n        return \"possible\"\n    if w == 39:\n        return \"possible\"\n    if p == 39:\n        return \"possible\"\n    if w == 40:\n        return \"possible\"\n    if p == 40:\n        return \"possible\"\n    if w == 41:\n        return \"possible\"\n    if p == 41:\n        return \"possible\"\n    if w == 42:\n        return \"possible\"\n    if p == 42:\n        return \"possible\"\n    if w == 43:\n        return \"possible\"\n    if p == 43:\n        return \"possible\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(len(set(a)))\n"
    },
    {
        "number": 3669,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    X, Y = map(int, stdin.split())\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Mirko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X == Y:\n        return \"Mirko\"\n    if X > Y:\n        return \"Slavko\"\n    if X < Y:\n        return \"Slavko\"\n    if X =="
    },
    {
        "number": 3670,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin[::-1])\n    if n % m == 0:\n        return str(m)\n    else:\n        return str(m) + solution(stdin[::-1])\n\nSample Output:\n2 4\ndef"
    },
    {
        "number": 3671,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    nums.sort()\n    answer = 0\n    for i in range(n):\n        answer += nums[i] * (nums[i] + 1) // 2\n    return str(answer)\n\ndef"
    },
    {
        "number": 3672,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    island = []\n    for i in range(n):\n        island.append(list(map(int, stdin.split())))\n    \n    def is_valid(i, j):\n        if 0 <= i < m and 0 <= j < n and island[i][j] == 0:\n            return True\n        return False\n    \n    def dfs(i, j):\n        if i == m - 1 and j == n - 1:\n            return True\n        if i == m - 1 and j == 0:\n            return False\n        if j == n - 1 and i == 0:\n            return False\n        if i == 0 and j == 0:\n            return False\n        if i == 0 and j == 0:\n            return True\n        \n        if is_valid(i + 1, j):\n            is_valid(i + 1, j)\n        if is_valid(i, j + 1):\n            is_valid(i, j + 1)\n        if is_valid(i - 1, j):\n            is_valid(i - 1, j)\n        if is_valid(i, j - 1):\n            is_valid(i, j - 1)\n        \n        return dfs(i + 1, j) or dfs(i, j + 1) or dfs(i - 1, j) or dfs(i, j - 1)\n    \n    answer = \"NO\"\n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j):\n                answer = \"YES\"\n    return answer\n"
    },
    {
        "number": 3673,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = [list(map(int, input().split())) for _ in range(N)]\n    arr.sort(key=lambda x: x[0])\n    for i in range(N):\n        for j in range(i+1, N):\n            if arr[i][0] == arr[j][0] and arr[i][1] == arr[j][1]:\n                arr[i][1] = arr[j][1]\n                arr[j][1] = arr[i][1]\n    for i in range(N):\n        if arr[i][1] == K:\n            print(arr[i][0])\n            return\n    print('Impossible')\n    return\n\ndef"
    },
    {
        "number": 3674,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p, q = map(int, stdin.split())\n    if n == m:\n        return str(p*q)\n    if n < m:\n        return str(p*q)\n    if n % m == 0:\n        return str(p*q)\n    return str(p*q)\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\n20512\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5 2 8 4\nSample Output:\nIMPOSSIBLE\n\nSample Input:\n5"
    },
    {
        "number": 3675,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    t = stdin.split()\n    \n    def is_subsequence(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_2(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_3(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_4(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_5(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_6(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_7(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_8(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_9(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_10(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_11(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_12(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_13(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_14(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_15(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_16(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_17(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_18(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_19(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_20(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_21(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_22(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_23(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_24(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_25(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_26(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_27(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_28(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_29(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_30(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_31(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_32(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_33(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_34(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_35(s, t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n    \n    def is_subsequence_36(s, t):\n        for i in range(len(s)):\n            if s[i"
    },
    {
        "number": 3676,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    chocolates = []\n    for _ in range(R):\n        chocolates.append(list(map(int, stdin.split())))\n    \n    def count_ways(chocolates, i, j):\n        if i == j:\n            return 1\n        \n        ways = 0\n        for k in range(i, j):\n            if chocolates[i][k] == 1:\n                ways += count_ways(chocolates, i, k)\n            if chocolates[k][j] == 1:\n                ways += count_ways(chocolates, k, j)\n        \n        return ways\n    \n    return str(count_ways(chocolates, 0, 0))\n\nSample Output:\n3\nExplanation:\n\nThe box of chocolates is $2$ by $2$ and $2$ by $2$ and $2$ by $2$ and $2$ by $2$.\n\nThe box of chocolates is $2$ by $2$ and $2$ by $2$ and $2$ by $2$.\n\nThe box of chocolates is $2$ by $2$ and $2$ by $2$.\n\nThe box of chocolates is $2$ by $2$ and $2$ by $2$.\n\nThe box of chocolates is $2$ by $2$.\n\nThe box of chocolates is $2$ by $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n\nThe box of chocolates is $2$.\n"
    },
    {
        "number": 3677,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d = {}\n    for i in range(N):\n        d[i] = int(stdin.split()[i])\n    d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    for i in range(N):\n        if d[i][1] < K:\n            return str(i+1)\n    return str(N)\n"
    },
    {
        "number": 3678,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 'NO'\n    x = [int(i) for i in stdin.split()]\n    y = [int(i) for i in stdin.split()]\n    x.sort()\n    y.sort()\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[-1]:\n        return 'YES'\n    if x[-1] == y[0]:\n        return 'YES'\n    if x[0] == y[-1]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[-1]:\n        return 'YES'\n    if x[-1] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n        return 'YES'\n    if x[0] == y[0]:\n        return 'YES'\n    if x[-1] == y[-1]:\n"
    },
    {
        "number": 3679,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return"
    },
    {
        "number": 3680,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    poles = list(map(int, stdin.split()))\n    poles.sort()\n    cuts = 0\n    for i in range(N):\n        if poles[i] - poles[i - 1] > K:\n            cuts += 1\n    return str(cuts)\n\nSample Output:\n1\nExplanation:\nThe fence posts are as follows:\n\n1. 1\n2. 1\n3. 1\n4. 1\n5. 1\n6. 1\n7. 1\n8. 1\n9. 1\n10. 1\n11. 1\n12. 1\n13. 1\n14. 1\n15. 1\n16. 1\n17. 1\n18. 1\n19. 1\n20. 1\n21. 1\n22. 1\n23. 1\n24. 1\n25. 1\n26. 1\n27. 1\n28. 1\n29. 1\n30. 1\n31. 1\n32. 1\n33. 1\n34. 1\n35. 1\n36. 1\n37. 1\n38. 1\n39. 1\n40. 1\n41. 1\n42. 1\n43. 1\n44. 1\n45. 1\n46. 1\n47. 1\n48. 1\n49. 1\n50. 1\n51. 1\n52. 1\n53. 1\n54. 1\n55. 1\n56. 1\n57. 1\n58. 1\n59. 1\n60. 1\n61. 1\n62. 1\n63. 1\n64. 1\n65. 1\n66. 1\n67. 1\n68. 1\n69. 1\n70. 1\n71. 1\n72. 1\n73. 1\n74. 1\n75. 1\n76. 1\n77. 1\n78. 1\n79. 1\n80. 1\n81. 1\n82. 1\n83. 1\n84. 1\n85. 1\n86. 1\n87. 1\n88. 1\n89. 1\n90. 1\n91. 1\n92. 1\n93. 1\n94. 1\n95. 1\n96. 1\n97. 1\n98. 1\n99. 1\n100. 1\n101. 1\n102. 1\n103. 1\n104. 1\n105. 1\n106. 1\n107. 1\n108. 1\n109. 1\n110. 1\n111. 1\n112. 1\n113. 1\n114. 1\n115. 1\n116. 1\n117. 1\n118. 1\n119. 1\n120. 1\n121. 1\n122. 1\n123. 1\n124. 1\n125. 1\n126. 1\n127. 1\n128. 1\n129. 1\n130. 1\n131. 1\n132. 1\n133. 1\n134. 1\n135. 1\n136. 1\n137. 1\n138. 1\n139. 1\n140. 1\n141. 1\n142. 1\n143. 1\n144. 1\n145. 1\n146. 1\n147. 1\n148. 1\n149. 1\n150. 1\n151. 1\n152. 1\n153. 1\n154. 1\n155. 1\n156. 1\n157. 1\n158. 1\n159. 1\n160. 1\n161. 1\n162. 1\n163. 1\n164. 1\n165. 1\n166. 1\n167. 1\n168. 1\n169. 1\n170. 1\n171. 1\n172. 1\n173. 1\n174. 1\n175. 1\n176. 1\n177. 1\n178. 1\n179. 1\n180. 1\n181. 1\n182. 1\n183. 1\n184. 1\n185. 1\n186. 1\n187. 1\n188. 1\n189. 1\n190. 1\n191. 1\n192. 1\n193. 1\n194. 1\n195. 1\n196. 1\n197. 1\n198. 1\n199. 1\n200. 1\n201. 1\n202. 1\n203. 1\n204. 1\n205. 1\n206. 1\n207. 1\n208. 1\n209. 1\n210. 1\n211. 1\n212. 1\n213. 1\n214. 1\n215. 1\n216. 1\n217. 1\n218. 1\n219. 1\n220. 1\n221. 1\n222. 1\n223. 1\n224. 1\n225. 1\n226. 1\n227. 1\n228. 1\n229. 1\n230. 1\n231. 1\n232. 1\n233. 1\n234. 1\n235. 1\n236. 1\n237. 1\n238. 1\n239. 1\n240. 1\n241. 1\n242. 1\n243. 1\n244. 1\n245. 1\n246. 1\n247. 1\n248. 1\n249. 1\n250. 1\n251. 1\n252. 1\n253. 1\n254. 1\n255. 1\n256. 1\n257. 1\n258. 1\n259. 1\n260. 1\n261. 1\n262. 1\n263. 1\n264. 1\n265. 1\n266. 1\n267. 1\n268. 1\n269. 1\n270. 1\n271. 1\n272. 1\n273. 1\n274. 1\n275. 1\n276. 1\n277. 1\n278. 1\n279. 1\n280. 1\n281. 1\n282. 1\n283. 1\n284. 1\n285. 1\n286. 1\n287. 1\n288. 1\n289. 1\n290. 1\n291. 1\n292. 1\n293. 1\n294. 1\n295. 1\n296. 1\n297. 1\n298. 1\n299. 1\n300. 1\n301. 1\n302. 1\n303. 1\n304. 1\n305. 1\n306. 1\n307. 1\n308. 1\n309. 1\n310. 1\n311. 1\n312. 1\n313. 1\n314. 1\n315. 1\n316. 1\n317. 1\n318. 1\n319. 1\n320. 1\n321. 1\n322. 1\n323. 1\n324. 1\n325. 1\n326. 1\n327. 1\n328. 1\n329. 1\n330. 1\n331. 1\n332. 1\n333. 1\n334. 1\n335. 1\n336. 1\n337. 1\n338. 1\n339. 1\n340. 1\n341. 1\n342. 1\n343. 1\n344. 1\n345. 1\n346. 1\n347. 1\n348. 1\n349. 1\n350. 1\n351. 1\n352. 1\n353. 1\n354. 1\n355. 1\n356. 1\n357. 1\n358. 1\n359. 1\n360. 1\n361. 1\n362. 1\n363. 1\n364. 1\n365. 1\n366. 1\n367. 1\n368. 1\n369. 1\n370. 1\n371. 1\n372. 1\n373. 1\n374. 1\n375. 1\n376. 1\n377. 1\n378. 1\n379. 1\n380. 1\n381. 1\n382. 1\n383. 1\n384. 1\n385. 1\n386. 1\n387. 1\n388. 1\n389. 1\n390. 1\n391. 1\n392. 1\n393. 1\n394. 1\n395. 1\n396. 1\n397. 1\n398. 1\n399. 1\n400. 1\n401. 1\n402. 1\n403. 1\n404. 1\n405. 1\n"
    },
    {
        "number": 3681,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    p_1, p_2, p_3, p_4 = map(int, stdin.split())\n    p_1, p_2, p_3, p_4 = sorted([p_1, p_2, p_3, p_4])\n    d = [0] * (M + 1)\n    for i in range(M):\n        d[i + 1] = i + 1\n    for i in range(Q):\n        x, y = map(int, stdin.split())\n        d[x] = y\n    for i in range(Q):\n        if i == 0:\n            d[d[p_1]] = p_1\n            d[d[p_2]] = p_2\n            d[d[p_3]] = p_3\n            d[d[p_4]] = p_4\n        elif i == 1:\n            d[d[p_1]] = p_1\n            d[d[p_2]] = p_2\n            d[d[p_3]] = p_3\n            d[d[p_4]] = p_4\n        else:\n            d[d[p_1]] = p_1\n            d[d[p_2]] = p_2\n            d[d[p_3]] = p_3\n            d[d[p_4]] = p_4\n    return ''.join(map(str, d))\n\ndef"
    },
    {
        "number": 3682,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(n):\n        line = stdin.strip().split()\n        if len(line) > 10000:\n            print(0)\n            return \"\"\n        print(line[0])\n    return \"\"\n\nSample Input:\n2\nHelloWorld.c\nint Main() {\n  printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\nSample Output:\n2 HelloWorld.c\ndef"
    },
    {
        "number": 3683,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    score = [0] * (n + 1)\n    for i in range(1, n + 1):\n        score[i] = int(stdin.split()[i])\n    score.sort()\n    for i in range(n, 0, -1):\n        score[i] += score[i - 1]\n    answer = ''\n    for i in range(n):\n        answer += str(score[i]) +''\n    return answer[:-1]\n\ndef"
    },
    {
        "number": 3684,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, C = map(int, stdin.split())\n    p_i = int(stdin.split()[0])\n    b_i = int(stdin.split()[1])\n    u_i = int(stdin.split()[2])\n    b_i = b_i + C\n    u_i = u_i + C\n    if p_i < 0 or p_i > b_i or u_i < 0 or u_i > b_i:\n        return \"0\"\n    if p_i == 0:\n        return str(b_i)\n    if u_i == 0:\n        return str(b_i)\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -p_i\n    if u_i < 0:\n        u_i = -u_i\n    if p_i > b_i:\n        p_i = b_i\n    if u_i > b_i:\n        u_i = b_i\n    if p_i < 0:\n        p_i = -"
    },
    {
        "number": 3685,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    if r == 1 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 1 and c == 2:\n        return 'IMPOSSIBLE'\n    if r == 1 and c == 3:\n        return 'IMPOSSIBLE'\n    if r == 1 and c == 4:\n        return 'IMPOSSIBLE'\n    if r == 1 and c == 5:\n        return 'IMPOSSIBLE'\n    if r == 1 and c == 6:\n        return 'IMPOSSIBLE'\n    if r == 1 and c == 7:\n        return 'IMPOSSIBLE'\n    if r == 2 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 2 and c == 2:\n        return 'IMPOSSIBLE'\n    if r == 2 and c == 3:\n        return 'IMPOSSIBLE'\n    if r == 2 and c == 4:\n        return 'IMPOSSIBLE'\n    if r == 2 and c == 5:\n        return 'IMPOSSIBLE'\n    if r == 2 and c == 6:\n        return 'IMPOSSIBLE'\n    if r == 2 and c == 7:\n        return 'IMPOSSIBLE'\n    if r == 3 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 3 and c == 2:\n        return 'IMPOSSIBLE'\n    if r == 3 and c == 3:\n        return 'IMPOSSIBLE'\n    if r == 3 and c == 4:\n        return 'IMPOSSIBLE'\n    if r == 3 and c == 5:\n        return 'IMPOSSIBLE'\n    if r == 3 and c == 6:\n        return 'IMPOSSIBLE'\n    if r == 3 and c == 7:\n        return 'IMPOSSIBLE'\n    if r == 4 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 4 and c == 2:\n        return 'IMPOSSIBLE'\n    if r == 4 and c == 3:\n        return 'IMPOSSIBLE'\n    if r == 4 and c == 4:\n        return 'IMPOSSIBLE'\n    if r == 4 and c == 5:\n        return 'IMPOSSIBLE'\n    if r == 4 and c == 6:\n        return 'IMPOSSIBLE'\n    if r == 4 and c == 7:\n        return 'IMPOSSIBLE'\n    if r == 5 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 5 and c == 2:\n        return 'IMPOSSIBLE'\n    if r == 5 and c == 3:\n        return 'IMPOSSIBLE'\n    if r == 5 and c == 4:\n        return 'IMPOSSIBLE'\n    if r == 5 and c == 5:\n        return 'IMPOSSIBLE'\n    if r == 5 and c == 6:\n        return 'IMPOSSIBLE'\n    if r == 5 and c == 7:\n        return 'IMPOSSIBLE'\n    if r == 6 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 6 and c == 2:\n        return 'IMPOSSIBLE'\n    if r == 6 and c == 3:\n        return 'IMPOSSIBLE'\n    if r == 6 and c == 4:\n        return 'IMPOSSIBLE'\n    if r == 6 and c == 5:\n        return 'IMPOSSIBLE'\n    if r == 6 and c == 6:\n        return 'IMPOSSIBLE'\n    if r == 6 and c == 7:\n        return 'IMPOSSIBLE'\n    if r == 7 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 7 and c == 2:\n        return 'IMPOSSIBLE'\n    if r == 7 and c == 3:\n        return 'IMPOSSIBLE'\n    if r == 7 and c == 4:\n        return 'IMPOSSIBLE'\n    if r == 7 and c == 5:\n        return 'IMPOSSIBLE'\n    if r == 7 and c == 6:\n        return 'IMPOSSIBLE'\n    if r == 7 and c == 7:\n        return 'IMPOSSIBLE'\n    if r == 8 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 8 and c == 2:\n        return 'IMPOSSIBLE'\n    if r == 8 and c == 3:\n        return 'IMPOSSIBLE'\n    if r == 8 and c == 4:\n        return 'IMPOSSIBLE'\n    if r == 8 and c == 5:\n        return 'IMPOSSIBLE'\n    if r == 8 and c == 6:\n        return 'IMPOSSIBLE'\n    if r == 8 and c == 7:\n        return 'IMPOSSIBLE'\n    if r == 9 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 9 and c == 2:\n        return 'IMPOSSIBLE'\n    if r == 9 and c == 3:\n        return 'IMPOSSIBLE'\n    if r == 9 and c == 4:\n        return 'IMPOSSIBLE'\n    if r == 9 and c == 5:\n        return 'IMPOSSIBLE'\n    if r == 9 and c == 6:\n        return 'IMPOSSIBLE'\n    if r == 9 and c == 7:\n        return 'IMPOSSIBLE'\n    if r == 10 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 10 and c == 2:\n        return 'IMPOSSIBLE'\n    if r == 10 and c == 3:\n        return 'IMPOSSIBLE'\n    if r == 10 and c == 4:\n        return 'IMPOSSIBLE'\n    if r == 10 and c == 5:\n        return 'IMPOSSIBLE'\n    if r == 10 and c == 6:\n        return 'IMPOSSIBLE'\n    if r == 10 and c == 7:\n        return 'IMPOSSIBLE'\n    if r == 11 and c == 1:\n        return 'IMPOSSIBLE'\n    if r == 11 and c == 2"
    },
    {
        "number": 3686,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    targets = []\n    for i in range(n):\n        x, y = map(int, stdin.strip().split())\n        targets.append((x, y))\n    \n    def check(x, y):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return False\n        if targets[x][y] == -1:\n            return False\n        return True\n    \n    def check_all(x, y):\n        for i in range(n):\n            if check(x, i) and check(i, y):\n                return True\n        return False\n    \n    def check_all_2(x, y):\n        for i in range(n):\n            if check_all(x, i) and check_all(i, y):\n                return True\n        return False\n    \n    def check_all_3(x, y):\n        for i in range(n):\n            if check_all_2(x, i) and check_all_2(i, y):\n                return True\n        return False\n    \n    def check_all_4(x, y):\n        for i in range(n):\n            if check_all_3(x, i) and check_all_3(i, y):\n                return True\n        return False\n    \n    def check_all_5(x, y):\n        for i in range(n):\n            if check_all_4(x, i) and check_all_4(i, y):\n                return True\n        return False\n    \n    def check_all_6(x, y):\n        for i in range(n):\n            if check_all_5(x, i) and check_all_5(i, y):\n                return True\n        return False\n    \n    def check_all_7(x, y):\n        for i in range(n):\n            if check_all_6(x, i) and check_all_6(i, y):\n                return True\n        return False\n    \n    def check_all_8(x, y):\n        for i in range(n):\n            if check_all_7(x, i) and check_all_7(i, y):\n                return True\n        return False\n    \n    def check_all_9(x, y):\n        for i in range(n):\n            if check_all_8(x, i) and check_all_8(i, y):\n                return True\n        return False\n    \n    def check_all_10(x, y):\n        for i in range(n):\n            if check_all_9(x, i) and check_all_9(i, y):\n                return True\n        return False\n    \n    def check_all_11(x, y):\n        for i in range(n):\n            if check_all_10(x, i) and check_all_10(i, y):\n                return True\n        return False\n    \n    def check_all_12(x, y):\n        for i in range(n):\n            if check_all_11(x, i) and check_all_11(i, y):\n                return True\n        return False\n    \n    def check_all_13(x, y):\n        for i in range(n):\n            if check_all_12(x, i) and check_all_12(i, y):\n                return True\n        return False\n    \n    def check_all_14(x, y):\n        for i in range(n):\n            if check_all_13(x, i) and check_all_13(i, y):\n                return True\n        return False\n    \n    def check_all_15(x, y):\n        for i in range(n):\n            if check_all_14(x, i) and check_all_14(i, y):\n                return True\n        return False\n    \n    def check_all_16(x, y):\n        for i in range(n):\n            if check_all_15(x, i) and check_all_15(i, y):\n                return True\n        return False\n    \n    def check_all_17(x, y):\n        for i in range(n):\n            if check_all_16(x, i) and check_all_16(i, y):\n                return True\n        return False\n    \n    def check_all_18(x, y):\n        for i in range(n):\n            if check_all_17(x, i) and check_all_17(i, y):\n                return True\n        return False\n    \n    def check_all_19(x, y):\n        for i in range(n):\n            if check_all_18(x, i) and check_all_18(i, y):\n                return True\n        return False\n    \n    def check_all_20(x, y):\n        for i in range(n):\n            if check_all_19(x, i) and check_all_19(i, y):\n                return True\n        return False\n    \n    def check_all_21(x, y):\n        for i in range(n):\n            if check_all_20(x, i) and check_all_20(i, y):\n                return True\n        return False\n    \n    def check_all_22(x, y):\n        for i in range(n):\n            if check_all_21(x, i) and check_all_21(i, y):\n                return True\n        return False\n    \n    def check_all_23(x, y):\n        for i in range(n):\n            if check_all_22(x, i) and check_all_22(i, y):\n                return True\n        return False\n    \n    def check_all_24(x, y):\n        for i in range(n):\n            if check_all_23(x, i) and check_all_23(i, y):\n                return True\n        return False\n    \n    def check_all_25(x, y):\n        for i in range(n):\n            if check_all_24(x, i) and check_all_24(i, y):\n                return True\n        return False\n    \n    def check_all_26(x, y):\n        for i in range(n):\n            if check_all_25(x, i) and check_all_25(i, y):\n                return True\n        return False\n    \n    def check_all_27(x, y):\n        for i in range(n):\n            if check_all_26(x, i) and check_all_26(i, y):\n                return True\n        return False\n    \n    def check_all_28(x, y):\n        for i in range(n):\n            "
    },
    {
        "number": 3687,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,q,s = map(int,stdin.split())\n    q_ = q\n    c_ = 10**6\n    a_ = 10**6\n    for i in range(n):\n        a_ = a_ - q_\n        q_ = q_ * s\n        c_ = c_ + q_\n    return str(c_)\n\nSample Output:\npossible\ndef"
    },
    {
        "number": 3688,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    x_min = x\n    y_min = y\n    for i in range(n):\n        x_min = min(x_min, x + i)\n        y_min = min(y_min, y + i)\n    return str(abs(x_min - y_min))\n\nSample Output:\n0\ndef"
    },
    {
        "number": 3689,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(k):\n        if a[i] == 0:\n            a[i] = 9\n    a.sort()\n    for i in range(k, n):\n        if a[i] == 0:\n            a[i] = 9\n    a.sort()\n    for i in range(k, n):\n        if a[i] == 0:\n            a[i] = 9\n    return str(min(a))\n\n-----Constraints-----\n1 <= n <= 200\n1 <= k <= n\n1 <= a_i <= 9\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Space Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 1-----\nInput\n3 2\n353\n\nOutput\n3\n353\n\nExplanation\nThe number of digits in $x$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number of digits in $y$ is 3, so the smallest number is 3.\n\nThe number"
    },
    {
        "number": 3690,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m, s, t_1, t_2 = map(int, stdin.split())\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"NO\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 == t_2:\n        return \"YES\"\n    if t_1 > t_2:\n        t_1, t_2 = t_2, t_1\n    if t_1 < t_2:\n"
    },
    {
        "number": 3691,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_0, y_0, a_x, a_y, b_x, b_y = map(int, stdin.split())\n    t = int(stdin.split()[1])\n    if t < 0:\n        return \"0\"\n    if t > 0:\n        return \"0\"\n    if x_0 == 0 and y_0 == 0:\n        return \"0\"\n    if x_0 == 0:\n        return \"0\"\n    if y_0 == 0:\n        return \"0\"\n    if a_x == 0 and a_y == 0:\n        return \"0\"\n    if a_x == 0:\n        return \"0\"\n    if a_y == 0:\n        return \"0\"\n    if b_x == 0 and b_y == 0:\n        return \"0\"\n    if b_x == 0:\n        return \"0\"\n    if b_y == 0:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_y:\n        return \"0\"\n    if a_x == b_x:\n        return \"0\"\n    if a_y == b_"
    },
    {
        "number": 3692,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    circles = []\n    for _ in range(n):\n        x, y, r = map(int, stdin.strip().split())\n        circles.append((x, y, r))\n    return str(len(set(circles)))\n\n-----Constraints-----\n\n1 <= n <= 10^5\n-10^5 <= x, y, r <= 10^5\n\n-----Time Limit: 1 second\n-----Memory Limit: 1GB\n\n-----For Questions 1-3, see the sample input.\n\n-----For Questions 4-7, see the sample output.\n\n-----For Questions 8-10, see the sample input.\n\n-----For Questions 11-13, see the sample output.\n\n-----For Questions 14-16, see the sample input.\n\n-----For Questions 17-19, see the sample output.\n\n-----For Questions 20-22, see the sample input.\n\n-----For Questions 23-26, see the sample output.\n\n-----For Questions 27-29, see the sample input.\n\n-----For Questions 30-32, see the sample output.\n\n-----For Questions 33-36, see the sample input.\n\n-----For Questions 37-39, see the sample output.\n\n-----For Questions 40-42, see the sample input.\n\n-----For Questions 43-46, see the sample output.\n\n-----For Questions 47-49, see the sample input.\n\n-----For Questions 50-52, see the sample output.\n\n-----For Questions 53-56, see the sample input.\n\n-----For Questions 57-59, see the sample output.\n\n-----For Questions 60-62, see the sample input.\n\n-----For Questions 63-66, see the sample output.\n\n-----For Questions 67-69, see the sample input.\n\n-----For Questions 70-72, see the sample output.\n\n-----For Questions 73-76, see the sample input.\n\n-----For Questions 77-79, see the sample output.\n\n-----For Questions 80-82, see the sample input.\n\n-----For Questions 83-86, see the sample output.\n\n-----For Questions 87-89, see the sample input.\n\n-----For Questions 90-92, see the sample output.\n\n-----For Questions 93-96, see the sample input.\n\n-----For Questions 97-99, see the sample output.\n\n-----For Questions 100-102, see the sample input.\n\n-----For Questions 103-106, see the sample output.\n\n-----For Questions 107-108, see the sample input.\n\n-----For Questions 109-112, see the sample output.\n\n-----For Questions 113-116, see the sample input.\n\n-----For Questions 117-118, see the sample output.\n\n-----For Questions 119-122, see the sample input.\n\n-----For Questions 123-126, see the sample output.\n\n-----For Questions 127-129, see the sample input.\n\n-----For Questions 130-132, see the sample output.\n\n-----For Questions 133-136, see the sample input.\n\n-----For Questions 137-139, see the sample output.\n\n-----For Questions 140-142, see the sample input.\n\n-----For Questions 143-146, see the sample output.\n\n-----For Questions 147-149, see the sample input.\n\n-----For Questions 150-152, see the sample output.\n\n-----For Questions 153-156, see the sample input.\n\n-----For Questions 157-159, see the sample output.\n\n-----For Questions 160-162, see the sample input.\n\n-----For Questions 163-166, see the sample output.\n\n-----For Questions 167-169, see the sample input.\n\n-----For Questions 170-172, see the sample output.\n\n-----For Questions 173-176, see the sample input.\n\n-----For Questions 177-179, see the sample output.\n\n-----For Questions 180-182, see the sample input.\n\n-----For Questions 183-186, see the sample output.\n\n-----For Questions 187-189, see the sample input.\n\n-----For Questions 190-192, see the sample output.\n\n-----For Questions 193-196, see the sample input.\n\n-----For Questions 197-199, see the sample output.\n\n-----For Questions 200-202, see the sample input.\n\n-----For Questions 203-206, see the sample output.\n\n-----For Questions 207-209, see the sample input.\n\n-----For Questions 210-212, see the sample output.\n\n-----For Questions 213-214, see the sample input.\n\n-----For Questions 215-218, see the sample output.\n\n-----For Questions 219-222, see the sample input.\n\n-----For Questions 223-226, see the sample output.\n\n-----For Questions 227-229, see the sample input.\n\n-----For Questions 230-232, see the sample output.\n\n-----For Questions 233-236, see the sample input.\n\n-----For Questions 237-239, see the sample output.\n\n-----For Questions 240-242, see the sample input.\n\n-----For Questions 243-246, see the sample output.\n\n-----For Questions 247-249, see the sample input.\n\n-----For Questions 250-252, see the sample output.\n\n-----For Questions 253-256, see the sample input.\n\n-----For Questions 257-259, see the sample output.\n\n-----For Questions 260-262, see the sample input.\n\n-----For Questions 263-266, see the sample output.\n\n-----For Questions 267-269, see the sample input.\n\n-----For Questions 270-272, see the sample output.\n\n-----For Questions 273-276, see the sample input.\n\n-----For Questions 277-279, see the sample output.\n\n-----For Questions 280-282, see the sample input.\n\n-----For Questions 283-286, see the sample output.\n\n-----For Questions 287-289, see the sample input.\n\n-----For Questions 290-292, see the sample output.\n\n-----For Questions 293-296, see the sample input.\n\n-----For Questions 297-299, see the sample output.\n\n-----For Questions 300-302, see the sample input.\n\n-----For Questions 303-306, see the sample output.\n\n-----For Questions 307-309, see the sample input.\n\n-----For Questions 310-312, see the sample output.\n\n-----For Questions 313-316, see the sample input.\n\n-----For Questions 317-319, see the sample output.\n\n-----For Questions 320-322, see the sample input.\n\n-----For Questions 323-326, see the sample output.\n\n-----For Questions 327-329, see the sample input.\n\n-----For Questions 330-332, see the sample output.\n\n-----For Questions 333-336, see the sample input.\n\n-----For Questions 334-337, see the sample output.\n\n-----For Questions 338-339, see the sample input.\n\n-----For Questions 340-342, see the sample output.\n\n-----For Questions 343-346, see the sample input.\n\n-----For Questions 347-349, see the sample output.\n\n-----For Questions 350-352, see the sample input.\n\n-----For Questions 353-356, see the sample output.\n\n-----For Questions 357-359, see the sample input.\n\n-----For Questions 360-362, see the sample output.\n\n-----"
    },
    {
        "number": 3693,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    squares = []\n    for _ in range(n):\n        squares.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if squares[i][j] == squares[j][i]:\n                squares[i][j] = 0\n"
    },
    {
        "number": 3694,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1 = int(stdin.strip())\n    a_2 = 0\n    a_3 = 0\n    a_n = 0\n    for i in range(n):\n        a_1, a_2, a_3 = map(int, stdin.strip().split())\n        if a_1 > a_2:\n            a_1, a_2 = a_2, a_1\n        if a_3 > a_2:\n            a_3 = a_2\n        a_n = max(a_1, a_2, a_3)\n    if a_n == a_1:\n        return \"sjfnb\"\n    elif a_n == a_2:\n        return \"cslnb\"\n    else:\n        return \"cslnb\"\n\nprint(solution(\"1\"))\nprint(solution(\"2\"))\nprint(solution(\"2 3\"))\nprint(solution(\"2 3 4\"))\nprint(solution(\"2 3 4 5\"))\nprint(solution(\"2 3 4 5 6\"))\nprint(solution(\"2 3 4 5 6 7\"))\nprint(solution(\"2 3 4 5 6 8\"))\nprint(solution(\"2 3 4 5 6 9\"))\nprint(solution(\"2 3 4 5 6 10\"))\nprint(solution(\"2 3 4 5 6 11\"))\nprint(solution(\"2 3 4 5 6 12\"))\nprint(solution(\"2 3 4 5 6 13\"))\nprint(solution(\"2 3 4 5 6 14\"))\nprint(solution(\"2 3 4 5 6 15\"))\nprint(solution(\"2 3 4 5 6 16\"))\nprint(solution(\"2 3 4 5 6 17\"))\nprint(solution(\"2 3 4 5 6 18\"))\nprint(solution(\"2 3 4 5 6 19\"))\nprint(solution(\"2 3 4 5 6 20\"))\nprint(solution(\"2 3 4 5 6 21\"))\nprint(solution(\"2 3 4 5 6 22\"))\nprint(solution(\"2 3 4 5 6 23\"))\nprint(solution(\"2 3 4 5 6 24\"))\nprint(solution(\"2 3 4 5 6 25\"))\nprint(solution(\"2 3 4 5 6 26\"))\nprint(solution(\"2 3 4 5 6 27\"))\nprint(solution(\"2 3 4 5 6 28\"))\nprint(solution(\"2 3 4 5 6 29\"))\nprint(solution(\"2 3 4 5 6 30\"))\nprint(solution(\"2 3 4 5 6 31\"))\nprint(solution(\"2 3 4 5 6 32\"))\nprint(solution(\"2 3 4 5 6 33\"))\nprint(solution(\"2 3 4 5 6 34\"))\nprint(solution(\"2 3 4 5 6 35\"))\nprint(solution(\"2 3 4 5 6 36\"))\nprint(solution(\"2 3 4 5 6 37\"))\nprint(solution(\"2 3 4 5 6 38\"))\nprint(solution(\"2 3 4 5 6 39\"))\nprint(solution(\"2 3 4 5 6 40\"))\nprint(solution(\"2 3 4 5 6 41\"))\nprint(solution(\"2 3 4 5 6 42\"))\nprint(solution(\"2 3 4 5 6 43\"))\nprint(solution(\"2 3 4 5 6 44\"))\nprint(solution(\"2 3 4 5 6 45\"))\nprint(solution(\"2 3 4 5 6 46\"))\nprint(solution(\"2 3 4 5 6 47\"))\nprint(solution(\"2 3 4 5 6 48\"))\nprint(solution(\"2 3 4 5 6 49\"))\nprint(solution(\"2 3 4 5 6 50\"))\nprint(solution(\"2 3 4 5 6 51\"))\nprint(solution(\"2 3 4 5 6 52\"))\nprint(solution(\"2 3 4 5 6 53\"))\nprint(solution(\"2 3 4 5 6 54\"))\nprint(solution(\"2 3 4 5 6 55\"))\nprint(solution(\"2 3 4 5 6 56\"))\nprint(solution(\"2 3 4 5 6 57\"))\nprint(solution(\"2 3 4 5 6 58\"))\nprint(solution(\"2 3 4 5 6 59\"))\nprint(solution(\"2 3 4 5 6 60\"))\nprint(solution(\"2 3 4 5 6 61\"))\nprint(solution(\"2 3 4 5 6 62\"))\nprint(solution(\"2 3 4 5 6 63\"))\nprint(solution(\"2 3 4 5 6 64\"))\nprint(solution(\"2 3 4 5 6 65\"))\nprint(solution(\"2 3 4 5 6 66\"))\nprint(solution(\"2 3 4 5 6 67\"))\nprint(solution(\"2 3 4 5 6 68\"))\nprint(solution(\"2 3 4 5 6 69\"))\nprint(solution(\"2 3 4 5 6 70\"))\nprint(solution(\"2 3 4 5 6 71\"))\nprint(solution(\"2 3 4 5 6 72\"))\nprint(solution(\"2 3 4 5 6 73\"))\nprint(solution(\"2 3 4 5 6 74\"))\nprint(solution(\"2 3 4 5 6 75\"))\nprint(solution(\"2 3 4 5 6 76\"))\nprint(solution(\"2 3 4 5 6 77\"))\nprint(solution(\"2 3 4 5 6 78\"))\nprint(solution(\"2 3 4 5 6 79\"))\nprint(solution(\"2 3 4 5 6 80\"))\nprint(solution(\"2 3 4 5 6 81\"))\nprint(solution(\"2 3 4 5 6 82\"))\nprint(solution(\"2 3 4 5 6 83\"))\nprint(solution(\"2 3 4 5"
    },
    {
        "number": 3695,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    bowls = list(map(int, stdin.split()))\n    bowls.sort()\n    \n    def get_bowls(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_2(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_3(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_4(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_5(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_6(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_7(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_8(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_9(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_10(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_11(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_12(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_13(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_14(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_15(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_16(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_17(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_18(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_19(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_20(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_21(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_22(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_23(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_24(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_25(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n        return bowls\n    \n    def get_bowls_26(n, t):\n        bowls = []\n        for i in range(n):\n            bowls.append(bowls[i] + t)\n"
    },
    {
        "number": 3696,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111"
    },
    {
        "number": 3697,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, a = map(int, stdin.split())\n    g_1, g_2, g_3 = map(int, stdin.split())\n    g_1 -= 1\n    g_2 -= 1\n    g_3 -= 1\n    g_1 += 1\n    g_2 += 1\n    g_3 += 1\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a\n    g_3 %= a\n    g_1 %= n\n    g_2 %= n\n    g_3 %= n\n    g_1 %= k\n    g_2 %= k\n    g_3 %= k\n    g_1 %= m\n    g_2 %= m\n    g_3 %= m\n    g_1 %= a\n    g_2 %= a"
    },
    {
        "number": 3698,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n_bits = bin(n)[2:]\n    n_bits = n_bits.replace('0b', '')\n    n_bits = n_bits.replace('1', '')\n    n_bits = n_bits.replace('1_', '')\n    n_bits = n_bits.replace('1_1', '')\n    n_bits = n_bits.replace('1_1_', '')\n    n_bits = n_bits.replace('1_1_1', '')\n    n_bits = n_bits.replace('1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1', '')\n    n_bits = n_bits.replace('1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1', '')\n    n_bits = n_bits.replace('1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_', '')\n    n_bits = n_bits.replace('1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_"
    },
    {
        "number": 3699,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    t = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    t.sort()\n    a_i = a[0]\n    b_i = b[0]\n    t_i = t[0]\n    for i in range(1, n):\n        a_i = a[i]\n        b_i = b[i]\n        t_i = t[i]\n        if a_i < b_i:\n            a_i += t_i\n        elif a_i > b_i:\n            b_i += t_i\n        else:\n            a_i += t_i\n            b_i += t_i\n    return str(abs(a_i - b_i))\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n0 <= a[i], b[i], t[i] <= 10^9\n\nExample 1:\n\nInput:\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n\nOutput:\n33.121375178000\n\nExample 2:\n\nInput:\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\nOutput:\n33.121375178000\n\nExample 3:\n\nInput:\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\nOutput:\n33.121375178000\n\nExample 4:\n\nInput:\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\nOutput:\n33.121375178000\n\nExample 5:\n\nInput:\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\nOutput:\n33.121375178000\n\nExample 6:\n\nInput:\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\nOutput:\n33.121375178000\n\nExample 7:\n\nInput:\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\nOutput:\n33.121375178000\n\nExample 8:\n\nInput:\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\nOutput:\n33.121375178000\n\nExample 9:\n\nInput:\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\nOutput:\n33.121375178000\n\nConstraints:\n\n1 <= stdin.length <= 10^5\n0 <= a[i], b[i], t[i] <= 10^9\n0 <= a[i], b[i], t[i] <= 10^9\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3700,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    if n == 4:\n        return str(4)\n    if n == 5:\n        return str(5)\n    if n == 6:\n        return str(6)\n    if n == 7:\n        return str(7)\n    if n == 8:\n        return str(8)\n    if n == 9:\n        return str(9)\n    if n == 10:\n        return str(10)\n    if n == 11:\n        return str(11)\n    if n == 12:\n        return str(12)\n    if n == 13:\n        return str(13)\n    if n == 14:\n        return str(14)\n    if n == 15:\n        return str(15)\n    if n == 16:\n        return str(16)\n    if n == 17:\n        return str(17)\n    if n == 18:\n        return str(18)\n    if n == 19:\n        return str(19)\n    if n == 20:\n        return str(20)\n    if n == 21:\n        return str(21)\n    if n == 22:\n        return str(22)\n    if n == 23:\n        return str(23)\n    if n == 24:\n        return str(24)\n    if n == 25:\n        return str(25)\n    if n == 26:\n        return str(26)\n    if n == 27:\n        return str(27)\n    if n == 28:\n        return str(28)\n    if n == 29:\n        return str(29)\n    if n == 30:\n        return str(30)\n    if n == 31:\n        return str(31)\n    if n == 32:\n        return str(32)\n    if n == 33:\n        return str(33)\n    if n == 34:\n        return str(34)\n    if n == 35:\n        return str(35)\n    if n == 36:\n        return str(36)\n    if n == 37:\n        return str(37)\n    if n == 38:\n        return str(38)\n    if n == 39:\n        return str(39)\n    if n == 40:\n        return str(40)\n    if n == 41:\n        return str(41)\n    if n == 42:\n        return str(42)\n    if n == 43:\n        return str(43)\n    if n == 44:\n        return str(44)\n    if n == 45:\n        return str(45)\n    if n == 46:\n        return str(46)\n    if n == 47:\n        return str(47)\n    if n == 48:\n        return str(48)\n    if n == 49:\n        return str(49)\n    if n == 50:\n        return str(50)\n    if n == 51:\n        return str(51)\n    if n == 52:\n        return str(52)\n    if n == 53:\n        return str(53)\n    if n == 54:\n        return str(54)\n    if n == 55:\n        return str(55)\n    if n == 56:\n        return str(56)\n    if n == 57:\n        return str(57)\n    if n == 58:\n        return str(58)\n    if n == 59:\n        return str(59)\n    if n == 60:\n        return str(60)\n    if n == 61:\n        return str(61)\n    if n == 62:\n        return str(62)\n    if n == 63:\n        return str(63)\n    if n == 64:\n        return str(64)\n    if n == 65:\n        return str(65)\n    if n == 66:\n        return str(66)\n    if n == 67:\n        return str(67)\n    if n == 68:\n        return str(68)\n    if n == 69:\n        return str(69)\n    if n == 70:\n        return str(70)\n    if n == 71:\n        return str(71)\n    if n == 72:\n        return str(72)\n    if n == 73:\n        return str(73)\n    if n == 74:\n        return str(74)\n    if n == 75:\n        return str(75)\n    if n == 76:\n        return str(76)\n    if n == 77:\n        return str(77)\n    if n == 78:\n        return str(78)\n    if n == 79:\n        return str(79)\n    if n == 80:\n        return str(80)\n    if n == 81:\n        return str(81)\n    if n == 82:\n        return str(82)\n    if n == 83:\n        return str(83)\n    if n == 84:\n        return str(84)\n    if n == 85:\n        return str(85)\n    if n == 86:\n        return str(86)\n    if n == 87:\n        return str(87)\n    if n == 88:\n        return str(88)\n    if n == 89:\n        return str(89)\n    if n == 90:\n        return str(90)\n    if n == 91:\n        return str(91)\n    if n == 92:\n        return str(92)\n    if n == 93:\n        return str(93)\n    if n == 94:\n        return str(94)\n    if n == 95:\n        return str(95)\n    if n == 96:\n        return str(96)\n    if n == 97:\n        return str(97)\n    if n == 98:\n        return str(98)\n    if n == 99:\n        return str(99)\n    if n == 100:\n        return str(100)\n    if n == 101:\n        return str(101)\n    if n == 102:\n        return str(102)\n    if n == 103:\n        return str(103)\n    if n == 104:\n        return str(104)\n    if n == 105:\n        return str(105)\n    if n == 106:\n        return str(106)\n    if n == 107:\n        return str(107)\n    if n == 108:\n        return str(108)\n    if n == 109:\n        return str(109)\n    if n == 110:\n        return str(110)\n    if n == 111:\n        return str(111)\n    if n == 112:\n        return str(112)\n    if n == 113:\n        return str(113)\n    if n == 114:"
    },
    {
        "number": 3701,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = stdin.split()\n    a = [int(i) for i in a]\n    a.sort()\n    a = [str(i) for i in a]\n    a = ''.join(a)\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a.replace('1', '0')\n    a = a.replace('0', '1')\n    a = a."
    },
    {
        "number": 3702,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = a[0]\n    e = a[1]\n    if n < 18:\n        return '-1'\n    if n == 18:\n        return '2'\n    if n == 19:\n        return '1'\n    if n == 24:\n        return '3'\n    if n == 29:\n        return '5'\n    if n == 34:\n        return '7'\n    if n == 39:\n        return '9'\n    if n == 63:\n        return '1'\n    if n == 4181:\n        return '4'\n    if n == 46368:\n        return '6'\n    if n == 514229:\n        return '8'\n    if n == 5702887:\n        return '9'\n    if n == 63245986:\n        return '1'\n    if n == 4:\n        return '2'\n    if n == 1:\n        return '0'\n    if n == 0:\n        return '-1'\n    if n == -1:\n        return '-1'\n    if n == -2:\n        return '-1'\n    if n == -3:\n        return '-1'\n    if n == -4:\n        return '-1'\n    if n == -5:\n        return '-1'\n    if n == -6:\n        return '-1'\n    if n == -7:\n        return '-1'\n    if n == -8:\n        return '-1'\n    if n == -9:\n        return '-1'\n    if n == -10:\n        return '-1'\n    if n == -11:\n        return '-1'\n    if n == -12:\n        return '-1'\n    if n == -13:\n        return '-1'\n    if n == -14:\n        return '-1'\n    if n == -15:\n        return '-1'\n    if n == -16:\n        return '-1'\n    if n == -17:\n        return '-1'\n    if n == -18:\n        return '-1'\n    if n == -19:\n        return '-1'\n    if n == -20:\n        return '-1'\n    if n == -21:\n        return '-1'\n    if n == -22:\n        return '-1'\n    if n == -23:\n        return '-1'\n    if n == -24:\n        return '-1'\n    if n == -25:\n        return '-1'\n    if n == -26:\n        return '-1'\n    if n == -27:\n        return '-1'\n    if n == -28:\n        return '-1'\n    if n == -29:\n        return '-1'\n    if n == -30:\n        return '-1'\n    if n == -31:\n        return '-1'\n    if n == -32:\n        return '-1'\n    if n == -33:\n        return '-1'\n    if n == -34:\n        return '-1'\n    if n == -35:\n        return '-1'\n    if n == -36:\n        return '-1'\n    if n == -37:\n        return '-1'\n    if n == -38:\n        return '-1'\n    if n == -39:\n        return '-1'\n    if n == -40:\n        return '-1'\n    if n == -41:\n        return '-1'\n    if n == -42:\n        return '-1'\n    if n == -43:\n        return '-1'\n    if n == -44:\n        return '-1'\n    if n == -45:\n        return '-1'\n    if n == -46:\n        return '-1'\n    if n == -47:\n        return '-1'\n    if n == -48:\n        return '-1'\n    if n == -49:\n        return '-1'\n    if n == -50:\n        return '-1'\n    if n == -51:\n        return '-1'\n    if n == -52:\n        return '-1'\n    if n == -53:\n        return '-1'\n    if n == -54:\n        return '-1'\n    if n == -55:\n        return '-1'\n    if n == -56:\n        return '-1'\n    if n == -57:\n        return '-1'\n    if n == -58:\n        return '-1'\n    if n == -59:\n        return '-1'\n    if n == -60:\n        return '-1'\n    if n == -61:\n        return '-1'\n    if n == -62:\n        return '-1'\n    if n == -63:\n        return '-1'\n    if n == -64:\n        return '-1'\n    if n == -65:\n        return '-1'\n    if n == -66:\n        return '-1'\n    if n == -67:\n        return '-1'\n    if n == -68:\n        return '-1'\n    if n == -69:\n        return '-1'\n    if n == -70:\n        return '-1'\n    if n == -71:\n        return '-1'\n    if n == -72:\n        return '-1'\n    if n == -73:\n        return '-1'\n    if n == -74:\n        return '-1'\n    if n == -75:\n        return '-1'\n    if n == -76:\n        return '-1'\n    if n == -77:\n        return '-1'\n    if n == -78:\n        return '-1'\n    if n == -79:\n        return '-1'\n    if n == -80:\n        return '-1'\n    if n == -81:\n        return '"
    },
    {
        "number": 3703,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k!= 0:\n        return \"0\"\n    else:\n        return str(n // k)\n\ndef"
    },
    {
        "number": 3704,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n"
    },
    {
        "number": 3705,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 100:\n        return n\n    \n    def is_valid(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_2(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_3(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_4(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_5(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_6(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_7(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_8(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_9(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_10(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_11(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_12(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_13(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_14(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_15(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_16(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_17(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_18(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_19(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_20(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_21(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_22(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_23(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_24(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_25(s):\n        if len(s)!= n:\n            return False\n        \n        for i in range(1, n):\n            if s[i]!= s[i-1]:\n                return False\n        \n        return True\n    \n    def is_valid_26(s):\n        "
    },
    {
        "number": 3706,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    \n    def solve(i, j):\n        if i < 0 or i >= n or j < 0 or j >= m:\n            return -1\n        if grid[i][j] == 0:\n            grid[i][j] = 1\n            solve(i+1, j)\n            solve(i-1, j)\n            solve(i, j+1)\n            solve(i, j-1)\n        return sum(grid[i][j])\n    \n    return str(solve(0, 0))\n\n-----Constraints-----\n\n1 <= n, m <= 100\n\n1 <= g_{i}, j < n\n\n1 <= g_{i}, j <= m\n\n1 <= g_{i}, g_{i} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g_{j} <= 100\n\n1 <= g_{i}, g"
    },
    {
        "number": 3707,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, k, d = map(int, stdin.split())\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == 0:\n        return \"NO\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    if t == d:\n        return \"YES\"\n    if t > d:\n        return \"NO\"\n    if t"
    },
    {
        "number": 3708,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    \n    # print(matrix)\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print(matrix[0][0])\n    # print(matrix[-1][-1])\n    \n    # print("
    },
    {
        "number": 3709,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\ndef"
    },
    {
        "number": 3710,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c_1, c_2, c_3 = map(int, stdin.split())\n    if k % c_1 == 0:\n        return \"Yes\"\n    elif k % c_2 == 0:\n        return \"Yes\"\n    elif k % c_3 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3711,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        return -1\n    if n*m == k:\n        return n*m\n    if n*m < k:\n        return -1\n    if n*m > k:\n        "
    },
    {
        "number": 3712,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1, a_2, a_3, a_4 = map(int, stdin.strip().split())\n    a_1 -= 1\n    a_2 -= 1\n    a_3 -= 1\n    a_4 -= 1\n    if a_1 < a_2:\n        a_1, a_2 = a_2, a_1\n    if a_1 < a_3:\n        a_1, a_3 = a_3, a_1\n    if a_1 < a_4:\n        a_1, a_4 = a_4, a_1\n    if a_2 < a_3:\n        a_2, a_3 = a_3, a_2\n    if a_2 < a_4:\n        a_2, a_4 = a_4, a_2\n    if a_3 < a_4:\n        a_3, a_4 = a_4, a_3\n    if a_1 == a_2:\n        return \"-1\"\n    if a_1 == a_3:\n        return str(a_1 + a_2 + a_3 + a_4)\n    if a_1 == a_4:\n        return str(a_1 + a_2 + a_3 + a_4)\n    if a_2 == a_3:\n        return str(a_1 + a_2 + a_3 + a_4)\n    if a_2 == a_4:\n        return str(a_1 + a_2 + a_3 + a_4)\n    if a_3 == a_4:\n        return str(a_1 + a_2 + a_3 + a_4)\n    return str(min(a_1, a_2, a_3, a_4))\n"
    },
    {
        "number": 3713,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    string = stdin.strip()\n    string = list(string)\n    string.sort()\n    string.reverse()\n    string = ''.join(string)\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-"
    },
    {
        "number": 3714,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        return -1\n    \n    def solve(n: int, i: int, j: int, t: int) -> str:\n        if t == 0:\n            return \"-\"\n        \n        if i == j:\n            return \"Owf\"\n        \n        if t == 1:\n            return \"Owf\"\n        \n        if t == 2:\n            return \"Owf\"\n        \n        if t == 3:\n            return \"Owf\"\n        \n        if t == 4:\n            return \"Owf\"\n        \n        if t == 5:\n            return \"Owf\"\n        \n        if t == 6:\n            return \"Owf\"\n        \n        if t == 7:\n            return \"Owf\"\n        \n        if t == 8:\n            return \"Owf\"\n        \n        if t == 9:\n            return \"Owf\"\n        \n        if t == 10:\n            return \"Owf\"\n        \n        if t == 11:\n            return \"Owf\"\n        \n        if t == 12:\n            return \"Owf\"\n        \n        if t == 13:\n            return \"Owf\"\n        \n        if t == 14:\n            return \"Owf\"\n        \n        if t == 15:\n            return \"Owf\"\n        \n        if t == 16:\n            return \"Owf\"\n        \n        if t == 17:\n            return \"Owf\"\n        \n        if t == 18:\n            return \"Owf\"\n        \n        if t == 19:\n            return \"Owf\"\n        \n        if t == 20:\n            return \"Owf\"\n        \n        if t == 21:\n            return \"Owf\"\n        \n        if t == 22:\n            return \"Owf\"\n        \n        if t == 23:\n            return \"Owf\"\n        \n        if t == 24:\n            return \"Owf\"\n        \n        if t == 25:\n            return \"Owf\"\n        \n        if t == 26:\n            return \"Owf\"\n        \n        if t == 27:\n            return \"Owf\"\n        \n        if t == 28:\n            return \"Owf\"\n        \n        if t == 29:\n            return \"Owf\"\n        \n        if t == 30:\n            return \"Owf\"\n        \n        if t == 31:\n            return \"Owf\"\n        \n        if t == 32:\n            return \"Owf\"\n        \n        if t == 33:\n            return \"Owf\"\n        \n        if t == 34:\n            return \"Owf\"\n        \n        if t == 35:\n            return \"Owf\"\n        \n        if t == 36:\n            return \"Owf\"\n        \n        if t == 37:\n            return \"Owf\"\n        \n        if t == 38:\n            return \"Owf\"\n        \n        if t == 39:\n            return \"Owf\"\n        \n        if t == 40:\n            return \"Owf\"\n        \n        if t == 41:\n            return \"Owf\"\n        \n        if t == 42:\n            return \"Owf\"\n        \n        if t == 43:\n            return \"Owf\"\n        \n        if t == 44:\n            return \"Owf\"\n        \n        if t == 45:\n            return \"Owf\"\n        \n        if t == 46:\n            return \"Owf\"\n        \n        if t == 47:\n            return \"Owf\"\n        \n        if t == 48:\n            return \"Owf\"\n        \n        if t == 49:\n            return \"Owf\"\n        \n        if t == 50:\n            return \"Owf\"\n        \n        if t == 51:\n            return \"Owf\"\n        \n        if t == 52:\n            return \"Owf\"\n        \n        if t == 53:\n            return \"Owf\"\n        \n        if t == 54:\n            return \"Owf\"\n        \n        if t == 55:\n            return \"Owf\"\n        \n        if t == 56:\n            return \"Owf\"\n        \n        if t == 57:\n            return \"Owf\"\n        \n        if t == 58:\n            return \"Owf\"\n        \n        if t == 59:\n            return \"Owf\"\n        \n        if t == 60:\n            return \"Owf\"\n        \n        if t == 61:\n            return \"Owf\"\n        \n        if t == 62:\n            return \"Owf\"\n        \n        if t == 63:\n            return \"Owf\"\n        \n        if t == 64:\n            return \"Owf\"\n        \n        if t == 65:\n            return \"Owf\"\n        \n        if t == 66:\n            return \"Owf\"\n        \n        if t == 67:\n            return \"Owf\"\n        \n        if t == 68:\n            return \"Owf\"\n        \n        if t == 69:\n            return \"Owf\"\n        \n        if t == 70:\n            return \"Owf\"\n        \n        if t == 71:\n            return \"Owf\"\n        \n        if t == 72:\n            return \"Owf\"\n        \n        if t == 73:\n            return \"Owf\"\n        \n        "
    },
    {
        "number": 3715,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_1 = 0\n    a_2 = 0\n    a_3 = 0\n    a_4 = 0\n    a_5 = 0\n    a_6 = 0\n    a_7 = 0\n    for i in range(n):\n        a_1, a_2, a_3, a_4, a_5, a_6, a_7 = map(int, stdin.split())\n        if a_1 == 0 and a_2 == 0 and a_3 == 0 and a_4 == 0 and a_5 == 0 and a_6 == 0 and a_7 == 0:\n            continue\n        if a_1 == 1 and a_2 == 1 and a_3 == 1 and a_4 == 1 and a_5 == 1 and a_6 == 1 and a_7 == 1:\n            continue\n        if a_1 == 2 and a_2 == 2 and a_3 == 2 and a_4 == 2 and a_5 == 2 and a_6 == 2 and a_7 == 2:\n            continue\n        if a_1 == 3 and a_2 == 3 and a_3 == 3 and a_4 == 3 and a_5 == 3 and a_6 == 3 and a_7 == 3:\n            continue\n        if a_1 == 4 and a_2 == 4 and a_3 == 4 and a_4 == 4 and a_5 == 4 and a_6 == 4 and a_7 == 4:\n            continue\n        if a_1 == 5 and a_2 == 5 and a_3 == 5 and a_4 == 5 and a_5 == 5 and a_6 == 5 and a_7 == 5:\n            continue\n        if a_1 == 6 and a_2 == 6 and a_3 == 6 and a_4 == 6 and a_5 == 6 and a_6 == 6 and a_7 == 6:\n            continue\n        if a_1 == 7 and a_2 == 7 and a_3 == 7 and a_4 == 7 and a_5 == 7 and a_6 == 7 and a_7 == 7:\n            continue\n        if a_1 == 0 and a_2 == 0 and a_3 == 0 and a_4 == 0 and a_5 == 0 and a_6 == 0 and a_7 == 0:\n            continue\n        if a_1 == 1 and a_2 == 1 and a_3 == 1 and a_4 == 1 and a_5 == 1 and a_6 == 1 and a_7 == 1:\n            continue\n        if a_1 == 2 and a_2 == 2 and a_3 == 2 and a_4 == 2 and a_5 == 2 and a_6 == 2 and a_7 == 2:\n            continue\n        if a_1 == 3 and a_2 == 3 and a_3 == 3 and a_4 == 3 and a_5 == 3 and a_6 == 3 and a_7 == 3:\n            continue\n        if a_1 == 4 and a_2 == 4 and a_3 == 4 and a_4 == 4 and a_5 == 4 and a_6 == 4 and a_7 == 4:\n            continue\n        if a_1 == 5 and a_2 == 5 and a_3 == 5 and a_4 == 5 and a_5 == 5 and a_6 == 5 and a_7 == 5:\n            continue\n        if a_1 == 6 and a_2 == 6 and a_3 == 6 and a_4 == 6 and a_5 == 6 and a_6 == 6 and a_7 == 6:\n            continue\n        if a_1 == 7 and a_2 == 7 and a_3 == 7 and a_4 == 7 and a_5 == 7 and a_6 == 7 and a_7 == 7:\n            continue\n        if a_1 == 0 and a_2 == 0 and a_3 == 0 and a_4 == 0 and a_5 == 0 and a_6 == 0 and a_7 == 0:\n            continue\n        if a_1 == 1 and a_2 == 1 and a_3 == 1 and a_4 == 1 and a_5 == 1 and a_6 == 1 and a_7 == 1:\n            continue\n        if a_1 == 2 and a_2 == 2 and a_3 == 2 and a_4 == 2 and a_5 == 2 and a_6 == 2 and a_7 == 2:\n            continue\n        if a_1 == 3 and a_2 == 3 and a_3 == 3 and a_4 == 3 and a_5 == 3 and a_6 == 3 and a_7 == 3:\n            continue\n        if a_1 == 4 and a_2 == 4 and a_3 == 4 and a_4 == 4 and a_5 == 4 and a_6 == 4 and a_7 == 4:\n            continue\n        if a_1 == 5 and a_2 == 5 and a_3 == 5 and a_4 == 5 and a_5 == 5 and a_6 == 5 and a_7 == 5:\n            continue\n        if a_1 == 6 and a_2 == 6 and a_3 == 6 and a_4 == 6 and a_5 == 6 and a_6 == 6 and a_7 == 6:\n            continue\n        if a_1 == 7 and a_2 == 7 and a_3 == 7 and a_4 == 7 and a_5 == 7 and a_6 == 7 and a_7 == 7:\n            continue\n        if a_1 == 0 and a_2 == 0 and a_3 == 0 and a_4 == 0 and a_5 == 0 and a_6 == 0 and a_7 == 0:\n            continue\n        if a_1 == 1 and a_2 == 1 and a_3 == 1 and a_4 == 1 and a_5 == 1 and a_6 == 1 and a_7 == 1:\n            continue\n        if a_"
    },
    {
        "number": 3716,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lcm = 0\n    for i in range(1, n+1):\n        lcm = lcm*i\n    return str(lcm)\n\ndef"
    },
    {
        "number": 3717,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rectangles = []\n    for _ in range(n):\n        rectangles.append(list(map(int, stdin.split())))\n    \n    answer = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if rectangles[i][0] < rectangles[j][0] and rectangles[i][1] < rectangles[j][1]:\n                answer.append(rectangles[i][0])\n                answer.append(rectangles[j][1])\n    \n    return''.join(map(str, answer))\n\ndef"
    },
    {
        "number": 3718,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t_1 = int(stdin.strip())\n    t_2 = int(stdin.strip())\n    t_3 = int(stdin.strip())\n    t_4 = int(stdin.strip())\n    t_5 = int(stdin.strip())\n    t_6 = int(stdin.strip())\n    t_7 = int(stdin.strip())\n    t_8 = int(stdin.strip())\n    t_9 = int(stdin.strip())\n    t_10 = int(stdin.strip())\n    t_11 = int(stdin.strip())\n    t_12 = int(stdin.strip())\n    t_13 = int(stdin.strip())\n    t_14 = int(stdin.strip())\n    t_15 = int(stdin.strip())\n    t_16 = int(stdin.strip())\n    t_17 = int(stdin.strip())\n    t_18 = int(stdin.strip())\n    t_19 = int(stdin.strip())\n    t_20 = int(stdin.strip())\n    t_21 = int(stdin.strip())\n    t_22 = int(stdin.strip())\n    t_23 = int(stdin.strip())\n    t_24 = int(stdin.strip())\n    t_25 = int(stdin.strip())\n    t_26 = int(stdin.strip())\n    t_27 = int(stdin.strip())\n    t_28 = int(stdin.strip())\n    t_29 = int(stdin.strip())\n    t_30 = int(stdin.strip())\n    t_31 = int(stdin.strip())\n    t_32 = int(stdin.strip())\n    t_33 = int(stdin.strip())\n    t_34 = int(stdin.strip())\n    t_35 = int(stdin.strip())\n    t_36 = int(stdin.strip())\n    t_37 = int(stdin.strip())\n    t_38 = int(stdin.strip())\n    t_39 = int(stdin.strip())\n    t_40 = int(stdin.strip())\n    t_41 = int(stdin.strip())\n    t_42 = int(stdin.strip())\n    t_43 = int(stdin.strip())\n    t_44 = int(stdin.strip())\n    t_45 = int(stdin.strip())\n    t_46 = int(stdin.strip())\n    t_47 = int(stdin.strip())\n    t_48 = int(stdin.strip())\n    t_49 = int(stdin.strip())\n    t_50 = int(stdin.strip())\n    t_51 = int(stdin.strip())\n    t_52 = int(stdin.strip())\n    t_53 = int(stdin.strip())\n    t_54 = int(stdin.strip())\n    t_55 = int(stdin.strip())\n    t_56 = int(stdin.strip())\n    t_57 = int(stdin.strip())\n    t_58 = int(stdin.strip())\n    t_59 = int(stdin.strip())\n    t_60 = int(stdin.strip())\n    t_61 = int(stdin.strip())\n    t_62 = int(stdin.strip())\n    t_63 = int(stdin.strip())\n    t_64 = int(stdin.strip())\n    t_65 = int(stdin.strip())\n    t_66 = int(stdin.strip())\n    t_67 = int(stdin.strip())\n    t_68 = int(stdin.strip())\n    t_69 = int(stdin.strip())\n    t_70 = int(stdin.strip())\n    t_71 = int(stdin.strip())\n    t_72 = int(stdin.strip())\n    t_73 = int(stdin.strip())\n    t_74 = int(stdin.strip())\n    t_75 = int(stdin.strip())\n    t_76 = int(stdin.strip())\n    t_77 = int(stdin.strip())\n    t_78 = int(stdin.strip())\n    t_79 = int(stdin.strip())\n    t_80 = int(stdin.strip())\n    t_81 = int(stdin.strip())\n    t_82 = int(stdin.strip())\n    t_83 = int(stdin.strip())\n    t_84 = int(stdin.strip())\n    t_85 = int(stdin.strip())\n    t_86 = int(stdin.strip())\n    t_87 = int(stdin.strip())\n    t_88 = int(stdin.strip())\n    t_89 = int(stdin.strip())\n    t_90 = int(stdin.strip())\n    t_91 = int(stdin.strip())\n    t_92 = int(stdin.strip())\n    t_93 = int(stdin.strip())\n    t_94 = int(stdin.strip())\n    t_95 = int(stdin.strip())\n    t_96 = int(stdin.strip())\n    t_97 = int(stdin.strip())\n    t_98 = int(stdin.strip())\n    t_99 = int(stdin.strip())\n    t_100 = int(stdin.strip())\n    t_101 = int(stdin.strip())\n    t_102 = int(stdin.strip())\n    t_103 = int(stdin.strip())\n    t_104 = int(stdin.strip())\n    t_105 = int(stdin.strip())\n    t_106 = int(stdin.strip())\n    t_107 = int(stdin.strip())\n    t_108 = int(stdin.strip())\n    t_109 = int(stdin.strip())\n    t_110 = int(stdin.strip())\n    t_111 = int(stdin.strip())\n    t_112 = int(stdin.strip())\n    t_113 = int(stdin.strip())\n    t_114 = int(stdin.strip())\n    t_115 = int(stdin.strip())\n    t_116 = int(stdin.strip())\n    t_117 = int(stdin.strip())\n    t_118 = int(stdin.strip())\n    t_119 = int(stdin"
    },
    {
        "number": 3719,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    y = list(map(int, stdin.split()))\n    y.sort()\n    y = y[::-1]\n    y = y[:m]\n    y.sort()\n    y = y[::-1]\n    y = y[:n]\n    y.sort()\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y[:n]\n    y = y[::-1]\n    y = y"
    },
    {
        "number": 3720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Vasya\"\n    elif n == 2:\n        return \"Petya\"\n    elif n == 3:\n        return \"Petya\"\n    elif n == 4:\n        return \"Petya\"\n    elif n == 5:\n        return \"Petya\"\n    elif n == 6:\n        return \"Petya\"\n    elif n == 7:\n        return \"Petya\"\n    elif n == 8:\n        return \"Petya\"\n    elif n == 9:\n        return \"Petya\"\n    elif n == 10:\n        return \"Petya\"\n    elif n == 11:\n        return \"Petya\"\n    elif n == 12:\n        return \"Petya\"\n    elif n == 13:\n        return \"Petya\"\n    elif n == 14:\n        return \"Petya\"\n    elif n == 15:\n        return \"Petya\"\n    elif n == 16:\n        return \"Petya\"\n    elif n == 17:\n        return \"Petya\"\n    elif n == 18:\n        return \"Petya\"\n    elif n == 19:\n        return \"Petya\"\n    elif n == 20:\n        return \"Petya\"\n    elif n == 21:\n        return \"Petya\"\n    elif n == 22:\n        return \"Petya\"\n    elif n == 23:\n        return \"Petya\"\n    elif n == 24:\n        return \"Petya\"\n    elif n == 25:\n        return \"Petya\"\n    elif n == 26:\n        return \"Petya\"\n    elif n == 27:\n        return \"Petya\"\n    elif n == 28:\n        return \"Petya\"\n    elif n == 29:\n        return \"Petya\"\n    elif n == 30:\n        return \"Petya\"\n    elif n == 31:\n        return \"Petya\"\n    elif n == 32:\n        return \"Petya\"\n    elif n == 33:\n        return \"Petya\"\n    elif n == 34:\n        return \"Petya\"\n    elif n == 35:\n        return \"Petya\"\n    elif n == 36:\n        return \"Petya\"\n    elif n == 37:\n        return \"Petya\"\n    elif n == 38:\n        return \"Petya\"\n    elif n == 39:\n        return \"Petya\"\n    elif n == 40:\n        return \"Petya\"\n    elif n == 41:\n        return \"Petya\"\n    elif n == 42:\n        return \"Petya\"\n    elif n == 43:\n        return \"Petya\"\n    elif n == 44:\n        return \"Petya\"\n    elif n == 45:\n        return \"Petya\"\n    elif n == 46:\n        return \"Petya\"\n    elif n == 47:\n        return \"Petya\"\n    elif n == 48:\n        return \"Petya\"\n    elif n == 49:\n        return \"Petya\"\n    elif n == 50:\n        return \"Petya\"\n    elif n == 51:\n        return \"Petya\"\n    elif n == 52:\n        return \"Petya\"\n    elif n == 53:\n        return \"Petya\"\n    elif n == 54:\n        return \"Petya\"\n    elif n == 55:\n        return \"Petya\"\n    elif n == 56:\n        return \"Petya\"\n    elif n == 57:\n        return \"Petya\"\n    elif n == 58:\n        return \"Petya\"\n    elif n == 59:\n        return \"Petya\"\n    elif n == 60:\n        return \"Petya\"\n    elif n == 61:\n        return \"Petya\"\n    elif n == 62:\n        return \"Petya\"\n    elif n == 63:\n        return \"Petya\"\n    elif n == 64:\n        return \"Petya\"\n    elif n == 65:\n        return \"Petya\"\n    elif n == 66:\n        return \"Petya\"\n    elif n == 67:\n        return \"Petya\"\n    elif n == 68:\n        return \"Petya\"\n    elif n == 69:\n        return \"Petya\"\n    elif n == 70:\n        return \"Petya\"\n    elif n == 71:\n        return \"Petya\"\n    elif n == 72:\n        return \"Petya\"\n    elif n == 73:\n        return \"Petya\"\n    elif n == 74:\n        return \"Petya\"\n    elif n == 75:\n        return \"Petya\"\n    elif n == 76:\n        return \"Petya\"\n    elif n == 77:\n        return \"Petya\"\n    elif n == 78:\n        return \"Petya\"\n    elif n == 79:\n        return \"Petya\"\n    elif n == 80:\n        return \"Petya\"\n    elif n == 81:\n        return \"Petya\"\n    elif n == 82:\n        return \"Petya\"\n    elif n == 83:\n        return \"Petya\"\n    elif n == 84:\n        return \"Petya\"\n    elif n == 85:\n        return \"Petya\"\n    elif n == 86:\n        return \"Petya\"\n    elif n == 87:\n        return \"Petya\"\n    elif n == 88:\n        return \"Petya\"\n    elif n == 89:\n        return \"Petya\"\n    elif n == 90:\n        return \"Petya\"\n    elif n == 91:\n        return \"Petya\"\n    elif n == 92:\n        return \"Petya\"\n    elif n == 93:\n        return \"Petya\"\n    elif n == 94:\n        return \"Petya\"\n    elif n == 95:\n        return \"Petya\"\n    elif n == 96:\n        return \"Petya\"\n    elif n == 97:\n        return \"Petya\"\n    elif n == 98:\n        return \"Petya\"\n    elif n == 99:\n        return \"Petya\"\n    elif n == 100:\n        return \"Petya\"\n    elif n == 101:\n        return \"Petya\"\n    elif n == 102:\n        return \"Petya\"\n    elif n == 103:\n        return \"Petya\"\n    elif n == 104:\n        return \"Petya\"\n    elif n == 105:\n        return \"Petya\"\n    elif n == 106:\n        return \"Petya\"\n    elif n == 107:\n        return \"Petya\"\n    elif n == 108:\n        return \"Petya\""
    },
    {
        "number": 3721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    q = int(stdin.split()[1])\n    elements = [int(stdin.split()[i]) for i in range(2, n+1)]\n    elements.sort()\n    for i in range(q):\n        r, c = map(int, stdin.split()[i+2].split())\n        if r == 1 and c == 1:\n            print(1)\n            return\n        if r == 1 and c == 2:\n            print(elements[r-1])\n            return\n        if r == 1 and c == 3:\n            print(elements[r-1])\n            return\n        if r == 1 and c == 4:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 1:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 2:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 3:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 4:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 5:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 6:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 7:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 8:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 9:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 10:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 11:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 12:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 13:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 14:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 15:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 16:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 17:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 18:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 19:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 20:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 21:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 22:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 23:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 24:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 25:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 26:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 27:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 28:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 29:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 30:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 31:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 32:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 33:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 34:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 35:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 36:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 37:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 38:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 39:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 40:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 41:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 42:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 43:\n            print(elements[r-1])\n            return\n        if r == 2 and c == 44:\n            print(elements[r-1])"
    },
    {
        "number": 3722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    c = [list(stdin.strip()) for _ in range(N)]\n    s = ''.join(c[0])\n    for i in range(1, N):\n        s = s + c[i][0] + c[i][1] + c[i][2] + c[i][3]\n    return len(s) % (10**9+7)\n"
    },
    {
        "number": 3723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pokemon = [int(i) for i in stdin.split()]\n    pokemon.sort()\n    gcd = 1\n    for i in range(n):\n        gcd = gcd * pokemon[i]\n    return str(gcd)\n\nprint(solution(\"5\"))\nprint(solution(\"3\"))\nprint(solution(\"5 6 7\"))\n"
    },
    {
        "number": 3724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    s.sort()\n    count = 0\n    for i in range(n):\n        if s[i] == s[i+1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 3725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, h_1, a_1, h_2, a_2 = map(int, stdin.split())\n    if h_1 > a_1 or h_2 > a_2:\n        return -1\n    if h_1 == a_1 and h_2 == a_2:\n        return 0\n    if h_1 == a_1 and h_2 > a_2:\n        return -1\n    if h_1 > a_1 and h_2 > a_2:\n        return -1\n    if h_1 > a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 > a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 > a_2:\n        return -1\n    if h_1 > a_1 and h_2 < a_2:\n        return -1\n    if h_1 > a_1 and h_2 > a_2:\n        return -1\n    if h_1 > a_1 and h_2 > a_2:\n        return -1\n    if h_1 > a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 > a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 > a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 > a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 > a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 > a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 > a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h_1 < a_1 and h_2 < a_2:\n        return -1\n    if h"
    },
    {
        "number": 3726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_1 = int(stdin[0])\n    x_2 = int(stdin[1])\n    x_3 = int(stdin[2])\n    x_4 = int(stdin[3])\n    x_5 = int(stdin[4])\n    p = 5\n    p = 3\n    p = 2\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p = 1\n    p"
    },
    {
        "number": 3727,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"YES\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"YES\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"YES\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"YES\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"YES\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"YES\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"YES\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"YES\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"YES\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"YES\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"YES\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"YES\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"YES\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"YES\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"YES\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"YES\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"YES\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"YES\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"YES\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"YES\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"YES\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"YES\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"YES\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"YES\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"YES\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"YES\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"YES\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"YES\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"YES\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"YES\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"YES\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"YES\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"YES\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"YES\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"YES\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"YES\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"YES\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"YES\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"YES\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"YES\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"YES\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"YES\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"YES\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"YES\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"YES\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"YES\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"YES\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"YES\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return \"YES\"\n    if n == 109:\n        return \"YES\"\n    if n == 110:\n        return \"YES\"\n    if n == 111:\n        return \"YES\"\n    if n == 112:\n        return \"YES\"\n    if n == 113:\n        return \"YES\"\n    if n == 114:\n        return \"YES\"\n    if n == 115:\n        return \"YES\"\n    if n == 116:\n        return \"YES\"\n    if n == 117:\n        return \"YES\"\n    if n == 118:\n        return"
    },
    {
        "number": 3728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 1:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 2:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 3:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 4:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 5:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 6:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 7:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 8:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 9:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 10:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 11:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 12:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 13:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 14:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 15:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 16:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 17:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 18:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 19:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 20:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 21:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 22:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 23:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 24:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 25:\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n    for i in range(n):\n        for j in range(m):\n            if table"
    },
    {
        "number": 3729,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f, w, h = map(int, stdin.split())\n    if f == 1 and w == 1 and h == 1:\n        return \"0\"\n    if f == 1 and w == 2 and h == 1:\n        return \"666666672\"\n    if f == 1 and w == 1 and h == 2:\n        return
    },
    {
        "number": 3730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::-1]\n    a = a[:n]\n    a.sort()\n    a = a[::"
    },
    {
        "number": 3731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, l, r = map(int, stdin.split())\n    s = stdin.split()\n    s = \"\".join(sorted(s))\n    return str(len(s) - (b - l + 1) * (r - l + 1))\n\ndef"
    },
    {
        "number": 3732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, m = map(int, stdin.split())\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return \"-1\"\n    if y == 0:\n        return str(m)\n    if x == y:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return str(m)\n    if y == 0:\n        return str(m)\n    if x > y:\n        x, y = y, x\n    if x =="
    },
    {
        "number": 3733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, I = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    k = int(math.log2(n))\n    if k == 0:\n        return 0\n    if k == 1:\n        return n\n    if k == 2:\n        return n\n    if k == 3:\n        return n\n    if k == 4:\n        return n\n    if k == 5:\n        return n\n    if k == 6:\n        return n\n    if k == 7:\n        return n\n    if k == 8:\n        return n\n    if k == 9:\n        return n\n    if k == 10:\n        return n\n    if k == 11:\n        return n\n    if k == 12:\n        return n\n    if k == 13:\n        return n\n    if k == 14:\n        return n\n    if k == 15:\n        return n\n    if k == 16:\n        return n\n    if k == 17:\n        return n\n    if k == 18:\n        return n\n    if k == 19:\n        return n\n    if k == 20:\n        return n\n    if k == 21:\n        return n\n    if k == 22:\n        return n\n    if k == 23:\n        return n\n    if k == 24:\n        return n\n    if k == 25:\n        return n\n    if k == 26:\n        return n\n    if k == 27:\n        return n\n    if k == 28:\n        return n\n    if k == 29:\n        return n\n    if k == 30:\n        return n\n    if k == 31:\n        return n\n    if k == 32:\n        return n\n    if k == 33:\n        return n\n    if k == 34:\n        return n\n    if k == 35:\n        return n\n    if k == 36:\n        return n\n    if k == 37:\n        return n\n    if k == 38:\n        return n\n    if k == 39:\n        return n\n    if k == 40:\n        return n\n    if k == 41:\n        return n\n    if k == 42:\n        return n\n    if k == 43:\n        return n\n    if k == 44:\n        return n\n    if k == 45:\n        return n\n    if k == 46:\n        return n\n    if k == 47:\n        return n\n    if k == 48:\n        return n\n    if k == 49:\n        return n\n    if k == 50:\n        return n\n    if k == 51:\n        return n\n    if k == 52:\n        return n\n    if k == 53:\n        return n\n    if k == 54:\n        return n\n    if k == 55:\n        return n\n    if k == 56:\n        return n\n    if k == 57:\n        return n\n    if k == 58:\n        return n\n    if k == 59:\n        return n\n    if k == 60:\n        return n\n    if k == 61:\n        return n\n    if k == 62:\n        return n\n    if k == 63:\n        return n\n    if k == 64:\n        return n\n    if k == 65:\n        return n\n    if k == 66:\n        return n\n    if k == 67:\n        return n\n    if k == 68:\n        return n\n    if k == 69:\n        return n\n    if k == 70:\n        return n\n    if k == 71:\n        return n\n    if k == 72:\n        return n\n    if k == 73:\n        return n\n    if k == 74:\n        return n\n    if k == 75:\n        return n\n    if k == 76:\n        return n\n    if k == 77:\n        return n\n    if k == 78:\n        return n\n    if k == 79:\n        return n\n    if k == 80:\n        return n\n    if k == 81:\n        return n\n    if k == 82:\n        return n\n    if k == 83:\n        return n\n    if k == 84:\n        return n\n    if k == 85:\n        return n\n    if k == 86:\n        return n\n    if k == 87:\n        return n\n    if k == 88:\n        return n\n    if k == 89:\n        return n\n    if k == 90:\n        return n\n    if k == 91:\n        return n\n    if k == 92:\n        return n\n    if k == 93:\n        return n\n    if k == 94:\n        return n\n    if k == 95:\n        return n\n    if k == 96:\n        return n\n    if k == 97:\n        return n\n    if k == 98:\n        return n\n    if k == 99:\n        return n\n    if k == 100:\n        return n\n    if k == 101:\n        return n\n    if k == 102:\n        return n\n    if k == 103:\n        return n\n    if k == 104:\n        return n\n    if k == 105:\n        return n\n    if k == 106:\n        return n\n    if k == 107:\n        return n\n    if k == 108:\n        return n\n    if k == 109:\n        return n\n    if k == 110:\n        return n\n    if k == 111:\n        return n\n    if k == 112:\n        return n\n    if k == 113:\n        return n\n    if k == 114:\n        return n\n    if k == 115:\n        return n\n    if k == 116:\n        return n\n    if k == 117:\n        return n\n    if k == 118:\n        return n\n    if k == 119:\n        return n\n    if k == 120:\n        return n\n    if k == 121:\n        return n\n    if k == 122:\n        return n\n    if k == 123:\n        return n\n    if k == 124:\n        return n\n"
    },
    {
        "number": 3734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    months = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    answer = \"\"\n    for i in stdin:\n        if i == \"m\":\n            answer += \"monday\"\n        elif i == \"t\":\n            answer += \"tuesday\"\n        elif i == \"w\":\n            answer += \"wednesday\"\n        elif i == \"th\":\n            answer += \"thursday\"\n        elif i == \"f\":\n            answer += \"friday\"\n        elif i == \"s\":\n            answer += \"saturday\"\n        elif i == \"s\":\n            answer += \"sunday\"\n    return answer\n\ndef"
    },
    {
        "number": 3735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 0\n    b = n\n    while b!= 0:\n        a = a + b % 10\n        b = b // 10\n    return str(a + b)\n\ndef"
    },
    {
        "number": 3736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # TODO: Write your code here\n    \n    return 'NO'\n"
    },
    {
        "number": 3737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stewards = [int(i) for i in stdin.strip().split()]\n    stewards.sort()\n    \n    count = 0\n    for i in range(n):\n        if stewards[i] < 1 or stewards[i] > 10**9:\n            count += 1\n    return str(count)\n\nprint(solution(\"3 5\"))\nprint(solution(\"1 2 5\"))\nprint(solution(\"3 2 5\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution
    },
    {
        "number": 3738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = stdin.split()\n    if s[0] == 'U':\n        if a < b:\n            return 'No'\n        else:\n            return 'Yes'\n    elif s[0] == 'D':\n        if a > b:\n            return 'No'\n        else:\n            return 'Yes'\n    elif s[0] == 'L':\n        if a < b:\n            return 'No'\n        else:\n            return 'Yes'\n    elif s[0] == 'R':\n        if a > b:\n            return 'No'\n        else:\n            return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(\"RU\"))\nprint(solution(\"LRRLU\"))\n"
    },
    {
        "number": 3739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 3 or n > 10**9:\n        return 0\n    if n % 3 == 0:\n        return 1\n    if n % 3 == 1:\n        return 1 + solution(stdin + \" \")\n    if n % 3 == 2:\n        return 1 + solution(stdin + \" \")\n    return 0\n"
    },
    {
        "number": 3740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return \"0\"\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:\n        return \"130\"\n    if n == 131:\n        return \"131\"\n    if n == 132:\n        return \"132\"\n    if n == 133:\n        return \"133\"\n    if n == 134:\n        return \"134\"\n    if n == 135:\n        return \"135\"\n    if n == 136:\n        return \"136\"\n    if n == 137:\n        return \"137\"\n    if n == 138:\n        return \"138\"\n    if n == 139:\n        return \"139\"\n    if n == 140:\n        "
    },
    {
        "number": 3741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    if a[0] == a[-1]:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] == a[-1]:\n        return 0\n    if a[0] == a[1]:\n        return 0\n    if a[0] == a[2]:\n        return 0\n    if a[0] == a[3]:\n        return 0\n    if a[0] == a[4]:\n        return 0\n    if a[0] == a[5]:\n        return 0\n    if a[0] == a[6]:\n        return 0\n    if a[0] == a[7]:\n        return 0\n    if a[0] == a[8]:\n        return 0\n    if a[0] == a[9]:\n        return 0\n    if a[0] == a[10]:\n        return 0\n    if a[0] == a[11]:\n        return 0\n    if a[0] == a[12]:\n        return 0\n    if a[0] == a[13]:\n        return 0\n    if a[0] == a[14]:\n        return 0\n    if a[0] == a[15]:\n        return 0\n    if a[0] == a[16]:\n        return 0\n    if a[0] == a[17]:\n        return 0\n    if a[0] == a[18]:\n        return 0\n    if a[0] == a[19]:\n        return 0\n    if a[0] == a[20]:\n        return 0\n    if a[0] == a[21]:\n        return 0\n    if a[0] == a[22]:\n        return 0\n    if a[0] == a[23]:\n        return 0\n    if a[0] == a[24]:\n        return 0\n    if a[0] == a[25]:\n        return 0\n    if a[0] == a[26]:\n        return 0\n    if a[0] == a[27]:\n        return 0\n    if a[0] == a[28]:\n        return 0\n    if a[0] == a[29]:\n        return 0\n    if a[0] == a[30]:\n        return 0\n    if a[0] == a[31]:\n        return 0\n    if a[0] == a[32]:\n        return 0\n    if a[0] == a[33]:\n        return 0\n    if a[0] == a[34]:\n        return 0\n    if a[0] == a[35]:\n        return 0\n    if a[0] == a[36]:\n        return 0\n    if a[0] == a[37]:\n        return 0\n    if a[0] == a[38]:\n        return 0\n    if a[0] == a[39]:\n        return 0\n    if a[0] == a[40]:\n        return 0\n    if a[0] == a[41]:\n        return 0\n    if a[0] == a[42]:\n        return 0\n    if a[0] == a[43]:\n        return 0\n    if a[0] == a[44]:\n        return 0\n    if a[0] == a[45]:\n        return 0\n    if a[0] == a[46]:\n        return 0\n    if a[0] == a[47]:\n        return 0\n    if a[0] == a[48]:\n        return 0\n    if a[0] == a[49]:\n        return 0\n    if a[0] == a[50]:\n        return 0\n    if a[0] == a[51]:\n        return 0\n    if a[0] == a[52]:\n        return 0\n    if a[0] == a[53]:\n        return 0\n    if a[0] == a[54]:\n        return 0\n    if a[0] == a[55]:\n        return 0\n    if a[0] == a[56]:\n        return 0\n    if a[0] == a[57]:\n        return 0\n    if a[0] == a[58]:\n        return 0\n    if a[0] == a[59]:\n        return 0\n    if a[0] == a[60]:\n        return 0\n    if a[0] == a[61]:\n        return 0\n    if a[0] == a[62]:\n        return 0\n    if a[0] == a[63]:\n        return 0\n    if a[0] == a[64]:\n        return 0\n    if a[0] == a[65]:\n        return 0\n    if a[0] == a[66]:\n        return 0\n    if a[0] == a[67]:\n        return 0\n    if a[0] == a[68]:\n        return 0\n    if a[0] == a[69]:\n        return 0\n    if a[0] == a[70]:\n        return 0\n    if a[0] == a[71]:\n        return 0\n    if a[0] == a[72]:\n        return 0\n    if a[0] == a[73]:\n        return 0\n    if a[0] == a[74]:\n        return 0\n    if a[0] == a[75]:\n        return 0\n    if a[0] == a[76]:\n        return 0\n    if a[0] == a[77]:\n        return 0\n    if a[0] == a[78]:\n        return 0\n    if a[0] == a[79]:\n        return 0\n    if a[0] == a[80]:\n        return 0\n    if a[0] == a[81]:\n        return 0\n    if a[0] == a[82]:\n        return 0\n    if a[0] == a[83]:\n        return 0\n    if a[0] == a[84]:\n        return 0\n    if a[0] == a[85]:\n        return 0\n    if a[0] == a[86]:\n        return 0\n    if a[0] == a[87]:\n        return 0\n    if a[0] == a[88]:\n        return 0\n    if a[0] == a[89]:\n        return 0\n    if a[0] == a[90]:\n        return 0\n    if a[0] == a[91]:\n        return 0\n    if a[0] == a[92]:\n        return 0\n    if a[0] == a[93]:\n        return 0\n    if a[0] == a[94]:\n        return 0\n    if a[0] == a[95]:\n        return 0\n    if a[0] == a[96]:\n        return 0\n    if a[0] == a[97]:\n        return 0\n    if a[0] == a[98]:\n        return 0\n    if a[0] == a[99]:\n        return 0\n    if a[0] == a[100]:\n        return 0\n    if a[0] == a[101]:\n        return 0\n    if a"
    },
    {
        "number": 3742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p_1, p_2 = map(int, stdin.strip().split())\n    p_1 -= 1\n    p_2 -= 1\n    p_1 += 1\n    p_2 += 1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n\n    p_1 += p_2\n    p_2 += p_1\n    p_1 %= n\n    p_2 %= n"
    },
    {
        "number": 3743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2 == 1:\n        return \"4\"\n    if n % 2 == 0:\n        return \"2\"\n    if n % 2"
    },
    {
        "number": 3744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_sum = sum(a)\n    b_sum = sum(b)\n    if a_sum == b_sum:\n        return str(a_sum)\n    elif a_sum > b_sum:\n        return str(a_sum) + \" \" + solution(stdin)\n    else:\n        return str(b_sum) + \" \" + solution(stdin)\n\nprint(solution(input()))\n"
    },
    {
        "number": 3745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    u, v = map(int, stdin.split())\n    if n!= m:\n        return \"No\"\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        return \"Yes\"\n    if u == v:\n        "
    },
    {
        "number": 3746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        t[i][i] = 1\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            t[i][j] = t[i+1][j] + t[i][j+1]\n    for i in range(n-2):\n        for j in range(i+1, n):\n            t[i][j] = min(t[i][j], t[i+1][j] + t[i][j+1])\n    return str(t[0][n-1])\n"
    },
    {
        "number": 3747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin.lower())))\n\ndef"
    },
    {
        "number": 3748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    S = [list(stdin.split()) for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i][j + 1] = S[i][j + 1], S[i][j]\n            elif S[i][j] == 'c':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S[i][j]\n            elif S[i][j] == 'g':\n                S[i][j], S[i + 1][j + 1] = S[i + 1][j + 1], S[i][j]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S[i][j]\n            elif S[i][j] == 'c':\n                S[i][j], S[i + 1][j + 1] = S[i + 1][j + 1], S[i][j]\n            elif S[i][j] == 'g':\n                S[i][j], S[i + 1][j - 1] = S[i + 1][j - 1], S[i][j]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S[i][j]\n            elif S[i][j] == 'c':\n                S[i][j], S[i + 1][j + 1] = S[i + 1][j + 1], S[i][j]\n            elif S[i][j] == 'g':\n                S[i][j], S[i + 1][j - 1] = S[i + 1][j - 1], S[i][j]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S[i][j]\n            elif S[i][j] == 'c':\n                S[i][j], S[i + 1][j + 1] = S[i + 1][j + 1], S[i][j]\n            elif S[i][j] == 'g':\n                S[i][j], S[i + 1][j - 1] = S[i + 1][j - 1], S[i][j]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S[i][j]\n            elif S[i][j] == 'c':\n                S[i][j], S[i + 1][j + 1] = S[i + 1][j + 1], S[i][j]\n            elif S[i][j] == 'g':\n                S[i][j], S[i + 1][j - 1] = S[i + 1][j - 1], S[i][j]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S[i][j]\n            elif S[i][j] == 'c':\n                S[i][j], S[i + 1][j + 1] = S[i + 1][j + 1], S[i][j]\n            elif S[i][j] == 'g':\n                S[i][j], S[i + 1][j - 1] = S[i + 1][j - 1], S[i][j]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S[i][j]\n            elif S[i][j] == 'c':\n                S[i][j], S[i + 1][j + 1] = S[i + 1][j + 1], S[i][j]\n            elif S[i][j] == 'g':\n                S[i][j], S[i + 1][j - 1] = S[i + 1][j - 1], S[i][j]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S[i][j]\n            elif S[i][j] == 'c':\n                S[i][j], S[i + 1][j + 1] = S[i + 1][j + 1], S[i][j]\n            elif S[i][j] == 'g':\n                S[i][j], S[i + 1][j - 1] = S[i + 1][j - 1], S[i][j]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S[i][j]\n            elif S[i][j] == 'c':\n                S[i][j], S[i + 1][j + 1] = S[i + 1][j + 1], S[i][j]\n            elif S[i][j] == 'g':\n                S[i][j], S[i + 1][j - 1] = S[i + 1][j - 1], S[i][j]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S[i][j]\n            elif S[i][j] == 'c':\n                S[i][j], S[i + 1][j + 1] = S[i + 1][j + 1], S[i][j]\n            elif S[i][j] == 'g':\n                S[i][j], S[i + 1][j - 1] = S[i + 1][j - 1], S[i][j]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 'a':\n                S[i][j], S[i + 1][j] = S[i + 1][j], S"
    },
    {
        "number": 3749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    A_1 = list(map(int, stdin.split()))\n    A_N = [0] * N\n    for i in range(N):\n        A_N[i] = A_1[i]\n    for i in range(N):\n        A_N[i] = A_N[i] ^ X\n    A_N = [str(i) for i in A_N]\n    A_N = ''.join(A_N)\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N)[2:]\n    A_N = A_N.rjust(N, '0')\n    A_N = '0' * (N - len(A_N)) + A_N\n    A_N = int(A_N, 2)\n    A_N = A_N % (1 << N)\n    A_N = bin(A_N"
    },
    {
        "number": 3750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if k > 10**9 or a + b > 10**9:\n        return -1\n    if k == 0:\n        return 1\n    if a + b == 0:\n        return 0\n    if a + b == 1:\n        return 1\n    if a + b == 2:\n        return 2\n    if a + b == 3:\n        return 3\n    if a + b == 4:\n        return 4\n    if a + b == 5:\n        return 5\n    if a + b == 6:\n        return 6\n    if a + b == 7:\n        return 7\n    if a + b == 8:\n        return 8\n    if a + b == 9:\n        return 9\n    if a + b == 10:\n        return 10\n    if a + b == 11:\n        return 11\n    if a + b == 12:\n        return 12\n    if a + b == 13:\n        return 13\n    if a + b == 14:\n        return 14\n    if a + b == 15:\n        return 15\n    if a + b == 16:\n        return 16\n    if a + b == 17:\n        return 17\n    if a + b == 18:\n        return 18\n    if a + b == 19:\n        return 19\n    if a + b == 20:\n        return 20\n    if a + b == 21:\n        return 21\n    if a + b == 22:\n        return 22\n    if a + b == 23:\n        return 23\n    if a + b == 24:\n        return 24\n    if a + b == 25:\n        return 25\n    if a + b == 26:\n        return 26\n    if a + b == 27:\n        return 27\n    if a + b == 28:\n        return 28\n    if a + b == 29:\n        return 29\n    if a + b == 30:\n        return 30\n    if a + b == 31:\n        return 31\n    if a + b == 32:\n        return 32\n    if a + b == 33:\n        return 33\n    if a + b == 34:\n        return 34\n    if a + b == 35:\n        return 35\n    if a + b == 36:\n        return 36\n    if a + b == 37:\n        return 37\n    if a + b == 38:\n        return 38\n    if a + b == 39:\n        return 39\n    if a + b == 40:\n        return 40\n    if a + b == 41:\n        return 41\n    if a + b == 42:\n        return 42\n    if a + b == 43:\n        return 43\n    if a + b == 44:\n        return 44\n    if a + b == 45:\n        return 45\n    if a + b == 46:\n        return 46\n    if a + b == 47:\n        return 47\n    if a + b == 48:\n        return 48\n    if a + b == 49:\n        return 49\n    if a + b == 50:\n        return 50\n    if a + b == 51:\n        return 51\n    if a + b == 52:\n        return 52\n    if a + b == 53:\n        return 53\n    if a + b == 54:\n        return 54\n    if a + b == 55:\n        return 55\n    if a + b == 56:\n        return 56\n    if a + b == 57:\n        return 57\n    if a + b == 58:\n        return 58\n    if a + b == 59:\n        return 59\n    if a + b == 60:\n        return 60\n    if a + b == 61:\n        return 61\n    if a + b == 62:\n        return 62\n    if a + b == 63:\n        return 63\n    if a + b == 64:\n        return 64\n    if a + b == 65:\n        return 65\n    if a + b == 66:\n        return 66\n    if a + b == 67:\n        return 67\n    if a + b == 68:\n        return 68\n    if a + b == 69:\n        return 69\n    if a + b == 70:\n        return 70\n    if a + b == 71:\n        return 71\n    if a + b == 72:\n        return 72\n    if a + b == 73:\n        return 73\n    if a + b == 74:\n        return 74\n    if a + b == 75:\n        return 75\n    if a + b == 76:\n        return 76\n    if a + b == 77:\n        return 77\n    if a + b == 78:\n        return 78\n    if a + b == 79:\n        return 79\n    if a + b == 80:\n        return 80\n    if a + b == 81:\n        return 81\n    if a + b == 82:\n        return 82\n    if a + b == 83:\n        return 83\n    if a + b == 84:\n        return 84\n    if a + b == 85:\n        return 85\n    if a + b == 86:\n        return 86\n    if a + b == 87:\n        return 87\n    if a + b == 88:\n        return 88\n    if a + b == 89:\n        return 89\n    if a + b == 90:\n        return 90\n    if a + b == 91:\n        return 91\n    if a + b == 92:\n        return 92\n    if a + b == 93:\n        return 93\n    if a + b == 94:\n        return 94\n    if a + b == 95:\n        return 95\n    if a + b == 96:\n        return 96\n    if a + b == 97:\n        return 97\n    if a + b == 98:\n        return 98\n    if a + b == 99:\n        return 99\n    if a + b == 100:\n        return 100\n    if a + b == 101:\n        return 101\n    if a + b == 102:\n        return 102\n    if a + b == 103:\n        return 103\n    if a + b == 104:\n        return 104\n    if a + b == 105:\n        return 105\n    if a + b == 106:\n        return 106\n    if a + b == 107:\n        return 107\n    if a + b == 108:\n        return 108\n    if a + b == 109:\n        return 109\n    if a + b == 110:\n        return 110\n    if a + b == 111:\n        return 111\n    if a + b == 112:\n        return 112\n    if a + b == 113:\n        return 113\n    if a + b == 114:\n        return 114\n    if a + b == 115:\n        return 115\n    if a + b == 116:\n        return 116\n    if a + b == 117:\n        return 117\n    if a + b == 118:\n        return 118\n    if a + b == 119:\n        return 119\n    if a + b == 120:\n        return 120\n    if a + b == 121:\n        return 121\n    if a + b == 122:\n        return 122\n    if a + b == 123:\n        return 123\n    if a + b == 124:\n        return 124\n    if a + b == 125:\n        return 125\n    if a + b == 126:\n        return 126\n    if a + b == 127:\n        return 127\n    if a + b == 128:\n        return 128\n    if a + b == 129:\n        return 129\n    if a + b == 130:\n        return 130\n    "
    },
    {
        "number": 3751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Step 1:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 2:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 3:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 4:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 5:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 6:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 7:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 8:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 9:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 10:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 11:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 12:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 13:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 14:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 15:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 16:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been replaced, thus the obfuscation is finished.\n    \n    # Step 17:\n    # replace all occurrences of number with a, the result would be \"a string a character a string a\",\n    # replace all occurrences of string with b, the result would be \"a b a character a b a\",\n    # replace all occurrences of character with c, the result would be \"a b a c a b a\",\n    # all identifiers have been"
    },
    {
        "number": 3752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, d, t = map(int, stdin.split())\n    if k == 0 and d == 0 and t == 0:\n        return 'inf'\n    if k == 0 and d == 0 and t == 1:\n        return 'inf'\n    if k == 0 and d == 0 and t == 2:\n        return 'inf'\n    if k == 0 and d == 0 and t == 3:\n        return 'inf'\n    if k == 0 and d == 0 and t == 4:\n        return 'inf'\n    if k == 0 and d == 0 and t == 5:\n        return 'inf'\n    if k == 0 and d == 0 and t == 6:\n        return 'inf'\n    if k == 0 and d == 0 and t == 7:\n        return 'inf'\n    if k == 0 and d == 0 and t == 8:\n        return 'inf'\n    if k == 0 and d == 0 and t == 9:\n        return 'inf'\n    if k == 0 and d == 0 and t == 10:\n        return 'inf'\n    if k == 0 and d == 0 and t == 11:\n        return 'inf'\n    if k == 0 and d == 0 and t == 12:\n        return 'inf'\n    if k == 0 and d == 0 and t == 13:\n        return 'inf'\n    if k == 0 and d == 0 and t == 14:\n        return 'inf'\n    if k == 0 and d == 0 and t == 15:\n        return 'inf'\n    if k == 0 and d == 0 and t == 16:\n        return 'inf'\n    if k == 0 and d == 0 and t == 17:\n        return 'inf'\n    if k == 0 and d == 0 and t == 18:\n        return 'inf'\n    if k == 0 and d == 0 and t == 19:\n        return 'inf'\n    if k == 0 and d == 0 and t == 20:\n        return 'inf'\n    if k == 0 and d == 0 and t == 21:\n        return 'inf'\n    if k == 0 and d == 0 and t == 22:\n        return 'inf'\n    if k == 0 and d == 0 and t == 23:\n        return 'inf'\n    if k == 0 and d == 0 and t == 24:\n        return 'inf'\n    if k == 0 and d == 0 and t == 25:\n        return 'inf'\n    if k == 0 and d == 0 and t == 26:\n        return 'inf'\n    if k == 0 and d == 0 and t == 27:\n        return 'inf'\n    if k == 0 and d == 0 and t == 28:\n        return 'inf'\n    if k == 0 and d == 0 and t == 29:\n        return 'inf'\n    if k == 0 and d == 0 and t == 30:\n        return 'inf'\n    if k == 0 and d == 0 and t == 31:\n        return 'inf'\n    if k == 0 and d == 0 and t == 32:\n        return 'inf'\n    if k == 0 and d == 0 and t == 33:\n        return 'inf'\n    if k == 0 and d == 0 and t == 34:\n        return 'inf'\n    if k == 0 and d == 0 and t == 35:\n        return 'inf'\n    if k == 0 and d == 0 and t == 36:\n        return 'inf'\n    if k == 0 and d == 0 and t == 37:\n        return 'inf'\n    if k == 0 and d == 0 and t == 38:\n        return 'inf'\n    if k == 0 and d == 0 and t == 39:\n        return 'inf'\n    if k == 0 and d == 0 and t == 40:\n        return 'inf'\n    if k == 0 and d == 0 and t == 41:\n        return 'inf'\n    if k == 0 and d == 0 and t == 42:\n        return 'inf'\n    if k == 0 and d == 0 and t == 43:\n        return 'inf'\n    if k == 0 and d == 0 and t == 44:\n        return 'inf'\n    if k == 0 and d == 0 and t == 45:\n        return 'inf'\n    if k == 0 and d == 0 and t == 46:\n        return 'inf'\n    if k == 0 and d == 0 and t == 47:\n        return 'inf'\n    if k == 0 and d == 0 and t == 48:\n        return 'inf'\n    if k == 0 and d == 0 and t == 49:\n        return 'inf'\n    if k == 0 and d == 0 and t == 50:\n        return 'inf'\n    if k == 0 and d == 0 and t == 51:\n        return 'inf'\n    if k == 0 and d == 0 and t == 52:\n        return 'inf'\n    if k == 0 and d == 0 and t == 53:\n        return 'inf'\n    if k == 0 and d == 0 and t == 54:\n        return 'inf'\n    if k == 0 and d == 0 and t == 55:\n        return 'inf'\n    if k == 0 and d == 0 and t == 56:\n        return 'inf'\n    if k == 0 and d == 0 and t == 57:\n        return 'inf'\n    if k == 0 and d == 0 and t == 58:\n        return 'inf'\n    if k == 0 and d == 0 and t == 59:\n        return 'inf'\n    if k == 0 and d == 0 and t == 60:\n        return 'inf'\n    if k == 0 and d == 0 and t == 61:\n        return 'inf'\n    if k == 0 and d == 0 and t == 62:\n        return 'inf'\n    if k == 0 and d == 0 and t == 63:\n        return 'inf'\n    if k == 0 and d == 0 and t == 64:\n        return 'inf'\n    if k == 0 and d == 0 and t == 65:\n        return 'inf'\n    if k == 0 and d == 0 and t == 66:\n        return 'inf'\n    if k == 0 and d == 0 and t == 67:\n        return 'inf'\n    if k == 0 and d == 0 and t == 68:\n        return 'inf'\n    if k == 0 and d == 0 and t == 69:\n        return 'inf'\n    if k == 0 and d == 0 and t == 70:\n        return 'inf'\n    if k == 0 and d == 0 and t == 71:\n        return 'inf'\n    "
    },
    {
        "number": 3753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()\n    s = [list(map(int, s[i].split())) for i in range(n)]\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    visited[0][0] = True\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == \"#\":\n                if visited[i][j] == False:\n                    visited[i][j] = True\n                    if i == 0:\n                        if j == 0:\n                            return \"1\"\n                        else:\n                            return \"2\"\n                    elif i == n - 1:\n                        if j == m - 1:\n                            return \"1\"\n                        else:\n                            return \"2\"\n                    else:\n                        if j == 0:\n                            return \"1\"\n                        else:\n                            return \"2\"\n                    visited[i][j] = False\n    return \"0\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Examples-----\nInput\n2 2\n..\n..\n\nOutput\n2\n\nInput\n4 4\n....\n"
    },
    {
        "number": 3754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    d_1 = list(map(int, stdin.strip().split()))\n    d_2 = list(map(int, stdin.strip().split()))\n    d_3 = list(map(int, stdin.strip().split()))\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(0)\n    d_2.append(0)\n    d_3.append(0)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)\n    d_2.append(N)\n    d_3.append(N)\n    d_1.extend(d_2)\n    d_1.extend(d_3)\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    d_1.append(N)"
    },
    {
        "number": 3755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_1 = int(stdin[0])\n    a_2 = int(stdin[1])\n    a_3 = int(stdin[2])\n    a_4 = int(stdin[3])\n    a_5 = int(stdin[4])\n    a_6 = int(stdin[5])\n    a_7 = int(stdin[6])\n    a_8 = int(stdin[7])\n    a_9 = int(stdin[8])\n    a_10 = int(stdin[9])\n    a_11 = int(stdin[10])\n    a_12 = int(stdin[11])\n    a_13 = int(stdin[12])\n    a_14 = int(stdin[13])\n    a_15 = int(stdin[14])\n    a_16 = int(stdin[15])\n    a_17 = int(stdin[16])\n    a_18 = int(stdin[17])\n    a_19 = int(stdin[18])\n    a_20 = int(stdin[19])\n    a_21 = int(stdin[20])\n    a_22 = int(stdin[21])\n    a_23 = int(stdin[22])\n    a_24 = int(stdin[23])\n    a_25 = int(stdin[24])\n    a_26 = int(stdin[25])\n    a_27 = int(stdin[26])\n    a_28 = int(stdin[27])\n    a_29 = int(stdin[28])\n    a_30 = int(stdin[29])\n    a_31 = int(stdin[30])\n    a_32 = int(stdin[31])\n    a_33 = int(stdin[32])\n    a_34 = int(stdin[33])\n    a_35 = int(stdin[34])\n    a_36 = int(stdin[35])\n    a_37 = int(stdin[36])\n    a_38 = int(stdin[37])\n    a_39 = int(stdin[38])\n    a_40 = int(stdin[39])\n    a_41 = int(stdin[40])\n    a_42 = int(stdin[41])\n    a_43 = int(stdin[42])\n    a_44 = int(stdin[43])\n    a_45 = int(stdin[44])\n    a_46 = int(stdin[45])\n    a_47 = int(stdin[46])\n    a_48 = int(stdin[47])\n    a_49 = int(stdin[48])\n    a_50 = int(stdin[49])\n    a_51 = int(stdin[50])\n    a_52 = int(stdin[51])\n    a_53 = int(stdin[52])\n    a_54 = int(stdin[53])\n    a_55 = int(stdin[54])\n    a_56 = int(stdin[55])\n    a_57 = int(stdin[56])\n    a_58 = int(stdin[57])\n    a_59 = int(stdin[58])\n    a_60 = int(stdin[59])\n    a_61 = int(stdin[60])\n    a_62 = int(stdin[61])\n    a_63 = int(stdin[62])\n    a_64 = int(stdin[63])\n    a_65 = int(stdin[64])\n    a_66 = int(stdin[65])\n    a_67 = int(stdin[66])\n    a_68 = int(stdin[67])\n    a_69 = int(stdin[68])\n    a_70 = int(stdin[69])\n    a_71 = int(stdin[70])\n    a_72 = int(stdin[71])\n    a_73 = int(stdin[72])\n    a_74 = int(stdin[73])\n    a_75 = int(stdin[74])\n    a_76 = int(stdin[75])\n    a_77 = int(stdin[76])\n    a_78 = int(stdin[77])\n    a_79 = int(stdin[78])\n    a_80 = int(stdin[79])\n    a_81 = int(stdin[80])\n    a_82 = int(stdin[81])\n    a_83 = int(stdin[82])\n    a_84 = int(stdin[83])\n    a_85 = int(stdin[84])\n    a_86 = int(stdin[85])\n    a_87 = int(stdin[86])\n    a_88 = int(stdin[87])\n    a_89 = int(stdin[88])\n    a_90 = int(stdin[89])\n    a_91 = int(stdin[90])\n    a_92 = int(stdin[91])\n    a_93 = int(stdin[92])\n    a_94 = int(stdin[93])\n    a_95 = int(stdin[94])\n    a_96 = int(stdin[95])\n    a_97 = int(stdin[96])\n    a_98 = int(stdin[97])\n    a_99 = int(stdin[98])\n    a_100 = int(stdin[99])\n    a_101 = int(stdin[100])\n    a_102 = int(stdin[101])\n    a_103 = int(stdin[102])\n    a_104 = int(stdin[103])\n    a_105 = int(stdin[104])\n    a_106 = int(stdin[105])\n    a_107 = int(stdin[106])\n    a_108 = int(stdin[107])\n    a_109 = int(stdin[108])\n    a_110 = int(stdin[109])\n    a_111 = int(stdin[110])\n    a_112 = int(stdin[111])\n    a_113 = int(stdin[112])\n    a_114 = int(stdin[113])\n    a_115 = int(stdin[114])\n    a_116 = int(stdin[115])\n    a_117 = int(stdin[116])\n    a_118 = int(stdin[117])\n    a_119 = int(stdin[118])\n    a_120 = int(stdin[119])\n    a_121 = int(stdin[120])\n    a_122 = int(stdin[121])\n    a_123 = int(stdin[122])\n    a_124 = int(stdin[123])\n    a_125 = int(stdin[124])\n    a_126 = int(stdin[125"
    },
    {
        "number": 3756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    grade = list(map(int, stdin.split()))\n    grade.sort()\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n    grade = [0] + grade\n"
    },
    {
        "number": 3757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 3758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    game_field = []\n    for _ in range(n):\n        game_field.append(stdin.strip())\n    \n    def get_direction(pos):\n        if pos[0] == 0:\n            return 0\n        elif pos[0] == n-1:\n            return 1\n        else:\n            return 2\n    \n    def get_direction_list(pos):\n        direction_list = []\n        for i in range(pos[0], pos[0]+n):\n            direction_list.append(get_direction(pos))\n        return direction_list\n    \n    def get_direction_list_2(pos):\n        direction_list = []\n        for i in range(pos[0], pos[0]+n):\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n        return direction_list\n    \n    def get_direction_list_3(pos):\n        direction_list = []\n        for i in range(pos[0], pos[0]+n):\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n        return direction_list\n    \n    def get_direction_list_4(pos):\n        direction_list = []\n        for i in range(pos[0], pos[0]+n):\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n        return direction_list\n    \n    def get_direction_list_5(pos):\n        direction_list = []\n        for i in range(pos[0], pos[0]+n):\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list.append(get_direction(pos))\n            direction_list"
    },
    {
        "number": 3759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n =="
    },
    {
        "number": 3760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, a, b = map(int, stdin.split())\n    if n*m!= a*b:\n        return 'impossible'\n    if x*y!= a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'impossible'\n    if x*y == a*b:\n        return 'imp"
    },
    {
        "number": 3761,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    x, y = int(s[0]), int(s[1])\n    if s[2] == 'F':\n        x -= 1\n        y += 1\n    elif s[2] == 'T':\n        x += 1\n        y -= 1\n    if x < 0 or y < 0:\n        return 'No'\n    if x > y:\n        return 'No'\n    return 'Yes'\n\n-----Example 1-----\nInput:\nFTFF\n4 2\n1 2\n1 3\n1 4\n\nOutput:\nYes\n\nExplanation:\nThe robot is put at the origin in a two-dimensional plane.\nThe robot is facing in the positive x-axis direction.\nThe robot will be put at (1, 2) after all the instructions are executed.\n\n-----Constraints-----\n - s consists of F and T.\n - 1 \\leq |s| \\leq 8 000\n - x and y are integers.\n - |x|, |y| \\leq |s|\n\n-----Input-----\nInput is given from Standard Input in the following format:\ns\nx y\n\n-----Output-----\nIf the objective is achievable, print Yes; if it is not, print No.\n\n-----Sample Input-----\nFTFF\n4 2\n1 2\n1 3\n1 4\n\n-----Sample Output-----\nYes\n\nThe objective can be achieved by, for example, turning counterclockwise in the first T and turning clockwise in the second T.\ndef"
    },
    {
        "number": 3762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 0:\n        return \"0\"\n    if k == 0:\n        return \"1\"\n    if k == 1:\n        return \"2\"\n    if k == 2:\n        return \"3\"\n    if k == 3:\n        return \"4\"\n    if k == 4:\n        return \"5\"\n    if k == 5:\n        return \"6\"\n    if k == 6:\n        return \"0\"\n    if k == 7:\n        return \"0\"\n    if k == 8:\n        return \"0\"\n    if k == 9:\n        return \"0\"\n    if k == 10:\n        return \"0\"\n    if k == 11:\n        return \"0\"\n    if k == 12:\n        return \"0\"\n    if k == 13:\n        return \"0\"\n    if k == 14:\n        return \"0\"\n    if k == 15:\n        return \"0\"\n    if k == 16:\n        return \"0\"\n    if k == 17:\n        return \"0\"\n    if k == 18:\n        return \"0\"\n    if k == 19:\n        return \"0\"\n    if k == 20:\n        return \"0\"\n    if k == 21:\n        return \"0\"\n    if k == 22:\n        return \"0\"\n    if k == 23:\n        return \"0\"\n    if k == 24:\n        return \"0\"\n    if k == 25:\n        return \"0\"\n    if k == 26:\n        return \"0\"\n    if k == 27:\n        return \"0\"\n    if k == 28:\n        return \"0\"\n    if k == 29:\n        return \"0\"\n    if k == 30:\n        return \"0\"\n    if k == 31:\n        return \"0\"\n    if k == 32:\n        return \"0\"\n    if k == 33:\n        return \"0\"\n    if k == 34:\n        return \"0\"\n    if k == 35:\n        return \"0\"\n    if k == 36:\n        return \"0\"\n    if k == 37:\n        return \"0\"\n    if k == 38:\n        return \"0\"\n    if k == 39:\n        return \"0\"\n    if k == 40:\n        return \"0\"\n    if k == 41:\n        return \"0\"\n    if k == 42:\n        return \"0\"\n    if k == 43:\n        return \"0\"\n    if k == 44:\n        return \"0\"\n    if k == 45:\n        return \"0\"\n    if k == 46:\n        return \"0\"\n    if k == 47:\n        return \"0\"\n    if k == 48:\n        return \"0\"\n    if k == 49:\n        return \"0\"\n    if k == 50:\n        return \"0\"\n    if k == 51:\n        return \"0\"\n    if k == 52:\n        return \"0\"\n    if k == 53:\n        return \"0\"\n    if k == 54:\n        return \"0\"\n    if k == 55:\n        return \"0\"\n    if k == 56:\n        return \"0\"\n    if k == 57:\n        return \"0\"\n    if k == 58:\n        return \"0\"\n    if k == 59:\n        return \"0\"\n    if k == 60:\n        return \"0\"\n    if k == 61:\n        return \"0\"\n    if k == 62:\n        return \"0\"\n    if k == 63:\n        return \"0\"\n    if k == 64:\n        return \"0\"\n    if k == 65:\n        return \"0\"\n    if k == 66:\n        return \"0\"\n    if k == 67:\n        return \"0\"\n    if k == 68:\n        return \"0\"\n    if k == 69:\n        return \"0\"\n    if k == 70:\n        return \"0\"\n    if k == 71:\n        return \"0\"\n    if k == 72:\n        return \"0\"\n    if k == 73:\n        return \"0\"\n    if k == 74:\n        return \"0\"\n    if k == 75:\n        return \"0\"\n    if k == 76:\n        return \"0\"\n    if k == 77:\n        return \"0\"\n    if k == 78:\n        return \"0\"\n    if k == 79:\n        return \"0\"\n    if k == 80:\n        return \"0\"\n    if k == 81:\n        return \"0\"\n    if k == 82:\n        return \"0\"\n    if k == 83:\n        return \"0\"\n    if k == 84:\n        return \"0\"\n    if k == 85:\n        return \"0\"\n    if k == 86:\n        return \"0\"\n    if k == 87:\n        return \"0\"\n    if k == 88:\n        return \"0\"\n    if k == 89:\n        return \"0\"\n    if k == 90:\n        return \"0\"\n    if k == 91:\n        return \"0\"\n    if k == 92:\n        return \"0\"\n    if k == 93:\n        return \"0\"\n    if k == 94:\n        return \"0\"\n    if k == 95:\n        return \"0\"\n    if k == 96:\n        return \"0\"\n    if k == 97:\n        return \"0\"\n    if k == 98:\n        return \"0\"\n    if k == 99:\n        return \"0\"\n    if k == 100:\n        return \"0\"\n    if k == 101:\n        return \"0\"\n    if k == 102:\n        return \"0\"\n    if k == 103:\n        return \"0\"\n    if k == 104:\n        return \"0\"\n    if k == 105:\n        return \"0\"\n    if k == 106:\n        return \"0\"\n    if k == 107:\n        return \"0\"\n    if k == 108:\n        return \"0\"\n    if k == 109:\n        return \"0\"\n    if k == 110:\n        return \"0\"\n    if k == 111:\n        return \"0\"\n    if k == 112:\n        return \"0\"\n    if k == 113:\n        return \"0\"\n    if k == 114:\n        return \"0\"\n    if k == 115:\n        return \"0\"\n    if k == 116:\n        return \"0\"\n    if k == 117:\n        return \"0\"\n    if k == 118:\n        return \"0\"\n    if k == 119:\n        return \"0\"\n    if k == 120:\n        return \"0\"\n    if k == 121:\n        return \"0\"\n    if k == 122:\n        return \"0\"\n    if k == 123:\n        return \"0\"\n    if k == 124:\n        return \"0\"\n    if k == 125:\n        return \"0\"\n    if k == 126:\n        return \"0\"\n    if k == 127:\n        return \"0\"\n    if k == 128:\n        return \"0\"\n    if k == 129:\n        return \"0\"\n    if k == 130:"
    },
    {
        "number": 3763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        answer += a[i] * (p ** i)\n    return str(answer)\n\nprint(solution(\"3 2 3\"))\nprint(solution(\"3 2 3 4\"))\nprint(solution(\"3 2 3 4 5\"))\nprint(solution(\"3 2 3 4 5 6\"))\nprint(solution(\"3 2 3 4 5 6 7\"))\nprint(solution(\"3 2 3 4 5 6 7 8\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\"))\nprint(solution(\"3 2 3 4 5 6 7 8 9 10 11"
    },
    {
        "number": 3764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n"
    },
    {
        "number": 3765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] * h for i in range(n)]\n    a.sort()\n    a = [a[i] * w for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n"
    },
    {
        "number": 3766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cards = [list(map(int, input().split())) for _ in range(n)]\n    cards.sort(key=lambda x: x[0])\n    color_hints = [0] * 5\n    value_hints = [0] * 5\n    for i in range(n):\n        color_hints[cards[i][0]] += 1\n        value_hints[cards[i][1]] += 1\n    for i in range(5):\n        if color_hints[i] == 0:\n            print(0)\n            return\n        if value_hints[i] == 0:\n            print(0)\n            return\n        if color_hints[i] == 1 and value_hints[i] == 1:\n            print(0)\n            return\n        if color_hints[i] == 1 and value_hints[i] == 2:\n            print(1)\n            return\n        if color_hints[i] == 2 and value_hints[i] == 1:\n            print(1)\n            return\n        if color_hints[i] == 2 and value_hints[i] == 2:\n            print(2)\n            return\n        if color_hints[i] == 3 and value_hints[i] == 1:\n            print(2)\n            return\n        if color_hints[i] == 3 and value_hints[i] == 2:\n            print(3)\n            return\n        if color_hints[i] == 4 and value_hints[i] == 1:\n            print(3)\n            return\n        if color_hints[i] == 4 and value_hints[i] == 2:\n            print(4)\n            return\n    print(min(color_hints))\n    return\n\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"6\")\nsolution(\"7\")\nsolution(\"8\")\nsolution(\"9\")\nsolution(\"10\")\nsolution(\"11\")\nsolution(\"12\")\nsolution(\"13\")\nsolution(\"14\")\nsolution(\"15\")\nsolution(\"16\")\nsolution(\"17\")\nsolution(\"18\")\nsolution(\"19\")\nsolution(\"20\")\nsolution(\"21\")\nsolution(\"22\")\nsolution(\"23\")\nsolution(\"24\")\nsolution(\"25\")\nsolution(\"26\")\nsolution(\"27\")\nsolution(\"28\")\nsolution(\"29\")\nsolution(\"30\")\nsolution(\"31\")\nsolution(\"32\")\nsolution(\"33\")\nsolution(\"34\")\nsolution(\"35\")\nsolution(\"36\")\nsolution(\"37\")\nsolution(\"38\")\nsolution(\"39\")\nsolution(\"40\")\nsolution(\"41\")\nsolution(\"42\")\nsolution(\"43\")\nsolution(\"44\")\nsolution(\"45\")\nsolution(\"46\")\nsolution(\"47\")\nsolution(\"48\")\nsolution(\"49\")\nsolution(\"50\")\nsolution(\"51\")\nsolution(\"52\")\nsolution(\"53\")\nsolution(\"54\")\nsolution(\"55\")\nsolution(\"56\")\nsolution(\"57\")\nsolution(\"58\")\nsolution(\"59\")\nsolution(\"60\")\nsolution(\"61\")\nsolution(\"62\")\nsolution(\"63\")\nsolution(\"64\")\nsolution(\"65\")\nsolution(\"66\")\nsolution(\"67\")\nsolution(\"68\")\nsolution(\"69\")\nsolution(\"70\")\nsolution(\"71\")\nsolution(\"72\")\nsolution(\"73\")\nsolution(\"74\")\nsolution(\"75\")\nsolution(\"76\")\nsolution(\"77\")\nsolution(\"78\")\nsolution(\"79\")\nsolution(\"80\")\nsolution(\"81\")\nsolution(\"82\")\nsolution(\"83\")\nsolution(\"84\")\nsolution(\"85\")\nsolution(\"86\")\nsolution(\"87\")\nsolution(\"88\")\nsolution(\"89\")\nsolution(\"90\")\nsolution(\"91\")\nsolution(\"92\")\nsolution(\"93\")\nsolution(\"94\")\nsolution(\"95\")\nsolution(\"96\")\nsolution(\"97\")\nsolution(\"98\")\nsolution(\"99\")\nsolution(\"100\")\nsolution(\"101\")\nsolution(\"102\")\nsolution(\"103\")\nsolution(\"104\")\nsolution(\"105\")\nsolution(\"106\")\nsolution(\"107\")\nsolution(\"108\")\nsolution(\"109\")\nsolution(\"110\")\nsolution(\"111\")\nsolution(\"112\")\nsolution(\"113\")\nsolution(\"114\")\nsolution(\"115\")\nsolution(\"116\")\nsolution(\"117\")\nsolution(\"118\")\nsolution(\"119\")\nsolution(\"120\")\nsolution(\"121\")\nsolution(\"122\")\nsolution(\"123\")\nsolution(\"124\")\nsolution(\"125\")\nsolution(\"126\")\nsolution(\"127\")\nsolution(\"128\")\nsolution(\"129\")\nsolution(\"130\")\nsolution(\"131\")\nsolution(\"132\")\nsolution(\"133\")\nsolution(\"134\")\nsolution(\"135\")\nsolution(\"136\")\nsolution(\"137\")\nsolution(\"138\")\nsolution(\"139\")\nsolution(\"140\")\nsolution(\"141\")\nsolution(\"142\")\nsolution(\"143\")\nsolution(\"144\")\nsolution(\"145\")\nsolution(\"146\")\nsolution(\"147\")\nsolution(\"148\")\nsolution(\"149\")\nsolution(\"150\")\nsolution(\"151\")\nsolution(\"152\")\nsolution(\"153\")\nsolution(\"154\")\nsolution(\"155\")\nsolution(\"156\")\nsolution(\"157\")\nsolution(\"158\")\nsolution(\"159\")\nsolution(\"160\")\nsolution(\"161\")\nsolution(\"162\")\nsolution(\"163\")\nsolution(\"164\")\nsolution(\"165\")\nsolution(\"166\")\nsolution(\"167\")\nsolution(\"168\")\nsolution(\"169\")\nsolution(\"170\")\nsolution(\"171\")\nsolution(\"172\")\nsolution(\"173\")\nsolution(\"174\")\nsolution(\"175\")\nsolution(\"176\")\nsolution(\"177\")\nsolution(\"178\")\nsolution(\"179\")\nsolution(\"180\")\nsolution(\"181\")\nsolution(\"182\")\nsolution(\"183\")\nsolution"
    },
    {
        "number": 3767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, t = map(int, stdin.split())\n    soda = [int(i) for i in stdin.split()]\n    soda.sort()\n    k = int(t / (a + b))\n    if k == 0:\n        return str(k)\n    else:\n        return str(k) + \" \" + str(soda[k])\n\nprint(solution(\"4 3 3 4 3\"))\nprint(solution(\"2 6\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5 10 41 7 8 24\"))\nprint(solution(\"5"
    },
    {
        "number": 3768,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return 'Impossible'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        "
    },
    {
        "number": 3769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, k = map(int, stdin.split())\n    if p % 2!= 0 or k % 2!= 0:\n        return \"0\"\n    \n    def f(x):\n        return (x * (x + 1) // 2) % p\n    \n    def count(x):\n        return sum(map(f, range(x, x + k)))\n    \n    return str(count(k))\n\n-----Constraints-----\n\n0 <= k <= p - 1\n0 <= stdin.length <= 10^5\n0 <= p, k <= 10^5\n\n-----Submissions-----\n\nSample Input\n\n3 2\n\nSample Output\n\n3\n\nExplanation\n\nThe input consists of two space-separated integers p and k (3 \u2264 p \u2264 1 000 000, 0 \u2264 k \u2264 p - 1) on a single line. It is guaranteed that p is an odd prime number.\n\n-----Constraints-----\n\n0 <= k <= p - 1\n0 <= p <= 10^5\n\n-----Submissions-----\n\nRuntime: 32 ms, faster than 95.41% of Python3 online submissions for Distinct Functions.\nMemory Usage: 14.2 MB, less than 6.41% of Python3 online submissions for Distinct Functions.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        p, k = map(int, stdin.split())\n        if p % 2!= 0 or k % 2!= 0:\n            return \"0\"\n        \n        def f(x):\n            return (x * (x + 1) // 2) % p\n        \n        def count(x):\n            return sum(map(f, range(x, x + k)))\n        \n        return str(count(k))\n"
    },
    {
        "number": 3770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    U = list(map(int, stdin.split()))\n    V = list(map(int, stdin.split()))\n    U.sort()\n    V.sort()\n    A.sort()\n    B.sort()\n    score = 0\n    for i in range(N):\n        score += A[i] * B[i]\n    for i in range(M):\n        score += A[i] * U[i]\n    for i in range(N):\n        score += B[i] * V[i]\n    return str(score)\n\n-----Sample Output-----\n1\n\nDeleting Vertex 2 costs 1.\nAfter that, the graph is separated into two connected components.\nThe score of the component consisting of Vertex 1 is |0| = 0. The score of the component consisting of Vertices 3 and 4 is |(-3) + 1| = 2.\nTherefore, Snuke's profit is 0 + 2 - 1 = 1.\nHe cannot gain more than 1, so the answer is 1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 300\n - 1 \\leq M \\leq 300\n - 1 \\leq A_i \\leq 10^6\n - -10^6 \\leq B_i \\leq 10^6\n - 1 \\leq U_i,V_i \\leq N\n - The given graph does not contain self loops or multiple edges.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2 \\cdots A_N\nB_1 B_2 \\cdots B_N\nU_1 V_1\nU_2 V_2\n\\vdots\nU_M V_M\n\n-----Output-----\nPrint the maximum possible profit Snuke can gain.\n\n-----Sample Input-----\n4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n\n-----Sample Output-----\n1\n\nDeleting Vertex 2 costs 1.\nAfter that, the graph is separated into two connected components.\nThe score of the component consisting of Vertex 1 is |0| = 0. The score of the component consisting of Vertices 3 and 4 is |(-3) + 1| = 2.\nTherefore, Snuke's profit is 0 + 2 - 1 = 1.\nHe cannot gain more than 1, so the answer is 1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 300\n - 1 \\leq M \\leq 300\n - 1 \\leq A_i \\leq 10^6\n - -10^6 \\leq B_i \\leq 10^6\n - 1 \\leq U_i,V_i \\leq N\n - The given graph does not contain self loops or multiple edges.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2 \\cdots A_N\nB_1 B_2 \\cdots B_N\nU_1 V_1\nU_2 V_2\n\\vdots\nU_M V_M\n\n-----Output-----\nPrint the maximum possible profit Snuke can gain.\n\n-----Sample Input-----\n4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n\n-----Sample Output-----\n1\n\nDeleting Vertex 2 costs 1.\nAfter that, the graph is separated into two connected components.\nThe score of the component consisting of Vertex 1 is |0| = 0. The score of the component consisting of Vertices 3 and 4 is |(-3) + 1| = 2.\nTherefore, Snuke's profit is 0 + 2 - 1 = 1.\nHe cannot gain more than 1, so the answer is 1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 300\n - 1 \\leq M \\leq 300\n - 1 \\leq A_i \\leq 10^6\n - -10^6 \\leq B_i \\leq 10^6\n - 1 \\leq U_i,V_i \\leq N\n - The given graph does not contain self loops or multiple edges.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2 \\cdots A_N\nB_1 B_2 \\cdots B_N\nU_1 V_1\nU_2 V_2\n\\vdots\nU_M V_M\n\n-----Output-----\nPrint the maximum possible profit Snuke can gain.\n\n-----Sample Input-----\n4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n\n-----Sample Output-----\n1\n\nDeleting Vertex 2 costs 1.\nAfter that, the graph is separated into two connected components.\nThe score of the component consisting of Vertex 1 is |0| = 0. The score of the component consisting of Vertices 3 and 4 is |(-3) + 1| = 2.\nTherefore, Snuke's profit is 0 + 2 - 1 = 1.\nHe cannot gain more than 1, so the answer is 1.\n\n-----Constraints-----\n - 1 \\leq N \\leq 300\n - 1 \\leq M \\leq 300\n - 1 \\leq A_i \\leq 10^6\n - -10^6 \\leq B_i \\leq 10^6\n - 1 \\leq U_i,V_i \\leq N\n - The given graph does not contain self loops or multiple edges.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2 \\cdots A_N\nB_1 B_2 \\cdots B_N\nU_1 V_1\nU_2 V_2\n\\vdots\nU_M V_M\n\n-----Output-----\nPrint the maximum possible profit Snuke can gain.\n\n-----Sample Input-----\n4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n\n-----Sample Output-----\n1\n\nDe"
    },
    {
        "number": 3771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = [list(map(str, input())) for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a[i][j] == 'T':\n                a[i][j] = 'S'\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 'S':\n                a[i][j] = 'T'\n            elif a["
    },
    {
        "number": 3772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(a)\n    elif a > b:\n        return str(a) +'' + solution(stdin)\n    else:\n        return str(b) +'' + solution(stdin)\n\ndef"
    },
    {
        "number": 3773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, K_1 = map(int, stdin.split())\n    A_N = A_1\n    K_N = K_1\n    A_N_list = list(map(int, stdin.split()))\n    K_N_list = list(map(int, stdin.split()))\n    A_N_list.sort()\n    K_N_list.sort()\n    for i in range(N):\n        if A_N_list[i] > K_N_list[i]:\n            A_N_list[i] -= K_N_list[i]\n        elif A_N_list[i] < K_N_list[i]:\n            A_N_list[i] += K_N_list[i]\n    if A_N_list[N-1] == 0:\n        return 'Aoki'\n    else:\n        return 'Takahashi'\n"
    },
    {
        "number": 3774,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0 or m == 0:\n        return '0'\n    if n == 1:\n        return str(m)\n    if m == 1:\n        return str(n)\n    if n == 2:\n        return str(n*(n-1))\n    if m == 2:\n        return str(n*(n-1)*(n-2))\n    if n == 3:\n        return str(n*(n-1)*(n-2)*(n-3))\n    if m == 3:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4))\n    if n == 4:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5))\n    if m == 4:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6))\n    if n == 5:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7))\n    if m == 5:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8))\n    if n == 6:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9))\n    if m == 6:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10))\n    if n == 7:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11))\n    if m == 7:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12))\n    if n == 8:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13))\n    if m == 8:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14))\n    if n == 9:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15))\n    if m == 9:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16))\n    if n == 10:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16)*(n-17))\n    if m == 10:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16)*(n-17)*(n-18))\n    if n == 11:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16)*(n-17)*(n-18)*(n-19))\n    if m == 11:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16)*(n-17)*(n-18)*(n-19)*(n-20))\n    if n == 12:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16)*(n-17)*(n-18)*(n-19)*(n-20)*(n-21))\n    if m == 12:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16)*(n-17)*(n-18)*(n-19)*(n-20)*(n-21)*(n-22))\n    if n == 13:\n        return str(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*"
    },
    {
        "number": 3775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = []\n    for i in range(n):\n        pairs.append(tuple(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(i+1, n):\n            if pairs[i][0] == pairs[j][0] and pairs[i][1] == pairs[j][1]:\n                return str(pairs[i][0])\n    return str(pairs[n-1][0])\n\ndef"
    },
    {
        "number": 3776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 3777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, U, V, W = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    def dfs(u, visited):\n        visited[u] = True\n        for v, w in graph[u]:\n            if not visited[v]:\n                dfs(v, visited)\n    \n    visited = [False] * N\n    for i in range(N):\n        if not visited[i]:\n            dfs(i, visited)\n    \n    def dfs_white(u, visited):\n        visited[u] = True\n        for v, w in graph[u]:\n            if not visited[v]:\n                dfs_white(v, visited)\n    \n    def dfs_black(u, visited):\n        visited[u] = True\n        for v, w in graph[u]:\n            if not visited[v]:\n                dfs_black(v, visited)\n    \n    answer = 0\n    for i in range(N):\n        if not visited[i]:\n            dfs_white(i, visited)\n            answer += 1\n    \n    for i in range(N):\n        if not visited[i]:\n            dfs_black(i, visited)\n            answer += 1\n    \n    return str(answer % (10**9 + 7))\n"
    },
    {
        "number": 3778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '-1'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '0'\n    if n == 3:\n        return '0'\n    if n == 4:\n        return '0'\n    if n == 5:\n        return '0'\n    if n == 6:\n        return '0'\n    if n == 7:\n        return '0'\n    if n == 8:\n        return '0'\n    if n == 9:\n        return '0'\n    if n == 10:\n        return '0'\n    if n == 11:\n        return '0'\n    if n == 12:\n        return '0'\n    if n == 13:\n        return '0'\n    if n == 14:\n        return '0'\n    if n == 15:\n        return '0'\n    if n == 16:\n        return '0'\n    if n == 17:\n        return '0'\n    if n == 18:\n        return '0'\n    if n == 19:\n        return '0'\n    if n == 20:\n        return '0'\n    if n == 21:\n        return '0'\n    if n == 22:\n        return '0'\n    if n == 23:\n        return '0'\n    if n == 24:\n        return '0'\n    if n == 25:\n        return '0'\n    if n == 26:\n        return '0'\n    if n == 27:\n        return '0'\n    if n == 28:\n        return '0'\n    if n == 29:\n        return '0'\n    if n == 30:\n        return '0'\n    if n == 31:\n        return '0'\n    if n == 32:\n        return '0'\n    if n == 33:\n        return '0'\n    if n == 34:\n        return '0'\n    if n == 35:\n        return '0'\n    if n == 36:\n        return '0'\n    if n == 37:\n        return '0'\n    if n == 38:\n        return '0'\n    if n == 39:\n        return '0'\n    if n == 40:\n        return '0'\n    if n == 41:\n        return '0'\n    if n == 42:\n        return '0'\n    if n == 43:\n        return '0'\n    if n == 44:\n        return '0'\n    if n == 45:\n        return '0'\n    if n == 46:\n        return '0'\n    if n == 47:\n        return '0'\n    if n == 48:\n        return '0'\n    if n == 49:\n        return '0'\n    if n == 50:\n        return '0'\n    if n == 51:\n        return '0'\n    if n == 52:\n        return '0'\n    if n == 53:\n        return '0'\n    if n == 54:\n        return '0'\n    if n == 55:\n        return '0'\n    if n == 56:\n        return '0'\n    if n == 57:\n        return '0'\n    if n == 58:\n        return '0'\n    if n == 59:\n        return '0'\n    if n == 60:\n        return '0'\n    if n == 61:\n        return '0'\n    if n == 62:\n        return '0'\n    if n == 63:\n        return '0'\n    if n == 64:\n        return '0'\n    if n == 65:\n        return '0'\n    if n == 66:\n        return '0'\n    if n == 67:\n        return '0'\n    if n == 68:\n        return '0'\n    if n == 69:\n        return '0'\n    if n == 70:\n        return '0'\n    if n == 71:\n        return '0'\n    if n == 72:\n        return '0'\n    if n == 73:\n        return '0'\n    if n == 74:\n        return '0'\n    if n == 75:\n        return '0'\n    if n == 76:\n        return '0'\n    if n == 77:\n        return '0'\n    if n == 78:\n        return '0'\n    if n == 79:\n        return '0'\n    if n == 80:\n        return '0'\n    if n == 81:\n        return '0'\n    if n == 82:\n        return '0'\n    if n == 83:\n        return '0'\n    if n == 84:\n        return '0'\n    if n == 85:\n        return '0'\n    if n == 86:\n        return '0'\n    if n == 87:\n        return '0'\n    if n == 88:\n        return '0'\n    if n == 89:\n        return '0'\n    if n == 90:\n        return '0'\n    if n == 91:\n        return '0'\n    if n == 92:\n        return '0'\n    if n == 93:\n        return '0'\n    if n == 94:\n        return '0'\n    if n == 95:\n        return '0'\n    if n == 96:\n        return '0'\n    if n == 97:\n        return '0'\n    if n == 98:\n        return '0'\n    if n == 99:\n        return '0'\n    if n == 100"
    },
    {
        "number": 3779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = 0\n    for i in range(n):\n        d += a[i] * (10 ** i)\n    for i in range(k):\n        d += a[i] * (10 ** i)\n    print(d)\n    return str(d)\n\ndef"
    },
    {
        "number": 3780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    v1, v2 = map(int, stdin.split())\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if v1 > v2:\n        v1, v"
    },
    {
        "number": 3781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21 = map(int, stdin.split())\n    T = N\n    Taro = [a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21]\n    Jiro = [a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21]\n    for i in range(T):\n        print(Taro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i], end=\" \")\n    print()\n    for i in range(T):\n        print(Taro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i] + Jiro[i],"
    },
    {
        "number": 3782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    Q = int(stdin.split()[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(Q):\n        A.remove(A[-1])\n    A.sort()\n    for _ in range(K):\n        "
    },
    {
        "number": 3783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    people = list(map(int, stdin.split()))\n    people.sort()\n    cost = 0\n    for i in range(n):\n        cost += people[i] * (k ** i)\n    return str(cost)\n\nprint(solution(\"1 1\"))\nprint(solution(\"3 2\"))\nprint(solution(\"1 3\"))\nprint(solution(\"2 3\"))\nprint(solution(\"1 2\"))\nprint(solution(\"1 3\"))\nprint(solution(\"2 3\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"1 3 2\"))\nprint(solution
    },
    {
        "number": 3784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    V = set(map(int, stdin.split()))\n    E = set(map(int, stdin.split()))\n    \n    def is_isomorphic(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_2(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_3(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_4(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_5(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_6(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_7(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_8(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_9(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_10(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_11(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_12(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_13(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_14(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_15(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_16(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_17(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_18(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_19(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_20(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_21(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_22(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_23(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_24(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_25(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_26(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_27(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_28(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_29(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_30(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_31(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_32(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_33(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n    \n    def is_isomorphic_34(u, v):\n        return u == v or (u in V and v in V) or (u in E and v in E)\n"
    },
    {
        "number": 3785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    maze = []\n    for _ in range(n):\n        maze.append(stdin.split())\n    \n    def dfs(x, y, count):\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return\n        if maze[x][y] == '.':\n            return\n        if maze[x][y] == '#':\n            count += 1\n            maze[x][y] = 'X'\n            dfs(x - 1, y, count)\n            dfs(x + 1, y, count)\n            dfs(x, y - 1, count)\n            dfs(x, y + 1, count)\n        \n    dfs(0, 0, 0)\n    for i in range(k):\n        maze[0][i] = '#'\n    for i in range(n):\n        maze[i][0] = '#'\n    for i in range(1, n):\n        for j in range(1, m):\n            maze[i][j] = '#'\n    for i in range(1, n):\n        for j in range(1, m):\n            if maze[i][j] == '.':\n                maze[i][j] = 'X'\n                dfs(i, j, 0)\n    for i in range(n):\n        maze[i][m - 1] = '#'\n    for i in range(m - 2, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if maze[j][i] == '.':\n                maze[j][i] = 'X'\n                dfs(j, i, 0)\n    for i in range(n):\n        maze[i][0] = '#'\n    for i in range(1, n):\n        for j in range(1, m):\n            if maze[i][j] == '.':\n                maze[i][j] = 'X'\n                dfs(i, j, 0)\n    for i in range(n):\n        maze[i][m - 1] = '#'\n    for i in range(m - 2, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if maze[j][i] == '.':\n                maze[j][i] = 'X'\n                dfs(j, i, 0)\n    for i in range(n):\n        maze[i][0] = '#'\n    for i in range(1, n):\n        for j in range(1, m):\n            if maze[i][j] == '.':\n                maze[i][j] = 'X'\n                dfs(i, j, 0)\n    for i in range(n):\n        maze[i][m - 1] = '#'\n    for i in range(m - 2, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if maze[j][i] == '.':\n                maze[j][i] = 'X'\n                dfs(j, i, 0)\n    for i in range(n):\n        maze[i][0] = '#'\n    for i in range(1, n):\n        for j in range(1, m):\n            if maze[i][j] == '.':\n                maze[i][j] = 'X'\n                dfs(i, j, 0)\n    for i in range(n):\n        maze[i][m - 1] = '#'\n    for i in range(m - 2, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if maze[j][i] == '.':\n                maze[j][i] = 'X'\n                dfs(j, i, 0)\n    for i in range(n):\n        maze[i][0] = '#'\n    for i in range(1, n):\n        for j in range(1, m):\n            if maze[i][j] == '.':\n                maze[i][j] = 'X'\n                dfs(i, j, 0)\n    for i in range(n):\n        maze[i][m - 1] = '#'\n    for i in range(m - 2, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if maze[j][i] == '.':\n                maze[j][i] = 'X'\n                dfs(j, i, 0)\n    for i in range(n):\n        maze[i][0] = '#'\n    for i in range(1, n):\n        for j in range(1, m):\n            if maze[i][j] == '.':\n                maze[i][j] = 'X'\n                dfs(i, j, 0)\n    for i in range(n):\n        maze[i][m - 1] = '#'\n    for i in range(m - 2, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if maze[j][i] == '.':\n                maze[j][i] = 'X'\n                dfs(j, i, 0)\n    for i in range(n):\n        maze[i][0] = '#'\n    for i in range(1, n):\n        for j in range(1, m):\n            if maze[i][j] == '.':\n                maze[i][j] = 'X'\n                dfs(i, j, 0)\n    for i in range(n):\n        maze[i][m - 1] = '#'\n    for i in range(m - 2, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if maze[j][i] == '.':\n                maze[j][i] = 'X'\n                dfs(j, i, 0)\n    for i in range(n):\n        maze[i][0] = '#'\n    for i in range(1, n):\n        for j in range(1, m):\n            if maze[i][j] == '.':\n                maze[i][j] = 'X'\n                dfs(i, j, 0)\n    for i in range(n):\n        maze[i][m - 1] = '#'\n    for i in range(m - 2, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if maze[j][i] == '.':\n                maze[j][i"
    },
    {
        "number": 3786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p_2, p_3, p_4 = map(int, stdin.strip().split())\n    p_2 -= 1\n    p_3 -= 1\n    p_4 -= 1\n    \n    def count_apples(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_first_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_second_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_third_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_fourth_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_fifth_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_sixth_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_seventh_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_eighth_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_ninth_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_tenth_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_eleventh_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_twelfth_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_thirteenth_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_2 >= 0:\n            if p_2 >= p_3:\n                count += 1\n                p_2 -= p_3\n            else:\n                count += 1\n                p_2 -= p_2\n        return count\n    \n    def count_apples_in_fourteenth_inflorescence(p_2, p_3, p_4):\n        count = 0\n        while p_"
    },
    {
        "number": 3787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,A,B = map(int,stdin.split())\n    if N == 1:\n        return '-1'\n    if N == 2:\n        return str(A) + str(B)\n    if N == 3:\n        return str(A) + str(B) + str(A) + str(B)\n    if N == 4:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 5:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 6:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 7:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 8:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 9:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 10:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str("
    },
    {
        "number": 3788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if a[0] == a[1]:\n        return \"Yes\"\n    if a[0] == a[2]:\n        return \"Yes\"\n    if a[0] == a[3]:\n        return \"Yes\"\n    if a[0] == a[4]:\n        return \"Yes\"\n    if a[0] == a[5]:\n        return \"Yes\"\n    if a[0] == a[6]:\n        return \"Yes\"\n    if a[0] == a[7]:\n        return \"Yes\"\n    if a[0] == a[8]:\n        return \"Yes\"\n    if a[0] == a[9]:\n        return \"Yes\"\n    if a[0] == a[10]:\n        return \"Yes\"\n    if a[0] == a[11]:\n        return \"Yes\"\n    if a[0] == a[12]:\n        return \"Yes\"\n    if a[0] == a[13]:\n        return \"Yes\"\n    if a[0] == a[14]:\n        return \"Yes\"\n    if a[0] == a[15]:\n        return \"Yes\"\n    if a[0] == a[16]:\n        return \"Yes\"\n    if a[0] == a[17]:\n        return \"Yes\"\n    if a[0] == a[18]:\n        return \"Yes\"\n    if a[0] == a[19]:\n        return \"Yes\"\n    if a[0] == a[20]:\n        return \"Yes\"\n    if a[0] == a[21]:\n        return \"Yes\"\n    if a[0] == a[22]:\n        return \"Yes\"\n    if a[0] == a[23]:\n        return \"Yes\"\n    if a[0] == a[24]:\n        return \"Yes\"\n    if a[0] == a[25]:\n        return \"Yes\"\n    if a[0] == a[26]:\n        return \"Yes\"\n    if a[0] == a[27]:\n        return \"Yes\"\n    if a[0] == a[28]:\n        return \"Yes\"\n    if a[0] == a[29]:\n        return \"Yes\"\n    if a[0] == a[30]:\n        return \"Yes\"\n    if a[0] == a[31]:\n        return \"Yes\"\n    if a[0] == a[32]:\n        return \"Yes\"\n    if a[0] == a[33]:\n        return \"Yes\"\n    if a[0] == a[34]:\n        return \"Yes\"\n    if a[0] == a[35]:\n        return \"Yes\"\n    if a[0] == a[36]:\n        return \"Yes\"\n    if a[0] == a[37]:\n        return \"Yes\"\n    if a[0] == a[38]:\n        return \"Yes\"\n    if a[0] == a[39]:\n        return \"Yes\"\n    if a[0] == a[40]:\n        return \"Yes\"\n    if a[0] == a[41]:\n        return \"Yes\"\n    if a[0] == a[42]:\n        return \"Yes\"\n    if a[0] == a[43]:\n        return \"Yes\"\n    if a[0] == a[44]:\n        return \"Yes\"\n    if a[0] == a[45]:\n        return \"Yes\"\n    if a[0] == a[46]:\n        return \"Yes\"\n    if a[0] == a[47]:\n        return \"Yes\"\n    if a[0] == a[48]:\n        return \"Yes\"\n    if a[0] == a[49]:\n        return \"Yes\"\n    if a[0] == a[50]:\n        return \"Yes\"\n    if a[0] == a[51]:\n        return \"Yes\"\n    if a[0] == a[52]:\n        return \"Yes\"\n    if a[0] == a[53]:\n        return \"Yes\"\n    if a[0] == a[54]:\n        return \"Yes\"\n    if a[0] == a[55]:\n        return \"Yes\"\n    if a[0] == a[56]:\n        return \"Yes\"\n    if a[0] == a[57]:\n        return \"Yes\"\n    if a[0] == a[58]:\n        return \"Yes\"\n    if a[0] == a[59]:\n        return \"Yes\"\n    if a[0] == a[60]:\n        return \"Yes\"\n    if a[0] == a[61]:\n        return \"Yes\"\n    if a[0] == a[62]:\n        return \"Yes\"\n    if a[0] == a[63]:\n        return \"Yes\"\n    if a[0] == a[64]:\n        return \"Yes\"\n    if a[0] == a[65]:\n        return \"Yes\"\n    if a[0] == a[66]:\n        return \"Yes\"\n    if a[0] == a[67]:\n        return \"Yes\"\n    if a[0] == a[68]:\n        return \"Yes\"\n    if a[0] == a[69]:\n        return \"Yes\"\n    if a[0] == a[70]:\n        return \"Yes\"\n    if a[0] == a[71]:\n        return \"Yes\"\n    if a[0] == a[72]:\n        return \"Yes\"\n    if a[0] == a[73]:\n        return \"Yes\"\n    if a[0] == a[74]:\n        return \"Yes\"\n    if a[0] == a[75]:\n        return \"Yes\"\n    if a[0] == a[76]:\n        return \"Yes\"\n    if a[0] == a[77]:\n        return \"Yes\"\n    if a[0] == a[78]:\n        return \"Yes\"\n    if a[0] == a[79]:\n        return \"Yes\"\n    if a[0] == a[80]:\n        return \"Yes\"\n    if a[0] == a[81]:\n        return \"Yes\"\n    if a[0] == a[82]:\n        return \"Yes\"\n    if a[0] == a[83]:\n        return \"Yes\"\n    if a[0] == a[84]:\n        return \"Yes\"\n    if a[0] == a[85]:\n        return \"Yes\"\n    if a[0] == a[86]:\n        return \"Yes\"\n    if a[0] == a[87]:\n        return \"Yes\"\n    if a[0] == a[88]:\n        return \"Yes\"\n    if a[0] == a[89]:\n        return \"Yes\"\n    if a["
    },
    {
        "number": 3789,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a_list = list(map(int, stdin.strip().split()))\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    a_list = [a_list[i] for i in range(N)]\n    a_list.sort()\n    "
    },
    {
        "number": 3790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    a_1, a_2 = map(int, stdin.split())\n    a_1 = a_1 - n\n    a_2 = a_2 - T\n    a_1 = sorted(a_1)\n    a_2 = sorted(a_2)\n    if a_1 == a_2:\n        return len(a_1)\n    else:\n        return max(a_1) + max(a_2)\n\ndef"
    },
    {
        "number": 3791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    p_len = len(p)\n    if p_len == 1:\n        return str(0)\n    if p_len == 2:\n        return str(p[1] - p[0])\n    if p_len == 3:\n        return str(p[1] - p[2] - p[0])\n    if p_len == 4:\n        return str(p[1] - p[2] - p[3] - p[0])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 3792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    t = stdin.split()\n    c = 0\n    for i in range(n):\n        for j in range(k):\n            if s[i] == t[j]:\n                c += 1\n    return str(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 3793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"NO\"\n    \n    # find the permutation of the numbers\n    perm = [0] * n\n    for i in range(n):\n        perm[i] = i\n    \n    # find the permutation of the numbers\n    for i in range(n):\n        for j in range(i):\n            if perm[j] > perm[i]:\n                perm[i], perm[j] = perm[j], perm[i]\n    \n    # print the permutation\n    for i in range(n):\n        print(perm[i], end=\" \")\n    \n    return \"YES\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"NO\"\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    if a[0] == a[-1]:\n        return \"NO\"\n    if a[0] == a[1]:\n        return \"YES\"\n    if a[0] == a[-1]:\n        return \"YES\"\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    d = 100\n    return str(min(n, e, d))\n\ndef"
    },
    {
        "number": 3796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 10**9:\n        return \"0\"\n    \n    def is_valid(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_rec(n):\n        if n < 1 or n > 10**9:\n            return False\n        if n % 10 == 0:\n            return True\n        return False\n    \n    def is_valid_rect_rec_rec_"
    },
    {
        "number": 3797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    l_1, r_1, x_1 = map(int, stdin.split())\n    l_2, r_2, x_2 = map(int, stdin.split())\n    l_M, r_M, x_M = map(int, stdin.split())\n    l_1, r_1, x_1 = l_1 - 1, r_1 - 1, x_1 - 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 - 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 + 1, r_1 + 1, x_1 + 1\n    l_2, r_2, x_2 = l_2 + 1, r_2 + 1, x_2 + 1\n    l_M, r_M, x_M = l_M + 1, r_M + 1, x_M + 1\n    l_1, r_1, x_1 = l_1 - 1, r_1 - 1, x_1 - 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 - 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 + 1, r_1 + 1, x_1 + 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 - 1, r_1 - 1, x_1 - 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 - 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 + 1, r_1 + 1, x_1 + 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 - 1, r_1 - 1, x_1 - 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 - 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 + 1, r_1 + 1, x_1 + 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 - 1, r_1 - 1, x_1 - 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 - 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 + 1, r_1 + 1, x_1 + 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 - 1, r_1 - 1, x_1 - 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 + 1, r_1 + 1, x_1 + 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 - 1, r_1 - 1, x_1 - 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 + 1, r_1 + 1, x_1 + 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 - 1, r_1 - 1, x_1 - 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 + 1, r_1 + 1, x_1 + 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 - 1, r_1 - 1, x_1 - 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1, x_2 + 1\n    l_M, r_M, x_M = l_M - 1, r_M - 1, x_M - 1\n    l_1, r_1, x_1 = l_1 + 1, r_1 + 1, x_1 + 1\n    l_2, r_2, x_2 = l_2 - 1, r_2 - 1,"
    },
    {
        "number": 3798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if n < 2 or s < 10:\n        return -1\n    if n % 2 == 0:\n        return f(n // 2, s)\n    else:\n        return f(n // 2, s + n % 2)\n\ndef"
    },
    {
        "number": 3799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if len(s) == 1:\n        return 'First'\n    if len(s) == 2:\n        return 'Second'\n    if len(s) == 3:\n        return 'Second'\n    if len(s) == 4:\n        return 'Second'\n    if len(s) == 5:\n        return 'Second'\n    if len(s) == 6:\n        return 'Second'\n    if len(s) == 7:\n        return 'Second'\n    if len(s) == 8:\n        return 'Second'\n    if len(s) == 9:\n        return 'Second'\n    if len(s) == 10:\n        return 'Second'\n    if len(s) == 11:\n        return 'Second'\n    if len(s) == 12:\n        return 'Second'\n    if len(s) == 13:\n        return 'Second'\n    if len(s) == 14:\n        return 'Second'\n    if len(s) == 15:\n        return 'Second'\n    if len(s) == 16:\n        return 'Second'\n    if len(s) == 17:\n        return 'Second'\n    if len(s) == 18:\n        return 'Second'\n    if len(s) == 19:\n        return 'Second'\n    if len(s) == 20:\n        return 'Second'\n    if len(s) == 21:\n        return 'Second'\n    if len(s) == 22:\n        return 'Second'\n    if len(s) == 23:\n        return 'Second'\n    if len(s) == 24:\n        return 'Second'\n    if len(s) == 25:\n        return 'Second'\n    if len(s) == 26:\n        return 'Second'\n    if len(s) == 27:\n        return 'Second'\n    if len(s) == 28:\n        return 'Second'\n    if len(s) == 29:\n        return 'Second'\n    if len(s) == 30:\n        return 'Second'\n    if len(s) == 31:\n        return 'Second'\n    if len(s) == 32:\n        return 'Second'\n    if len(s) == 33:\n        return 'Second'\n    if len(s) == 34:\n        return 'Second'\n    if len(s) == 35:\n        return 'Second'\n    if len(s) == 36:\n        return 'Second'\n    if len(s) == 37:\n        return 'Second'\n    if len(s) == 38:\n        return 'Second'\n    if len(s) == 39:\n        return 'Second'\n    if len(s) == 40:\n        return 'Second'\n    if len(s) == 41:\n        return 'Second'\n    if len(s) == 42:\n        return 'Second'\n    if len(s) == 43:\n        return 'Second'\n    if len(s) == 44:\n        return 'Second'\n    if len(s) == 45:\n        return 'Second'\n    if len(s) == 46:\n        return 'Second'\n    if len(s) == 47:\n        return 'Second'\n    if len(s) == 48:\n        return 'Second'\n    if len(s) == 49:\n        return 'Second'\n    if len(s) == 50:\n        return 'Second'\n    if len(s) == 51:\n        return 'Second'\n    if len(s) == 52:\n        return 'Second'\n    if len(s) == 53:\n        return 'Second'\n    if len(s) == 54:\n        return 'Second'\n    if len(s) == 55:\n        return 'Second'\n    if len(s) == 56:\n        return 'Second'\n    if len(s) == 57:\n        return 'Second'\n    if len(s) == 58:\n        return 'Second'\n    if len(s) == 59:\n        return 'Second'\n    if len(s) == 60:\n        return 'Second'\n    if len(s) == 61:\n        return 'Second'\n    if len(s) == 62:\n        return 'Second'\n    if len(s) == 63:\n        return 'Second'\n    if len(s) == 64:\n        return 'Second'\n    if len(s) == 65:\n        return 'Second'\n    if len(s) == 66:\n        return 'Second'\n    if len(s) == 67:\n        return 'Second'\n    if len(s) == 68:\n        return 'Second'\n    if len(s) == 69:\n        return 'Second'\n    if len(s) == 70:\n        return 'Second'\n    if len(s) == 71:\n        return 'Second'\n    if len(s) == 72:\n        return 'Second'\n    if len(s) == 73:\n        return 'Second'\n    if len(s) == 74:\n        return 'Second'\n    if len(s) == 75:\n        return 'Second'\n    if len(s) == 76:\n        return 'Second'\n    if len(s) == 77:\n        return 'Second'\n    if len(s) == 78:\n        return 'Second'\n    if len(s) == 79:\n        return 'Second'\n    if len(s) == 80:\n        return 'Second'\n    if len(s) == 81:\n        return 'Second'\n    if len(s) == 82:\n        return 'Second'\n    if len(s) == 83:\n        return 'Second'\n    if len(s) == 84:\n        return 'Second'\n    if len(s) == 85:\n        return 'Second'\n    if len(s) == 86:\n        return 'Second'\n    if len(s) == 87:\n        return 'Second'\n    if len(s) == 88:\n        return 'Second'\n    if len(s) == 89:\n        return 'Second'\n    if len(s) == 90:\n        return 'Second'\n    if len(s) == 91:\n        return 'Second'\n    if len(s) == 92:\n        return 'Second'\n    if len(s) == 93:\n        return 'Second'\n    if len(s) == 94:\n        return 'Second'\n    if len(s) == 95:\n        return 'Second'\n    if len(s) == 96:\n        return 'Second'\n    if len(s) == 97:\n        return 'Second'\n    if len(s) == 98:\n        return 'Second'\n    if len(s) == 99:\n        return 'Second'\n    if len(s) == 100:\n        return 'Second'\n    if len(s) == 101:\n        return 'Second'\n    if len(s) == 102:\n        return 'Second'\n    if len(s) == 103:\n        return 'Second'\n    if len(s) == 104:\n        return 'Second'\n    if len(s) == 105:\n        return 'Second'\n    if len(s) == 106:\n        return 'Second'\n    if len(s) == 107:\n        return 'Second'\n    if len(s) == 108:\n        return 'Second'\n    if len(s) == 109:\n        return 'Second'\n    if len(s) == 110:\n        return 'Second'\n    "
    },
    {
        "number": 3800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(b - a)\n\ndef"
    },
    {
        "number": 3801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    w = [0] * n\n    for i in range(n):\n        w[i] = a[i]\n    for i in range(m):\n        w[a[i]] -= 1\n    for i in range(n):\n        if w[i] == 0:\n            return str(i)\n    return str(n)\n\ndef"
    },
    {
        "number": 3802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, virus = stdin.split()\n    virus = virus.lower()\n    \n    if len(s_1) > len(s_2):\n        return s_1\n    elif len(s_2) > len(s_1):\n        return s_2\n    else:\n        for i in range(len(s_1)):\n            if s_1[i] in virus and s_2[i] in virus:\n                if s_1[i]!= s_2[i]:\n                    return s_1[i:] + s_2[i:]\n                else:\n                    return s_1[i:]\n        return 0\n"
    },
    {
        "number": 3803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    HP, ATK, DEF = map(int, stdin.split())\n    if HP <= 0 or ATK <= 0 or DEF <= 0:\n        return '0'\n    if HP <= 0 or HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0'\n    if HP <= DEF:\n        return '0"
    },
    {
        "number": 3804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    m = n + 1\n    \n    def solve(x, y):\n        if x == y:\n            return 1\n        \n        if x > y:\n            return solve(x, y - 1)\n        \n        return solve(x - 1, y) + solve(x + 1, y)\n    \n    return str(solve(m, t))\n"
    },
    {
        "number": 3805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    plus = []\n    minus = []\n    for i in range(n):\n        plus.append(stdin.strip().split('+'))\n        minus.append(stdin.strip().split('-'))\n    plus = list(map(lambda x: x[0], plus))\n    minus = list(map(lambda x: x[0], minus))\n    plus.sort()\n    minus.sort()\n    if plus == minus:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n-----Constraints-----\n\n0 <= n <= 100000\n\n-----Time Limit: 1.0 seconds per test case -----\n\nExample 1:\n\nInput\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+"
    },
    {
        "number": 3806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = [int(i) for i in stdin.split()]\n    p.sort()\n    answer = 0\n    for i in range(n):\n        answer += abs(p[i] - p[i+1])\n    return str(answer)\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n-10^6 <= stdin[i] <= 10^6\n\n-----Time Limit: 1 second\n-----Memory Limit: 1GB\n\n-----For each test case, you may modify the input, but you don't need to. You may modify the input in-place and you don't need to.\n\"\"\"\n\ndef"
    },
    {
        "number": 3807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m < 1:\n        return \"0\"\n    if m == 1:\n        return \"1\"\n    if m == 2:\n        return \"2\"\n    if m == 3:\n        return \"3\"\n    if m == 4:\n        return \"4\"\n    if m == 5:\n        return \"5\"\n    if m == 6:\n        return \"6\"\n    if m == 7:\n        return \"7\"\n    if m == 8:\n        return \"8\"\n    if m == 9:\n        return \"9\"\n    if m == 10:\n        return \"10\"\n    if m == 11:\n        return \"11\"\n    if m == 12:\n        return \"12\"\n    if m == 13:\n        return \"13\"\n    if m == 14:\n        return \"14\"\n    if m == 15:\n        return \"15\"\n    if m == 16:\n        return \"16\"\n    if m == 17:\n        return \"17\"\n    if m == 18:\n        return \"18\"\n    if m == 19:\n        return \"19\"\n    if m == 20:\n        return \"20\"\n    if m == 21:\n        return \"21\"\n    if m == 22:\n        return \"22\"\n    if m == 23:\n        return \"23\"\n    if m == 24:\n        return \"24\"\n    if m == 25:\n        return \"25\"\n    if m == 26:\n        return \"26\"\n    if m == 27:\n        return \"27\"\n    if m == 28:\n        return \"28\"\n    if m == 29:\n        return \"29\"\n    if m == 30:\n        return \"30\"\n    if m == 31:\n        return \"31\"\n    if m == 32:\n        return \"32\"\n    if m == 33:\n        return \"33\"\n    if m == 34:\n        return \"34\"\n    if m == 35:\n        return \"35\"\n    if m == 36:\n        return \"36\"\n    if m == 37:\n        return \"37\"\n    if m == 38:\n        return \"38\"\n    if m == 39:\n        return \"39\"\n    if m == 40:\n        return \"40\"\n    if m == 41:\n        return \"41\"\n    if m == 42:\n        return \"42\"\n    if m == 43:\n        return \"43\"\n    if m == 44:\n        return \"44\"\n    if m == 45:\n        return \"45\"\n    if m == 46:\n        return \"46\"\n    if m == 47:\n        return \"47\"\n    if m == 48:\n        return \"48\"\n    if m == 49:\n        return \"49\"\n    if m == 50:\n        return \"50\"\n    if m == 51:\n        return \"51\"\n    if m == 52:\n        return \"52\"\n    if m == 53:\n        return \"53\"\n    if m == 54:\n        return \"54\"\n    if m == 55:\n        return \"55\"\n    if m == 56:\n        return \"56\"\n    if m == 57:\n        return \"57\"\n    if m == 58:\n        return \"58\"\n    if m == 59:\n        return \"59\"\n    if m == 60:\n        return \"60\"\n    if m == 61:\n        return \"61\"\n    if m == 62:\n        return \"62\"\n    if m == 63:\n        return \"63\"\n    if m == 64:\n        return \"64\"\n    if m == 65:\n        return \"65\"\n    if m == 66:\n        return \"66\"\n    if m == 67:\n        return \"67\"\n    if m == 68:\n        return \"68\"\n    if m == 69:\n        return \"69\"\n    if m == 70:\n        return \"70\"\n    if m == 71:\n        return \"71\"\n    if m == 72:\n        return \"72\"\n    if m == 73:\n        return \"73\"\n    if m == 74:\n        return \"74\"\n    if m == 75:\n        return \"75\"\n    if m == 76:\n        return \"76\"\n    if m == 77:\n        return \"77\"\n    if m == 78:\n        return \"78\"\n    if m == 79:\n        return \"79\"\n    if m == 80:\n        return \"80\"\n    if m == 81:\n        return \"81\"\n    if m == 82:\n        return \"82\"\n    if m == 83:\n        return \"83\"\n    if m == 84:\n        return \"84\"\n    if m == 85:\n        return \"85\"\n    if m == 86:\n        return \"86\"\n    if m == 87:\n        return \"87\"\n    if m == 88:\n        return \"88\"\n    if m == 89:\n        return \"89\"\n    if m == 90:\n        return \"90\"\n    if m == 91:\n        return \"91\"\n    if m == 92:\n        return \"92\"\n    if m == 93:\n        return \"93\"\n    if m == 94:\n        return \"94\"\n    if m == 95:\n        return \"95\"\n    if m == 96:\n        return \"96\"\n    if m == 97:\n        return \"97\"\n    if m == 98:\n        return \"98\"\n    if m == 99:\n        return \"99\"\n    if m == 100:\n        return \"100\"\n    if m == 101:\n        return \"101\"\n    if m == 102:\n        return \"102\"\n    if m == 103:\n        return \"103\"\n    if m == 104:\n        return \"104\"\n    if m == 105:\n        return \"105\"\n    if m == 106:\n        return \"106\"\n    if m == 107:\n        return \"107\"\n    if m == 108:\n        return \"108\"\n    if m == 109:\n        return \"109\"\n    if m == 110:\n        return \"110\"\n    if m == 111:\n        return \"111\"\n    if m == 112:\n        return \"112\"\n    if m == 113:\n        return \"113\"\n    if m == 114:\n        return \"114\"\n    if m == 115:\n        return \"115\"\n    "
    },
    {
        "number": 3808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"Yes\"\n    if n == 1:\n        return \"No\"\n    if n == 2:\n        return \"Yes\"\n    if n == 3:\n        return \"No\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"No\"\n    if n == 6:\n        return \"Yes\"\n    if n == 7:\n        return \"No\"\n    if n == 8:\n        return \"Yes\"\n    if n == 9:\n        return \"No\"\n    if n == 10:\n        return \"Yes\"\n    if n == 11:\n        return \"No\"\n    if n == 12:\n        return \"Yes\"\n    if n == 13:\n        return \"No\"\n    if n == 14:\n        return \"Yes\"\n    if n == 15:\n        return \"No\"\n    if n == 16:\n        return \"Yes\"\n    if n == 17:\n        return \"No\"\n    if n == 18:\n        return \"Yes\"\n    if n == 19:\n        return \"No\"\n    if n == 20:\n        return \"Yes\"\n    if n == 21:\n        return \"No\"\n    if n == 22:\n        return \"Yes\"\n    if n == 23:\n        return \"No\"\n    if n == 24:\n        return \"Yes\"\n    if n == 25:\n        return \"No\"\n    if n == 26:\n        return \"Yes\"\n    if n == 27:\n        return \"No\"\n    if n == 28:\n        return \"Yes\"\n    if n == 29:\n        return \"No\"\n    if n == 30:\n        return \"Yes\"\n    if n == 31:\n        return \"No\"\n    if n == 32:\n        return \"Yes\"\n    if n == 33:\n        return \"No\"\n    if n == 34:\n        return \"Yes\"\n    if n == 35:\n        return \"No\"\n    if n == 36:\n        return \"Yes\"\n    if n == 37:\n        return \"No\"\n    if n == 38:\n        return \"Yes\"\n    if n == 39:\n        return \"No\"\n    if n == 40:\n        return \"Yes\"\n    if n == 41:\n        return \"No\"\n    if n == 42:\n        return \"Yes\"\n    if n == 43:\n        return \"No\"\n    if n == 44:\n        return \"Yes\"\n    if n == 45:\n        return \"No\"\n    if n == 46:\n        return \"Yes\"\n    if n == 47:\n        return \"No\"\n    if n == 48:\n        return \"Yes\"\n    if n == 49:\n        return \"No\"\n    if n == 50:\n        return \"Yes\"\n    if n == 51:\n        return \"No\"\n    if n == 52:\n        return \"Yes\"\n    if n == 53:\n        return \"No\"\n    if n == 54:\n        return \"Yes\"\n    if n == 55:\n        return \"No\"\n    if n == 56:\n        return \"Yes\"\n    if n == 57:\n        return \"No\"\n    if n == 58:\n        return \"Yes\"\n    if n == 59:\n        return \"No\"\n    if n == 60:\n        return \"Yes\"\n    if n == 61:\n        return \"No\"\n    if n == 62:\n        return \"Yes\"\n    if n == 63:\n        return \"No\"\n    if n == 64:\n        return \"Yes\"\n    if n == 65:\n        return \"No\"\n    if n == 66:\n        return \"Yes\"\n    if n == 67:\n        return \"No\"\n    if n == 68:\n        return \"Yes\"\n    if n == 69:\n        return \"No\"\n    if n == 70:\n        return \"Yes\"\n    if n == 71:\n        return \"No\"\n    if n == 72:\n        return \"Yes\"\n    if n == 73:\n        return \"No\"\n    if n == 74:\n        return \"Yes\"\n    if n == 75:\n        return \"No\"\n    if n == 76:\n        return \"Yes\"\n    if n == 77:\n        return \"No\"\n    if n == 78:\n        return \"Yes\"\n    if n == 79:\n        return \"No\"\n    if n == 80:\n        return \"Yes\"\n    if n == 81:\n        return \"No\"\n    if n == 82:\n        return \"Yes\"\n    if n == 83:\n        return \"No\"\n    if n == 84:\n        return \"Yes\"\n    if n == 85:\n        return \"No\"\n    if n == 86:\n        return \"Yes\"\n    if n == 87:\n        return \"No\"\n    if n == 88:\n        return \"Yes\"\n    if n == 89:\n        return \"No\"\n    if n == 90:\n        return \"Yes\"\n    if n == 91:\n        return \"No\"\n    if n == 92:\n        return \"Yes\"\n    if n == 93:\n        return \"No\"\n    if n == 94:\n        return \"Yes\"\n    if n == 95:\n        return \"No\"\n    if n == 96:\n        return \"Yes\"\n    if n == 97:\n        return \"No\"\n    if n == 98:\n        return \"Yes\"\n    if n == 99:\n        return \"No\"\n    if n == 100:\n        return \"Yes\"\n    if n == 101:\n        return \"No\"\n    if n == 102:\n        return \"Yes\"\n    if n == 103:\n        return \"No\"\n    if n == 104:\n        return \"Yes\"\n    if n == 105:\n        return \"No\"\n    if n == 106:\n        return \"Yes\"\n    if n == 107:\n        return \"No\"\n    if n == 108:\n        return \"Yes\"\n    if n == 109:\n        return \"No\"\n    if n == 110:\n        return \"Yes\"\n    if n == 111:\n        return \"No\"\n    if n == 112:\n        return \"Yes\"\n    if n == 113:\n        return \"No\"\n    if n == 114:\n        return \"Yes\"\n    if n == 115:\n        return \"No\"\n    if n == 116:\n        return \"Yes\"\n    if n == 117:\n        return \"No\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    people = list(map(int, stdin.split()))\n    people.sort()\n    \n    def solution(people, k):\n        if k == 0:\n            return 0\n        \n        if len(people) == 1:\n            return 1\n        \n        if people[0] == people[-1]:\n            return solution(people[1:-1], k - 1)\n        \n        return solution(people[1:-1], k) + solution(people[1:-1], k - 1)\n    \n    return str(solution(people, k))\n\n-----Constraints-----\n\n1 <= n <= 50\n1 <= k <= 5000\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 GB\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-rides-to-transport-everyone-to-the-other-bank/\n\n-----Alternatives\n\nhttps://www."
    },
    {
        "number": 3810,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    piles = [int(stdin) for _ in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles = [piles[i] for i in range(n)]\n    piles.sort()\n    piles"
    },
    {
        "number": 3811,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n        else:\n            print(a[i] * b[i])\n            return\n    print(-1)\n    return\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a[i] <= 10^9\n1 <= b[i] <= 10^9\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nMemory Limit: 1 MB\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time"
    },
    {
        "number": 3812,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip().split()\n    t = stdin.strip().split()\n    \n    for i in range(n):\n        s[i], t[i] = t[i], s[i]\n    \n    return ''.join(s)\n"
    },
    {
        "number": 3813,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37, P_38, P_39, P_40, P_41, P_42, P_43, P_44, P_45, P_46, P_47, P_48, P_49, P_50, P_51, P_52, P_53, P_54, P_55, P_56, P_57, P_58, P_59, P_60, P_61, P_62, P_63, P_64, P_65, P_66, P_67, P_68, P_69, P_70, P_71, P_72, P_73, P_74, P_75, P_76, P_77, P_78, P_79, P_80, P_81, P_82, P_83, P_84, P_85, P_86, P_87, P_88, P_89, P_90, P_91, P_92, P_93, P_94, P_95, P_96, P_97, P_98, P_99, P_100, P_101, P_102, P_103, P_104, P_105, P_106, P_107, P_108, P_109, P_110, P_111, P_112, P_113, P_114, P_115, P_116, P_117, P_118, P_119, P_120, P_121, P_122, P_123, P_124, P_125, P_126, P_127, P_128, P_129, P_130, P_131, P_132, P_133, P_134, P_135, P_136, P_137, P_138, P_139, P_140, P_141, P_142, P_143, P_144, P_145, P_146, P_147, P_148, P_149, P_150, P_151, P_152, P_153, P_154, P_155, P_156, P_157, P_158, P_159, P_160, P_161, P_162, P_163, P_164, P_165, P_166, P_167, P_168, P_169, P_170, P_171, P_172, P_173, P_174, P_175, P_176, P_177, P_178, P_179, P_180, P_181, P_182, P_183, P_184, P_185, P_186, P_187, P_188, P_189, P_190, P_191, P_192, P_193, P_194, P_195, P_196, P_197, P_198, P_199, P_200, P_201, P_202, P_203, P_204, P_205, P_206, P_207, P_208, P_209, P_210, P_211, P_212, P_213, P_214, P_215, P_216, P_217, P_218, P_219, P_220, P_221, P_222, P_223, P_224, P_225, P_226, P_227, P_228, P_229, P_230, P_231, P_232, P_233, P_234, P_235, P_236, P_237, P_238, P_239, P_240, P_241, P_242, P_243, P_244, P_245, P_246, P_247, P_248, P_249, P_250, P_251, P_252, P_253, P_254, P_255, P_256, P_257, P_258, P_259, P_260, P_261, P_262, P_263, P_264, P_265, P_266, P_267, P_268, P_269, P_270, P_271, P_272, P_273, P_274, P_275, P_276, P_277, P_278, P_279, P_280, P_281, P_282, P_283, P_284, P_285, P_286, P_287, P_288, P_289, P_290, P_291, P_292, P_293, P_294, P_295, P_296, P_297, P_298, P_299, P_300, P_301, P_302, P_303, P_304, P_305, P_306, P_307, P_308, P_309, P_310, P_311, P_312, P_313, P_314, P_315, P_316, P_317, P_318, P_319, P_320, P_321, P_322, P_323, P_324, P_325, P_326, P_327, P_328, P_329, P_330, P_331, P_332, P_333, P_334, P_335, P_336, P_337, P_338, P_339, P_340, P_341, P_342, P_343, P_344, P_345, P_346, P_347, P_348, P_349, P_350, P_351, P_352, P_353, P_354, P_355, P_356, P_357, P_358, P_359, P_360, P_361, P_362, P_363, P_364, P_365, P_366, P_367, P_368, P_369, P_370, P_371, P_372, P_373, P_374, P_375, P_376, P_377, P_378, P_379, P_380, P_381, P_382, P_383, P_384, P_385, P_386, P_387, P_388, P_389, P_390, P_391, P_392, P_393, P_394, P_395, P_396, P_397, P_398, P_399, P_400, P_401, P_402, P_403, P_404, P_405, P_"
    },
    {
        "number": 3814,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N > 50 or M > 10**9 + 9:\n        return \"0\"\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"0\"\n    if N == 2:\n        return \"0\"\n    if N == 3:\n        return \"0\"\n    if N == 4:\n        return \"0\"\n    if N == 5:\n        return \"0\"\n    if N == 6:\n        return \"0\"\n    if N == 7:\n        return \"0\"\n    if N == 8:\n        return \"0\"\n    if N == 9:\n        return \"0\"\n    if N == 10:\n        return \"0\"\n    if N == 11:\n        return \"0\"\n    if N == 12:\n        return \"0\"\n    if N == 13:\n        return \"0\"\n    if N == 14:\n        return \"0\"\n    if N == 15:\n        return \"0\"\n    if N == 16:\n        return \"0\"\n    if N == 17:\n        return \"0\"\n    if N == 18:\n        return \"0\"\n    if N == 19:\n        return \"0\"\n    if N == 20:\n        return \"0\"\n    if N == 21:\n        return \"0\"\n    if N == 22:\n        return \"0\"\n    if N == 23:\n        return \"0\"\n    if N == 24:\n        return \"0\"\n    if N == 25:\n        return \"0\"\n    if N == 26:\n        return \"0\"\n    if N == 27:\n        return \"0\"\n    if N == 28:\n        return \"0\"\n    if N == 29:\n        return \"0\"\n    if N == 30:\n        return \"0\"\n    if N == 31:\n        return \"0\"\n    if N == 32:\n        return \"0\"\n    if N == 33:\n        return \"0\"\n    if N == 34:\n        return \"0\"\n    if N == 35:\n        return \"0\"\n    if N == 36:\n        return \"0\"\n    if N == 37:\n        return \"0\"\n    if N == 38:\n        return \"0\"\n    if N == 39:\n        return \"0\"\n    if N == 40:\n        return \"0\"\n    if N == 41:\n        return \"0\"\n    if N == 42:\n        return \"0\"\n    if N == 43:\n        return \"0\"\n    if N == 44:\n        return \"0\"\n    if N == 45:\n        return \"0\"\n    if N == 46:\n        return \"0\"\n    if N == 47:\n        return \"0\"\n    if N == 48:\n        return \"0\"\n    if N == 49:\n        return \"0\"\n    if N == 50:\n        return \"0\"\n    if N == 51:\n        return \"0\"\n    if N == 52:\n        return \"0\"\n    if N == 53:\n        return \"0\"\n    if N == 54:\n        return \"0\"\n    if N == 55:\n        return \"0\"\n    if N == 56:\n        return \"0\"\n    if N == 57:\n        return \"0\"\n    if N == 58:\n        return \"0\"\n    if N == 59:\n        return \"0\"\n    if N == 60:\n        return \"0\"\n    if N == 61:\n        return \"0\"\n    if N == 62:\n        return \"0\"\n    if N == 63:\n        return \"0\"\n    if N == 64:\n        return \"0\"\n    if N == 65:\n        return \"0\"\n    if N == 66:\n        return \"0\"\n    if N == 67:\n        return \"0\"\n    if N == 68:\n        return \"0\"\n    if N == 69:\n        return \"0\"\n    if N == 70:\n        return \"0\"\n    if N == 71:\n        return \"0\"\n    if N == 72:\n        return \"0\"\n    if N == 73:\n        return \"0\"\n    if N == 74:\n        return \"0\"\n    if N == 75:\n        return \"0\"\n    if N == 76:\n        return \"0\"\n    if N == 77:\n        return \"0\"\n    if N == 78:\n        return \"0\"\n    if N == 79:\n        return \"0\"\n    if N == 80:\n        return \"0\"\n    if N == 81:\n        return \"0\"\n    if N == 82:\n        return \"0\"\n    if N == 83:\n        return \"0\"\n    if N == 84:\n        return \"0\"\n    if N == 85:\n        return \"0\"\n    if N == 86:\n        return \"0\"\n    if N == 87:\n        return \"0\"\n    if N == 88:\n        return \"0\"\n    if N == 89:\n        return \"0\"\n    if N == 90:\n        return \"0\"\n    if N == 91:\n        return \"0\"\n    if N == 92:\n        return \"0\"\n    if N == 93:\n        return \"0\"\n    if N == 94:\n        return \"0\"\n    if N == 95:\n        return \"0\"\n    if N == 96:\n        return \"0\"\n    if N == 97:\n        return \"0\"\n    if N == 98:\n        return \"0\"\n    if N == 99:\n        return \"0\"\n    if N == 100:\n        return \"0\"\n    if N == 101:\n        return \"0\"\n    if N == 102:\n        return \"0\"\n    if N == 103:\n        return \"0\"\n    if N == 104:\n        return \"0\"\n    if N == 105:\n        return \"0\"\n    if N == 106:\n        return \"0\"\n    if N == 107:\n        return \"0\"\n    if N == 108:\n        return \"0\"\n    if N == 109:\n        return \"0\"\n    if N == 110:\n        return \"0\"\n    if N == 111:\n        return \"0\"\n    if N == 112:\n        return \"0\"\n    if N == 113:\n        return \"0\"\n    if N == 114:\n        return \"0\"\n    if N == 115:\n        return \"0\"\n    if N == 116:\n        return \"0\"\n    if N == 117"
    },
    {
        "number": 3815,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = [0] * n\n    for i in range(n):\n        s[i] = int(stdin[i])\n    s[n - 1] = a * s[n - 1] - b\n    for i in range(n - 2, -1, -1):\n        s[i] = s[i + 1] * s[i + 2] - s[i + 2] * s[i + 1]\n    return str(sum(s))\n\ndef"
    },
    {
        "number": 3816,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, l = map(int, stdin.split())\n    if a + b + c > l:\n        return 0\n    if a + b + c == l:\n        return 1\n    if a + b + c == l:\n        return 2\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c == l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return 0\n    if a + b + c > l:\n        return"
    },
    {
        "number": 3817,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0:\n        return str(0)\n    if m == 0:\n        return str(0)\n    if n == 1:\n        return str(1)\n    if m == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if m == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    if m == 3:\n        return str(3)\n    if n == 4:\n        return str(4)\n    if m == 4:\n        return str(4)\n    if n == 5:\n        return str(5)\n    if m == 5:\n        return str(5)\n    if n == 6:\n        return str(6)\n    if m == 6:\n        return str(6)\n    if n == 7:\n        return str(7)\n    if m == 7:\n        return str(7)\n    if n == 8:\n        return str(8)\n    if m == 8:\n        return str(8)\n    if n == 9:\n        return str(9)\n    if m == 9:\n        return str(9)\n    if n == 10:\n        return str(10)\n    if m == 10:\n        return str(10)\n    if n == 11:\n        return str(11)\n    if m == 11:\n        return str(11)\n    if n == 12:\n        return str(12)\n    if m == 12:\n        return str(12)\n    if n == 13:\n        return str(13)\n    if m == 13:\n        return str(13)\n    if n == 14:\n        return str(14)\n    if m == 14:\n        return str(14)\n    if n == 15:\n        return str(15)\n    if m == 15:\n        return str(15)\n    if n == 16:\n        return str(16)\n    if m == 16:\n        return str(16)\n    if n == 17:\n        return str(17)\n    if m == 17:\n        return str(17)\n    if n == 18:\n        return str(18)\n    if m == 18:\n        return str(18)\n    if n == 19:\n        return str(19)\n    if m == 19:\n        return str(19)\n    if n == 20:\n        return str(20)\n    if m == 20:\n        return str(20)\n    if n == 21:\n        return str(21)\n    if m == 21:\n        return str(21)\n    if n == 22:\n        return str(22)\n    if m == 22:\n        return str(22)\n    if n == 23:\n        return str(23)\n    if m == 23:\n        return str(23)\n    if n == 24:\n        return str(24)\n    if m == 24:\n        return str(24)\n    if n == 25:\n        return str(25)\n    if m == 25:\n        return str(25)\n    if n == 26:\n        return str(26)\n    if m == 26:\n        return str(26)\n    if n == 27:\n        return str(27)\n    if m == 27:\n        return str(27)\n    if n == 28:\n        return str(28)\n    if m == 28:\n        return str(28)\n    if n == 29:\n        return str(29)\n    if m == 29:\n        return str(29)\n    if n == 30:\n        return str(30)\n    if m == 30:\n        return str(30)\n    if n == 31:\n        return str(31)\n    if m == 31:\n        return str(31)\n    if n == 32:\n        return str(32)\n    if m == 32:\n        return str(32)\n    if n == 33:\n        return str(33)\n    if m == 33:\n        return str(33)\n    if n == 34:\n        return str(34)\n    if m == 34:\n        return str(34)\n    if n == 35:\n        return str(35)\n    if m == 35:\n        return str(35)\n    if n == 36:\n        return str(36)\n    if m == 36:\n        return str(36)\n    if n == 37:\n        return str(37)\n    if m == 37:\n        return str(37)\n    if n == 38:\n        return str(38)\n    if m == 38:\n        return str(38)\n    if n == 39:\n        return str(39)\n    if m == 39:\n        return str(39)\n    if n == 40:\n        return str(40)\n    if m == 40:\n        return str(40)\n    if n == 41:\n        return str(41)\n    if m == 41:\n        return str(41)\n    if n == 42:\n        return str(42)\n    if m == 42:\n        return str(42)\n    if n == 43:\n        return str(43)\n    if m == 43:\n        return str(43)\n    if n == 44:\n        return str(44)\n    if m == 44:\n        return str(44)\n    if n == 45:\n        return str(45)\n    if m == 45:\n        return str(45)\n    if n == 46:\n        return str(46)\n    if m == 46:\n        return str(46)\n    if n == 47:\n        return str(47)\n    if m == 47:\n        return str(47)\n    if n == 48:\n        return str(48)\n    if m == 48:\n        return str(48)\n    if n == 49:\n        return str(49)\n    if m == 49:\n        return str(49)\n    if n == 50:\n        return str(50)\n    if m == 50:\n        return str(50)\n    if n == 51:\n        return str(51)\n    if m == 51:\n        return str(51)\n    if n == 52:\n        return str(52)\n    if m == 52:\n        return str(52)\n    if n == 53:\n        return str(53)\n    if m == 53:\n        return str(53)\n    if n == 54:\n        return str(54)\n    if m == 54:\n        return str(54)\n    if n == 55:\n        return str(55)\n    if m == 55:\n        return str(55)\n    if n == 56:\n        return str(56)\n    if m == 56:\n        return str(56)\n    if n == 57:\n        return str(57)\n    if m == 57:\n        return str(57)\n    if n == 58:\n        return str(58)\n    if m == 58:\n        return str(58)\n    "
    },
    {
        "number": 3818,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a_1 = list(map(int, stdin.strip().split()))\n    b_1 = list(map(int, stdin.strip().split()))\n    a_1.sort()\n    b_1.sort()\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a_1 + [N]\n    b_1 = [0] + b_1 + [N]\n    a_1 = [0] + a"
    },
    {
        "number": 3819,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    a.append(0)\n    b.append(0)\n    a.extend(b)\n    a.sort()\n    b.sort()\n    a.extend(b)\n    a.sort()\n    b.sort()\n    a.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.extend(b)\n    a.sort()\n    b.ext"
    },
    {
        "number": 3820,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()\n    t = stdin.split()\n    if len(s)!= len(t):\n        return \"NO\"\n    for i in range(len(s)):\n        if s[i] == '*':\n            s[i] = '?'\n    for i in range(len(t)):\n        if t[i] == '*':\n            t[i] = '?'\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            s[i] = '?'\n    if len(s) == len(t):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(float, stdin.split())\n    if n == 0:\n        return str(0)\n    if n == 1:\n        return str(p)\n    if n == 2:\n        return str(p*(1-p))\n    if n == 3:\n        return str(p*(1-p)*(1-p))\n    if n == 4:\n        return str(p*(1-p)*(1-p)*(1-p))\n    if n == 5:\n        return str(p*(1-p)*(1-p)*(1-p)*(1-p)*(1-p))\n    if n == 6:\n        return str(p*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p))\n    if n == 7:\n        return str(p*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p))\n    if n == 8:\n        return str(p*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1-p)*(1"
    },
    {
        "number": 3822,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, v_1, v_2, k = map(int, stdin.split())\n    \n    if n == 1:\n        return str(l)\n    \n    if l == 0:\n        return str(v_1)\n    \n    if l == 1:\n        return str(v_2)\n    \n    if l == 2:\n        return str(k)\n    \n    if l == 3:\n        return str(v_1 + v_2)\n    \n    if l == 4:\n        return str(k)\n    \n    if l == 5:\n        return str(v_1 + v_2 + k)\n    \n    if l == 6:\n        return str(v_1 + v_2 + k + l)\n    \n    if l == 7:\n        return str(v_1 + v_2 + k + l + n)\n    \n    if l == 8:\n        return str(v_1 + v_2 + k + l + n + l)\n    \n    if l == 9:\n        return str(v_1 + v_2 + k + l + n + l + n)\n    \n    if l == 10:\n        return str(v_1 + v_2 + k + l + n + l + n + n)\n    \n    if l == 11:\n        return str(v_1 + v_2 + k + l + n + l + n + n + n)\n    \n    if l == 12:\n        return str(v_1 + v_2 + k + l + n + l + n + n + n + n)\n    \n    if l == 13:\n        return str(v_1 + v_2 + k + l + n + l + n + n + n + n + n)\n    \n    if l == 14:\n        return str(v_1 + v_2 + k + l + n + l + n + n + n + n + n + n + n)\n    \n    if l == 15:\n        return str(v_1 + v_2 + k + l + n + l + n + n + n + n + n + n + n + n + n + n)\n    \n    if l == 16:\n        return str(v_1 + v_2 + k + l + n + l + n + n + n + n + n + n + n + n + n + n + n + n + n + n)\n    \n    if l == 17:\n        return str(v_1 + v_2 + k + l + n + l + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n)\n    \n    if l == 18:\n        return str(v_1 + v_2 + k + l + n + l + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n"
    },
    {
        "number": 3823,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(float, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    a = [abs(a[i] - a[i+1]) for i in range(n-1)]\n    a = sum(a)\n    return str(a)\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= a_1, a_2,..., a_2n <= 10000\na_1, a_2,..., a_2n are all real numbers.\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)"
    },
    {
        "number": 3824,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 < x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 < x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 < x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 < x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 < x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x_1 < x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 < y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return \"Yes\"\n        else:\n            return"
    },
    {
        "number": 3825,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n =="
    },
    {
        "number": 3827,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    if n == 0:\n        return \"NO\"\n    \n    if n == 1:\n        return \"YES\"\n    \n    if n == 2:\n        return \"YES\"\n    \n    if n == 3:\n        return \"YES\"\n    \n    if n == 4:\n        return \"YES\"\n    \n    if n == 5:\n        return \"YES\"\n    \n    if n == 6:\n        return \"YES\"\n    \n    if n == 7:\n        return \"YES\"\n    \n    if n == 8:\n        return \"YES\"\n    \n    if n == 9:\n        return \"YES\"\n    \n    if n == 10:\n        return \"YES\"\n    \n    if n == 11:\n        return \"YES\"\n    \n    if n == 12:\n        return \"YES\"\n    \n    if n == 13:\n        return \"YES\"\n    \n    if n == 14:\n        return \"YES\"\n    \n    if n == 15:\n        return \"YES\"\n    \n    if n == 16:\n        return \"YES\"\n    \n    if n == 17:\n        return \"YES\"\n    \n    if n == 18:\n        return \"YES\"\n    \n    if n == 19:\n        return \"YES\"\n    \n    if n == 20:\n        return \"YES\"\n    \n    if n == 21:\n        return \"YES\"\n    \n    if n == 22:\n        return \"YES\"\n    \n    if n == 23:\n        return \"YES\"\n    \n    if n == 24:\n        return \"YES\"\n    \n    if n == 25:\n        return \"YES\"\n    \n    if n == 26:\n        return \"YES\"\n    \n    if n == 27:\n        return \"YES\"\n    \n    if n == 28:\n        return \"YES\"\n    \n    if n == 29:\n        return \"YES\"\n    \n    if n == 30:\n        return \"YES\"\n    \n    if n == 31:\n        return \"YES\"\n    \n    if n == 32:\n        return \"YES\"\n    \n    if n == 33:\n        return \"YES\"\n    \n    if n == 34:\n        return \"YES\"\n    \n    if n == 35:\n        return \"YES\"\n    \n    if n == 36:\n        return \"YES\"\n    \n    if n == 37:\n        return \"YES\"\n    \n    if n == 38:\n        return \"YES\"\n    \n    if n == 39:\n        return \"YES\"\n    \n    if n == 40:\n        return \"YES\"\n    \n    if n == 41:\n        return \"YES\"\n    \n    if n == 42:\n        return \"YES\"\n    \n    if n == 43:\n        return \"YES\"\n    \n    if n == 44:\n        return \"YES\"\n    \n    if n == 45:\n        return \"YES\"\n    \n    if n == 46:\n        return \"YES\"\n    \n    if n == 47:\n        return \"YES\"\n    \n    if n == 48:\n        return \"YES\"\n    \n    if n == 49:\n        return \"YES\"\n    \n    if n == 50:\n        return \"YES\"\n    \n    if n == 51:\n        return \"YES\"\n    \n    if n == 52:\n        return \"YES\"\n    \n    if n == 53:\n        return \"YES\"\n    \n    if n == 54:\n        return \"YES\"\n    \n    if n == 55:\n        return \"YES\"\n    \n    if n == 56:\n        return \"YES\"\n    \n    if n == 57:\n        return \"YES\"\n    \n    if n == 58:\n        return \"YES\"\n    \n    if n == 59:\n        return \"YES\"\n    \n    if n == 60:\n        return \"YES\"\n    \n    if n == 61:\n        return \"YES\"\n    \n    if n == 62:\n        return \"YES\"\n    \n    if n == 63:\n        return \"YES\"\n    \n    if n == 64:\n        return \"YES\"\n    \n    if n == 65:\n        return \"YES\"\n    \n    if n == 66:\n        return \"YES\"\n    \n    if n == 67:\n        return \"YES\"\n    \n    if n == 68:\n        return \"YES\"\n    \n    if n == 69:\n        return \"YES\"\n    \n    if n == 70:\n        return \"YES\"\n    \n    if n == 71:\n        return \"YES\"\n    \n    if n == 72:\n        return \"YES\"\n    \n    if n == 73:\n        return \"YES\"\n    \n    if n == 74:\n        return \"YES\"\n    \n    if n == 75:\n        return \"YES\"\n    \n    if n == 76:\n        return \"YES\"\n    \n    if n == 77:\n        return \"YES\"\n    \n    if n == 78:\n        return \"YES\"\n    \n    if n == 79:\n        return \"YES\"\n    \n    if n == 80:\n        return \"YES\"\n    \n    if n == 81:\n        return \"YES\"\n    \n    if n == 82:\n        return \"YES\"\n    \n    if n == 83:\n        return \"YES\"\n    \n    if n == 84:\n        return \"YES\"\n    \n    if n == 85:\n        return \"YES\"\n    \n    if n == 86:\n        return \"YES\"\n    \n    if n == 87:\n        return \"YES\"\n    \n    if n == 88:\n        return \"YES\"\n    \n    if n == 89:\n        return \"YES\"\n    \n    if n == 90:\n        return \"YES\"\n    \n    if n == 91:\n        return \"YES\"\n    \n    if n == 92:\n        return \"YES\"\n    \n    if n == 93:\n        return \"YES\"\n    \n    if n == 94:\n        return \"YES\"\n    \n    if n == 95:\n        return \"YES\"\n    \n    if n == 96:\n        return \"YES\"\n    \n    if n == 97:\n        return \"YES\"\n    \n    if n == 98:\n        return \"YES\"\n    \n    if n == 99:\n        return \"YES\"\n    \n    if n == 100:\n        return \"YES\"\n    \n    if n == 101:\n        return \"YES\"\n    \n    if n == 102:\n        return \"YES\"\n    \n    if n == 103:\n        return \"YES\"\n    \n    if n == 104:\n        return \"YES\"\n    \n    if n == 105:\n        return \"YES"
    },
    {
        "number": 3828,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = [int(i) for i in stdin.split()]\n    p.sort()\n    return str(p[-1] - p[0])\n\nInput\n5\n4 1 2 5 3\n\nOutput\n2\n\nInput\n4\n4 1 3 2\n\nOutput\n2\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n1 \u2264 p[i] \u2264 n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3829,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    return str(int(round(m * n / (m + n))))\n\ndef"
    },
    {
        "number": 3830,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip().split('<'))\n    s.sort()\n    answer = 0\n    for i in range(n):\n        if s[i] == '<':\n            answer += 1\n        elif s[i] == '>':\n            answer -= 1\n        elif s[i] == '-':\n            answer += 1\n            s[i] = '<'\n    return str(answer)\n\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))"
    },
    {
        "number": 3831,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = list(map(int, stdin.strip().split()))\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n    l = [l[i] for i in range(n)]\n    l.sort()\n"
    },
    {
        "number": 3832,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 2 == 1:\n        "
    },
    {
        "number": 3833,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = stdin.split()\n    s = list(map(int, s))\n    t = list(map(int, t))\n    s.sort()\n    t.sort()\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[-1]:\n        return '0'\n    if s[-1] == t[0]:\n        return '0'\n    if s[0] == t[-1]:\n        return '0'\n    if s[-1] == t[0]:\n        return '0'\n    if s[0] == t[-1]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n        return '0'\n    if s[0] == t[0]:\n        return '0'\n    if s[-1] == t[-1]:\n"
    },
    {
        "number": 3834,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(k):\n                    if a[i][j] == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    "
    },
    {
        "number": 3835,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a = [str(i) for i in a]\n    a = ''.join(a)\n    a = a.replace('0','')\n    a = a.replace('9','')\n    a = a.replace('-','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n    a = a.replace(' ','')\n"
    },
    {
        "number": 3836,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    \n    people = []\n    for _ in range(n):\n        people.append(stdin.split())\n    \n    people = sorted(people, key=lambda x: int(x[0]))\n    \n    people = sorted(people, key=lambda x: int(x[1]))\n    \n    people = sorted(people, key=lambda x: int(x[2]))\n    \n    people = sorted(people, key=lambda x: int(x[3]))\n    \n    people = sorted(people, key=lambda x: int(x[4]))\n    \n    people = sorted(people, key=lambda x: int(x[5]))\n    \n    people = sorted(people, key=lambda x: int(x[6]))\n    \n    people = sorted(people, key=lambda x: int(x[7]))\n    \n    people = sorted(people, key=lambda x: int(x[8]))\n    \n    people = sorted(people, key=lambda x: int(x[9]))\n    \n    people = sorted(people, key=lambda x: int(x[10]))\n    \n    people = sorted(people, key=lambda x: int(x[11]))\n    \n    people = sorted(people, key=lambda x: int(x[12]))\n    \n    people = sorted(people, key=lambda x: int(x[13]))\n    \n    people = sorted(people, key=lambda x: int(x[14]))\n    \n    people = sorted(people, key=lambda x: int(x[15]))\n    \n    people = sorted(people, key=lambda x: int(x[16]))\n    \n    people = sorted(people, key=lambda x: int(x[17]))\n    \n    people = sorted(people, key=lambda x: int(x[18]))\n    \n    people = sorted(people, key=lambda x: int(x[19]))\n    \n    people = sorted(people, key=lambda x: int(x[20]))\n    \n    people = sorted(people, key=lambda x: int(x[21]))\n    \n    people = sorted(people, key=lambda x: int(x[22]))\n    \n    people = sorted(people, key=lambda x: int(x[23]))\n    \n    people = sorted(people, key=lambda x: int(x[24]))\n    \n    people = sorted(people, key=lambda x: int(x[25]))\n    \n    people = sorted(people, key=lambda x: int(x[26]))\n    \n    people = sorted(people, key=lambda x: int(x[27]))\n    \n    people = sorted(people, key=lambda x: int(x[28]))\n    \n    people = sorted(people, key=lambda x: int(x[29]))\n    \n    people = sorted(people, key=lambda x: int(x[30]))\n    \n    people = sorted(people, key=lambda x: int(x[31]))\n    \n    people = sorted(people, key=lambda x: int(x[32]))\n    \n    people = sorted(people, key=lambda x: int(x[33]))\n    \n    people = sorted(people, key=lambda x: int(x[34]))\n    \n    people = sorted(people, key=lambda x: int(x[35]))\n    \n    people = sorted(people, key=lambda x: int(x[36]))\n    \n    people = sorted(people, key=lambda x: int(x[37]))\n    \n    people = sorted(people, key=lambda x: int(x[38]))\n    \n    people = sorted(people, key=lambda x: int(x[39]))\n    \n    people = sorted(people, key=lambda x: int(x[40]))\n    \n    people = sorted(people, key=lambda x: int(x[41]))\n    \n    people = sorted(people, key=lambda x: int(x[42]))\n    \n    people = sorted(people, key=lambda x: int(x[43]))\n    \n    people = sorted(people, key=lambda x: int(x[44]))\n    \n    people = sorted(people, key=lambda x: int(x[45]))\n    \n    people = sorted(people, key=lambda x: int(x[46]))\n    \n    people = sorted(people, key=lambda x: int(x[47]))\n    \n    people = sorted(people, key=lambda x: int(x[48]))\n    \n    people = sorted(people, key=lambda x: int(x[49]))\n    \n    people = sorted(people, key=lambda x: int(x[50]))\n    \n    people = sorted(people, key=lambda x: int(x[51]))\n    \n    people = sorted(people, key=lambda x: int(x[52]))\n    \n    people = sorted(people, key=lambda x: int(x[53]))\n    \n    people = sorted(people, key=lambda x: int(x[54]))\n    \n    people = sorted(people, key=lambda x: int(x[55]))\n    \n    people = sorted(people"
    },
    {
        "number": 3837,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    \n    def check(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_2(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_3(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_4(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_5(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_6(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_7(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_8(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_9(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_10(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_11(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_12(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_13(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_14(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_15(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_16(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_17(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i] and a[i] < c[i]:\n                return False\n        return True\n    \n    def check_all_18(a, b, c):\n        for i in range(len(a)):\n            if a[i] < b[i"
    },
    {
        "number": 3838,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    q = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    q.sort()\n    s.sort()\n    if k == 0:\n        return \"YES\"\n    if k == 1:\n        return \"NO\"\n    if k == 2:\n        return \"YES\"\n    if k == 3:\n        return \"NO\"\n    if k == 4:\n        return \"YES\"\n    if k == 5:\n        return \"NO\"\n    if k == 6:\n        return \"YES\"\n    if k == 7:\n        return \"NO\"\n    if k == 8:\n        return \"YES\"\n    if k == 9:\n        return \"NO\"\n    if k == 10:\n        return \"YES\"\n    if k == 11:\n        return \"NO\"\n    if k == 12:\n        return \"YES\"\n    if k == 13:\n        return \"NO\"\n    if k == 14:\n        return \"YES\"\n    if k == 15:\n        return \"NO\"\n    if k == 16:\n        return \"YES\"\n    if k == 17:\n        return \"NO\"\n    if k == 18:\n        return \"YES\"\n    if k == 19:\n        return \"NO\"\n    if k == 20:\n        return \"YES\"\n    if k == 21:\n        return \"NO\"\n    if k == 22:\n        return \"YES\"\n    if k == 23:\n        return \"NO\"\n    if k == 24:\n        return \"YES\"\n    if k == 25:\n        return \"NO\"\n    if k == 26:\n        return \"YES\"\n    if k == 27:\n        return \"NO\"\n    if k == 28:\n        return \"YES\"\n    if k == 29:\n        return \"NO\"\n    if k == 30:\n        return \"YES\"\n    if k == 31:\n        return \"NO\"\n    if k == 32:\n        return \"YES\"\n    if k == 33:\n        return \"NO\"\n    if k == 34:\n        return \"YES\"\n    if k == 35:\n        return \"NO\"\n    if k == 36:\n        return \"YES\"\n    if k == 37:\n        return \"NO\"\n    if k == 38:\n        return \"YES\"\n    if k == 39:\n        return \"NO\"\n    if k == 40:\n        return \"YES\"\n    if k == 41:\n        return \"NO\"\n    if k == 42:\n        return \"YES\"\n    if k == 43:\n        return \"NO\"\n    if k == 44:\n        return \"YES\"\n    if k == 45:\n        return \"NO\"\n    if k == 46:\n        return \"YES\"\n    if k == 47:\n        return \"NO\"\n    if k == 48:\n        return \"YES\"\n    if k == 49:\n        return \"NO\"\n    if k == 50:\n        return \"YES\"\n    if k == 51:\n        return \"NO\"\n    if k == 52:\n        return \"YES\"\n    if k == 53:\n        return \"NO\"\n    if k == 54:\n        return \"YES\"\n    if k == 55:\n        return \"NO\"\n    if k == 56:\n        return \"YES\"\n    if k == 57:\n        return \"NO\"\n    if k == 58:\n        return \"YES\"\n    if k == 59:\n        return \"NO\"\n    if k == 60:\n        return \"YES\"\n    if k == 61:\n        return \"NO\"\n    if k == 62:\n        return \"YES\"\n    if k == 63:\n        return \"NO\"\n    if k == 64:\n        return \"YES\"\n    if k == 65:\n        return \"NO\"\n    if k == 66:\n        return \"YES\"\n    if k == 67:\n        return \"NO\"\n    if k == 68:\n        return \"YES\"\n    if k == 69:\n        return \"NO\"\n    if k == 70:\n        return \"YES\"\n    if k == 71:\n        return \"NO\"\n    if k == 72:\n        return \"YES\"\n    if k == 73:\n        return \"NO\"\n    if k == 74:\n        return \"YES\"\n    if k == 75:\n        return \"NO\"\n    if k == 76:\n        return \"YES\"\n    if k == 77:\n        return \"NO\"\n    if k == 78:\n        return \"YES\"\n    if k == 79:\n        return \"NO\"\n    if k == 80:\n        return \"YES\"\n    if k == 81:\n        return \"NO\"\n    if k == 82:\n        return \"YES\"\n    if k == 83:\n        return \"NO\"\n    if k == 84:\n        return \""
    },
    {
        "number": 3839,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**9:\n        return \"Error\"\n    n_list = list(map(int, stdin.split()))\n    n_list.sort()\n    n_list = [str(i) for i in n_list]\n    n_list = \"\".join(n_list)\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\"(\", \"\")\n    n_list = n_list.replace(\")\", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\"(\", \"\")\n    n_list = n_list.replace(\")\", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \", \"\")\n    n_list = n_list.replace(\" \","
    },
    {
        "number": 3840,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return -1\n    \n    coins = [int(i) for i in stdin.split()]\n    \n    def solve(n, coins):\n        if n == 0:\n            return 0\n        \n        if n == 1:\n            return coins[0]\n        \n        if coins[n-1] > coins[n-2]:\n            return coins[n-1] + solve(n-1, coins)\n        else:\n            return coins[n-1] + solve(n-2, coins)\n    \n    return solve(n, coins)\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= a_1, a_2,..., a_{n} <= 1000\n\n-----Time Limit: O(n)-----\n\nIn this problem, Polycarpus is a lazy slob. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn this problem, Polycarpus is a greedy scrooge. So he wonders in what minimum number of moves the game can finish.\n\nIn"
    },
    {
        "number": 3841,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return '-1'\n    if n == k:\n        return str(k)\n    if n % k == 0:\n        return str(n // k) + solution(stdin)\n    else:\n        return str(n // k) + solution(stdin) +'' + str(n % k)\n\ndef"
    },
    {
        "number": 3842,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_max = a[-1]\n    b_max = b[-1]\n    a_min = a[0]\n    b_min = b[0]\n    a_diff = abs(a_max - a_min)\n    b_diff = abs(b_max - b_min)\n    if a_diff > b_diff:\n        return str(a_diff)\n    else:\n        return str(b_diff)\n\ndef"
    },
    {
        "number": 3843,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    m = m % 60\n    h.sort()\n    m = m % 60\n    if h[0] == h[1] and m == 0:\n        return '0'\n    if h[0] == h[1] and m == 60:\n        return '0'\n    if h[0] == h[1] and m == 120:\n        return '0'\n    if h[0] == h[1] and m == 180:\n        return '0'\n    if h[0] == h[1] and m == 240:\n        return '0'\n    if h[0] == h[1] and m == 300:\n        return '0'\n    if h[0] == h[1] and m == 360:\n        return '0'\n    if h[0] == h[1] and m == 420:\n        return '0'\n    if h[0] == h[1] and m == 540:\n        return '0'\n    if h[0] == h[1] and m == 600:\n        return '0'\n    if h[0] == h[1] and m == 720:\n        return '0'\n    if h[0] == h[1] and m == 840:\n        return '0'\n    if h[0] == h[1] and m == 960:\n        return '0'\n    if h[0] == h[1] and m == 1080:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0] == h[1] and m == 1440:\n        return '0'\n    if h[0]"
    },
    {
        "number": 3844,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i"
    },
    {
        "number": 3845,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = []\n    for i in range(h):\n        grid.append(stdin[i * w:i * w + w])\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '#':\n                print(j + 1, i + 1)\n            elif grid[i][j] == '.':\n                print(j + 1, i + 1, '.')\n            else:\n                print(j + 1, i + 1, '#')\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n3 3\n##.\n..#\n"
    },
    {
        "number": 3846,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    answer = 0\n    for i in range(n):\n        record = list(map(int, stdin.split()))\n        if record[0] == 1:\n            answer += 1\n        elif record[0] == -1:\n            answer -= 1\n        else:\n            answer += len(record) - 1\n    return str(answer)\n"
    },
    {
        "number": 3847,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    x.sort()\n    x = x[::-1]\n    x = x[:n]\n    x.sort()\n    x = x[::-1]\n    x = x[:m]\n    x.sort()\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]\n    x = x[:m]\n    x = x[::-1]"
    },
    {
        "number": 3848,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin.split()\n    s = [s[i] for i in range(n)]\n    s = ''.join(s)\n    if s == s[::-1]:\n        return 'NO'\n    else:\n        return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3849,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = [list(map(int, input().split())) for _ in range(n)]\n    cards.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(i+1, n):\n            if cards[i][0] == cards[j][0] and cards[i][1] == cards[j][1]:\n                cards[i], cards[j] = cards[j], cards[i]\n    if k == 1:\n        return \"once again\"\n    elif k == 2:\n        return \"tokitsukaze\"\n    else:\n        return \"quailty\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3850,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_len = len(a)\n    b_len = len(b)\n    if a_len < b_len:\n        a, b = b, a\n        a_len, b_len = b_len, a_len\n    if a_len == b_len:\n        if a[0] == b[0]:\n            return str(k * (k + 1) // 2)\n        else:\n            return str(k * (k + 1) // 2) + str(k * (k + 1) // 2)\n    else:\n        if a[0] == b[0]:\n            return str(k * (k + 1) // 2)\n        else:\n            return str(k * (k + 1) // 2) + str(k * (k + 1) // 2) + str(k * (k + 1) // 2)\n"
    },
    {
        "number": 3851,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    x = y = 0\n    for i in range(n):\n        if a[i] < b[i]:\n            x += 1\n        elif a[i] > b[i]:\n            y += 1\n    return str(x) + \" \" + str(y)\n\ndef"
    },
    {
        "number": 3852,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    m = 0\n    for i in range(N):\n        if i == 0:\n            m += 1\n        else:\n            m += a[i]\n    print(m)\n    return str(m)\n\n-----Sample Input-----\n3\n-2 5 -1\n\n-----Sample Output-----\n2\n2 3\n3 3\n\n - After the first operation, a = (-2,5,4).\n - After the second operation, a = (-2,5,8), and the condition is now satisfied.\ndef"
    },
    {
        "number": 3853,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip().split()[0])\n    a = int(stdin.strip().split()[1])\n    \n    if k < 0 or k > 10**9:\n        return \"0\"\n    \n    if a < 0 or a > 10**9:\n        return \"0\"\n    \n    if n == 1:\n        return str(k)\n    \n    if n == 2:\n        return str(k) + str(a)\n    \n    if n == 3:\n        return str(k) + str(a) + str(k)\n    \n    if n == 4:\n        return str(k) + str(a) + str(k) + str(a)\n    \n    if n == 5:\n        return str(k) + str(a) + str(k) + str(a)\n    \n    if n == 6:\n        return str(k) + str(a) + str(k) + str(a) + str(k)\n    \n    if n == 7:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 8:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k)\n    \n    if n == 9:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 10:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k)\n    \n    if n == 11:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 12:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k)\n    \n    if n == 13:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k)\n    \n    if n == 14:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 15:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 16:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 17:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 18:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 19:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 20:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 21:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 22:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 23:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 24:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 25:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a)\n    \n    if n == 26:\n        return str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a) + str(k) + str(a"
    },
    {
        "number": 3854,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    \n    def find_sum(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_2(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_3(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_4(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_5(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_6(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_7(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_8(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_9(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_10(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_11(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_12(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_13(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_14(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_15(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_16(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_17(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_18(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_19(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_20(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_21(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_22(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_23(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_24(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_25(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_26(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_27(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum_28(c, k):\n        sum = 0\n        for i in range(len(c)):\n            sum += c[i]\n            if sum == k:\n                return i\n        return -1\n    \n    def find_sum"
    },
    {
        "number": 3855,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"3\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"1\"\n    elif n == 4:\n        return \"1\"\n    elif n == 5:\n        return \"1\"\n    elif n == 6:\n        return \"1\"\n    else:\n        return \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3856,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    w = list(map(int, stdin.strip().split()))\n    h = list(map(int, stdin.strip().split()))\n    w.sort()\n    h.sort()\n    w = w[::-1]\n    h = h[::-1]\n    area = 0\n    for i in range(n):\n        area += min(w[i], h[i]) * min(w[i], h[i])\n    return str(area)\n"
    },
    {
        "number": 3857,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    piles = []\n    for i in range(n):\n        piles.append(x[i] * (i + 1))\n    piles.sort()\n    return str(len(piles))\n"
    },
    {
        "number": 3858,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    y = [int(i) for i in stdin.split()]\n    x.sort()\n    y.sort()\n    x_n = len(x)\n    y_n = len(y)\n    if x_n == y_n:\n        return str(2**0)\n    if x_n == 1:\n        return str(2**0)\n    if y_n == 1:\n        return str(2**0)\n    if x_n == 1:\n        return str(2**0)\n    if y_n == 1:\n        return str(2**0)\n    if x_n == 2:\n        return str(2**0)\n    if y_n == 2:\n        return str(2**0)\n    if x_n == 3:\n        return str(2**0)\n    if y_n == 3:\n        return str(2**0)\n    if x_n == 4:\n        return str(2**0)\n    if y_n == 4:\n        return str(2**0)\n    if x_n == 5:\n        return str(2**0)\n    if y_n == 5:\n        return str(2**0)\n    if x_n == 6:\n        return str(2**0)\n    if y_n == 6:\n        return str(2**0)\n    if x_n == 7:\n        return str(2**0)\n    if y_n == 7:\n        return str(2**0)\n    if x_n == 8:\n        return str(2**0)\n    if y_n == 8:\n        return str(2**0)\n    if x_n == 9:\n        return str(2**0)\n    if y_n == 9:\n        return str(2**0)\n    if x_n == 10:\n        return str(2**0)\n    if y_n == 10:\n        return str(2**0)\n    if x_n == 11:\n        return str(2**0)\n    if y_n == 11:\n        return str(2**0)\n    if x_n == 12:\n        return str(2**0)\n    if y_n == 12:\n        return str(2**0)\n    if x_n == 13:\n        return str(2**0)\n    if y_n == 13:\n        return str(2**0)\n    if x_n == 14:\n        return str(2**0)\n    if y_n == 14:\n        return str(2**0)\n    if x_n == 15:\n        return str(2**0)\n    if y_n == 15:\n        return str(2**0)\n    if x_n == 16:\n        return str(2**0)\n    if y_n == 16:\n        return str(2**0)\n    if x_n == 17:\n        return str(2**0)\n    if y_n == 17:\n        return str(2**0)\n    if x_n == 18:\n        return str(2**0)\n    if y_n == 18:\n        return str(2**0)\n    if x_n == 19:\n        return str(2**0)\n    if y_n == 19:\n        return str(2**0)\n    if x_n == 20:\n        return str(2**0)\n    if y_n == 20:\n        return str(2**0)\n    if x_n == 21:\n        return str(2**0)\n    if y_n == 21:\n        return str(2**0)\n    if x_n == 22:\n        return str(2**0)\n    if y_n == 22:\n        return str(2**0)\n    if x_n == 23:\n        return str(2**0)\n    if y_n == 23:\n        return str(2**0)\n    if x_n == 24:\n        return str(2**0)\n    if y_n == 24:\n        return str(2**0)\n    if x_n == 25:\n        return str(2**0)\n    if y_n == 25:\n        return str(2**0)\n    if x_n == 26:\n        return str(2**0)\n    if y_n == 26:\n        return str(2**0)\n    if x_n == 27:\n        return str(2**0)\n    if y_n == 27:\n        return str(2**0)\n    if x_n == 28:\n        return str(2**0)\n    if y_n == 28:\n        return str(2**0)\n    if x_n == 29:\n        return str(2**0)\n    if y_n == 29:\n        return str(2**0)\n    if x_n == 30:\n        return str(2**0)\n    if y_n == 30:\n        return str(2**0)\n    if x_n == 31:\n        return str(2**0)\n    if y_n == 31:\n        return str(2**0)\n    if x_n == 32:\n        return str(2**0)\n    if y_n == 32:\n        return str(2**0)\n    if x_n == 33:\n        return str(2**0)\n    if y_n == 33:\n        return str(2**0)\n    if x_n == 34:\n        return str(2**0)\n    if y_n == 34:\n        return str(2**0)\n    if x_n == 35:\n        return str(2**0)\n    if y_n == 35:\n        return str(2**0)\n    if x_n == 36:\n        return str(2**0)\n    if y_n == 36:\n        return str(2**0)\n    if x_n == 37:\n        return str(2**0)\n    if y_n == 37:\n        return str(2**0)\n    if x_n == 38:\n        return str(2**0)\n    if y_n == 38:\n        return str(2**0)\n    if x_n == 39:\n        return str(2**0)\n    if y_n == 39:\n        return str(2**0)\n    if x_n == 40:\n        return str(2**0)\n    if y_n == 40"
    },
    {
        "number": 3859,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, c_1, c_2, c_3 = map(int, stdin.split())\n    a_1, a_2 = map(int, stdin.split())\n    a_3 = c_3 - c_1 - c_2\n    a_2 = c_2 - c_1 - c_3\n    a_3 = c_3 - c_2 - c_1\n    if a_1 == a_2:\n        return str(1)\n    if a_1 == a_3:\n        return str(2)\n    if a_2 == a_3:\n        return str(3)\n    if a_1 == a_3:\n        return str(4)\n    return str(0)\n\n-----Sample Output-----\n3\n0\n0\n0\n\n-----Constraints-----\n - 1 \u2264 N \u2264 2000\n - 1 \u2264 c_1 \u2264 N\n - 1 \u2264 c_2 \u2264 N\n - 1 \u2264 c_3 \u2264 N\n\n-----Input-----\n3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n\n-----Output-----\n4\n\nThe objective can be achieved in four operations, for example, as follows:\n - Swap the black 3 and white 1.\n - Swap the white 1 and white 2.\n - Swap the black 3 and black 2.\n - Swap the black 3 and black 3.\ndef"
    },
    {
        "number": 3860,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, g, n = map(int, stdin.split())\n    if b > g:\n        return str(b - g)\n    if b == g:\n        return str(n)\n    if b == g + n:\n        return str(n)\n    return str(b - g + n)\n\ndef"
    },
    {
        "number": 3861,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:\n        return \"130\"\n    if n == 131:\n        return \"131\"\n    if n == 132:\n        return \"132\"\n    if n == 133:\n        return \"133\"\n    if n == 134:\n        return \"134\"\n    if n == 135:\n        return \"135"
    },
    {
        "number": 3862,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i] for i in range(len(a)) if a[i]!= 0]\n    a = [a[i"
    },
    {
        "number": 3863,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(N):\n        if a[i] == a[i-1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 3864,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [0, 1, 0, 2, 1, 3, 2, 3]\n    w = [0, 1, 0, 2, 1, 3, 2, 3]\n    r = 0\n    for i in range(n):\n        r += b[i] * w[i]\n    return str(r % 998244353)\n\ndef"
    },
    {
        "number": 3865,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10**5:\n        return str(n)\n    else:\n        return str(n) + \"0\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return -1\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n =="
    },
    {
        "number": 3867,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    edges = []\n    for _ in range(n - 1):\n        edges.append(list(map(int, stdin.strip().split())))\n    edges.sort()\n    q = []\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            q.append(i)\n            visited[i] = True\n            while q:\n                cur = q.pop(0)\n                for j in range(len(edges[cur])):\n                    if not visited[edges[cur][j]]:\n                        q.append(edges[cur][j])\n                        visited[edges[cur][j]] = True\n    if visited[n - 1]:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3868,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    d = [0] * (n + 1)\n    f = [0] * (n + 1)\n    t = [0] * (n + 1)\n    c = [0] * (n + 1)\n    for i in range(1, n + 1):\n        d[i] = int(stdin[i - 1])\n        f[i] = int(stdin[i])\n        t[i] = int(stdin[i + 1])\n        c[i] = int(stdin[i + 2])\n    \n    for i in range(k):\n        d[d[f[i]]] = f[i]\n        f[d[f[i]]] = t[i]\n        t[d[f[i]]] = c[i]\n    \n    for i in range(1, n + 1):\n        if d[i] == 0:\n            return \"-1\"\n        \n        if d[i] == 1:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 2:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 3:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 4:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 5:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 6:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 7:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 8:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 9:\n            d[i] = 0\n            c[i] = 0\n            \n    for i in range(1, n + 1):\n        if d[i] == 0:\n            return \"-1\"\n        \n        if d[i] == 1:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 2:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 3:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 4:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 5:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 6:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 7:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 8:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 9:\n            d[i] = 0\n            c[i] = 0\n            \n    for i in range(1, n + 1):\n        if d[i] == 0:\n            return \"-1\"\n        \n        if d[i] == 1:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 2:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 3:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 4:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 5:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 6:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 7:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 8:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 9:\n            d[i] = 0\n            c[i] = 0\n            \n    for i in range(1, n + 1):\n        if d[i] == 0:\n            return \"-1\"\n        \n        if d[i] == 1:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 2:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 3:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 4:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 5:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 6:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] == 7:\n            d[i] = 0\n            c[i] = 0\n            \n        if d[i] =="
    },
    {
        "number": 3869,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, \u03b1 = map(int, stdin.split())\n    if w == h:\n        return str(abs(w * h * (1/2)))\n    else:\n        return str(abs(w * h * (1/2) - (w * h)))\n\ndef"
    },
    {
        "number": 3870,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cards = []\n    for _ in range(n):\n        cards.append(list(map(int, stdin.split())))\n    \n    def get_attack(cards):\n        attack = 0\n        for i in range(len(cards)):\n            if cards[i][0] == \"ATK\":\n                attack += cards[i][1]\n            elif cards[i][0] == \"DEF\":\n                attack -= cards[i][1]\n        return attack\n    \n    def get_defense(cards):\n        defense = 0\n        for i in range(len(cards)):\n            if cards[i][0] == \"DEF\":\n                defense += cards[i][1]\n            elif cards[i][0] == \"ATK\":\n                defense -= cards[i][1]\n        return defense\n    \n    def get_strength(cards):\n        strength = 0\n        for i in range(len(cards)):\n            if cards[i][0] == \"DEF\":\n                strength += cards[i][1]\n            elif cards[i][0] == \"ATK\":\n                strength -= cards[i][1]\n        return strength\n    \n    def get_attack_defense(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack + defense - strength\n    \n    def get_attack_strength(cards):\n        attack = get_attack(cards)\n        strength = get_strength(cards)\n        return attack - strength\n    \n    def get_attack_defense_strength(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):\n        attack = get_attack(cards)\n        defense = get_defense(cards)\n        strength = get_strength(cards)\n        return attack - defense - strength\n    \n    def get_attack_defense_strength_max_max_max_max(cards):"
    },
    {
        "number": 3871,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l_i = list(map(int, stdin.split()))\n    s_i = list(map(int, stdin.split()))\n    c_i = list(map(int, stdin.split()))\n    \n    l_i.sort()\n    s_i.sort()\n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(n)\n    \n    c_i.insert(0, 0)\n    c_i.append(m)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)\n    \n    c_i.sort()\n    \n    c_i.insert(0, 0)\n    c_i.append(0)"
    },
    {
        "number": 3872,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = a.lower()\n    b = b.lower()\n    if a == b:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n    \n    permutation = list(map(int, stdin.split()))\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if permutation[i] < permutation[j]:\n                permutation[i], permutation[j] = permutation[j], permutation[i]\n    \n    return \"YES\" if permutation == sorted(permutation) else \"NO\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    files = []\n    for i in range(n):\n        files.append(stdin[i].strip())\n    files.sort()\n    for i in range(m):\n        if files[i] == \"*\":\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i)\n            files.pop(i"
    },
    {
        "number": 3875,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    ans = 0\n    for i in range(N):\n        if A[i] == X:\n            ans += 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 3876,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x_1, y_1 = map(int, stdin.strip().split())\n    x_2, y_2 = map(int, stdin.strip().split())\n    x_3, y_3 = map(int, stdin.strip().split())\n    x_4, y_4 = map(int, stdin.strip().split())\n    x_5, y_5 = map(int, stdin.strip().split())\n    x_6, y_6 = map(int, stdin.strip().split())\n    x_7, y_7 = map(int, stdin.strip().split())\n    x_8, y_8 = map(int, stdin.strip().split())\n    x_9, y_9 = map(int, stdin.strip().split())\n    x_10, y_10 = map(int, stdin.strip().split())\n    x_11, y_11 = map(int, stdin.strip().split())\n    x_12, y_12 = map(int, stdin.strip().split())\n    x_13, y_13 = map(int, stdin.strip().split())\n    x_14, y_14 = map(int, stdin.strip().split())\n    x_15, y_15 = map(int, stdin.strip().split())\n    x_16, y_16 = map(int, stdin.strip().split())\n    x_17, y_17 = map(int, stdin.strip().split())\n    x_18, y_18 = map(int, stdin.strip().split())\n    x_19, y_19 = map(int, stdin.strip().split())\n    x_20, y_20 = map(int, stdin.strip().split())\n    x_21, y_21 = map(int, stdin.strip().split())\n    x_22, y_22 = map(int, stdin.strip().split())\n    x_23, y_23 = map(int, stdin.strip().split())\n    x_24, y_24 = map(int, stdin.strip().split())\n    x_25, y_25 = map(int, stdin.strip().split())\n    x_26, y_26 = map(int, stdin.strip().split())\n    x_27, y_27 = map(int, stdin.strip().split())\n    x_28, y_28 = map(int, stdin.strip().split())\n    x_29, y_29 = map(int, stdin.strip().split())\n    x_30, y_30 = map(int, stdin.strip().split())\n    x_31, y_31 = map(int, stdin.strip().split())\n    x_32, y_32 = map(int, stdin.strip().split())\n    x_33, y_33 = map(int, stdin.strip().split())\n    x_34, y_34 = map(int, stdin.strip().split())\n    x_35, y_35 = map(int, stdin.strip().split())\n    x_36, y_36 = map(int, stdin.strip().split())\n    x_37, y_37 = map(int, stdin.strip().split())\n    x_38, y_38 = map(int, stdin.strip().split())\n    x_39, y_39 = map(int, stdin.strip().split())\n    x_40, y_40 = map(int, stdin.strip().split())\n    x_41, y_41 = map(int, stdin.strip().split())\n    x_42, y_42 = map(int, stdin.strip().split())\n    x_43, y_43 = map(int, stdin.strip().split())\n    x_44, y_44 = map(int, stdin.strip().split())\n    x_45, y_45 = map(int, stdin.strip().split())\n    x_46, y_46 = map(int, stdin.strip().split())\n    x_47, y_47 = map(int, stdin.strip().split())\n    x_48, y_48 = map(int, stdin.strip().split())\n    x_49, y_49 = map(int, stdin.strip().split())\n    x_50, y_50 = map(int, stdin.strip().split())\n    x_51, y_51 = map(int, stdin.strip().split())\n    x_52, y_52 = map(int, stdin.strip().split())\n    x_53, y_53 = map(int, stdin.strip().split())\n    x_54, y_54 = map(int, stdin.strip().split())\n    x_55, y_55 = map(int, stdin.strip().split())\n    x_56, y_56 = map(int, stdin.strip().split())\n    x_57, y_57 = map(int, stdin.strip().split())\n    x_58, y_58 = map(int, stdin.strip().split())\n    x_59, y_59 = map(int, stdin.strip().split())\n    x_60, y_60 = map(int, stdin.strip().split())\n    x_61, y_61 = map(int, stdin.strip().split())\n    x_62, y_62 = map(int, stdin.strip().split())\n    x_63, y_63 = map(int, stdin.strip().split())\n    x_64, y_64 = map(int, stdin.strip().split())\n    x_65, y_65 = map(int, stdin.strip().split())\n    x_66, y_66 = map(int, stdin.strip().split())\n    x_67, y_67 = map(int, stdin.strip().split())\n    x_68, y_68 = map(int, stdin.strip().split())\n    x_69, y_69 = map(int, stdin.strip().split())\n    x_70, y_70 = map(int, stdin.strip().split())\n    x_71, y_71 = map(int, stdin.strip().split())\n    x_72, y_72 = map(int, stdin.strip().split())\n    x_73, y_73 = map(int, stdin.strip().split())\n    x_74, y_74 = map(int, stdin.strip().split())\n    x_75, y_75 = map(int, stdin.strip().split())\n    x_76, y_76 = map(int, stdin.strip().split())\n    "
    },
    {
        "number": 3877,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    if n == 1:\n        return str(1)\n    elif n == 2:\n        return str(2)\n    elif n == 3:\n        return str(3)\n    elif n == 4:\n        return str(4)\n    elif n == 5:\n        return str(5)\n    elif n == 6:\n        return str(6)\n    elif n == 7:\n        return str(7)\n    elif n == 8:\n        return str(8)\n    elif n == 9:\n        return str(9)\n    elif n == 10:\n        return str(10)\n    else:\n        return str(1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 3878,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    u, v = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def dfs(u, v):\n        if u == v:\n            return 0\n        \n        if u not in graph[v]:\n            return -1\n        \n        return dfs(u, v) + 1\n    \n    return str(dfs(u, v))\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 1\nInput\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n\nOutput\n2\n2 3 \n\n-----Example 2\nInput\n4 4\n1 2\n1 3\n1 4\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 3\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 4\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 5\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 6\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 7\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 8\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 9\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 10\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 11\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 12\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 13\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 14\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 15\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 16\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 17\nInput\n4 4\n1 2\n1 3\n2 3\n2 5\n3 4\n\nOutput\n1\n1 \n\n-----Constraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= u, v < n\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 18\n"
    },
    {
        "number": 3879,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    bids = [int(i) for i in stdin.split()]\n    bids.sort()\n    for i in range(n):\n        if i == 0:\n            bids[i] *= 2\n        elif i == 1:\n            bids[i] *= 3\n        else:\n            bids[i] *= 4\n    return \"Yes\" if bids[0] == bids[1] == bids[2] == bids[3] == bids[4] == bids[5] == bids[6] == bids[7] == bids[8] == bids[9] == bids[10] == bids[11] == bids[12] == bids[13] == bids[14] == bids[15] == bids[16] == bids[17] == bids[18] == bids[19] == bids[20] == bids[21] == bids[22] == bids[23] == bids[24] == bids[25] == bids[26] == bids[27] == bids[28] == bids[29] == bids[30] == bids[31] == bids[32] == bids[33] == bids[34] == bids[35] == bids[36] == bids[37] == bids[38] == bids[39] == bids[40] == bids[41] == bids[42] == bids[43] == bids[44] == bids[45] == bids[46] == bids[47] == bids[48] == bids[49] == bids[50] == bids[51] == bids[52] == bids[53] == bids[54] == bids[55] == bids[56] == bids[57] == bids[58] == bids[59] == bids[60] == bids[61] == bids[62] == bids[63] == bids[64] == bids[65] == bids[66] == bids[67] == bids[68] == bids[69] == bids[70] == bids[71] == bids[72] == bids[73] == bids[74] == bids[75] == bids[76] == bids[77] == bids[78] == bids[79] == bids[80] == bids[81] == bids[82] == bids[83] == bids[84] == bids[85] == bids[86] == bids[87] == bids[88] == bids[89] == bids[90] == bids[91] == bids[92] == bids[93] == bids[94] == bids[95] == bids[96] == bids[97] == bids[98] == bids[99] == bids[100] == bids[101] == bids[102] == bids[103] == bids[104] == bids[105] == bids[106] == bids[107] == bids[108] == bids[109] == bids[110] == bids[111] == bids[112] == bids[113] == bids[114] == bids[115] == bids[116] == bids[117] == bids[118] == bids[119] == bids[120] == bids[121] == bids[122] == bids[123] == bids[124] == bids[125] == bids[126] == bids[127] == bids[128] == bids[129] == bids[130] == bids[131] == bids[132] == bids[133] == bids[134] == bids[135] == bids[136] == bids[137] == bids[138] == bids[139] == bids[140] == bids[141] == bids[142] == bids[143] == bids[144] == bids[145] == bids[146] == bids[147] == bids[148] == bids[149] == bids[150] == bids[151] == bids[152] == bids[153] == bids[154] == bids[155] == bids[156] == bids[157] == bids[158] == bids[159] == bids[160] == bids[161] == bids[162] == bids[163] == bids[164] == bids[165] == bids[166] == bids[167] == bids[168] == bids[169] == bids[170] == bids[171] == bids[172] == bids[173] == bids[174] == bids[175] == bids[176] == bids[177] == bids[178] == bids[179] == bids[180] == bids[181] == bids[182] == bids[183] == bids[184] == bids[185] == bids[186] == bids[187] == bids[188] == bids[189] == bids[190] == bids[191] == bids[192] == bids[193] == bids[194] == bids[195] == bids[196] == bids[197] == bids[198] == bids[199] == bids[200] == bids[201] == bids[202] == bids[203] == bids[204] == bids[205] == bids[206] == bids[207] == bids[208] == bids[209] == bids[210] == bids[211] == bids[212] == bids[213] == bids[214] == bids[215] == bids[216] == bids[217] == bids[218] == bids[219] == bids[220] == bids[221] == bids[222] == bids[223] == bids[224] == bids[225] == bids[226] == bids[227] == bids[228] == bids[229] == bids[230] == bids[231] == bids[232] == bids[233] == bids[234] == bids[235] == bids[236] == bids[237] == bids[238] == bids[239] == bids[240] == bids[241] == bids[242] == bids[243] == bids[244] == bids[245] == bids[246] == bids[247] == bids[248] == bids[249] == bids[250] == bids[251] == bids[252] == bids[253] == bids[254] == bids[255] == bids[256] == bids[257] == bids[258] == bids[259] == bids[260] == bids[261] == bids[262] == bids[263] == bids[264] == bids[265] == bids[266] == bids[267] == bids[268] == bids[269] == bids[270] == bids[271] == bids[272] == bids[273] == bids[274] == bids[275] == bids[276] == bids[277] == bids[278] == bids[279] == bids[280] == bids[281] == bids[282] == bids[283] == bids[284] == bids[285] == bids[286] == bids[287] == bids[288] == bids[289] == bids[290] == bids[291] == bids[292] == bids[293] == bids[294] == bids[295] == bids[296] == bids[297] == bids[298] == bids[299] == bids[300] == bids[301] == bids[302] == bids[303] == bids[304] == bids[305] == bids[306] == bids[307] == bids[308] == bids[309] == bids[310] == bids[311] == bids[312] == bids[313] == bids[314] == bids[315] == bids[316] == bids[317] == bids[318] == bids[319] == bids[320] == bids[321] == bids[322] == bids[323] == bids[324] == bids[325"
    },
    {
        "number": 3880,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    max_sum = 0\n    for i in range(n):\n        max_sum += arr[i]\n    for i in range(n):\n        arr[i] = -arr[i]\n    for i in range(n):\n        if arr[i] > 0:\n            max_sum += arr[i]\n    return str(max_sum)\n\n-----Constraints-----\n1 <= n <= 100\n\n-----Time Limit-----\n1 second\n\n-----Divide and Conquer-----\n\n-----Submissions-----\n\n-----Constraints-----\n\n-----Input Format\n\nThe first line contains an integer n (2 \u2264 n \u2264 100). The second line contains (2\u00b7n - 1) integers \u2014 the array elements. The array elements do not exceed 1000 in their absolute value.\n\nThe third line contains an integer, -1, that is the sign of the first two elements.\n\nThe fourth line contains an integer, -100, that is the sign of the first two elements.\n\nThe fifth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe sixth line contains an integer, -1, that is the sign of the first two elements.\n\nThe seventh line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe eighth line contains an integer, -1, that is the sign of the first two elements.\n\nThe ninth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe eleventh line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe eleventh line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe eleventh line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe eleventh line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav can get.\n\nThe tenth line contains an integer, -1, that is the sign of the first two elements.\n\nThe tenth line contains an integer, n, that is the maximum sum that Yaroslav"
    },
    {
        "number": 3881,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = stdin.split()\n    b = []\n    for i in range(q):\n        b.append(a[i])\n        a[i] = a[i][1:]\n    b = ''.join(b)\n    return b\n\ndef"
    },
    {
        "number": 3882,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"10\"\n    if n == 3:\n        return \"10\"\n    if n % 10 == 0:\n        return \"10\"\n    if n % 10 == 1:\n        return \"10\"\n    if n % 10 == 2:\n        return \"10\"\n    if n % 10 == 3:\n        return \"10\"\n    if n % 10 == 4:\n        return \"10\"\n    if n % 10 == 5:\n        return \"10\"\n    if n % 10 == 6:\n        return \"10\"\n    if n % 10 == 7:\n        return \"10\"\n    if n % 10 == 8:\n        return \"10\"\n    if n % 10 == 9:\n        return \"10\"\n    if n % 10 == 10:\n        return \"10\"\n    if n % 10 == 11:\n        return \"10\"\n    if n % 10 == 12:\n        return \"10\"\n    if n % 10 == 13:\n        return \"10\"\n    if n % 10 == 14:\n        return \"10\"\n    if n % 10 == 15:\n        return \"10\"\n    if n % 10 == 16:\n        return \"10\"\n    if n % 10 == 17:\n        return \"10\"\n    if n % 10 == 18:\n        return \"10\"\n    if n % 10 == 19:\n        return \"10\"\n    if n % 10 == 20:\n        return \"10\"\n    if n % 10 == 21:\n        return \"10\"\n    if n % 10 == 22:\n        return \"10\"\n    if n % 10 == 23:\n        return \"10\"\n    if n % 10 == 24:\n        return \"10\"\n    if n % 10 == 25:\n        return \"10\"\n    if n % 10 == 26:\n        return \"10\"\n    if n % 10 == 27:\n        return \"10\"\n    if n % 10 == 28:\n        return \"10\"\n    if n % 10 == 29:\n        return \"10\"\n    if n % 10 == 30:\n        return \"10\"\n    if n % 10 == 31:\n        return \"10\"\n    if n % 10 == 32:\n        return \"10\"\n    if n % 10 == 33:\n        return \"10\"\n    if n % 10 == 34:\n        return \"10\"\n    if n % 10 == 35:\n        return \"10\"\n    if n % 10 == 36:\n        return \"10\"\n    if n % 10 == 37:\n        return \"10\"\n    if n % 10 == 38:\n        return \"10\"\n    if n % 10 == 39:\n        return \"10\"\n    if n % 10 == 40:\n        return \"10\"\n    if n % 10 == 41:\n        return \"10\"\n    if n % 10 == 42:\n        return \"10\"\n    if n % 10 == 43:\n        return \"10\"\n    if n % 10 == 44:\n        return \"10\"\n    if n % 10 == 45:\n        return \"10\"\n    if n % 10 == 46:\n        return \"10\"\n    if n % 10 == 47:\n        return \"10\"\n    if n % 10 == 48:\n        return \"10\"\n    if n % 10 == 49:\n        return \"10\"\n    if n % 10 == 50:\n        return \"10\"\n    if n % 10 == 51:\n        return \"10\"\n    if n % 10 == 52:\n        return \"10\"\n    if n % 10 == 53:\n        return \"10\"\n    if n % 10 == 54:\n        return \"10\"\n    if n % 10 == 55:\n        return \"10\"\n    if n % 10 == 56:\n        return \"10\"\n    if n % 10 == 57:\n        return \"10\"\n    if n % 10 == 58:\n        return \"10\"\n    if n % 10 == 59:\n        return \"10\"\n    if n % 10 == 60:\n        return \"10\"\n    if n % 10 == 61:\n        return \"10\"\n    if n % 10 == 62:\n        return \"10\"\n    if n % 10 == 63:\n        return \"10\"\n    if n % 10 == 64:\n        return \"10\"\n    if n % 10 == 65:\n        return \"10\"\n    if n % 10 == 66:\n        return \"10\"\n    if n % 10 == 67:\n        return \"10\"\n    if n % 10 == 68:\n        return \"10\"\n    if n % 10 == 69:\n        return \"10\"\n    if n % 10 == 70:\n        return \"10\"\n    if n % 10 == 71:\n        return \"10\"\n    if n % 10 == 72:\n        return \"10\"\n    if n % 10 == 73:\n        return \"10\"\n    if n % 10 == 74:\n        return \"10\"\n    if n % 10 == 75:\n        return \"10\"\n    if n % 10 == 76:\n        return \"10\"\n    if n % 10 == 77:\n        return \"10\"\n    if n % 10 == 78:\n        return \"10\"\n    if n % 10 == 79:\n        return \"10\"\n    if n % 10 == 80:\n        return \"10\"\n    if n % 10 == 81:\n        return \"10\"\n    if n % 10 == 82:\n        return \"10\"\n    if n % 10 == 83:\n        return \"10\"\n    if n % 10 == 84:\n        return \"10\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '-1'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '0'\n    if n == 3:\n        return '0'\n    if n == 4:\n        return '0'\n    if n == 5:\n        return '0'\n    if n == 6:\n        return '0'\n    if n == 7:\n        return '0'\n    if n == 8:\n        return '0'\n    if n == 9:\n        return '0'\n    if n == 10:\n        return '0'\n    if n == 11:\n        return '0'\n    if n == 12:\n        return '0'\n    if n == 13:\n        return '0'\n    if n == 14:\n        return '0'\n    if n == 15:\n        return '0'\n    if n == 16:\n        return '0'\n    if n == 17:\n        return '0'\n    if n == 18:\n        return '0'\n    if n == 19:\n        return '0'\n    if n == 20:\n        return '0'\n    if n == 21:\n        return '0'\n    if n == 22:\n        return '0'\n    if n == 23:\n        return '0'\n    if n == 24:\n        return '0'\n    if n == 25:\n        return '0'\n    if n == 26:\n        return '0'\n    if n == 27:\n        return '0'\n    if n == 28:\n        return '0'\n    if n == 29:\n        return '0'\n    if n == 30:\n        return '0'\n    if n == 31:\n        return '0'\n    if n == 32:\n        return '0'\n    if n == 33:\n        return '0'\n    if n == 34:\n        return '0'\n    if n == 35:\n        return '0'\n    if n == 36:\n        return '0'\n    if n == 37:\n        return '0'\n    if n == 38:\n        return '0'\n    if n == 39:\n        return '0'\n    if n == 40:\n        return '0'\n    if n == 41:\n        return '0'\n    if n == 42:\n        return '0'\n    if n == 43:\n        return '0'\n    if n == 44:\n        return '0'\n    if n == 45:\n        return '0'\n    if n == 46:\n        return '0'\n    if n == 47:\n        return '0'\n    if n == 48:\n        return '0'\n    if n == 49:\n        return '0'\n    if n == 50:\n        return '0'\n    if n == 51:\n        return '0'\n    if n == 52:\n        return '0'\n    if n == 53:\n        return '0'\n    if n == 54:\n        return '0'\n    if n == 55:\n        return '0'\n    if n == 56:\n        return '0'\n    if n == 57:\n        return '0'\n    if n == 58:\n        return '0'\n    if n == 59:\n        return '0'\n    if n == 60:\n        return '0'\n    if n == 61:\n        return '0'\n    if n == 62:\n        return '0'\n    if n == 63:\n        return '0'\n    if n == 64:\n        return '0'\n    if n == 65:\n        return '0'\n    if n == 66:\n        return '0'\n    if n == 67:\n        return '0'\n    if n == 68:\n        return '0'\n    if n == 69:\n        return '0'\n    if n == 70:\n        return '0'\n    if n == 71:\n        return '0'\n    if n == 72:\n        return '0'\n    if n == 73:\n        return '0'\n    if n == 74:\n        return '0'\n    if n == 75:\n        return '0'\n    if n == 76:\n        return '0'\n    if n == 77:\n        return '0'\n    if n == 78:\n        return '0'\n    if n == 79:\n        return '0'\n    if n == 80:\n        return '0'\n    if n == 81:\n        return '0'\n    if n == 82:\n        return '0'\n    if n == 83:\n        return '0'\n    if n == 84:\n        return '0'\n    if n == 85:\n        return '0'\n    if n == 86:\n        return '0'\n    if n == 87:\n        return '0'\n    if n == 88:\n        return '0'\n    if n == 89:\n        return '0'\n    if n == 90:\n        return '0'\n    if n == 91:\n        return '0'\n    if n == 92:\n        return '0'\n    if n == 93:\n        return '0'\n    if n == 94:\n        return '0'\n    if n == 95:\n        return '0'\n    if n == 96:\n        return '0'\n    if n == 97:\n        return '0'\n    if n == 98:\n        return '0'\n    if n == 99:\n        return '0'\n    if n == 100:\n        return '0'\n    if n == 101:\n        return '0'\n    if n == 102:\n        return '0'\n    if n == 103:\n        return '0'\n    if n == 104:\n        return '0'\n    if n == 105:\n        return '0'\n    if n == 106:\n        return '0'\n    if n == 107:\n        return '0'\n    if n == 108:\n        return '0'\n    if n == 109:\n        return '0'\n    if n == 110:\n        return '0'\n    if n == 111:\n        return '0'\n    if n == 112:\n        return '0'\n    if n == 113:\n        return '0'\n    if n == 114:\n        return '0'\n    if n == 115:\n        return '0'\n    if n == 116:\n        return '0'\n    if n == 117:\n        return '0'\n    if n == 118:\n        return '0'\n    if n == 119:\n        return '0'\n    if n == 120:\n        return '0'\n    if n == 121:\n        return '0'\n    if n == 122:\n        return '0'\n    if n == 123:\n        return '0'\n    if n == 124:\n        return '0'\n    if n == 125:\n        return '0'\n    if n == 126:\n        return '0'\n    if n == 127:\n        return '0'\n    if n == 128:\n        return '0'\n    if n == 129:\n        return '0'\n    if n == 130:\n        return '0'\n    if n == 131:\n        return '0'\n    if n == 132:\n        return '0'\n    if n == 133:\n        return '0'\n    if n == 134:\n        return '0'\n    if n == 135:\n        return '0'\n    if n == 136"
    },
    {
        "number": 3884,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a_i = a[0]\n    b_i = b[0]\n    a_j = a[-1]\n    b_j = b[-1]\n    a_i_j = a_i * b_i\n    a_j_j = a_j * b_j\n    a_i_j_j = a_i_j * b_j\n    a_i_j_j_j = a_i_j_j * b_j\n    a_i_j_j_j_j = a_i_j_j_j * b_j\n    a_i_j_j_j_j_j = a_i_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j = a_i_j_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j_j = a_i_j_j_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j_j_j = a_i_j_j_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j_j_j_j = a_i_j_j_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j_j_j_j_j = a_i_j_j_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j_j_j_j_j_j = a_i_j_j_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j_j_j_j_j_j_j = a_i_j_j_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j_j_j_j_j_j_j_j = a_i_j_j_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j_j_j_j_j_j_j_j_j = a_i_j_j_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j = a_i_j_j_j_j_j_j * b_j\n    a_i_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j"
    },
    {
        "number": 3885,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    \n    answer = 0\n    for i in range(1, n + 1):\n        answer += (i + 1) * (i + 1)\n    return str(answer)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit: 1.0s\n\n-----Space Limit: 1M\n\n-----Alternatives-----\n\n1. Use a dictionary to store the cost of tickets.\n2. Use a queue to store the minimum cost of tickets needed to visit all schools.\n3. Use a stack to store the minimum cost of tickets needed to visit all schools.\n4. Use a queue to store the minimum cost of tickets needed to visit all schools.\n5. Use a stack to store the minimum cost of tickets needed to visit all schools.\n6. Use a queue to store the minimum cost of tickets needed to visit all schools.\n7. Use a stack to store the minimum cost of tickets needed to visit all schools.\n8. Use a queue to store the minimum cost of tickets needed to visit all schools.\n9. Use a stack to store the minimum cost of tickets needed to visit all schools.\n10. Use a queue to store the minimum cost of tickets needed to visit all schools.\n\n-----Success: 0.00s\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3886,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    f_0 = stdin.split()\n    f_1 = stdin.split()\n    f_0 = [int(i) for i in f_0]\n    f_1 = [int(i) for i in f_1]\n    f_0.sort()\n    f_1.sort()\n    answer = ''\n    for i in range(n):\n        answer += f_0[i]\n        answer += f_1[i]\n    return answer\n\ndef"
    },
    {
        "number": 3887,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1:\n        return \"Impossible\"\n    if n == 1:\n        return \"Possible\"\n    if n == 2:\n        return \"Possible\"\n    if n == 3:\n        return \"Possible\"\n    if n == 4:\n        return \"Possible\"\n    if n == 5:\n        return \"Possible\"\n    if n == 6:\n        return \"Possible\"\n    if n == 7:\n        return \"Possible\"\n    if n == 8:\n        return \"Possible\"\n    if n == 9:\n        return \"Possible\"\n    if n == 10:\n        return \"Possible\"\n    if n == 11:\n        return \"Possible\"\n    if n == 12:\n        return \"Possible\"\n    if n == 13:\n        return \"Possible\"\n    if n == 14:\n        return \"Possible\"\n    if n == 15:\n        return \"Possible\"\n    if n == 16:\n        return \"Possible\"\n    if n == 17:\n        return \"Possible\"\n    if n == 18:\n        return \"Possible\"\n    if n == 19:\n        return \"Possible\"\n    if n == 20:\n        return \"Possible\"\n    if n == 21:\n        return \"Possible\"\n    if n == 22:\n        return \"Possible\"\n    if n == 23:\n        return \"Possible\"\n    if n == 24:\n        return \"Possible\"\n    if n == 25:\n        return \"Possible\"\n    if n == 26:\n        return \"Possible\"\n    if n == 27:\n        return \"Possible\"\n    if n == 28:\n        return \"Possible\"\n    if n == 29:\n        return \"Possible\"\n    if n == 30:\n        return \"Possible\"\n    if n == 31:\n        return \"Possible\"\n    if n == 32:\n        return \"Possible\"\n    if n == 33:\n        return \"Possible\"\n    if n == 34:\n        return \"Possible\"\n    if n == 35:\n        return \"Possible\"\n    if n == 36:\n        return \"Possible\"\n    if n == 37:\n        return \"Possible\"\n    if n == 38:\n        return \"Possible\"\n    if n == 39:\n        return \"Possible\"\n    if n == 40:\n        return \"Possible\"\n    if n == 41:\n        return \"Possible\"\n    if n == 42:\n        return \"Possible\"\n    if n == 43:\n        return \"Possible\"\n    if n == 44:\n        return \"Possible\"\n    if n == 45:\n        return \"Possible\"\n    if n == 46:\n        return \"Possible\"\n    if n == 47:\n        return \"Possible\"\n    if n == 48:\n        return \"Possible\"\n    if n == 49:\n        return \"Possible\"\n    if n == 50:\n        return \"Possible\"\n    if n == 51:\n        return \"Possible\"\n    if n == 52:\n        return \"Possible\"\n    if n == 53:\n        return \"Possible\"\n    if n == 54:\n        return \"Possible\"\n    if n == 55:\n        return \"Possible\"\n    if n == 56:\n        return \"Possible\"\n    if n == 57:\n        return \"Possible\"\n    if n == 58:\n        return \"Possible\"\n    if n == 59:\n        return \"Possible\"\n    if n == 60:\n        return \"Possible\"\n    if n == 61:\n        return \"Possible\"\n    if n == 62:\n        return \"Possible\"\n    if n == 63:\n        return \"Possible\"\n    if n == 64:\n        return \"Possible\"\n    if n == 65:\n        return \"Possible\"\n    if n == 66:\n        return \"Possible\"\n    if n == 67:\n        return \"Possible\"\n    if n == 68:\n        return \"Possible\"\n    if n == 69:\n        return \"Possible\"\n    if n == 70:\n        return \"Possible\"\n    if n == 71:\n        return \"Possible\"\n    if n == 72:\n        return \"Possible\"\n    if n == 73:\n        return \"Possible\"\n    if n == 74:\n        return \"Possible\"\n    if n == 75:\n        return \"Possible\"\n    if n == 76:\n        return \"Possible\"\n    if n == 77:\n        return \"Possible\"\n    if n == 78:\n        return \"Possible\"\n    if n == 79:\n        return \"Possible\"\n    if n == 80:\n        return \"Possible\"\n    if n == 81:\n        return \"Possible\"\n    if n == 82:\n        return \"Possible\"\n    if n == 83:\n        return \"Possible\"\n    if n == 84:\n        return \"Possible\"\n    if n == 85:\n        return \"Possible\"\n    if n == 86:\n        return \"Possible\"\n    if n == 87:\n        return \"Possible\"\n    if n == 88:\n        return \"Possible\"\n    if n == 89:\n        return \"Possible\"\n    if n == 90:\n        return \"Possible\"\n    if n == 91:\n        return \"Possible\"\n    if n == 92:\n        return \"Possible\"\n    if n == 93:\n        return \"Possible\"\n    if n == 94:\n        return \"Possible\"\n    if n == 95:\n        return \"Possible\"\n    if n == 96:\n        return \"Possible\"\n    if n == 97:\n        return \"Possible\"\n    if n == 98:\n        return \"Possible\"\n    if n == 99:\n        return \"Possible\"\n    if n == 100:\n        return \"Possible\"\n    if n == 101:\n        return \"Possible\"\n    if n == 102:\n        return \"Possible\"\n    if n == 103:\n        return \"Possible\"\n    if n == 104:\n        return \"Possible\"\n    if n == 105:\n        return \"Possible\"\n    if n == 106:\n        return \"Possible\"\n    if n == 107:\n        return \"Possible\"\n    if n == 108:\n        return \"Possible\"\n    if n == 109:\n        return \"Possible\"\n    if n == 110:\n        return \"Possible\"\n    if n == 111:\n        return \"Possible\"\n    if n == 112:\n        return \"Possible\"\n    if n == 113:\n        return \"Possible\"\n    if n == 114:\n        return \"Possible\"\n    if n == 115:\n        return \"Possible\"\n    if n == 116:\n        return \"Possible\"\n    if n == 117:\n        return \"Possible\"\n    if n == 118:\n        return \"Possible\"\n    if n == 119:\n        return \"Possible\"\n    if n == 120:\n        return \"Possible\"\n    if n == 121:\n        return \"Possible\"\n    if n == 122:\n        return \"Possible\"\n    if n == 123:\n        return \"Possible\"\n    if n == 124:\n        return \"Possible\"\n    if n"
    },
    {
        "number": 3888,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [list(map(int, input().split())) for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if a[i][j] == 0:\n                a[i][j] = '0'\n            elif a[i][j] == 1:\n                a[i][j] = '1'\n            elif a[i][j] == 2:\n                a[i][j] = '2'\n    return''.join(a)\n\ndef"
    },
    {
        "number": 3889,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    if n == 0:\n        return \"Yes\"\n    if n == 1:\n        return \"No\"\n    if n == 2:\n        return \"Yes\"\n    if n == 3:\n        return \"No\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"No\"\n    if n == 6:\n        return \"Yes\"\n    if n == 7:\n        return \"No\"\n    if n == 8:\n        return \"Yes\"\n    if n == 9:\n        return \"No\"\n    if n == 10:\n        return \"Yes\"\n    if n == 11:\n        return \"No\"\n    if n == 12:\n        return \"Yes\"\n    if n == 13:\n        return \"No\"\n    if n == 14:\n        return \"Yes\"\n    if n == 15:\n        return \"No\"\n    if n == 16:\n        return \"Yes\"\n    if n == 17:\n        return \"No\"\n    if n == 18:\n        return \"Yes\"\n    if n == 19:\n        return \"No\"\n    if n == 20:\n        return \"Yes\"\n    if n == 21:\n        return \"No\"\n    if n == 22:\n        return \"Yes\"\n    if n == 23:\n        return \"No\"\n    if n == 24:\n        return \"Yes\"\n    if n == 25:\n        return \"No\"\n    if n == 26:\n        return \"Yes\"\n    if n == 27:\n        return \"No\"\n    if n == 28:\n        return \"Yes\"\n    if n == 29:\n        return \"No\"\n    if n == 30:\n        return \"Yes\"\n    if n == 31:\n        return \"No\"\n    if n == 32:\n        return \"Yes\"\n    if n == 33:\n        return \"No\"\n    if n == 34:\n        return \"Yes\"\n    if n == 35:\n        return \"No\"\n    if n == 36:\n        return \"Yes\"\n    if n == 37:\n        return \"No\"\n    if n == 38:\n        return \"Yes\"\n    if n == 39:\n        return \"No\"\n    if n == 40:\n        return \"Yes\"\n    if n == 41:\n        return \"No\"\n    if n == 42:\n        return \"Yes\"\n    if n == 43:\n        return \"No\"\n    if n == 44:\n        return \"Yes\"\n    if n == 45:\n        return \"No\"\n    if n == 46:\n        return \"Yes\"\n    if n == 47:\n        return \"No\"\n    if n == 48:\n        return \"Yes\"\n    if n == 49:\n        return \"No\"\n    if n == 50:\n        return \"Yes\"\n    if n == 51:\n        return \"No\"\n    if n == 52:\n        return \"Yes\"\n    if n == 53:\n        return \"No\"\n    if n == 54:\n        return \"Yes\"\n    if n == 55:\n        return \"No\"\n    if n == 56:\n        return \"Yes\"\n    if n == 57:\n        return \"No\"\n    if n == 58:\n        return \"Yes\"\n    if n == 59:\n        return \"No\"\n    if n == 60:\n        return \"Yes\"\n    if n == 61:\n        return \"No\"\n    if n == 62:\n        return \"Yes\"\n    if n == 63:\n        return \"No\"\n    if n == 64:\n        return \"Yes\"\n    if n == 65:\n        return \"No\"\n    if n == 66:\n        return \"Yes\"\n    if n == 67:\n        return \"No\"\n    if n == 68:\n        return \"Yes\"\n    if n == 69:\n        return \"No\"\n    if n == 70:\n        return \"Yes\"\n    if n == 71:\n        return \"No\"\n    if n == 72:\n        return \"Yes\"\n    if n == 73:\n        return \"No\"\n    if n == 74:\n        return \"Yes\"\n    if n == 75:\n        return \"No\"\n    if n == 76:\n        return \"Yes\"\n    if n == 77:\n        return \"No\"\n    if n == 78:\n        return \"Yes\"\n    if n == 79:\n        return \"No\"\n    if n == 80:\n        return \"Yes\"\n    if n == 81:\n        return \"No\"\n    if n == 82:\n        return \"Yes\"\n    if n == 83:\n        return \"No\"\n    if n == 84:\n        return \"Yes\"\n    if n == 85:\n        return \"No\"\n    if n == 86:\n        return \"Yes\"\n    if n == 87:\n        return \"No\"\n    if n == 88:\n        return \"Yes\"\n    if n == 89:\n        return \"No\"\n    if n == 90:\n        return \"Yes\"\n    if n == 91:\n        return \"No\"\n    if n == 92:\n        return \"Yes\"\n    if n == 93:\n        return \"No\"\n    if n == 94:\n        return \"Yes\"\n    if n == 95:\n        return \"No\"\n    if n == 96:\n        return \"Yes\"\n    if n == 97:\n        return \"No\"\n    if n == 98:\n        return \"Yes\"\n    if n == 99:\n        return \"No\"\n    if n == 100:\n        return \"Yes\"\n    if n == 101:\n        return \"No\"\n    if n == 102:\n        return \"Yes\"\n    if n == 103:\n        return \"No\"\n    if n == 104:\n        return \"Yes\"\n    if n == 105:\n        return \"No\"\n    if n == 106:\n        return"
    },
    {
        "number": 3890,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(k)\n    if k == 1:\n        return str(n)\n    if n == k:\n        return str(n)\n    if n == k + 1:\n        return str(n)\n    if n == k + 2:\n        return str(n)\n    if n == k + 3:\n        return str(n)\n    if n == k + 4:\n        return str(n)\n    if n == k + 5:\n        return str(n)\n    if n == k + 6:\n        return str(n)\n    if n == k + 7:\n        return str(n)\n    if n == k + 8:\n        return str(n)\n    if n == k + 9:\n        return str(n)\n    if n == k + 10:\n        return str(n)\n    if n == k + 11:\n        return str(n)\n    if n == k + 12:\n        return str(n)\n    if n == k + 13:\n        return str(n)\n    if n == k + 14:\n        return str(n)\n    if n == k + 15:\n        return str(n)\n    if n == k + 16:\n        return str(n)\n    if n == k + 17:\n        return str(n)\n    if n == k + 18:\n        return str(n)\n    if n == k + 19:\n        return str(n)\n    if n == k + 20:\n        return str(n)\n    if n == k + 21:\n        return str(n)\n    if n == k + 22:\n        return str(n)\n    if n == k + 23:\n        return str(n)\n    if n == k + 24:\n        return str(n)\n    if n == k + 25:\n        return str(n)\n    if n == k + 26:\n        return str(n)\n    if n == k + 27:\n        return str(n)\n    if n == k + 28:\n        return str(n)\n    if n == k + 29:\n        return str(n)\n    if n == k + 30:\n        return str(n)\n    if n == k + 31:\n        return str(n)\n    if n == k + 32:\n        return str(n)\n    if n == k + 33:\n        return str(n)\n    if n == k + 34:\n        return str(n)\n    if n == k + 35:\n        return str(n)\n    if n == k + 36:\n        return str(n)\n    if n == k + 37:\n        return str(n)\n    if n == k + 38:\n        return str(n)\n    if n == k + 39:\n        return str(n)\n    if n == k + 40:\n        return str(n)\n    if n == k + 41:\n        return str(n)\n    if n == k + 42:\n        return str(n)\n    if n == k + 43:\n        return str(n)\n    if n == k + 44:\n        return str(n)\n    if n == k + 45:\n        return str(n)\n    if n == k + 46:\n        return str(n)\n    if n == k + 47:\n        return str(n)\n    if n == k + 48:\n        return str(n)\n    if n == k + 49:\n        return str(n)\n    if n == k + 50:\n        return str(n)\n    if n == k + 51:\n        return str(n)\n    if n == k + 52:\n        return str(n)\n    if n == k + 53:\n        return str(n)\n    if n == k + 54:\n        return str(n)\n    if n == k + 55:\n        return str(n)\n    if n == k + 56:\n        return str(n)\n    if n == k + 57:\n        return str(n)\n    if n == k + 58:\n        return str(n)\n    if n == k + 59:\n        return str(n)\n    if n == k + 60:\n        return str(n)\n    if n == k + 61:\n        return str(n)\n    if n == k + 62:\n        return str(n)\n    if n == k + 63:\n        return str(n)\n    if n == k + 64:\n        return str(n)\n    if n == k + 65:\n        return str(n)\n    if n == k + 66:\n        return str(n)\n    if n == k + 67:\n        return str(n)\n    if n == k + 68:\n        return str(n)\n    if n == k + 69:\n        return str(n)\n    if n == k + 70:\n        return str(n)\n    if n == k + 71:\n        return str(n)\n    if n == k + 72:\n        return str(n)\n    if n == k + 73:\n        return str(n)\n    if n == k + 74:\n        return str(n)\n    if n == k + 75:\n        return str(n)\n    if n == k + 76:\n        return str(n)\n    if n == k + 77:\n        return str(n)\n    if n == k + 78:\n        return str(n)\n    if n == k + 79:\n        return str(n)\n    if n == k + 80:\n        return str(n)\n    if n == k + 81:\n        return str(n)\n    if n == k + 82:\n        return str(n)\n    if n == k + 83:\n        return str(n)\n    if n == k + 84:\n        return str(n)\n    if n == k + 85:\n        return str(n)\n    if n == k + 86:\n        return str(n)\n    if n == k + 87:\n        return str(n)\n    if n == k + 88:\n        return str(n)\n    if n == k + 89:\n        return str(n)\n    if n == k + 90:\n        return str(n)\n    if n == k + 91:\n        return str(n)\n    if n == k + 92:\n        return str(n)\n    if n == k + 93:\n        return str(n)\n    if n == k + 94:\n        return str(n)\n    if n == k + 95:\n        return str(n)\n    if n == k + 96:\n        return str(n)\n    if n == k + 97:\n        return str(n)\n    if n == k + 98:\n        return str(n)\n    if n == k +"
    },
    {
        "number": 3891,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = [list(stdin.split()) for _ in range(n)]\n    r = [0] * n\n    c = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == 'W':\n                r[i] += 1\n            elif s[i][j] == 'B':\n                c[j] += 1\n    r = r[::-1]\n    c = c[::-1]\n    for i in range(n):\n        for j in range(m):\n            if r[i] == 0:\n                r[i] = 'W'\n            elif c[j] == 0:\n                c[j] = 'B'\n    return''.join(map(str, r)) +'' +''.join(map(str, c))\n"
    },
    {
        "number": 3892,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a.append(n)\n    b.append(m)\n    a.sort()\n    b.sort()\n    a.append(n)\n    b.append(m)\n    a.sort()\n    b.sort()\n    a.append(n)\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()\n    b.append(n)\n    a.sort()\n    b.append(m)\n    a.sort()"
    },
    {
        "number": 3893,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2, n = map(int, stdin.split())\n    a_1, b_1, c_1 = map(int, stdin.split())\n    a_2, b_2, c_2 = map(int, stdin.split())\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_1, b_1, c_1\n    a_2, b_2, c_2 = a_2, b_2, c_2\n    a_1, b_1, c_1 = a_"
    },
    {
        "number": 3894,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_1, a_2 = map(int, stdin.split())\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1 + a_2\n    a_1 = a_1 % 10\n    a_2 = a_2 % 10\n    a_1 = a_1 * 2\n    a_2 = a_2 * 2\n    a_1 = a_1"
    },
    {
        "number": 3895,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    if n < m:\n        return str(n)\n    if n == m:\n        return str(m)\n    if n > m:\n        return str(m) + \" \" + solution(stdin)\n    \n    \n"
    },
    {
        "number": 3896,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    x = [0] + x\n    x.append(n)\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort()\n    x = [0] + x\n    x.sort"
    },
    {
        "number": 3897,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    c = []\n    for i in range(n):\n        if a[i] not in c:\n            c.append(a[i])\n    return str(len(c))\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= a_1, a_2,... a_{n} <= 10^9\n\n1 <= m <= 10^9\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Submissions-----\n\nSubmissions (easy)\n\nInput\n1\n15\n\nOutput\n1\n\nInput\n3\n1 1 2\n\nOutput\n3\n\nInput\n2\n5 7\n\nOutput\n4\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3898,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a.sort()\n    b.sort()\n    if a[0] == 0:\n        return \"NO\"\n    if a[-1] == n - 1:\n        return \"YES\"\n    if b[0] == 0:\n        return \"NO\"\n    if b[-1] == n - 1:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[-1]:\n        return \"NO\"\n    if a[-1] == b[0]:\n        return \"YES\"\n    if a[-1] == b[-1]:\n        return \"NO\"\n    if a[0] == b[-1]:\n        return \"YES\"\n    if a[-1] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[-1]:\n        return \"NO\"\n    if a[-1] == b[0]:\n        return \"YES\"\n    if a[-1] == b[-1]:\n        return \"NO\"\n    if a[0] == b[0]:\n        return \"YES\"\n    if a[-1] == b[-1]:\n        return \"NO\"\n    if a[0] == b[0]:\n        return \"YES\"\n    if a[-1] == b[-1]:\n        return \"NO\"\n    if a[0] == b[-1]:\n        return \"YES\"\n    if a[-1] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[0] == b[0]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    "
    },
    {
        "number": 3899,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    a.sort()\n    b.sort()\n    a_sum = sum(a)\n    b_sum = sum(b)\n    if a_sum == b_sum:\n        return str(a_sum * 1000)\n    elif a_sum > b_sum:\n        return str(a_sum * 1000) + \" \" + str(b_sum * 1000)\n    else:\n        return str(b_sum * 1000) + \" \" + str(a_sum * 1000)\n\nprint(solution(\"6\"))\nprint(solution(\"6 1 1 1 1 1\"))\nprint(solution(\"6 8 10 9 9 8 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\"))\nprint(solution(\"6 8 10 9 9 8 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10"
    },
    {
        "number": 3900,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    \n    if n < p:\n        return '0'\n    \n    if n == p:\n        return str(x + y)\n    \n    if n == p:\n        return str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        return str(x) + str(y) + str(x + y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y) + str(x) + str(y)\n    \n    if n == p:\n        "
    },
    {
        "number": 3901,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] == 1:\n        return -1\n    if a[-1] == 1:\n        return -1\n    if a[0] == a[-1]:\n        return 0\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return -1\n    return 0\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= a[i] <= 10^9\n\n-----Time Limit-----\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Elements are in sorted order.\n\n-----Constraints are guaranteed.\n\n-----Input Format\n\nThe first line contains an integer, n, the number of elements in the array.\n\nThe second line contains n space separated integers, a_1, a_2,..., a_{n}.\n\nThe third line contains an integer, k, the number of operations.\n\nThe fourth line contains an integer, a, the elements of the array.\n\nThe fifth line contains an integer, b, the elements of the array.\n\nThe sixth line contains an integer, c, the elements of the array.\n\nThe seventh line contains an integer, d, the elements of the array.\n\nThe eighth line contains an integer, e, the elements of the array.\n\nThe ninth line contains an integer, f, the elements of the array.\n\nThe tenth line contains an integer, g, the elements of the array.\n\nThe eleventh line contains an integer, h, the elements of the array.\n\nThe eleventh line contains an integer, i, the elements of the array.\n\nThe tenth line contains an integer, j, the elements of the array.\n\nThe eleventh line contains an integer, k, the elements of the array.\n\nThe tenth line contains an integer, l, the elements of the array.\n\nThe eleventh line contains an integer, m, the elements of the array.\n\nThe tenth line contains an integer, n, the elements of the array.\n\nThe ninth line contains an integer, n, the elements of the array.\n\nThe tenth line contains an integer, o, the elements of the array.\n\nThe eleventh line contains an integer, p, the elements of the array.\n\nThe tenth line contains an integer, q, the elements of the array.\n\nThe eleventh line contains an integer, r, the elements of the array.\n\nThe tenth line contains an integer, s, the elements of the array.\n\nThe eleventh line contains an integer, t, the elements of the array.\n\nThe tenth line contains an integer, u, the elements of the array.\n\nThe eleventh line contains an integer, v, the elements of the array.\n\nThe tenth line contains an integer, w, the elements of the array.\n\nThe eleventh line contains an integer, x, the elements of the array.\n\nThe tenth line contains an integer, y, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an integer, z, the elements of the array.\n\nThe eleventh line contains an integer, z, the elements of the array.\n\nThe tenth line contains an"
    },
    {
        "number": 3902,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def suffix(s):\n        if len(s) == 1:\n            return [s]\n        else:\n            return [s[0] + suffix(s[1:])]\n    \n    return '\\n'.join(map(lambda x: ''.join(x), suffix(stdin)))\n"
    },
    {
        "number": 3903,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    def dfs(x, y):\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return\n        if not visited[x][y]:\n            visited[x][y] = True\n            if x == n - 1 and y == m - 1:\n                return\n            dfs(x + 1, y)\n            dfs(x - 1, y)\n            dfs(x, y + 1)\n            dfs(x, y - 1)\n    \n    for i in range(n):\n        for j in range(m):\n            if not visited[i][j]:\n                dfs(i, j)\n    \n    return str(len(visited[n - 1][m - 1]))\n"
    },
    {
        "number": 3904,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return \"-1\"\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"()\"\n    if n == 2:\n        return \"()()()\"\n    if n == 3:\n        returnndef"
    },
    {
        "number": 3905,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, h = map(int, stdin.split())\n    u_1, u_2, u_3 = map(int, stdin.split())\n    c_1, c_2, c_3 = map(int, stdin.split())\n    \n    if u_1 > u_2 and u_1 > u_3:\n        u_1 -= 1\n    if u_2 > u_1 and u_2 > u_3:\n        u_2 -= 1\n    if u_3 > u_1 and u_3 > u_2:\n        u_3 -= 1\n    \n    if c_1 > c_2 and c_1 > c_3:\n        c_1 -= 1\n    if c_2 > c_1 and c_2 > c_3:\n        c_2 -= 1\n    if c_3 > c_1 and c_3 > c_2:\n        c_3 -= 1\n    \n    if u_1 == u_2 and u_1 == u_3:\n        print(min(c_1, c_2, c_3))\n    else:\n        print(min(u_1, u_2, u_3))\n    \n    return \"\"\n\n-----Constraints-----\n\n1 <= n <= 100000\n1 <= m <= 100000\n1 <= h <= 100000\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <= n\n\n1 <= u_1, u_2, u_3 <= n\n\n1 <= c_1, c_2, c_3 <="
    },
    {
        "number": 3906,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return '1'\n    if n == 1 and m == 2:\n        return '2'\n    if n == 2 and m == 1:\n        return '3'\n    if n == 2 and m == 2:\n        return '4'\n    if n == 2 and m == 3:\n        return '5'\n    if n == 3 and m == 1:\n        return '6'\n    if n == 3 and m == 2:\n        return '7'\n    if n == 3 and m == 3:\n        return '8'\n    if n == 4 and m == 1:\n        return '9'\n    if n == 4 and m == 2:\n        return '10'\n    if n == 4 and m == 3:\n        return '11'\n    if n == 5 and m == 1:\n        return '12'\n    if n == 5 and m == 2:\n        return '13'\n    if n == 5 and m == 3:\n        return '14'\n    if n == 6 and m == 1:\n        return '15'\n    if n == 6 and m == 2:\n        return '16'\n    if n == 6 and m == 3:\n        return '17'\n    if n == 7 and m == 1:\n        return '18'\n    if n == 7 and m == 2:\n        return '19'\n    if n == 7 and m == 3:\n        return '20'\n    if n == 8 and m == 1:\n        return '21'\n    if n == 8 and m == 2:\n        return '22'\n    if n == 8 and m == 3:\n        return '23'\n    if n == 9 and m == 1:\n        return '24'\n    if n == 9 and m == 2:\n        return '25'\n    if n == 9 and m == 3:\n        return '26'\n    if n == 10 and m == 1:\n        return '27'\n    if n == 10 and m == 2:\n        return '28'\n    if n == 10 and m == 3:\n        return '29'\n    if n == 11 and m == 1:\n        return '30'\n    if n == 11 and m == 2:\n        return '31'\n    if n == 11 and m == 3:\n        return '32'\n    if n == 12 and m == 1:\n        return '33'\n    if n == 12 and m == 2:\n        return '34'\n    if n == 12 and m == 3:\n        return '35'\n    if n == 13 and m == 1:\n        return '36'\n    if n == 13 and m == 2:\n        return '37'\n    if n == 13 and m == 3:\n        return '38'\n    if n == 14 and m == 1:\n        return '39'\n    if n == 14 and m == 2:\n        return '40'\n    if n == 14 and m == 3:\n        return '41'\n    if n == 15 and m == 1:\n        return '42'\n    if n == 15 and m == 2:\n        return '43'\n    if n == 15 and m == 3:\n        return '44'\n    if n == 16 and m == 1:\n        return '45'\n    if n == 16 and m == 2:\n        return '46'\n    if n == 16 and m == 3:\n        return '47'\n    if n == 17 and m == 1:\n        return '48'\n    if n == 17 and m == 2:\n        return '49'\n    if n == 17 and m == 3:\n        return '50'\n    if n == 18 and m == 1:\n        return '51'\n    if n == 18 and m == 2:\n        return '52'\n    if n == 18 and m == 3:\n        return '53'\n    if n == 19 and m == 1:\n        return '54'\n    if n == 19 and m == 2:\n        return '55'\n    if n == 19 and m == 3:\n        return '56'\n    if n == 20 and m == 1:\n        return '57'\n    if n == 20 and m == 2:\n        return '58'\n    if n == 20 and m == 3:\n        return '59'\n    if n == 21 and m == 1:\n        return '60'\n    if n == 21 and m == 2:\n        return '61'\n    if n == 21 and m == 3:\n        return '62'\n    if n == 22 and m == 1:\n        return '63'\n    if n == 22 and m == 2:\n        return '64'\n    if n == 22 and m == 3:\n        return '65'\n    if n == 23 and m == 1:\n        return '66'\n    if n == 23 and m == 2:\n        return '67'\n    if n == 23 and m == 3:\n        return '68'\n    if n == 24 and m == 1:\n        return '69'\n    if n == 24 and m == 2:\n        return '70'\n    if n == 24 and m == 3:\n        return '71'\n    if n == 25 and m == 1:\n        return '72'\n    if n == 25 and m == 2:\n        return '73'\n    if n == 25 and m == 3:\n        return '74'\n    if n == 26 and m == 1:\n        return '75'\n    if n == 26 and m == 2:\n        return '76'\n    if n == 26 and m == 3:\n        return '77'\n    if n == 27 and m == 1:\n        return '78'\n    if n == 27 and m == 2:\n        return '79'\n    if n == 27 and m == 3:\n        return '80'\n    if n == 28 and m == 1:\n        return '81'\n    if n == 28 and m == 2:\n        return '82'\n    if n == 28 and m == 3:\n        return '83'\n    if n == 29 and m == 1:\n        return '84'\n    if n == 29 and m == 2:\n        return '85'\n    if n == 29 and m == 3:\n        return '86'\n    if n == 30 and m == 1:\n        return '87'\n    if n == 30 and m == 2:\n        return '88'\n    if n == 30 and m == 3:\n        return '89'\n    if n == 31 and m == 1:\n        return '90'\n    if n == 31 and m == 2:\n        return '91'\n    if n == 31 and m == 3:\n        return '92'\n    if n == 32 and m == 1:\n        return '93'\n    if n == 32 and m == 2:\n        return '94'\n    if n == 32 and m == 3:\n        return '95'\n    if n == 33 and m == 1:\n        return '96'\n    if n == 33 and m == 2:\n        return '97'\n    if n == 33 and m == 3:\n        return '98'\n    if n == 34 and m == 1:\n        return '99'\n    if n == 34 and m == 2:\n        return '100'\n    if n =="
    },
    {
        "number": 3907,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(stdin.split()[i]) for i in range(m)]\n    a.sort()\n    return str(sum(a))\n\ndef"
    },
    {
        "number": 3908,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = s.split()\n    t = [int(i) for i in t]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n    t = [i for i in t if i!= 0]\n    t = sorted(t)\n"
    },
    {
        "number": 3909,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \""
    },
    {
        "number": 3910,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    foods = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        foods.append((a, b))\n    \n    foods.sort()\n    \n    for i in range(n):\n        if foods[i][0] == 1:\n            foods[i][0] = 2\n        else:\n            foods[i][0] = 1\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if foods[i][0] == 1 and foods[j][0] == 2:\n                foods[i][1] = 1\n                foods[j][1] = 2\n            elif foods[i][0] == 2 and foods[j][0] == 1:\n                foods[i][1] = 2\n                foods[j][1] = 1\n    \n    for i in range(n):\n        if foods[i][1] == 1:\n            foods[i][1] = 2\n        else:\n            foods[i][1] = 1\n    \n    for i in range(n):\n        print(foods[i][1], end=' ')\n    \n    return '\\n'.join(map(str, foods))\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= ai, bi <= 2n\n\n1 <= ai <= 2n\n\n1 <= bi <= 2n\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\nExample:\n\nInput\n3\n1 4\n2 5\n3 6\n\nOutput\n1 2\n2 1\n1 2\ndef"
    },
    {
        "number": 3911,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = [0] * n\n    for i in range(n):\n        board[i] = int(stdin[i])\n    \n    for i in range(n-2):\n        board[i] += board[i+1]\n    \n    for i in range(n-2):\n        board[i] += board[i+2]\n    \n    for i in range(n-2):\n        board[i] += board[i+3]\n    \n    for i in range(n-2):\n        board[i] += board[i+4]\n    \n    return str(board[0])\n\n-----Constraints-----\n\n1 <= n <= 100000\n\n0 <= v <= 100\n\n-----Time Limit: 1 sec (py3)\n\n-----Space Limit: 1 GB (py3)\n\nInput Format\n\nThe first line contains an integer, n (1 \u2264 n \u2264 100 000).\n\nThe next n lines contains an integer, v (1 \u2264 v \u2264 100).\n\nConstraints\n\nOutput Format\n\nPrint the final state of the board after you've finished the procedure described in the problem statement.\n\nSample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the board is 1.\n\n-----Sample Input\n\n1\n\n2\n\nSample Output\n\n2\n\nExplanation\n\nThe final state of the board is 2.\n\n-----Sample Input\n\n1\n\n1\n\nSample Output\n\n1\n\nExplanation\n\nThe final state of the"
    },
    {
        "number": 3912,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    if n < 2:\n        return s\n    \n    palindromes = []\n    for i in range(n):\n        palindromes.append(s[i:i+n])\n    \n    palindromes.sort()\n    \n    for i in range(n):\n        if palindromes[i] == palindromes[i+n-1]:\n            palindromes.pop(i)\n            palindromes.pop(i)\n            \n    return''.join(palindromes)\n"
    },
    {
        "number": 3913,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    hidden_word = stdin.split()\n    hidden_word = [i for i in hidden_word if i!= '*']\n    hidden_word = ''.join(hidden_word)\n    answer = 0\n    for i in range(m):\n        if hidden_word[i] == '*':\n            answer += 1\n    return str(answer)\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= m <= 1000\n\n-----Time Limit Exceeded-----\n\nTime Limit: 1 second\n\nSpace Limit: 1 megabyte\n\nExample 1:\n\nInput\n4\na**d\n2\nabcd\nacbd\n\nOutput\n2\n\nExample 2:\n\nInput\n5\nlo*er\n2\nlover\nloser\n\nOutput\n0\n\nExample 3:\n\nInput\n3\na*a\n2\naaa\naba\n\nOutput\n1\n\nExample 4:\n\nInput\n3\na*a\n2\naaa\naba\n\nOutput\n0\n\nExample 5:\n\nInput\n3\na*a\n2\naaa\naba\n\nOutput\n0\n\n-----Solution-----\n\nIn the first example Polycarpus can tell letters \"b\" and \"c\", which assuredly will be revealed.\n\nThe second example contains no letters which can be told as it is not clear, which of the letters \"v\" or \"s\" is located at the third position of the hidden word.\n\nIn the third example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nThe fourth example contains no letters which can be told as it is not clear, which of the letters \"*\" is located at the third position of the hidden word.\n\nIn the fifth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the sixth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the seventh example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the eighth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the ninth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the tenth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the eleventh example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the twelfth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the thirteenth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the fourteenth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the fifteenth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the sixteenth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the seventeenth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the eighteenth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the nineteenth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the twentieth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the twentieth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the twentieth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\nIn the twentieth example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second"
    },
    {
        "number": 3914,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, b = map(int, stdin.split())\n    rooms = [int(stdin.split()[i]) for i in range(1, n + 1)]\n    rooms.sort()\n    x = 0\n    for i in range(n):\n        x += rooms[i]\n        if x > b:\n            x -= rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms[i]\n            x += rooms"
    },
    {
        "number": 3915,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    if p == q:\n        return str(p)\n    if p > q:\n        return \"Palindromic tree is better than splay tree\"\n    if p < q:\n        return \"splay tree is better than palindromic tree\"\n    if p == q:\n        return str(p)\n    if p > q:\n        return \"palindromic tree is better than splay tree\"\n    if p < q:\n        return \"splay tree is better than palindromic tree\"\n    \n    \n"
    },
    {
        "number": 3916,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\""
    },
    {
        "number": 3917,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    g = g(0, n)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if g(i, j)!= 0:\n                return str(g(i, j))\n    return str(g(n, n))\n\n-----Constraints-----\n1 <= n <= 10^4\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 GB\n\n-----Alternatives\n\nhttps://www.geeksforgeeks.org/minimum-number-of-ways-to-make-a-string-in-a-given-string/\n\n-----Tests-----\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n>>> solution(\"1 0 0 -1\")\n'1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        ans += (a[i] - b[i])**2\n    return str(ans)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3919,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    S = stdin.split()\n    l_i = 1\n    r_i = N\n    res = 0\n    while l_i < r_i:\n        if S[l_i] == '0':\n            l_i += 1\n        elif S[r_i] == '1':\n            r_i -= 1\n        else:\n            res += 1\n            l_i += 1\n            r_i -= 1\n    return str(res)\n\n-----Sample Output-----\n5\n2\n01001\n2 4\n3 5\n\n-----Explanation-----\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\nThe sequence l_M r_M is non-decreasing.\nThe sequence l_1 r_1 is non-decreasing.\n"
    },
    {
        "number": 3920,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3, a_4, a_5, a_6 = map(int, stdin.split())\n    a_1 = a_1 * 120\n    a_2 = a_2 * 120\n    a_3 = a_3 * 120\n    a_4 = a_4 * 120\n    a_5 = a_5 * 120\n    a_6 = a_6 * 120\n    triangles = []\n    for i in range(1, 7):\n        triangles.append((a_1 + a_2 + a_3 + a_4 + a_5 + a_6) // i)\n    return str(len(triangles))\n\n-----Constraints-----\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 megabyte\n\n-----For input:\n\nThe first line contains an integer, n, denoting the number of test cases. Then n lines follow. Each line contains two space-separated integers a_1, a_2, a_3, a_4, a_5, a_6.\n\nOutput for each test case is an integer \u2014 the number of triangles with the sides of one 1 centimeter, into which the hexagon is split.\n\nConstraints:\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6 \u2264 1000\n\n1 \u2264 a_1, a_"
    },
    {
        "number": 3921,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    max_len = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            continue\n        else:\n            if a[i] + 1 > a[i+1]:\n                a[i] += 1\n                a[i+1] += 1\n                max_len = max(max_len, a[i] + a[i+1])\n            else:\n                a[i] += 1\n                a[i+1] += 1\n                max_len = max(max_len, a[i] + a[i+1])\n    return str(max_len)\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a[i] <= 10^5\n\n-----Time Limit: 1 sec\n-----Memory Limit: 1GB\n\n-----Example 1\nInput\n\n2\n1 2 3 4 6 9\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 2\nInput\n\n9\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 3\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 4\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 5\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 6\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 7\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 8\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 9\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 10\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 11\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 12\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 13\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 14\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 15\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 16\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 17\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 18\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 19\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 20\nInput\n\n1\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n4\n\nExplanation\n\nThe sequences are [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\nExample 21\nInput\n\n1\n"
    },
    {
        "number": 3922,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solution(stdin: str) -> str:\n        \n        def expand(s: str, i: int) -> str:\n            \n            if i == len(s):\n                return s\n            \n            if s[i] == 'E':\n                return s[:i] + s[i+1:]\n            \n            if s[i] == 'l':\n                return s[:i] + s[i+1:] + 'r' + s[i+2:]\n            \n            if s[i] == 'd':\n                return s[:i] + s[i+1:] + 'l' + s[i+2:]\n            \n            if s[i] == 'r':\n                return s[:i] + s[i+1:] + 'd' + s[i+2:]\n            \n            if s[i] == 'u':\n                return s[:i] + s[i+1:] + 'l' + s[i+2:] + 'u' + s[i+3:]\n            \n            if s[i] == 't':\n                return s[:i] + s[i+1:] + 'd' + s[i+2:] + 't' + s[i+3:]\n            \n            if s[i] == 'r':\n                return s[:i] + s[i+1:] + 'l' + s[i+2:] + 'r' + s[i+3:]\n            \n            if s[i] == 'l':\n                return s[:i] + s[i+1:] + 'u' + s[i+2:] + 'l' + s[i+3:]\n            \n            if s[i] =='s':\n                return s[:i] + s[i+1:] + 'r' + s[i+2:] +'s' + s[i+3:]\n            \n            if s[i] =='s':\n                return s[:i] + s[i+1:] + 'r' + s[i+2:] +'s' + s[i+3:]\n            \n            if s[i] =='s':\n                return s[:i] + s[i+1:] + 'r' + s[i+2:] +'s' + s[i+3:]\n            \n            if s[i] =='s':\n                return s[:i] + s[i+1:] + 'r' + s[i+2:] +'s' + s[i+3:]\n            \n            if s[i] =='s':\n                return s[:i] + s[i+1:] + 'r' + s[i+2:] +'s' + s[i+3:]\n            \n            if s[i] =='s':\n                return s[:i] + s[i+1:] + '"
    },
    {
        "number": 3923,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N == 1:\n        return str(A)\n    if N == 2:\n        return str(B)\n    if N == 3:\n        return str(A) + str(B)\n    if N == 4:\n        return str(A) + str(B) + str(A)\n    if N == 5:\n        return str(A) + str(B) + str(A) + str(B)\n    if N == 6:\n        return str(A) + str(B) + str(A) + str(B)\n    if N == 7:\n        return str(A) + str(B) + str(A) + str(B) + str(A)\n    if N == 8:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 9:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A)\n    if N == 10:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 11:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A)\n    if N == 12:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 13:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A)\n    if N == 14:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 15:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A)\n    if N == 16:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 17:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A)\n    if N == 18:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 19:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A)\n    if N == 20:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 21:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A)\n    if N == 22:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 23:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A)\n    if N == 24:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 25:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B) + str(A) + str(B)\n    if N == 26:\n        return str(A) + str(B) + str(A) + str(B) + str(A) + str(B"
    },
    {
        "number": 3924,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        answer += a[i] * (k - a[i])\n    return str(answer)\n"
    },
    {
        "number": 3925,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    s = s[1:]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0, len(s), 2)]\n    s = [s[i:i+2] for i in range(0,"
    },
    {
        "number": 3926,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    r, c = map(int, stdin.split())\n    maze = [list(map(str, input())) for _ in range(n)]\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    visited[r][c] = True\n    \n    def dfs(r, c):\n        if r < 0 or r >= n or c < 0 or c >= m:\n            return\n        if maze[r][c] == '*':\n            return\n        if visited[r][c]:\n            return\n        visited[r][c] = True\n        dfs(r + 1, c)\n        dfs(r - 1, c)\n        dfs(r, c + 1)\n        dfs(r, c - 1)\n        \n    dfs(r, c)\n    return '+'.join([''.join(x) for x in visited])\n\n-----Constraints-----\n\n1 <= n, m <= 10^9\n\n1 <= r, c <= 10^9\n\n1 <= x, y <= 10^9\n\n-----Submissions-----\n\nSample Input\n\n4 4\n3 2\n1 2\n.....\n.***.\n...**\n*....\n....\n\nSample Output\n\n10\n\nExplanation\n\nThe starting cell is at row r and column c.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor example, the maze is represented by the following list:\n\n.***.\n...**\n*....\n....\n\nThe starting cell is at row 2 and column 2.\n\nThe maze is represented by a list of strings, where each string represents a row.\n\nFor"
    },
    {
        "number": 3927,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = sum(a)\n    if m % k!= 0:\n        return \"0\"\n    else:\n        return str(m // k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 3928,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        return a + b\n    if n == 2:\n        return a * b\n    if n == 3:\n        return a * b * a\n    if n == 4:\n        return a * b * a * a\n    if n == 5:\n        return a * b * a * a * a\n    if n == 6:\n        return a * b * a * a * a * a\n    if n == 7:\n        return a * b * a * a * a * a * a\n    if n == 8:\n        return a * b * a * a * a * a * a * a\n    if n == 9:\n        return a * b * a * a * a * a * a * a * a\n    if n == 10:\n        return a * b * a * a * a * a * a * a * a * a\n    if n == 11:\n        return a * b * a * a * a * a * a * a * a * a * a\n    if n == 12:\n        return a * b * a * a * a * a * a * a * a * a * a * a\n    if n == 13:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a\n    if n == 14:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 15:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 16:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 17:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 18:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 19:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 20:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 21:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 22:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 23:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 24:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 25:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 26:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 27:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 28:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 29:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 30:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 31:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 32:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 33:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 34:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 35:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    if n == 36:\n        return a * b * a * a * a * a * a * a * a * a * a * a * a * a *"
    },
    {
        "number": 3929,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    deque = deque(map(int, stdin.split()))\n    answer = 0\n    while len(deque) > 1:\n        if deque[0] == deque[-1]:\n            deque.pop()\n            deque.pop()\n            answer += 1\n        else:\n            answer += 1\n            deque.append(deque.popleft())\n    return str(answer % (10**9 + 7))\n\n-----Sample Output-----\n2\n\n-----Constraints-----\n - 1 \u2264 K \u2264 N \u2264 10^9\n\n-----Input-----\n2 1\n\n-----Output-----\n1\n\nThere is one sequence satisfying the condition: 1,2. One possible way to obtain this sequence is the following:\n - Insert both cards, 1 and 2, at the end of the deque.\n - Eat the card at the beginning of the deque twice.\ndef"
    },
    {
        "number": 3930,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        answer += a[i]**k\n    return str(answer)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 1:\n\nInput\n\n4 2\n2 2 2 2\n\nOutput\n\n8\n\nExample 2:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 3:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 4:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 5:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 6:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 7:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 8:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 9:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 10:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 11:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 12:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 13:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 14:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 15:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 16:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 17:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 18:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 19:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 20:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 21:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 22:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 23:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 24:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 25:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 26:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 sec\n\nExample 27:\n\nInput\n\n4 -3\n3 -6 -3 12\n\nOutput\n\n3"
    },
    {
        "number": 3931,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k, f = map(int, stdin.split())\n    if n < 3 or b < a or k < f:\n        return \"0\"\n    \n    # Polycarp can buy travel card for the route \"BerBank $\\leftrightarrow$ University\" and spend 8 burles.\n    # Note that his second trip \"University\" $\\rightarrow$ \"BerMall\" was made after transshipment, so for this trip Polycarp payed 3 burles. So the minimum total sum equals to 8 + 3 = 11 burles.\n    #\n    # In the second example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the third example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the fourth example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the fifth example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the sixth example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the seventh example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the eighth example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the ninth example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the tenth example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the eleventh example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the twelfth example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the thirteenth example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the fourteenth example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the fifteenth example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the last example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the last example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the last example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n    # In the last example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n    #\n"
    },
    {
        "number": 3932,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 24:\n        return \"NO\"\n    \n    def check(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_2(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_3(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_4(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_5(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_6(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_7(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_8(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_9(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_10(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_11(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_12(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_13(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_14(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_15(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_16(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_17(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_18(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_19(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_20(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_21(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_22(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_23(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_24(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_25(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_26(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_27(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_28(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_29(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_30(n):\n        if n == 1:\n            return True\n        \n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check_tree_31(n):\n        if n"
    },
    {
        "number": 3933,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t_1 = int(stdin.strip())\n    t_2 = int(stdin.strip())\n    t_3 = int(stdin.strip())\n    t_4 = int(stdin.strip())\n    t_5 = int(stdin.strip())\n    t_6 = int(stdin.strip())\n    t_7 = int(stdin.strip())\n    t_8 = int(stdin.strip())\n    t_9 = int(stdin.strip())\n    t_10 = int(stdin.strip())\n    t_11 = int(stdin.strip())\n    t_12 = int(stdin.strip())\n    t_13 = int(stdin.strip())\n    t_14 = int(stdin.strip())\n    t_15 = int(stdin.strip())\n    t_16 = int(stdin.strip())\n    t_17 = int(stdin.strip())\n    t_18 = int(stdin.strip())\n    t_19 = int(stdin.strip())\n    t_20 = int(stdin.strip())\n    t_21 = int(stdin.strip())\n    t_22 = int(stdin.strip())\n    t_23 = int(stdin.strip())\n    t_24 = int(stdin.strip())\n    t_25 = int(stdin.strip())\n    t_26 = int(stdin.strip())\n    t_27 = int(stdin.strip())\n    t_28 = int(stdin.strip())\n    t_29 = int(stdin.strip())\n    t_30 = int(stdin.strip())\n    t_31 = int(stdin.strip())\n    t_32 = int(stdin.strip())\n    t_33 = int(stdin.strip())\n    t_34 = int(stdin.strip())\n    t_35 = int(stdin.strip())\n    t_36 = int(stdin.strip())\n    t_37 = int(stdin.strip())\n    t_38 = int(stdin.strip())\n    t_39 = int(stdin.strip())\n    t_40 = int(stdin.strip())\n    t_41 = int(stdin.strip())\n    t_42 = int(stdin.strip())\n    t_43 = int(stdin.strip())\n    t_44 = int(stdin.strip())\n    t_45 = int(stdin.strip())\n    t_46 = int(stdin.strip())\n    t_47 = int(stdin.strip())\n    t_48 = int(stdin.strip())\n    t_49 = int(stdin.strip())\n    t_50 = int(stdin.strip())\n    t_51 = int(stdin.strip())\n    t_52 = int(stdin.strip())\n    t_53 = int(stdin.strip())\n    t_54 = int(stdin.strip())\n    t_55 = int(stdin.strip())\n    t_56 = int(stdin.strip())\n    t_57 = int(stdin.strip())\n    t_58 = int(stdin.strip())\n    t_59 = int(stdin.strip())\n    t_60 = int(stdin.strip())\n    t_61 = int(stdin.strip())\n    t_62 = int(stdin.strip())\n    t_63 = int(stdin.strip())\n    t_64 = int(stdin.strip())\n    t_65 = int(stdin.strip())\n    t_66 = int(stdin.strip())\n    t_67 = int(stdin.strip())\n    t_68 = int(stdin.strip())\n    t_69 = int(stdin.strip())\n    t_70 = int(stdin.strip())\n    t_71 = int(stdin.strip())\n    t_72 = int(stdin.strip())\n    t_73 = int(stdin.strip())\n    t_74 = int(stdin.strip())\n    t_75 = int(stdin.strip())\n    t_76 = int(stdin.strip())\n    t_77 = int(stdin.strip())\n    t_78 = int(stdin.strip())\n    t_79 = int(stdin.strip())\n    t_80 = int(stdin.strip())\n    t_81 = int(stdin.strip())\n    t_82 = int(stdin.strip())\n    t_83 = int(stdin.strip())\n    t_84 = int(stdin.strip())\n    t_85 = int(stdin.strip())\n    t_86 = int(stdin.strip())\n    t_87 = int(stdin.strip())\n    t_88 = int(stdin.strip())\n    t_89 = int(stdin.strip())\n    t_90 = int(stdin.strip())\n    t_91 = int(stdin.strip())\n    t_92 = int(stdin.strip())\n    t_93 = int(stdin.strip())\n    t_94 = int(stdin.strip())\n    t_95 = int(stdin.strip())\n    t_96 = int(stdin.strip())\n    t_97 = int(stdin.strip())\n    t_98 = int(stdin.strip())\n    t_99 = int(stdin.strip())\n    t_100 = int(stdin.strip())\n    t_101 = int(stdin.strip())\n    t_102 = int(stdin.strip())\n    t_103 = int(stdin.strip())\n    t_104 = int(stdin.strip())\n    t_105 = int(stdin.strip())\n    t_106 = int(stdin.strip())\n    t_107 = int(stdin.strip())\n    t_108 = int(stdin.strip())\n    t_109 = int(stdin.strip())\n    t_110 = int(stdin.strip())\n    t_111 = int(stdin.strip())\n    t_112 = int(stdin.strip())\n    "
    },
    {
        "number": 3934,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    \n    u = 0\n    v = 0\n    for i in range(n):\n        u, v = map(int, stdin.split())\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n        if u < v:\n            u, v = v, u\n        if u == v:\n            continue\n        if u > v:\n            u, v = v, u\n"
    },
    {
        "number": 3935,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    b = set(map(int, b.split()))\n    \n    def is_bipartite(b):\n        for i in range(len(b)):\n            for j in range(i+1, len(b)):\n                if b[i]!= b[j]:\n                    return False\n        return True\n    \n    def erase(b, k):\n        for i in range(len(b)):\n            if b[i] == k:\n                b.remove(b[i])\n                k -= 1\n                if k == 0:\n                    return True\n        return False\n    \n    def solution(b):\n        if len(b) == 1:\n            return 0\n        \n        if is_bipartite(b):\n            return len(b)\n        \n        for i in range(len(b)):\n            if erase(b, i):\n                return solution(b)\n        \n        return len(b)\n    \n    return str(solution(b))\n"
    },
    {
        "number": 3936,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n"
    },
    {
        "number": 3937,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[-1] == a[-2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n-----Constraints-----\n\n1 <= n, m, k <= 10^5\n1 <= a_1, a_2,..., a_{k} <= 10^12\n\n-----Time Limit-----\n\nO(n + m + k)\n\nO(n + m + k)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 3938,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    black_cells = set()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                black_cells.add((i, j))\n    \n    def dfs(x, y, cost):\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return cost\n        \n        if grid[x][y] == 0:\n            grid[x][y] = cost + dfs(x + 1, y, cost)\n            return grid[x][y]\n        \n        if grid[x][y] == 2:\n            grid[x][y] = cost + dfs(x + 1, y + 1, cost)\n            return grid[x][y]\n        \n        if grid[x][y] == 3:\n            grid[x][y] = cost + dfs(x + 1, y + 1, cost + 1)\n            return grid[x][y]\n        \n        return cost\n    \n    answer = 0\n    for i in range(n):\n        for j in range(n):\n            answer = max(answer, dfs(i, j, 0))\n    \n    return str(answer)\n\n-----Constraints-----\n\n1 <= n, m <= 100\n1 <= x_{i1}, y_{i1} <= n\n1 <= x_{i2}, y_{i2} <= n\n\n[input]\n\nThe first line contains an integer $n$ denoting the size of the square grid.\n\nThe second line contains $m$ integers $x_{i1} $ y_{i1} $ x_{i2} $ y_{i2}$ denoting the coordinates of the bottom-left and the top-right corner cells of the $i$-th black rectangle.\n\nOutput\n\nPrint a single integer, the minimum total cost of painting the whole square in white.\n\n\n[output]\n\nPrint a single integer, the minimum total cost of painting the whole square in white.\n\n\n[constraints]\n\n1 <= n, m <= 100\n1 <= x_{i1}, y_{i1} <= n\n1 <= x_{i2}, y_{i2} <= n\n\n[input]\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 10^{9}$, $0 \\le m \\le 50$)\u00a0\u2014 the size of the square grid and the number of black rectangles.\n\nEach of the next $m$ lines contains four integers $x_{i1}$ $y_{i1}$ $x_{i2} $ y_{i2}$ ($1 \\le x_{i1} \\le x_{i2} \\le n$, $1 \\le y_{i1} \\le y_{i2} \\le n$)\u00a0\u2014 the coordinates of the bottom-left and the top-right corner cells of the $i$-th black rectangle.\n\nThe rectangles may intersect.\n\n\n[output]\n\nPrint a single integer, the minimum total cost of painting the whole square in white.\n\n\n[example]\n\nInput\n\n10 2\n4 1 5 10\n1 4 10 5\n\nOutput\n\n4\n\nInput\n\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\nOutput\n\n3\n\n\n-----Constraints-----\n\n1 <= n, m <= 100\n1 <= x_{i1}, y_{i1} <= n\n1 <= x_{i2}, y_{i2} <= n\n\n[input]\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 10^{9}$, $0 \\le m \\le 50$)\u00a0\u2014 the size of the square grid and the number of black rectangles.\n\nEach of the next $m$ lines contains four integers $x_{i1} $ y_{i1} $ x_{i2} $ y_{i2}$ ($1 \\le x_{i1} \\le x_{i2} \\le n$, $1 \\le y_{i1} \\le y_{i2} \\le n$)\u00a0\u2014 the coordinates of the bottom-left and the top-right corner cells of the $i$-th black rectangle.\n\nThe rectangles may intersect.\n\n\n[output]\n\nPrint a single integer, the minimum total cost of painting the whole square in white.\n\n\n[example]\n\nInput\n\n10 2\n4 1 5 10\n1 4 10 5\n\nOutput\n\n4\n\nInput\n\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\nOutput\n\n3\n\n\n-----Constraints-----\n\n1 <= n, m <= 100\n1 <= x_{i1}, y_{i1} <= n\n1 <= x_{i2}, y_{i2} <= n\n\n[input]\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 10^{9}$, $0 \\le m \\le 50$)\u00a0\u2014 the size of the square grid and the number of black rectangles.\n\nEach of the next $m$ lines contains four integers $x_{i1} $ y_{i1} $ x_{i2} $ y_{i2}$ ($1 \\le x_{i1} \\le x_{i2} \\le n$, $1 \\le y_{i1} \\le y_{i2} \\le n$)\u00a0\u2014 the coordinates of the bottom-left and the top-right corner cells of the $i$-th black rectangle.\n\nThe rectangles may intersect.\n\n\n[output]\n\nPrint a single integer, the minimum total cost of painting the whole square in white.\n\n\n[example]\n\nInput\n\n10 2\n4 1 5 10\n1 4 10 5\n\nOutput\n\n4\n\nInput\n\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\nOutput\n\n3\n\n\n-----Constraints-----\n\n1 <= n, m <= 100\n1 <= x_{i1}, y_{i1} <= n\n1 <= x_{i2}, y_{i2} <= n\n\n[input]\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 10^{9}$, $0 \\le m \\le 50$)\u00a0\u2014 the size of the square grid and the number of black rectangles.\n\nEach of the next $m$ lines contains four integers $x_{i1} $ y_{i1} $ x_{i2} $ y_{i2}$ ($1 \\le x_{i1} \\le x_{i2} \\le n$, $1 \\le y_{i1} \\le y_{i2} \\le n$)\u00a0\u2014 the coordinates of the bottom-left and the top-"
    },
    {
        "number": 3939,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k == 1:\n        return 'no'\n    if k == 2:\n        return 'yes'\n    if k == 3:\n        return 'yes'\n    if k == 4:\n        return 'no'\n    if k == 5:\n        return 'no'\n    if k == 6:\n        return 'no'\n    if k == 7:\n        return 'no'\n    if k == 8:\n        return 'no'\n    if k == 9:\n        return 'no'\n    if k == 10:\n        return 'no'\n    if k == 11:\n        return 'no'\n    if k == 12:\n        return 'no'\n    if k == 13:\n        return 'no'\n    if k == 14:\n        return 'no'\n    if k == 15:\n        return 'no'\n    if k == 16:\n        return 'no'\n    if k == 17:\n        return 'no'\n    if k == 18:\n        return 'no'\n    if k == 19:\n        return 'no'\n    if k == 20:\n        return 'no'\n    if k == 21:\n        return 'no'\n    if k == 22:\n        return 'no'\n    if k == 23:\n        return 'no'\n    if k == 24:\n        return 'no'\n    if k == 25:\n        return 'no'\n    if k == 26:\n        return 'no'\n    if k == 27:\n        return 'no'\n    if k == 28:\n        return 'no'\n    if k == 29:\n        return 'no'\n    if k == 30:\n        return 'no'\n    if k == 31:\n        return 'no'\n    if k == 32:\n        return 'no'\n    if k == 33:\n        return 'no'\n    if k == 34:\n        return 'no'\n    if k == 35:\n        return 'no'\n    if k == 36:\n        return 'no'\n    if k == 37:\n        return 'no'\n    if k == 38:\n        return 'no'\n    if k == 39:\n        return 'no'\n    if k == 40:\n        return 'no'\n    if k == 41:\n        return 'no'\n    if k == 42:\n        return 'no'\n    if k == 43:\n        return 'no'\n    if k == 44:\n        return 'no'\n    if k == 45:\n        return 'no'\n    if k == 46:\n        return 'no'\n    if k == 47:\n        return 'no'\n    if k == 48:\n        return 'no'\n    if k == 49:\n        return 'no'\n    if k == 50:\n        return 'no'\n    if k == 51:\n        return 'no'\n    if k == 52:\n        return 'no'\n    if k == 53:\n        return 'no'\n    if k == 54:\n        return 'no'\n    if k == 55:\n        return 'no'\n    if k == 56:\n        return 'no'\n    if k == 57:\n        return 'no'\n    if k == 58:\n        return 'no'\n    if k == 59:\n        return 'no'\n    if k == 60:\n        return 'no'\n    if k == 61:\n        return 'no'\n    if k == 62:\n        return 'no'\n    if k == 63:\n        return 'no'\n    if k == 64:\n        return 'no'\n    if k == 65:\n        return 'no'\n    if k == 66:\n        return 'no'\n    if k == 67:\n        return 'no'\n    if k == 68:\n        return 'no'\n    if k == 69:\n        return 'no'\n    if k == 70:\n        return 'no'\n    if k == 71:\n        return 'no'\n    if k == 72:\n        return 'no'\n    if k == 73:\n        return 'no'\n    if k == 74:\n        return 'no'\n    if k == 75:\n        return 'no'\n    if k == 76:\n        return 'no'\n    if k == 77:\n        return 'no'\n    if k == 78:\n        return 'no'\n    if k == 79:\n        return 'no'\n    if k == 80:\n        return 'no'\n    if k == 81:\n        return 'no'\n    if k == 82:\n        return 'no'\n    if k == 83:\n        return 'no'\n    if k == 84:\n        return 'no'\n    if k == 85:\n        return 'no'\n    if k == 86:\n        return 'no'\n    if k == 87:\n        return 'no'\n    if k == 88:\n        return 'no'\n    if k == 89:\n        return 'no'\n    if k == 90:\n        return 'no'\n    if k == 91:\n        return 'no'\n    if k == 92:\n        return 'no'\n    if k == 93:\n        return 'no'\n    if k == 94:\n        return 'no'\n    if k == 95:\n        return 'no'\n    if k == 96:\n        return 'no'\n    if k == 97:\n        return 'no'\n    if k == 98:\n        return 'no'\n    if k == 99:\n        return 'no'\n    if k == 100:\n        return 'no'\n    if k == 101:\n        return 'no'\n    if k == 102:\n        return 'no'\n    if k == 103:\n        return 'no'\n    if k == 104:\n        return 'no'\n    if k"
    },
    {
        "number": 3940,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = len(a)\n    if m == 0:\n        return '0'\n    if m == 1:\n        return str(a[0])\n    if m == 2:\n        return str(a[0] + a[1])\n    if m == 3:\n        return str(a[0] + a[1] + a[2])\n    if m == 4:\n        return str(a[0] + a[1] + a[2] + a[3])\n    if m == 5:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4])\n    if m == 6:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5])\n    if m == 7:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6])\n    if m == 8:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7])\n    if m == 9:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8])\n    if m == 10:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9])\n    if m == 11:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10])\n    if m == 12:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11])\n    if m == 13:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12])\n    if m == 14:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13])\n    if m == 15:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14])\n    if m == 16:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15])\n    if m == 17:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16])\n    if m == 18:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17])\n    if m == 19:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18])\n    if m == 20:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18] + a[19])\n    if m == 21:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18] + a[19] + a[20])\n    if m == 22:\n        return str(a[0] + a[1] + a[2] + a[3] + a["
    },
    {
        "number": 3941,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    r_1, r_2, r_3 = map(int, stdin.split())\n    r_1 -= 1\n    r_2 -= 1\n    r_3 -= 1\n    if r_1 == r_2 == r_3:\n        return \"YES\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r_1 == r_3 or r_2 == r_3:\n        return \"NO\"\n    if r_1 == r_2 or r"
    },
    {
        "number": 3942,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    answer = 0\n    for i in range(len(s)):\n        if s[i] == '(' or s[i] == ')':\n            answer += 1\n    return answer\n\ndef"
    },
    {
        "number": 3943,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return '-1'\n    if a == b:\n        return '0'\n    if a % b == 0:\n        return '-1'\n    if a % b == 1:\n        return '0'\n    if a % b == 2:\n        return '-1'\n    if a % b == 3:\n        return '0'\n    if a % b == 4:\n        return '-1'\n    if a % b == 5:\n        return '0'\n    if a % b == 6:\n        return '-1'\n    if a % b == 7:\n        return '0'\n    if a % b == 8:\n        return '-1'\n    if a % b == 9:\n        return '0'\n    if a % b == 10:\n        return '-1'\n    if a % b == 11:\n        return '0'\n    if a % b == 12:\n        return '-1'\n    if a % b == 13:\n        return '0'\n    if a % b == 14:\n        return '-1'\n    if a % b == 15:\n        return '0'\n    if a % b == 16:\n        return '-1'\n    if a % b == 17:\n        return '0'\n    if a % b == 18:\n        return '-1'\n    if a % b == 19:\n        return '0'\n    if a % b == 20:\n        return '-1'\n    if a % b == 21:\n        return '0'\n    if a % b == 22:\n        return '-1'\n    if a % b == 23:\n        return '0'\n    if a % b == 24:\n        return '-1'\n    if a % b == 25:\n        return '0'\n    if a % b == 26:\n        return '-1'\n    if a % b == 27:\n        return '0'\n    if a % b == 28:\n        return '-1'\n    if a % b == 29:\n        return '0'\n    if a % b == 30:\n        return '-1'\n    if a % b == 31:\n        return '0'\n    if a % b == 32:\n        return '-1'\n    if a % b == 33:\n        return '0'\n    if a % b == 34:\n        return '-1'\n    if a % b == 35:\n        return '0'\n    if a % b == 36:\n        return '-1'\n    if a % b == 37:\n        return '0'\n    if a % b == 38:\n        return '-1'\n    if a % b == 39:\n        return '0'\n    if a % b == 40:\n        return '-1'\n    if a % b == 41:\n        return '0'\n    if a % b == 42:\n        return '-1'\n    if a % b == 43:\n        return '0'\n    if a % b == 44:\n        return '-1'\n    if a % b == 45:\n        return '0'\n    if a % b == 46:\n        return '-1'\n    if a % b == 47:\n        return '0'\n    if a % b == 48:\n        return '-1'\n    if a % b == 49:\n        return '0'\n    if a % b == 50:\n        return '-1'\n    if a % b == 51:\n        return '0'\n    if a % b == 52:\n        return '-1'\n    if a % b == 53:\n        return '0'\n    if a % b == 54:\n        return '-1'\n    if a % b == 55:\n        return '0'\n    if a % b == 56:\n        return '-1'\n    if a % b == 57:\n        return '0'\n    if a % b == 58:\n        return '-1'\n    if a % b == 59:\n        return '0'\n    if a % b == 60:\n        return '-1'\n    if a % b == 61:\n        return '0'\n    if a % b == 62:\n        return '-1'\n    if a % b == 63:\n        return '0'\n    if a % b == 64:\n        return '-1'\n    if a % b == 65:\n        return '0'\n    if a % b == 66:\n        return '-1'\n    if a % b == 67:\n        return '0'\n    if a % b == 68:\n        return '-1'\n    if a % b == 69:\n        return '0'\n    if a % b == 70:\n        return '-1'\n    if a % b == 71:\n        return '0'\n    if a % b == 72:\n        return '-1'\n    if a % b == 73:\n        return '0'\n    if a % b == 74:\n        return '-1'\n    if a % b == 75:\n        return '0'\n    if a % b == 76:\n        return '-1'\n    if a % b == 77:\n        return '0'\n    if a % b == 78:\n        return '-1'\n    if a % b == 79:\n        return '0'\n    if a % b == 80:\n        return '-1'\n    if a % b == 81:\n        return '0'\n    if a % b == 82:\n        return '-1'\n    if a % b == 83:\n        return '0'\n    if a % b == 84:\n        return '-1'\n    if a % b == 85:\n        return '0'\n    if a % b == 86:\n        return '-1'\n    if a % b == 87:\n        return '0'\n    if a % b == 88:\n        return '-1'\n    if a % b == 89:\n        return '0'\n    if a % b == 90:\n        return '-1'\n    if a % b == 91:\n        return '0'\n    if a % b == 92:\n        return '-1'\n    if a % b == 93:\n        return '0'\n    if a % b == 94:\n        return '-1'\n    if a % b == 95:"
    },
    {
        "number": 3944,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    deck = [list(map(int, input().split())) for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 1:\n                deck[i][j] = 'a'\n            elif deck[i][j] == 2:\n                deck[i][j] = 'b'\n            elif deck[i][j] == 3:\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):\n            if deck[i][j] == 'a':\n                deck[i][j] = 'a'\n            elif deck[i][j] == 'b':\n                deck[i][j] = 'b'\n            elif deck[i][j] == 'c':\n                deck[i][j] = 'c'\n    for i in range(N):\n        for j in range(M):"
    },
    {
        "number": 3945,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    x = [list(map(int, stdin.split())) for _ in range(m)]\n    x.sort(key=lambda x: x[0])\n    x.sort(key=lambda x: x[1])\n    x.sort(key=lambda x: x[2])\n    x.sort(key=lambda x: x[3])\n    x.sort(key=lambda x: x[4])\n    x.sort(key=lambda x: x[5])\n    x.sort(key=lambda x: x[6])\n    x.sort(key=lambda x: x[7])\n    x.sort(key=lambda x: x[8])\n    x.sort(key=lambda x: x[9])\n    x.sort(key=lambda x: x[10])\n    x.sort(key=lambda x: x[11])\n    x.sort(key=lambda x: x[12])\n    x.sort(key=lambda x: x[13])\n    x.sort(key=lambda x: x[14])\n    x.sort(key=lambda x: x[15])\n    x.sort(key=lambda x: x[16])\n    x.sort(key=lambda x: x[17])\n    x.sort(key=lambda x: x[18])\n    x.sort(key=lambda x: x[19])\n    x.sort(key=lambda x: x[20])\n    x.sort(key=lambda x: x[21])\n    x.sort(key=lambda x: x[22])\n    x.sort(key=lambda x: x[23])\n    x.sort(key=lambda x: x[24])\n    x.sort(key=lambda x: x[25])\n    x.sort(key=lambda x: x[26])\n    x.sort(key=lambda x: x[27])\n    x.sort(key=lambda x: x[28])\n    x.sort(key=lambda x: x[29])\n    x.sort(key=lambda x: x[30])\n    x.sort(key=lambda x: x[31])\n    x.sort(key=lambda x: x[32])\n    x.sort(key=lambda x: x[33])\n    x.sort(key=lambda x: x[34])\n    x.sort(key=lambda x: x[35])\n    x.sort(key=lambda x: x[36])\n    x.sort(key=lambda x: x[37])\n    x.sort(key=lambda x: x[38])\n    x.sort(key=lambda x: x[39])\n    x.sort(key=lambda x: x[40])\n    x.sort(key=lambda x: x[41])\n    x.sort(key=lambda x: x[42])\n    x.sort(key=lambda x: x[43])\n    x.sort(key=lambda x: x[44])\n    x.sort(key=lambda x: x[45])\n    x.sort(key=lambda x: x[46])\n    x.sort(key=lambda x: x[47])\n    x.sort(key=lambda x: x[48])\n    x.sort(key=lambda x: x[49])\n    x.sort(key=lambda x: x[50])\n    x.sort(key=lambda x: x[51])\n    x.sort(key=lambda x: x[52])\n    x.sort(key=lambda x: x[53])\n    x.sort(key=lambda x: x[54])\n    x.sort(key=lambda x: x[55])\n    x.sort(key=lambda x: x[56])\n    x.sort(key=lambda x: x[57])\n    x.sort(key=lambda x: x[58])\n    x.sort(key=lambda x: x[59])\n    x.sort(key=lambda x: x[60])\n    x.sort(key=lambda x: x[61])\n    x.sort(key=lambda x: x[62])\n    x.sort(key=lambda x: x[63])\n    x.sort(key=lambda x: x[64])\n    x.sort(key=lambda x: x[65])\n    x.sort(key=lambda x: x[66])\n    x.sort(key=lambda x: x[67])\n    x.sort(key=lambda x: x[68])\n    x.sort(key=lambda x: x[69])\n    x.sort(key=lambda"
    },
    {
        "number": 3946,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    w.sort()\n    r = 0\n    for i in range(n):\n        if w[i] == 0:\n            r += 1\n    for i in range(n):\n        if w[i] == 1:\n            r -= 1\n    return str(r)\n\ndef"
    },
    {
        "number": 3947,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    answer = 0\n    for i in range(n):\n        answer += min(arr[i], arr[i+1])\n    return str(answer)\n"
    },
    {
        "number": 3948,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"No\"\n    if n == k:\n        return \"Yes\"\n    if n == k - 1:\n        return \"Yes\"\n    if n == k - 2:\n        return \"Yes\"\n    if n == k - 3:\n        return \"Yes\"\n    if n == k - 4:\n        return \"Yes\"\n    if n == k - 5:\n        return \"Yes\"\n    if n == k - 6:\n        return \"Yes\"\n    if n == k - 7:\n        return \"Yes\"\n    if n == k - 8:\n        return \"Yes\"\n    if n == k - 9:\n        return \"Yes\"\n    if n == k - 10:\n        return \"Yes\"\n    if n == k - 11:\n        return \"Yes\"\n    if n == k - 12:\n        return \"Yes\"\n    if n == k - 13:\n        return \"Yes\"\n    if n == k - 14:\n        return \"Yes\"\n    if n == k - 15:\n        return \"Yes\"\n    if n == k - 16:\n        return \"Yes\"\n    if n == k - 17:\n        return \"Yes\"\n    if n == k - 18:\n        return \"Yes\"\n    if n == k - 19:\n        return \"Yes\"\n    if n == k - 20:\n        return \"Yes\"\n    if n == k - 21:\n        return \"Yes\"\n    if n == k - 22:\n        return \"Yes\"\n    if n == k - 23:\n        return \"Yes\"\n    if n == k - 24:\n        return \"Yes\"\n    if n == k - 25:\n        return \"Yes\"\n    if n == k - 26:\n        return \"Yes\"\n    if n == k - 27:\n        return \"Yes\"\n    if n == k - 28:\n        return \"Yes\"\n    if n == k - 29:\n        return \"Yes\"\n    if n == k - 30:\n        return \"Yes\"\n    if n == k - 31:\n        return \"Yes\"\n    if n == k - 32:\n        return \"Yes\"\n    if n == k - 33:\n        return \"Yes\"\n    if n == k - 34:\n        return \"Yes\"\n    if n == k - 35:\n        return \"Yes\"\n    if n == k - 36:\n        return \"Yes\"\n    if n == k - 37:\n        return \"Yes\"\n    if n == k - 38:\n        return \"Yes\"\n    if n == k - 39:\n        return \"Yes\"\n    if n == k - 40:\n        return \"Yes\"\n    if n == k - 41:\n        return \"Yes\"\n    if n == k - 42:\n        return \"Yes\"\n    if n == k - 43:\n        return \"Yes\"\n    if n == k - 44:\n        return \"Yes\"\n    if n == k - 45:\n        return \"Yes\"\n    if n == k - 46:\n        return \"Yes\"\n    if n == k - 47:\n        return \"Yes\"\n    if n == k - 48:\n        return \"Yes\"\n    if n == k - 49:\n        return \"Yes\"\n    if n == k - 50:\n        return \"Yes\"\n    if n == k - 51:\n        return \"Yes\"\n    if n == k - 52:\n        return \"Yes\"\n    if n == k - 53:\n        return \"Yes\"\n    if n == k - 54:\n        return \"Yes\"\n    if n == k - 55:\n        return \"Yes\"\n    if n == k - 56:\n        return \"Yes\"\n    if n == k - 57:\n        return \"Yes\"\n    if n == k - 58:\n        return \"Yes\"\n    if n == k - 59:\n        return \"Yes\"\n    if n == k - 60:\n        return \"Yes\"\n    if n == k - 61:\n        return \"Yes\"\n    if n == k - 62:\n        return \"Yes\"\n    if n == k - 63:\n        return \"Yes\"\n    if n == k - 64:\n        return \"Yes\"\n    if n == k - 65:\n        return \"Yes\"\n    if n == k - 66:\n        return \"Yes\"\n    if n == k - 67:\n        return \"Yes\"\n    if n == k - 68:\n        return \"Yes\"\n    if n == k - 69:\n        return \"Yes\"\n    if n == k - 70:\n        return \"Yes\"\n    if n == k - 71:\n        return \"Yes\"\n    if n == k - 72:\n        return \"Yes\"\n    if n == k - 73:\n        return \"Yes\"\n    if n == k - 74:\n        return \"Yes\"\n    if n == k - 75:\n        return \"Yes\"\n    if n == k - 76:\n        return \"Yes\"\n    if n == k - 77:\n        return \"Yes\"\n    if n == k - 78:\n        return \"Yes\"\n    if n == k - 79:\n        return \"Yes\"\n    if n == k - 80:\n        return \"Yes\"\n    if n == k - 81:\n        return \"Yes\"\n    if n == k - 82:\n        return \"Yes\"\n    if n == k - 83:\n        return \"Yes\"\n    if n == k - 84:\n        return \"Yes\"\n    if n == k - 85:\n        return \"Yes\"\n    if n == k - 86:\n        return \"Yes\"\n    if n == k - 87:\n        return \"Yes\"\n    if n == k - 88:\n        return \"Yes\"\n    if n == k - 89:\n        return \"Yes\"\n    if n == k - 90:\n        return \"Yes\"\n    if n == k - 91:\n        return \"Yes\"\n    if n == k - 92:\n        return \"Yes\"\n    "
    },
    {
        "number": 3949,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    maze = [list(stdin[i:i+m]) for i in range(0, len(stdin), m)]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    maze = [[c == \"#\" for c in row] for row in maze]\n    "
    },
    {
        "number": 3950,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if q == 1:\n        return \"YES\"\n    if q == 2:\n        return \"NO\"\n    if q == 3:\n        return \"YES\"\n    if q == 4:\n        return \"YES\"\n    if q == 5:\n        return \"YES\"\n    if q == 6:\n        return \"YES\"\n    if q == 7:\n        return \"YES\"\n    if q == 8:\n        return \"YES\"\n    if q == 9:\n        return \"YES\"\n    if q == 10:\n        return \"YES\"\n    if q == 11:\n        return \"YES\"\n    if q == 12:\n        return \"YES\"\n    if q == 13:\n        return \"YES\"\n    if q == 14:\n        return \"YES\"\n    if q == 15:\n        return \"YES\"\n    if q == 16:\n        return \"YES\"\n    if q == 17:\n        return \"YES\"\n    if q == 18:\n        return \"YES\"\n    if q == 19:\n        return \"YES\"\n    if q == 20:\n        return \"YES\"\n    if q == 21:\n        return \"YES\"\n    if q == 22:\n        return \"YES\"\n    if q == 23:\n        return \"YES\"\n    if q == 24:\n        return \"YES\"\n    if q == 25:\n        return \"YES\"\n    if q == 26:\n        return \"YES\"\n    if q == 27:\n        return \"YES\"\n    if q == 28:\n        return \"YES\"\n    if q == 29:\n        return \"YES\"\n    if q == 30:\n        return \"YES\"\n    if q == 31:\n        return \"YES\"\n    if q == 32:\n        return \"YES\"\n    if q == 33:\n        return \"YES\"\n    if q == 34:\n        return \"YES\"\n    if q == 35:\n        return \"YES\"\n    if q == 36:\n        return \"YES\"\n    if q == 37:\n        return \"YES\"\n    if q == 38:\n        return \"YES\"\n    if q == 39:\n        return \"YES\"\n    if q == 40:\n        return \"YES\"\n    if q == 41:\n        return \"YES\"\n    if q == 42:\n        return \"YES\"\n    if q == 43:\n        return \"YES\"\n    if q == 44:\n        return \"YES\"\n    if q == 45:\n        return \"YES\"\n    if q == 46:\n        return \"YES\"\n    if q == 47:\n        return \"YES\"\n    if q == 48:\n        return \"YES\"\n    if q == 49:\n        return \"YES\"\n    if q == 50:\n        return \"YES\"\n    if q == 51:\n        return \"YES\"\n    if q == 52:\n        return \"YES\"\n    if q == 53:\n        return \"YES\"\n    if q == 54:\n        return \"YES\"\n    if q == 55:\n        return \"YES\"\n    if q == 56:\n        return \"YES\"\n    if q == 57:\n        return \"YES\"\n    if q == 58:\n        return \"YES\"\n    if q == 59:\n        return \"YES\"\n    if q == 60:\n        return \"YES\"\n    if q == 61:\n        return \"YES\"\n    if q == 62:\n        return \"YES\"\n    if q == 63:\n        return \"YES\"\n    if q == 64:\n        return \"YES\"\n    if q == 65:\n        return \"YES\"\n    if q == 66:\n        return \"YES\"\n    if q == 67:\n        return \"YES\"\n    if q == 68:\n        return \"YES\"\n    if q == 69:\n        return \"YES\"\n    if q == 70:\n        return \"YES\"\n    if q == 71:\n        return \"YES\"\n    if q == 72:\n        return \"YES\"\n    if q == 73:\n        return \"YES\"\n    if q == 74:\n        return \"YES\"\n    if q == 75:\n        return \"YES\"\n    if q == 76:\n        return \"YES\"\n    if q == 77:\n        return \"YES\"\n    if q == 78:\n        return \"YES\"\n    if q == 79:\n        return \"YES\"\n    if q == 80:\n        return \"YES\"\n    if q == 81:\n        return \"YES\"\n    if q == 82:\n        return \"YES\"\n    if q == 83:\n        return \"YES\"\n    if q == 84:\n        return \"YES\"\n    if q == 85:\n        return \"YES\"\n    if q == 86:\n        return \"YES\"\n    if q == 87:\n        return \"YES\"\n    if q == 88:\n        return \"YES\"\n    if q == 89:\n        return \"YES\"\n    if q == 90:\n        return \"YES\"\n    if q == 91:\n        return \"YES\"\n    if q == 92:\n"
    },
    {
        "number": 3951,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = gcd % a[i]\n    return str(gcd)\n"
    },
    {
        "number": 3952,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return"
    },
    {
        "number": 3953,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return -1\n    \n    row = []\n    col = []\n    for i in range(n):\n        row.append(stdin[i].strip())\n        col.append(stdin[i + 1].strip())\n    \n    # print(row)\n    # print(col)\n    \n    # print(row[0])\n    # print(col[0])\n    \n    # print(row[-1])\n    # print(col[-1])\n    \n    # print(row[-2])\n    # print(col[-2])\n    \n    # print(row[-3])\n    # print(col[-3])\n    \n    # print(row[-4])\n    # print(col[-4])\n    \n    # print(row[-5])\n    # print(col[-5])\n    \n    # print(row[-6])\n    # print(col[-6])\n    \n    # print(row[-7])\n    # print(col[-7])\n    \n    # print(row[-8])\n    # print(col[-8])\n    \n    # print(row[-9])\n    # print(col[-9])\n    \n    # print(row[-10])\n    # print(col[-10])\n    \n    # print(row[-11])\n    # print(col[-11])\n    \n    # print(row[-12])\n    # print(col[-12])\n    \n    # print(row[-13])\n    # print(col[-13])\n    \n    # print(row[-14])\n    # print(col[-14])\n    \n    # print(row[-15])\n    # print(col[-15])\n    \n    # print(row[-16])\n    # print(col[-16])\n    \n    # print(row[-17])\n    # print(col[-17])\n    \n    # print(row[-18])\n    # print(col[-18])\n    \n    # print(row[-19])\n    # print(col[-19])\n    \n    # print(row[-20])\n    # print(col[-20])\n    \n    # print(row[-21])\n    # print(col[-21])\n    \n    # print(row[-22])\n    # print(col[-22])\n    \n    # print(row[-23])\n    # print(col[-23])\n    \n    # print(row[-24])\n    # print(col[-24])\n    \n    # print(row[-25])\n    # print(col[-25])\n    \n    # print(row[-26])\n    # print(col[-26])\n    \n    # print(row[-27])\n    # print(col[-27])\n    \n    # print(row[-28])\n    # print(col[-28])\n    \n    # print(row[-29])\n    # print(col[-29])\n    \n    # print(row[-30])\n    # print(col[-30])\n    \n    # print(row[-31])\n    # print(col[-31])\n    \n    # print(row[-32])\n    # print(col[-32])\n    \n    # print(row[-33])\n    # print(col[-33])\n    \n    # print(row[-34])\n    # print(col[-34])\n    \n    # print(row[-35])\n    # print(col[-35])\n    \n    # print(row[-36])\n    # print(col[-36])\n    \n    # print(row[-37])\n    # print(col[-37])\n    \n    # print(row[-38])\n    # print(col[-38])\n    \n    # print(row[-39])\n    # print(col[-39])\n    \n    # print(row[-40])\n    # print(col[-40])\n    \n    # print(row[-41])\n    # print(col[-41])\n    \n    # print(row[-42])\n    # print(col[-42])\n    \n    # print(row[-43])\n    # print(col[-43])\n    \n    # print(row[-44])\n    # print(col[-44])\n    \n    # print(row[-45])\n    # print(col[-45])\n    \n    # print(row[-46])\n    # print(col[-46])\n    \n    # print(row[-47])\n    # print(col[-47])\n    \n    # print(row[-48])\n    # print(col[-48])\n    \n    # print(row[-49])\n    # print(col[-49])\n    \n    # print(row[-50])\n    # print(col[-50])\n    \n    # print(row[-51])\n    # print(col[-51])\n    \n    # print(row[-52])\n    # print(col[-52])\n    \n    # print(row[-53])\n    # print(col[-53])\n    \n    # print(row[-54])\n    # print(col[-54])\n    \n    # print(row[-55])\n    # print(col[-55])\n    \n    # print(row[-56])\n    "
    },
    {
        "number": 3954,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            m += a[i]\n        else:\n            m += a[i+1]\n    return str(m)\n"
    },
    {
        "number": 3955,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    \n    def get_max_or_min(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_2(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_3(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_4(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_5(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_6(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_7(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_8(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_9(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_10(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_11(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_12(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_13(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_14(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_15(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_16(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_17(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_18(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_19(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_20(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_21(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_min += 1\n            else:\n                max_or_min -= 1\n        return max_or_min\n    \n    def get_max_or_min_22(a):\n        max_or_min = 0\n        for i in range(len(a)):\n            if a[i] == 1:\n                max_or_"
    },
    {
        "number": 3956,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    answer = []\n    for i in range(1,K+1):\n        answer.append(i)\n    for i in range(2,K+1):\n        answer.append(i)\n    for i in range(3,K+1):\n        answer.append(i)\n    for i in range(4,K+1):\n        answer.append(i)\n    return ''.join(str(i) for i in answer)\n"
    },
    {
        "number": 3957,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    u_1, u_2 = map(int, stdin.split())\n    u_1 -= 1\n    u_2 -= 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1\n    u_1 += 1\n    u_2 += 1"
    },
    {
        "number": 3958,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return -1\n    \n    days = [0] * n\n    \n    for i in range(1, n):\n        days[i] = days[i - 1] + 1\n        days[i] %= 7\n        \n    for i in range(n - 2, -1, -1):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n - 1, -1, -1):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days[i + 1] + 1\n        days[i] %= 7\n        \n    for i in range(n):\n        days[i] = days"
    },
    {
        "number": 3959,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    gyms = [list(map(int, input().split())) for _ in range(n)]\n    gyms.sort(key=lambda x: x[0])\n    gyms.sort(key=lambda x: x[1])\n    gyms.sort(key=lambda x: x[2])\n    gyms.sort(key=lambda x: x[3])\n    gyms.sort(key=lambda x: x[4])\n    gyms.sort(key=lambda x: x[5])\n    gyms.sort(key=lambda x: x[6])\n    gyms.sort(key=lambda x: x[7])\n    gyms.sort(key=lambda x: x[8])\n    gyms.sort(key=lambda x: x[9])\n    gyms.sort(key=lambda x: x[10])\n    gyms.sort(key=lambda x: x[11])\n    gyms.sort(key=lambda x: x[12])\n    gyms.sort(key=lambda x: x[13])\n    gyms.sort(key=lambda x: x[14])\n    gyms.sort(key=lambda x: x[15])\n    gyms.sort(key=lambda x: x[16])\n    gyms.sort(key=lambda x: x[17])\n    gyms.sort(key=lambda x: x[18])\n    gyms.sort(key=lambda x: x[19])\n    gyms.sort(key=lambda x: x[20])\n    gyms.sort(key=lambda x: x[21])\n    gyms.sort(key=lambda x: x[22])\n    gyms.sort(key=lambda x: x[23])\n    gyms.sort(key=lambda x: x[24])\n    gyms.sort(key=lambda x: x[25])\n    gyms.sort(key=lambda x: x[26])\n    gyms.sort(key=lambda x: x[27])\n    gyms.sort(key=lambda x: x[28])\n    gyms.sort(key=lambda x: x[29])\n    gyms.sort(key=lambda x: x[30])\n    gyms.sort(key=lambda x: x[31])\n    gyms.sort(key=lambda x: x[32])\n    gyms.sort(key=lambda x: x[33])\n    gyms.sort(key=lambda x: x[34])\n    gyms.sort(key=lambda x: x[35])\n    gyms.sort(key=lambda x: x[36])\n    gyms.sort(key=lambda x: x[37])\n    gyms.sort(key=lambda x: x[38])\n    gyms.sort(key=lambda x: x[39])\n    gyms.sort(key=lambda x: x[40])\n    gyms.sort(key=lambda x: x[41])\n    gyms.sort(key=lambda x: x[42])\n    gyms.sort(key=lambda x: x[43])\n    gyms.sort(key=lambda x: x[44])\n    gyms.sort(key=lambda x: x[45])\n    gyms.sort(key=lambda x: x[46])\n    gyms.sort(key=lambda x: x[47])\n    gyms.sort(key=lambda x: x[48])\n    gyms.sort(key=lambda x: x[49])\n    gyms.sort(key=lambda x: x[50])\n    gyms.sort(key=lambda x: x[51])\n    gyms.sort(key=lambda x: x[52])\n    gyms.sort(key=lambda x: x[53])\n    gyms.sort(key=lambda x: x[54])\n    gyms.sort(key=lambda x: x[55])\n    gyms.sort(key=lambda x: x[56])\n    gyms.sort(key=lambda x: x[57])\n    gyms.sort(key=lambda x: x[58])\n    gyms.sort(key=lambda x: x[59])\n    gyms.sort(key=lambda x: x[60])\n    gyms.sort(key=lambda x: x[61])\n    gyms.sort(key=lambda x: x[62])\n    gyms.sort(key=lambda x: x[63])\n    gyms.sort(key=lambda x: x[64])\n    gyms.sort(key=lambda x: x[65])\n    gyms.sort(key=lambda x: x[66])\n    gyms.sort(key=lambda x: x[67])\n    gyms.sort(key=lambda x: x[68])\n    gyms.sort(key=lambda x: x[69])\n    gyms.sort(key=lambda x: x[70])\n    gyms.sort(key=lambda x"
    },
    {
        "number": 3960,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    f = 0\n    for i in range(n):\n        f += a[i] * (i + 1)\n    return str(f)\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 a[i] \u2264 10^9\n\n-----Time Limit: 1.5 seconds per test case.\n\n-----Example:\n\nInput\n5\n1 4 2 3 1\n\nOutput\n3\nInput\n4 5 7 1\n\nOutput\n6\n\nExplanation\n\nThe optimal value of f is 3.\n\n\"\"\"\n\nclass Solution:\n    def maximumValue(self, n: int, a: List[int]) -> str:\n        \n        def f(l, r):\n            if l == r:\n                return 0\n            \n            if l == r - 1:\n                return a[l] - a[l + 1]\n            \n            return a[l] * (l + 1) + a[l + 1] * (l + 1)\n        \n        return str(max(f(0, n - 1), f(1, n - 1)))\n"
    },
    {
        "number": 3961,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    m = n + 1\n    dp = [0] * (m + 1)\n    dp[1] = 1\n    for i in range(2, m + 1):\n        dp[i] = (dp[i - 1] + p[i - 1]) % 1000000007\n    return str(dp[m])\n"
    },
    {
        "number": 3962,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l_i = [int(i) for i in stdin.split()]\n    r_i = [int(i) for i in stdin.split()]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i = r_i[::-1]\n    l_i = l_i[:n]\n    r_i = r_i[:n]\n    l_i.sort()\n    r_i.sort()\n    l_i = l_i[::-1]\n    r_i ="
    },
    {
        "number": 3963,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, b = map(int, stdin.split())\n    if n == 1:\n        return str(m)\n    if n == 2:\n        return str(m + m - b)\n    if n == 3:\n        return str(m + m - b + m - b)\n    if n == 4:\n        return str(m + m - b + m - b + m - b)\n    if n == 5:\n        return str(m + m - b + m - b + m - b + m - b)\n    if n == 6:\n        return str(m + m - b + m - b + m - b + m - b + m - b)\n    if n == 7:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 8:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 9:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 10:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 11:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 12:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 13:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 14:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 15:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 16:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 17:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 18:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 19:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 20:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 21:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 22:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 23:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 24:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 25:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b)\n    if n == 26:\n        return str(m + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m - b + m -"
    },
    {
        "number": 3964,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, b, mod = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i] for i in range(n, n + m, m)]\n    a.sort()\n    a = [a[i]"
    },
    {
        "number": 3965,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    answer = \"\"\n    for i in range(n):\n        for j in range(n):\n            if p[i][j] == 1:\n                answer += \"a\"\n            elif p[i][j] == 2:\n                answer += \"e\"\n            elif p[i][j] == 3:\n                answer += \"i\"\n            elif p[i][j] == 4:\n                answer += \"o\"\n            elif p[i][j] == 5:\n                answer += \"u\"\n            elif p[i][j] == 6:\n                answer += \"y\"\n            else:\n                answer += \" \"\n        answer += \"\\n\"\n    return answer\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= p[i][j] <= 100\n\n-----Time Limit: 1 sec (py3)\n\n-----Space Limit: 1MB (py3)\n\n-----Alternatives\n\n1. Use a stack to store the words.\n2. Use a queue to store the words.\n3. Use a stack to store the words.\n4. Use a queue to store the words.\n5. Use a stack to store the words.\n6. Use a queue to store the words.\n7. Use a stack to store the words.\n8. Use a queue to store the words.\n9. Use a stack to store the words.\n10. Use a queue to store the words.\n11. Use a stack to store the words.\n12. Use a queue to store the words.\n13. Use a stack to store the words.\n14. Use a queue to store the words.\n15. Use a stack to store the words.\n16. Use a queue to store the words.\n17. Use a stack to store the words.\n18. Use a queue to store the words.\n19. Use a stack to store the words.\n20. Use a queue to store the words.\n21. Use a stack to store the words.\n22. Use a queue to store the words.\n23. Use a stack to store the words.\n24. Use a queue to store the words.\n25. Use a stack to store the words.\n26. Use a queue to store the words.\n27. Use a stack to store the words.\n28. Use a queue to store the words.\n29. Use a stack to store the words.\n30. Use a queue to store the words.\n31. Use a stack to store the words.\n32. Use a queue to store the words.\n33. Use a stack to store the words.\n34. Use a queue to store the words.\n35. Use a stack to store the words.\n36. Use a queue to store the words.\n37. Use a stack to store the words.\n38. Use a queue to store the words.\n39. Use a stack to store the words.\n40. Use a queue to store the words.\n41. Use a stack to store the words.\n42. Use a queue to store the words.\n43. Use a stack to store the words.\n44. Use a queue to store the words.\n45. Use a stack to store the words.\n46. Use a queue to store the words.\n47. Use a stack to store the words.\n48. Use a queue to store the words.\n49. Use a stack to store the words.\n50. Use a queue to store the words.\n51. Use a stack to store the words.\n52. Use a queue to store the words.\n53. Use a stack to store the words.\n54. Use a queue to store the words.\n55. Use a stack to store the words.\n56. Use a queue to store the words.\n57. Use a stack to store the words.\n58. Use a queue to store the words.\n59. Use a stack to store the words.\n60. Use a queue to store the words.\n61. Use a stack to store the words.\n62. Use a queue to store the words.\n63. Use a stack to store the words.\n64. Use a queue to store the words.\n65. Use a stack to store the words.\n66. Use a queue to store the words.\n67. Use a stack to store the words.\n68. Use a queue to store the words.\n69. Use a stack to store the words.\n70. Use a queue to store the words.\n71. Use a stack to store the words.\n72. Use a queue to store the words.\n73. Use a stack to store the words.\n74. Use a queue to store the words.\n75. Use a stack to store the words.\n76. Use a stack to store the words.\n77. Use a stack to store the words.\n78. Use a stack to store the words.\n79. Use a stack to store the words.\n80. Use a stack to store the words.\n81. Use a stack to store the words.\n82. Use a stack to store the words.\n83. Use a stack to store the words.\n84. Use a stack to store the words.\n85. Use a stack to store the words.\n86. Use a stack to store the words.\n87. Use a stack to store the words.\n88. Use a stack to store the words.\n89. Use a stack to store the words.\n90. Use a stack to store the words.\n91. Use a stack to store the words.\n92. Use a stack to store the words.\n93. Use a stack to store the words.\n94. Use a stack to store the words.\n95. Use a stack to store the words.\n96. Use a stack to store the words.\n97. Use a stack to store the words.\n98. Use a stack to store the words.\n99. Use a stack to store the words.\n100. Use a stack to store the words.\n101. Use a stack to store the words.\n102. Use a stack to store the words.\n103. Use a stack to store the words.\n104. Use a stack to store"
    },
    {
        "number": 3966,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1 = list(map(int, stdin.strip().split()))\n    a_2 = list(map(int, stdin.strip().split()))\n    a_3 = list(map(int, stdin.strip().split()))\n    a_4 = list(map(int, stdin.strip().split()))\n    a_5 = list(map(int, stdin.strip().split()))\n    a_6 = list(map(int, stdin.strip().split()))\n    a_7 = list(map(int, stdin.strip().split()))\n    a_8 = list(map(int, stdin.strip().split()))\n    a_9 = list(map(int, stdin.strip().split()))\n    a_10 = list(map(int, stdin.strip().split()))\n    a_11 = list(map(int, stdin.strip().split()))\n    a_12 = list(map(int, stdin.strip().split()))\n    a_13 = list(map(int, stdin.strip().split()))\n    a_14 = list(map(int, stdin.strip().split()))\n    a_15 = list(map(int, stdin.strip().split()))\n    a_16 = list(map(int, stdin.strip().split()))\n    a_17 = list(map(int, stdin.strip().split()))\n    a_18 = list(map(int, stdin.strip().split()))\n    a_19 = list(map(int, stdin.strip().split()))\n    a_20 = list(map(int, stdin.strip().split()))\n    a_21 = list(map(int, stdin.strip().split()))\n    a_22 = list(map(int, stdin.strip().split()))\n    a_23 = list(map(int, stdin.strip().split()))\n    a_24 = list(map(int, stdin.strip().split()))\n    a_25 = list(map(int, stdin.strip().split()))\n    a_26 = list(map(int, stdin.strip().split()))\n    a_27 = list(map(int, stdin.strip().split()))\n    a_28 = list(map(int, stdin.strip().split()))\n    a_29 = list(map(int, stdin.strip().split()))\n    a_30 = list(map(int, stdin.strip().split()))\n    a_31 = list(map(int, stdin.strip().split()))\n    a_32 = list(map(int, stdin.strip().split()))\n    a_33 = list(map(int, stdin.strip().split()))\n    a_34 = list(map(int, stdin.strip().split()))\n    a_35 = list(map(int, stdin.strip().split()))\n    a_36 = list(map(int, stdin.strip().split()))\n    a_37 = list(map(int, stdin.strip().split()))\n    a_38 = list(map(int, stdin.strip().split()))\n    a_39 = list(map(int, stdin.strip().split()))\n    a_40 = list(map(int, stdin.strip().split()))\n    a_41 = list(map(int, stdin.strip().split()))\n    a_42 = list(map(int, stdin.strip().split()))\n    a_43 = list(map(int, stdin.strip().split()))\n    a_44 = list(map(int, stdin.strip().split()))\n    a_45 = list(map(int, stdin.strip().split()))\n    a_46 = list(map(int, stdin.strip().split()))\n    a_47 = list(map(int, stdin.strip().split()))\n    a_48 = list(map(int, stdin.strip().split()))\n    a_49 = list(map(int, stdin.strip().split()))\n    a_50 = list(map(int, stdin.strip().split()))\n    a_51 = list(map(int, stdin.strip().split()))\n    a_52 = list(map(int, stdin.strip().split()))\n    a_53 = list(map(int, stdin.strip().split()))\n    a_54 = list(map(int, stdin.strip().split()))\n    a_55 = list(map(int, stdin.strip().split()))\n    a_56 = list(map(int, stdin.strip().split()))\n    a_57 = list(map(int, stdin.strip().split()))\n    a_58 = list(map(int, stdin.strip().split()))\n    a_59 = list(map(int, stdin.strip().split()))\n    a_60 = list(map(int, stdin.strip().split()))\n    a_61 = list(map(int, stdin.strip().split()))\n    a_62 = list(map(int, stdin.strip().split()))\n    a_63 = list(map(int, stdin.strip().split()))\n    a_64 = list(map(int, stdin.strip().split()))\n    a_65 = list(map(int, stdin.strip().split()))\n    a_66 = list(map(int, stdin.strip().split()))\n    a_67 = list(map(int, stdin.strip().split()))\n    a_68 = list(map(int, stdin.strip().split()))\n    a_69 = list(map(int, stdin.strip().split()))\n    a_70 = list(map(int, stdin.strip().split()))\n    a_71 = list(map(int, stdin.strip().split()))\n    a_72 = list(map(int, stdin.strip().split()))\n    a_73 = list(map(int, stdin.strip().split()))\n    a_74 = list(map(int, stdin.strip().split()))\n    a_75 = list(map(int, stdin.strip().split()))\n    a_76 = list(map("
    },
    {
        "number": 3967,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a[i] for i in range(n)]\n    a.sort()\n    a = [a["
    },
    {
        "number": 3968,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n    C.sort()\n    \n    def check(i):\n        if i == N:\n            return True\n        if i < N:\n            if C[i] - C[i-1] > D:\n                return False\n            else:\n                return check(i+1)\n        else:\n            return False\n    \n    answer = []\n    for i in range(N):\n        if check(i):\n            answer.append(i)\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 3969,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    x = [x[i] for i in range(n)]\n    x.sort()\n    x = [x[i] for i in range(n, m)]\n    x.sort()\n    x = [x[i] for i in range(m, n)]\n    x.sort()\n    x = [x[i] for i in range(m, n, -1)]\n    x.sort()\n    x = [x[i] for i in range(m, n, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x.sort()\n    x = [x[i] for i in range(n, m, -1)]\n    x."
    },
    {
        "number": 3970,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a_len = len(a)\n    if a_len == 1:\n        return str(a[0])\n    if a_len == 2:\n        return str(a[0] * a[1])\n    if a_len == 3:\n        return str(a[0] * a[1] * a[2])\n    if a_len == 4:\n        return str(a[0] * a[1] * a[2] * a[3])\n    if a_len == 5:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4])\n    if a_len == 6:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5])\n    if a_len == 7:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6])\n    if a_len == 8:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7])\n    if a_len == 9:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8])\n    if a_len == 10:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9])\n    if a_len == 11:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10])\n    if a_len == 12:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11])\n    if a_len == 13:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12])\n    if a_len == 14:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13])\n    if a_len == 15:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14])\n    if a_len == 16:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15])\n    if a_len == 17:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16])\n    if a_len == 18:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17])\n    if a_len == 19:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18])\n    if a_len == 20:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18] * a[19])\n    if a_len == 21:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18] * a[19] * a[20])\n    if a_len == 22:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18] * a[19] * a[20] * a[21])\n    if a_len == 23:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a[5] * a[6] * a[7] * a[8] * a[9] * a[10] * a[11] * a[12] * a[13] * a[14] * a[15] * a[16] * a[17] * a[18] * a[19] * a[20] * a[21] * a[22])\n    if a_len == 24:\n        return str(a[0] * a[1] * a[2] * a[3] * a[4] * a["
    },
    {
        "number": 3971,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            answer += a[i]\n        else:\n            answer += a[i] + 1\n    return str(answer)\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Submissions-----\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n\"\"\"\n\nclass Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        \n        def dfs(i, j):\n            if i == j:\n                return 0\n            \n            if i == j:\n                return 1\n            \n            if points[i][0] == points[j][0]:\n                return dfs(i, j-1) + dfs(i+1, j)\n            \n            return max(dfs(i+1, j), dfs(i, j-1))\n        \n        return max(dfs(0, len(points)-1), dfs(0, 0))\n"
    },
    {
        "number": 3972,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:\n        return \"130\"\n    if n == 131:\n        return \"131\"\n    if n == 132:\n        return \"132\"\n    if n == 133:\n        return \"133\"\n    if n == 134:\n        return \"134\"\n    if n == 135:\n        return \"135\"\n    if n == 136:\n        return \"136\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_1 = 1\n    a_2 = 1\n    a_3 = 1\n    a_4 = 1\n    a_5 = 1\n    a_6 = 1\n    a_7 = 1\n    a_8 = 1\n    a_9 = 1\n    a_10 = 1\n    a_11 = 1\n    a_12 = 1\n    a_13 = 1\n    a_14 = 1\n    a_15 = 1\n    a_16 = 1\n    a_17 = 1\n    a_18 = 1\n    a_19 = 1\n    a_20 = 1\n    a_21 = 1\n    a_22 = 1\n    a_23 = 1\n    a_24 = 1\n    a_25 = 1\n    a_26 = 1\n    a_27 = 1\n    a_28 = 1\n    a_29 = 1\n    a_30 = 1\n    a_31 = 1\n    a_32 = 1\n    a_33 = 1\n    a_34 = 1\n    a_35 = 1\n    a_36 = 1\n    a_37 = 1\n    a_38 = 1\n    a_39 = 1\n    a_40 = 1\n    a_41 = 1\n    a_42 = 1\n    a_43 = 1\n    a_44 = 1\n    a_45 = 1\n    a_46 = 1\n    a_47 = 1\n    a_48 = 1\n    a_49 = 1\n    a_50 = 1\n    a_51 = 1\n    a_52 = 1\n    a_53 = 1\n    a_54 = 1\n    a_55 = 1\n    a_56 = 1\n    a_57 = 1\n    a_58 = 1\n    a_59 = 1\n    a_60 = 1\n    a_61 = 1\n    a_62 = 1\n    a_63 = 1\n    a_64 = 1\n    a_65 = 1\n    a_66 = 1\n    a_67 = 1\n    a_68 = 1\n    a_69 = 1\n    a_70 = 1\n    a_71 = 1\n    a_72 = 1\n    a_73 = 1\n    a_74 = 1\n    a_75 = 1\n    a_76 = 1\n    a_77 = 1\n    a_78 = 1\n    a_79 = 1\n    a_80 = 1\n    a_81 = 1\n    a_82 = 1\n    a_83 = 1\n    a_84 = 1\n    a_85 = 1\n    a_86 = 1\n    a_87 = 1\n    a_88 = 1\n    a_89 = 1\n    a_90 = 1\n    a_91 = 1\n    a_92 = 1\n    a_93 = 1\n    a_94 = 1\n    a_95 = 1\n    a_96 = 1\n    a_97 = 1\n    a_98 = 1\n    a_99 = 1\n    a_100 = 1\n    a_101 = 1\n    a_102 = 1\n    a_103 = 1\n    a_104 = 1\n    a_105 = 1\n    a_106 = 1\n    a_107 = 1\n    a_108 = 1\n    a_109 = 1\n    a_110 = 1\n    a_111 = 1\n    a_112 = 1\n    a_113 = 1\n    a_114 = 1\n    a_115 = 1\n    a_116 = 1\n    a_117 = 1\n    a_118 = 1\n    a_119 = 1\n    a_120 = 1\n    a_121 = 1\n    a_122 = 1\n    a_123 = 1\n    a_124 = 1\n    a_125 = 1\n    a_126 = 1\n    a_127 = 1\n    a_128 = 1\n    a_129 = 1\n    a_130 = 1\n    a_131 = 1\n    a_132 = 1\n    a_133 = 1\n    a_134 = 1\n    a_135 = 1\n    a_136 = 1\n    a_137 = 1\n    a_138 = 1\n    a_139 = 1\n    a_140 = 1\n    a_141 = 1\n    a_142 = 1\n    a_143 = 1\n    a_144 = 1\n    a_145 = 1\n    a_146 = 1\n    a_147 = 1\n    a_148 = 1\n    a_149 = 1\n    a_150 = 1\n    a_151 = 1\n    a_152 = 1\n    a_153 = 1\n    a_154 = 1\n    a_155 = 1\n    a_156 = 1\n    a_157 = 1\n    a_158 = 1\n    a_159 = 1\n    a_160 = 1\n    a_161 = 1\n    a_162 = 1\n    a_163 = 1\n    a_164 = 1\n    a_165 = 1\n    a_166 = 1\n    a_167 = 1\n    a_168 = 1\n    a_169 = 1\n    a_170 = 1\n    a_171 = 1\n    a_172 = 1\n    a_173 = 1\n    a_174 = 1\n    a_175 = 1\n    a_176 = 1\n    a_177 = 1\n    a_178 = 1\n    a_179 = 1\n    a_180 = 1\n    a_181 = 1\n    a_182 = 1\n    a_183 = 1\n    a_184 = 1\n    a_185 = 1\n    a_186 = 1\n    a_187 = 1\n    a_188 = 1\n    a_189 = 1\n    a_190 = 1\n    a_191 = 1\n    a_192 = 1\n    a_193 = 1\n    a_194 = 1\n    a_195 = 1\n    a_196 = 1\n    a_197 = 1\n    a_198 = 1\n    a_199 = 1\n    a_200 = 1\n    a_201 = 1\n    a_202 = 1\n    a_203 = 1\n    a_204 = 1\n    a_205 = 1\n    a_206 = 1\n    a_207 = 1\n    a_208 = 1\n    a_209 = 1\n    a_210 = 1\n    a_211 = 1\n    a_212 = 1\n    a_213 = 1\n    a_214 = 1\n    a_215 = 1\n    a_216 = 1\n    a_217 = 1\n    a_218 = 1\n    a_219 = 1\n    a_220 = 1\n    a_221 = 1\n    a_222 = 1\n    a_223 = 1\n    a_224"
    },
    {
        "number": 3974,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:\n        return \"130\"\n    if n == 131:\n        return \"131\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    inputs = [int(i) for i in stdin.split()]\n    inputs.sort()\n    output = \"\"\n    for i in inputs:\n        if i == 0:\n            output += \"0\"\n        elif i == 1:\n            output += \"1\"\n        elif i == 2:\n            output += \"0\"\n        elif i == 3:\n            output += \"1\"\n        else:\n            output += \"0\"\n    return output\n\ndef"
    },
    {
        "number": 3976,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = list(map(int, stdin.split()))\n    b.sort()\n    q = []\n    for i in range(n):\n        if a[i] + p <= b[i]:\n            q.append(i)\n    if len(q) == 0:\n        return \"0\"\n    else:\n        return str(q[0]) + \" \" + str(q[-1])\n"
    },
    {
        "number": 3977,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def dfs(u, visited):\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                dfs(v, visited)\n    \n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited)\n    \n    def count_edges(u, visited):\n        count = 0\n        for v in graph[u]:\n            if not visited[v]:\n                count += 1\n                dfs(v, visited)\n        return count\n    \n    return max(count_edges(i, visited) for i in range(n))\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= c_1, c_2,..., c_{k} <= n\n1 <= u_{i} <= n\n1 <= v_{i} <= n\n\n-----Time Limit: 1 second\n-----Memory Limit: 1GB\n\n-----Example 1:\n\nInput\n3 3 1\n1 2\n1 3\n2 3\n\nOutput\n2\n\nExplanation\n\nGraph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\n\nGraph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\nExample 2:\n\nInput\n3 3 1\n1 2\n1 3\n2 3\n\nOutput\n0\n\nExplanation\n\nGraph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\n\nGraph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\nExample 3:\n\nInput\n3 3 1\n1 2\n1 3\n2 3\n\nOutput\n0\n\nExplanation\n\nGraph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\n\nGraph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\nExample 4:\n\nInput\n3 3 1\n1 2\n1 3\n2 3\n\nOutput\n2\n\nExplanation\n\nGraph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\n\nGraph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\nExample 5:\n\nInput\n3 3 1\n1 2\n1 3\n2 3\n\nOutput\n0\n\nExplanation\n\nGraph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\n\nGraph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\nExample 6:\n\nInput\n3 3 1\n1 2\n1 3\n2 3\n\nOutput\n2\n\nExplanation\n\nGraph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\n\nGraph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\nExample 7:\n\nInput\n3 3 1\n1 2\n1 3\n2 3\n\nOutput\n0\n\nExplanation\n\nGraph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\n\nGraph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\nExample 8:\n\nInput\n3 3 1\n1 2\n1 3\n2 3\n\nOutput\n2\n\nExplanation\n\nGraph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\n\nGraph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\nExample 9:\n\nInput\n3 3 1\n1 2\n1 3\n2 3\n\nOutput\n0\n\nExplanation\n\nGraph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2"
    },
    {
        "number": 3978,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 0\n    for i in range(n):\n        if a[i] % 3 == 0:\n            answer += a[i] // 3\n        elif a[i] % 3 == 1:\n            answer += a[i] // 3\n        elif a[i] % 3 == 2:\n            answer += a[i] // 3\n    return str(answer)\n\nprint(solution(\"6\"))\nprint(solution(\"4\"))\nprint(solution(\"8\"))\n"
    },
    {
        "number": 3979,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    words = [list(map(int, stdin.split())) for _ in range(n)]\n    answer = []\n    for i in range(n):\n        for j in range(m):\n            if words[i][j] == 1:\n                answer.append(j)\n    answer.sort()\n    for i in answer:\n        print(i, end=\"\")\n    return \"Yes\" if len(answer) > 1 else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3980,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return ''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127:\n        return '127'\n    if n == 128:\n        return '128'\n    if n == 129:\n        return '129'\n    if n == 130:\n        return '130'\n    if n == 131:\n        return '131'\n    if n == 132:\n        return '132'\n    if n == 133:\n        return '133"
    },
    {
        "number": 3981,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    x, y = abs(x), abs(y)\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y!= 0:\n        return \"NO\"\n    if x!= 0 and y == 0:\n        return \"NO\"\n    if x!= 0 and y!= 0:\n        return \"YES\"\n    if x == 0 and y!= 0:\n        return \"YES\"\n    if x!= 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    if x == 0 and y == 0:"
    },
    {
        "number": 3982,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # TODO: Write your code here\n    \n    return ''\n\ndef"
    },
    {
        "number": 3983,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    G = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        G[a - 1].append(b - 1)\n        G[b - 1].append(a - 1)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i].remove(j)\n    for i in range(N):\n        G[i].sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i] == G[j]:\n                G[i]."
    },
    {
        "number": 3984,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    k = int(s[0])\n    l = int(s[1])\n    r = int(s[2])\n    if l > r:\n        return \"Mike\"\n    if l == r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l > r:\n        return \"Ann\"\n    if l > r:\n        return \"Mike\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    if l < r:\n        return \"Ann\"\n    if l < r:\n        return \"Mike\"\n    "
    },
    {
        "number": 3985,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = m % n\n    if m == 0:\n        return str(n)\n    else:\n        return str(n) +'' + str(m)\n"
    },
    {
        "number": 3986,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"-1\"\n    if n == k:\n        return \"\".join(sorted(stdin))\n    if n == k + 1:\n        return \"\".join(sorted(stdin)[::-1])\n    if n == k + 2:\n        return \"\".join(sorted(stdin)[::-2])\n    if n == k + 3:\n        return \"\".join(sorted(stdin)[::-3])\n    if n == k + 4:\n        return \"\".join(sorted(stdin)[::-4])\n    if n == k + 5:\n        return \"\".join(sorted(stdin)[::-5])\n    if n == k + 6:\n        return \"\".join(sorted(stdin)[::-6])\n    if n == k + 7:\n        return \"\".join(sorted(stdin)[::-7])\n    if n == k + 8:\n        return \"\".join(sorted(stdin)[::-8])\n    if n == k + 9:\n        return \"\".join(sorted(stdin)[::-9])\n    if n == k + 10:\n        return \"\".join(sorted(stdin)[::-10])\n    if n == k + 11:\n        return \"\".join(sorted(stdin)[::-11])\n    if n == k + 12:\n        return \"\".join(sorted(stdin)[::-12])\n    if n == k + 13:\n        return \"\".join(sorted(stdin)[::-13])\n    if n == k + 14:\n        return \"\".join(sorted(stdin)[::-14])\n    if n == k + 15:\n        return \"\".join(sorted(stdin)[::-15])\n    if n == k + 16:\n        return \"\".join(sorted(stdin)[::-16])\n    if n == k + 17:\n        return \"\".join(sorted(stdin)[::-17])\n    if n == k + 18:\n        return \"\".join(sorted(stdin)[::-18])\n    if n == k + 19:\n        return \"\".join(sorted(stdin)[::-19])\n    if n == k + 20:\n        return \"\".join(sorted(stdin)[::-20])\n    if n == k + 21:\n        return \"\".join(sorted(stdin)[::-21])\n    if n == k + 22:\n        return \"\".join(sorted(stdin)[::-22])\n    if n == k + 23:\n        return \"\".join(sorted(stdin)[::-23])\n    if n == k + 24:\n        return \"\".join(sorted(stdin)[::-24])\n    if n == k + 25:\n        return \"\".join(sorted(stdin)[::-25])\n    if n == k + 26:\n        return \"\".join(sorted(stdin)[::-26])\n    if n == k + 27:\n        return \"\".join(sorted(stdin)[::-27])\n    if n == k + 28:\n        return \"\".join(sorted(stdin)[::-28])\n    if n == k + 29:\n        return \"\".join(sorted(stdin)[::-29])\n    if n == k + 30:\n        return \"\".join(sorted(stdin)[::-30])\n    if n == k + 31:\n        return \"\".join(sorted(stdin)[::-31])\n    if n == k + 32:\n        return \"\".join(sorted(stdin)[::-32])\n    if n == k + 33:\n        return \"\".join(sorted(stdin)[::-33])\n    if n == k + 34:\n        return \"\".join(sorted(stdin)[::-34])\n    if n == k + 35:\n        return \"\".join(sorted(stdin)[::-35])\n    if n == k + 36:\n        return \"\".join(sorted(stdin)[::-36])\n    if n == k + 37:\n        return \"\".join(sorted(stdin)[::-37])\n    if n == k + 38:\n        return \"\".join(sorted(stdin)[::-38])\n    if n == k + 39:\n        return \"\".join(sorted(stdin)[::-39])\n    if n == k + 40:\n        return \"\".join(sorted(stdin)[::-40])\n    if n == k + 41:\n        return \"\".join(sorted(stdin)[::-41])\n    if n == k + 42:\n        return \"\".join(sorted(stdin)[::-42])\n    if n == k + 43:\n        return \"\".join(sorted(stdin)[::-43])\n    if n == k + 44:\n        return \"\".join(sorted(stdin)[::-44])\n    if n == k + 45:\n        return \"\".join(sorted(stdin)[::-45])\n    if n == k + 46:\n        return \"\".join(sorted(stdin)[::-46])\n    if n == k + 47:\n        return \"\".join(sorted(stdin)[::-47])\n    if n == k + 48:\n        return \"\".join(sorted(stdin)[::-48])\n    if n == k + 49:\n        return \"\".join(sorted(stdin)[::-49])\n    if n == k + 50:\n        return \"\".join(sorted(stdin)[::-50])\n    if n == k + 51:\n        return \"\".join(sorted(stdin)[::-51])\n    if n == k + 52:\n        return \"\".join(sorted(stdin)[::-52])\n    if n == k + 53:\n        return \"\".join(sorted(stdin)[::-53])\n    if n == k + 54:\n        return \"\".join(sorted(stdin)[::-54])\n    if n == k + 55:\n        return \"\".join(sorted(stdin)[::-55])\n    if n == k + 56:\n        return \"\".join(sorted(stdin)[::-56])\n    if n == k + 57:\n        return \"\".join(sorted(stdin)[::-57])\n    if n == k + 58:\n        return \"\".join(sorted(stdin)[::-58])\n    if n == k + 59:\n        return \"\".join(sorted(stdin)[::-59])\n    if n == k + 60:\n        return \"\".join(sorted(stdin)[::-60])\n    if n == k + 61:\n        return \"\".join(sorted(stdin)[::-"
    },
    {
        "number": 3987,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l = 0\n    r = n - 1\n    while l < r:\n        if a[l] < a[r]:\n            l += 1\n        else:\n            r -= 1\n    return str(l)\n\nprint(solution(\"1 2 1 2\"))\nprint(solution(\"10\"))\nprint(solution(\"100\"))\nprint(solution(\"1000\"))\nprint(solution(\"10000\"))\nprint(solution(\"100000\"))\nprint(solution(\"1000000000\"))\nprint(solution(\"10000000000\"))\nprint(solution(\"1000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000\"))\nprint(solution(\"10000000000000"
    },
    {
        "number": 3988,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, t = map(int, stdin.split())\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n    \n    def dfs(u, visited):\n        visited[u] = True\n        for v, t in graph[u]:\n            if not visited[v]:\n                dfs(v, visited)\n        return visited\n    \n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            dfs(i, visited)\n    \n    for i in range(n):\n        "
    },
    {
        "number": 3989,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(len(a)):\n        if a[i] == 0:\n            a[i] = '0'\n    return ''.join(a)\n"
    },
    {
        "number": 3990,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    u, v = map(int, stdin.split())\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n        return -1\n    if u > v:\n        u, v = v, u\n    if u == v:\n"
    },
    {
        "number": 3991,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    sum = 0\n    for i in range(n):\n        sum += x[i] - x[i+1]\n    return str(sum % (10**9 + 7))\n\ndef"
    },
    {
        "number": 3992,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    if a[-1] == 0:\n        return '-1'\n    if a[-1] == 1:\n        return str(n)\n    if a[-1] == 2:\n        return str(n) +'' + str(n)\n    if a[-1] == 3:\n        return str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 4:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 5:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 6:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 7:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 8:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 9:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 10:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 11:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 12:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 13:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 14:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 15:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 16:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n)\n    if a[-1] == 17:\n        return str(n) +'' + str(n) +'' + str(n) +'' + str(n) +'' + str(n) +''"
    },
    {
        "number": 3993,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    p_1, p_2, p_m = map(int, stdin.split())\n    \n    if p_1 < p_2 < p_m:\n        return str(1)\n    \n    if p_1 < p_2 < p_m:\n        return str(k)\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1))\n    \n    if p_1 < p_2 < p_m:\n        return str(k * (p_m - p_1"
    },
    {
        "number": 3994,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    a = [int(i) for i in s.split()]\n    b = [int(i) for i in s.split()]\n    a.sort()\n    b.sort()\n    a_i = a[0]\n    b_i = b[0]\n    for i in range(1, n):\n        a_i = a[i]\n        b_i = b[i]\n        if a_i < b_i:\n            a_i += 1\n            b_i -= 1\n        else:\n            a_i -= 1\n            b_i += 1\n        a.append(a_i)\n        b.append(b_i)\n    return str(len(set(a)))\n\nprint(solution
    },
    {
        "number": 3995,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    if n % 2 == 0:\n        return \"\".join(s[n//2:])\n    else:\n        return \"\".join(s[n//2:n//2+1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 3996,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    p = a[n//2]\n    q = a[n//2-1]\n    p = p * 10**9 + 7\n    q = q * 10**9 + 7\n    p = p // 10**9 + 7\n    q = q // 10**9 + 7\n    return str(p/q)\n\n-----Constraints-----\n1 <= k <= 10^5\n1 <= a_i <= 10^18\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Submissions-----\n7\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3997,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    dist = [0] * n\n    for i in range(n):\n        dist[i] = a[i]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            dist[j] = max(dist[j], dist[i] + a[j])\n    return str(dist.index(max(dist)))\n\ndef"
    },
    {
        "number": 3998,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    r = list(map(int, stdin.strip().split()))\n    t = 0\n    for i in range(n):\n        t += r[i]\n    for i in range(n):\n        if t < r[i]:\n            t = r[i]\n    return str(t)\n\n-----Constraints-----\n1 <= n <= 100\n1 <= r_1, r_2,..., r_{n} <= 100\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 megabyte\n\n-----Alternatives\n\n1. Use a dictionary to store the friends' ratings.\n2. Use a for-loop to iterate over the friends' ratings.\n3. Use a while-loop to iterate over the friends' ratings.\n4. Use a while-loop to iterate over the friends' ratings.\n5. Use a while-loop to iterate over the friends' ratings.\n6. Use a while-loop to iterate over the friends' ratings.\n7. Use a while-loop to iterate over the friends' ratings.\n8. Use a while-loop to iterate over the friends' ratings.\n9. Use a while-loop to iterate over the friends' ratings.\n10. Use a while-loop to iterate over the friends' ratings.\n11. Use a while-loop to iterate over the friends' ratings.\n12. Use a while-loop to iterate over the friends' ratings.\n13. Use a while-loop to iterate over the friends' ratings.\n14. Use a while-loop to iterate over the friends' ratings.\n15. Use a while-loop to iterate over the friends' ratings.\n16. Use a while-loop to iterate over the friends' ratings.\n17. Use a while-loop to iterate over the friends' ratings.\n18. Use a while-loop to iterate over the friends' ratings.\n19. Use a while-loop to iterate over the friends' ratings.\n20. Use a while-loop to iterate over the friends' ratings.\n21. Use a while-loop to iterate over the friends' ratings.\n22. Use a while-loop to iterate over the friends' ratings.\n23. Use a while-loop to iterate over the friends' ratings.\n24. Use a while-loop to iterate over the friends' ratings.\n25. Use a while-loop to iterate over the friends' ratings.\n26. Use a while-loop to iterate over the friends' ratings.\n27. Use a while-loop to iterate over the friends' ratings.\n28. Use a while-loop to iterate over the friends' ratings.\n29. Use a while-loop to iterate over the friends' ratings.\n30. Use a while-loop to iterate over the friends' ratings.\n31. Use a while-loop to iterate over the friends' ratings.\n32. Use a while-loop to iterate over the friends' ratings.\n33. Use a while-loop to iterate over the friends' ratings.\n34. Use a while-loop to iterate over the friends' ratings.\n35. Use a while-loop to iterate over the friends' ratings.\n36. Use a while-loop to iterate over the friends' ratings.\n37. Use a while-loop to iterate over the friends' ratings.\n38. Use a while-loop to iterate over the friends' ratings.\n39. Use a while-loop to iterate over the friends' ratings.\n40. Use a while-loop to iterate over the friends' ratings.\n41. Use a while-loop to iterate over the friends' ratings.\n42. Use a while-loop to iterate over the friends' ratings.\n43. Use a while-loop to iterate over the friends' ratings.\n44. Use a while-loop to iterate over the friends' ratings.\n45. Use a while-loop to iterate over the friends' ratings.\n46. Use a while-loop to iterate over the friends' ratings.\n47. Use a while-loop to iterate over the friends' ratings.\n48. Use a while-loop to iterate over the friends' ratings.\n49. Use a while-loop to iterate over the friends' ratings.\n50. Use a while-loop to iterate over the friends' ratings.\n51. Use a while-loop to iterate over the friends' ratings.\n52. Use a while-loop to iterate over the friends' ratings.\n53. Use a while-loop to iterate over the friends' ratings.\n54. Use a while-loop to iterate over the friends' ratings.\n55. Use a while-loop to iterate over the friends' ratings.\n56. Use a while-loop to iterate over the friends' ratings.\n57. Use a while-loop to iterate over the friends' ratings.\n58. Use a while-loop to iterate over the friends' ratings.\n59. Use a while-loop to iterate over the friends' ratings.\n60. Use a while-loop to iterate over the friends' ratings.\n61. Use a while-loop to iterate over the friends' ratings.\n62. Use a while-loop to iterate over the friends' ratings.\n63. Use a while-loop to iterate over the friends' ratings.\n64. Use a while-loop to iterate over the friends' ratings.\n65. Use a while-loop to iterate over the friends' ratings.\n66. Use a while-loop to iterate over the friends' ratings.\n67. Use a while-loop to iterate over the friends' ratings.\n68. Use a while-loop to iterate over the friends' ratings.\n69. Use a while-loop to iterate over the friends' ratings.\n70. Use a while-loop to iterate over the friends' ratings.\n71. Use a while-loop to iterate over the friends' ratings.\n72. Use a while-loop to iterate over the friends' ratings.\n73. Use a while-loop to iterate over the friends' ratings.\n74. Use a while-loop to iterate over the friends' ratings.\n75. Use a while-loop to iterate over the friends' ratings.\n76. Use a while-loop to iterate over the friends' ratings.\n77. Use a while-loop to iterate over the friends' ratings.\n78. Use a while-loop"
    },
    {
        "number": 3999,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    C = [list(map(int, input().split())) for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if C[i][j] == 0:\n                for k in range(4):\n                    if i+k < N and j+k < N:\n                        if C[i+k][j+k] == 0:\n                            C[i+k][j+k] = C[i][j] + C[i][j] + C[i][j] + C[i][j]\n                        else:\n                            C[i+k][j+k] = C[i][j] + C[i][j] + C[i][j] + C[i][j]\n                    else:\n                        C[i+k][j+k] = C[i][j] + C[i][j] + C[i][j] + C[i][j]\n    return str(len(set(C)))\n\nprint(solution(6))\n"
    }
]